{"pr_number": 5992, "pr_title": "[2.21.x] Add micrometer support", "pr_createdAt": "2020-04-15T18:55:08Z", "pr_url": "https://github.com/codice/ddf/pull/5992", "timeline": [{"oid": "b2c12ee9787cdb6274ebe025bd4d7f2516724550", "url": "https://github.com/codice/ddf/commit/b2c12ee9787cdb6274ebe025bd4d7f2516724550", "message": "Add metrics", "committedDate": "2020-04-14T21:50:24Z", "type": "commit"}, {"oid": "f47a08dda48a3c0ba9d348b81a4479fa9ff3a9b5", "url": "https://github.com/codice/ddf/commit/f47a08dda48a3c0ba9d348b81a4479fa9ff3a9b5", "message": "Some updates for 2.21.x", "committedDate": "2020-04-15T18:40:44Z", "type": "commit"}, {"oid": "67733e953a74a96571caa3aee6902cb5a551c7ba", "url": "https://github.com/codice/ddf/commit/67733e953a74a96571caa3aee6902cb5a551c7ba", "message": "Apply some updates", "committedDate": "2020-04-15T22:10:47Z", "type": "commit"}, {"oid": "0d9b3d49e3d87c396c1e6d1fa5aef6018da692ca", "url": "https://github.com/codice/ddf/commit/0d9b3d49e3d87c396c1e6d1fa5aef6018da692ca", "message": "Fix some dependency issues", "committedDate": "2020-04-15T23:25:54Z", "type": "commit"}, {"oid": "892fa840c486e6ce2140233f73225afd420c39fd", "url": "https://github.com/codice/ddf/commit/892fa840c486e6ce2140233f73225afd420c39fd", "message": "Make some dynamic meters use tags instead of a prefix", "committedDate": "2020-04-20T15:27:30Z", "type": "commit"}, {"oid": "892fa840c486e6ce2140233f73225afd420c39fd", "url": "https://github.com/codice/ddf/commit/892fa840c486e6ce2140233f73225afd420c39fd", "message": "Make some dynamic meters use tags instead of a prefix", "committedDate": "2020-04-20T15:27:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDM0Mg==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411480342", "bodyText": "\u2757 Based on the check above, meterRegistry can be null and thus, we need to protect ourselves here since we will end up with a lot of NPEs. On top of that, all the counters and other metrics objects will result in NPE later.", "author": "paouelle", "createdAt": "2020-04-20T15:38:51Z", "path": "catalog/core/catalog-core-metricsplugin/src/main/java/ddf/catalog/metrics/CatalogMetrics.java", "diffHunk": "@@ -50,94 +50,97 @@\n public final class CatalogMetrics\n     implements PreQueryPlugin, PostQueryPlugin, PostIngestPlugin, PostResourcePlugin {\n \n-  protected static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n+  protected static final String METRIC_PREFIX = \"ddf.catalog\";\n \n-  protected static final String QUERIES_SCOPE = \"Queries\";\n+  protected static final String EXCEPTIONS_SCOPE = \"exceptions\";\n \n-  protected static final String INGEST_SCOPE = \"Ingest\";\n+  protected static final String QUERIES_SCOPE = \"queries\";\n \n-  protected static final String RESOURCE_SCOPE = \"Resource\";\n+  protected static final String INGEST_SCOPE = \"ingest\";\n \n-  protected final MetricRegistry metrics = new MetricRegistry();\n+  protected static final String RESOURCE_SCOPE = \"resource\";\n \n-  protected final JmxReporter reporter =\n-      JmxReporter.forRegistry(metrics).inDomain(\"ddf.metrics.catalog\").build();\n+  protected final MeterRegistry meterRegistry;\n \n-  protected final Histogram resultCount;\n+  protected final DistributionSummary resultCount;\n \n-  protected final Meter exceptions;\n+  protected final Counter exceptions;\n \n-  protected final Meter unsupportedQueryExceptions;\n+  protected final Counter unsupportedQueryExceptions;\n \n-  protected final Meter sourceUnavailableExceptions;\n+  protected final Counter sourceUnavailableExceptions;\n \n-  protected final Meter federationExceptions;\n+  protected final Counter federationExceptions;\n \n-  protected final Meter queries;\n+  protected final Counter queries;\n \n-  protected final Meter federatedQueries;\n+  protected final Counter federatedQueries;\n \n-  protected final Meter comparisonQueries;\n+  protected final Counter comparisonQueries;\n \n-  protected final Meter spatialQueries;\n+  protected final Counter spatialQueries;\n \n-  protected final Meter xpathQueries;\n+  protected final Counter xpathQueries;\n \n-  protected final Meter fuzzyQueries;\n+  protected final Counter fuzzyQueries;\n \n-  protected final Meter functionQueries;\n+  protected final Counter functionQueries;\n \n-  protected final Meter temporalQueries;\n+  protected final Counter temporalQueries;\n \n-  protected final Meter createdMetacards;\n+  protected final Counter createdMetacards;\n \n-  protected final Meter updatedMetacards;\n+  protected final Counter updatedMetacards;\n \n-  protected final Meter deletedMetacards;\n+  protected final Counter deletedMetacards;\n \n-  protected final Meter resourceRetrival;\n+  protected final Counter resourceRetrival;\n \n   private final FilterAdapter filterAdapter;\n \n-  public CatalogMetrics(FilterAdapter filterAdapter) {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CatalogMetrics.class);\n \n+  public CatalogMetrics(FilterAdapter filterAdapter, MeterRegistryService meterRegistryService) {\n     this.filterAdapter = filterAdapter;\n \n-    resultCount =\n-        metrics.register(\n-            MetricRegistry.name(QUERIES_SCOPE, \"TotalResults\"),\n-            new Histogram(new SlidingTimeWindowReservoir(1, TimeUnit.MINUTES)));\n-\n-    queries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE));\n-    federatedQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Federated\"));\n-    comparisonQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Comparison\"));\n-    spatialQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Spatial\"));\n-    xpathQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Xpath\"));\n-    fuzzyQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Fuzzy\"));\n-    temporalQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Temporal\"));\n-    functionQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Function\"));\n-\n-    exceptions = metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE));\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"Meter Registry Service is not available\");\n+    }\n+\n+    meterRegistry = meterRegistryService.getMeterRegistry();", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDY4MA==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411480680", "bodyText": "\u2757 meterRegistryService should be annotated with @NotNull", "author": "paouelle", "createdAt": "2020-04-20T15:39:13Z", "path": "catalog/core/catalog-core-metricsplugin/src/main/java/ddf/catalog/metrics/CatalogMetrics.java", "diffHunk": "@@ -50,94 +50,97 @@\n public final class CatalogMetrics\n     implements PreQueryPlugin, PostQueryPlugin, PostIngestPlugin, PostResourcePlugin {\n \n-  protected static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n+  protected static final String METRIC_PREFIX = \"ddf.catalog\";\n \n-  protected static final String QUERIES_SCOPE = \"Queries\";\n+  protected static final String EXCEPTIONS_SCOPE = \"exceptions\";\n \n-  protected static final String INGEST_SCOPE = \"Ingest\";\n+  protected static final String QUERIES_SCOPE = \"queries\";\n \n-  protected static final String RESOURCE_SCOPE = \"Resource\";\n+  protected static final String INGEST_SCOPE = \"ingest\";\n \n-  protected final MetricRegistry metrics = new MetricRegistry();\n+  protected static final String RESOURCE_SCOPE = \"resource\";\n \n-  protected final JmxReporter reporter =\n-      JmxReporter.forRegistry(metrics).inDomain(\"ddf.metrics.catalog\").build();\n+  protected final MeterRegistry meterRegistry;\n \n-  protected final Histogram resultCount;\n+  protected final DistributionSummary resultCount;\n \n-  protected final Meter exceptions;\n+  protected final Counter exceptions;\n \n-  protected final Meter unsupportedQueryExceptions;\n+  protected final Counter unsupportedQueryExceptions;\n \n-  protected final Meter sourceUnavailableExceptions;\n+  protected final Counter sourceUnavailableExceptions;\n \n-  protected final Meter federationExceptions;\n+  protected final Counter federationExceptions;\n \n-  protected final Meter queries;\n+  protected final Counter queries;\n \n-  protected final Meter federatedQueries;\n+  protected final Counter federatedQueries;\n \n-  protected final Meter comparisonQueries;\n+  protected final Counter comparisonQueries;\n \n-  protected final Meter spatialQueries;\n+  protected final Counter spatialQueries;\n \n-  protected final Meter xpathQueries;\n+  protected final Counter xpathQueries;\n \n-  protected final Meter fuzzyQueries;\n+  protected final Counter fuzzyQueries;\n \n-  protected final Meter functionQueries;\n+  protected final Counter functionQueries;\n \n-  protected final Meter temporalQueries;\n+  protected final Counter temporalQueries;\n \n-  protected final Meter createdMetacards;\n+  protected final Counter createdMetacards;\n \n-  protected final Meter updatedMetacards;\n+  protected final Counter updatedMetacards;\n \n-  protected final Meter deletedMetacards;\n+  protected final Counter deletedMetacards;\n \n-  protected final Meter resourceRetrival;\n+  protected final Counter resourceRetrival;\n \n   private final FilterAdapter filterAdapter;\n \n-  public CatalogMetrics(FilterAdapter filterAdapter) {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CatalogMetrics.class);\n \n+  public CatalogMetrics(FilterAdapter filterAdapter, MeterRegistryService meterRegistryService) {", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjM4NQ==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411482385", "bodyText": "\u2757 We should have one query counter use different tag values to represent the type of query: federated, comparison, spatial, path, fuzzy, temporal, function. If some of those can be combined (i.e. not mutually exclusive), then let's use separate tags with a true or false value.", "author": "paouelle", "createdAt": "2020-04-20T15:41:27Z", "path": "catalog/core/catalog-core-metricsplugin/src/main/java/ddf/catalog/metrics/CatalogMetrics.java", "diffHunk": "@@ -50,94 +50,97 @@\n public final class CatalogMetrics\n     implements PreQueryPlugin, PostQueryPlugin, PostIngestPlugin, PostResourcePlugin {\n \n-  protected static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n+  protected static final String METRIC_PREFIX = \"ddf.catalog\";\n \n-  protected static final String QUERIES_SCOPE = \"Queries\";\n+  protected static final String EXCEPTIONS_SCOPE = \"exceptions\";\n \n-  protected static final String INGEST_SCOPE = \"Ingest\";\n+  protected static final String QUERIES_SCOPE = \"queries\";\n \n-  protected static final String RESOURCE_SCOPE = \"Resource\";\n+  protected static final String INGEST_SCOPE = \"ingest\";\n \n-  protected final MetricRegistry metrics = new MetricRegistry();\n+  protected static final String RESOURCE_SCOPE = \"resource\";\n \n-  protected final JmxReporter reporter =\n-      JmxReporter.forRegistry(metrics).inDomain(\"ddf.metrics.catalog\").build();\n+  protected final MeterRegistry meterRegistry;\n \n-  protected final Histogram resultCount;\n+  protected final DistributionSummary resultCount;\n \n-  protected final Meter exceptions;\n+  protected final Counter exceptions;\n \n-  protected final Meter unsupportedQueryExceptions;\n+  protected final Counter unsupportedQueryExceptions;\n \n-  protected final Meter sourceUnavailableExceptions;\n+  protected final Counter sourceUnavailableExceptions;\n \n-  protected final Meter federationExceptions;\n+  protected final Counter federationExceptions;\n \n-  protected final Meter queries;\n+  protected final Counter queries;\n \n-  protected final Meter federatedQueries;\n+  protected final Counter federatedQueries;\n \n-  protected final Meter comparisonQueries;\n+  protected final Counter comparisonQueries;\n \n-  protected final Meter spatialQueries;\n+  protected final Counter spatialQueries;\n \n-  protected final Meter xpathQueries;\n+  protected final Counter xpathQueries;\n \n-  protected final Meter fuzzyQueries;\n+  protected final Counter fuzzyQueries;\n \n-  protected final Meter functionQueries;\n+  protected final Counter functionQueries;\n \n-  protected final Meter temporalQueries;\n+  protected final Counter temporalQueries;\n \n-  protected final Meter createdMetacards;\n+  protected final Counter createdMetacards;\n \n-  protected final Meter updatedMetacards;\n+  protected final Counter updatedMetacards;\n \n-  protected final Meter deletedMetacards;\n+  protected final Counter deletedMetacards;\n \n-  protected final Meter resourceRetrival;\n+  protected final Counter resourceRetrival;\n \n   private final FilterAdapter filterAdapter;\n \n-  public CatalogMetrics(FilterAdapter filterAdapter) {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CatalogMetrics.class);\n \n+  public CatalogMetrics(FilterAdapter filterAdapter, MeterRegistryService meterRegistryService) {\n     this.filterAdapter = filterAdapter;\n \n-    resultCount =\n-        metrics.register(\n-            MetricRegistry.name(QUERIES_SCOPE, \"TotalResults\"),\n-            new Histogram(new SlidingTimeWindowReservoir(1, TimeUnit.MINUTES)));\n-\n-    queries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE));\n-    federatedQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Federated\"));\n-    comparisonQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Comparison\"));\n-    spatialQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Spatial\"));\n-    xpathQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Xpath\"));\n-    fuzzyQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Fuzzy\"));\n-    temporalQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Temporal\"));\n-    functionQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Function\"));\n-\n-    exceptions = metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE));\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"Meter Registry Service is not available\");\n+    }\n+\n+    meterRegistry = meterRegistryService.getMeterRegistry();\n+    resultCount = meterRegistry.summary(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"totalresults\");\n+\n+    queries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE);\n+    federatedQueries =", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MzMzNg==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411483336", "bodyText": "\u2757 The next 3 counters seems to be the same counter with different reasons. We should have one counter for tracking errors and then use different tag values for representing the reason.", "author": "paouelle", "createdAt": "2020-04-20T15:42:41Z", "path": "catalog/core/catalog-core-metricsplugin/src/main/java/ddf/catalog/metrics/CatalogMetrics.java", "diffHunk": "@@ -50,94 +50,97 @@\n public final class CatalogMetrics\n     implements PreQueryPlugin, PostQueryPlugin, PostIngestPlugin, PostResourcePlugin {\n \n-  protected static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n+  protected static final String METRIC_PREFIX = \"ddf.catalog\";\n \n-  protected static final String QUERIES_SCOPE = \"Queries\";\n+  protected static final String EXCEPTIONS_SCOPE = \"exceptions\";\n \n-  protected static final String INGEST_SCOPE = \"Ingest\";\n+  protected static final String QUERIES_SCOPE = \"queries\";\n \n-  protected static final String RESOURCE_SCOPE = \"Resource\";\n+  protected static final String INGEST_SCOPE = \"ingest\";\n \n-  protected final MetricRegistry metrics = new MetricRegistry();\n+  protected static final String RESOURCE_SCOPE = \"resource\";\n \n-  protected final JmxReporter reporter =\n-      JmxReporter.forRegistry(metrics).inDomain(\"ddf.metrics.catalog\").build();\n+  protected final MeterRegistry meterRegistry;\n \n-  protected final Histogram resultCount;\n+  protected final DistributionSummary resultCount;\n \n-  protected final Meter exceptions;\n+  protected final Counter exceptions;\n \n-  protected final Meter unsupportedQueryExceptions;\n+  protected final Counter unsupportedQueryExceptions;\n \n-  protected final Meter sourceUnavailableExceptions;\n+  protected final Counter sourceUnavailableExceptions;\n \n-  protected final Meter federationExceptions;\n+  protected final Counter federationExceptions;\n \n-  protected final Meter queries;\n+  protected final Counter queries;\n \n-  protected final Meter federatedQueries;\n+  protected final Counter federatedQueries;\n \n-  protected final Meter comparisonQueries;\n+  protected final Counter comparisonQueries;\n \n-  protected final Meter spatialQueries;\n+  protected final Counter spatialQueries;\n \n-  protected final Meter xpathQueries;\n+  protected final Counter xpathQueries;\n \n-  protected final Meter fuzzyQueries;\n+  protected final Counter fuzzyQueries;\n \n-  protected final Meter functionQueries;\n+  protected final Counter functionQueries;\n \n-  protected final Meter temporalQueries;\n+  protected final Counter temporalQueries;\n \n-  protected final Meter createdMetacards;\n+  protected final Counter createdMetacards;\n \n-  protected final Meter updatedMetacards;\n+  protected final Counter updatedMetacards;\n \n-  protected final Meter deletedMetacards;\n+  protected final Counter deletedMetacards;\n \n-  protected final Meter resourceRetrival;\n+  protected final Counter resourceRetrival;\n \n   private final FilterAdapter filterAdapter;\n \n-  public CatalogMetrics(FilterAdapter filterAdapter) {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CatalogMetrics.class);\n \n+  public CatalogMetrics(FilterAdapter filterAdapter, MeterRegistryService meterRegistryService) {\n     this.filterAdapter = filterAdapter;\n \n-    resultCount =\n-        metrics.register(\n-            MetricRegistry.name(QUERIES_SCOPE, \"TotalResults\"),\n-            new Histogram(new SlidingTimeWindowReservoir(1, TimeUnit.MINUTES)));\n-\n-    queries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE));\n-    federatedQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Federated\"));\n-    comparisonQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Comparison\"));\n-    spatialQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Spatial\"));\n-    xpathQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Xpath\"));\n-    fuzzyQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Fuzzy\"));\n-    temporalQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Temporal\"));\n-    functionQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Function\"));\n-\n-    exceptions = metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE));\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"Meter Registry Service is not available\");\n+    }\n+\n+    meterRegistry = meterRegistryService.getMeterRegistry();\n+    resultCount = meterRegistry.summary(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"totalresults\");\n+\n+    queries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE);\n+    federatedQueries =\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"federated\");\n+    comparisonQueries =\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"comparison\");\n+    spatialQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"spatial\");\n+    xpathQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"xpath\");\n+    fuzzyQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"fuzzy\");\n+    temporalQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"temporal\");\n+    functionQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"function\");\n+\n+    exceptions = meterRegistry.counter(METRIC_PREFIX + \".\" + EXCEPTIONS_SCOPE);\n     unsupportedQueryExceptions =", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4Mzg0OA==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411483848", "bodyText": "\u2757 Similar for the next 3. They seemed to be the same counter with different operation tag values.", "author": "paouelle", "createdAt": "2020-04-20T15:43:20Z", "path": "catalog/core/catalog-core-metricsplugin/src/main/java/ddf/catalog/metrics/CatalogMetrics.java", "diffHunk": "@@ -50,94 +50,97 @@\n public final class CatalogMetrics\n     implements PreQueryPlugin, PostQueryPlugin, PostIngestPlugin, PostResourcePlugin {\n \n-  protected static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n+  protected static final String METRIC_PREFIX = \"ddf.catalog\";\n \n-  protected static final String QUERIES_SCOPE = \"Queries\";\n+  protected static final String EXCEPTIONS_SCOPE = \"exceptions\";\n \n-  protected static final String INGEST_SCOPE = \"Ingest\";\n+  protected static final String QUERIES_SCOPE = \"queries\";\n \n-  protected static final String RESOURCE_SCOPE = \"Resource\";\n+  protected static final String INGEST_SCOPE = \"ingest\";\n \n-  protected final MetricRegistry metrics = new MetricRegistry();\n+  protected static final String RESOURCE_SCOPE = \"resource\";\n \n-  protected final JmxReporter reporter =\n-      JmxReporter.forRegistry(metrics).inDomain(\"ddf.metrics.catalog\").build();\n+  protected final MeterRegistry meterRegistry;\n \n-  protected final Histogram resultCount;\n+  protected final DistributionSummary resultCount;\n \n-  protected final Meter exceptions;\n+  protected final Counter exceptions;\n \n-  protected final Meter unsupportedQueryExceptions;\n+  protected final Counter unsupportedQueryExceptions;\n \n-  protected final Meter sourceUnavailableExceptions;\n+  protected final Counter sourceUnavailableExceptions;\n \n-  protected final Meter federationExceptions;\n+  protected final Counter federationExceptions;\n \n-  protected final Meter queries;\n+  protected final Counter queries;\n \n-  protected final Meter federatedQueries;\n+  protected final Counter federatedQueries;\n \n-  protected final Meter comparisonQueries;\n+  protected final Counter comparisonQueries;\n \n-  protected final Meter spatialQueries;\n+  protected final Counter spatialQueries;\n \n-  protected final Meter xpathQueries;\n+  protected final Counter xpathQueries;\n \n-  protected final Meter fuzzyQueries;\n+  protected final Counter fuzzyQueries;\n \n-  protected final Meter functionQueries;\n+  protected final Counter functionQueries;\n \n-  protected final Meter temporalQueries;\n+  protected final Counter temporalQueries;\n \n-  protected final Meter createdMetacards;\n+  protected final Counter createdMetacards;\n \n-  protected final Meter updatedMetacards;\n+  protected final Counter updatedMetacards;\n \n-  protected final Meter deletedMetacards;\n+  protected final Counter deletedMetacards;\n \n-  protected final Meter resourceRetrival;\n+  protected final Counter resourceRetrival;\n \n   private final FilterAdapter filterAdapter;\n \n-  public CatalogMetrics(FilterAdapter filterAdapter) {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CatalogMetrics.class);\n \n+  public CatalogMetrics(FilterAdapter filterAdapter, MeterRegistryService meterRegistryService) {\n     this.filterAdapter = filterAdapter;\n \n-    resultCount =\n-        metrics.register(\n-            MetricRegistry.name(QUERIES_SCOPE, \"TotalResults\"),\n-            new Histogram(new SlidingTimeWindowReservoir(1, TimeUnit.MINUTES)));\n-\n-    queries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE));\n-    federatedQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Federated\"));\n-    comparisonQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Comparison\"));\n-    spatialQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Spatial\"));\n-    xpathQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Xpath\"));\n-    fuzzyQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Fuzzy\"));\n-    temporalQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Temporal\"));\n-    functionQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Function\"));\n-\n-    exceptions = metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE));\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"Meter Registry Service is not available\");\n+    }\n+\n+    meterRegistry = meterRegistryService.getMeterRegistry();\n+    resultCount = meterRegistry.summary(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"totalresults\");\n+\n+    queries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE);\n+    federatedQueries =\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"federated\");\n+    comparisonQueries =\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"comparison\");\n+    spatialQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"spatial\");\n+    xpathQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"xpath\");\n+    fuzzyQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"fuzzy\");\n+    temporalQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"temporal\");\n+    functionQueries = meterRegistry.counter(METRIC_PREFIX + \".\" + QUERIES_SCOPE + \".\" + \"function\");\n+\n+    exceptions = meterRegistry.counter(METRIC_PREFIX + \".\" + EXCEPTIONS_SCOPE);\n     unsupportedQueryExceptions =\n-        metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE, \"UnsupportedQuery\"));\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + EXCEPTIONS_SCOPE + \".\" + \"unsupportedquery\");\n     sourceUnavailableExceptions =\n-        metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE, \"SourceUnavailable\"));\n-    federationExceptions = metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE, \"Federation\"));\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + EXCEPTIONS_SCOPE + \".\" + \"sourceunavailable\");\n+    federationExceptions =\n+        meterRegistry.counter(METRIC_PREFIX + \".\" + EXCEPTIONS_SCOPE + \".\" + \"federation\");\n \n-    createdMetacards = metrics.meter(MetricRegistry.name(INGEST_SCOPE, \"Created\"));\n-    updatedMetacards = metrics.meter(MetricRegistry.name(INGEST_SCOPE, \"Updated\"));\n-    deletedMetacards = metrics.meter(MetricRegistry.name(INGEST_SCOPE, \"Deleted\"));\n+    createdMetacards = meterRegistry.counter(METRIC_PREFIX + \".\" + INGEST_SCOPE + \".\" + \"created\");", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4NDU1Mg==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411484552", "bodyText": "\u2757 Can we add a tag to all these counters to identify the source?", "author": "paouelle", "createdAt": "2020-04-20T15:44:11Z", "path": "catalog/core/catalog-core-metricsplugin/src/main/java/ddf/catalog/metrics/CatalogMetrics.java", "diffHunk": "@@ -50,94 +50,97 @@\n public final class CatalogMetrics\n     implements PreQueryPlugin, PostQueryPlugin, PostIngestPlugin, PostResourcePlugin {\n \n-  protected static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n+  protected static final String METRIC_PREFIX = \"ddf.catalog\";\n \n-  protected static final String QUERIES_SCOPE = \"Queries\";\n+  protected static final String EXCEPTIONS_SCOPE = \"exceptions\";\n \n-  protected static final String INGEST_SCOPE = \"Ingest\";\n+  protected static final String QUERIES_SCOPE = \"queries\";\n \n-  protected static final String RESOURCE_SCOPE = \"Resource\";\n+  protected static final String INGEST_SCOPE = \"ingest\";\n \n-  protected final MetricRegistry metrics = new MetricRegistry();\n+  protected static final String RESOURCE_SCOPE = \"resource\";\n \n-  protected final JmxReporter reporter =\n-      JmxReporter.forRegistry(metrics).inDomain(\"ddf.metrics.catalog\").build();\n+  protected final MeterRegistry meterRegistry;\n \n-  protected final Histogram resultCount;\n+  protected final DistributionSummary resultCount;\n \n-  protected final Meter exceptions;\n+  protected final Counter exceptions;\n \n-  protected final Meter unsupportedQueryExceptions;\n+  protected final Counter unsupportedQueryExceptions;\n \n-  protected final Meter sourceUnavailableExceptions;\n+  protected final Counter sourceUnavailableExceptions;\n \n-  protected final Meter federationExceptions;\n+  protected final Counter federationExceptions;\n \n-  protected final Meter queries;\n+  protected final Counter queries;\n \n-  protected final Meter federatedQueries;\n+  protected final Counter federatedQueries;\n \n-  protected final Meter comparisonQueries;\n+  protected final Counter comparisonQueries;\n \n-  protected final Meter spatialQueries;\n+  protected final Counter spatialQueries;\n \n-  protected final Meter xpathQueries;\n+  protected final Counter xpathQueries;\n \n-  protected final Meter fuzzyQueries;\n+  protected final Counter fuzzyQueries;\n \n-  protected final Meter functionQueries;\n+  protected final Counter functionQueries;\n \n-  protected final Meter temporalQueries;\n+  protected final Counter temporalQueries;\n \n-  protected final Meter createdMetacards;\n+  protected final Counter createdMetacards;\n \n-  protected final Meter updatedMetacards;\n+  protected final Counter updatedMetacards;\n \n-  protected final Meter deletedMetacards;\n+  protected final Counter deletedMetacards;\n \n-  protected final Meter resourceRetrival;\n+  protected final Counter resourceRetrival;\n \n   private final FilterAdapter filterAdapter;\n \n-  public CatalogMetrics(FilterAdapter filterAdapter) {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CatalogMetrics.class);\n \n+  public CatalogMetrics(FilterAdapter filterAdapter, MeterRegistryService meterRegistryService) {\n     this.filterAdapter = filterAdapter;\n \n-    resultCount =\n-        metrics.register(\n-            MetricRegistry.name(QUERIES_SCOPE, \"TotalResults\"),\n-            new Histogram(new SlidingTimeWindowReservoir(1, TimeUnit.MINUTES)));\n-\n-    queries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE));\n-    federatedQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Federated\"));\n-    comparisonQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Comparison\"));\n-    spatialQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Spatial\"));\n-    xpathQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Xpath\"));\n-    fuzzyQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Fuzzy\"));\n-    temporalQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Temporal\"));\n-    functionQueries = metrics.meter(MetricRegistry.name(QUERIES_SCOPE, \"Function\"));\n-\n-    exceptions = metrics.meter(MetricRegistry.name(EXCEPTIONS_SCOPE));\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"Meter Registry Service is not available\");\n+    }\n+\n+    meterRegistry = meterRegistryService.getMeterRegistry();", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4NjA3OQ==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411486079", "bodyText": "\u2757 * import", "author": "paouelle", "createdAt": "2020-04-20T15:46:10Z", "path": "catalog/core/catalog-core-metricsplugin/src/test/java/ddf/catalog/metrics/CatalogMetricsTest.java", "diffHunk": "@@ -18,39 +18,25 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-import com.codahale.metrics.MetricRegistry;\n import ddf.catalog.data.Metacard;\n import ddf.catalog.data.types.Core;\n import ddf.catalog.federation.FederationException;\n import ddf.catalog.filter.FilterAdapter;\n import ddf.catalog.filter.FilterBuilder;\n import ddf.catalog.filter.proxy.adapter.GeotoolsFilterAdapterImpl;\n import ddf.catalog.filter.proxy.builder.GeotoolsFilterBuilder;\n-import ddf.catalog.operation.CreateRequest;\n-import ddf.catalog.operation.CreateResponse;\n-import ddf.catalog.operation.DeleteRequest;\n-import ddf.catalog.operation.DeleteResponse;\n-import ddf.catalog.operation.ProcessingDetails;\n-import ddf.catalog.operation.QueryRequest;\n-import ddf.catalog.operation.QueryResponse;\n-import ddf.catalog.operation.ResourceResponse;\n-import ddf.catalog.operation.Update;\n-import ddf.catalog.operation.UpdateRequest;\n-import ddf.catalog.operation.UpdateResponse;\n+import ddf.catalog.operation.*;", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4NjI2NA==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411486264", "bodyText": "\u2757 * import", "author": "paouelle", "createdAt": "2020-04-20T15:46:24Z", "path": "catalog/core/catalog-core-metricsplugin/src/test/java/ddf/catalog/metrics/CatalogMetricsTest.java", "diffHunk": "@@ -18,39 +18,25 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-import com.codahale.metrics.MetricRegistry;\n import ddf.catalog.data.Metacard;\n import ddf.catalog.data.types.Core;\n import ddf.catalog.federation.FederationException;\n import ddf.catalog.filter.FilterAdapter;\n import ddf.catalog.filter.FilterBuilder;\n import ddf.catalog.filter.proxy.adapter.GeotoolsFilterAdapterImpl;\n import ddf.catalog.filter.proxy.builder.GeotoolsFilterBuilder;\n-import ddf.catalog.operation.CreateRequest;\n-import ddf.catalog.operation.CreateResponse;\n-import ddf.catalog.operation.DeleteRequest;\n-import ddf.catalog.operation.DeleteResponse;\n-import ddf.catalog.operation.ProcessingDetails;\n-import ddf.catalog.operation.QueryRequest;\n-import ddf.catalog.operation.QueryResponse;\n-import ddf.catalog.operation.ResourceResponse;\n-import ddf.catalog.operation.Update;\n-import ddf.catalog.operation.UpdateRequest;\n-import ddf.catalog.operation.UpdateResponse;\n+import ddf.catalog.operation.*;\n import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n import ddf.catalog.operation.impl.QueryImpl;\n import ddf.catalog.operation.impl.QueryRequestImpl;\n import ddf.catalog.operation.impl.QueryResponseImpl;\n import ddf.catalog.source.SourceUnavailableException;\n import ddf.catalog.source.UnsupportedQueryException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;\n+import java.util.*;", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4ODQ2OQ==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411488469", "bodyText": "\u2757 javadoc for class", "author": "paouelle", "createdAt": "2020-04-20T15:49:16Z", "path": "libs/metrics/meter-registry-service/src/main/java/org/codice/ddf/lib/metrics/registry/PrometheusMeterRegistryFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.lib.metrics.registry;\n+\n+import io.micrometer.prometheus.PrometheusConfig;\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PrometheusMeterRegistryFactory {", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4OTA5NA==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411489094", "bodyText": "\u2757 javadoc for class and public methods/constructors", "author": "paouelle", "createdAt": "2020-04-20T15:50:05Z", "path": "libs/metrics/meter-registry/src/main/java/org/codice/ddf/lib/metrics/registry/MeterRegistryServiceImpl.java", "diffHunk": "@@ -11,28 +11,25 @@\n  * License is distributed along with this program and can be found at\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n-package ddf.metrics.reporting.internal;\n+package org.codice.ddf.lib.metrics.registry;\n \n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.Response.Status;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n-/**\n- * Exception thrown when a {@link ddf.metrics.reporting.internal.rest.MetricsEndpoint} encounters\n- * problems during its graphing.\n- *\n- * @since 2.1.0\n- * @author Hugh Rodgers\n- */\n-public class MetricsEndpointException extends WebApplicationException {\n-  /** The Constant serialVersionUID. */\n-  private static final long serialVersionUID = 1L;\n+public class MeterRegistryServiceImpl implements MeterRegistryService {", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4OTQ2Mg==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411489462", "bodyText": "\u2757 javadoc for class and public methods and ctors", "author": "paouelle", "createdAt": "2020-04-20T15:50:32Z", "path": "libs/metrics/metrics-endpoint/src/main/java/org/codice/ddf/lib/metrics/endpoint/MetricsEndpoint.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.lib.metrics.endpoint;\n+\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.codice.ddf.lib.metrics.registry.MeterRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/\")\n+public class MetricsEndpoint {", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4OTkyNg==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411489926", "bodyText": "\u2757 meterRegistryService should be annotated with @Nullable", "author": "paouelle", "createdAt": "2020-04-20T15:51:05Z", "path": "libs/metrics/metrics-endpoint/src/main/java/org/codice/ddf/lib/metrics/endpoint/MetricsEndpoint.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.lib.metrics.endpoint;\n+\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.codice.ddf.lib.metrics.registry.MeterRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/\")\n+public class MetricsEndpoint {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MetricsEndpoint.class);\n+  private final MeterRegistryService meterRegistryService;\n+\n+  public MetricsEndpoint(MeterRegistryService meterRegistryService) {", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MDIyMw==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411490223", "bodyText": "\u2757 annotate with @Nullable", "author": "paouelle", "createdAt": "2020-04-20T15:51:28Z", "path": "libs/metrics/metrics-endpoint/src/main/java/org/codice/ddf/lib/metrics/endpoint/MetricsEndpoint.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.lib.metrics.endpoint;\n+\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.codice.ddf.lib.metrics.registry.MeterRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/\")\n+public class MetricsEndpoint {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MetricsEndpoint.class);\n+  private final MeterRegistryService meterRegistryService;", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MDM4NA==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411490384", "bodyText": "\u2757 NPE", "author": "paouelle", "createdAt": "2020-04-20T15:51:39Z", "path": "libs/metrics/metrics-endpoint/src/main/java/org/codice/ddf/lib/metrics/endpoint/MetricsEndpoint.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.lib.metrics.endpoint;\n+\n+import io.micrometer.prometheus.PrometheusMeterRegistry;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.codice.ddf.lib.metrics.registry.MeterRegistryService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"/\")\n+public class MetricsEndpoint {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MetricsEndpoint.class);\n+  private final MeterRegistryService meterRegistryService;\n+\n+  public MetricsEndpoint(MeterRegistryService meterRegistryService) {\n+    LOGGER.debug(\"Starting Metrics endpoint...\");\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"MeterRegistryService is null!\");\n+    }\n+    this.meterRegistryService = meterRegistryService;\n+  }\n+\n+  @GET\n+  public Response getMetrics(\n+      @Context HttpServletRequest request, @Context HttpServletResponse response) {\n+    PrometheusMeterRegistry metrics =\n+        (PrometheusMeterRegistry) meterRegistryService.getMeterRegistry();", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTg3OQ==", "url": "https://github.com/codice/ddf/pull/5992#discussion_r411511879", "bodyText": "Should this say \"A DistributionSummary can be used instead...\"?", "author": "figliold", "createdAt": "2020-04-20T16:19:10Z", "path": "catalog/core/catalog-core-sourcemetricsplugin/src/main/java/ddf/catalog/metrics/source/SourceMetricsImpl.java", "diffHunk": "@@ -26,144 +28,43 @@\n import ddf.catalog.plugin.PostFederatedQueryPlugin;\n import ddf.catalog.plugin.PreFederatedQueryPlugin;\n import ddf.catalog.plugin.StopProcessingException;\n-import ddf.catalog.source.CatalogProvider;\n-import ddf.catalog.source.FederatedSource;\n import ddf.catalog.source.Source;\n-import ddf.metrics.collector.rrd4j.RrdJmxCollector;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import org.apache.commons.lang.StringUtils;\n-import org.codice.ddf.platform.util.StandardThreadFactoryBuilder;\n+import org.codice.ddf.lib.metrics.registry.MeterRegistryService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/**\n- * This class manages the metrics for individual {@link CatalogProvider} and {@link FederatedSource}\n- * {@link Source}s. These metrics currently include the count of queries, results per query, and\n- * exceptions per {@link Source}.\n- *\n- * <p>The metrics and their associated {@link ddf.metrics.collector.JmxCollector}s are created when\n- * the {@link Source} is created and deleted when the {@link Source} is deleted. (The associated RRD\n- * file remains available indefinitely and accessible from the Metrics tab in the Web Admin console\n- * unless an administrator manually deletes it).\n- *\n- * <p>If a {@link Source} is renamed, i.e., its ID changed, then the {@link Source}'s existing\n- * metrics' MBeans and {@link ddf.metrics.collector.JmxCollector}s are deleted and new metrics\n- * created using the new {@link Source} 's ID. However, the RRD file for the {@link Source}'s\n- * previous source ID remains available and accessible from the Metrics tab in the Web Admin console\n- * unless an administrator manually deletes it.\n- *\n- * @author rodgersh\n- */\n public class SourceMetricsImpl implements PreFederatedQueryPlugin, PostFederatedQueryPlugin {\n \n-  /** Package name for the JMX MBean where metrics for {@link Source}s are stored. */\n-  public static final String MBEAN_PACKAGE_NAME = \"ddf.metrics.catalog.source\";\n-\n-  /**\n-   * Name of the JMX MBean scope for source-level metrics tracking exceptions while querying a\n-   * specific {@link Source}\n-   */\n-  public static final String EXCEPTIONS_SCOPE = \"Exceptions\";\n-\n-  /**\n-   * Name of the JMX MBean scope for source-level metrics tracking query count while querying a\n-   * specific {@link Source}\n-   */\n-  public static final String QUERIES_SCOPE = \"Queries\";\n-\n-  /**\n-   * Name of the JMX MBean scope for source-level metrics tracking total results returned while\n-   * querying a specific {@link Source}\n-   */\n-  public static final String QUERIES_TOTAL_RESULTS_SCOPE = \"Queries.TotalResults\";\n-\n-  /**\n-   * Name of the JMX MBean scope for source-level metrics tracking latency in milliseconds while\n-   * querying a specific {@link Source}\n-   */\n-  public static final String QUERIES_LATENCY_SCOPE = \"Queries.Latency\";\n-\n-  public static final String DERIVE_DATA_SOURCE_TYPE = \"DERIVE\";\n-\n-  public static final String GAUGE_DATA_SOURCE_TYPE = \"GAUGE\";\n-\n-  public static final String COUNT_MBEAN_ATTRIBUTE_NAME = \"Count\";\n-\n-  public static final String MEAN_MBEAN_ATTRIBUTE_NAME = \"Mean\";\n-\n-  private static final String METRICS_SOURCE_ELAPSED_PREFIX = \"metrics.source.elapsed.\";\n-\n   private static final Logger LOGGER = LoggerFactory.getLogger(SourceMetricsImpl.class);\n \n-  private static final String ALPHA_NUMERIC_REGEX = \"[^a-zA-Z0-9]\";\n-\n-  private final MetricRegistry metricsRegistry = new MetricRegistry();\n-\n-  private final JmxReporter reporter =\n-      JmxReporter.forRegistry(metricsRegistry).inDomain(MBEAN_PACKAGE_NAME).build();\n+  private static final String SOURCE_TAG = \"source\";\n \n-  // Map of sourceId to Source's metric data\n-  protected Map<String, SourceMetric> metrics = new HashMap<String, SourceMetric>();\n+  private final MeterRegistry meterRegistry;\n \n-  // Injected list of CatalogProviders and FederatedSources\n-  // that is kept updated by container, e.g., with latest sourceIds\n-  private List<CatalogProvider> catalogProviders = new ArrayList<CatalogProvider>();\n-\n-  private List<FederatedSource> federatedSources = new ArrayList<FederatedSource>();\n-\n-  // Map of Source to sourceId - used to detect if sourceId has been changed since last metric\n-  // update\n-  private Map<Source, String> sourceToSourceIdMap = new HashMap<Source, String>();\n-\n-  private ExecutorService executorPool;\n-\n-  public List<CatalogProvider> getCatalogProviders() {\n-    return catalogProviders;\n-  }\n-\n-  public void setCatalogProviders(List<CatalogProvider> catalogProviders) {\n-    this.catalogProviders = catalogProviders;\n-  }\n-\n-  public List<FederatedSource> getFederatedSources() {\n-    return federatedSources;\n-  }\n-\n-  public void setFederatedSources(List<FederatedSource> federatedSources) {\n-    this.federatedSources = federatedSources;\n-  }\n-\n-  public void init() {\n-    LOGGER.trace(\"INSIDE: init\");\n-\n-    reporter.start();\n-  }\n-\n-  public void destroy() {\n-    LOGGER.trace(\"INSIDE: destroy\");\n-\n-    reporter.stop();\n+  public SourceMetricsImpl(MeterRegistryService meterRegistryService) {\n+    if (meterRegistryService == null) {\n+      LOGGER.warn(\"Meter Registry Service is not available\");\n+    }\n+    meterRegistry = meterRegistryService.getMeterRegistry();\n   }\n \n   // PreFederatedQuery\n   @Override\n   public QueryRequest process(Source source, QueryRequest input)\n       throws PluginExecutionException, StopProcessingException {\n \n-    LOGGER.trace(\"ENTERING: process (for PreFederatedQueryPlugin)\");\n-\n-    // Number of Queries metric per Source\n-    updateMetric(source.getId(), QUERIES_SCOPE, 1);\n-\n-    LOGGER.trace(\"EXITING: process (for PreFederatedQueryPlugin)\");\n-\n+    // A DistributionSummary can be instead by replacing counter() by summary() and increment()", "originalCommit": "892fa840c486e6ce2140233f73225afd420c39fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88efb78e96ad16c37c154410adebcad67b3034a3", "url": "https://github.com/codice/ddf/commit/88efb78e96ad16c37c154410adebcad67b3034a3", "message": "modify catalog metrics to use tags", "committedDate": "2020-04-21T20:27:54Z", "type": "commit"}, {"oid": "4e2620a9d3f9f21710b03db5e768ce4d13039f9b", "url": "https://github.com/codice/ddf/commit/4e2620a9d3f9f21710b03db5e768ce4d13039f9b", "message": "Apply some missed comments", "committedDate": "2020-04-21T21:04:30Z", "type": "commit"}, {"oid": "e542eea3a2f1c3fad7c926716e564b619a00557d", "url": "https://github.com/codice/ddf/commit/e542eea3a2f1c3fad7c926716e564b619a00557d", "message": "Add source id tag to exception metrics", "committedDate": "2020-04-22T20:02:38Z", "type": "commit"}, {"oid": "6fab565ecaaede33e48138274b0609ec0a71ab9d", "url": "https://github.com/codice/ddf/commit/6fab565ecaaede33e48138274b0609ec0a71ab9d", "message": "Checkstyle", "committedDate": "2020-04-27T16:28:28Z", "type": "forcePushed"}, {"oid": "cbe942521b486b466a54aa4ad7077fd604db4b86", "url": "https://github.com/codice/ddf/commit/cbe942521b486b466a54aa4ad7077fd604db4b86", "message": "Checkstyle", "committedDate": "2020-04-27T20:08:20Z", "type": "commit"}, {"oid": "cbe942521b486b466a54aa4ad7077fd604db4b86", "url": "https://github.com/codice/ddf/commit/cbe942521b486b466a54aa4ad7077fd604db4b86", "message": "Checkstyle", "committedDate": "2020-04-27T20:08:20Z", "type": "forcePushed"}, {"oid": "42ac36d19a6cbb55c07f8861d33d2104de0d02cb", "url": "https://github.com/codice/ddf/commit/42ac36d19a6cbb55c07f8861d33d2104de0d02cb", "message": "Fix itest", "committedDate": "2020-04-28T15:57:58Z", "type": "commit"}, {"oid": "ab197805a408c657a0982be6ca4d269a0dc57734", "url": "https://github.com/codice/ddf/commit/ab197805a408c657a0982be6ca4d269a0dc57734", "message": "Remove timeout from checkout scm in pomfix stage", "committedDate": "2020-04-28T17:50:35Z", "type": "commit"}, {"oid": "ab197805a408c657a0982be6ca4d269a0dc57734", "url": "https://github.com/codice/ddf/commit/ab197805a408c657a0982be6ca4d269a0dc57734", "message": "Remove timeout from checkout scm in pomfix stage", "committedDate": "2020-04-28T17:50:35Z", "type": "forcePushed"}, {"oid": "d4fdcf47bae00b7820016e720e1f5542f24a8224", "url": "https://github.com/codice/ddf/commit/d4fdcf47bae00b7820016e720e1f5542f24a8224", "message": "Doc changes", "committedDate": "2020-04-29T15:53:22Z", "type": "forcePushed"}, {"oid": "37ed78c3f336dbf25e09f880935b92020b851e0b", "url": "https://github.com/codice/ddf/commit/37ed78c3f336dbf25e09f880935b92020b851e0b", "message": "Doc changes", "committedDate": "2020-04-29T16:13:36Z", "type": "commit"}, {"oid": "37ed78c3f336dbf25e09f880935b92020b851e0b", "url": "https://github.com/codice/ddf/commit/37ed78c3f336dbf25e09f880935b92020b851e0b", "message": "Doc changes", "committedDate": "2020-04-29T16:13:36Z", "type": "forcePushed"}]}