{"pr_number": 6250, "pr_title": "DDF-6242 Add timeout to CDM", "pr_createdAt": "2020-08-18T15:22:48Z", "pr_url": "https://github.com/codice/ddf/pull/6250", "timeline": [{"oid": "723e399d366cb8392602197bb927f1ea531cd68e", "url": "https://github.com/codice/ddf/commit/723e399d366cb8392602197bb927f1ea531cd68e", "message": "DDF-6408 Improve Logging for CDM  (#6064)\n\nDDF-000 CDM timeout initial code", "committedDate": "2020-08-11T17:20:56Z", "type": "commit"}, {"oid": "15de73960f68c92618843da56875d01fb96dc74e", "url": "https://github.com/codice/ddf/commit/15de73960f68c92618843da56875d01fb96dc74e", "message": "DDF-000 fixed merge issues", "committedDate": "2020-08-11T18:52:35Z", "type": "commit"}, {"oid": "a945e4437ab5ffada940a6242bfb3ed517200f40", "url": "https://github.com/codice/ddf/commit/a945e4437ab5ffada940a6242bfb3ed517200f40", "message": "DDF-6242 initial commit", "committedDate": "2020-08-13T14:54:29Z", "type": "commit"}, {"oid": "f034e1ea0394af3af04d5ba107b03b34a511d266", "url": "https://github.com/codice/ddf/commit/f034e1ea0394af3af04d5ba107b03b34a511d266", "message": "DDF-6242 added unit tests and configurable timeout", "committedDate": "2020-08-14T18:48:14Z", "type": "commit"}, {"oid": "cf3c32f64ee08acc699a08696468d06f0f927b01", "url": "https://github.com/codice/ddf/commit/cf3c32f64ee08acc699a08696468d06f0f927b01", "message": "DDF-6242 changes to the test", "committedDate": "2020-08-17T14:47:29Z", "type": "commit"}, {"oid": "20f45016106a80fbdd00205bf500b90bf484793f", "url": "https://github.com/codice/ddf/commit/20f45016106a80fbdd00205bf500b90bf484793f", "message": "DDF-6242 fixed logic in observer", "committedDate": "2020-08-17T15:48:17Z", "type": "commit"}, {"oid": "fe0f8fc006d06b4427e2e5e6a9083a49a3958adb", "url": "https://github.com/codice/ddf/commit/fe0f8fc006d06b4427e2e5e6a9083a49a3958adb", "message": "DDF-6242 fixed unit test", "committedDate": "2020-08-17T20:22:44Z", "type": "commit"}, {"oid": "5ab00aec0067f218badec8cf8f2283eb1a979e8c", "url": "https://github.com/codice/ddf/commit/5ab00aec0067f218badec8cf8f2283eb1a979e8c", "message": "DDF-6242 added unit test for file updates", "committedDate": "2020-08-17T20:53:48Z", "type": "commit"}, {"oid": "dce3419043922addbce9b95d571ee52baf587111", "url": "https://github.com/codice/ddf/commit/dce3419043922addbce9b95d571ee52baf587111", "message": "DDF-6242 removed testing plugin for CDM timeeout", "committedDate": "2020-08-18T15:37:41Z", "type": "commit"}, {"oid": "de5a85cfb5c9b4e1273082774df80b8d2be09279", "url": "https://github.com/codice/ddf/commit/de5a85cfb5c9b4e1273082774df80b8d2be09279", "message": "DDF-6242 revert merge conflict", "committedDate": "2020-08-18T15:46:44Z", "type": "commit"}, {"oid": "154df4af166e75c9de8960f05c2237e1b26f1c06", "url": "https://github.com/codice/ddf/commit/154df4af166e75c9de8960f05c2237e1b26f1c06", "message": "DDF-6242 updated documentation", "committedDate": "2020-08-18T17:13:53Z", "type": "commit"}, {"oid": "c75825d8636e3a959dc69e38f993aa29bdd4b617", "url": "https://github.com/codice/ddf/commit/c75825d8636e3a959dc69e38f993aa29bdd4b617", "message": "DDF-6242 skip itests", "committedDate": "2020-08-19T15:59:34Z", "type": "commit"}, {"oid": "25e393a211fa9d74cbcd9c428406dcb15c2f4f6a", "url": "https://github.com/codice/ddf/commit/25e393a211fa9d74cbcd9c428406dcb15c2f4f6a", "message": "DDF-6242 fixed formatting", "committedDate": "2020-08-19T18:29:23Z", "type": "commit"}, {"oid": "8a6f027769f03eef72e4278c7b82b3f0135ccd50", "url": "https://github.com/codice/ddf/commit/8a6f027769f03eef72e4278c7b82b3f0135ccd50", "message": "DDF-6242 removed reference to hagning-plugin", "committedDate": "2020-08-31T21:32:44Z", "type": "commit"}, {"oid": "8abaed1d979ed24cef4a0c0630e2ffa3fac6e927", "url": "https://github.com/codice/ddf/commit/8abaed1d979ed24cef4a0c0630e2ffa3fac6e927", "message": "DDF-6242 temp", "committedDate": "2020-09-01T19:11:26Z", "type": "commit"}, {"oid": "7220a81bcb509565daca212aedcdf47e0899af9c", "url": "https://github.com/codice/ddf/commit/7220a81bcb509565daca212aedcdf47e0899af9c", "message": "DDF-6242 temp", "committedDate": "2020-09-01T19:19:40Z", "type": "commit"}, {"oid": "b7c0923ecb514a0303e4532d3acb5154837b9336", "url": "https://github.com/codice/ddf/commit/b7c0923ecb514a0303e4532d3acb5154837b9336", "message": "DDF-6242 removed itests", "committedDate": "2020-09-01T21:32:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NDU3NA==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r481474574", "bodyText": "I am thinking this constant should be included somewhere in the CDM bundle instead of the catalog api since it is only used in that one bundle.", "author": "clockard", "createdAt": "2020-09-01T22:49:39Z", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/Constants.java", "diffHunk": "@@ -125,6 +125,8 @@\n \n   public static final String INGEST_LOGGER_NAME = \"ingestLogger\";\n \n+  public static final String CDM_LOGGER_NAME = \"cdmLogger\";", "originalCommit": "b7c0923ecb514a0303e4532d3acb5154837b9336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "836bcf68a50d61c7d0e4c74cb3ece5bb4e053aa5", "url": "https://github.com/codice/ddf/commit/836bcf68a50d61c7d0e4c74cb3ece5bb4e053aa5", "message": "DDF-6242 clearing system properties set in itests", "committedDate": "2020-09-02T15:23:48Z", "type": "commit"}, {"oid": "c2a58b1136850c32f29e513801c265891feb3517", "url": "https://github.com/codice/ddf/commit/c2a58b1136850c32f29e513801c265891feb3517", "message": "DDF-6242 moved Catalog constants' CDM_LOGGER_NAME to catalog-core-directorymonitor", "committedDate": "2020-09-02T16:48:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5MDY5MQ==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482490691", "bodyText": "What does this change have to do with the cdm change?", "author": "clockard", "createdAt": "2020-09-02T21:28:45Z", "path": "catalog/core/catalog-core-solr/src/test/java/ddf/catalog/source/solr/DynamicSchemaResolverTest.java", "diffHunk": "@@ -57,6 +58,11 @@\n   private static final ObjectMapper METACARD_TYPE_MAPPER =\n       MetacardTypeMapperFactory.newObjectMapper();\n \n+  @AfterClass", "originalCommit": "c2a58b1136850c32f29e513801c265891feb3517", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNDc4Mw==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482504783", "bodyText": "Has this code been run through the formatter?", "author": "clockard", "createdAt": "2020-09-02T21:45:45Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -283,12 +326,40 @@ else if (!entry.hasChildren()) {\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitDelete(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n-    if (success) {\n-      entry.getParent().ifPresent(e -> e.removeChild(entry));\n-      entry.destroy();\n+    LOGGER.trace(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n+    try {\n+      if (success) {\n+        entry.getParent().ifPresent(e -> e.removeChild(entry));\n+        entry.destroy();\n+        LOGGER.debug(\n+            \"{} was removed from {}\",\n+            entry.getName(),\n+            entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+      } else {\n+        LOGGER.debug(\"Delete task failed for {}\", entry.getName());\n+      }\n+    } finally {\n+      onFinish(entry);\n     }\n-    onFinish();\n+  }\n+\n+  /**\n+   * Verify whether {@link File} has exceeded the maximum processing time AND has not been updated\n+   *\n+   * @param file\n+   * @return true if the file has expired on processing before and has not been updated\n+   */\n+  private boolean expiredNotUpdated(File file) {\n+    if (file.isDirectory() || !expiredFiles.containsKey(file.getPath())) return false;", "originalCommit": "c2a58b1136850c32f29e513801c265891feb3517", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNDg3Mw==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482514873", "bodyText": "Is LOGGING the right term here? It seems like maybe HEALTH_CHECK or INGEST_CHECK might be clearer.", "author": "clockard", "createdAt": "2020-09-02T21:58:11Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -49,15 +58,22 @@\n  */\n public class AsyncFileAlterationObserver {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(AsyncFileAlterationObserver.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CDM_LOGGER_NAME);\n+\n+  private static final int LOGGING_TIME_DELAY = 500;", "originalCommit": "c2a58b1136850c32f29e513801c265891feb3517", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyMjEzNA==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482522134", "bodyText": "If we are setting this here we should probably not set it above on ling 98", "author": "clockard", "createdAt": "2020-09-02T22:07:32Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -115,6 +121,7 @@ public ContentDirectoryMonitor(\n     this.maxRetries = maxRetries;\n     this.delayBetweenRetries = delayBetweenRetries;\n     this.configurationExecutor = configurationExecutor;\n+    systemSubjectBinder = new SystemSubjectBinder();", "originalCommit": "c2a58b1136850c32f29e513801c265891feb3517", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a18b4dd51d730fc3e427d65ca86d7df873ef93b", "url": "https://github.com/codice/ddf/commit/1a18b4dd51d730fc3e427d65ca86d7df873ef93b", "message": "DDF-6242 refactoring", "committedDate": "2020-09-02T23:24:19Z", "type": "commit"}, {"oid": "c64045ee8bad4dc85aa89226dc11b0d2be962370", "url": "https://github.com/codice/ddf/commit/c64045ee8bad4dc85aa89226dc11b0d2be962370", "message": "DDF-6242 formatting", "committedDate": "2020-09-02T23:49:13Z", "type": "commit"}, {"oid": "931aaa027dff2333997b60da3cdf39068eb5e560", "url": "https://github.com/codice/ddf/commit/931aaa027dff2333997b60da3cdf39068eb5e560", "message": "DDF-6242 fixed documentation duplicate", "committedDate": "2020-09-03T16:20:40Z", "type": "commit"}, {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8", "url": "https://github.com/codice/ddf/commit/0ad9456ed54bf84f56f47940151b57ab79f9dea8", "message": "DDF-6242 update to Jenkinsfile", "committedDate": "2020-09-03T18:21:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTE1MA==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483311150", "bodyText": "\u2754 Do you have to do any null checking on entry?", "author": "shaundmorris", "createdAt": "2020-09-03T23:49:46Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -179,12 +212,10 @@ AsyncFileEntry getRootFile() {\n    */\n   private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n \n-    processing.incrementAndGet();\n+    processing.add(entry);", "originalCommit": "0ad9456ed54bf84f56f47940151b57ab79f9dea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTY3Nw==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485115677", "bodyText": "Based on other methods such as doMatch, there hasn't existed any null checking for entry. AsyncFileAlterationObserver:265 for example assumes that entry is non-null, as does the code in checkAndNotify. I could do null checking here, but I'm not sure it's necessary", "author": "josephthweatt", "createdAt": "2020-09-08T18:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjg0Mw==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485116843", "bodyText": "Doesn't sound like it is necessary, just figured I would suggest a further look there.", "author": "shaundmorris", "createdAt": "2020-09-08T18:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTUzNA==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483311534", "bodyText": "\u2754 same question here on checking entry?", "author": "shaundmorris", "createdAt": "2020-09-03T23:51:04Z", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -260,15 +305,14 @@ private void commitMatch(AsyncFileEntry entry, boolean success) {\n    */\n   private void doDelete(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n     if (!entry.isDirectory()) {", "originalCommit": "0ad9456ed54bf84f56f47940151b57ab79f9dea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzM4NQ==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485117385", "bodyText": "Same comments as above. This code was actually written early last year. I'm assuming they knew whether or not to null check this value, but I could be wrong. I think for now it might be out of the scope of this ticket, but if you think it's worth looking into later let me know!", "author": "josephthweatt", "createdAt": "2020-09-08T18:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjQwMg==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483312402", "bodyText": "\u2754 Do you think is the right balance between test time and consistency? I'm thinking about potentially flakiness based on the sleep time.", "author": "shaundmorris", "createdAt": "2020-09-03T23:54:19Z", "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserverTest.java", "diffHunk": "@@ -231,6 +232,78 @@ public void testFileCreation() throws Exception {\n     verify(fileListener, never()).onFileDelete(any(File.class), any(Synchronization.class));\n   }\n \n+  @Test\n+  public void testHangingFileExpires() throws Exception {\n+    System.setProperty(\"org.codice.ddf.catalog.content.monitor.expirationTime\", \"100\");\n+\n+    // observer onCreate method will hang for longer than the set expiration time\n+    doAnswer(\n+            (InvocationOnMock e) -> {\n+              sleep(1000);", "originalCommit": "0ad9456ed54bf84f56f47940151b57ab79f9dea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTA5NQ==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483601095", "bodyText": "If nothing else, this could be reduced. With an expiration time of 100, a sleep of 150 would work here as well and not hold up the builds as long.", "author": "aaronilovici", "createdAt": "2020-09-04T13:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjI2Mw==", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485122263", "bodyText": "@aaronilovici I have tried reducing the sleep and expiration time, but reducing it too much causes flakiness. There are other steps deeper within the implementation that can cause a delay between when sleep is executed and when the \"created time\" of the entry is made. That results in the file being processed when it should be expired.", "author": "josephthweatt", "createdAt": "2020-09-08T18:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjQwMg=="}], "type": "inlineReview"}, {"oid": "31ace9ee60bbac210007765d97818c6e07476e25", "url": "https://github.com/codice/ddf/commit/31ace9ee60bbac210007765d97818c6e07476e25", "message": "DDF-6242 reduced testing sleep time", "committedDate": "2020-09-08T18:46:17Z", "type": "commit"}]}