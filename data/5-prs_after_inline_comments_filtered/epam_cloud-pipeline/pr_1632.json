{"pr_number": 1632, "pr_title": "1517 custom node images for runs tests", "pr_createdAt": "2020-12-04T08:45:05Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1632", "timeline": [{"oid": "1aee092198e8a6ae47476c0bf1ef8fc65938d16b", "url": "https://github.com/epam/cloud-pipeline/commit/1aee092198e8a6ae47476c0bf1ef8fc65938d16b", "message": "add 1517 pipeline configuration test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-11-30T09:38:35Z", "type": "commit"}, {"oid": "4a3311d27bb80eed3819f3aeb0f04c2d75e39f64", "url": "https://github.com/epam/cloud-pipeline/commit/4a3311d27bb80eed3819f3aeb0f04c2d75e39f64", "message": "Merge branch 'develop' into 1517_custom_node_images_for_runs_tests", "committedDate": "2020-12-01T10:11:20Z", "type": "commit"}, {"oid": "8f62b7a17592315900b47e99c170067ceed515be", "url": "https://github.com/epam/cloud-pipeline/commit/8f62b7a17592315900b47e99c170067ceed515be", "message": "update 1517_1 test", "committedDate": "2020-12-01T12:48:19Z", "type": "commit"}, {"oid": "85b7a016c499d88d9f36c931f172ab080d266541", "url": "https://github.com/epam/cloud-pipeline/commit/85b7a016c499d88d9f36c931f172ab080d266541", "message": "update 1517_1 test", "committedDate": "2020-12-02T16:25:27Z", "type": "commit"}, {"oid": "6e4c787be98c90ea1a8d930b4de3ff8ca0687225", "url": "https://github.com/epam/cloud-pipeline/commit/6e4c787be98c90ea1a8d930b4de3ff8ca0687225", "message": "add 1517_2 PipelineConfiguration test", "committedDate": "2020-12-04T08:20:14Z", "type": "commit"}, {"oid": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "url": "https://github.com/epam/cloud-pipeline/commit/ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "message": "Merge branch 'develop' into 1517_custom_node_images_for_runs_tests\n\n# Conflicts:\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/Primitive.java\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "committedDate": "2020-12-04T08:40:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMzMxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537413314", "bodyText": "The field is never used", "author": "kamyshova", "createdAt": "2020-12-07T10:57:03Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMjM2Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537622367", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-12-07T16:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMzMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5MTYzMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537491632", "bodyText": "Let's rename this class to something CustomNodeImageTest", "author": "kamyshova", "createdAt": "2020-12-07T13:06:26Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMzI3MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537623271", "bodyText": "Class has been renamed to CustomNodeImagesForRunsTest", "author": "maryvictol", "createdAt": "2020-12-07T16:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5MTYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5Nzk0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537497942", "bodyText": "cloudRegion is never used. Are we sure that need this?", "author": "kamyshova", "createdAt": "2020-12-07T13:16:47Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjM1OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r540076358", "bodyText": "cloudRegion has been added as parameter to getAmisFromClusterNetworksConfigPreference method", "author": "maryvictol", "createdAt": "2020-12-10T11:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5Nzk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODU2MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537508560", "bodyText": "Let's add a message to assert with ami values", "author": "kamyshova", "createdAt": "2020-12-07T13:33:24Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile\n+                            .expandTab(EXEC_ENVIRONMENT)\n+                            .getCloudRegion();});\n+\n+        String[] amis = navigationMenu()\n+                .settings()\n+                .switchToPreferences()\n+                .getAmisFromClusterNetworksConfigPreference();\n+        assertNotEquals(amiValue(amis[0]), testAmi = amiValue(amis[1]));", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MjY2Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r540382667", "bodyText": "Message has been added", "author": "maryvictol", "createdAt": "2020-12-10T18:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwOTc3MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537509771", "bodyText": "Rrun -> Run", "author": "kamyshova", "createdAt": "2020-12-07T13:35:07Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/PipelineConfigurationNewTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.epam.pipeline.autotests;\n+\n+import com.epam.pipeline.autotests.ao.LogAO;\n+import com.epam.pipeline.autotests.utils.C;\n+import com.epam.pipeline.autotests.utils.TestCase;\n+import com.epam.pipeline.autotests.utils.Utils;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.Set;\n+\n+import static com.codeborne.selenide.Condition.text;\n+import static com.codeborne.selenide.Selenide.open;\n+import static com.epam.pipeline.autotests.ao.ClusterMenuAO.nodeLabel;\n+import static com.epam.pipeline.autotests.ao.LogAO.Status.SUCCESS;\n+import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n+import static com.epam.pipeline.autotests.ao.Primitive.EXEC_ENVIRONMENT;\n+import static com.epam.pipeline.autotests.ao.Primitive.NODE_IMAGE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static java.lang.String.format;\n+import static java.util.stream.Collectors.toSet;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+\n+public class PipelineConfigurationNewTest extends AbstractSeveralPipelineRunningTest {\n+    private final String pipeline1 = \"pipe-config-\" + Utils.randomSuffix();\n+    private final String pipeline2 = \"pipe-config-\" + Utils.randomSuffix();\n+    private String clusterNetworksConfig = \"cluster.networks.config\";\n+    private String runID1517_1 = \"\";\n+    private String testAmi = \"\";\n+\n+    @AfterClass(alwaysRun = true)\n+    public void removePipelines() {\n+        open(C.ROOT_ADDRESS);\n+        navigationMenu()\n+                .library()\n+                .removePipelineIfExists(pipeline1)\n+                .removePipelineIfExists(pipeline2);\n+    }\n+\n+    @Test\n+    @TestCase(\"1517_1\")\n+    public void checkCustomNodeImageForThePipelineRun() {\n+        final String[] cloudRegion = {\"\"};\n+        library()\n+                .createPipeline(pipeline1)\n+                .createPipeline(pipeline2)\n+                .clickOnDraftVersion(pipeline1)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile -> {\n+                    cloudRegion[0] = profile\n+                            .expandTab(EXEC_ENVIRONMENT)\n+                            .getCloudRegion();});\n+\n+        String[] amis = navigationMenu()\n+                .settings()\n+                .switchToPreferences()\n+                .getAmisFromClusterNetworksConfigPreference();\n+        assertNotEquals(amiValue(amis[0]), testAmi = amiValue(amis[1]));\n+        library()\n+                .clickOnDraftVersion(pipeline1)\n+                .codeTab()\n+                .clickOnFile(\"config.json\")\n+                .editFile(configuration -> addInstanceImageToConfig(configuration, testAmi))\n+                .saveAndCommitWithMessage(\"test: Add instance image\")\n+                .runPipeline()\n+                .launch(this);\n+        final Set<String> logMess =\n+                runsMenu()\n+                .showLog(runID1517_1 = getLastRunId())\n+                .instanceParameters(instance ->\n+                        instance.ensure(NODE_IMAGE, text(testAmi)))\n+                .waitForCompletion()\n+                .click(taskWithName(\"InitializeNode\"))\n+                .ensure(STATUS, SUCCESS.reached)\n+                .logMessages()\n+                .collect(toSet());\n+        runsMenu()\n+                .completedRuns()\n+                .showLog(runID1517_1)\n+                .logContainsMessage(logMess, format(\"Image: %s\", testAmi))\n+                .logContainsMessage(logMess, format(\"Specified in configuration image %s will be used\", testAmi));\n+    }\n+\n+    @Test (dependsOnMethods = {\"checkCustomNodeImageForThePipelineRun\"})\n+    @TestCase(\"1517_2\")\n+    public void checkNodeReuseAfterTheCustomNodeImageRrun() {", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NTU0Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537685543", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-12-07T17:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwOTc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTgzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537511834", "bodyText": "Update the license header, please", "author": "kamyshova", "createdAt": "2020-12-07T13:38:09Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "diffHunk": "@@ -52,6 +52,7 @@\n import static com.epam.pipeline.autotests.ao.Primitive.UPLOAD;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.button;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.buttonByIconClass;\n+import static java.lang.String.format;", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4Njg2OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537686869", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-12-07T17:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMjQ0NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537512445", "bodyText": "Clean up, please", "author": "kamyshova", "createdAt": "2020-12-07T13:39:09Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineCodeTabAO.java", "diffHunk": "@@ -265,14 +266,17 @@ public FileEditingPopupAO editFile(final UnaryOperator<String> action) {\n \n         public FileEditingPopupAO shouldContainInCode(final String expectedCode) {\n             final Function<String, SelenideElement> lineWithText =\n-                    text -> $x(String.format(\"//pre[contains(@class, 'CodeMirror-line') and contains(., '%s')]\", text));\n+                    text -> $x(format(\"//pre[contains(@class, 'CodeMirror-line') and contains(., '%s')]\", text));\n             Arrays.stream(expectedCode.split(\"\\n\"))\n                     .map(String::trim)\n                     .map(lineWithText)\n                     .forEach(el -> el.should(exist));\n             return this;\n         }\n \n+\n+\n+", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNjA1Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537626056", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-12-07T16:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMjQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDgxMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537534813", "bodyText": "Can be replaced with collection.toArray()", "author": "kamyshova", "createdAt": "2020-12-07T14:10:07Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "diffHunk": "@@ -1026,6 +1027,22 @@ public PreferencesAO setSystemSshDefaultRootUserEnabled() {\n             return this;\n         }\n \n+        public String[] getAmisFromClusterNetworksConfigPreference() {\n+            searchPreference(\"cluster.networks.config\");\n+            String[] result = new String[2];\n+            String[] strings = context().$(byClassName(\"CodeMirror-code\"))\n+                            .findAll(byClassName(\"CodeMirror-line\")).texts().stream()\n+                            .toArray(String[]::new);", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2OTcwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r538369709", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-12-08T13:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNzc3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r537537778", "bodyText": "Add line breaks and spaces, please", "author": "kamyshova", "createdAt": "2020-12-07T14:13:45Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/SettingsPageAO.java", "diffHunk": "@@ -1026,6 +1027,22 @@ public PreferencesAO setSystemSshDefaultRootUserEnabled() {\n             return this;\n         }\n \n+        public String[] getAmisFromClusterNetworksConfigPreference() {\n+            searchPreference(\"cluster.networks.config\");\n+            String[] result = new String[2];\n+            String[] strings = context().$(byClassName(\"CodeMirror-code\"))\n+                            .findAll(byClassName(\"CodeMirror-line\")).texts().stream()\n+                            .toArray(String[]::new);\n+            IntStream.range(0, strings.length).forEach((i) -> {\n+                if (strings[i].contains(\"\\\"instance_mask\\\":\")) {\n+                    if (strings[i].contains(\"\\\"*\\\"\")) {\n+                        result[0]=strings[i+1];\n+                    } else {result[1]=strings[i+1];}", "originalCommit": "ab77d5a4d727d2c8268ce566f74ac1094fcdf530", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3NjY4NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1632#discussion_r540076684", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-12-10T11:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNzc3OA=="}], "type": "inlineReview"}, {"oid": "1269b94304778ede4d7c5cd150deea3693de7ad4", "url": "https://github.com/epam/cloud-pipeline/commit/1269b94304778ede4d7c5cd150deea3693de7ad4", "message": "fix CustomNodeImagesForRunsTest", "committedDate": "2020-12-10T18:08:23Z", "type": "commit"}, {"oid": "20b86f1ef012c029a5c43ec8819523ad967d842d", "url": "https://github.com/epam/cloud-pipeline/commit/20b86f1ef012c029a5c43ec8819523ad967d842d", "message": "update CustomNodeImagesForRunsTest", "committedDate": "2020-12-17T10:46:13Z", "type": "commit"}, {"oid": "f465e278e11c996bf346b274e9ee714f57963400", "url": "https://github.com/epam/cloud-pipeline/commit/f465e278e11c996bf346b274e9ee714f57963400", "message": "small fix", "committedDate": "2020-12-17T10:53:45Z", "type": "commit"}, {"oid": "997852f37f822a6a270ae8cf36c419773d5c15b4", "url": "https://github.com/epam/cloud-pipeline/commit/997852f37f822a6a270ae8cf36c419773d5c15b4", "message": "e2e: fix styles", "committedDate": "2020-12-17T11:17:08Z", "type": "commit"}]}