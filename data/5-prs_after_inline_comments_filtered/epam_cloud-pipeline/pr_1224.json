{"pr_number": 1224, "pr_title": "Add 3150, 3151, 3152, 3155 Launch Cluster Autotests ", "pr_createdAt": "2020-07-16T16:15:53Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1224", "timeline": [{"oid": "c3b064492145375c0f2634dd9e4647649006a334", "url": "https://github.com/epam/cloud-pipeline/commit/c3b064492145375c0f2634dd9e4647649006a334", "message": "add LaunchClusterTests 3150, 3151\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-09T18:45:58Z", "type": "commit"}, {"oid": "fdc93e9d2f462cbaa816d5ba3829562909e12a94", "url": "https://github.com/epam/cloud-pipeline/commit/fdc93e9d2f462cbaa816d5ba3829562909e12a94", "message": "add 3152 Launch Cluster Test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-13T14:25:15Z", "type": "commit"}, {"oid": "a16f9d426c88e94799b39806315c4c7b5af1f7d2", "url": "https://github.com/epam/cloud-pipeline/commit/a16f9d426c88e94799b39806315c4c7b5af1f7d2", "message": "add 3155 LaunchCluster test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-16T10:34:05Z", "type": "commit"}, {"oid": "35eb6d134a3ea2e2d034563c3b2532f2d338cc07", "url": "https://github.com/epam/cloud-pipeline/commit/35eb6d134a3ea2e2d034563c3b2532f2d338cc07", "message": "Merge branch 'develop' into autotests_cluster_runs\n\n# Conflicts:\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/LogAO.java\n#\te2e/gui/src/test/java/com/epam/pipeline/autotests/ao/ToolPageAO.java", "committedDate": "2020-07-16T10:45:08Z", "type": "commit"}, {"oid": "28b0426821cd7c74eff8bebf1983af7a7c67ae20", "url": "https://github.com/epam/cloud-pipeline/commit/28b0426821cd7c74eff8bebf1983af7a7c67ae20", "message": "update GlobalSearch, LaunchCluster tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-16T14:53:26Z", "type": "commit"}, {"oid": "1ac87c0405eaa3ffc428b2d0e6304565fc63d4e4", "url": "https://github.com/epam/cloud-pipeline/commit/1ac87c0405eaa3ffc428b2d0e6304565fc63d4e4", "message": "add 3154, 3159, 3156, 3160, 3161 LaunchCluster tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-20T18:44:04Z", "type": "commit"}, {"oid": "33fa72cd3a38fa955a73ce67e89101f2cc5f9aa6", "url": "https://github.com/epam/cloud-pipeline/commit/33fa72cd3a38fa955a73ce67e89101f2cc5f9aa6", "message": "update GlobalSearch/LaunchCluster tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-21T10:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMzQ0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458203447", "bodyText": "I suppose should be configurable values. Let's create the corresponding values in the default config.", "author": "kamyshova", "createdAt": "2020-07-21T15:50:11Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "diffHunk": "@@ -17,25 +17,46 @@\n \n import com.epam.pipeline.autotests.ao.LogAO;\n import com.epam.pipeline.autotests.ao.Template;\n+import com.epam.pipeline.autotests.ao.ToolTab;\n import com.epam.pipeline.autotests.mixins.Authorization;\n import com.epam.pipeline.autotests.utils.C;\n import com.epam.pipeline.autotests.utils.TestCase;\n import org.testng.annotations.AfterMethod;\n import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import static com.codeborne.selenide.Condition.appears;\n+import static com.codeborne.selenide.Condition.exist;\n+import static com.codeborne.selenide.Condition.text;\n import static com.codeborne.selenide.Condition.visible;\n import static com.codeborne.selenide.Selectors.byClassName;\n import static com.codeborne.selenide.Selenide.$;\n+import static com.codeborne.selenide.WebDriverRunner.getWebDriver;\n+import static com.epam.pipeline.autotests.ao.LogAO.configurationParameter;\n+import static com.epam.pipeline.autotests.ao.LogAO.containsMessages;\n+import static com.epam.pipeline.autotests.ao.LogAO.log;\n import static com.epam.pipeline.autotests.ao.LogAO.taskWithName;\n-import static com.epam.pipeline.autotests.ao.Primitive.OK;\n+import static com.epam.pipeline.autotests.ao.Primitive.ADVANCED_PANEL;\n+import static com.epam.pipeline.autotests.ao.Primitive.INSTANCE_TYPE;\n+import static com.epam.pipeline.autotests.ao.Primitive.PARAMETERS;\n+import static com.epam.pipeline.autotests.ao.Primitive.PRICE_TYPE;\n+import static com.epam.pipeline.autotests.ao.Primitive.START_IDLE;\n+import static com.epam.pipeline.autotests.ao.Primitive.STATUS;\n+import static com.epam.pipeline.autotests.ao.Primitive.TYPE;\n import static com.epam.pipeline.autotests.utils.PipelineSelectors.button;\n import static java.util.concurrent.TimeUnit.SECONDS;\n \n public class LaunchClusterTest extends AbstractAutoRemovingPipelineRunningTest implements Authorization {\n \n     private final String autoScaledSettingForm = \"Auto-scaled cluster\";\n+    private final String clusterSettingForm = \"Cluster\";\n+    private final String defaultRegistry = C.DEFAULT_REGISTRY;\n+    private final String defaultGroup = \"library\";\n+    private final String testingTool = \"rstudio\";", "originalCommit": "33fa72cd3a38fa955a73ce67e89101f2cc5f9aa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NTQxNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458995415", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-07-22T18:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMzQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNjI3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458226272", "bodyText": "We should set the 'e2e.ui.spot.price.name' value for all providers", "author": "kamyshova", "createdAt": "2020-07-21T16:22:50Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/LaunchClusterTest.java", "diffHunk": "@@ -205,4 +230,309 @@ public void autoScaledClusterWithDefaultChildNodesValidationTest() {\n                 .validateStatus(String.valueOf(Integer.parseInt(getRunId()) + 1), LogAO.Status.WORKING)\n                 .validateStatus(String.valueOf(Integer.parseInt(getRunId()) + 2), LogAO.Status.STOPPED);\n     }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3150\"})\n+    public void validationOfGECluster() {\n+        library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(clusterSettingForm)\n+                .clusterEnableCheckboxSelect(\"Enable GridEngine\")\n+                .click(button(\"OK\"))\n+                .checkConfigureClusterLabel(\"GridEngine Cluster (1 child node)\")\n+                .expandTab(ADVANCED_PANEL)\n+                .click(START_IDLE)\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .openClusterRuns(getRunId())\n+                .shouldContainRunsWithParentRun(1, getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_SGE\", \"true\"), exist)\n+                .waitForSshLink()\n+                .click(taskWithName(\"SGEMasterSetup\"))\n+                .ensure(log(), containsMessages(\"SGE master node was successfully configured\"))\n+                .click(taskWithName(\"SGEMasterSetupWorkers\"))\n+                .ensure(log(), containsMessages(\"All execution hosts are connected\"))\n+                .ssh(shell -> shell\n+                        .assertPageContains(String.format(\"[root@%s-%s\",\n+                                getPipelineName().toLowerCase(), getRunId()))\n+                        .execute(\"qhost\")\n+                        .assertOutputContains(\"HOSTNAME\", \"global\", String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), getRunId()), String.format(\"%s-%s lx-amd64\",\n+                                getPipelineName().toLowerCase(), Integer.parseInt(getRunId()) + 1))\n+                        .execute(\"qstat\")\n+                        .execute(\"qsub -b y -t 1:10 sleep 10m\")\n+                        .assertOutputContains(\"Your job-array 1.1-10:1 (\\\"sleep\\\") has been submitted\")\n+                        .execute(\"qstat\")\n+                        .assertOutputContains(String.format(\"main.q@%s\", getPipelineName().toLowerCase()).substring(0, 30))\n+                        .close());\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3151\"})\n+    public void validationOfSlurmCluster() {\n+        library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(clusterSettingForm)\n+                .clusterEnableCheckboxSelect(\"Enable Slurm\")\n+                .click(button(\"OK\"))\n+                .checkConfigureClusterLabel(\"Slurm Cluster (1 child node)\")\n+                .expandTab(ADVANCED_PANEL)\n+                .click(START_IDLE)\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .openClusterRuns(getRunId())\n+                .shouldContainRunsWithParentRun(1, getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_SLURM\", \"true\"), exist)\n+                .waitForSshLink()\n+                .click(taskWithName(\"SLURMMasterSetup\"))\n+                .ensure(log(), containsMessages(\"Master ENV is ready\"))\n+                .click(taskWithName(\"SLURMMasterSetupWorkers\"))\n+                .ensure(log(), containsMessages(\"All SLURM hosts are connected\"))\n+                .ssh(shell -> shell\n+                        .execute(\"sinfo\")\n+                        .assertOutputContains(\"main.q*\", \"idle\", String.format(\"%s-[%s-%s]\",\n+                                getPipelineName().toLowerCase(), getRunId(), Integer.parseInt(getRunId()) + 1))\n+                        .execute(\"srun -N2 -l /bin/hostname\")\n+                        .assertOutputContains(String.format(\"0: %s-%s\", getPipelineName().toLowerCase(), getRunId()),\n+                                String.format(\"1: %s-%s\", getPipelineName().toLowerCase(), Integer.parseInt(getRunId()) + 1))\n+                        .close());\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3152\"})\n+    public void validationOfApacheSparkCluster() {\n+        tools()\n+                .perform(defaultRegistry, defaultGroup, String.format(\"%s/%s\", defaultGroup, testingTool), ToolTab::runWithCustomSettings)\n+                .selectValue(INSTANCE_TYPE, testingNode)\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(clusterSettingForm)\n+                .clusterEnableCheckboxSelect(\"Enable Apache Spark\")\n+                .click(button(\"OK\"))\n+                .checkConfigureClusterLabel(\"Apache Spark Cluster (1 child node)\")\n+                .click(START_IDLE)\n+                .launch(this)\n+                .shouldContainRun(\"pipeline\", getRunId())\n+                .openClusterRuns(getRunId())\n+                .shouldContainRunsWithParentRun(1, getRunId())\n+                .showLog(getRunId())\n+                .expandTab(PARAMETERS)\n+                .ensure(configurationParameter(\"CP_CAP_SPARK\", \"true\"), exist)\n+                .waitForEndpointLink()\n+                .click(taskWithName(\"SparkMasterSetup\"))\n+                .ensure(log(), containsMessages(\"Spark master is started\"))\n+                .click(taskWithName(\"SparkWorkerSetup\"))\n+                .ensure(log(), containsMessages(\"Spark worker is started and connected to the master\"))\n+                .click(taskWithName(\"SparkMasterSetupWorkers\"))\n+                .ensure(log(), containsMessages(\"All workers are connected\"))\n+                .clickOnEndpointLink(\"SparkUI\")\n+                .sleep(3, SECONDS)\n+                .validationPageHeader(String.format(\"Spark Master at spark://pipeline-%s\", getRunId()))\n+                .validateAliveWorkersSparkPage(\" 2\")\n+                .assertPageContains(\"Workers (2)\")\n+                .closeTab();\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3155\"})\n+    public void hybridAutoScaledClusterInstanceTypeFamily() {\n+        library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .click(button(\"OK\"))\n+                .setCommand(\"qsub -b y -t 1:10 sleep 15m && sleep infinity\")\n+                .clickAddSystemParameter()\n+                .selectSystemParameters(\"CP_CAP_AUTOSCALE_HYBRID_FAMILY\")\n+                .inputSystemParameterValue(\"CP_CAP_AUTOSCALE_HYBRID_FAMILY\", instanceFamilyName)\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .waitForNestedRunsLink()\n+                .clickOnNestedRunLink()\n+                .instanceParameters(instance ->\n+                        instance.ensure(TYPE, text(C.DEFAULT_INSTANCE_FAMILY_NAME))\n+                );\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3154\"})\n+    public void hybridAutoScaledClusterCPUDeadlock() {\n+        library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .click(button(\"OK\"))\n+                .click(START_IDLE)\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qsub -b y -pe local 150 sleep 5m\")\n+                        .assertOutputContains(\"Your job 1 (\\\"sleep\\\") has been submitted\")\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .close());\n+        navigationMenu()\n+                .runs()\n+                .activeRuns()\n+                .showLog(getRunId())\n+                .waitForTask(gridEngineAutoscalingTask)\n+                .click(taskWithName(gridEngineAutoscalingTask))\n+                .ensure(log(), containsMessages(\"The following jobs cannot be satisfied with the \" +\n+                        \"requested resources and therefore they will be rejected: 1 (150 cpu)\"))\n+                .ssh(shell -> shell\n+                        .execute(\"qsub -b y -pe local 50 sleep 5m\")\n+                        .close());\n+        navigationMenu()\n+                .runs()\n+                .activeRuns()\n+                .showLog(getRunId())\n+                .waitForNestedRunsLink()\n+                .clickOnNestedRunLink()\n+                .ensure(STATUS, text(String.valueOf(Integer.parseInt(getRunId()) + 1)));\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3159\"})\n+    public void hybridAutoScaledClusterCPUDeadlockWithAdditionalRestrictions() {\n+        final String systemParam = \"CP_CAP_AUTOSCALE_HYBRID_MAX_CORE_PER_NODE\";\n+        library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .enableHybridClusterSelect()\n+                .click(button(\"OK\"))\n+                .click(START_IDLE)\n+                .clickAddSystemParameter()\n+                .selectSystemParameters(systemParam)\n+                .inputSystemParameterValue(systemParam, \"40\")\n+                .launch(this)\n+                .shouldContainRun(getPipelineName(), getRunId())\n+                .showLog(getRunId())\n+                .waitForSshLink()\n+                .ssh(shell -> shell\n+                        .execute(\"qsub -b y -pe local 50 sleep 5m\")\n+                        .assertOutputContains(\"Your job 1 (\\\"sleep\\\") has been submitted\")\n+                        .sleep(20, SECONDS)\n+                        .execute(\"qstat\")\n+                        .close());\n+        navigationMenu()\n+                .runs()\n+                .activeRuns()\n+                .showLog(getRunId())\n+                .waitForTask(gridEngineAutoscalingTask)\n+                .click(taskWithName(gridEngineAutoscalingTask))\n+                .ensure(log(), containsMessages(\"The following jobs cannot be satisfied with the \" +\n+                        \"requested resources and therefore they will be rejected: 1 (50 cpu)\"));\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-3156\"})\n+    public void autoScaledClusterWorkersPriceTypeSpot() {\n+        library()\n+                .createPipeline(Template.SHELL, getPipelineName())\n+                .clickOnPipeline(getPipelineName())\n+                .firstVersion()\n+                .runPipeline()\n+                .setDefaultLaunchOptions()\n+                .enableClusterLaunch()\n+                .clusterSettingsForm(autoScaledSettingForm)\n+                .setWorkingNodesCount(\"1\")\n+                .setWorkersPriceType(\"Spot\")", "originalCommit": "33fa72cd3a38fa955a73ce67e89101f2cc5f9aa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNjkyOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458226928", "bodyText": "The same for all hard coded \"Spot\" value", "author": "kamyshova", "createdAt": "2020-07-21T16:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNjI3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwNDgyNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458304825", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-07-21T18:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNjI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMzU3OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458233579", "bodyText": "It would be better to create a new class for system parameter. For example, SystemParameterPopupAO, that extends PopupAO class", "author": "kamyshova", "createdAt": "2020-07-21T16:34:13Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java", "diffHunk": "@@ -299,6 +305,34 @@ private RunParameterAO clickAddParameter(String parameterType) {\n         return new RunParameterAO(this, parameterIndex);\n     }\n \n+    public PipelineRunFormAO clickAddSystemParameter() {\n+        return click(ADD_SYSTEM_PARAMETER)\n+                .ensure(SYSTEM_PARAMETERS_DIALOG, visible);\n+    }\n+\n+    private PipelineRunFormAO selectSystemParameter(String parameter) {\n+        SelenideElement inputField = $(byXpath(\"//*[@placeholder='Parameter']\"));\n+        Utils.clearTextField(inputField);\n+        Utils.clickAndSendKeysWithSlashes(inputField, parameter);\n+        $(byText(parameter)).shouldBe(visible).click();\n+        return this;\n+    }\n+\n+    public PipelineRunFormAO selectSystemParameters(String ... parameters) {\n+        Arrays.stream(parameters).forEach(this::selectSystemParameter);\n+        $(byId(\"system-parameters-browser-ok-button\")).shouldBe(visible).click();\n+        return this;\n+    }\n+\n+    public PipelineRunFormAO inputSystemParameterValue(String parameter, String value) {\n+        String inputFieldID = $(byXpath(String.format(\"//input[@value='%s']\", parameter))).attr(\"id\")\n+                .replace(\".name\", \".value\");\n+        SelenideElement inputField = $(byXpath(String.format(\"//input[@id='%s']\", inputFieldID)));\n+        inputField.shouldBe(enabled);\n+        Utils.sendKeysByChars(inputField, value);\n+        return this;\n+    }\n+", "originalCommit": "33fa72cd3a38fa955a73ce67e89101f2cc5f9aa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NTI0MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458995241", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-07-22T18:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMzU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNzg2NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458237864", "bodyText": "Better to use selenide checks - for example, shouldHave(text(label)). it will take a screenshot if it fails", "author": "kamyshova", "createdAt": "2020-07-21T16:40:49Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/PipelineRunFormAO.java", "diffHunk": "@@ -322,6 +356,39 @@ public PipelineRunFormAO resetClusterChildNodes () {\n         return this;\n     }\n \n+    public PipelineRunFormAO setWorkersPriceType(final String priceType) {\n+        click(WORKERS_PRICE_TYPE);\n+        context().find(PipelineSelectors.visible(byClassName(\"ant-select-dropdown\"))).find(byText(priceType))\n+                .shouldBe(visible)\n+                .click();\n+        return this;\n+    }\n+\n+    public PipelineRunFormAO enableHybridClusterSelect () {\n+        $(byXpath(\".//span[.='Enable Hybrid cluster']/preceding-sibling::span\")).click();\n+        return this;\n+    }\n+\n+    public PipelineRunFormAO clusterEnableCheckboxSelect(String checkBox){\n+        if (checkBox.equals(\"Enable GridEngine\")\n+                || checkBox.equals(\"Enable Apache Spark\")\n+                || checkBox.equals(\"Enable Slurm\")) {\n+            context()\n+                .find(byXpath(\n+                       String.format(\".//span[.='%s']/preceding-sibling::span[@class='ant-checkbox']\", checkBox)))\n+                .click();\n+        } else {\n+            fail(\"Wrong checkbox name was selected\");\n+        }\n+        return this;\n+    }\n+\n+    public PipelineRunFormAO checkConfigureClusterLabel(String label) {\n+        assertEquals(context().find(byXpath(\".//div[@class='ant-row-flex ant-row-flex-end']/a\"))\n+                .shouldBe(visible).getText(), label);", "originalCommit": "33fa72cd3a38fa955a73ce67e89101f2cc5f9aa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NDk2MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1224#discussion_r458994960", "bodyText": "Done", "author": "maryvictol", "createdAt": "2020-07-22T18:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNzg2NA=="}], "type": "inlineReview"}, {"oid": "395a9dd52cd30e5cb90e463b6a1b05dbee790a8b", "url": "https://github.com/epam/cloud-pipeline/commit/395a9dd52cd30e5cb90e463b6a1b05dbee790a8b", "message": "update LauchCluster and GlobalSearch tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-22T18:34:55Z", "type": "commit"}, {"oid": "d82687b8457791a2cf6a6c71531290a75784ea92", "url": "https://github.com/epam/cloud-pipeline/commit/d82687b8457791a2cf6a6c71531290a75784ea92", "message": "update GlobalSearch tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-07-23T10:04:22Z", "type": "commit"}]}