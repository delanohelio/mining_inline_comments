{"pr_number": 1460, "pr_title": "Issue 1404 implemented test for acl layer region package", "pr_createdAt": "2020-10-05T09:29:35Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1460", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MTQ5Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500151496", "bodyText": "Why should we add changes to this class? Does this configuration affect new tests?", "author": "ekazachkova", "createdAt": "2020-10-06T09:56:28Z", "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "diffHunk": "@@ -45,6 +45,7 @@\n import com.epam.pipeline.manager.pipeline.ToolManager;\n import com.epam.pipeline.manager.pipeline.runner.ConfigurationProviderManager;\n import com.epam.pipeline.manager.pipeline.runner.ConfigurationRunner;\n+import com.epam.pipeline.manager.region.CloudRegionManager;", "originalCommit": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjIxNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262215", "bodyText": "If we don't add this manager, tests in the RunApiServiceTest will be failed. So, if I may say so, new tests affect the old tests and their configuration. But thanks to your remark, I found a redundant bin in this configuration, which I added earlier.", "author": "YouKofan", "createdAt": "2020-10-06T13:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MTQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MzI0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500153242", "bodyText": "To avoid confusion, let's give the fields actual names, depending on their current mock state", "author": "ekazachkova", "createdAt": "2020-10-06T09:59:26Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -179,24 +210,15 @@\n     @MockBean\n     protected ToolApiService mockToolApiService;\n \n-    @MockBean\n-    protected PermissionsService mockPermissionsService;\n-\n-    @MockBean\n-    protected PermissionEvaluator mockPermissionEvaluator;\n-\n     @MockBean\n     protected MessageHelper mockMessageHelper;\n \n-    @MockBean\n+    @Autowired\n     protected CheckPermissionHelper mockPermissionHelper;", "originalCommit": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjExNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262115", "bodyText": "Thank you, fixed.", "author": "YouKofan", "createdAt": "2020-10-06T13:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1MzI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDUzMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500160530", "bodyText": "Lets make a new expected object that will not be mutated during the test execution", "author": "ekazachkova", "createdAt": "2020-10-06T10:12:31Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> clouds;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        clouds = new ArrayList<>();\n+        clouds.add(region);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());", "originalCommit": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjE1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262157", "bodyText": "Done. I hope that i understand you correctly.", "author": "YouKofan", "createdAt": "2020-10-06T13:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDM3MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500200370", "bodyText": "Lets add test to the following case:\n\ncreate two regions: region1, region2\ngrant permissions for user only for region1\nmock mockCloudRegionManager to return two regions\ncheck that user gets only region1", "author": "ekazachkova", "createdAt": "2020-10-06T11:27:55Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> clouds;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        clouds = new ArrayList<>();\n+        clouds.add(region);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(clouds).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions).isEqualTo(clouds);\n+        assertThat(abstractCloudRegions.get(0).getId()).isEqualTo(clouds.get(0).getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {", "originalCommit": "4029e38d56e3b7b553477a1cc9dae3fb049e49c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MjI5MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500262290", "bodyText": "Test is added.", "author": "YouKofan", "createdAt": "2020-10-06T13:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODA5OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500278099", "bodyText": "To my mind it would be cleaner to create this object directly in test since twoRegionList used in one test only. No need to create this object for each test.", "author": "ekazachkova", "createdAt": "2020-10-06T13:31:25Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();", "originalCommit": "e171e37bc99ab82b052ca7926f00309a92066e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyNTg2Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500325866", "bodyText": "Also, we can use Arrays.asList here", "author": "ekazachkova", "createdAt": "2020-10-06T14:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzI0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453242", "bodyText": "twoRegionList moved to the method that calls them (also moved regionWithoutPermissionobject as it used at once too).\nAbout using Arrays.asList please see following comment.", "author": "YouKofan", "createdAt": "2020-10-06T16:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTM1Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500279353", "bodyText": "Could we use Collections.singletonList here?", "author": "ekazachkova", "createdAt": "2020-10-06T13:32:50Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();", "originalCommit": "e171e37bc99ab82b052ca7926f00309a92066e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MDgzMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500450833", "bodyText": "Collections.singletonList, as well as the list created with the help of Arrays.asList, call UnsupportedOperationException when trying to change them (the stack trace comes to the remove method in the AbstractList class).", "author": "YouKofan", "createdAt": "2020-10-06T16:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTU4NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500279584", "bodyText": "Could we use Collections.singletonList here?", "author": "ekazachkova", "createdAt": "2020-10-06T13:33:07Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));", "originalCommit": "e171e37bc99ab82b052ca7926f00309a92066e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzM5Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453392", "bodyText": "Done", "author": "YouKofan", "createdAt": "2020-10-06T16:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3OTU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4MDAyNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500280024", "bodyText": "Cleanup please", "author": "ekazachkova", "createdAt": "2020-10-06T13:33:34Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        System.out.println(abstractCloudRegions);", "originalCommit": "e171e37bc99ab82b052ca7926f00309a92066e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzU0NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453544", "bodyText": "Done", "author": "YouKofan", "createdAt": "2020-10-06T16:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4MDAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNDQwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500314402", "bodyText": "The singleRegionList object was mutated during @PostFilter operation. This way this assertion is useless and we need another one. For example, let's check elements count (in this case we shall move abstractCloudRegions.get(0) after checking size).", "author": "ekazachkova", "createdAt": "2020-10-06T14:09:20Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);", "originalCommit": "e171e37bc99ab82b052ca7926f00309a92066e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzY0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453642", "bodyText": "Done", "author": "YouKofan", "createdAt": "2020-10-06T16:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNDQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxOTUyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500319523", "bodyText": "Let's add check chat returned region id as expected.", "author": "ekazachkova", "createdAt": "2020-10-06T14:14:37Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private AwsRegion regionWithoutPermission;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<AbstractCloudRegion> twoRegionsList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        cloudRegionInfoList = new ArrayList<>();\n+        cloudRegionInfoList.add(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+        System.out.println(abstractCloudRegions);\n+        final AbstractCloudRegion resultRegion = abstractCloudRegions.get(0);\n+\n+        assertThat(abstractCloudRegions).isEqualTo(singleRegionList);\n+        assertThat(resultRegion.getId()).isEqualTo(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithRegionsPermissionsForWhichIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(regionWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(twoRegionsList).when(mockCloudRegionManager).loadAll();\n+        \n+        final List<? extends AbstractCloudRegion> abstractCloudRegions = cloudRegionApiService.loadAll();\n+\n+        assertThat(abstractCloudRegions.size()).isEqualTo(1);", "originalCommit": "e171e37bc99ab82b052ca7926f00309a92066e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzcwNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r500453704", "bodyText": "Done", "author": "YouKofan", "createdAt": "2020-10-06T16:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxOTUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NDgxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501584810", "bodyText": "Could you please change object casting to something like:\nfinal List<? extends AbstractCloudRegion> resultList = cloudRegionApiService.loadAll();\n\nassertThat(resultList).hasSize(1);\nassertThat(resultList.get(0)).isEqualTo(region);", "author": "ekazachkova", "createdAt": "2020-10-08T09:40:41Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();", "originalCommit": "614e4ac3de3170ca83c37f28074c2f9ce499ad01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NzE1MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501587151", "bodyText": "Will this code ever get executed?", "author": "ekazachkova", "createdAt": "2020-10-08T09:44:28Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnAllCloudRegionsWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithRegionsPermissionsForWhichIsGranted() {\n+        final AwsRegion regionWithoutPermission = new AwsRegion();\n+        regionWithoutPermission.setId(2L);\n+        regionWithoutPermission.setName(\"SIMPLE_USER\");\n+        regionWithoutPermission.setOwner(OWNER_USER);\n+\n+        final ArrayList<AbstractCloudRegion> twoRegionsList = new ArrayList<>();\n+        twoRegionsList.add(region);\n+        twoRegionsList.add(regionWithoutPermission);\n+\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(regionWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(twoRegionsList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1).contains(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyListOfCloudRegionsWithoutPermission() {\n+        initAclEntity(region);\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<AwsRegion> resultList = (List<AwsRegion>) cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).load(region.getId());\n+\n+        final AbstractCloudRegion load = cloudRegionApiService.load(region.getId());\n+\n+        assertThat(load).isEqualTo(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnCloudRegionWhenPermissionIsGranted() {\n+        initAclEntity(region,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        when(mockCloudRegionManager.load(eq(region.getId()))).thenReturn(region);\n+\n+        final AbstractCloudRegion result = cloudRegionApiService.load(region.getId());\n+\n+        assertThat(result).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldFailReturningCloudRegionWithoutPermission() {\n+        initAclEntity(region);\n+        doReturn(region).when(mockCloudRegionManager).load(region.getId());\n+\n+        cloudRegionApiService.load(region.getId());\n+\n+        assertThat(region).isNull();", "originalCommit": "614e4ac3de3170ca83c37f28074c2f9ce499ad01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6417a1f923969260f071a9dfde99e673ce661b8d", "url": "https://github.com/epam/cloud-pipeline/commit/6417a1f923969260f071a9dfde99e673ce661b8d", "message": "Issue #1404: Unfinished tests for CloudRegionApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:48:57Z", "type": "commit"}, {"oid": "b096a5c6cceb49139cbef36a173554d791b95866", "url": "https://github.com/epam/cloud-pipeline/commit/b096a5c6cceb49139cbef36a173554d791b95866", "message": "Issue #1404: Implemented tests for CloudRegionApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:23Z", "type": "commit"}, {"oid": "939ead638e26aa63c28bad2406e566c5d79b8ccd", "url": "https://github.com/epam/cloud-pipeline/commit/939ead638e26aa63c28bad2406e566c5d79b8ccd", "message": "Issue #1404: Refactoring and improvement tests for CloudRegionApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:23Z", "type": "commit"}, {"oid": "22fbd594618eed03a57e31b54bcc81e909fabc21", "url": "https://github.com/epam/cloud-pipeline/commit/22fbd594618eed03a57e31b54bcc81e909fabc21", "message": "Issue #1404: Fixed issues with permissions in CloudRegionApiService tests\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:23Z", "type": "commit"}, {"oid": "40ddedce464ce3f8fadc5cb0db92045cc91a13a0", "url": "https://github.com/epam/cloud-pipeline/commit/40ddedce464ce3f8fadc5cb0db92045cc91a13a0", "message": "Issue #1404: implemented tests for CloudRegionApiService.class\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:24Z", "type": "commit"}, {"oid": "15b9dbc8e47b0af3a4201362fb629e014da560a9", "url": "https://github.com/epam/cloud-pipeline/commit/15b9dbc8e47b0af3a4201362fb629e014da560a9", "message": "Issue #1404: Fixes in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:24Z", "type": "commit"}, {"oid": "8852333ca0c50905a5c68a6a993ec6caf305f100", "url": "https://github.com/epam/cloud-pipeline/commit/8852333ca0c50905a5c68a6a993ec6caf305f100", "message": "Issue #1404: Removed unused imports\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:24Z", "type": "commit"}, {"oid": "a64d13003b3b93021398adbcd24f4ee612189809", "url": "https://github.com/epam/cloud-pipeline/commit/a64d13003b3b93021398adbcd24f4ee612189809", "message": "Issue #1404: Minor fixes in tests\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:24Z", "type": "commit"}, {"oid": "ecacb841b97bfdeeb7c2eeb64d87c74ca3151430", "url": "https://github.com/epam/cloud-pipeline/commit/ecacb841b97bfdeeb7c2eeb64d87c74ca3151430", "message": "Issue #1404: corrections according to comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:24Z", "type": "commit"}, {"oid": "3ff88f26289aa046135c2f65224f532cbc1f180a", "url": "https://github.com/epam/cloud-pipeline/commit/3ff88f26289aa046135c2f65224f532cbc1f180a", "message": "Issue #1404: tests corrections\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:25Z", "type": "commit"}, {"oid": "f789b8913c04c72bf4dc9542545c5bd06e327fde", "url": "https://github.com/epam/cloud-pipeline/commit/f789b8913c04c72bf4dc9542545c5bd06e327fde", "message": "Issue #1404: improvements of asserts in PostFilter tests\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:25Z", "type": "commit"}, {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458", "url": "https://github.com/epam/cloud-pipeline/commit/465dbf0e4dd6570bededce2198bda7e0348b5458", "message": "Issue #1404: assertions refactoring + removed one redundant assertion\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:25Z", "type": "commit"}, {"oid": "465dbf0e4dd6570bededce2198bda7e0348b5458", "url": "https://github.com/epam/cloud-pipeline/commit/465dbf0e4dd6570bededce2198bda7e0348b5458", "message": "Issue #1404: assertions refactoring + removed one redundant assertion\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T14:49:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTg2MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501815861", "bodyText": "Can't we use here SIMPLE_USER_ROLE? I think it is better to stuck to one role if both have equal meaning", "author": "mzueva", "createdAt": "2020-10-08T15:32:55Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)", "originalCommit": "465dbf0e4dd6570bededce2198bda7e0348b5458", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNzMxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501827314", "bodyText": "The method that is tested here has the condition ADMIN_OR_GENERAL_USER in PreAuthorize. I thought the General User had access as opposed to the Simple User. So I made a separate variable for General user.", "author": "YouKofan", "createdAt": "2020-10-08T15:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMDU4NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501830584", "bodyText": "General user is any user with role named USER or ROLE_USER, so there is no actual difference between General user and Simple user", "author": "mzueva", "createdAt": "2020-10-08T15:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNzQxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501817410", "bodyText": "Please, do not mix role and username, let's introduce a separate constant for username", "author": "mzueva", "createdAt": "2020-10-08T15:35:08Z", "path": "api/src/test/java/com/epam/pipeline/acl/region/CloudRegionApiServiceTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.region;\n+\n+import com.epam.pipeline.controller.vo.region.AWSRegionDTO;\n+import com.epam.pipeline.controller.vo.region.AbstractCloudRegionDTO;\n+import com.epam.pipeline.entity.info.CloudRegionInfo;\n+import com.epam.pipeline.entity.region.AbstractCloudRegion;\n+import com.epam.pipeline.entity.region.AwsRegion;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.epam.pipeline.manager.region.CloudRegionManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+public class CloudRegionApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private CloudRegionApiService cloudRegionApiService;\n+\n+    @Autowired\n+    private CloudRegionManager mockCloudRegionManager;\n+\n+    private final AbstractCloudRegionDTO cloudRegionDTO = new AWSRegionDTO();\n+\n+    private final List<String> availableCloudsList = Arrays.asList(\"AWS\", \"AZURE\", \"GCP\");\n+\n+    private AwsRegion region;\n+\n+    private List<AbstractCloudRegion> singleRegionList;\n+\n+    private List<CloudRegionInfo> cloudRegionInfoList;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        region = new AwsRegion();\n+        region.setId(1L);\n+        region.setName(\"OWNER\");\n+        region.setOwner(OWNER_USER);\n+\n+        singleRegionList = new ArrayList<>();\n+        singleRegionList.add(region);\n+\n+        cloudRegionInfoList = Collections.singletonList(new CloudRegionInfo(region));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldAllowLoadRegionsInfoForAdmin() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = GENERAL_USER_ROLE)\n+    public void shouldAllowLoadRegionsInfoForGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        assertThat(cloudRegionApiService.loadAllRegionsInfo()).isEqualTo(cloudRegionInfoList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadRegionsInfoForNotAdminOrGeneralUser() {\n+        doReturn(cloudRegionInfoList).when(mockCloudRegionManager).loadAllRegionsInfo();\n+\n+        cloudRegionApiService.loadAllRegionsInfo();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.create(cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotCreateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).create(cloudRegionDTO);\n+\n+        cloudRegionApiService.create(cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        assertThat(cloudRegionApiService.update(region.getId(), cloudRegionDTO)).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotUpdateAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).update(region.getId(), cloudRegionDTO);\n+\n+        cloudRegionApiService.update(region.getId(), cloudRegionDTO);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        assertThat(cloudRegionApiService.delete(region.getId())).isEqualTo(region);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDeleteAbstractCloudRegionForNotAdmin() {\n+        doReturn(region).when(mockCloudRegionManager).delete(region.getId());\n+\n+        cloudRegionApiService.delete(region.getId());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllAvailableCloudsForAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        assertThat(cloudRegionApiService.loadAllAvailable(CloudProvider.AWS)).isEqualTo(availableCloudsList);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldNotLoadAllAvailableCloudsForNotAdmin() {\n+        doReturn(availableCloudsList).when(mockCloudRegionManager).loadAllAvailable(CloudProvider.AWS);\n+\n+        cloudRegionApiService.loadAllAvailable(CloudProvider.AWS);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnAllCloudRegionsForAdmin() {\n+        doReturn(singleRegionList).when(mockCloudRegionManager).loadAll();\n+\n+        final List<? extends AbstractCloudRegion> resultList = cloudRegionApiService.loadAll();\n+\n+        assertThat(resultList).hasSize(1);\n+        assertThat(resultList.get(0)).isEqualTo(region);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER_ROLE)", "originalCommit": "465dbf0e4dd6570bededce2198bda7e0348b5458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMDg0OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1460#discussion_r501820849", "bodyText": "It seems that you can just use basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"} without excludes", "author": "mzueva", "createdAt": "2020-10-08T15:40:02Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -37,10 +39,18 @@\n  */\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n+@ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n+@ComponentScan(", "originalCommit": "465dbf0e4dd6570bededce2198bda7e0348b5458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4150d8d70fc7ffaa5fdf03bb539a8375a2743b7d", "url": "https://github.com/epam/cloud-pipeline/commit/4150d8d70fc7ffaa5fdf03bb539a8375a2743b7d", "message": "Issue #1404: variable names improvements, remove redundant configs\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-08T18:31:23Z", "type": "commit"}]}