{"pr_number": 997, "pr_title": "Issue #907 Default home storage for new users", "pr_createdAt": "2020-03-10T17:13:42Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/997", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzODk5OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391038999", "bodyText": "Can be replaces with\nLong storageId = Optional.ofNullable(defaultStorageId).orElseGet(() -> .... createDefaultFolder)", "author": "mzueva", "createdAt": "2020-03-11T15:05:30Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -83,10 +88,47 @@\n     @Autowired\n     private DataStorageValidator storageValidator;\n \n-    @Transactional(propagation = Propagation.REQUIRED)\n+    @Autowired\n+    private FolderManager folderManager;\n+\n+    @Value(\"${storage.user.home.auto:false}\")\n+    private boolean shouldCreateDefaultHome;\n+\n+    @Value(\"${storage.user.home.template}\")\n+    private  String defaultUserStorageTemplateName;\n+\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        if (defaultStorageId != null) {", "originalCommit": "8826a4cbcf73cac3f1f69954e44334398cf3aeae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNDUzNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391124535", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-11T17:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzODk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MzM3Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391043377", "bodyText": "after project is created we need to call changeOwner on all created entities (or it will be unavailable for user)", "author": "mzueva", "createdAt": "2020-03-11T15:11:30Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -83,10 +88,47 @@\n     @Autowired\n     private DataStorageValidator storageValidator;\n \n-    @Transactional(propagation = Propagation.REQUIRED)\n+    @Autowired\n+    private FolderManager folderManager;\n+\n+    @Value(\"${storage.user.home.auto:false}\")\n+    private boolean shouldCreateDefaultHome;\n+\n+    @Value(\"${storage.user.home.template}\")\n+    private  String defaultUserStorageTemplateName;\n+\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        if (defaultStorageId != null) {\n+            newUser.setDefaultStorageId(defaultStorageId);\n+            userDao.updateUser(newUser);\n+        } else if (shouldCreateDefaultHome) {\n+            final AbstractDataStorage defaultStorage = createUserDefaultFolder(newUser).getStorages().get(0);\n+            newUser.setDefaultStorageId(defaultStorage.getId());\n+            userDao.updateUser(newUser);\n+        }\n+        return newUser;\n+    }\n+\n+    private Folder createUserDefaultFolder(final PipelineUser user) {\n+        final Folder folder = new Folder();\n+        final String userName = user.getUserName();\n+        folder.setName(userName);\n+        try {\n+            return folderManager.createFromTemplate(folder, defaultUserStorageTemplateName, false);", "originalCommit": "8826a4cbcf73cac3f1f69954e44334398cf3aeae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1MTYyOA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391051628", "bodyText": "We need to check, how this will work, when user is created from SamlUserDetailsService - listing templates may fail, if user is not authorized yet.", "author": "mzueva", "createdAt": "2020-03-11T15:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MzM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNDQzMw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391124433", "bodyText": "Setting owner permissions manually", "author": "Wedds", "createdAt": "2020-03-11T17:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MzM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0NTk4Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391045987", "bodyText": "I would suggest to store home folder parent id in SystemPreferences", "author": "mzueva", "createdAt": "2020-03-11T15:14:59Z", "path": "api/src/main/java/com/epam/pipeline/entity/templates/FolderTemplate.java", "diffHunk": "@@ -33,6 +33,7 @@\n @Builder\n public class FolderTemplate {\n     private String name;\n+    private Long parentId;", "originalCommit": "8826a4cbcf73cac3f1f69954e44334398cf3aeae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNDAwNg==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391124006", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-11T17:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0NTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0NzQwMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391047401", "bodyText": "I don't see why this should be removed?", "author": "mzueva", "createdAt": "2020-03-11T15:16:53Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -83,10 +88,47 @@\n     @Autowired\n     private DataStorageValidator storageValidator;\n \n-    @Transactional(propagation = Propagation.REQUIRED)", "originalCommit": "8826a4cbcf73cac3f1f69954e44334398cf3aeae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0ODE4Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391048186", "bodyText": "Instead of getting parentId from template, let's get it from SystemPreferences and set it to folder here", "author": "mzueva", "createdAt": "2020-03-11T15:18:00Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -83,10 +88,47 @@\n     @Autowired\n     private DataStorageValidator storageValidator;\n \n-    @Transactional(propagation = Propagation.REQUIRED)\n+    @Autowired\n+    private FolderManager folderManager;\n+\n+    @Value(\"${storage.user.home.auto:false}\")\n+    private boolean shouldCreateDefaultHome;\n+\n+    @Value(\"${storage.user.home.template}\")\n+    private  String defaultUserStorageTemplateName;\n+\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        if (defaultStorageId != null) {\n+            newUser.setDefaultStorageId(defaultStorageId);\n+            userDao.updateUser(newUser);\n+        } else if (shouldCreateDefaultHome) {\n+            final AbstractDataStorage defaultStorage = createUserDefaultFolder(newUser).getStorages().get(0);\n+            newUser.setDefaultStorageId(defaultStorage.getId());\n+            userDao.updateUser(newUser);\n+        }\n+        return newUser;\n+    }\n+\n+    private Folder createUserDefaultFolder(final PipelineUser user) {\n+        final Folder folder = new Folder();", "originalCommit": "8826a4cbcf73cac3f1f69954e44334398cf3aeae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMzkzOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r391123939", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-11T17:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0ODE4Ng=="}], "type": "inlineReview"}, {"oid": "54e9a659c6e91758a53263d7e1fee177f111da98", "url": "https://github.com/epam/cloud-pipeline/commit/54e9a659c6e91758a53263d7e1fee177f111da98", "message": "Issue #907 Provide tests for users default folder creation process", "committedDate": "2020-03-14T13:00:07Z", "type": "forcePushed"}, {"oid": "06375f75df0c7cf5b3c7b7e5750eb651944c333a", "url": "https://github.com/epam/cloud-pipeline/commit/06375f75df0c7cf5b3c7b7e5750eb651944c333a", "message": "Issue #907 Automatically create default storage for new user", "committedDate": "2020-10-28T14:48:00Z", "type": "commit"}, {"oid": "ebe410ef719ae45b506d11d60657e81997b902ba", "url": "https://github.com/epam/cloud-pipeline/commit/ebe410ef719ae45b506d11d60657e81997b902ba", "message": "Issue #907 Don't create new storage for a user if one, suitable by name, exists already", "committedDate": "2020-10-28T14:48:06Z", "type": "commit"}, {"oid": "651535385d5379eb2c21706382985c11c69c8594", "url": "https://github.com/epam/cloud-pipeline/commit/651535385d5379eb2c21706382985c11c69c8594", "message": "Issue #907 Extract template name to properties, fix permission mask used", "committedDate": "2020-10-28T14:48:06Z", "type": "commit"}, {"oid": "d1668b4f40a2b1ab96d0edd707c332185fcc55bf", "url": "https://github.com/epam/cloud-pipeline/commit/d1668b4f40a2b1ab96d0edd707c332185fcc55bf", "message": "Issue #907 Change user update propagation to assign default storage", "committedDate": "2020-10-28T14:48:07Z", "type": "commit"}, {"oid": "8a6a8d87a2d6dbe64efc6f12dba48dceb882cdb3", "url": "https://github.com/epam/cloud-pipeline/commit/8a6a8d87a2d6dbe64efc6f12dba48dceb882cdb3", "message": "Issue #907 Extract parent folder id and default storage creation values to SystemPreferences", "committedDate": "2020-10-28T14:49:37Z", "type": "commit"}, {"oid": "6514e4db23f66888f5273f1aeece598b1f4842c7", "url": "https://github.com/epam/cloud-pipeline/commit/6514e4db23f66888f5273f1aeece598b1f4842c7", "message": "Issue #907 Remove permissions from template and handle it manually", "committedDate": "2020-10-28T14:49:38Z", "type": "commit"}, {"oid": "146819bde71af3ebeeb757a119ce50faa6f420c3", "url": "https://github.com/epam/cloud-pipeline/commit/146819bde71af3ebeeb757a119ce50faa6f420c3", "message": "Issue #907 Re-use existing folder as default if one exists", "committedDate": "2020-10-28T14:49:38Z", "type": "commit"}, {"oid": "eaebb00fd17429bc34cedf8f9952604859e20673", "url": "https://github.com/epam/cloud-pipeline/commit/eaebb00fd17429bc34cedf8f9952604859e20673", "message": "Issue #907 Support of user's default folder creation for SAML registration", "committedDate": "2020-10-28T14:49:39Z", "type": "commit"}, {"oid": "09eb2e25530195d77ffb46b8e23afd51970ba635", "url": "https://github.com/epam/cloud-pipeline/commit/09eb2e25530195d77ffb46b8e23afd51970ba635", "message": "Issue #907 Fix FolderCrudManager.update method: use non null check", "committedDate": "2020-10-28T14:49:39Z", "type": "commit"}, {"oid": "190c226007379f8891576be92771c0fd8ebfec42", "url": "https://github.com/epam/cloud-pipeline/commit/190c226007379f8891576be92771c0fd8ebfec42", "message": "Issue #907 Create data storage in existing folder if no such found", "committedDate": "2020-10-28T14:49:40Z", "type": "commit"}, {"oid": "7b58b5fef472a7611f708088c38367a1970cb7c7", "url": "https://github.com/epam/cloud-pipeline/commit/7b58b5fef472a7611f708088c38367a1970cb7c7", "message": "Issue #907 Provide tests for users default folder creation process", "committedDate": "2020-10-28T14:49:40Z", "type": "commit"}, {"oid": "b202c67ac1b6f198328eff081a305e143dd64e8c", "url": "https://github.com/epam/cloud-pipeline/commit/b202c67ac1b6f198328eff081a305e143dd64e8c", "message": "Issue #907 Fix coding style violations", "committedDate": "2020-10-28T15:04:30Z", "type": "commit"}, {"oid": "b202c67ac1b6f198328eff081a305e143dd64e8c", "url": "https://github.com/epam/cloud-pipeline/commit/b202c67ac1b6f198328eff081a305e143dd64e8c", "message": "Issue #907 Fix coding style violations", "committedDate": "2020-10-28T15:04:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NTA5OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r513565099", "bodyText": "What about the case when user just wants to rename folder? Could we still need such functionality?", "author": "ekazachkova", "createdAt": "2020-10-28T16:00:50Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderCrudManager.java", "diffHunk": "@@ -117,9 +117,9 @@ public Folder update(final Folder folder) {\n             dbFolder.setName(validateName(folder.getName()));\n         }\n         Long parentId = folder.getParentId();\n-        Assert.isNull(loadByNameAndParentId(folder.getName(), parentId),\n-                messageHelper.getMessage(MessageConstants.ERROR_FOLDER_NAME_EXISTS,\n-                        folder.getName(), parentId));\n+        Assert.notNull(loadByNameAndParentId(folder.getName(), parentId),", "originalCommit": "b202c67ac1b6f198328eff081a305e143dd64e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3NTQ5NA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r529375494", "bodyText": "Done, extracted into a separate method, normal update is restored", "author": "Wedds", "createdAt": "2020-11-24T09:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NTA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NjY5OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r513566699", "bodyText": "Let's add final to failOnExisting argument", "author": "ekazachkova", "createdAt": "2020-10-28T16:02:41Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderManager.java", "diffHunk": "@@ -145,7 +145,12 @@ public Folder delete(Long id) {\n \n     @Transactional(propagation = Propagation.REQUIRED)\n     public Folder createFromTemplate(final Folder folder, final String templateName) {\n-        return folderTemplateManager.create(folder, templateName);\n+        return createFromTemplate(folder, templateName, true);\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public Folder createFromTemplate(final Folder folder, final String templateName, boolean failOnExisting) {", "originalCommit": "b202c67ac1b6f198328eff081a305e143dd64e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3NTYwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r529375602", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-24T09:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2NjY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4Mjg0NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r513582845", "bodyText": "Shouldn't storages always be present?", "author": "ekazachkova", "createdAt": "2020-10-28T16:23:20Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderTemplateManager.java", "diffHunk": "@@ -75,12 +80,41 @@\n     private MessageHelper messageHelper;\n     @Autowired\n     private MetadataPostProcessorService metadataPostProcessorService;\n+    @Autowired\n+    private AbstractDataStorageMapper dataStorageMapper;\n \n     @Value(\"${templates.folder.directory}\")\n     private String folderTemplatesDirectoryPath;\n \n     @Transactional(propagation = Propagation.REQUIRED)\n-    public Folder create(final Folder folder, final String templateName) {\n+    public Folder create(final Folder folder, final String templateName, final boolean failOnExisting) {\n+        final FolderTemplate folderTemplate = prepareFolderTemplate(folder, templateName, failOnExisting);\n+        try {\n+            final Folder existingFolder =\n+                ListUtils.emptyIfNull(crudManager.load(folder.getParentId()).getChildFolders()).stream()\n+                    .filter(f -> f.getName().equals(folderTemplate.getName()))\n+                    .findAny()\n+                    .orElseThrow(IllegalArgumentException::new);\n+            final DataStorageWithMetadataVO storageToCreate = folderTemplate.getDatastorages().get(0);", "originalCommit": "b202c67ac1b6f198328eff081a305e143dd64e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3ODA0Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r529378043", "bodyText": "Done, processing different situations correctly (no storage, exact one storage, more than one storage in a folder template)", "author": "Wedds", "createdAt": "2020-11-24T09:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4Mjg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjkwNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r513586905", "bodyText": "Could we avoid exception-driven development here?", "author": "ekazachkova", "createdAt": "2020-10-28T16:28:29Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderTemplateManager.java", "diffHunk": "@@ -75,12 +80,41 @@\n     private MessageHelper messageHelper;\n     @Autowired\n     private MetadataPostProcessorService metadataPostProcessorService;\n+    @Autowired\n+    private AbstractDataStorageMapper dataStorageMapper;\n \n     @Value(\"${templates.folder.directory}\")\n     private String folderTemplatesDirectoryPath;\n \n     @Transactional(propagation = Propagation.REQUIRED)\n-    public Folder create(final Folder folder, final String templateName) {\n+    public Folder create(final Folder folder, final String templateName, final boolean failOnExisting) {\n+        final FolderTemplate folderTemplate = prepareFolderTemplate(folder, templateName, failOnExisting);\n+        try {\n+            final Folder existingFolder =\n+                ListUtils.emptyIfNull(crudManager.load(folder.getParentId()).getChildFolders()).stream()\n+                    .filter(f -> f.getName().equals(folderTemplate.getName()))\n+                    .findAny()\n+                    .orElseThrow(IllegalArgumentException::new);", "originalCommit": "b202c67ac1b6f198328eff081a305e143dd64e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM3ODE5Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r529378192", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-24T09:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5NDg2OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r513594869", "bodyText": "Let's consider the following situation:\n\nuser has successfully created default folder and received storage ID\nduring update operation an error has occurred\n\nIs it expected transaction behavior?", "author": "ekazachkova", "createdAt": "2020-10-28T16:39:20Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -95,10 +104,32 @@\n     @Autowired\n     private MetadataManager metadataManager;\n \n-    @Transactional(propagation = Propagation.REQUIRED)\n+    @Autowired\n+    private FolderManager folderManager;\n+\n+    @Autowired\n+    private GrantPermissionManager permissionManager;\n+\n+    @Value(\"${storage.user.home.template}\")\n+    private  String defaultUserStorageTemplateName;\n+\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        final boolean shouldCreateDefaultHome =\n+            preferenceManager.getPreference(SystemPreferences.DEFAULT_USER_DATA_STORAGE_ENABLED);\n+        final Long storageId = Optional.ofNullable(defaultStorageId)", "originalCommit": "b202c67ac1b6f198328eff081a305e143dd64e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM4NzU3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r529387572", "bodyText": "Done, transactional behavior for createUser restored; changed methods structure, so createUser contains two parts: user creation itself and default folder initialization. The second one marked as transactional and wrapped into try-catch in createUser, so it should revert changes in case of failures, but won't fail a user creation transaction.", "author": "Wedds", "createdAt": "2020-11-24T10:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5NDg2OQ=="}], "type": "inlineReview"}, {"oid": "667522e072ea56d782be34c03f297d8f0341d545", "url": "https://github.com/epam/cloud-pipeline/commit/667522e072ea56d782be34c03f297d8f0341d545", "message": "Issue #907 Code refactoring to avoid excess exception usage", "committedDate": "2020-11-06T08:16:02Z", "type": "commit"}, {"oid": "ea2477742eacbc9137b9933f0d6b375796feb423", "url": "https://github.com/epam/cloud-pipeline/commit/ea2477742eacbc9137b9933f0d6b375796feb423", "message": "Issue #907 Check, if folder template contains data storage, when trying to create it in existing folder", "committedDate": "2020-11-19T10:35:57Z", "type": "commit"}, {"oid": "f81e163628a8dd63019872b5a55cf474bef886fa", "url": "https://github.com/epam/cloud-pipeline/commit/f81e163628a8dd63019872b5a55cf474bef886fa", "message": "Issue #907 Extract `updateContext` function to process folders, that exists already, correctly", "committedDate": "2020-11-19T17:12:48Z", "type": "commit"}, {"oid": "9cad976691070504440fca340427cd06b49d795a", "url": "https://github.com/epam/cloud-pipeline/commit/9cad976691070504440fca340427cd06b49d795a", "message": "Issue #907 Modify user creation: restore transactional creation of a user, wrap default storage creation in a try-catch block.", "committedDate": "2020-11-23T08:31:04Z", "type": "commit"}, {"oid": "0042b2345d899da07312d6e4142109e1972b341c", "url": "https://github.com/epam/cloud-pipeline/commit/0042b2345d899da07312d6e4142109e1972b341c", "message": "Issue #907 Rename the property, that specifies default user storage template, allow configuring via env var", "committedDate": "2020-11-23T08:58:05Z", "type": "commit"}, {"oid": "805ea7af40f7fd0b523e4957e65e4e5275600aaf", "url": "https://github.com/epam/cloud-pipeline/commit/805ea7af40f7fd0b523e4957e65e4e5275600aaf", "message": "Issue #907 Fix `createUserDefaultFolder` method invocation", "committedDate": "2020-11-23T09:23:39Z", "type": "commit"}, {"oid": "805ea7af40f7fd0b523e4957e65e4e5275600aaf", "url": "https://github.com/epam/cloud-pipeline/commit/805ea7af40f7fd0b523e4957e65e4e5275600aaf", "message": "Issue #907 Fix `createUserDefaultFolder` method invocation", "committedDate": "2020-11-23T09:23:39Z", "type": "forcePushed"}, {"oid": "f7ebce098f27de6e4792afdb45616b812f7ecb57", "url": "https://github.com/epam/cloud-pipeline/commit/f7ebce098f27de6e4792afdb45616b812f7ecb57", "message": "Issue #907 Update expected values in export tests in `UserManagerTest` because only one user is created", "committedDate": "2020-11-23T10:39:40Z", "type": "commit"}, {"oid": "6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "url": "https://github.com/epam/cloud-pipeline/commit/6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "message": "Issue #907 Tests extension: fail on the default folder initialization after successful user creation", "committedDate": "2020-11-24T11:41:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MjAxOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r531472019", "bodyText": "This test fails. Could you check this?", "author": "ekazachkova", "createdAt": "2020-11-27T09:14:24Z", "path": "api/src/test/java/com/epam/pipeline/manager/user/UserManagerTest.java", "diffHunk": "@@ -112,7 +145,7 @@ public void exportUsers() {\n         attr.setIncludeUserName(true);\n \n         String[] exported = new String(userManager.exportUsers(attr)).split(\"\\n\");\n-        Assert.assertEquals(2, exported.length);\n+        Assert.assertEquals(1, exported.length);", "originalCommit": "6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NDIwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r531484209", "bodyText": "Maybe we should find a better way to determine folder existence?", "author": "ekazachkova", "createdAt": "2020-11-27T09:36:20Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderTemplateManager.java", "diffHunk": "@@ -75,12 +81,27 @@\n     private MessageHelper messageHelper;\n     @Autowired\n     private MetadataPostProcessorService metadataPostProcessorService;\n+    @Autowired\n+    private AbstractDataStorageMapper dataStorageMapper;\n \n     @Value(\"${templates.folder.directory}\")\n     private String folderTemplatesDirectoryPath;\n \n     @Transactional(propagation = Propagation.REQUIRED)\n-    public Folder create(final Folder folder, final String templateName) {\n+    public Folder create(final Folder folder, final String templateName, final boolean failOnExisting) {\n+        final FolderTemplate folderTemplate = prepareFolderTemplate(folder, templateName, failOnExisting);\n+        try {\n+            return ListUtils.emptyIfNull(crudManager.load(folder.getParentId()).getChildFolders()).stream()\n+                .filter(f -> f.getName().equals(folderTemplate.getName()))\n+                .findAny()\n+                .map(existingFolder -> createStorageFromTemplateInExistingFolder(existingFolder, folderTemplate))\n+                .orElseGet(() -> fillInNewFolderFromTemplate(folder, folderTemplate));\n+        } catch (IllegalArgumentException e) {", "originalCommit": "6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTI4MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r531485281", "bodyText": "It is not clear for me why do we need such logic?", "author": "ekazachkova", "createdAt": "2020-11-27T09:38:19Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderTemplateManager.java", "diffHunk": "@@ -133,7 +157,46 @@ void createFolderFromTemplate(Folder folder, FolderTemplate template) {\n         }\n     }\n \n-    private void prepareTemplateStorages(FolderTemplate template, String prefix) {\n+    private Folder createStorageFromTemplateInExistingFolder(final Folder existingFolder,\n+                                                             final FolderTemplate folderTemplate) {\n+        if (CollectionUtils.isNotEmpty(folderTemplate.getDatastorages())) {\n+            final Set<String> existingStoragePaths = ListUtils.emptyIfNull(existingFolder.getStorages()).stream()\n+                .map(AbstractDataStorage::getPath)\n+                .collect(Collectors.toSet());\n+            final List<AbstractDataStorage> storageToAssign = folderTemplate.getDatastorages().stream()\n+                .filter(storageToCreate -> !existingStoragePaths.contains(storageToCreate.getPath()))\n+                .peek(storageToCreate -> storageToCreate.setParentFolderId(existingFolder.getId()))\n+                .map(storageToCreate -> dataStorageManager.create(storageToCreate, true, true, true).getEntity())\n+                .collect(Collectors.toList());\n+            if (CollectionUtils.isNotEmpty(storageToAssign)) {", "originalCommit": "6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTU4NA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r531485584", "bodyText": "Maybe we should find a better way to check storage existence? (a new method, failOnExisting)", "author": "ekazachkova", "createdAt": "2020-11-27T09:38:53Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderTemplateManager.java", "diffHunk": "@@ -133,7 +157,46 @@ void createFolderFromTemplate(Folder folder, FolderTemplate template) {\n         }\n     }\n \n-    private void prepareTemplateStorages(FolderTemplate template, String prefix) {\n+    private Folder createStorageFromTemplateInExistingFolder(final Folder existingFolder,\n+                                                             final FolderTemplate folderTemplate) {\n+        if (CollectionUtils.isNotEmpty(folderTemplate.getDatastorages())) {\n+            final Set<String> existingStoragePaths = ListUtils.emptyIfNull(existingFolder.getStorages()).stream()\n+                .map(AbstractDataStorage::getPath)\n+                .collect(Collectors.toSet());\n+            final List<AbstractDataStorage> storageToAssign = folderTemplate.getDatastorages().stream()\n+                .filter(storageToCreate -> !existingStoragePaths.contains(storageToCreate.getPath()))\n+                .peek(storageToCreate -> storageToCreate.setParentFolderId(existingFolder.getId()))\n+                .map(storageToCreate -> dataStorageManager.create(storageToCreate, true, true, true).getEntity())\n+                .collect(Collectors.toList());\n+            if (CollectionUtils.isNotEmpty(storageToAssign)) {\n+                existingFolder.setStorages(storageToAssign);\n+                return crudManager.updateContent(existingFolder);\n+            }\n+        }\n+        return existingFolder;\n+    }\n+\n+    private Folder fillInNewFolderFromTemplate(final Folder folder, final FolderTemplate folderTemplate) {\n+        createFolderFromTemplate(folder, folderTemplate);\n+        return folder;\n+    }\n+\n+    private AbstractDataStorage getStorageFromVo(final DataStorageWithMetadataVO storageVO) {\n+        AbstractDataStorage storageToAdd;\n+        try {\n+            storageToAdd = dataStorageManager.loadByNameOrId(storageVO.getName());\n+            storageToAdd.setParentFolderId(storageVO.getParentFolderId());\n+            dataStorageManager.update(dataStorageMapper.toDataStorageVO(storageToAdd));\n+        } catch (IllegalArgumentException e) {", "originalCommit": "6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0MjgxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r531542817", "bodyText": "This assertion should be case-insensitive", "author": "ekazachkova", "createdAt": "2020-11-27T11:22:38Z", "path": "api/src/main/java/com/epam/pipeline/manager/pipeline/FolderTemplateManager.java", "diffHunk": "@@ -133,7 +157,46 @@ void createFolderFromTemplate(Folder folder, FolderTemplate template) {\n         }\n     }\n \n-    private void prepareTemplateStorages(FolderTemplate template, String prefix) {\n+    private Folder createStorageFromTemplateInExistingFolder(final Folder existingFolder,\n+                                                             final FolderTemplate folderTemplate) {\n+        if (CollectionUtils.isNotEmpty(folderTemplate.getDatastorages())) {\n+            final Set<String> existingStoragePaths = ListUtils.emptyIfNull(existingFolder.getStorages()).stream()\n+                .map(AbstractDataStorage::getPath)\n+                .collect(Collectors.toSet());\n+            final List<AbstractDataStorage> storageToAssign = folderTemplate.getDatastorages().stream()\n+                .filter(storageToCreate -> !existingStoragePaths.contains(storageToCreate.getPath()))", "originalCommit": "6e2b18024cba9278ccd57cc043c79e6af7af2ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "91f6cbc17a8b4b72a0db4c8c72ef9dbae2a3d366", "url": "https://github.com/epam/cloud-pipeline/commit/91f6cbc17a8b4b72a0db4c8c72ef9dbae2a3d366", "message": "Issue #907 Create only storage instead of folder for a user, revert test changes", "committedDate": "2020-11-27T16:38:06Z", "type": "commit"}, {"oid": "91f6cbc17a8b4b72a0db4c8c72ef9dbae2a3d366", "url": "https://github.com/epam/cloud-pipeline/commit/91f6cbc17a8b4b72a0db4c8c72ef9dbae2a3d366", "message": "Issue #907 Create only storage instead of folder for a user, revert test changes", "committedDate": "2020-11-27T16:38:06Z", "type": "forcePushed"}, {"oid": "e3f5a5b832d683b2aa94f30c68569e7149fd1724", "url": "https://github.com/epam/cloud-pipeline/commit/e3f5a5b832d683b2aa94f30c68569e7149fd1724", "message": "Issue #907 Explicitly set path and storage type during default storage creation", "committedDate": "2020-11-30T08:20:12Z", "type": "commit"}, {"oid": "ca1786ba8ff84ada42b22b9788d6a2f97dbef477", "url": "https://github.com/epam/cloud-pipeline/commit/ca1786ba8ff84ada42b22b9788d6a2f97dbef477", "message": "Issue #907 Extend UserManagerTest with default storage creation", "committedDate": "2020-11-30T08:28:26Z", "type": "commit"}, {"oid": "ba3a1d4ed9c5fbd5d0871782f7bdc6d2c455664c", "url": "https://github.com/epam/cloud-pipeline/commit/ba3a1d4ed9c5fbd5d0871782f7bdc6d2c455664c", "message": "Issue #907 Add basic tests on default user storage creation into DataStorageManagerTest", "committedDate": "2020-11-30T09:06:52Z", "type": "commit"}, {"oid": "c8fad9e7b546f2f12d3bc9d3ea59d25de692726b", "url": "https://github.com/epam/cloud-pipeline/commit/c8fad9e7b546f2f12d3bc9d3ea59d25de692726b", "message": "Issue #907 Revert unnecessary changes in UserDao", "committedDate": "2020-11-30T09:17:39Z", "type": "commit"}, {"oid": "af674e21a034c1188227e9e97680d6d1958f301b", "url": "https://github.com/epam/cloud-pipeline/commit/af674e21a034c1188227e9e97680d6d1958f301b", "message": "Issue #907 Extract common for templates metadata- and permissions-related methods into corresponding managers", "committedDate": "2020-11-30T10:02:53Z", "type": "commit"}, {"oid": "af674e21a034c1188227e9e97680d6d1958f301b", "url": "https://github.com/epam/cloud-pipeline/commit/af674e21a034c1188227e9e97680d6d1958f301b", "message": "Issue #907 Extract common for templates metadata- and permissions-related methods into corresponding managers", "committedDate": "2020-11-30T10:02:53Z", "type": "forcePushed"}, {"oid": "ee4e493eaa7ef9b7e16065b0561565722b1a31ec", "url": "https://github.com/epam/cloud-pipeline/commit/ee4e493eaa7ef9b7e16065b0561565722b1a31ec", "message": "Issue #907 Skip default users storage creation if the corresponding one exists already; log errors instead of throwing an exception", "committedDate": "2020-11-30T11:57:41Z", "type": "commit"}, {"oid": "48f290a1034dd57720d55c022286e251dc83d0f1", "url": "https://github.com/epam/cloud-pipeline/commit/48f290a1034dd57720d55c022286e251dc83d0f1", "message": "Issue #907 Remove excess Lombok annotations from DataStorageTemplate", "committedDate": "2020-11-30T12:21:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4ODQzNw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532588437", "bodyText": "Could you rename preference to storage.user.home.template and make it an 'ObjectPreference' to enable json validation on the GUI?", "author": "mzueva", "createdAt": "2020-11-30T13:16:30Z", "path": "api/src/main/java/com/epam/pipeline/manager/preference/SystemPreferences.java", "diffHunk": "@@ -130,6 +130,21 @@\n         \"storage.temp.credentials.duration\", 3600, DATA_STORAGE_GROUP, isGreaterThan(0));\n     public static final IntPreference STORAGE_MOUNTS_PER_GB_RATIO = new IntPreference(\n             \"storage.mounts.per.gb.ratio\", null, DATA_STORAGE_GROUP, isNullOrGreaterThan(0));\n+    public static final BooleanPreference DEFAULT_USER_DATA_STORAGE_ENABLED =\n+        new BooleanPreference(\"storage.user.home.auto\", false, DATA_STORAGE_GROUP, pass);\n+    public static final StringPreference DEFAULT_USER_DATA_STORAGE_TEMPLATE =\n+        new StringPreference(\"user.default.storage.template\",", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwODYzOA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532708638", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-30T16:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4ODQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MDkyOA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532590928", "bodyText": "To enable json validation on the GUI, we need to change this preference to ObjectPreference type. So handling of preference in code will change - we need to get it string value ta first and then proceed with replacement, etc. Do not forget to handle null value.", "author": "mzueva", "createdAt": "2020-11-30T13:20:38Z", "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/DataStorageManager.java", "diffHunk": "@@ -343,6 +353,40 @@ public AbstractDataStorage updatePolicy(DataStorageVO dataStorageVO) {\n         return createdStorage;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public AbstractDataStorage createDefaultStorageForUser(final String userName) {\n+        final String dataStorageTemplateJson =", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTI1MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532709251", "bodyText": "Done, if no template specified, build default DataStorageTemplate based on a user's name", "author": "Wedds", "createdAt": "2020-11-30T16:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MDkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTMwMA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532591300", "bodyText": "Can we return Optional from this method, as it returns null in some cases?", "author": "mzueva", "createdAt": "2020-11-30T13:21:14Z", "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/DataStorageManager.java", "diffHunk": "@@ -343,6 +353,40 @@ public AbstractDataStorage updatePolicy(DataStorageVO dataStorageVO) {\n         return createdStorage;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public AbstractDataStorage createDefaultStorageForUser(final String userName) {", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTMxMg==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532709312", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-30T16:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MzU1MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532593551", "bodyText": "Validating here is useless since defaultStorageId is handled only in createUserDefaultStorage  method", "author": "mzueva", "createdAt": "2020-11-30T13:24:56Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -400,6 +428,41 @@ public boolean needToUpdateUser(List<String> groups, Map<String, String> attribu\n         return new UserExporter().exportUsers(attr, users, sensitiveKeys).getBytes(Charset.defaultCharset());\n     }\n \n+    private PipelineUser createUser(final String name, final List<Long> roles, final List<String> groups,\n+                                    final Map<String, String> attributes) {\n+        Assert.isTrue(StringUtils.isNotBlank(name),\n+                      messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_REQUIRED));\n+        String userName = name.trim().toUpperCase();\n+        PipelineUser loadedUser = userDao.loadUserByName(userName);\n+        Assert.isNull(loadedUser, messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_EXISTS, name));\n+        PipelineUser user = new PipelineUser(userName);\n+        List<Long> userRoles = getNewUserRoles(roles);\n+        user.setRoles(roleDao.loadRolesList(userRoles));\n+        user.setGroups(groups);\n+        user.setAttributes(attributes);\n+        storageValidator.validate(user);", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTM1OA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532709358", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-30T16:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MzU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTQxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532595417", "bodyText": "Should we update dataStorageDetails here not dataStorageTemplate?", "author": "mzueva", "createdAt": "2020-11-30T13:27:51Z", "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/DataStorageManager.java", "diffHunk": "@@ -343,6 +353,40 @@ public AbstractDataStorage updatePolicy(DataStorageVO dataStorageVO) {\n         return createdStorage;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public AbstractDataStorage createDefaultStorageForUser(final String userName) {\n+        final String dataStorageTemplateJson =\n+            preferenceManager.getPreference(SystemPreferences.DEFAULT_USER_DATA_STORAGE_TEMPLATE);\n+        final DataStorageTemplate dataStorageTemplate = JsonMapper.parseData(\n+            dataStorageTemplateJson.replaceAll(FolderTemplateManager.TEMPLATE_REPLACE_MARK, userName),\n+            new TypeReference<DataStorageTemplate>() {});\n+        final DataStorageVO dataStorageDetails = dataStorageTemplate.getDatastorage();\n+        if (dataStorageDetails.getPath() == null) {\n+            dataStorageDetails.setPath(adjustStoragePath(dataStorageDetails.getName(), null));\n+        }\n+        final AbstractDataStorage correspondingExistingStorage =\n+            dataStorageDao.loadDataStorageByNameOrPath(dataStorageDetails.getName(), dataStorageDetails.getPath());\n+        if (correspondingExistingStorage != null) {\n+            log.warn(messageHelper.getMessage(MessageConstants.DEFAULT_STORAGE_CREATION_CORRESPONDING_EXISTS,\n+                                              dataStorageDetails.getPath(),\n+                                              userName,\n+                                              correspondingExistingStorage.getId()));\n+            return null;\n+        }\n+        if (!folderManager.exists(dataStorageDetails.getParentFolderId())) {\n+            dataStorageTemplate.getDatastorage().setParentFolderId(null);", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTQzMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532709431", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-30T16:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NjQzNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532596435", "bodyText": "Could you rename this method to initUserDefaultStorage to make more clear?", "author": "mzueva", "createdAt": "2020-11-30T13:29:26Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -95,26 +102,48 @@\n     @Autowired\n     private MetadataManager metadataManager;\n \n+    @Autowired\n+    private GrantPermissionManager permissionManager;\n+\n+    @Autowired\n+    private DataStorageManager dataStorageManager;\n+\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Transactional(propagation = Propagation.REQUIRED)\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n-        Assert.isTrue(StringUtils.isNotBlank(name),\n-                messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_REQUIRED));\n-        String userName = name.trim().toUpperCase();\n-        PipelineUser loadedUser = userDao.loadUserByName(userName);\n-        Assert.isNull(loadedUser, messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_EXISTS, name));\n-        PipelineUser user = new PipelineUser(userName);\n-        List<Long> userRoles = getNewUserRoles(roles);\n-        user.setRoles(roleDao.loadRolesList(userRoles));\n-        user.setGroups(groups);\n-        user.setAttributes(attributes);\n-        user.setDefaultStorageId(defaultStorageId);\n-        storageValidator.validate(user);\n-        log.info(messageHelper.getMessage(MessageConstants.INFO_CREATE_USER, userName));\n-        return userDao.createUser(user, userRoles);\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        try {\n+            return createUserDefaultStorage(defaultStorageId, newUser);\n+        } catch (RuntimeException e) {\n+            log.warn(messageHelper.getMessage(MessageConstants.ERROR_DEFAULT_STORAGE_CREATION, name, e.getMessage()));\n+        }\n+        return newUser;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public PipelineUser createUserDefaultStorage(final Long defaultStorageId, final PipelineUser newUser) {", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTQ5Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532709493", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-11-30T16:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NjQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5OTc4MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532599781", "bodyText": "Move storage validation here", "author": "mzueva", "createdAt": "2020-11-30T13:34:35Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -95,26 +102,48 @@\n     @Autowired\n     private MetadataManager metadataManager;\n \n+    @Autowired\n+    private GrantPermissionManager permissionManager;\n+\n+    @Autowired\n+    private DataStorageManager dataStorageManager;\n+\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Transactional(propagation = Propagation.REQUIRED)\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n-        Assert.isTrue(StringUtils.isNotBlank(name),\n-                messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_REQUIRED));\n-        String userName = name.trim().toUpperCase();\n-        PipelineUser loadedUser = userDao.loadUserByName(userName);\n-        Assert.isNull(loadedUser, messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_EXISTS, name));\n-        PipelineUser user = new PipelineUser(userName);\n-        List<Long> userRoles = getNewUserRoles(roles);\n-        user.setRoles(roleDao.loadRolesList(userRoles));\n-        user.setGroups(groups);\n-        user.setAttributes(attributes);\n-        user.setDefaultStorageId(defaultStorageId);\n-        storageValidator.validate(user);\n-        log.info(messageHelper.getMessage(MessageConstants.INFO_CREATE_USER, userName));\n-        return userDao.createUser(user, userRoles);\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        try {\n+            return createUserDefaultStorage(defaultStorageId, newUser);\n+        } catch (RuntimeException e) {\n+            log.warn(messageHelper.getMessage(MessageConstants.ERROR_DEFAULT_STORAGE_CREATION, name, e.getMessage()));\n+        }\n+        return newUser;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public PipelineUser createUserDefaultStorage(final Long defaultStorageId, final PipelineUser newUser) {\n+        final boolean shouldCreateDefaultHome =\n+            preferenceManager.getPreference(SystemPreferences.DEFAULT_USER_DATA_STORAGE_ENABLED);\n+        final Long storageId = Optional.ofNullable(defaultStorageId)", "originalCommit": "48f290a1034dd57720d55c022286e251dc83d0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMDAwNA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r532710004", "bodyText": "Done, checking if storage with the specified id exists", "author": "Wedds", "createdAt": "2020-11-30T16:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5OTc4MQ=="}], "type": "inlineReview"}, {"oid": "d409b703830d778445f1d08df6983e600bcb22e1", "url": "https://github.com/epam/cloud-pipeline/commit/d409b703830d778445f1d08df6983e600bcb22e1", "message": "Issue #907 PR review refactoring: change preference type to enable JSON validation, change default storage creation validation, use Optional", "committedDate": "2020-11-30T16:00:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4ODU3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r535288572", "bodyText": "This parsing doesn't work: parsing of object preference to string throws error. In order to get plain sting value you can use preferenceManager.getSystemPreference(SystemPreferences.DEFAULT_USER_DATA_STORAGE_TEMPLATE).getValue().\nPlease, check that tests are working properly for this case.", "author": "mzueva", "createdAt": "2020-12-03T14:43:25Z", "path": "api/src/main/java/com/epam/pipeline/manager/datastorage/DataStorageManager.java", "diffHunk": "@@ -343,6 +359,47 @@ public AbstractDataStorage updatePolicy(DataStorageVO dataStorageVO) {\n         return createdStorage;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public Optional<AbstractDataStorage> createDefaultStorageForUser(final String userName) {\n+        final DataStorageTemplate dataStorageTemplate =\n+            Optional.ofNullable(preferenceManager", "originalCommit": "d409b703830d778445f1d08df6983e600bcb22e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5MjU0OA==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r535292548", "bodyText": "This won't work as expected: if client specifies defaultStorageId and it doesn't exist a new storage will be create, I would expect that if invalid defaultStorageId is specified we will throw an error, as it worked previously.", "author": "mzueva", "createdAt": "2020-12-03T14:46:47Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -95,26 +102,44 @@\n     @Autowired\n     private MetadataManager metadataManager;\n \n+    @Autowired\n+    private GrantPermissionManager permissionManager;\n+\n+    @Autowired\n+    private DataStorageManager dataStorageManager;\n+\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Transactional(propagation = Propagation.REQUIRED)\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n-        Assert.isTrue(StringUtils.isNotBlank(name),\n-                messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_REQUIRED));\n-        String userName = name.trim().toUpperCase();\n-        PipelineUser loadedUser = userDao.loadUserByName(userName);\n-        Assert.isNull(loadedUser, messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_EXISTS, name));\n-        PipelineUser user = new PipelineUser(userName);\n-        List<Long> userRoles = getNewUserRoles(roles);\n-        user.setRoles(roleDao.loadRolesList(userRoles));\n-        user.setGroups(groups);\n-        user.setAttributes(attributes);\n-        user.setDefaultStorageId(defaultStorageId);\n-        storageValidator.validate(user);\n-        log.info(messageHelper.getMessage(MessageConstants.INFO_CREATE_USER, userName));\n-        return userDao.createUser(user, userRoles);\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        try {\n+            return initUserDefaultStorage(defaultStorageId, newUser);\n+        } catch (RuntimeException e) {\n+            log.warn(messageHelper.getMessage(MessageConstants.ERROR_DEFAULT_STORAGE_CREATION, name, e.getMessage()));\n+        }\n+        return newUser;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public PipelineUser initUserDefaultStorage(final Long defaultStorageId, final PipelineUser newUser) {\n+        final boolean shouldCreateDefaultHome =\n+            preferenceManager.getPreference(SystemPreferences.DEFAULT_USER_DATA_STORAGE_ENABLED);\n+        final Long storageId = Optional.ofNullable(defaultStorageId)\n+            .filter(dataStorageManager::exists)", "originalCommit": "d409b703830d778445f1d08df6983e600bcb22e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5MzE3NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r535293175", "bodyText": "Please use orElseGet to prevent non needed calls", "author": "mzueva", "createdAt": "2020-12-03T14:47:18Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -95,26 +102,44 @@\n     @Autowired\n     private MetadataManager metadataManager;\n \n+    @Autowired\n+    private GrantPermissionManager permissionManager;\n+\n+    @Autowired\n+    private DataStorageManager dataStorageManager;\n+\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Transactional(propagation = Propagation.REQUIRED)\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n-        Assert.isTrue(StringUtils.isNotBlank(name),\n-                messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_REQUIRED));\n-        String userName = name.trim().toUpperCase();\n-        PipelineUser loadedUser = userDao.loadUserByName(userName);\n-        Assert.isNull(loadedUser, messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_EXISTS, name));\n-        PipelineUser user = new PipelineUser(userName);\n-        List<Long> userRoles = getNewUserRoles(roles);\n-        user.setRoles(roleDao.loadRolesList(userRoles));\n-        user.setGroups(groups);\n-        user.setAttributes(attributes);\n-        user.setDefaultStorageId(defaultStorageId);\n-        storageValidator.validate(user);\n-        log.info(messageHelper.getMessage(MessageConstants.INFO_CREATE_USER, userName));\n-        return userDao.createUser(user, userRoles);\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        try {\n+            return initUserDefaultStorage(defaultStorageId, newUser);\n+        } catch (RuntimeException e) {\n+            log.warn(messageHelper.getMessage(MessageConstants.ERROR_DEFAULT_STORAGE_CREATION, name, e.getMessage()));\n+        }\n+        return newUser;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRED)\n+    public PipelineUser initUserDefaultStorage(final Long defaultStorageId, final PipelineUser newUser) {\n+        final boolean shouldCreateDefaultHome =\n+            preferenceManager.getPreference(SystemPreferences.DEFAULT_USER_DATA_STORAGE_ENABLED);\n+        final Long storageId = Optional.ofNullable(defaultStorageId)\n+            .filter(dataStorageManager::exists)\n+            .orElse(shouldCreateDefaultHome", "originalCommit": "d409b703830d778445f1d08df6983e600bcb22e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5NjAwNw==", "url": "https://github.com/epam/cloud-pipeline/pull/997#discussion_r535296007", "bodyText": "Despite this catch clause user won't be created if an error is thrown in the underlaying calls. E.g. if an error was thrown in datastorageManager.createDefaultStorageForUser this method failed with:\norg.springframework.transaction.TransactionSystemException: Could not commit JPA transaction; nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly\n\tat org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:526) ~[spring-orm-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:761) ~[spring-tx-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:730) ~[spring-tx-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:504) ~[spring-tx-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:292) ~[spring-tx-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656) ~[spring-aop-4.3.7.RELEASE.jar:4.3.7.RELEASE]\n\tat com.epam.pipeline.manager.user.UserManager$$EnhancerBySpringCGLIB$$1448a1d4.createUser(<generated>) ~[main/:?]\n\tat com.epam.pipeline.manager.user.UserApiService.createUser(UserApiService.java:50) ~[main/:?]", "author": "mzueva", "createdAt": "2020-12-03T14:49:50Z", "path": "api/src/main/java/com/epam/pipeline/manager/user/UserManager.java", "diffHunk": "@@ -95,26 +102,44 @@\n     @Autowired\n     private MetadataManager metadataManager;\n \n+    @Autowired\n+    private GrantPermissionManager permissionManager;\n+\n+    @Autowired\n+    private DataStorageManager dataStorageManager;\n+\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Transactional(propagation = Propagation.REQUIRED)\n     public PipelineUser createUser(String name, List<Long> roles,\n                                    List<String> groups, Map<String, String> attributes,\n                                    Long defaultStorageId) {\n-        Assert.isTrue(StringUtils.isNotBlank(name),\n-                messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_REQUIRED));\n-        String userName = name.trim().toUpperCase();\n-        PipelineUser loadedUser = userDao.loadUserByName(userName);\n-        Assert.isNull(loadedUser, messageHelper.getMessage(MessageConstants.ERROR_USER_NAME_EXISTS, name));\n-        PipelineUser user = new PipelineUser(userName);\n-        List<Long> userRoles = getNewUserRoles(roles);\n-        user.setRoles(roleDao.loadRolesList(userRoles));\n-        user.setGroups(groups);\n-        user.setAttributes(attributes);\n-        user.setDefaultStorageId(defaultStorageId);\n-        storageValidator.validate(user);\n-        log.info(messageHelper.getMessage(MessageConstants.INFO_CREATE_USER, userName));\n-        return userDao.createUser(user, userRoles);\n+        final PipelineUser newUser = createUser(name, roles, groups, attributes);\n+        try {\n+            return initUserDefaultStorage(defaultStorageId, newUser);\n+        } catch (RuntimeException e) {", "originalCommit": "d409b703830d778445f1d08df6983e600bcb22e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a790b223c2acb6c8c6506b6d658e332d2e72abe4", "url": "https://github.com/epam/cloud-pipeline/commit/a790b223c2acb6c8c6506b6d658e332d2e72abe4", "message": "Issue #907 Change invalid defaultStorageId values processing (check whether it belongs to an existing entity using `load` method, so corresponding error will be thrown and no default storage created)", "committedDate": "2020-12-03T16:43:37Z", "type": "commit"}, {"oid": "50d57bc4ca78ba5050df2a71c2f0e323d9813ff9", "url": "https://github.com/epam/cloud-pipeline/commit/50d57bc4ca78ba5050df2a71c2f0e323d9813ff9", "message": "Issue #907 Change processing of the preference, containing default user's storage template value, in order to convert it to string correctly", "committedDate": "2020-12-03T17:00:09Z", "type": "commit"}, {"oid": "36f8ae2ae84292f4cc87244005ac75a6c6630e17", "url": "https://github.com/epam/cloud-pipeline/commit/36f8ae2ae84292f4cc87244005ac75a6c6630e17", "message": "Issue #907 Change transactional behavior for user default folder creation", "committedDate": "2020-12-04T09:45:15Z", "type": "commit"}, {"oid": "633aab96d61761690a23364457473f4ae0160489", "url": "https://github.com/epam/cloud-pipeline/commit/633aab96d61761690a23364457473f4ae0160489", "message": "Issue #907 Mock `dataStorageManager` for certain tests: call some underlying methods directly to perform storage creation without involving method with REQUIRES_NEW behavior", "committedDate": "2020-12-04T10:15:03Z", "type": "commit"}]}