{"pr_number": 2070, "pr_title": "Gh 2069 store actual result size in query plan node", "pr_createdAt": "2020-04-04T09:04:26Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2070", "timeline": [{"oid": "ff4395891db7ae35fd406563b74cc0d96e3ef3a4", "url": "https://github.com/eclipse/rdf4j/commit/ff4395891db7ae35fd406563b74cc0d96e3ef3a4", "message": "GH-2069 print actual result size as part of the query plan once the query plan has been fully evaluated and consumed\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-04T09:13:59Z", "type": "forcePushed"}, {"oid": "31c7d5a00cffbe0dd71b5a381e4878dc985c897e", "url": "https://github.com/eclipse/rdf4j/commit/31c7d5a00cffbe0dd71b5a381e4878dc985c897e", "message": "wip\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-15T12:45:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzMzNA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r408833334", "bodyText": "@jeenbroekstra this is what I am proposing now. A general way to track result sizes across all iterators in the query plan. This also makes it simpler to enable or disable. I was thinking of something along the lines of:\nif(trackResultSize()){\n    expr.setResultSizeActual(Math.max(0, expr.getResultSizeActual()));\n    ret = new ResultSizeCountingIterator(ret, expr);\n}\n\nreturn ret;\n\nHow can we make this configurable for the user?", "author": "hmottestad", "createdAt": "2020-04-15T13:17:43Z", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/StrictEvaluationStrategy.java", "diffHunk": "@@ -248,31 +249,38 @@ public TupleExpr optimize(TupleExpr expr, EvaluationStatistics evaluationStatist\n \t@Override\n \tpublic CloseableIteration<BindingSet, QueryEvaluationException> evaluate(TupleExpr expr, BindingSet bindings)\n \t\t\tthrows QueryEvaluationException {\n+\n+\t\tCloseableIteration<BindingSet, QueryEvaluationException> ret;\n+\n \t\tif (expr instanceof StatementPattern) {\n-\t\t\treturn evaluate((StatementPattern) expr, bindings);\n+\t\t\tret = evaluate((StatementPattern) expr, bindings);\n \t\t} else if (expr instanceof UnaryTupleOperator) {\n-\t\t\treturn evaluate((UnaryTupleOperator) expr, bindings);\n+\t\t\tret = evaluate((UnaryTupleOperator) expr, bindings);\n \t\t} else if (expr instanceof BinaryTupleOperator) {\n-\t\t\treturn evaluate((BinaryTupleOperator) expr, bindings);\n+\t\t\tret = evaluate((BinaryTupleOperator) expr, bindings);\n \t\t} else if (expr instanceof SingletonSet) {\n-\t\t\treturn evaluate((SingletonSet) expr, bindings);\n+\t\t\tret = evaluate((SingletonSet) expr, bindings);\n \t\t} else if (expr instanceof EmptySet) {\n-\t\t\treturn evaluate((EmptySet) expr, bindings);\n+\t\t\tret = evaluate((EmptySet) expr, bindings);\n \t\t} else if (expr instanceof ExternalSet) {\n-\t\t\treturn evaluate((ExternalSet) expr, bindings);\n+\t\t\tret = evaluate((ExternalSet) expr, bindings);\n \t\t} else if (expr instanceof ZeroLengthPath) {\n-\t\t\treturn evaluate((ZeroLengthPath) expr, bindings);\n+\t\t\tret = evaluate((ZeroLengthPath) expr, bindings);\n \t\t} else if (expr instanceof ArbitraryLengthPath) {\n-\t\t\treturn evaluate((ArbitraryLengthPath) expr, bindings);\n+\t\t\tret = evaluate((ArbitraryLengthPath) expr, bindings);\n \t\t} else if (expr instanceof BindingSetAssignment) {\n-\t\t\treturn evaluate((BindingSetAssignment) expr, bindings);\n+\t\t\tret = evaluate((BindingSetAssignment) expr, bindings);\n \t\t} else if (expr instanceof TripleRef) {\n-\t\t\treturn evaluate((TripleRef) expr, bindings);\n+\t\t\tret = evaluate((TripleRef) expr, bindings);\n \t\t} else if (expr == null) {\n \t\t\tthrow new IllegalArgumentException(\"expr must not be null\");\n \t\t} else {\n \t\t\tthrow new QueryEvaluationException(\"Unsupported tuple expr type: \" + expr.getClass());\n \t\t}\n+\n+\t\t// set resultsSizeActual to at least be 0 so we can track iterations that don't procude anything\n+\t\texpr.setResultSizeActual(Math.max(0, expr.getResultSizeActual()));\n+\t\treturn new ResultSizeCountingIterator(ret, expr);\n \t}", "originalCommit": "c675777d7a76e6fdf92f06bab77309435e8159fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyNDczMg==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r409324732", "bodyText": "ping @jeenbroekstra", "author": "hmottestad", "createdAt": "2020-04-16T07:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ0NzY0NA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r409447644", "bodyText": "Sorry, missed this earlier, and you caught me at the end of my day. I'll take a closer look tomorrow.", "author": "jeenbroekstra", "createdAt": "2020-04-16T10:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NDgyMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r409994821", "bodyText": "I like it, makes sense. As for making this configurable: for now I'd just make it an optional additional constructor argument on StrictEvaluationStrategy (similar to, for example, the iterationCacheSyncTreshold configurable setting). How we when expose this to users to tweak is a separate discussion I think: it could take form of a setting on individual Query objects perhaps, which would be more flexible than a per-repository setting.", "author": "jeenbroekstra", "createdAt": "2020-04-17T05:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MzAyMA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r409993020", "bodyText": "Fwiw I think you could make it extend IterationWrapper<BindingSet, QueryEvaluationException> instead, then the only thing you'd need to override was the constructor and the next method.\nAlso: given that (afaict) you don't need  access to this class outside of its use in StrictEvaluationStrategy, perhaps make it a package private class in that same package? That way you don't have to mark it deprecated.", "author": "jeenbroekstra", "createdAt": "2020-04-17T04:58:28Z", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/iterator/ResultSizeCountingIterator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.query.algebra.evaluation.iterator;\n+\n+import org.eclipse.rdf4j.common.annotation.InternalUseOnly;\n+import org.eclipse.rdf4j.common.iteration.CloseableIteration;\n+import org.eclipse.rdf4j.query.BindingSet;\n+import org.eclipse.rdf4j.query.QueryEvaluationException;\n+import org.eclipse.rdf4j.query.algebra.QueryModelNode;\n+\n+/**\n+ * This class wraps an iterator and increments the \"resultSizeActual\" of the query model node that the iterator\n+ * represents. This means we can track the number of tuples that have been retrieved from this node.\n+ *\n+ * @deprecated For internal use only. Do not rely on this class in your code.\n+ */\n+@InternalUseOnly\n+@Deprecated\n+public class ResultSizeCountingIterator implements CloseableIteration<BindingSet, QueryEvaluationException> {", "originalCommit": "c675777d7a76e6fdf92f06bab77309435e8159fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA3MzgxMA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r410073810", "bodyText": "IterationWrapper is a lot nicer, thanks.\nNot sure it's worth it to move it into the same package as StrictEvaluationStrategy when all the other code is split up so precisely into different packages. Makes me feel like I'm ruining someones system.", "author": "hmottestad", "createdAt": "2020-04-17T08:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MzAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUzNjA2MA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r410536060", "bodyText": "It's our system to ruin :)\nSeriously though, I get where you're coming from but we have private (or even anonymous) single-use implementations of Iterations all over the place. oer.query.algebra.evaluation.iterator is really only intended for publicly/generically reusable implementations. So I think it's perfectly fine to just have it in the package where it is actually used, and made package-private.\nTo me the use of annotations to mark something as \"public but please don't touch, not yours!\" is a last-resort/stopgap measure. It's more intended for existing code that we wish we had never made public in the first place :)", "author": "jeenbroekstra", "createdAt": "2020-04-18T01:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MzAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2MDIwNg==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r410660206", "bodyText": "Maybe an inner class will be better.", "author": "hmottestad", "createdAt": "2020-04-18T07:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MzAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MTI1NA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r410671254", "bodyText": "no-op interface methods", "author": "hmottestad", "createdAt": "2020-04-18T08:59:06Z", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/EvaluationStrategyFactory.java", "diffHunk": "@@ -61,4 +61,12 @@\n \tEvaluationStrategy createEvaluationStrategy(Dataset dataset, TripleSource tripleSource,\n \t\t\tEvaluationStatistics evaluationStatistics);\n \n+\tdefault boolean isTrackResultSize() {\n+\t\treturn false;\n+\t}\n+\n+\tdefault void setTrackResultSize(boolean trackResultSize) {\n+\t\t// no-op for backwards compatibility\n+\t}", "originalCommit": "ff70f10689f58715c000004037a050b6ba6c1c90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMDAwNw==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r413630007", "bodyText": "this now has javadocs", "author": "hmottestad", "createdAt": "2020-04-23T08:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MTQzOA==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r410671438", "bodyText": "This is as high as it goes at the moment. Essentially for those who want to track performance for every query. Could also be useful if we ever implement a \"slow query\" log.", "author": "hmottestad", "createdAt": "2020-04-18T09:00:37Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSail.java", "diffHunk": "@@ -383,10 +386,18 @@ public long getIterationCacheSyncThreshold() {\n \n \t/**\n \t * Set the threshold for syncing query evaluation iteration caches to disk.\n-\t * \n+\t *\n \t * @param iterationCacheSyncThreshold The iterationCacheSyncThreshold to set.\n \t */\n \tpublic void setIterationCacheSyncThreshold(long iterationCacheSyncThreshold) {\n \t\tthis.iterationCacheSyncThreshold = iterationCacheSyncThreshold;\n \t}\n+\n+\tpublic boolean isTrackResultSize() {\n+\t\treturn trackResultSize;\n+\t}\n+\n+\tpublic void setTrackResultSize(boolean trackResultSize) {\n+\t\tthis.trackResultSize = trackResultSize;\n+\t}", "originalCommit": "ff70f10689f58715c000004037a050b6ba6c1c90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MTU5Mg==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r410671592", "bodyText": "This is important one. This is used by the strict evaluation strategy to determine if it should append the tracking iteration.", "author": "hmottestad", "createdAt": "2020-04-18T09:02:14Z", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/impl/AbstractEvaluationStrategyFactory.java", "diffHunk": "@@ -43,4 +46,11 @@ public void setOptimizerPipeline(QueryOptimizerPipeline pipeline) {\n \t\treturn Optional.ofNullable(pipeline);\n \t}\n \n+\tpublic boolean isTrackResultSize() {\n+\t\treturn trackResultSize;\n+\t}\n+\n+\tpublic void setTrackResultSize(boolean trackResultSize) {\n+\t\tthis.trackResultSize = trackResultSize;\n+\t}", "originalCommit": "ff70f10689f58715c000004037a050b6ba6c1c90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTYyOQ==", "url": "https://github.com/eclipse/rdf4j/pull/2070#discussion_r414329629", "bodyText": "Another option: \"isResultSizeTracking\" and \"setResultSizeTracking\"", "author": "hmottestad", "createdAt": "2020-04-24T06:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MTU5Mg=="}], "type": "inlineReview"}, {"oid": "a850f6d6b37bfca69a431a92177fce5766300522", "url": "https://github.com/eclipse/rdf4j/commit/a850f6d6b37bfca69a431a92177fce5766300522", "message": "GH-2069 print actual result size as part of the query plan once the query plan has been fully evaluated and consumed, also print cost estimate\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-19T17:50:46Z", "type": "forcePushed"}, {"oid": "df987e5eb032a620fffaa86d0ee2a19eb88d1441", "url": "https://github.com/eclipse/rdf4j/commit/df987e5eb032a620fffaa86d0ee2a19eb88d1441", "message": "GH-2069 print actual result size as part of the query plan once the query plan has been fully evaluated and consumed, also print cost estimate\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-19T17:52:04Z", "type": "forcePushed"}, {"oid": "fdaf19a0bd57881551d84910fef6271d7e99bab5", "url": "https://github.com/eclipse/rdf4j/commit/fdaf19a0bd57881551d84910fef6271d7e99bab5", "message": "skip printing estimates that are unknown\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-22T09:08:45Z", "type": "forcePushed"}, {"oid": "8373a22a8b80b9d0704b5d6886284e166c99b465", "url": "https://github.com/eclipse/rdf4j/commit/8373a22a8b80b9d0704b5d6886284e166c99b465", "message": "fix test\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-23T12:10:14Z", "type": "forcePushed"}, {"oid": "c51f56bd10f347c4fa60a4e47755d429fc5ae6cd", "url": "https://github.com/eclipse/rdf4j/commit/c51f56bd10f347c4fa60a4e47755d429fc5ae6cd", "message": "GH-2069 print actual result size as part of the query plan once the query plan has been fully evaluated and consumed, also print cost estimate\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-23T12:11:41Z", "type": "commit"}, {"oid": "c51f56bd10f347c4fa60a4e47755d429fc5ae6cd", "url": "https://github.com/eclipse/rdf4j/commit/c51f56bd10f347c4fa60a4e47755d429fc5ae6cd", "message": "GH-2069 print actual result size as part of the query plan once the query plan has been fully evaluated and consumed, also print cost estimate\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-23T12:11:41Z", "type": "forcePushed"}]}