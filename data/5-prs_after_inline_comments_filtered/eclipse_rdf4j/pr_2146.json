{"pr_number": 2146, "pr_title": "GH-2145: named graph support in federation engine", "pr_createdAt": "2020-04-28T13:40:43Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2146", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0Mjg3OA==", "url": "https://github.com/eclipse/rdf4j/pull/2146#discussion_r419242878", "bodyText": "@aschwarte10 I could use your eyes on this problem. FedX is currently designed to instantiate the EvaluationStrategy once (unless the config changes). But in RDF4J Sails, it is generally assumed that each query gets its own EvaluationStategy - that is why the Dataset object is passed in on the constructor. I believe that this has caused some of the named graph queries to fail on FedX (basically because we don't pass the dataset along). I'd like to hear your opinion on the best way forward: can we just remove the assumption that the strategy is defined once and let FedX instantiate a new strategy for each query?\nI'm a little wary of doing something like just setting/overwriting the Dataset  assigned to the strategy on each query, as I'm not sure what the consequences would be in a multithreaded environment.", "author": "jeenbroekstra", "createdAt": "2020-05-04T07:00:15Z", "path": "tools/federation/src/main/java/org/eclipse/rdf4j/federated/FederationManager.java", "diffHunk": "@@ -332,7 +342,10 @@ public void updateStrategy() {\n \t\t}\n \n \t\tif (updated) {\n-\t\t\tstrategy = FederationEvaluationStrategyFactory.getEvaluationStrategy(type, federationContext);\n+\t\t\t// TODO problem here: we need to (optionally) inject a Dataset object into the EvaluationStrategy, which is\n+\t\t\t// query-specific and determines what parts of the store are relevant for the query. However this part of\n+\t\t\t// the code assumes that we can instantiate an EvaluationStrategy once and then reuse it for each query.", "originalCommit": "498297b31e0a348cba7898da0a25c9e3678b63ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxNTM2MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2146#discussion_r419415361", "bodyText": "Hmm, I see. I wasn't aware of this assumption when initially implementing FedX.\nGenerally, I do not see a bigger problem in instantiating the strategy for each query (except for the amount of objects). However, quickly scanning the code and the references to where the strategy is passed around, such a change would be a huge refactoring.\nI am not sure if at this time right before the release it is such a good idea to do this refactoring. If at all, I would suggest to do it outside of this PR to have a cleaner and easier change.\nHowever, I think we can cope without it: the query specific QueryInfo object always has a reference to the externally passed Dataset. And this QueryInfo is available basically everywhere at evaluation time. This also how all the other named graph queries are working.\nLet's synch offline on this and come to the best conclusion.\nNote: I will probably re-order your last commit on top (i.e. a force-push), to have some other must changes integrated. The we have the possibility to decide on this special thing", "author": "aschwarte10", "createdAt": "2020-05-04T12:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0Mjg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NjI5MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2146#discussion_r419776291", "bodyText": "I agree a full refactoring is out of scope (and fwiw, the assumption I'm talking about isn't particularly well documented or obvious, so not blaming your design here). I may have an idea for a quick workaround fix. If I can get that to work I'll push it, otherwise I'll revert the WIP changes I made and log this as a known bug.", "author": "jeenbroekstra", "createdAt": "2020-05-04T22:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0Mjg3OA=="}], "type": "inlineReview"}, {"oid": "2dc25b27ea066def5e380fb9b1f8584d5914773c", "url": "https://github.com/eclipse/rdf4j/commit/2dc25b27ea066def5e380fb9b1f8584d5914773c", "message": "GH-2145 pass Dataset object along to evaluation strategy [WIP]\n\nSee FederationManager line 344-351 for a design problem I've\nencountered.", "committedDate": "2020-05-04T15:58:22Z", "type": "forcePushed"}, {"oid": "a7d7554db019466f795c2b2efc166e79f112505c", "url": "https://github.com/eclipse/rdf4j/commit/a7d7554db019466f795c2b2efc166e79f112505c", "message": "GH-2145: Add named graph support to FedX federation engine\n\n* fix context retrieval in federation engine\n** context IDs retrieved from the endpoints have to be materialized as\nthey are only available while the connection is open\n** add unit test infrastructure for named graph tests and define some\ntest data\n\n* add named graph handling for #getStatements API\n\n* add named graph handling for simple federated SELECT patterns\n** support GRAPH clause around single basic graph pattern\n** support FROM clause in queries\n\n* fix handling of base URIs for query parsing in FedX\n\n* add named graph support for bound joins", "committedDate": "2020-05-05T19:50:05Z", "type": "commit"}, {"oid": "dbce4c2b70443d0e534e852029b7b1e7270c44de", "url": "https://github.com/eclipse/rdf4j/commit/dbce4c2b70443d0e534e852029b7b1e7270c44de", "message": "GH-2149 GH-2145 use new compliance test suite for testing of FedX", "committedDate": "2020-05-05T19:50:06Z", "type": "commit"}, {"oid": "dbce4c2b70443d0e534e852029b7b1e7270c44de", "url": "https://github.com/eclipse/rdf4j/commit/dbce4c2b70443d0e534e852029b7b1e7270c44de", "message": "GH-2149 GH-2145 use new compliance test suite for testing of FedX", "committedDate": "2020-05-05T19:50:06Z", "type": "forcePushed"}, {"oid": "ef5fa507a790924a6fbac8634a5d1fc54d0aa402", "url": "https://github.com/eclipse/rdf4j/commit/ef5fa507a790924a6fbac8634a5d1fc54d0aa402", "message": "Merge branch 'develop' into issues/#2145-named-graph-support", "committedDate": "2020-05-06T02:58:24Z", "type": "commit"}]}