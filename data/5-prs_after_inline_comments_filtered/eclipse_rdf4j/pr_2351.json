{"pr_number": 2351, "pr_title": "GH-2350 transaction settings", "pr_createdAt": "2020-07-04T10:22:47Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2351", "timeline": [{"oid": "45f1dab756c60eb8e51c1da3d8441887e2547814", "url": "https://github.com/eclipse/rdf4j/commit/45f1dab756c60eb8e51c1da3d8441887e2547814", "message": "GH-2350 initial commit\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-04T10:21:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MDU2MA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449760560", "bodyText": "This is just the git diff engine not understanding that I wrapped everything in try-finally to clear the transaction settings.", "author": "hmottestad", "createdAt": "2020-07-04T10:24:04Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSailConnection.java", "diffHunk": "@@ -375,61 +397,70 @@ public final void prepare() throws SailException {\n \n \t@Override\n \tpublic final void commit() throws SailException {\n-\t\tif (isActive()) {\n-\t\t\tendUpdate(null);\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n+\t\t\tif (isActive()) {\n+\t\t\t\tendUpdate(null);\n+\t\t\t}\n \n-\t\t\tupdateLock.lock();\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\tif (!txnPrepared) {\n-\t\t\t\t\t\tprepareInternal();\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\tif (!txnPrepared) {\n+\t\t\t\t\t\t\tprepareInternal();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcommitInternal();\n+\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\ttxnPrepared = false;\n \t\t\t\t\t}\n-\t\t\t\t\tcommitInternal();\n-\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();\n \t\t}\n \t}\n \n \t@Override\n \tpublic final void rollback() throws SailException {\n-\t\tsynchronized (added) {\n-\t\t\tadded.clear();\n-\t\t}\n-\t\tsynchronized (removed) {\n-\t\t\tremoved.clear();\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n-\n-\t\t\tupdateLock.lock();\n+\t\t\tsynchronized (added) {\n+\t\t\t\tadded.clear();\n+\t\t\t}\n+\t\t\tsynchronized (removed) {\n+\t\t\t\tremoved.clear();\n+\t\t\t}\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trollbackInternal();\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\trollbackInternal();\n+\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n+\t\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n-\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();\n \t\t}\n \t}", "originalCommit": "45f1dab756c60eb8e51c1da3d8441887e2547814", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fea23a434dc2339a976b563f2e10cebea955113b", "url": "https://github.com/eclipse/rdf4j/commit/fea23a434dc2339a976b563f2e10cebea955113b", "message": "forgot some varargs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-04T10:28:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449761147", "bodyText": "@jeenbroekstra\nThe whole wrapped connection approach here makes it hard for me to add support for transaction settings. The problem is that code higher up will often override the begin() and begin(IsolationLevel level) methods to hook into the transaction handling approach. With the new begin(TransactionSetting[] settings) simply calling wrapped.begin(settings) the code higher up will have to override the new begin method in order to fully hook into the transaction flow.\nI'm not sure right now how to fix this. I was initially hoping to hook in like I did in the AbstractSailConnection.", "author": "hmottestad", "createdAt": "2020-07-04T10:31:46Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/SailConnectionWrapper.java", "diffHunk": "@@ -206,6 +207,11 @@ public Explanation explain(Explanation.Level level, TupleExpr tupleExpr, Dataset\n \t\treturn wrappedCon.explain(level, tupleExpr, dataset, bindings, includeInferred, timeoutSeconds);\n \t}\n \n+\t@Override\n+\tpublic void begin(TransactionSetting... settings) {\n+\t\twrappedCon.begin(settings);\n+\t}\n+\n \t@Override\n \tpublic void begin() throws SailException {\n \t\twrappedCon.begin();", "originalCommit": "fea23a434dc2339a976b563f2e10cebea955113b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTQ3Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449761473", "bodyText": "Maybe I want to try out just extending the current begin(IsolationLevel level) method with the transaction settings vararg, and in the next major release remove that in favour of just a simpler begin(TransactionSetting... settings).", "author": "hmottestad", "createdAt": "2020-07-04T10:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4NDA3NQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449784075", "bodyText": "I actually tried this out now.\nvoid begin(IsolationLevel level, TransactionSetting ... settings)\n\nAnd it's not backwards compatible with any of the code that implements the current begin interface methods. I'm getting a bunch of compile time errors saying that various classes have @Override annotation for methods that are not inherited.\nAlso found another issue with introducing a new begin method that only takes a TransactionSetting vararg.\n\nThis isn't exactly good code though, since it making the isolation level nullable means that all code actually needs to check for null. Instead of just having is non-null and instead passing in a default isolation level if none was defined.", "author": "hmottestad", "createdAt": "2020-07-04T15:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDkxMw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449820913", "bodyText": "You can avoid this by explicitlying cast the null argument to a TransactionSetting for this to work I think:\nthis.begin((TransactionSetting)null);\n\nThat way the vararg itself is never null, it just receives an array with a single element, and that element is null.", "author": "jeenbroekstra", "createdAt": "2020-07-05T01:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMTA0MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449821041", "bodyText": "Maybe I want to try out just extending the current begin(IsolationLevel level) method with the transaction settings vararg, and in the next major release remove that in favour of just a simpler begin(TransactionSetting... settings).\n\nThat sound like a good idea to me.", "author": "jeenbroekstra", "createdAt": "2020-07-05T01:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0NDcxMA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449844710", "bodyText": "@jeenbroekstra I tried adding a vararg, but it's not source level backwards compatible.", "author": "hmottestad", "createdAt": "2020-07-05T07:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzNTk0OA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449935948", "bodyText": "@jeenbroekstra I tried adding a vararg, but it's not source level backwards compatible.\n\nI'm sorry I'm not sure what exact variant we're talking about here.", "author": "jeenbroekstra", "createdAt": "2020-07-06T00:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwOTUwMA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r450009500", "bodyText": "begin(IsolationLevel level, TransactionSettings ... settings)\nIf I add the vararg to the current begin method like above it\u2019s not source level compatible.", "author": "hmottestad", "createdAt": "2020-07-06T06:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTAyNg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r450675026", "bodyText": "Not even if you also keep\nbegin(IsolationLevel level) \n\nand just redirect it to:\nbegin(level, (TransactionSettings)null);\n\n?", "author": "jeenbroekstra", "createdAt": "2020-07-07T07:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2OTMxNw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r450769317", "bodyText": "Could redirect it in the sail wrapper, but it\u2019ll introduce its own problems.", "author": "hmottestad", "createdAt": "2020-07-07T10:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2MTE0Nw=="}], "type": "inlineReview"}, {"oid": "66b12619802fdfd5431c68e510ab972855f83436", "url": "https://github.com/eclipse/rdf4j/commit/66b12619802fdfd5431c68e510ab972855f83436", "message": "bug fix\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-04T16:04:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449820600", "bodyText": "I think silently ignoring (possibly logging a warning) might be better here. Not the most important thing right now though.", "author": "jeenbroekstra", "createdAt": "2020-07-05T01:36:44Z", "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/SPARQLConnection.java", "diffHunk": "@@ -459,6 +460,11 @@ public void begin() throws RepositoryException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void begin(TransactionSetting... settings) {\n+\t\tthrow new UnsupportedOperationException(\"SPARQLConnection does not support transaction settings\");", "originalCommit": "66b12619802fdfd5431c68e510ab972855f83436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMDUzNw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457830537", "bodyText": "I prefer an exception when calling code that doesn't do what the user expects.", "author": "hmottestad", "createdAt": "2020-07-21T04:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0ODgyOA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457848828", "bodyText": "The default method does backwards compatibility by calling begin() by default. This method should also call begin() for backwards compatibility unless there is a specific reason for not following the previous transactional implementation which hasn't been deleted or modified here.", "author": "ansell", "createdAt": "2020-07-21T05:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MzMwNQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457873305", "bodyText": "that's actually a good point", "author": "hmottestad", "createdAt": "2020-07-21T06:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MzYyMA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457873620", "bodyText": "fixed", "author": "hmottestad", "createdAt": "2020-07-21T06:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyMDYwMA=="}], "type": "inlineReview"}, {"oid": "f3a2cf6e0e1918a519a16610a95ad6ddf931a64f", "url": "https://github.com/eclipse/rdf4j/commit/f3a2cf6e0e1918a519a16610a95ad6ddf931a64f", "message": "added default methods\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-05T11:45:47Z", "type": "commit"}, {"oid": "a1aa102207dd9626a7151e2e1e79fee2be0dee18", "url": "https://github.com/eclipse/rdf4j/commit/a1aa102207dd9626a7151e2e1e79fee2be0dee18", "message": "Merge branch 'develop' into GH-2350-transaction-settings", "committedDate": "2020-07-05T13:41:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0MTkxMw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449941913", "bodyText": "Can you move this to a new package org.eclipse.rdf4j.common.transaction? That's really where IsolationLevel should also be, but at least let's not add more inferfaces in a place we know we'll want to refactor later.\nAlso means that it's probably better to move it to the rdf4j-util module btw, because that's where all the other org.eclipse.rdf4j.common packages are.", "author": "jeenbroekstra", "createdAt": "2020-07-06T01:09:43Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.eclipse.rdf4j;", "originalCommit": "a1aa102207dd9626a7151e2e1e79fee2be0dee18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0MjY3Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r449942673", "bodyText": "I'm not sure what we need this for (especially if we move the default methods to TransactionSetting) but I don't think  an interface should be called ....Impl. If we need some sort of base implementation class it should be an abstract class, not an interface. It should also be called AbstractTransactionSetting to stay consistent with naming conventions elsewhere in the projbect.", "author": "jeenbroekstra", "createdAt": "2020-07-06T01:15:22Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/TransactionSettingImpl.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.eclipse.rdf4j;\n+\n+public interface TransactionSettingImpl extends TransactionSetting {", "originalCommit": "a1aa102207dd9626a7151e2e1e79fee2be0dee18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMDUxMg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r450010512", "bodyText": "Was initially a class, but then I switched to enum in the ShaclSail and had to make it an interface. Might just remove it.", "author": "hmottestad", "createdAt": "2020-07-06T06:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk0MjY3Mw=="}], "type": "inlineReview"}, {"oid": "b030e862f0ad6fdba85133299b4e7ac838e939f1", "url": "https://github.com/eclipse/rdf4j/commit/b030e862f0ad6fdba85133299b4e7ac838e939f1", "message": "WIP transaction settings\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-09T14:51:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDM2NA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r452544364", "bodyText": "It looks like your formatter is still applying the single-indent rule, rather than sticking to 2 indents for wrapped lines. Did I make a mistake when I merged the formatting changes, or is there something out of sync on your end?", "author": "jeenbroekstra", "createdAt": "2020-07-09T23:31:01Z", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RDF4JProtocolSession.java", "diffHunk": "@@ -204,7 +207,7 @@ private synchronized String getTransactionURL() {\n \t *-----------------*/\n \n \tpublic TupleQueryResult getRepositoryList()\n-\t\t\tthrows IOException, RepositoryException, UnauthorizedException, QueryInterruptedException {\n+\t\tthrows IOException, RepositoryException, UnauthorizedException, QueryInterruptedException {", "originalCommit": "b030e862f0ad6fdba85133299b4e7ac838e939f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNDI4OA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r452634288", "bodyText": "I\u2019ll try to sync it up again.", "author": "hmottestad", "createdAt": "2020-07-10T05:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDM2NA=="}], "type": "inlineReview"}, {"oid": "0fc4f29378acfe5b590c84093162fcc2d9eaf9bb", "url": "https://github.com/eclipse/rdf4j/commit/0fc4f29378acfe5b590c84093162fcc2d9eaf9bb", "message": "formatter\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-10T13:46:01Z", "type": "commit"}, {"oid": "af193ac28846e3f9f2e66e1a20415c7ec641c2e1", "url": "https://github.com/eclipse/rdf4j/commit/af193ac28846e3f9f2e66e1a20415c7ec641c2e1", "message": "Merge branch 'develop' into GH-2350-transaction-settings\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-10T13:51:05Z", "type": "commit"}, {"oid": "5f171c80db69e0a2ed1502ef67499e0e037a4d0d", "url": "https://github.com/eclipse/rdf4j/commit/5f171c80db69e0a2ed1502ef67499e0e037a4d0d", "message": "WIP testing the http repo\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-10T14:45:58Z", "type": "commit"}, {"oid": "38628864f6ac9326bb0a0e864125fddecde5563b", "url": "https://github.com/eclipse/rdf4j/commit/38628864f6ac9326bb0a0e864125fddecde5563b", "message": "GH-2350 seems to work now\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-10T18:49:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDA3Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144073", "bodyText": "This is backward incompatible in multiple ways.", "author": "jeenbroekstra", "createdAt": "2020-07-11T02:28:44Z", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RDF4JProtocolSession.java", "diffHunk": "@@ -606,7 +609,7 @@ public void getStatements(Resource subj, IRI pred, Value obj, boolean includeInf\n \t\tpingTransaction();\n \t}\n \n-\tpublic synchronized void beginTransaction(IsolationLevel isolationLevel)\n+\tpublic synchronized void beginTransaction(TransactionSetting... transactionSettings)", "originalCommit": "38628864f6ac9326bb0a0e864125fddecde5563b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3NzgxMA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453177810", "bodyText": "I presume this was just me trying to get things working before I started considering backwards incompatability.", "author": "hmottestad", "createdAt": "2020-07-11T09:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDMyMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144321", "bodyText": "This is not backward compatible. The REST API requires a transaction isolation level to be sent, but this opens the option of not supplying one. It also removes the actual Isolation level parameter that is part of the protocol, instead encoding everything as a generic transaction setting.\nI'll push some fixes for this.", "author": "jeenbroekstra", "createdAt": "2020-07-11T02:31:28Z", "path": "core/http/client/src/main/java/org/eclipse/rdf4j/http/client/RDF4JProtocolSession.java", "diffHunk": "@@ -620,11 +623,14 @@ public synchronized void beginTransaction(IsolationLevel isolationLevel)\n \t\t\tmethod.setHeader(\"Content-Type\", Protocol.FORM_MIME_TYPE + \"; charset=utf-8\");\n \n \t\t\tList<NameValuePair> params = new ArrayList<>();\n-\t\t\tif (isolationLevel != null) {\n+\n+\t\t\tfor (TransactionSetting transactionSetting : transactionSettings) {\n+\t\t\t\tif (transactionSetting == null)\n+\t\t\t\t\tcontinue;\n \t\t\t\tparams.add(\n \t\t\t\t\t\tnew BasicNameValuePair(\n-\t\t\t\t\t\t\t\tProtocol.ISOLATION_LEVEL_PARAM_NAME,\n-\t\t\t\t\t\t\t\tisolationLevel.getURI().stringValue()\n+\t\t\t\t\t\t\t\tTRANSACTION_SETTINGS_PREFIX + transactionSetting.getName(),\n+\t\t\t\t\t\t\t\ttransactionSetting.getValue()\n \t\t\t\t\t\t)", "originalCommit": "38628864f6ac9326bb0a0e864125fddecde5563b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDg0MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144841", "bodyText": "Looks like I misremembered that it's required at the protocol level. We'll still need to keep the specific parameter around though.", "author": "jeenbroekstra", "createdAt": "2020-07-11T02:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDQ1Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453144453", "bodyText": "Removing a parameter from the public REST API and replacing it with something else is backward incompatible. I think the simplest solution is that at the level of the REST API protocol we keep IsolationLevel and other Transaction Settings distinct.", "author": "jeenbroekstra", "createdAt": "2020-07-11T02:33:13Z", "path": "core/http/protocol/src/main/java/org/eclipse/rdf4j/http/protocol/Protocol.java", "diffHunk": "@@ -181,9 +181,9 @@\n \tpublic static final String ACCEPT_PARAM_NAME = \"Accept\";\n \n \t/**\n-\t * Parameter name for the isolation level used in transactions.\n+\t * Prefix for transaction settings in the query param\n \t */\n-\tpublic static final String ISOLATION_LEVEL_PARAM_NAME = \"isolation-level\";\n+\tpublic static final String TRANSACTION_SETTINGS_PREFIX = \"transaction-setting__\";", "originalCommit": "38628864f6ac9326bb0a0e864125fddecde5563b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MDYwOQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453150609", "bodyText": "Actually what I ended up doing for this is that the client-side sends the isolation level twice (once using the legacy param, once with the name prefixed param name), and the server-side accepts both as well. This way, the change is backward compatible for both client and server: an older client communicating with a newer server, or vice versa.", "author": "jeenbroekstra", "createdAt": "2020-07-11T03:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTY5Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453171693", "bodyText": "I was hoping our rest api wasn\u2019t part of the semantic versioning contract. Ie. that it was considered an internal api between the server and client.", "author": "hmottestad", "createdAt": "2020-07-11T08:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4Mzc0Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453183746", "bodyText": "It most definitely is I'm afraid. We have a full canonical spec published for it.", "author": "jeenbroekstra", "createdAt": "2020-07-11T11:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE0NDQ1Mw=="}], "type": "inlineReview"}, {"oid": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf", "url": "https://github.com/eclipse/rdf4j/commit/b421868b159a6c6fd9174e707d25b8e1cd9e45cf", "message": "GH-2350 fix compatibility issues in REST API / ProtocolSession", "committedDate": "2020-07-11T03:45:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MDcxOA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453150718", "bodyText": "I took this check back out because it shouldn't be necessary: if no isolation level is supplied the connection should just use its default setting.", "author": "jeenbroekstra", "createdAt": "2020-07-11T03:50:00Z", "path": "tools/server-spring/src/main/java/org/eclipse/rdf4j/http/server/repository/transaction/TransactionStartController.java", "diffHunk": "@@ -101,15 +115,9 @@ public String getValue() {\n \n \t\t\t\t\ttransactionSettings.add(transactionSetting);\n \t\t\t\t}\n-\n \t\t\t}\n-\n \t\t});\n \n-\t\tif (isolationLevel[0] == null) {\n-\t\t\tthrow new IllegalStateException(\"Isolation level must be specified\");", "originalCommit": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjExMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453172111", "bodyText": "@jeenbroekstra we really shouldn\u2019t make these methods default in a brand new interface.", "author": "hmottestad", "createdAt": "2020-07-11T08:30:00Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.eclipse.rdf4j;\n+\n+public interface TransactionSetting {\n+\n+\tdefault String getName() {", "originalCommit": "b421868b159a6c6fd9174e707d25b8e1cd9e45cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4Mzk3Mg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453183972", "bodyText": "Why not? If this were an abstract class it would be natural. How significantly different from these defaults are you suspecting  implementing classes to be for these methods?", "author": "jeenbroekstra", "createdAt": "2020-07-11T11:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMzU1NQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r453203555", "bodyText": "I've been thinking a bit more about this and I'm actually not so sure anymore. In general they are decent defaults, except in the case of IsolationLevel since the implementing class is IsolationLevels and not the interface IsolationLevel which blocks users from adding their own isolation levels.", "author": "hmottestad", "createdAt": "2020-07-11T15:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MjExMQ=="}], "type": "inlineReview"}, {"oid": "d0f9eb84bba6e3535250ef8ce7f9f9ba7a41175f", "url": "https://github.com/eclipse/rdf4j/commit/d0f9eb84bba6e3535250ef8ce7f9f9ba7a41175f", "message": "GH-2350 fix tests and japicmp plugin\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-11T14:32:40Z", "type": "commit"}, {"oid": "f61febe52d85d5b418fab35ed48a8d441ead3aeb", "url": "https://github.com/eclipse/rdf4j/commit/f61febe52d85d5b418fab35ed48a8d441ead3aeb", "message": "wip\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-15T14:58:26Z", "type": "commit"}, {"oid": "9f9e1baf33e6f5b5298309b6326ba5c5158ca911", "url": "https://github.com/eclipse/rdf4j/commit/9f9e1baf33e6f5b5298309b6326ba5c5158ca911", "message": "Gh-2350 introduced interning of transaction settings and some simplification\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-15T20:29:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyNDg5MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455324891", "bodyText": "I've introduced this concept here for handling transaction settings that come from http. Essentially we \"intern\" them just like you can intern a string. This makes it much easier to write the rest of the code since we can use things like instanceOf and == for enums.\nAlso this opens up for supporting multiple isolation levels. I was thinking of adding our current isolation levels to the abstract sail class, so we retrieve them from there if possible. That way another sail can override that class and provide their own isolation levels. What do you think? @jeenbroekstra", "author": "hmottestad", "createdAt": "2020-07-15T20:33:23Z", "path": "core/sail/shacl/src/main/java/org/eclipse/rdf4j/sail/shacl/ShaclSail.java", "diffHunk": "@@ -926,4 +930,60 @@ public long getValidationResultsLimitTotal() {\n \tpublic void setValidationResultsLimitTotal(long validationResultsLimitTotal) {\n \t\tthis.validationResultsLimitTotal = validationResultsLimitTotal;\n \t}\n+\n+\t@Override\n+\tpublic IsolationLevel getDefaultIsolationLevel() {\n+\t\treturn super.getDefaultIsolationLevel();\n+\t}\n+\n+\t@Override\n+\tpublic Optional<TransactionSetting> internTransactionSetting(String name, String value) {\n+\t\tif (Settings.ValidationApproach.Disabled.getName().equals(name)\n+\t\t\t\t&& Settings.ValidationApproach.Disabled.getValue().equals(value)) {\n+\t\t\treturn Optional.of(Settings.ValidationApproach.Disabled);\n+\t\t}\n+\t\tif (Settings.ValidationApproach.Bulk.getName().equals(name)\n+\t\t\t\t&& Settings.ValidationApproach.Bulk.getValue().equals(value)) {\n+\t\t\treturn Optional.of(Settings.ValidationApproach.Bulk);\n+\t\t}\n+\t\treturn getBaseSail().internTransactionSetting(name, value);\n+\n+\t}", "originalCommit": "9f9e1baf33e6f5b5298309b6326ba5c5158ca911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNzI2MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455407261", "bodyText": "I don't quite follow what you have in mind for multiple isolation levels. How about we park that for now? Let's get the basic transaction settings working first.", "author": "jeenbroekstra", "createdAt": "2020-07-15T22:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyNDg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDQzMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455410431", "bodyText": "As for the 'interning': it's a workable approach but I had an alternative with a registry for settings in mind, so that (de)serializing of TransactionSettings can happen in the server application code and is not a responsibility for the Sail itself. Somewhat similar to how the parsers are registered and dynamically matched to a mime-type. I'll try and sketch something.", "author": "jeenbroekstra", "createdAt": "2020-07-15T22:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMyNDg5MQ=="}], "type": "inlineReview"}, {"oid": "8321870dc9fa6855ef3d837d9505f02aae1f1fc2", "url": "https://github.com/eclipse/rdf4j/commit/8321870dc9fa6855ef3d837d9505f02aae1f1fc2", "message": "GH-2350 refactored AbstractSailConnection to make backward compatible overrides easier\n\nThe idea is that begin(IsolationLevel) now redirects to\nbegin(TransactionSettings...). Any existing impl that overrides\nbegin(IsolationLevel) but is at least smart enough to still call the\nsuper will automatically support processing of other transaction\nsettings.", "committedDate": "2020-07-16T00:14:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5MTQyNw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455491427", "bodyText": "Went ahead and moved the interface and related factory and registry classes to its own package.", "author": "jeenbroekstra", "createdAt": "2020-07-16T03:42:22Z", "path": "core/util/src/main/java/org/eclipse/rdf4j/common/transaction/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.transaction;", "originalCommit": "fa1905330ce82e87e6d2deadeaf199f4eac6d051", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5MjMxMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455492311", "bodyText": "Calling it out here as well: For IsolationLevel, we use getURI as the canonical identifier. If we do the same thing generally for TransactionSetting, it would make integration IsolationLevel with the generic handling of TransactionSetttings easier.", "author": "jeenbroekstra", "createdAt": "2020-07-16T03:45:46Z", "path": "core/util/src/main/java/org/eclipse/rdf4j/common/transaction/TransactionSetting.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.common.transaction;\n+\n+/**\n+ * A configuration setting that can be passed at the beginning of a repository transaction to influence behavior within\n+ * the scope of that transaction only.\n+ *\n+ * @author H\u00e5vard Ottestad\n+ * @author Jeen Broekstra\n+ */\n+public interface TransactionSetting {\n+\n+\t// FIXME we should perhaps use getURI (with an IRI return type) to uniquely identify settings. Same as what we do\n+\t// for IsolationLevels.\n+\tdefault String getName() {", "originalCommit": "fa1905330ce82e87e6d2deadeaf199f4eac6d051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTM5Nw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455639397", "bodyText": "I think the use of the class/interface canonical name is the best option. Moving the class would not be backwards compatible anyway, and the class canonical name already needs to be unique in the java world. Since this is java code I prefer using a more javaish approach to uniquely identifying a class. It also doesn\u2019t require us to manage namespaces or create IRIs.", "author": "hmottestad", "createdAt": "2020-07-16T09:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5MjMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1ODM1Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r455658356", "bodyText": "If even we can't be bothered to manage a namespace.... :) But seriously: fair enough. We should consider making getURI in IsolationLevel deprecated then.", "author": "jeenbroekstra", "createdAt": "2020-07-16T09:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ5MjMxMQ=="}], "type": "inlineReview"}, {"oid": "f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "url": "https://github.com/eclipse/rdf4j/commit/f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "message": "GH-2350 replace intern pass-through methods with use of an SPI registry", "committedDate": "2020-07-16T04:31:14Z", "type": "commit"}, {"oid": "f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "url": "https://github.com/eclipse/rdf4j/commit/f9d0f62f4e8db5013a00f572a563c36f8d46e8a8", "message": "GH-2350 replace intern pass-through methods with use of an SPI registry", "committedDate": "2020-07-16T04:31:14Z", "type": "forcePushed"}, {"oid": "48046dc7d9410ec288658b2b5d6307ab32e0fdc4", "url": "https://github.com/eclipse/rdf4j/commit/48046dc7d9410ec288658b2b5d6307ab32e0fdc4", "message": "GH-2350 migrated to a receive transaction settings approach for sails instead of more complex begin methods\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-19T11:17:57Z", "type": "commit"}, {"oid": "212d02c018610ec9b14430a7ff5a2824c5a21ae2", "url": "https://github.com/eclipse/rdf4j/commit/212d02c018610ec9b14430a7ff5a2824c5a21ae2", "message": "GH-2350 fix some test failures\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-19T11:45:24Z", "type": "commit"}, {"oid": "5af2729d0ca0388815547caaba834c055de36576", "url": "https://github.com/eclipse/rdf4j/commit/5af2729d0ca0388815547caaba834c055de36576", "message": "updated docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-19T11:55:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0NzY3Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457847673", "bodyText": "Javadoc on this would be useful. Specifically the general contract and the default implementation behaviour of selecting the first IsolationLevel rather than using the last or another decision algorithm.", "author": "ansell", "createdAt": "2020-07-21T05:36:59Z", "path": "core/repository/api/src/main/java/org/eclipse/rdf4j/repository/RepositoryConnection.java", "diffHunk": "@@ -622,7 +623,18 @@ public void exportStatements(Resource subj, IRI pred, Value obj, boolean include\n \t * @see #rollback()\n \t * @see #setIsolationLevel(IsolationLevel)\n \t */\n-\tpublic void begin(IsolationLevel level) throws RepositoryException;\n+\tvoid begin(IsolationLevel level) throws RepositoryException;\n+\n+\tdefault void begin(TransactionSetting... settings) {", "originalCommit": "5af2729d0ca0388815547caaba834c055de36576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NDAwMw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457854003", "bodyText": "Good point regarding javadoc. Fwiw at this point I would prefer not to commit ourselves to a particular decision algorithm for this, and just say that \"behavior is undefined when more than one isolation level is supplied\".", "author": "jeenbroekstra", "createdAt": "2020-07-21T05:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0NzY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457849283", "bodyText": "The other APIs use the ... form. This call seems to be compatible with that so there doesn't seem to be a reason why it should use the [] form instead of ....", "author": "ansell", "createdAt": "2020-07-21T05:42:23Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java", "diffHunk": "@@ -187,6 +188,19 @@ default boolean hasStatement(Resource subj, IRI pred, Value obj, boolean include\n \t */\n \tvoid begin(IsolationLevel level) throws UnknownSailTransactionStateException, SailException;\n \n+\t/**\n+\t *\n+\t * Override this method to receive the transaction settings. This method is always called (by the SailRepository)\n+\t * before any .begin method is called, but may not be called if the sail is being used outside of the\n+\t * SailRepository. Always remember to call super. receiveTransactionSettings(settings) if you override this method.\n+\t *\n+\t * @param settings the transaction settings on which this transaction operates. It may or may not contain the\n+\t *                 isolation level.\n+\t */\n+\tdefault void receiveTransactionSettings(TransactionSetting[] settings) {", "originalCommit": "5af2729d0ca0388815547caaba834c055de36576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NDU0Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457854546", "bodyText": "Piggybacking off this comment: couldn't we just call this 'setTransactionSettings' rather than 'receive...'?", "author": "jeenbroekstra", "createdAt": "2020-07-21T05:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NDk2Nw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457864967", "bodyText": "I'm using array notation because this method isn't supposed to be called from user code. I prefer \"receive\" over \"set\" for methods that the developer is supposed to override in order to receive something.", "author": "hmottestad", "createdAt": "2020-07-21T06:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NTE4NA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457865184", "bodyText": "But not married to \"receive\", so can switch to \"set\" if you want.", "author": "hmottestad", "createdAt": "2020-07-21T06:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MTAwNQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457881005", "bodyText": "Let's go with 'set', and let's reword the javadoc slightly to go with that, something like this:\n/**\n * Pass any transaction-specific settings to the SailConnection. This method needs to be called before the transaction is {@link #begin() started }.\n * <p>\n * Sail implementations can override this method to receive the transaction settings (to inspect and/or pass them \n * along to any wrapped sail objects). Remember to call <code>super.setTransactionSettings(settings)</code> \n * if you override this method.\n *\n * @param settings the transaction settings on which the next transaction operates. It may or may not contain the\n *                 isolation level. \n * @since 3.3.0\n */\n\nI don't think we should say that only SailRepository is allowed to call it. That is no more or less true for this method than for anything else in the Sail API.", "author": "jeenbroekstra", "createdAt": "2020-07-21T07:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MTU3Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457881576", "bodyText": "As for the array vs vararg notation, I have a slight preference for a vararg for consistency, but can live with either. Your call.", "author": "jeenbroekstra", "createdAt": "2020-07-21T07:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MDM5NQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457850395", "bodyText": "This seems like it will cause threadsafety issues as the implementation of the transactionSettings field is a non-threadsafe Map and this is outside of the lock. Is there a reason why the transaction settings cannot be cleared from within the lock section?", "author": "ansell", "createdAt": "2020-07-21T05:45:46Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSailConnection.java", "diffHunk": "@@ -375,61 +385,70 @@ public final void prepare() throws SailException {\n \n \t@Override\n \tpublic final void commit() throws SailException {\n-\t\tif (isActive()) {\n-\t\t\tendUpdate(null);\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n+\t\t\tif (isActive()) {\n+\t\t\t\tendUpdate(null);\n+\t\t\t}\n \n-\t\t\tupdateLock.lock();\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\tif (!txnPrepared) {\n-\t\t\t\t\t\tprepareInternal();\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\tif (!txnPrepared) {\n+\t\t\t\t\t\t\tprepareInternal();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcommitInternal();\n+\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\ttxnPrepared = false;\n \t\t\t\t\t}\n-\t\t\t\t\tcommitInternal();\n-\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();", "originalCommit": "5af2729d0ca0388815547caaba834c055de36576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NTM1MA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457865350", "bodyText": "That code is actually from the initial implementation, will remove.", "author": "hmottestad", "createdAt": "2020-07-21T06:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MDM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MTMwNA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457851304", "bodyText": "If this check is being removed, then there should be a new null-guard on this parameter, given it is a public API method that previously supported null as a valid parameter value (even if IsolationLevels.getCompatibleIsolationLevel is currently null-safe)", "author": "ansell", "createdAt": "2020-07-21T05:48:27Z", "path": "core/sail/inferencer/src/main/java/org/eclipse/rdf4j/sail/inferencer/fc/SchemaCachingRDFSInferencerConnection.java", "diffHunk": "@@ -767,17 +767,13 @@ public void rollback()\n \t@Override\n \tpublic void begin()\n \t\t\tthrows SailException {\n-\t\tthis.begin(null);\n+\t\tthis.begin(sail.getDefaultIsolationLevel());\n \t}\n \n \t@Override\n \tpublic void begin(IsolationLevel level)\n \t\t\tthrows SailException {\n \n-\t\tif (level == null) {", "originalCommit": "5af2729d0ca0388815547caaba834c055de36576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MjU0MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457872541", "bodyText": "fixed", "author": "hmottestad", "createdAt": "2020-07-21T06:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457856297", "bodyText": "This check is not necessary - you can just pass null as an argument to the begin method.", "author": "jeenbroekstra", "createdAt": "2020-07-21T06:03:03Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -155,7 +165,41 @@ public void begin() throws RepositoryException {\n \t@Override\n \tpublic void begin(IsolationLevel level) throws RepositoryException {\n \t\ttry {\n-\t\t\tsailConnection.begin(level);\n+\t\t\t// always call receiveTransactionSettings(...) before calling begin();\n+\t\t\tsailConnection.receiveTransactionSettings(new TransactionSetting[0]);\n+\n+\t\t\tif (level != null) {\n+\t\t\t\tsailConnection.begin(level);\n+\t\t\t} else {\n+\t\t\t\tsailConnection.begin();\n+\t\t\t}", "originalCommit": "5af2729d0ca0388815547caaba834c055de36576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NzkzOQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457867939", "bodyText": "I really prefer to move away from passing null to the begin method. We could consider deprecating and removing the begin() method and only keep the begin(level) method for the sail code.", "author": "hmottestad", "createdAt": "2020-07-21T06:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3NjMyNA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457876324", "bodyText": "Also, from seeing that there were no test failures when I removed the null check from the SchemaCachingRDFSInferencerConnection I'm starting to suspect that we don't have any tests for this null handling behaviour.\nHere is from the docs:\n\t/**\n\t * Begins a transaction with the specified {@link IsolationLevel} level, requiring {@link #commit()} or\n\t * {@link #rollback()} to be called to close the transaction.\n\t *\n\t * @param level the transaction isolation level on which this transaction operates.\n\t * @throws UnknownSailTransactionStateException If the IsolationLevel is not supported by this implementation\n\t * @throws SailException                        If the connection could not start a transaction, if the supplied\n\t *                                              transaction isolation level is not supported, or if a transaction is\n\t *                                              already active on this connection.\n\t */\n\tvoid begin(IsolationLevel level) throws UnknownSailTransactionStateException, SailException;\n\n\nFrom looking at that documentation from the SailConnection interface there is no mention of how null should be handled and it would make just as much sense to throw a SailException if null were provided.", "author": "hmottestad", "createdAt": "2020-07-21T06:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4NDU3OA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457884578", "bodyText": "Mind you, the RepositoryConnection code specifically states that it allows null as an isolation level.", "author": "hmottestad", "createdAt": "2020-07-21T07:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4NjgzMg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457886832", "bodyText": "Also, from seeing that there were no test failures when I removed the null check from the SchemaCachingRDFSInferencerConnection I'm starting to suspect that we don't have any tests for this null handling behaviour.\nHere is from the docs:\n\t/**\n\t * Begins a transaction with the specified {@link IsolationLevel} level, requiring {@link #commit()} or\n\t * {@link #rollback()} to be called to close the transaction.\n\t *\n\t * @param level the transaction isolation level on which this transaction operates.\n\t * @throws UnknownSailTransactionStateException If the IsolationLevel is not supported by this implementation\n\t * @throws SailException                        If the connection could not start a transaction, if the supplied\n\t *                                              transaction isolation level is not supported, or if a transaction is\n\t *                                              already active on this connection.\n\t */\n\tvoid begin(IsolationLevel level) throws UnknownSailTransactionStateException, SailException;\n\nFrom looking at that documentation from the SailConnection interface there is no mention of how null should be handled and it would make just as much sense to throw a SailException if null were provided.\n\nSpec-wise perhaps, but it wouldn't in practice: most (base) SailConnection implementations inherit from AbstractSailConnection, which accepts null and falls back to the default isolation level. But you're right that it's not officially documented. That's an oversight I think.\nWe can discuss if that needs to change some other time but I would suggest for the purpose of this PR to stick to how most Sails currently behave. That doesn't mean you need to take out this if-else construction by the way: I only commented because I considered it unnecessary, but it doesn't harm to have it there either.", "author": "jeenbroekstra", "createdAt": "2020-07-21T07:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzMxOQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457893319", "bodyText": "Btw. Created a new issue: #2376", "author": "hmottestad", "createdAt": "2020-07-21T07:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MDIwNA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457860204", "bodyText": "Shouldn't this be cleared before releasing the update lock?", "author": "jeenbroekstra", "createdAt": "2020-07-21T06:14:36Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/helpers/AbstractSailConnection.java", "diffHunk": "@@ -375,61 +385,70 @@ public final void prepare() throws SailException {\n \n \t@Override\n \tpublic final void commit() throws SailException {\n-\t\tif (isActive()) {\n-\t\t\tendUpdate(null);\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n+\t\t\tif (isActive()) {\n+\t\t\t\tendUpdate(null);\n+\t\t\t}\n \n-\t\t\tupdateLock.lock();\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\tif (!txnPrepared) {\n-\t\t\t\t\t\tprepareInternal();\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\tif (!txnPrepared) {\n+\t\t\t\t\t\t\tprepareInternal();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcommitInternal();\n+\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\ttxnPrepared = false;\n \t\t\t\t\t}\n-\t\t\t\t\tcommitInternal();\n-\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();\n \t\t}\n \t}\n \n \t@Override\n \tpublic final void rollback() throws SailException {\n-\t\tsynchronized (added) {\n-\t\t\tadded.clear();\n-\t\t}\n-\t\tsynchronized (removed) {\n-\t\t\tremoved.clear();\n-\t\t}\n-\t\tconnectionLock.readLock().lock();\n \t\ttry {\n-\t\t\tverifyIsOpen();\n-\n-\t\t\tupdateLock.lock();\n+\t\t\tsynchronized (added) {\n+\t\t\t\tadded.clear();\n+\t\t\t}\n+\t\t\tsynchronized (removed) {\n+\t\t\t\tremoved.clear();\n+\t\t\t}\n+\t\t\tconnectionLock.readLock().lock();\n \t\t\ttry {\n-\t\t\t\tif (txnActive) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trollbackInternal();\n-\t\t\t\t\t} finally {\n-\t\t\t\t\t\ttxnActive = false;\n-\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\tverifyIsOpen();\n+\n+\t\t\t\tupdateLock.lock();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (txnActive) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\trollbackInternal();\n+\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\ttxnActive = false;\n+\t\t\t\t\t\t\ttxnPrepared = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n+\t\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.warn(\"Cannot rollback transaction on connection because transaction is not active\",\n-\t\t\t\t\t\t\tdebugEnabled ? new Throwable() : null);\n+\t\t\t\t} finally {\n+\t\t\t\t\tupdateLock.unlock();\n \t\t\t\t}\n \t\t\t} finally {\n-\t\t\t\tupdateLock.unlock();\n+\t\t\t\tconnectionLock.readLock().unlock();\n \t\t\t}\n \t\t} finally {\n-\t\t\tconnectionLock.readLock().unlock();\n+\t\t\ttransactionSettings.clear();", "originalCommit": "5af2729d0ca0388815547caaba834c055de36576", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTI2Mg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457871262", "bodyText": "removed", "author": "hmottestad", "createdAt": "2020-07-21T06:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MDIwNA=="}], "type": "inlineReview"}, {"oid": "f4f36e79689cedd07da07496e88b26e86da9abe5", "url": "https://github.com/eclipse/rdf4j/commit/f4f36e79689cedd07da07496e88b26e86da9abe5", "message": "fixes from review\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-21T06:36:18Z", "type": "commit"}, {"oid": "e5461ef37d834efe585561bc2269822686472e7d", "url": "https://github.com/eclipse/rdf4j/commit/e5461ef37d834efe585561bc2269822686472e7d", "message": "revert docker changes\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-21T06:42:15Z", "type": "commit"}, {"oid": "f2e625ded394389458c00e28e4ec9c6ae34a3d7f", "url": "https://github.com/eclipse/rdf4j/commit/f2e625ded394389458c00e28e4ec9c6ae34a3d7f", "message": "removed override method in the sparql connection for handling transaction settings\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-21T06:48:10Z", "type": "commit"}, {"oid": "87e5d1d60974f15582875899df979d118456cc17", "url": "https://github.com/eclipse/rdf4j/commit/87e5d1d60974f15582875899df979d118456cc17", "message": "fixed a pom file and added docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-21T07:08:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzM2Mg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457883362", "bodyText": "Added java docs now.", "author": "hmottestad", "createdAt": "2020-07-21T07:10:08Z", "path": "core/repository/api/src/main/java/org/eclipse/rdf4j/repository/RepositoryConnection.java", "diffHunk": "@@ -622,7 +623,39 @@ public void exportStatements(Resource subj, IRI pred, Value obj, boolean include\n \t * @see #rollback()\n \t * @see #setIsolationLevel(IsolationLevel)\n \t */\n-\tpublic void begin(IsolationLevel level) throws RepositoryException;\n+\tvoid begin(IsolationLevel level) throws RepositoryException;\n+\n+\t/**\n+\t * Begins a new transaction with the supplied {@link TransactionSetting}, requiring {@link #commit()} or\n+\t * {@link #rollback()} to be called to end the transaction.\n+\t *\n+\t * @param settings The {@link TransactionSetting} (zero or more) for this transaction. If an isolation level is\n+\t *                 provided in the settings this will be used for the transaction. If none is provided then the\n+\t *                 default will be used. Behaviour of this method is undefined if more than one isolation level is\n+\t *                 provided. Behaviour of this method is undefined if one or more settings is null.\n+\t * @throws RepositoryException If the connection could not start the transaction. Possible reasons this may happen\n+\t *                             are:\n+\t *                             <ul>\n+\t *                             <li>a transaction is already {@link #isActive() active} on the current connection.\n+\t *                             <li>the specified {@link IsolationLevel} is not supported by the store, and no\n+\t *                             compatible level could be found.\n+\t *                             </ul>\n+\t * @see #begin()\n+\t * @see #isActive()\n+\t * @see #commit()\n+\t * @see #rollback()\n+\t * @see #setIsolationLevel(IsolationLevel)\n+\t */\n+\tdefault void begin(TransactionSetting... settings) {", "originalCommit": "87e5d1d60974f15582875899df979d118456cc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4NDI1OA==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457884258", "bodyText": "@jeenbroekstra what do you think?", "author": "hmottestad", "createdAt": "2020-07-21T07:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4ODc3Mg==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457888772", "bodyText": "Looks good to me! One last niggle: add a @since 3.3.0 if you have time.", "author": "jeenbroekstra", "createdAt": "2020-07-21T07:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzExNw==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r457893117", "bodyText": "LGTM, and I agree that @since tags are very useful on new public API methods.", "author": "ansell", "createdAt": "2020-07-21T07:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg4MzM2Mg=="}], "type": "inlineReview"}, {"oid": "08d022df9ad653402cd12cbabe646b0e2ae5bdfd", "url": "https://github.com/eclipse/rdf4j/commit/08d022df9ad653402cd12cbabe646b0e2ae5bdfd", "message": "fixes from review\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-07-21T07:41:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNzEwOQ==", "url": "https://github.com/eclipse/rdf4j/pull/2351#discussion_r458007109", "bodyText": "@rdstn Representative tests", "author": "hmottestad", "createdAt": "2020-07-21T10:50:17Z", "path": "core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/BulkValidationSettingsTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.shacl;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.rdf4j.IsolationLevels;\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.model.vocabulary.RDF4J;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.repository.RepositoryConnection;\n+import org.eclipse.rdf4j.repository.RepositoryException;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.rio.RDFFormat;\n+import org.eclipse.rdf4j.sail.memory.MemoryStore;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * @author H\u00e5vard Ottestad\n+ */\n+public class BulkValidationSettingsTest {\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() {\n+\t\tGlobalValidationExecutionLogging.loggingEnabled = false;\n+\t}\n+\n+\t@Test\n+\tpublic void testValid() throws Exception {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.NONE);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.add(RDFS.RESOURCE, RDFS.LABEL, connection.getValueFactory().createLiteral(\"a\"));\n+\t\t\tconnection.commit();\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test(expected = ShaclSailValidationException.class)\n+\tpublic void testInvalid() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.NONE);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\ttry {\n+\t\t\t\tconnection.commit();\n+\t\t\t} catch (RepositoryException e) {\n+\t\t\t\tthrow e.getCause();\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test(expected = ShaclSailValidationException.class)\n+\tpublic void testInvalidSnapshot() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.SNAPSHOT);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\ttry {\n+\t\t\t\tconnection.commit();\n+\t\t\t} catch (RepositoryException e) {\n+\t\t\t\tthrow e.getCause();\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidRollsBackCorrectly() {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk, IsolationLevels.NONE);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\n+\t\t\tconnection.commit();\n+\n+\t\t} catch (Exception ignored) {\n+\n+\t\t}\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(IsolationLevels.NONE);\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\t\t\tconnection.commit();\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test(expected = ShaclSailValidationException.class)\n+\tpublic void testValidationDisabled() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Disabled);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\n+\t\t\tconnection.commit();\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Bulk);\n+\t\t\ttry (SailRepositoryConnection connection1 = repository.getConnection()) {\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tconnection.commit();\n+\t\t\t\t} catch (RepositoryException e) {\n+\t\t\t\t\tthrow e.getCause();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testValidationDisabledSnapshotSerializableValidation() throws Throwable {\n+\n+\t\tSailRepository repository = new SailRepository(new ShaclSail(new MemoryStore()));\n+\n+\t\ttry (RepositoryConnection connection = repository.getConnection()) {\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Disabled, IsolationLevels.SNAPSHOT);\n+\n+\t\t\ttry (InputStream shapesData = Utils.class.getClassLoader().getResourceAsStream(\"shacl.ttl\")) {\n+\t\t\t\tconnection.add(shapesData, \"\", RDFFormat.TURTLE, RDF4J.SHACL_SHAPE_GRAPH);\n+\t\t\t}\n+\n+\t\t\tconnection.commit();\n+\n+\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.CLASS);\n+\n+\t\t\tconnection.begin(ShaclSail.TransactionSettings.ValidationApproach.Disabled, IsolationLevels.SNAPSHOT);\n+\n+\t\t\ttry (SailRepositoryConnection connection1 = repository.getConnection()) {\n+\n+\t\t\t\tconnection.add(RDFS.RESOURCE, RDF.TYPE, RDFS.RESOURCE);\n+\n+\t\t\t\tconnection.commit();\n+\n+\t\t\t}\n+\n+\t\t}\n+\n+\t}\n+\n+}", "originalCommit": "08d022df9ad653402cd12cbabe646b0e2ae5bdfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}