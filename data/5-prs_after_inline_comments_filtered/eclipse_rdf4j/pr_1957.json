{"pr_number": 1957, "pr_title": "#1956 use DynamicModel more", "pr_createdAt": "2020-03-02T07:06:00Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/1957", "timeline": [{"oid": "226e64033334844ddbcaa2b6bd8ccfce5cd78f4b", "url": "https://github.com/eclipse/rdf4j/commit/226e64033334844ddbcaa2b6bd8ccfce5cd78f4b", "message": "#1956 use SimpleUpgradeableModel in Rio for loading data\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-02T07:05:19Z", "type": "commit"}, {"oid": "0bd1ba8f07cd737386275459c633047feee2dafc", "url": "https://github.com/eclipse/rdf4j/commit/0bd1ba8f07cd737386275459c633047feee2dafc", "message": "#1956 model1.equals(model2) actually needs to check for isomorphic\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-02T15:06:37Z", "type": "commit"}, {"oid": "98bc873add4e2d702f9d3d302825da26d032d2fe", "url": "https://github.com/eclipse/rdf4j/commit/98bc873add4e2d702f9d3d302825da26d032d2fe", "message": "#1956 model collector should use simple upgradeable model too\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-02T15:56:59Z", "type": "commit"}, {"oid": "06d9c31164de7d70947db309c357bc44f62b7cf4", "url": "https://github.com/eclipse/rdf4j/commit/06d9c31164de7d70947db309c357bc44f62b7cf4", "message": "#1956 spin and old rdfs reasoner should use SimpleUpgradeableModel\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-02T16:02:28Z", "type": "commit"}, {"oid": "813c2f3606f1067883dfb411e00326b993a165ef", "url": "https://github.com/eclipse/rdf4j/commit/813c2f3606f1067883dfb411e00326b993a165ef", "message": "#1956 query result asModel should use SimpleUpgradeableModel\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-02T16:02:51Z", "type": "commit"}, {"oid": "7c79c33a1299fa6aabdd0bc967d72bdd8d732700", "url": "https://github.com/eclipse/rdf4j/commit/7c79c33a1299fa6aabdd0bc967d72bdd8d732700", "message": "#1956 SailSourceBranch should use SimpleUpgradeableModel\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-02T16:03:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNTMyNQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r386735325", "bodyText": "While we're at it, perhaps we could make the ModelFactory injectable here as well, by introducing a method overload. E.g. something like this:\npublic static Model asModel(CloseableIteration<? extends Statement, ? extends RDF4JException> iteration) {\n      return asModel(iteration, new SimpleUpgradeableModelFactory());\n }\n public static Model asModel(CloseableIteration<? extends Statement, ? extends RDF4JException> iteration, ModelFactory modelFactory) {\n                 Model model = modelFactory.createEmptyModel();\n                 ....", "author": "jeenbroekstra", "createdAt": "2020-03-03T00:36:40Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/QueryResults.java", "diffHunk": "@@ -66,7 +68,7 @@\n \t */\n \tpublic static Model asModel(CloseableIteration<? extends Statement, ? extends RDF4JException> iteration)\n \t\t\tthrows QueryEvaluationException {\n-\t\tModel model = new LinkedHashModel();\n+\t\tModel model = new SimpleUpgradeableModel(new LinkedHashModelFactory());", "originalCommit": "7c79c33a1299fa6aabdd0bc967d72bdd8d732700", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNTc0NA==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r386735744", "bodyText": "Same here - could we make it injectable?", "author": "jeenbroekstra", "createdAt": "2020-03-03T00:37:59Z", "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/Rio.java", "diffHunk": "@@ -258,12 +259,12 @@ public static Model parse(Reader reader, String baseURI, RDFFormat dataFormat, R\n \tpublic static Model parse(InputStream in, String baseURI, RDFFormat dataFormat, ParserConfig settings,\n \t\t\tValueFactory valueFactory, ParseErrorListener errors, Resource... contexts)\n \t\t\tthrows IOException, RDFParseException, UnsupportedRDFormatException {\n-\t\tModel result = new LinkedHashModel();\n+\t\tModel result = new SimpleUpgradeableModel(new LinkedHashModelFactory());", "originalCommit": "7c79c33a1299fa6aabdd0bc967d72bdd8d732700", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjUxNQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r386736515", "bodyText": "..and here as well", "author": "jeenbroekstra", "createdAt": "2020-03-03T00:40:44Z", "path": "core/rio/api/src/main/java/org/eclipse/rdf4j/rio/Rio.java", "diffHunk": "@@ -292,12 +293,12 @@ public static Model parse(InputStream in, String baseURI, RDFFormat dataFormat,\n \tpublic static Model parse(Reader reader, String baseURI, RDFFormat dataFormat, ParserConfig settings,\n \t\t\tValueFactory valueFactory, ParseErrorListener errors, Resource... contexts)\n \t\t\tthrows IOException, RDFParseException, UnsupportedRDFormatException {\n-\t\tModel result = new LinkedHashModel();\n+\t\tModel result = new SimpleUpgradeableModel(new LinkedHashModelFactory());", "originalCommit": "7c79c33a1299fa6aabdd0bc967d72bdd8d732700", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "73a7602570994354113892bb31b2f0284ad3dec2", "url": "https://github.com/eclipse/rdf4j/commit/73a7602570994354113892bb31b2f0284ad3dec2", "message": "renamed class\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T08:46:42Z", "type": "commit"}, {"oid": "ce155e8957e226ca3bb13ebdb623efcb54df4262", "url": "https://github.com/eclipse/rdf4j/commit/ce155e8957e226ca3bb13ebdb623efcb54df4262", "message": "trying to make filter(...) apply directly if possible\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T09:32:06Z", "type": "commit"}, {"oid": "ce155e8957e226ca3bb13ebdb623efcb54df4262", "url": "https://github.com/eclipse/rdf4j/commit/ce155e8957e226ca3bb13ebdb623efcb54df4262", "message": "trying to make filter(...) apply directly if possible\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T09:32:06Z", "type": "forcePushed"}, {"oid": "e63826e1e4a2a17a518cd3809c2a932264ca545d", "url": "https://github.com/eclipse/rdf4j/commit/e63826e1e4a2a17a518cd3809c2a932264ca545d", "message": "format\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T09:41:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwMjg1NQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r386902855", "bodyText": "In order to get the most out of sails that use the notifying behaviour we need to implement simple support for filter. I read that the docs specify that filter(...) should return a view of the current model, rather than a new model or an unmodifiable model. Not sure how to implement this with the performance I want. Have you worked with the FilteredModel before @jeenbroekstra ?", "author": "hmottestad", "createdAt": "2020-03-03T09:45:30Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/DynamicModel.java", "diffHunk": "@@ -141,6 +142,35 @@ public boolean remove(Resource subj, IRI pred, Value obj, Resource... contexts)\n \n \t@Override\n \tpublic Model filter(Resource subj, IRI pred, Value obj, Resource... contexts) {\n+\t\tif (model == null && statements.size() == 0) {\n+\t\t\treturn new EmptyModel(this);\n+\t\t}\n+\n+\t\tif (model == null && subj != null && pred != null && obj != null && contexts.length == 1) {\n+\t\t\tStatement needle = SimpleValueFactory.getInstance().createStatement(subj, pred, obj, contexts[0]);\n+\t\t\tif (statements.size() == 1) {\n+\t\t\t\tStatement s = (Statement) statements.toArray()[0];\n+\n+\t\t\t\tDynamicModel ret = new DynamicModel(modelFactory);\n+\n+\t\t\t\tif (s.equals(needle)) {\n+\t\t\t\t\tret.add(s);\n+\t\t\t\t}\n+\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tDynamicModel ret = new DynamicModel(modelFactory);\n+\t\t\tif (statements.contains(needle)) {\n+\t\t\t\tret.add(needle);\n+\t\t\t}\n+\t\t\treturn ret;\n+\t\t}\n+\n+\t\tif (subj == null && pred == null && obj == null && contexts.length == 0) {\n+\t\t\treturn this;\n+\t\t}\n+\n \t\tupgrade();\n \t\treturn model.filter(subj, pred, obj, contexts);\n \t}", "originalCommit": "e63826e1e4a2a17a518cd3809c2a932264ca545d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0Mjc4MQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r387442781", "bodyText": "I'm not sure what problem you're trying to solve here, to be honest. Just filter on the underlying model when filter is used. It will use a FilteredModel internally. FilteredModel is just a wrapper around the original model that internally keeps track of fixed subject, predicate, object and/or context to, well, filter statements dynamically.", "author": "jeenbroekstra", "createdAt": "2020-03-04T04:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwMjg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODQ1MA==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r387448450", "bodyText": "I haven't thought this through fully, but if your idea is to somehow postpone upgrading when filtering by just using the original DynamicModel in corner cases, you could just do this by returning a new FilteredModel that internally creates an iterator, and put your filtering / upgrade logic in that iterator. As long as you make sure that what you return is a filtered view on the original Model, so that any future modifications of that result object get reflected in the original model, you're good.\nBut perhaps you shouldn't sweat over this too much right now. I get the feeling you're trying to push too many optimizations in one PR, and this change is really out of scope: it's supposed to be about using the DynamicModel in more places, not about optimizing the DynamicModel itself even further.", "author": "jeenbroekstra", "createdAt": "2020-03-04T04:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwMjg1NQ=="}], "type": "inlineReview"}, {"oid": "5ecfb83c231162f3367a9687a6c1bda961fb571c", "url": "https://github.com/eclipse/rdf4j/commit/5ecfb83c231162f3367a9687a6c1bda961fb571c", "message": "Merge branch 'develop' into issues/1956_use_SimpleUpgradeableModel_Rio\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T09:55:21Z", "type": "commit"}, {"oid": "d0e771c85ff4581b054e4cfd9b018bc19c673484", "url": "https://github.com/eclipse/rdf4j/commit/d0e771c85ff4581b054e4cfd9b018bc19c673484", "message": "updated tests to reflect that inferred statements are added to whatever context they are added to regardless of if they exist in other contexts\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T14:17:35Z", "type": "commit"}, {"oid": "4a0787b53627d4c9bab6604825b59c571bc5f395", "url": "https://github.com/eclipse/rdf4j/commit/4a0787b53627d4c9bab6604825b59c571bc5f395", "message": "Merge branch 'develop' into issues/1956_use_SimpleUpgradeableModel_Rio\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-03T14:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTg0OA==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r387445848", "bodyText": "This isn't valid - you can't return a new Model object as the result of the filter. If someone were to add something to this empty model, that should be reflected in the original.\nI'm a little surprised there are no failing tests for this to be honest. I thought James had created a comprehensive set of tests for Model behavior. This expectation should be reflected in the tests on the filter method.", "author": "jeenbroekstra", "createdAt": "2020-03-04T04:41:28Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/DynamicModel.java", "diffHunk": "@@ -141,6 +142,35 @@ public boolean remove(Resource subj, IRI pred, Value obj, Resource... contexts)\n \n \t@Override\n \tpublic Model filter(Resource subj, IRI pred, Value obj, Resource... contexts) {\n+\t\tif (model == null && statements.size() == 0) {\n+\t\t\treturn new EmptyModel(this);", "originalCommit": "4a0787b53627d4c9bab6604825b59c571bc5f395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MjM4OQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r387452389", "bodyText": "I'll push a couple of tests for this to this PR to make it easier.", "author": "jeenbroekstra", "createdAt": "2020-03-04T05:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTkyOA==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r387445928", "bodyText": "Same here.", "author": "jeenbroekstra", "createdAt": "2020-03-04T04:41:50Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/DynamicModel.java", "diffHunk": "@@ -141,6 +142,35 @@ public boolean remove(Resource subj, IRI pred, Value obj, Resource... contexts)\n \n \t@Override\n \tpublic Model filter(Resource subj, IRI pred, Value obj, Resource... contexts) {\n+\t\tif (model == null && statements.size() == 0) {\n+\t\t\treturn new EmptyModel(this);\n+\t\t}\n+\n+\t\tif (model == null && subj != null && pred != null && obj != null && contexts.length == 1) {\n+\t\t\tStatement needle = SimpleValueFactory.getInstance().createStatement(subj, pred, obj, contexts[0]);\n+\t\t\tif (statements.size() == 1) {\n+\t\t\t\tStatement s = (Statement) statements.toArray()[0];\n+\n+\t\t\t\tDynamicModel ret = new DynamicModel(modelFactory);", "originalCommit": "4a0787b53627d4c9bab6604825b59c571bc5f395", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NzQ0OA==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r387447448", "bodyText": "...and here as well.", "author": "jeenbroekstra", "createdAt": "2020-03-04T04:49:38Z", "path": "core/model/src/main/java/org/eclipse/rdf4j/model/impl/DynamicModel.java", "diffHunk": "@@ -141,6 +142,35 @@ public boolean remove(Resource subj, IRI pred, Value obj, Resource... contexts)\n \n \t@Override\n \tpublic Model filter(Resource subj, IRI pred, Value obj, Resource... contexts) {\n+\t\tif (model == null && statements.size() == 0) {\n+\t\t\treturn new EmptyModel(this);\n+\t\t}\n+\n+\t\tif (model == null && subj != null && pred != null && obj != null && contexts.length == 1) {\n+\t\t\tStatement needle = SimpleValueFactory.getInstance().createStatement(subj, pred, obj, contexts[0]);\n+\t\t\tif (statements.size() == 1) {\n+\t\t\t\tStatement s = (Statement) statements.toArray()[0];\n+\n+\t\t\t\tDynamicModel ret = new DynamicModel(modelFactory);\n+\n+\t\t\t\tif (s.equals(needle)) {\n+\t\t\t\t\tret.add(s);\n+\t\t\t\t}\n+\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\n+\t\t\tDynamicModel ret = new DynamicModel(modelFactory);", "originalCommit": "4a0787b53627d4c9bab6604825b59c571bc5f395", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9372837c3030e35de1e78809b2b395d68a2cce85", "url": "https://github.com/eclipse/rdf4j/commit/9372837c3030e35de1e78809b2b395d68a2cce85", "message": "GH-1956 additional compliance tests for model.filter behavior", "committedDate": "2020-03-04T05:27:29Z", "type": "commit"}, {"oid": "229722eb245889d155ba48fa21cad98a75eb955d", "url": "https://github.com/eclipse/rdf4j/commit/229722eb245889d155ba48fa21cad98a75eb955d", "message": "reverted filter method\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-05T12:07:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTI2OQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r388709269", "bodyText": "Just had a look at this after your remark. I'm not sure I follow the logic here to be honest. You've modified the check to only look in the null context. But what if the statement already existed (either inferred or explicit) in some other context? This adaptation will now report a new inferred statement even if in reality it might already have existed.", "author": "jeenbroekstra", "createdAt": "2020-03-06T04:35:33Z", "path": "core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SailSourceConnection.java", "diffHunk": "@@ -544,9 +547,9 @@ public boolean addInferredStatement(Resource subj, IRI pred, Value obj, Resource\n \t\t\t}\n \t\t\tboolean modified = false;\n \t\t\tif (contexts.length == 0) {\n-\t\t\t\tif (!hasStatement(explicitOnlyDataset, subj, pred, obj)) {\n+\t\t\t\tif (!hasStatement(explicitOnlyDataset, subj, pred, obj, NULL_CTX)) {\n \t\t\t\t\t// only add inferred statements that aren't already explicit\n-\t\t\t\t\tif (!hasStatement(inferredOnlyDataset, subj, pred, obj)) {\n+\t\t\t\t\tif (!hasStatement(inferredOnlyDataset, subj, pred, obj, NULL_CTX)) {", "originalCommit": "229722eb245889d155ba48fa21cad98a75eb955d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTU5MQ==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r388709591", "bodyText": "It would seem more logical to me if this check explicitly looked at the context you're trying to insert the new statement to.", "author": "jeenbroekstra", "createdAt": "2020-03-06T04:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMzE5Mg==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r388733192", "bodyText": "It would seem more logical to me if this check explicitly looked at the context you're trying to insert the new statement to.\n\nIt does. There are two branches. One for context.length == 0 and one for length >= 1. This is for length == 0.", "author": "hmottestad", "createdAt": "2020-03-06T06:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3Mjc5Nw==", "url": "https://github.com/eclipse/rdf4j/pull/1957#discussion_r388772797", "bodyText": "Ah, right, I missed that in the diff!", "author": "jeenbroekstra", "createdAt": "2020-03-06T08:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTI2OQ=="}], "type": "inlineReview"}, {"oid": "b446806637beb1207accb3bb5cbaa56c15398a68", "url": "https://github.com/eclipse/rdf4j/commit/b446806637beb1207accb3bb5cbaa56c15398a68", "message": "implemented methods that allows the user to override the model factories used in Rio and in QueryResults\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-03-06T09:08:21Z", "type": "commit"}]}