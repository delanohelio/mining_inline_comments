{"pr_number": 1296, "pr_title": "HDDS-4053. Volume space: add quotaUsageInBytes and update it when write and delete key.", "pr_createdAt": "2020-08-06T13:41:37Z", "pr_url": "https://github.com/apache/ozone/pull/1296", "timeline": [{"oid": "fe3011b9800194a0bff906188a0832a95bc6bb22", "url": "https://github.com/apache/ozone/commit/fe3011b9800194a0bff906188a0832a95bc6bb22", "message": "add UT", "committedDate": "2020-08-06T14:02:35Z", "type": "forcePushed"}, {"oid": "07f7c17f3dceb19ef7aab0472a3c48a66e93a65a", "url": "https://github.com/apache/ozone/commit/07f7c17f3dceb19ef7aab0472a3c48a66e93a65a", "message": "add UT", "committedDate": "2020-08-06T14:15:32Z", "type": "forcePushed"}, {"oid": "642710a9464ac0919a988f762432294d6a8ef431", "url": "https://github.com/apache/ozone/commit/642710a9464ac0919a988f762432294d6a8ef431", "message": "fix some issues.", "committedDate": "2020-08-13T18:28:33Z", "type": "forcePushed"}, {"oid": "ce40e90197af2e827668b1b4edb480329bc70cf1", "url": "https://github.com/apache/ozone/commit/ce40e90197af2e827668b1b4edb480329bc70cf1", "message": "fix some issues.", "committedDate": "2020-08-14T01:02:26Z", "type": "forcePushed"}, {"oid": "20b41048a85150adc94e7ab8cb1c1f0a52845124", "url": "https://github.com/apache/ozone/commit/20b41048a85150adc94e7ab8cb1c1f0a52845124", "message": "use atomic operations instead of volume lock.", "committedDate": "2020-09-03T09:25:04Z", "type": "forcePushed"}, {"oid": "09807959ecfdafff7f6afddd6714a60056b8454e", "url": "https://github.com/apache/ozone/commit/09807959ecfdafff7f6afddd6714a60056b8454e", "message": "use atomic operations instead of volume lock.", "committedDate": "2020-09-07T06:54:36Z", "type": "forcePushed"}, {"oid": "a8251c38a3211b63210662147b6732e0cf5700a9", "url": "https://github.com/apache/ozone/commit/a8251c38a3211b63210662147b6732e0cf5700a9", "message": "fix issues.", "committedDate": "2020-09-07T07:28:49Z", "type": "forcePushed"}, {"oid": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "url": "https://github.com/apache/ozone/commit/cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "message": "fix issues.", "committedDate": "2020-09-07T07:39:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MTMwMA==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485051300", "bodyText": "NIT: Can we add a builder to avoid managing constructors with different parameters?", "author": "xiaoyuyao", "createdAt": "2020-09-08T16:31:40Z", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java", "diffHunk": "@@ -131,6 +133,18 @@ public OzoneVolume(ConfigurationSource conf, ClientProtocol proxy,\n     this.modificationTime = Instant.ofEpochMilli(modificationTime);\n   }\n \n+  @SuppressWarnings(\"parameternumber\")", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ0NzM0Mg==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485447342", "bodyText": "I think that's good advice, and that's a problem that also exists in OzoneBucket. We can optimize these problems separately, I opened a JIRA HDDS-4223 to follow and optimize this part.", "author": "captainzmc", "createdAt": "2020-09-09T08:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MTMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc3NTI2Mw==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r486775263", "bodyText": "sounds good to me.", "author": "xiaoyuyao", "createdAt": "2020-09-11T05:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYwNzM4OQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484607389", "bodyText": "How do we use QUOTA_USAGE = \"quotaUsage\" here ?\nCould you please update the rest part if you agree the idea ?", "author": "cxorm", "createdAt": "2020-09-08T01:46:17Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConsts.java", "diffHunk": "@@ -269,6 +269,7 @@ private OzoneConsts() {\n   public static final String KEY = \"key\";\n   public static final String SRC_KEY = \"srcKey\";\n   public static final String DST_KEY = \"dstKey\";\n+  public static final String QUOTA_USAGE_IN_BYTES = \"quotaUsageInBytes\";", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NzUyMg==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485547522", "bodyText": "Using quotaUsage here may not be appropriate because it makes it impossible to distinguish between QuotaUsageInBytes and later QuotaUsageInCount.\nHere we can use the usage in ContainerInfo, use usedBytes.", "author": "captainzmc", "createdAt": "2020-09-09T11:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYwNzM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYwOTE3Mw==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484609173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this(conf, proxy, name, admin, owner, quotaInBytes, quotaInCounts,\n          \n          \n            \n                    creationTime, acls, metadata);\n          \n          \n            \n                this.modificationTime = Instant.ofEpochMilli(modificationTime);\n          \n          \n            \n                this.quotaUsageInBytes = quotaUsageInBytes;\n          \n          \n            \n                this(conf, proxy, name, admin, owner, quotaInBytes, quotaInCounts,\n          \n          \n            \n                    creationTime, modificationTime, acls, metadata);\n          \n          \n            \n                this.quotaUsageInBytes = quotaUsageInBytes;", "author": "cxorm", "createdAt": "2020-09-08T01:54:09Z", "path": "hadoop-ozone/client/src/main/java/org/apache/hadoop/ozone/client/OzoneVolume.java", "diffHunk": "@@ -131,6 +133,18 @@ public OzoneVolume(ConfigurationSource conf, ClientProtocol proxy,\n     this.modificationTime = Instant.ofEpochMilli(modificationTime);\n   }\n \n+  @SuppressWarnings(\"parameternumber\")\n+  public OzoneVolume(ConfigurationSource conf, ClientProtocol proxy,\n+      String name, String admin, String owner, long quotaInBytes,\n+      long quotaInCounts, long creationTime, long modificationTime,\n+      List<OzoneAcl> acls, Map<String, String> metadata,\n+      long quotaUsageInBytes) {\n+    this(conf, proxy, name, admin, owner, quotaInBytes, quotaInCounts,\n+        creationTime, acls, metadata);\n+    this.modificationTime = Instant.ofEpochMilli(modificationTime);\n+    this.quotaUsageInBytes = quotaUsageInBytes;", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNDMwOQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484614309", "bodyText": "I'm fine with the LongAdder here.\nOut of curiosity,\nCould you be so kind to tell me why we use it here ?\n(Or please describe the bad pattern if we use just long or Long)", "author": "cxorm", "createdAt": "2020-09-08T02:17:37Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -46,6 +47,7 @@\n   private long quotaInBytes;\n   private long quotaInCounts;\n   private final OmOzoneAclMap aclMap;\n+  private LongAdder quotaUsageInBytes = new LongAdder();", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3MDY1MQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485570651", "bodyText": "QuotaUsageInBytes is a property of Volume that needs to be updated each time when CreateKey, AllocateBlock, CommitKey, DeleteKey. and at the beginning, we used the volume lock.\nBut, Previously, only Bucket locks were used for these operation, and use volume lock greatly affect the concurrency performance of different buckets under same volume.\nSo to avoid Volume locking for poor performance, LongAdder is used here to complete the atomic update of quotaUsageInBytes.\nI did a performance test with freon. Multi-threading wrote different buckets under the same volume, and using LongAdder had little impact on the original performance.", "author": "captainzmc", "createdAt": "2020-09-09T12:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxNDMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzMjQ0OQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484632449", "bodyText": "Suggested change", "author": "cxorm", "createdAt": "2020-09-08T03:38:11Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -222,6 +218,7 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n \n       acquireLock = omMetadataManager.getLock().acquireWriteLock(BUCKET_LOCK,\n           volumeName, bucketName);\n+", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzNTY2Ng==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484635666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long updateNum = newLocationList.size() * scmBlockSize\n          \n          \n            \n                  long preAllocatedSpace = newLocationList.size() * scmBlockSize", "author": "cxorm", "createdAt": "2020-09-08T03:52:59Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -295,14 +293,28 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheKey<>(dbOpenKeyName),\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+\n+      // Here we refer to the implementation of HDFS:\n+      // If the key size is 600MB, when createKey, keyLocationList is 3, and\n+      // the every pre-allocated block length is 256MB. If the number of factor\n+      // is 3, the total pre-allocated block size is 256MB*3*3.\n+      // We will allocate more 256MB*3* 3-600mb *3 = 504MB in advance, and we\n+      // will subtract this part when we finally commitKey.\n+      long updateNum = newLocationList.size() * scmBlockSize", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzNjE3Mw==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484636173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Here we refer to the implementation of HDFS:\n          \n          \n            \n                  // If the key size is 600MB, when createKey, keyLocationList is 3, and\n          \n          \n            \n                  // the every pre-allocated block length is 256MB. If the number of factor\n          \n          \n            \n                  // is 3, the total pre-allocated block size is 256MB*3*3.\n          \n          \n            \n                  // We will allocate more 256MB*3* 3-600mb *3 = 504MB in advance, and we\n          \n          \n            \n                  // will subtract this part when we finally commitKey.\n          \n          \n            \n                  // Here we refer to the implementation of HDFS:\n          \n          \n            \n                  // If the key size is 600MB, when createKey, keyLocationInfo in keyLocationList is 3, and\n          \n          \n            \n                  // the every pre-allocated block length is 256MB. If the number of factor\n          \n          \n            \n                  // is 3, the total pre-allocated block size is 256MB * 3 * 3.\n          \n          \n            \n                  // We will allocate more 256MB * 3 * 3 - 600MB * 3 = 504MB in advance, and we\n          \n          \n            \n                  // will subtract this part when we finally commitKey.", "author": "cxorm", "createdAt": "2020-09-08T03:55:21Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -295,14 +293,28 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheKey<>(dbOpenKeyName),\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+\n+      // Here we refer to the implementation of HDFS:\n+      // If the key size is 600MB, when createKey, keyLocationList is 3, and\n+      // the every pre-allocated block length is 256MB. If the number of factor\n+      // is 3, the total pre-allocated block size is 256MB*3*3.\n+      // We will allocate more 256MB*3* 3-600mb *3 = 504MB in advance, and we\n+      // will subtract this part when we finally commitKey.", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MTU4Mg==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485271582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long totalKeySize = 0;\n          \n          \n            \n                  long quotaReleased = 0;\n          \n      \n    \n    \n  \n\nWe could name the variable in a proper meaning IMHO,\nfeel free to rename it if you have an idea.", "author": "cxorm", "createdAt": "2020-09-09T00:44:50Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyDeleteRequest.java", "diffHunk": "@@ -143,14 +143,25 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n               keyName)),\n           new CacheValue<>(Optional.absent(), trxnLogIndex));\n \n+      long totalKeySize = 0;", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MjQ5NA==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485272494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // atom update quotaUsage.\n          \n          \n            \n                  // update quotaUsage atomically.", "author": "cxorm", "createdAt": "2020-09-09T00:48:17Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyDeleteRequest.java", "diffHunk": "@@ -143,14 +143,25 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n               keyName)),\n           new CacheValue<>(Optional.absent(), trxnLogIndex));\n \n+      long totalKeySize = 0;\n+      int keyFactor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      OmKeyLocationInfoGroup keyLocationGroup =\n+          omKeyInfo.getLatestVersionLocations();\n+      for(OmKeyLocationInfo locationInfo: keyLocationGroup.getLocationList()){\n+        totalKeySize += locationInfo.getLength() * keyFactor;\n+      }\n+      // atom update quotaUsage.", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3Mjg0Mg==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485272842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long totalKeySize = 0;\n          \n          \n            \n                  long quotaReleased = 0;", "author": "cxorm", "createdAt": "2020-09-09T00:49:45Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeysDeleteRequest.java", "diffHunk": "@@ -151,21 +154,32 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         }\n       }\n \n+      long totalKeySize = 0;", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MzgzNg==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485273836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // atom update quotaUsage.\n          \n          \n            \n                  // update quotaUsage atomically.", "author": "cxorm", "createdAt": "2020-09-09T00:53:28Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeysDeleteRequest.java", "diffHunk": "@@ -151,21 +154,32 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n         }\n       }\n \n+      long totalKeySize = 0;\n+      OmVolumeArgs omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+\n       // Mark all keys which can be deleted, in cache as deleted.\n       for (OmKeyInfo omKeyInfo : omKeyInfoList) {\n         omMetadataManager.getKeyTable().addCacheEntry(\n             new CacheKey<>(omMetadataManager.getOzoneKey(volumeName, bucketName,\n                 omKeyInfo.getKeyName())),\n             new CacheValue<>(Optional.absent(), trxnLogIndex));\n+\n+        int keyFactor = omKeyInfo.getFactor().getNumber();\n+        OmKeyLocationInfoGroup keyLocationGroup =\n+            omKeyInfo.getLatestVersionLocations();\n+        for(OmKeyLocationInfo locationInfo: keyLocationGroup.getLocationList()){\n+          totalKeySize += locationInfo.getLength() * keyFactor;\n+        }\n       }\n+      // atom update quotaUsage.", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NDQyOA==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485274428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cxorm", "createdAt": "2020-09-09T00:55:34Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/key/OMKeysDeleteResponse.java", "diffHunk": "@@ -105,5 +108,10 @@ public void addToDBBatch(OMMetadataManager omMetadataManager,\n       omMetadataManager.getDeletedTable().putWithBatch(batchOperation,\n           deleteKey, repeatedOmKeyInfo);\n     }\n+\n+    // update volume quotaUsageInBytes.\n+    omMetadataManager.getVolumeTable().putWithBatch(batchOperation,\n+        omMetadataManager.getVolumeKey(omVolumeArgs.getVolume()),\n+        omVolumeArgs);\n   }\n }", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTMzOA==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485281338", "bodyText": "I'm confused about the meaning of the variable.\n(Please let me know the meaning of the variable if I miss something.)\nCould you please add some comments about it ?", "author": "cxorm", "createdAt": "2020-09-09T01:21:11Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCommitRequest.java", "diffHunk": "@@ -182,8 +179,16 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheKey<>(dbOzoneKey),\n           new CacheValue<>(Optional.of(omKeyInfo), trxnLogIndex));\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      int factor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      long updateNum = omKeyInfo.getDataSize() * factor -\n+          locationInfoList.size() * scmBlockSize * factor;", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3Mzc2NQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485573765", "bodyText": "I will add comment to describe the calculation here.", "author": "captainzmc", "createdAt": "2020-09-09T12:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTYwMw==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485281603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long updateNum = newLocationList.size() * scmBlockSize\n          \n          \n            \n                  long preAllocatedSpace = newLocationList.size() * scmBlockSize", "author": "cxorm", "createdAt": "2020-09-09T01:22:11Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -292,14 +289,21 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           bucketName, Optional.absent(), Optional.of(missingParentInfos),\n           trxnLogIndex);\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      long updateNum = newLocationList.size() * scmBlockSize", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTg1OQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485281859", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long updateNum = newLocationList.size() * scmBlockSize\n          \n          \n            \n                  long preAllocatedSpace = newLocationList.size() * scmBlockSize", "author": "cxorm", "createdAt": "2020-09-09T01:23:11Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -210,10 +206,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheKey<>(openKeyName),\n           new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      long updateNum = newLocationList.size() * scmBlockSize", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MjEwNA==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485282104", "bodyText": "The same as OMKeyCommitRequest", "author": "cxorm", "createdAt": "2020-09-09T01:24:14Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/s3/multipart/S3MultipartUploadCommitPartRequest.java", "diffHunk": "@@ -207,13 +209,21 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheKey<>(openKey),\n           new CacheValue<>(Optional.absent(), trxnLogIndex));\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      int factor = omKeyInfo.getFactor().getNumber();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      long updateNum = omKeyInfo.getDataSize() * factor -\n+          keyArgs.getKeyLocationsList().size() * scmBlockSize * factor;", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MzAwNg==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r485283006", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // atom update quotaUsage.\n          \n          \n            \n                  // update quotaUsage atomically.", "author": "cxorm", "createdAt": "2020-09-09T01:27:30Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMAllocateBlockRequest.java", "diffHunk": "@@ -210,10 +206,17 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n           new CacheKey<>(openKeyName),\n           new CacheValue<>(Optional.of(openKeyInfo), trxnLogIndex));\n \n+      long scmBlockSize = ozoneManager.getScmBlockSize();\n+      omVolumeArgs = getVolumeInfo(omMetadataManager, volumeName);\n+      long updateNum = newLocationList.size() * scmBlockSize\n+          * openKeyInfo.getFactor().getNumber();\n+      // atom update quotaUsage.", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0ODYwOQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484848609", "bodyText": "add final", "author": "ChenSammi", "createdAt": "2020-09-08T11:35:47Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -46,6 +47,7 @@\n   private long quotaInBytes;\n   private long quotaInCounts;\n   private final OmOzoneAclMap aclMap;\n+  private LongAdder quotaUsageInBytes = new LongAdder();", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0ODk1MQ==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484848951", "bodyText": "setQuotaUsageInBytes -> increase***", "author": "ChenSammi", "createdAt": "2020-09-08T11:36:28Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -172,6 +176,14 @@ public long getQuotaInCounts() {\n   public OmOzoneAclMap getAclMap() {\n     return aclMap;\n   }\n+\n+  public LongAdder getQuotaUsageInBytes() {\n+    return quotaUsageInBytes;\n+  }\n+\n+  public void setQuotaUsageInBytes(long quotaUsageInBytes) {", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NjI2OA==", "url": "https://github.com/apache/ozone/pull/1296#discussion_r484866268", "bodyText": "Should getObjectInfo also be changed?", "author": "ChenSammi", "createdAt": "2020-09-08T12:09:46Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmVolumeArgs.java", "diffHunk": "@@ -386,7 +408,7 @@ public OmVolumeArgs copyObject() {\n     OmOzoneAclMap cloneAclMap = aclMap.copyObject();\n \n     return new OmVolumeArgs(adminName, ownerName, volume, quotaInBytes,\n-        quotaInCounts, cloneMetadata, cloneAclMap, creationTime,\n-        modificationTime, objectID, updateID);\n+        quotaInCounts, cloneMetadata, quotaUsageInBytes.sum(), cloneAclMap,\n+        creationTime, modificationTime, objectID, updateID);\n   }\n }", "originalCommit": "cc4327ad6b151ea3b86d549ccebcc7ecd50cfeff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34277903759a624d6de4d614f700573795da2426", "url": "https://github.com/apache/ozone/commit/34277903759a624d6de4d614f700573795da2426", "message": "add volume quota usage", "committedDate": "2020-09-15T08:25:17Z", "type": "commit"}, {"oid": "0117885333c1b4dad75fe8723a7cd904525b6973", "url": "https://github.com/apache/ozone/commit/0117885333c1b4dad75fe8723a7cd904525b6973", "message": "fix review issues and resolve conflict.", "committedDate": "2020-09-15T08:47:52Z", "type": "forcePushed"}, {"oid": "c272d010afa3b031682633f438bef89896fb61a7", "url": "https://github.com/apache/ozone/commit/c272d010afa3b031682633f438bef89896fb61a7", "message": "fix review issues and resolve conflict.", "committedDate": "2020-09-15T10:15:31Z", "type": "commit"}, {"oid": "c272d010afa3b031682633f438bef89896fb61a7", "url": "https://github.com/apache/ozone/commit/c272d010afa3b031682633f438bef89896fb61a7", "message": "fix review issues and resolve conflict.", "committedDate": "2020-09-15T10:15:31Z", "type": "forcePushed"}, {"oid": "bce9bf4bd3b00d0843f46c21bc96a099c585777d", "url": "https://github.com/apache/ozone/commit/bce9bf4bd3b00d0843f46c21bc96a099c585777d", "message": "fix review issues", "committedDate": "2020-09-15T11:52:31Z", "type": "commit"}, {"oid": "203804e6e8d466d06a700bc75b65a987815544cb", "url": "https://github.com/apache/ozone/commit/203804e6e8d466d06a700bc75b65a987815544cb", "message": "fix s3 MultipartUploadAbort.", "committedDate": "2020-09-16T02:22:43Z", "type": "commit"}]}