{"pr_number": 1369, "pr_title": "HDDS-4104. Provide a way to get the default value and key of java-based-configuration easily", "pr_createdAt": "2020-09-01T00:37:52Z", "pr_url": "https://github.com/apache/ozone/pull/1369", "timeline": [{"oid": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "url": "https://github.com/apache/ozone/commit/1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "message": "HDDS-4104. Provide a way to get the default value and key of java-based-configuration easily", "committedDate": "2020-09-01T00:39:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MTg3MA==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480981870", "bodyText": "Can you please also add test cases for:\n\n\"field from parent class\" (eg. ConfigurationExample.class, \"secure\"),\n\"non-existent field\" (eg. ConfigurationExample.class, \"no-such-field\"), and\n\"field without @Config annotation\" (eg. ConfigFileAppender.class, \"document\")?", "author": "adoroszlai", "createdAt": "2020-09-01T08:58:08Z", "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {", "originalCommit": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4ODg5OA==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482188898", "bodyText": "Ok, that's good cases, I have add them.", "author": "maobaolong", "createdAt": "2020-09-02T16:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDI0Ng==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480984246", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assert.assertTrue(actualKey.isPresent());\n          \n          \n            \n                Assert.assertTrue(actualDefaultValue.isPresent());", "author": "adoroszlai", "createdAt": "2020-09-01T09:02:03Z", "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {\n+\n+  @Test\n+  public void testClassWithConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.TIME, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+        ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"ozone.scm.client.wait\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());", "originalCommit": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDMyOA==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480984328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Assert.assertTrue(actualKey.isPresent());\n          \n          \n            \n                Assert.assertTrue(actualDefaultValue.isPresent());", "author": "adoroszlai", "createdAt": "2020-09-01T09:02:11Z", "path": "hadoop-hdds/config/src/test/java/org/apache/hadoop/hdds/conf/TestConfigurationReflectionUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Test the configuration reflection utility class.\n+ */\n+public class TestConfigurationReflectionUtil {\n+\n+  @Test\n+  public void testClassWithConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.TIME, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+        ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"ozone.scm.client.wait\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExample.class, \"waitTime\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"30m\", actualDefaultValue.get());\n+  }\n+\n+  @Test\n+  public void testClassWithoutConfigGroup() {\n+    Optional<ConfigType> actualType =\n+        ConfigurationReflectionUtil.getType(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualType.isPresent());\n+    Assert.assertEquals(ConfigType.AUTO, actualType.get());\n+\n+    Optional<String> actualKey =\n+        ConfigurationReflectionUtil.getKey(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualKey.isPresent());\n+    Assert.assertEquals(\"number\", actualKey.get());\n+\n+    Optional<String> actualDefaultValue =\n+        ConfigurationReflectionUtil.getDefaultValue(\n+            ConfigurationExampleGrandParent.class, \"number\");\n+    Assert.assertTrue(actualKey.isPresent());", "originalCommit": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4OTExNQ==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r480989115", "bodyText": "findFieldConfigAnnotationByName could return Optional<Config> instead of Config or null:\n        .findFirst()\n        .map(field -> field.getAnnotation(Config.class));\nThis would let the other new methods (getType, etc.) to be simplified to:\n    return findFieldConfigAnnotationByName(configClass, fieldName)\n        .map(Config::type);", "author": "adoroszlai", "createdAt": "2020-09-01T09:10:27Z", "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,52 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      return Optional.of(annotation.defaultValue());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    Config annotation = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (annotation != null) {\n+      String key = annotation.key();\n+      if (configGroup != null) {\n+        key = configGroup.prefix() + \".\" + annotation.key();\n+      }\n+      return Optional.of(key);\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    Config config = findFieldConfigAnnotationByName(configClass,\n+        fieldName);\n+    if (config != null) {\n+      return Optional.of(config.type());\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static Config findFieldConfigAnnotationByName(Class<?> configClass,\n+      String fieldName) {\n+    Optional<Field> field = Stream.of(configClass.getDeclaredFields())\n+        .filter(f -> f.getName().equals(fieldName))\n+        .findFirst();\n+    if (field.isPresent()) {\n+      return field.get().getAnnotation(Config.class);\n+    }\n+    return null;", "originalCommit": "1fc00a3e630c2c2d160fa6459f55f19e85fa327c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5OTM2OA==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482199368", "bodyText": "It looks more clear than before, thanks, done.", "author": "maobaolong", "createdAt": "2020-09-02T16:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4OTExNQ=="}], "type": "inlineReview"}, {"oid": "747c92510b5052dfdec0559c5977d785d6eb6dc1", "url": "https://github.com/apache/ozone/commit/747c92510b5052dfdec0559c5977d785d6eb6dc1", "message": "Apply suggestions from code review\n\nCo-authored-by: Doroszlai, Attila <6454655+adoroszlai@users.noreply.github.com>", "committedDate": "2020-09-02T07:42:04Z", "type": "commit"}, {"oid": "ee96c86333c7f0795c83d9366011ff57930c96ca", "url": "https://github.com/apache/ozone/commit/ee96c86333c7f0795c83d9366011ff57930c96ca", "message": "add tests.", "committedDate": "2020-09-02T16:05:45Z", "type": "forcePushed"}, {"oid": "ac87b28abb9f093d09e2808c14446790c6cd8251", "url": "https://github.com/apache/ozone/commit/ac87b28abb9f093d09e2808c14446790c6cd8251", "message": "add tests.", "committedDate": "2020-09-02T16:12:53Z", "type": "forcePushed"}, {"oid": "957cb5f48564ee512d91f32724bfed6db91221d1", "url": "https://github.com/apache/ozone/commit/957cb5f48564ee512d91f32724bfed6db91221d1", "message": "add tests.", "committedDate": "2020-09-02T16:23:40Z", "type": "forcePushed"}, {"oid": "957cb5f48564ee512d91f32724bfed6db91221d1", "url": "https://github.com/apache/ozone/commit/957cb5f48564ee512d91f32724bfed6db91221d1", "message": "add tests.", "committedDate": "2020-09-02T16:23:40Z", "type": "commit"}, {"oid": "67c37ebfaf77aef946752b517086d1451ab7c8cd", "url": "https://github.com/apache/ozone/commit/67c37ebfaf77aef946752b517086d1451ab7c8cd", "message": "Fix style", "committedDate": "2020-09-02T16:34:52Z", "type": "commit"}, {"oid": "e409d54ec852aea4399a12626f0c99fbc3a5e36f", "url": "https://github.com/apache/ozone/commit/e409d54ec852aea4399a12626f0c99fbc3a5e36f", "message": "revert ozone-site.xml and rename testcase.", "committedDate": "2020-09-02T23:34:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMDIzMw==", "url": "https://github.com/apache/ozone/pull/1369#discussion_r482920233", "bodyText": "The following change makes this method safe to invoke with Object.class directly (current code produces NPE).  It may be unlikely that someone does this, so I think it's OK to commit as is.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!theClass.getSuperclass().equals(Object.class)) {\n          \n          \n            \n                    theClass = theClass.getSuperclass();\n          \n          \n            \n                  } else {\n          \n          \n            \n                    theClass = null;\n          \n          \n            \n                  }\n          \n          \n            \n                  theClass = theClass.getSuperclass();\n          \n          \n            \n                  if (Object.class.equals(theClass)) {\n          \n          \n            \n                    theClass = null;\n          \n          \n            \n                  }", "author": "adoroszlai", "createdAt": "2020-09-03T11:54:24Z", "path": "hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java", "diffHunk": "@@ -240,4 +242,49 @@ private static ConfigType detectConfigType(Class<?> parameterType,\n       }\n     }\n   }\n+\n+  public static Optional<String> getDefaultValue(Class<?> configClass,\n+      String fieldName) {\n+    return findFieldConfigAnnotationByName(configClass, fieldName)\n+        .map(Config::defaultValue);\n+  }\n+\n+  public static Optional<String> getKey(Class<?> configClass,\n+      String fieldName) {\n+    ConfigGroup configGroup =\n+        configClass.getAnnotation(ConfigGroup.class);\n+\n+    return findFieldConfigAnnotationByName(configClass,\n+        fieldName).map(\n+            config -> configGroup == null ? config.key()\n+                : configGroup.prefix() + \".\" + config.key());\n+  }\n+\n+  public static Optional<ConfigType> getType(Class<?> configClass,\n+      String fieldName) {\n+    return findFieldConfigAnnotationByName(configClass, fieldName)\n+        .map(Config::type);\n+  }\n+\n+  private static Optional<Config> findFieldConfigAnnotationByName(\n+      final Class<?> configClass, String fieldName) {\n+    Class<?> theClass = configClass;\n+    while (theClass != null) {\n+      Optional<Config> config = Stream.of(theClass.getDeclaredFields())\n+          .filter(f -> f.getName().equals(fieldName))\n+          .findFirst()\n+          .map(f -> f.getAnnotation(Config.class));\n+\n+      if (config.isPresent()) {\n+        return config;\n+      }\n+\n+      if (!theClass.getSuperclass().equals(Object.class)) {\n+        theClass = theClass.getSuperclass();\n+      } else {\n+        theClass = null;\n+      }", "originalCommit": "e409d54ec852aea4399a12626f0c99fbc3a5e36f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a497618d21b7bd95540be4c644d91c327cc82d85", "url": "https://github.com/apache/ozone/commit/a497618d21b7bd95540be4c644d91c327cc82d85", "message": "Update hadoop-hdds/config/src/main/java/org/apache/hadoop/hdds/conf/ConfigurationReflectionUtil.java\n\nCo-authored-by: Doroszlai, Attila <6454655+adoroszlai@users.noreply.github.com>", "committedDate": "2020-09-03T15:59:16Z", "type": "commit"}, {"oid": "dc210f5e72efaf5e533d8992b5397901de24af46", "url": "https://github.com/apache/ozone/commit/dc210f5e72efaf5e533d8992b5397901de24af46", "message": "trigger new CI check", "committedDate": "2020-09-03T20:08:36Z", "type": "commit"}]}