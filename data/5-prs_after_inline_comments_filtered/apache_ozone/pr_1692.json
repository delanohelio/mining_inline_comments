{"pr_number": 1692, "pr_title": "HDDS-4564. Prepare client should check every OM individually for the prepared check based on Txn ID.", "pr_createdAt": "2020-12-11T19:14:02Z", "pr_url": "https://github.com/apache/ozone/pull/1692", "timeline": [{"oid": "ec37c41e695a3277dd30049068858e488c1851ff", "url": "https://github.com/apache/ozone/commit/ec37c41e695a3277dd30049068858e488c1851ff", "message": "HDDS-4564. Prepare client should check every OM individually for the prepared check based on Txn Id.", "committedDate": "2020-12-10T23:05:23Z", "type": "commit"}, {"oid": "cff7e6030989383bcd05c2c25234b5c426c9a6c6", "url": "https://github.com/apache/ozone/commit/cff7e6030989383bcd05c2c25234b5c426c9a6c6", "message": "Checkstyle fix.", "committedDate": "2020-12-10T23:38:29Z", "type": "commit"}, {"oid": "08e5e56e11d256d46adf84f6ce9d6b39f8a62c19", "url": "https://github.com/apache/ozone/commit/08e5e56e11d256d46adf84f6ce9d6b39f8a62c19", "message": "Proto reefactor. Add acceptance test.", "committedDate": "2020-12-11T19:06:11Z", "type": "commit"}, {"oid": "046b9cd5a8f44b4f8d3ad926f348bb17b3fe26af", "url": "https://github.com/apache/ozone/commit/046b9cd5a8f44b4f8d3ad926f348bb17b3fe26af", "message": "Move helper method to common util class.", "committedDate": "2020-12-11T20:17:26Z", "type": "commit"}, {"oid": "331c4af46093ba3ca4d640846d285474ce0746ba", "url": "https://github.com/apache/ozone/commit/331c4af46093ba3ca4d640846d285474ce0746ba", "message": "Prepare command should not exit when an OM is unresponsive.", "committedDate": "2020-12-11T21:44:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTAyMw==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541831023", "bodyText": "Please also document this javadoc for this method.", "author": "linyiqun", "createdAt": "2020-12-13T03:09:38Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocol/OzoneManagerProtocol.java", "diffHunk": "@@ -602,4 +604,12 @@ default long prepareOzoneManager(\n       throws IOException {\n     return -1;\n   }\n+\n+  default PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "originalCommit": "331c4af46093ba3ca4d640846d285474ce0746ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzAxNA==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542133014", "bodyText": "Fixed.", "author": "avijayanhwx", "createdAt": "2020-12-14T06:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTA3Nw==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541831077", "bodyText": "Can you add the @OverRide here that will let us know this is a protocol method?", "author": "linyiqun", "createdAt": "2020-12-13T03:09:50Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/protocolPB/OzoneManagerProtocolClientSideTranslatorPB.java", "diffHunk": "@@ -1574,6 +1574,17 @@ public long prepareOzoneManager(\n     return prepareResponse.getTxnID();\n   }\n \n+  public PrepareStatusResponse getOzoneManagerPrepareStatus(long txnId)", "originalCommit": "331c4af46093ba3ca4d640846d285474ce0746ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzA4MA==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542133080", "bodyText": "Fixed.", "author": "avijayanhwx", "createdAt": "2020-12-14T06:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMTA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r541832038", "bodyText": "As this is the command for admin users, can we print out this message instead of throwing an exception? That will be more friendly to users.", "author": "linyiqun", "createdAt": "2020-12-13T03:16:30Z", "path": "hadoop-ozone/tools/src/main/java/org/apache/hadoop/ozone/admin/om/PrepareSubCommand.java", "diffHunk": "@@ -67,13 +78,85 @@\n   )\n   private long txnApplyCheckIntervalSeconds;\n \n+  @CommandLine.Option(\n+      names = {\"-pct\", \"--prepare-check-interval\"},\n+      description = \"Time in SECONDS to wait between successive checks for OM\" +\n+          \" preparation.\",\n+      defaultValue = \"10\",\n+      hidden = true\n+  )\n+  private long prepareCheckInterval;\n+\n+  @CommandLine.Option(\n+      names = {\"-pt\", \"--prepare-timeout\"},\n+      description = \"Max time in SECONDS to wait for all OMs to be prepared\",\n+      defaultValue = \"300\",\n+      hidden = true\n+  )\n+  private long prepareTimeOut;\n+\n   @Override\n   public Void call() throws Exception {\n     OzoneManagerProtocol client = parent.createOmClient(omServiceId);\n     long prepareTxnId = client.prepareOzoneManager(txnApplyWaitTimeSeconds,\n         txnApplyCheckIntervalSeconds);\n     System.out.println(\"Ozone Manager Prepare Request successfully returned \" +\n-        \"with Txn Id \" + prepareTxnId);\n+        \"with Transaction Id : [\" + prepareTxnId + \"].\");\n+\n+    Map<String, Boolean> omPreparedStatusMap = new HashMap<>();\n+    Set<String> omHosts = getOmHostsFromConfig(\n+        parent.getParent().getOzoneConf(), omServiceId);\n+    omHosts.forEach(h -> omPreparedStatusMap.put(h, false));\n+    Duration pTimeout = Duration.of(prepareTimeOut, ChronoUnit.SECONDS);\n+    Duration pInterval = Duration.of(prepareCheckInterval, ChronoUnit.SECONDS);\n+\n+    System.out.println();\n+    System.out.println(\"Checking individual OM instances for prepare request \" +\n+        \"completion...\");\n+    long endTime = System.currentTimeMillis() + pTimeout.toMillis();\n+    int expectedNumPreparedOms = omPreparedStatusMap.size();\n+    int currentNumPreparedOms = 0;\n+    while (System.currentTimeMillis() < endTime &&\n+        currentNumPreparedOms < expectedNumPreparedOms) {\n+      for (Map.Entry<String, Boolean> e : omPreparedStatusMap.entrySet()) {\n+        if (!e.getValue()) {\n+          String omHost = e.getKey();\n+          try (OzoneManagerProtocol singleOmClient =\n+                    parent.createOmClient(omServiceId, omHost, false)) {\n+            PrepareStatusResponse response =\n+                singleOmClient.getOzoneManagerPrepareStatus(prepareTxnId);\n+            PrepareStatus status = response.getStatus();\n+            System.out.println(\"OM : [\" + omHost + \"], Prepare \" +\n+                \"Status : [\" + status.name() + \"], Current Transaction Id : [\" +\n+                response.getCurrentTxnIndex() + \"]\");\n+            if (status.equals(PREPARE_COMPLETED)) {\n+              e.setValue(true);\n+              currentNumPreparedOms++;\n+            }\n+          } catch (IOException ioEx) {\n+            System.out.println(\"Exception while checking preparation \" +\n+                \"completeness for [\" + omHost +\n+                \"], Error : [\" + ioEx.getMessage() + \"]\");\n+          }\n+        }\n+      }\n+      if (currentNumPreparedOms < expectedNumPreparedOms) {\n+        System.out.println(\"Waiting for \" + prepareCheckInterval +\n+            \" seconds before retrying...\");\n+        Thread.sleep(pInterval.toMillis());\n+      }\n+    }\n+    if (currentNumPreparedOms < expectedNumPreparedOms) {\n+      throw new Exception(\"OM Preparation failed since all OMs are not \" +\n+          \"prepared yet.\");", "originalCommit": "331c4af46093ba3ca4d640846d285474ce0746ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzU5NA==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542133594", "bodyText": "Thanks for the review @linyiqun. I believe throwing an exception is better since the return code for the command will be non-zero. This will help in higher level applications automating this call figure out the result of the command decisively.\n\nException while checking preparation completeness for [om2], Error : [Invalid host name: local host is: (unknown); >destination host is: \"om2\":9862; java.net.UnknownHostException; For more details see:  >http://wiki.apache.org/hadoop/UnknownHost]\nWaiting for 10 seconds before retrying...\nOM Preparation failed since all OMs are not prepared yet.\nbash-4.2$ echo $?\n255", "author": "avijayanhwx", "createdAt": "2020-12-14T06:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MDQ3OQ==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542240479", "bodyText": "Okay, make sense.", "author": "linyiqun", "createdAt": "2020-12-14T09:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgzMjAzOA=="}], "type": "inlineReview"}, {"oid": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4", "url": "https://github.com/apache/ozone/commit/4e4b3a24fde634a8175bc0bbcceb682a25423ff4", "message": "Add Javadoc", "committedDate": "2020-12-14T06:04:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDIyMA==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542510220", "bodyText": "I think that should be != in the log message. Also can we add some more context to this message, like \"Received prepare status request while last txn index <index> != last snapshot index <snapshot index>\".", "author": "errose28", "createdAt": "2020-12-14T16:13:30Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);", "originalCommit": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NTQ0MQ==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542565441", "bodyText": "Yes, I can add that log line.", "author": "avijayanhwx", "createdAt": "2020-12-14T17:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNDk2OQ==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542514969", "bodyText": "Just for clarification as I am working on HDDS-4569, is this the expected interpretations of status?\nflag on && (txn index == snapshot index) -> PREPARE_COMPLETED\nflag on && (txn index != snapshot index) -> PREPARE_IN_PROGRESS\nflag off  -> PREPARE_NOT_STARTED", "author": "errose28", "createdAt": "2020-12-14T16:19:41Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/protocolPB/OzoneManagerRequestHandler.java", "diffHunk": "@@ -623,6 +633,24 @@ private FinalizeUpgradeProgressResponse reportUpgradeProgress(\n         .build();\n   }\n \n+  private PrepareStatusResponse getPrepareStatus(PrepareStatusRequest request)\n+      throws IOException {\n+    // TODO After HDDS-4569,\n+    // When there is a global \"prepared\" state in OM, we can return\n+    // PREPARE_NOT_STARTED instead of PREPARE_IN_PROGRESS appropriately.\n+    PrepareStatus prepareStatus = null;\n+    long txnID = request.getTxnID();\n+    long ratisSnapshotIndex = impl.getRatisSnapshotIndex();\n+    if (ratisSnapshotIndex != txnID) {\n+      LOG.info(\"Last Txn Index = {}\", ratisSnapshotIndex);\n+      prepareStatus =  PREPARE_IN_PROGRESS;", "originalCommit": "4e4b3a24fde634a8175bc0bbcceb682a25423ff4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTI4Mw==", "url": "https://github.com/apache/ozone/pull/1692#discussion_r542569283", "bodyText": "As mentioned in an earlier comment, this can undergo some minor changes after HDDS-4569. Currently, in my mind, an OM in prepared flag disabled state (state maintained in global OM level) does not know about a OmPrepareRequest (think slow follower). When the flag has been enabled but still is waiting for the flush, then it is likely in PREPARE_IN_PROGRESS mode. When the flag is enabled, and the flush is done (OMPR apply txn is fully complete), then we are expected to be PREPARE_COMPLETED state. Of course there are some edge cases that can be caused by subsequent OMPrepareRequests coming in the pipeline, but I don't expect them to be a big problem to the fundamental problem the prepare operation is trying to solve.", "author": "avijayanhwx", "createdAt": "2020-12-14T17:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNDk2OQ=="}], "type": "inlineReview"}, {"oid": "7465dbc38d96084be5e917e7bdee341c3a0118b6", "url": "https://github.com/apache/ozone/commit/7465dbc38d96084be5e917e7bdee341c3a0118b6", "message": "Add more log lines to debug integration test failure.", "committedDate": "2020-12-14T19:28:57Z", "type": "commit"}, {"oid": "76de713c8ad7e84a42dca51efeb5a23ed8039d8f", "url": "https://github.com/apache/ozone/commit/76de713c8ad7e84a42dca51efeb5a23ed8039d8f", "message": "Remove log index = snapshot index condition.", "committedDate": "2020-12-14T21:50:29Z", "type": "commit"}, {"oid": "77677c75d2a6b16fa9b15acabd3724ac5cefeccd", "url": "https://github.com/apache/ozone/commit/77677c75d2a6b16fa9b15acabd3724ac5cefeccd", "message": "Fix checkstyle.", "committedDate": "2020-12-15T21:24:08Z", "type": "commit"}]}