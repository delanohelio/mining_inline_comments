{"pr_number": 1049, "pr_title": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "pr_createdAt": "2020-06-10T11:03:04Z", "pr_url": "https://github.com/apache/ozone/pull/1049", "timeline": [{"oid": "c315b7470a45665090dd6ddcea56752f7fb00570", "url": "https://github.com/apache/ozone/commit/c315b7470a45665090dd6ddcea56752f7fb00570", "message": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "committedDate": "2020-06-10T11:30:40Z", "type": "forcePushed"}, {"oid": "0348af883a6331e8f5d36705990d7dd326901f3e", "url": "https://github.com/apache/ozone/commit/0348af883a6331e8f5d36705990d7dd326901f3e", "message": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "committedDate": "2020-06-10T11:58:41Z", "type": "forcePushed"}, {"oid": "315f3cc7fa447125c8a47e85d22d6c44d7bfda26", "url": "https://github.com/apache/ozone/commit/315f3cc7fa447125c8a47e85d22d6c44d7bfda26", "message": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "committedDate": "2020-06-11T09:25:26Z", "type": "forcePushed"}, {"oid": "5b5194c8826267eedc2c8c63bc0ca7956aec958f", "url": "https://github.com/apache/ozone/commit/5b5194c8826267eedc2c8c63bc0ca7956aec958f", "message": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "committedDate": "2020-06-11T10:59:24Z", "type": "forcePushed"}, {"oid": "94027105f4d5781045a892306363313fa1422c41", "url": "https://github.com/apache/ozone/commit/94027105f4d5781045a892306363313fa1422c41", "message": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "committedDate": "2020-06-11T12:27:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMDI2MA==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439130260", "bodyText": "onTimeout is  not necessary here as this is just a state update now.", "author": "xiaoyuyao", "createdAt": "2020-06-11T23:49:45Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -310,102 +315,69 @@ public void openPipeline(PipelineID pipelineId) throws IOException {\n   }\n \n   /**\n-   * Finalizes pipeline in the SCM. Removes pipeline and makes rpc call to\n-   * destroy pipeline on the datanodes immediately or after timeout based on the\n-   * value of onTimeout parameter.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n-   * @param onTimeout       - if true pipeline is removed and destroyed on\n-   *                        datanodes after timeout\n-   * @throws IOException\n-   */\n-  @Override\n-  public void finalizeAndDestroyPipeline(Pipeline pipeline, boolean onTimeout)\n-      throws IOException {\n-    LOG.info(\"Destroying pipeline:{}\", pipeline);\n-    finalizePipeline(pipeline.getId());\n-    if (onTimeout) {\n-      long pipelineDestroyTimeoutInMillis =\n-          conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT,\n-              ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT_DEFAULT,\n-              TimeUnit.MILLISECONDS);\n-      scheduler.schedule(() -> destroyPipeline(pipeline),\n-          pipelineDestroyTimeoutInMillis, TimeUnit.MILLISECONDS, LOG,\n-          String.format(\"Destroy pipeline failed for pipeline:%s\", pipeline));\n-    } else {\n-      destroyPipeline(pipeline);\n-    }\n-  }\n-\n-  /**\n-   * Moves the pipeline to CLOSED state and sends close container command for\n-   * all the containers in the pipeline.\n+   * Removes the pipeline from the db and pipeline state map.\n    *\n-   * @param pipelineId - ID of the pipeline to be moved to CLOSED state.\n+   * @param pipeline - pipeline to be removed\n    * @throws IOException\n    */\n-  private void finalizePipeline(PipelineID pipelineId) throws IOException {\n+  protected void removePipeline(Pipeline pipeline) throws IOException {\n+    pipelineFactory.close(pipeline.getType(), pipeline);\n+    PipelineID pipelineID = pipeline.getId();\n+    closeContainersForPipeline(pipelineID);\n     lock.writeLock().lock();\n     try {\n-      Pipeline pipeline = stateManager.getPipeline(pipelineId);\n-      if (!pipeline.isClosed()) {\n-        stateManager.updatePipelineState(pipelineId.getProtobuf(),\n-            HddsProtos.PipelineState.PIPELINE_CLOSED);\n-        LOG.info(\"Pipeline {} moved to CLOSED state\", pipeline);\n-      }\n-\n-      // TODO fire events to datanodes for closing pipelines\n-//      Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n-//      for (ContainerID containerID : containerIDs) {\n-//        eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n-//      }\n-      metrics.removePipelineMetrics(pipelineId);\n+      stateManager.removePipeline(pipelineID.getProtobuf());\n+      metrics.incNumPipelineDestroyed();\n+    } catch (IOException ex) {\n+      metrics.incNumPipelineDestroyFailed();\n+      throw ex;\n     } finally {\n       lock.writeLock().unlock();\n     }\n   }\n \n   /**\n-   * Removes pipeline from SCM. Sends ratis command to destroy pipeline on all\n-   * the datanodes for ratis pipelines.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n+   * Fire events to close all containers related to the input pipeline.\n+   * @param pipelineId - ID of the pipeline.\n    * @throws IOException\n    */\n-  protected void destroyPipeline(Pipeline pipeline) throws IOException {\n-    pipelineFactory.close(pipeline.getType(), pipeline);\n-    // remove the pipeline from the pipeline manager\n-    removePipeline(pipeline.getId());\n-    triggerPipelineCreation();\n+  protected void closeContainersForPipeline(final PipelineID pipelineId)\n+      throws IOException {\n+    Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n+    for (ContainerID containerID : containerIDs) {\n+      eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n+    }\n   }\n \n   /**\n-   * Removes the pipeline from the db and pipeline state map.\n-   *\n-   * @param pipelineId - ID of the pipeline to be removed\n+   * put pipeline in CLOSED state.\n+   * @param pipeline - ID of the pipeline.\n+   * @param onTimeout - whether to remove pipeline after some time.\n    * @throws IOException\n    */\n-  protected void removePipeline(PipelineID pipelineId) throws IOException {\n+  @Override\n+  public void closePipeline(Pipeline pipeline, boolean onTimeout)", "originalCommit": "94027105f4d5781045a892306363313fa1422c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4OTkyMw==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439189923", "bodyText": "If onTimeout is false, closePipeline will remove pipeline on spot. RemovePipeline is going to close containers and remove pipeline from db as well", "author": "timmylicheng", "createdAt": "2020-06-12T03:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMDI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjMwMw==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439132303", "bodyText": "pipeline in allocated state should not have container associate with it. So I think closeContainersForPipeline is only needed for scrubClosedPipeline.", "author": "xiaoyuyao", "createdAt": "2020-06-11T23:57:23Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -420,10 +392,50 @@ public void scrubPipeline(ReplicationType type, ReplicationFactor factor)\n           \" since it stays at ALLOCATED stage for \" +\n           Duration.between(currentTime, p.getCreationTimestamp()).toMinutes() +\n           \" mins.\");\n-      finalizeAndDestroyPipeline(p, false);\n+      closePipeline(p, false);\n+      closeContainersForPipeline(p.getId());", "originalCommit": "94027105f4d5781045a892306363313fa1422c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4OTk4OQ==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439189989", "bodyText": "Ok good catch", "author": "timmylicheng", "createdAt": "2020-06-12T03:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjU5Mw==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439132593", "bodyText": "is it possible to dudup the code between scrub closed and allocated pipeline?", "author": "xiaoyuyao", "createdAt": "2020-06-11T23:58:27Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -310,102 +315,69 @@ public void openPipeline(PipelineID pipelineId) throws IOException {\n   }\n \n   /**\n-   * Finalizes pipeline in the SCM. Removes pipeline and makes rpc call to\n-   * destroy pipeline on the datanodes immediately or after timeout based on the\n-   * value of onTimeout parameter.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n-   * @param onTimeout       - if true pipeline is removed and destroyed on\n-   *                        datanodes after timeout\n-   * @throws IOException\n-   */\n-  @Override\n-  public void finalizeAndDestroyPipeline(Pipeline pipeline, boolean onTimeout)\n-      throws IOException {\n-    LOG.info(\"Destroying pipeline:{}\", pipeline);\n-    finalizePipeline(pipeline.getId());\n-    if (onTimeout) {\n-      long pipelineDestroyTimeoutInMillis =\n-          conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT,\n-              ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT_DEFAULT,\n-              TimeUnit.MILLISECONDS);\n-      scheduler.schedule(() -> destroyPipeline(pipeline),\n-          pipelineDestroyTimeoutInMillis, TimeUnit.MILLISECONDS, LOG,\n-          String.format(\"Destroy pipeline failed for pipeline:%s\", pipeline));\n-    } else {\n-      destroyPipeline(pipeline);\n-    }\n-  }\n-\n-  /**\n-   * Moves the pipeline to CLOSED state and sends close container command for\n-   * all the containers in the pipeline.\n+   * Removes the pipeline from the db and pipeline state map.\n    *\n-   * @param pipelineId - ID of the pipeline to be moved to CLOSED state.\n+   * @param pipeline - pipeline to be removed\n    * @throws IOException\n    */\n-  private void finalizePipeline(PipelineID pipelineId) throws IOException {\n+  protected void removePipeline(Pipeline pipeline) throws IOException {\n+    pipelineFactory.close(pipeline.getType(), pipeline);\n+    PipelineID pipelineID = pipeline.getId();\n+    closeContainersForPipeline(pipelineID);\n     lock.writeLock().lock();\n     try {\n-      Pipeline pipeline = stateManager.getPipeline(pipelineId);\n-      if (!pipeline.isClosed()) {\n-        stateManager.updatePipelineState(pipelineId.getProtobuf(),\n-            HddsProtos.PipelineState.PIPELINE_CLOSED);\n-        LOG.info(\"Pipeline {} moved to CLOSED state\", pipeline);\n-      }\n-\n-      // TODO fire events to datanodes for closing pipelines\n-//      Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n-//      for (ContainerID containerID : containerIDs) {\n-//        eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n-//      }\n-      metrics.removePipelineMetrics(pipelineId);\n+      stateManager.removePipeline(pipelineID.getProtobuf());\n+      metrics.incNumPipelineDestroyed();\n+    } catch (IOException ex) {\n+      metrics.incNumPipelineDestroyFailed();\n+      throw ex;\n     } finally {\n       lock.writeLock().unlock();\n     }\n   }\n \n   /**\n-   * Removes pipeline from SCM. Sends ratis command to destroy pipeline on all\n-   * the datanodes for ratis pipelines.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n+   * Fire events to close all containers related to the input pipeline.\n+   * @param pipelineId - ID of the pipeline.\n    * @throws IOException\n    */\n-  protected void destroyPipeline(Pipeline pipeline) throws IOException {\n-    pipelineFactory.close(pipeline.getType(), pipeline);\n-    // remove the pipeline from the pipeline manager\n-    removePipeline(pipeline.getId());\n-    triggerPipelineCreation();\n+  protected void closeContainersForPipeline(final PipelineID pipelineId)\n+      throws IOException {\n+    Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n+    for (ContainerID containerID : containerIDs) {\n+      eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n+    }\n   }\n \n   /**\n-   * Removes the pipeline from the db and pipeline state map.\n-   *\n-   * @param pipelineId - ID of the pipeline to be removed\n+   * put pipeline in CLOSED state.\n+   * @param pipeline - ID of the pipeline.\n+   * @param onTimeout - whether to remove pipeline after some time.\n    * @throws IOException\n    */\n-  protected void removePipeline(PipelineID pipelineId) throws IOException {\n+  @Override\n+  public void closePipeline(Pipeline pipeline, boolean onTimeout)\n+      throws IOException {\n+    PipelineID pipelineID = pipeline.getId();\n     lock.writeLock().lock();\n     try {\n-      stateManager.removePipeline(pipelineId.getProtobuf());\n-      metrics.incNumPipelineDestroyed();\n-    } catch (IOException ex) {\n-      metrics.incNumPipelineDestroyFailed();\n-      throw ex;\n+      if (!pipeline.isClosed()) {\n+        stateManager.updatePipelineState(pipelineID.getProtobuf(),\n+            HddsProtos.PipelineState.PIPELINE_CLOSED);\n+        LOG.info(\"Pipeline {} moved to CLOSED state\", pipeline);\n+      }\n+      metrics.removePipelineMetrics(pipelineID);\n     } finally {\n       lock.writeLock().unlock();\n     }\n+    if (!onTimeout) {\n+      removePipeline(pipeline);\n+    }\n   }\n \n-  @Override\n-  public void scrubPipeline(ReplicationType type, ReplicationFactor factor)\n-      throws IOException{\n-    if (type != ReplicationType.RATIS || factor != ReplicationFactor.THREE) {\n-      // Only srub pipeline for RATIS THREE pipeline\n-      return;\n-    }\n-    Instant currentTime = Instant.now();\n+  private void scrubAllocatedPipeline(", "originalCommit": "94027105f4d5781045a892306363313fa1422c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzODczMg==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439238732", "bodyText": "I move them into one function", "author": "timmylicheng", "createdAt": "2020-06-12T06:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjc0Ng==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439132746", "bodyText": "Should we avoid the stream api for better performance ?", "author": "xiaoyuyao", "createdAt": "2020-06-11T23:59:01Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -420,10 +392,50 @@ public void scrubPipeline(ReplicationType type, ReplicationFactor factor)\n           \" since it stays at ALLOCATED stage for \" +\n           Duration.between(currentTime, p.getCreationTimestamp()).toMinutes() +\n           \" mins.\");\n-      finalizeAndDestroyPipeline(p, false);\n+      closePipeline(p, false);\n+      closeContainersForPipeline(p.getId());\n     }\n   }\n \n+  private void scrubClosedPipeline(\n+      ReplicationType type, ReplicationFactor factor, Instant currentTime)\n+      throws IOException {\n+    long pipelineDestroyTimeoutInMillis =\n+        conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT,\n+            ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT_DEFAULT,\n+            TimeUnit.MILLISECONDS);\n+    List<Pipeline> closedPipelines = stateManager.getPipelines(type, factor,\n+        Pipeline.PipelineState.CLOSED).stream()", "originalCommit": "94027105f4d5781045a892306363313fa1422c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzODYzNA==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r439238634", "bodyText": "I updated with for loop", "author": "timmylicheng", "createdAt": "2020-06-12T06:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjc0Ng=="}], "type": "inlineReview"}, {"oid": "0bd964bf09b8bf5bb4485f9164ccf6027ce437a7", "url": "https://github.com/apache/ozone/commit/0bd964bf09b8bf5bb4485f9164ccf6027ce437a7", "message": "Update scrubPipeline.", "committedDate": "2020-06-12T06:51:25Z", "type": "forcePushed"}, {"oid": "8afdf270d2a9f06c6e7e4793fc7c0786d526a736", "url": "https://github.com/apache/ozone/commit/8afdf270d2a9f06c6e7e4793fc7c0786d526a736", "message": "Update scrubPipeline.", "committedDate": "2020-06-12T07:59:09Z", "type": "forcePushed"}, {"oid": "23297f0be1cb3bacd15572f1510648048865f747", "url": "https://github.com/apache/ozone/commit/23297f0be1cb3bacd15572f1510648048865f747", "message": "Update scrubPipeline.", "committedDate": "2020-06-12T08:27:46Z", "type": "forcePushed"}, {"oid": "ab4fb499e898a91c6d4474b6888220982ab0cd40", "url": "https://github.com/apache/ozone/commit/ab4fb499e898a91c6d4474b6888220982ab0cd40", "message": "Update scrubPipeline.", "committedDate": "2020-06-16T08:36:45Z", "type": "forcePushed"}, {"oid": "a872a58f000058acc2867e4616e7392c931df962", "url": "https://github.com/apache/ozone/commit/a872a58f000058acc2867e4616e7392c931df962", "message": "Update scrubPipeline.", "committedDate": "2020-06-16T09:08:48Z", "type": "forcePushed"}, {"oid": "97657491abb66878ab11d6f25d568b6d79226d01", "url": "https://github.com/apache/ozone/commit/97657491abb66878ab11d6f25d568b6d79226d01", "message": "Update scrubPipeline.", "committedDate": "2020-06-17T07:42:03Z", "type": "forcePushed"}, {"oid": "629ad3c20d3562b72fa6fcb5fdd54df34f2fb32b", "url": "https://github.com/apache/ozone/commit/629ad3c20d3562b72fa6fcb5fdd54df34f2fb32b", "message": "Update scrubPipeline.", "committedDate": "2020-06-18T02:45:59Z", "type": "forcePushed"}, {"oid": "1c0e37de88275935a4d98246ad46344b072edf99", "url": "https://github.com/apache/ozone/commit/1c0e37de88275935a4d98246ad46344b072edf99", "message": "Update scrubPipeline.", "committedDate": "2020-06-18T09:14:29Z", "type": "forcePushed"}, {"oid": "f1b59c0177ff340e4a35d3c8eb6d1a7280aec861", "url": "https://github.com/apache/ozone/commit/f1b59c0177ff340e4a35d3c8eb6d1a7280aec861", "message": "Update scrubPipeline.", "committedDate": "2020-06-19T08:42:06Z", "type": "forcePushed"}, {"oid": "87c6bd7009540b4d5dcb554be5d9f5402491701a", "url": "https://github.com/apache/ozone/commit/87c6bd7009540b4d5dcb554be5d9f5402491701a", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-06-19T10:53:36Z", "type": "forcePushed"}, {"oid": "ad436974dc96e44c55904b45ce8518090dbde8a0", "url": "https://github.com/apache/ozone/commit/ad436974dc96e44c55904b45ce8518090dbde8a0", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-06-19T11:27:58Z", "type": "forcePushed"}, {"oid": "947557da97857357f146fdaa7e219e6e7d97c98e", "url": "https://github.com/apache/ozone/commit/947557da97857357f146fdaa7e219e6e7d97c98e", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-06-22T02:13:51Z", "type": "forcePushed"}, {"oid": "64bab17faae576a7aaebc9c4aea71e3b557b5f9e", "url": "https://github.com/apache/ozone/commit/64bab17faae576a7aaebc9c4aea71e3b557b5f9e", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-06-22T02:40:10Z", "type": "forcePushed"}, {"oid": "b3b95aff74e60b5627e38f398424c86d440967ec", "url": "https://github.com/apache/ozone/commit/b3b95aff74e60b5627e38f398424c86d440967ec", "message": "HDDS-3662 Decouple finalizeAndDestroyPipeline.", "committedDate": "2020-06-30T10:59:38Z", "type": "commit"}, {"oid": "bfd1168646aa9079095a3f7b9cc7296210107a02", "url": "https://github.com/apache/ozone/commit/bfd1168646aa9079095a3f7b9cc7296210107a02", "message": "Update scrubPipeline.", "committedDate": "2020-06-30T10:59:38Z", "type": "commit"}, {"oid": "7fdcc1218223f330325285ea1f3f6669ead835fa", "url": "https://github.com/apache/ozone/commit/7fdcc1218223f330325285ea1f3f6669ead835fa", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-06-30T10:59:38Z", "type": "forcePushed"}, {"oid": "604240f2e3f9e3680e3442ba257693c84d7737ef", "url": "https://github.com/apache/ozone/commit/604240f2e3f9e3680e3442ba257693c84d7737ef", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-07-02T12:07:18Z", "type": "forcePushed"}, {"oid": "50929247a1da2eb3a36bff075cf447114a62ae28", "url": "https://github.com/apache/ozone/commit/50929247a1da2eb3a36bff075cf447114a62ae28", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-07-03T02:11:06Z", "type": "commit"}, {"oid": "50929247a1da2eb3a36bff075cf447114a62ae28", "url": "https://github.com/apache/ozone/commit/50929247a1da2eb3a36bff075cf447114a62ae28", "message": "Let srubber remove pipeline right away.", "committedDate": "2020-07-03T02:11:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NzgzOQ==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r449967839", "bodyText": "this synchronized seems not necessary ?", "author": "GlenGeng", "createdAt": "2020-07-06T03:36:28Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -130,7 +134,7 @@ public static PipelineManagerV2Impl newPipelineManager(\n   }\n \n   @Override\n-  public Pipeline createPipeline(ReplicationType type,\n+  public synchronized Pipeline createPipeline(ReplicationType type,", "originalCommit": "50929247a1da2eb3a36bff075cf447114a62ae28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNTkwMA==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r450025900", "bodyText": "Deleted.", "author": "timmylicheng", "createdAt": "2020-07-06T07:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2NzgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MTEwNw==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r449971107", "bodyText": "From a Datanode side, will it be better if close container before close pipeline? Call pipelineFactory.close() before closeContainersForPipeline()  will send out ClosePipelineCommand ahead of CloseContainerCommand, which will make container unhealthy.\nRefer to CloseContainerCommandHandler\n      switch (container.getContainerState()) {\n      case OPEN:\n      case CLOSING:\n        // If the container is part of open pipeline, close it via write channel\n        if (ozoneContainer.getWriteChannel()\n            .isExist(closeCommand.getPipelineID())) {\n          ContainerCommandRequestProto request =\n              getContainerCommandRequestProto(datanodeDetails,\n                  closeCommand.getContainerID());\n          ozoneContainer.getWriteChannel()\n              .submitRequest(request, closeCommand.getPipelineID());\n        } else {\n          // Container should not exist in CLOSING state without a pipeline\n          controller.markContainerUnhealthy(containerId);\n        }", "author": "GlenGeng", "createdAt": "2020-07-06T03:54:26Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -310,94 +321,72 @@ public void openPipeline(PipelineID pipelineId) throws IOException {\n   }\n \n   /**\n-   * Finalizes pipeline in the SCM. Removes pipeline and makes rpc call to\n-   * destroy pipeline on the datanodes immediately or after timeout based on the\n-   * value of onTimeout parameter.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n-   * @param onTimeout       - if true pipeline is removed and destroyed on\n-   *                        datanodes after timeout\n-   * @throws IOException\n-   */\n-  @Override\n-  public void finalizeAndDestroyPipeline(Pipeline pipeline, boolean onTimeout)\n-      throws IOException {\n-    LOG.info(\"Destroying pipeline:{}\", pipeline);\n-    finalizePipeline(pipeline.getId());\n-    if (onTimeout) {\n-      long pipelineDestroyTimeoutInMillis =\n-          conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT,\n-              ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT_DEFAULT,\n-              TimeUnit.MILLISECONDS);\n-      scheduler.schedule(() -> destroyPipeline(pipeline),\n-          pipelineDestroyTimeoutInMillis, TimeUnit.MILLISECONDS, LOG,\n-          String.format(\"Destroy pipeline failed for pipeline:%s\", pipeline));\n-    } else {\n-      destroyPipeline(pipeline);\n-    }\n-  }\n-\n-  /**\n-   * Moves the pipeline to CLOSED state and sends close container command for\n-   * all the containers in the pipeline.\n+   * Removes the pipeline from the db and pipeline state map.\n    *\n-   * @param pipelineId - ID of the pipeline to be moved to CLOSED state.\n+   * @param pipeline - pipeline to be removed\n    * @throws IOException\n    */\n-  private void finalizePipeline(PipelineID pipelineId) throws IOException {\n+  protected void removePipeline(Pipeline pipeline) throws IOException {\n+    pipelineFactory.close(pipeline.getType(), pipeline);\n+    PipelineID pipelineID = pipeline.getId();\n     lock.writeLock().lock();\n     try {\n-      Pipeline pipeline = stateManager.getPipeline(pipelineId);\n-      if (!pipeline.isClosed()) {\n-        stateManager.updatePipelineState(\n-            pipelineId.getProtobuf(), HddsProtos.PipelineState.PIPELINE_CLOSED);\n-        LOG.info(\"Pipeline {} moved to CLOSED state\", pipeline);\n-      }\n-\n-      // TODO fire events to datanodes for closing pipelines\n-//      Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n-//      for (ContainerID containerID : containerIDs) {\n-//        eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n-//      }\n-      metrics.removePipelineMetrics(pipelineId);\n+      closeContainersForPipeline(pipelineID);", "originalCommit": "50929247a1da2eb3a36bff075cf447114a62ae28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNTc4Ng==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r450025786", "bodyText": "Updated in PipelineManagerV2. That was a mistake. Thanks for the review", "author": "timmylicheng", "createdAt": "2020-07-06T07:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3MTEwNw=="}], "type": "inlineReview"}, {"oid": "5a7a822b3b7f7e1b6934cca992ec28ae6fe77f1e", "url": "https://github.com/apache/ozone/commit/5a7a822b3b7f7e1b6934cca992ec28ae6fe77f1e", "message": "Update PipelineManagerV2 close container sequence.", "committedDate": "2020-07-06T06:40:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMzYxNw==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r451023617", "bodyText": "Do we need to check the time against ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT since it enter into the CLOSED state before closecontainer and removepipeline?", "author": "xiaoyuyao", "createdAt": "2020-07-07T17:20:26Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -410,18 +399,29 @@ public void scrubPipeline(ReplicationType type, ReplicationFactor factor)\n         ScmConfigKeys.OZONE_SCM_PIPELINE_ALLOCATED_TIMEOUT,\n         ScmConfigKeys.OZONE_SCM_PIPELINE_ALLOCATED_TIMEOUT_DEFAULT,\n         TimeUnit.MILLISECONDS);\n-    List<Pipeline> needToSrubPipelines = stateManager.getPipelines(type, factor,\n-        Pipeline.PipelineState.ALLOCATED).stream()\n-        .filter(p -> currentTime.toEpochMilli() - p.getCreationTimestamp()\n-            .toEpochMilli() >= pipelineScrubTimeoutInMills)\n-        .collect(Collectors.toList());\n-    for (Pipeline p : needToSrubPipelines) {\n-      LOG.info(\"Scrubbing pipeline: id: \" + p.getId().toString() +\n-          \" since it stays at ALLOCATED stage for \" +\n-          Duration.between(currentTime, p.getCreationTimestamp()).toMinutes() +\n-          \" mins.\");\n-      finalizeAndDestroyPipeline(p, false);\n+\n+    List<Pipeline> candidates = stateManager.getPipelines(type, factor);\n+\n+    for (Pipeline p : candidates) {\n+      // scrub pipelines who stay ALLOCATED for too long.\n+      if (p.getPipelineState() == Pipeline.PipelineState.ALLOCATED &&\n+          (currentTime.toEpochMilli() - p.getCreationTimestamp()\n+              .toEpochMilli() >= pipelineScrubTimeoutInMills)) {\n+        LOG.info(\"Scrubbing pipeline: id: \" + p.getId().toString() +\n+            \" since it stays at ALLOCATED stage for \" +\n+            Duration.between(currentTime, p.getCreationTimestamp())\n+                .toMinutes() + \" mins.\");\n+        closePipeline(p, false);\n+      }\n+      // scrub pipelines who stay CLOSED for too long.\n+      if (p.getPipelineState() == Pipeline.PipelineState.CLOSED) {", "originalCommit": "5a7a822b3b7f7e1b6934cca992ec28ae6fe77f1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4MjQyOQ==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r451482429", "bodyText": "I feel like once pipeline is at CLOSED state, it can be removed right away since it has no chance getting back to OPEN. So I remove the OZONE_SCM_PIPELINE_DESTROY_TIMEOUT check here.", "author": "timmylicheng", "createdAt": "2020-07-08T11:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMjA4NQ==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r452602085", "bodyText": "I updated with the scheduler to schedule removing pipeline after closing contaienrs.", "author": "timmylicheng", "createdAt": "2020-07-10T03:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMzYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNDI4Mg==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r451024282", "bodyText": "how do we handle onTimeout==True? Do we assume pipeline scrubber to handle this below?", "author": "xiaoyuyao", "createdAt": "2020-07-07T17:21:37Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineManagerV2Impl.java", "diffHunk": "@@ -310,94 +321,72 @@ public void openPipeline(PipelineID pipelineId) throws IOException {\n   }\n \n   /**\n-   * Finalizes pipeline in the SCM. Removes pipeline and makes rpc call to\n-   * destroy pipeline on the datanodes immediately or after timeout based on the\n-   * value of onTimeout parameter.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n-   * @param onTimeout       - if true pipeline is removed and destroyed on\n-   *                        datanodes after timeout\n-   * @throws IOException\n-   */\n-  @Override\n-  public void finalizeAndDestroyPipeline(Pipeline pipeline, boolean onTimeout)\n-      throws IOException {\n-    LOG.info(\"Destroying pipeline:{}\", pipeline);\n-    finalizePipeline(pipeline.getId());\n-    if (onTimeout) {\n-      long pipelineDestroyTimeoutInMillis =\n-          conf.getTimeDuration(ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT,\n-              ScmConfigKeys.OZONE_SCM_PIPELINE_DESTROY_TIMEOUT_DEFAULT,\n-              TimeUnit.MILLISECONDS);\n-      scheduler.schedule(() -> destroyPipeline(pipeline),\n-          pipelineDestroyTimeoutInMillis, TimeUnit.MILLISECONDS, LOG,\n-          String.format(\"Destroy pipeline failed for pipeline:%s\", pipeline));\n-    } else {\n-      destroyPipeline(pipeline);\n-    }\n-  }\n-\n-  /**\n-   * Moves the pipeline to CLOSED state and sends close container command for\n-   * all the containers in the pipeline.\n+   * Removes the pipeline from the db and pipeline state map.\n    *\n-   * @param pipelineId - ID of the pipeline to be moved to CLOSED state.\n+   * @param pipeline - pipeline to be removed\n    * @throws IOException\n    */\n-  private void finalizePipeline(PipelineID pipelineId) throws IOException {\n+  protected void removePipeline(Pipeline pipeline) throws IOException {\n+    pipelineFactory.close(pipeline.getType(), pipeline);\n+    PipelineID pipelineID = pipeline.getId();\n     lock.writeLock().lock();\n     try {\n-      Pipeline pipeline = stateManager.getPipeline(pipelineId);\n-      if (!pipeline.isClosed()) {\n-        stateManager.updatePipelineState(\n-            pipelineId.getProtobuf(), HddsProtos.PipelineState.PIPELINE_CLOSED);\n-        LOG.info(\"Pipeline {} moved to CLOSED state\", pipeline);\n-      }\n-\n-      // TODO fire events to datanodes for closing pipelines\n-//      Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n-//      for (ContainerID containerID : containerIDs) {\n-//        eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n-//      }\n-      metrics.removePipelineMetrics(pipelineId);\n+      stateManager.removePipeline(pipelineID.getProtobuf());\n+      metrics.incNumPipelineDestroyed();\n+    } catch (IOException ex) {\n+      metrics.incNumPipelineDestroyFailed();\n+      throw ex;\n     } finally {\n       lock.writeLock().unlock();\n     }\n   }\n \n   /**\n-   * Removes pipeline from SCM. Sends ratis command to destroy pipeline on all\n-   * the datanodes for ratis pipelines.\n-   *\n-   * @param pipeline        - Pipeline to be destroyed\n+   * Fire events to close all containers related to the input pipeline.\n+   * @param pipelineId - ID of the pipeline.\n    * @throws IOException\n    */\n-  protected void destroyPipeline(Pipeline pipeline) throws IOException {\n-    pipelineFactory.close(pipeline.getType(), pipeline);\n-    // remove the pipeline from the pipeline manager\n-    removePipeline(pipeline.getId());\n-    triggerPipelineCreation();\n+  protected void closeContainersForPipeline(final PipelineID pipelineId)\n+      throws IOException {\n+    Set<ContainerID> containerIDs = stateManager.getContainers(pipelineId);\n+    for (ContainerID containerID : containerIDs) {\n+      eventPublisher.fireEvent(SCMEvents.CLOSE_CONTAINER, containerID);\n+    }\n   }\n \n   /**\n-   * Removes the pipeline from the db and pipeline state map.\n-   *\n-   * @param pipelineId - ID of the pipeline to be removed\n+   * put pipeline in CLOSED state.\n+   * @param pipeline - ID of the pipeline.\n+   * @param onTimeout - whether to remove pipeline after some time.\n    * @throws IOException\n    */\n-  protected void removePipeline(PipelineID pipelineId) throws IOException {\n+  @Override\n+  public void closePipeline(Pipeline pipeline, boolean onTimeout)\n+      throws IOException {\n+    PipelineID pipelineID = pipeline.getId();\n     lock.writeLock().lock();\n     try {\n-      stateManager.removePipeline(pipelineId.getProtobuf());\n-      metrics.incNumPipelineDestroyed();\n-    } catch (IOException ex) {\n-      metrics.incNumPipelineDestroyFailed();\n-      throw ex;\n+      if (!pipeline.isClosed()) {\n+        stateManager.updatePipelineState(pipelineID.getProtobuf(),\n+            HddsProtos.PipelineState.PIPELINE_CLOSED);\n+        LOG.info(\"Pipeline {} moved to CLOSED state\", pipeline);\n+      }\n+      metrics.removePipelineMetrics(pipelineID);\n     } finally {\n       lock.writeLock().unlock();\n     }\n+    if (!onTimeout) {", "originalCommit": "5a7a822b3b7f7e1b6934cca992ec28ae6fe77f1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzMzc5Mg==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r451333792", "bodyText": "Yes, we let scrubber handle the rest.", "author": "timmylicheng", "createdAt": "2020-07-08T07:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNDI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNDg4Ng==", "url": "https://github.com/apache/ozone/pull/1049#discussion_r451024886", "bodyText": "Same as the comments for V2 manager.", "author": "xiaoyuyao", "createdAt": "2020-07-07T17:22:37Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -421,18 +438,29 @@ public void scrubPipeline(ReplicationType type, ReplicationFactor factor)\n         ScmConfigKeys.OZONE_SCM_PIPELINE_ALLOCATED_TIMEOUT,\n         ScmConfigKeys.OZONE_SCM_PIPELINE_ALLOCATED_TIMEOUT_DEFAULT,\n         TimeUnit.MILLISECONDS);\n-    List<Pipeline> needToSrubPipelines = stateManager.getPipelines(type, factor,\n-        Pipeline.PipelineState.ALLOCATED).stream()\n-        .filter(p -> currentTime.toEpochMilli() - p.getCreationTimestamp()\n-            .toEpochMilli() >= pipelineScrubTimeoutInMills)\n-        .collect(Collectors.toList());\n-    for (Pipeline p : needToSrubPipelines) {\n-      LOG.info(\"Scrubbing pipeline: id: \" + p.getId().toString() +\n-          \" since it stays at ALLOCATED stage for \" +\n-          Duration.between(currentTime, p.getCreationTimestamp()).toMinutes() +\n-          \" mins.\");\n-      finalizeAndDestroyPipeline(p, false);\n+\n+    List<Pipeline> candidates = stateManager.getPipelines(type, factor);\n+\n+    for (Pipeline p : candidates) {\n+      // scrub pipelines who stay ALLOCATED for too long.\n+      if (p.getPipelineState() == Pipeline.PipelineState.ALLOCATED &&\n+          (currentTime.toEpochMilli() - p.getCreationTimestamp()\n+              .toEpochMilli() >= pipelineScrubTimeoutInMills)) {\n+        LOG.info(\"Scrubbing pipeline: id: \" + p.getId().toString() +\n+            \" since it stays at ALLOCATED stage for \" +\n+            Duration.between(currentTime, p.getCreationTimestamp())\n+                .toMinutes() + \" mins.\");\n+        closePipeline(p, false);\n+      }\n+      // scrub pipelines who stay CLOSED for too long.\n+      if (p.getPipelineState() == Pipeline.PipelineState.CLOSED) {", "originalCommit": "5a7a822b3b7f7e1b6934cca992ec28ae6fe77f1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9ef6254f2d03053d5079aa900aa3e20865787eba", "url": "https://github.com/apache/ozone/commit/9ef6254f2d03053d5079aa900aa3e20865787eba", "message": "Add delayed action for closing pipeline after closing containers.", "committedDate": "2020-07-10T04:00:34Z", "type": "forcePushed"}, {"oid": "36e9c89895cb95f29043497e0f88aec06dab6794", "url": "https://github.com/apache/ozone/commit/36e9c89895cb95f29043497e0f88aec06dab6794", "message": "Add delayed action for closing pipeline after closing containers.", "committedDate": "2020-07-10T07:28:08Z", "type": "forcePushed"}, {"oid": "5a99c83eb28287f0f5e2ac7b801c5db5bc69445b", "url": "https://github.com/apache/ozone/commit/5a99c83eb28287f0f5e2ac7b801c5db5bc69445b", "message": "Add delayed action for closing pipeline after closing containers.", "committedDate": "2020-07-10T09:24:21Z", "type": "commit"}, {"oid": "5a99c83eb28287f0f5e2ac7b801c5db5bc69445b", "url": "https://github.com/apache/ozone/commit/5a99c83eb28287f0f5e2ac7b801c5db5bc69445b", "message": "Add delayed action for closing pipeline after closing containers.", "committedDate": "2020-07-10T09:24:21Z", "type": "forcePushed"}]}