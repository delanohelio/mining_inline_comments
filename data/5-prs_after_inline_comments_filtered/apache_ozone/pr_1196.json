{"pr_number": 1196, "pr_title": "HDDS-3955. Unable to list intermediate paths on keys created using S3G.", "pr_createdAt": "2020-07-10T22:59:57Z", "pr_url": "https://github.com/apache/ozone/pull/1196", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MTg4OQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453761889", "bodyText": "used via FileSystem API (reword comment).", "author": "arp7", "createdAt": "2020-07-13T16:06:42Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/OMConfigKeys.java", "diffHunk": "@@ -239,4 +239,11 @@ private OMConfigKeys() {\n           \"ozone.om.keyname.character.check.enabled\";\n   public static final boolean OZONE_OM_KEYNAME_CHARACTER_CHECK_ENABLED_DEFAULT =\n           false;\n+\n+  // This config needs to be enabled, when S3G created objects will be used\n+  // FileSystem.", "originalCommit": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMjU3Ng==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454102576", "bodyText": "done", "author": "bharatviswa504", "createdAt": "2020-07-14T05:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2MTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NDIzOA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453774238", "bodyText": "Let's make the exception message slightly more descriptive to explain what is really going on. We can mention that createIntermediateDirs behavior is enabled and hence / has special interpretation.", "author": "arp7", "createdAt": "2020-07-13T16:26:30Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,", "originalCommit": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMjU1MA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454102550", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-07-14T05:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NDIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTcyMg==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453775722", "bodyText": "@bharatviswa504 , one q. We are adding intermediate cache entries right away instead of at the end on success. Could this be a potential issue on the failure path?", "author": "arp7", "createdAt": "2020-07-13T16:28:40Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -221,8 +233,45 @@ public OMClientResponse validateAndUpdateCache(OzoneManager ozoneManager,\n       OmBucketInfo bucketInfo = omMetadataManager.getBucketTable().get(\n           omMetadataManager.getBucketKey(volumeName, bucketName));\n \n+      boolean createIntermediateDir =\n+          ozoneManager.getConfiguration().getBoolean(\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY,\n+              OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY_DEFAULT);\n+\n+      // If FILE_EXISTS we just override like how we used to do for Key Create.\n+      List< OzoneAcl > inheritAcls;\n+      if (createIntermediateDir) {\n+        OMFileRequest.OMPathInfo pathInfo =\n+            OMFileRequest.verifyFilesInPath(omMetadataManager, volumeName,\n+                bucketName, keyName, Paths.get(keyName));\n+        OMFileRequest.OMDirectoryResult omDirectoryResult =\n+            pathInfo.getDirectoryResult();\n+        inheritAcls = pathInfo.getAcls();\n+\n+        // Check if a file or directory exists with same key name.\n+        if (omDirectoryResult == DIRECTORY_EXISTS) {\n+          throw new OMException(\"Can not write to directory: \" + keyName,\n+              NOT_A_FILE);\n+        } else\n+          if (omDirectoryResult == FILE_EXISTS_IN_GIVENPATH) {\n+            throw new OMException(\"Can not create file: \" + keyName +\n+                \" as there is already file in the given path\", NOT_A_FILE);\n+          }\n+\n+        missingParentInfos = OMDirectoryCreateRequest\n+            .getAllParentInfo(ozoneManager, keyArgs,\n+                pathInfo.getMissingParents(), inheritAcls, trxnLogIndex);\n+\n+        // Add cache entries for the prefix directories.", "originalCommit": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAwMTg3OA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454001878", "bodyText": "Yes, there will be some intermediate directories left in DB, key commit failed. There will be intermediate directories created.\nBut I don't see that causing an issue. But cleaner thing is cleaning up entries.\nBut this is a common issue for FileCreate and KeyCreate.\nAnd in the case lets say key create itself failed in DB flush, we terminate DB.", "author": "bharatviswa504", "createdAt": "2020-07-13T23:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTY3Mg==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r453779672", "bodyText": "Can we change this to fs.getFileStatus(keypath) so that returns status.isDir() ?", "author": "mukul1987", "createdAt": "2020-07-13T16:34:48Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -328,6 +342,73 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithIntermediateDir() throws Exception {\n+\n+    String keyName = \"a/b/c/file1\";\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_CREATE_INTERMEDIATE_DIRECTORY, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+        100L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(omClientResponse.getOMResponse().getStatus(), OK);\n+\n+    Path keyPath = Paths.get(keyName);\n+\n+    // Check intermediate paths are created\n+    keyPath = keyPath.getParent();\n+    while(keyPath != null) {\n+      Assert.assertNotNull(omMetadataManager.getKeyTable().get(", "originalCommit": "a0aa715d900398d19f68b78ebf9e6686c1e6ca0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMjYwNA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r454102604", "bodyText": "Added test", "author": "bharatviswa504", "createdAt": "2020-07-14T05:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTY3Mg=="}], "type": "inlineReview"}, {"oid": "879cc1bb1f01c86613dced52b55562a93cf0f710", "url": "https://github.com/apache/ozone/commit/879cc1bb1f01c86613dced52b55562a93cf0f710", "message": "add getFileStatus test", "committedDate": "2020-07-14T01:03:31Z", "type": "forcePushed"}, {"oid": "51c6a9021f956583a8a4a46df62d71df21b36021", "url": "https://github.com/apache/ozone/commit/51c6a9021f956583a8a4a46df62d71df21b36021", "message": "address review comments", "committedDate": "2020-07-14T04:46:37Z", "type": "forcePushed"}, {"oid": "d173db00aa9333a0d49b185fd2364212eb2e7824", "url": "https://github.com/apache/ozone/commit/d173db00aa9333a0d49b185fd2364212eb2e7824", "message": "address leading / to follow fs semantics", "committedDate": "2020-07-15T00:23:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyODc5OA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455228798", "bodyText": "Can we print normalizedKeyName.substring(1) given we return that?", "author": "avijayanhwx", "createdAt": "2020-07-15T17:43:27Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      String normalizedKeyName;\n+      if (keyName.startsWith(OM_KEY_PREFIX)) {\n+        normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+      } else {\n+        normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+            .normalize().getPath();\n+      }\n+      if (!keyName.equals(normalizedKeyName)) {\n+        LOG.debug(\"Normalized key {} to {} \", keyName, normalizedKeyName);", "originalCommit": "9028b91739b58319bf7df010a06ce757e5e0e865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDgxNQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455410815", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-07-15T22:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyODc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455231005", "bodyText": "What about moving the 'enableFileSystemPaths' flag outside, and call the method conditionally? In that way, the getNormalizedKey will stay a simple util function without knowing about application logic.", "author": "avijayanhwx", "createdAt": "2020-07-15T17:47:09Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,24 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,", "originalCommit": "9028b91739b58319bf7df010a06ce757e5e0e865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzNjA1OQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455236059", "bodyText": "That requires in all over the code, we need to check this flag and call this. I feel this is better way.\nIf needed I can move the code of actual Normalize, to another utility if you expect this to be used else where.", "author": "bharatviswa504", "createdAt": "2020-07-15T17:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDc5Nw==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455410797", "bodyText": "Moved common logic to a new method.", "author": "bharatviswa504", "createdAt": "2020-07-15T22:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjQ5Mg==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455232492", "bodyText": "Nit. Can we add a test for key with length = 1? Since we return .substring(1) in the method, trying to be cautious here.", "author": "avijayanhwx", "createdAt": "2020-07-15T17:49:42Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.getNormalizedKey;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Test\n+  public void testNormalizePathsEnabled() {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        getNormalizedKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        getNormalizedKey(true, \"////a/b/////c/...../d\"));\n+    Assert.assertEquals(\"a/b/d\",\n+        getNormalizedKey(true, \"/a/b/c/../d\"));\n+    Assert.assertEquals(\"a/d\",", "originalCommit": "9028b91739b58319bf7df010a06ce757e5e0e865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDczNg==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455410736", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-07-15T22:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjQ5Mg=="}], "type": "inlineReview"}, {"oid": "bff5c4a802544d586cb5ae9b87553941147b48ec", "url": "https://github.com/apache/ozone/commit/bff5c4a802544d586cb5ae9b87553941147b48ec", "message": "add / test", "committedDate": "2020-07-15T22:54:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTk0MA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455955940", "bodyText": "Thanks for adding this log message. It will be super useful!", "author": "arp7", "createdAt": "2020-07-16T17:34:31Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +272,30 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String getNormalizedKey(boolean enableFileSystemPaths,\n+      String keyName) {\n+    if (enableFileSystemPaths) {\n+      return getNormalizedKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String getNormalizedKey(String keyName) {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,", "originalCommit": "7e4532764b1f9727339e9a07c03ae2ff9106843c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDM4NQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455960385", "bodyText": "Leading / in path should be dropped at this point, right?", "author": "arp7", "createdAt": "2020-07-16T17:42:19Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {\n-        // Found a file in the given path.\n-        // Check if this is actual file or a file in the given path\n-        if (dbKeyName.equals(fileNameFromDetails)) {\n-          result = OMDirectoryResult.FILE_EXISTS;\n-        } else {\n-          result = OMDirectoryResult.FILE_EXISTS_IN_GIVENPATH;\n-        }\n-      } else if (omMetadataManager.getKeyTable().isExist(dbDirKeyName)) {\n+      // Check first for dir. This is to handle leading \"/\" in path, which", "originalCommit": "7e4532764b1f9727339e9a07c03ae2ff9106843c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODc2Nw==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455968767", "bodyText": "Yes. This change was required, when we are allowing leading / in keyName. I will revert the change", "author": "bharatviswa504", "createdAt": "2020-07-16T17:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MTMxMA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455961310", "bodyText": "I am a little bit worried about changes to OMFileRequest. There is a risk of changing the behavior and invalidating the app-compat testing we have done so far.", "author": "arp7", "createdAt": "2020-07-16T17:43:56Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileRequest.java", "diffHunk": "@@ -79,15 +79,11 @@ public static OMPathInfo verifyFilesInPath(\n       String dbDirKeyName = omMetadataManager.getOzoneDirKey(volumeName,\n           bucketName, pathName);\n \n-      if (omMetadataManager.getKeyTable().isExist(dbKeyName)) {", "originalCommit": "7e4532764b1f9727339e9a07c03ae2ff9106843c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODUyNA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r455968524", "bodyText": "This change can be reverted as now we don't allow leading / in path names when OMConfig enable.filesystems is set to true. Will updated in my next PR update.", "author": "bharatviswa504", "createdAt": "2020-07-16T17:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MTMxMA=="}], "type": "inlineReview"}, {"oid": "6e0cd7a633e98d2e736a0bc9fc0395495e49e390", "url": "https://github.com/apache/ozone/commit/6e0cd7a633e98d2e736a0bc9fc0395495e49e390", "message": "address review comment", "committedDate": "2020-07-16T21:55:26Z", "type": "forcePushed"}, {"oid": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "url": "https://github.com/apache/ozone/commit/285d0db3c49d3dfb621ba7a5659b27f8656f0255", "message": "cs", "committedDate": "2020-07-17T17:42:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456622410", "bodyText": "Does this mean we are allowing trailing /?", "author": "arp7", "createdAt": "2020-07-17T19:01:40Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/OMClientRequest.java", "diffHunk": "@@ -265,4 +273,72 @@ public AuditMessage buildAuditMessage(AuditAction op,\n     auditMap.put(OzoneConsts.VOLUME, volume);\n     return auditMap;\n   }\n+\n+\n+  public static String validateAndNormalizeKey(boolean enableFileSystemPaths,\n+      String keyName) throws OMException {\n+    if (enableFileSystemPaths) {\n+      return validateAndNormalizeKey(keyName);\n+    } else {\n+      return keyName;\n+    }\n+  }\n+\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public static String validateAndNormalizeKey(String keyName)\n+      throws OMException {\n+    String normalizedKeyName;\n+    if (keyName.startsWith(OM_KEY_PREFIX)) {\n+      normalizedKeyName = Paths.get(keyName).toUri().normalize().getPath();\n+    } else {\n+      normalizedKeyName = Paths.get(OM_KEY_PREFIX, keyName).toUri()\n+          .normalize().getPath();\n+    }\n+    if (!keyName.equals(normalizedKeyName)) {\n+      LOG.debug(\"Normalized key {} to {} \", keyName,\n+          normalizedKeyName.substring(1));\n+    }\n+    return isValidKeyPath(normalizedKeyName.substring(1));\n+  }\n+\n+  /**\n+   * Whether the pathname is valid.  Check key names which contain a\n+   * \":\", \".\", \"..\", \"//\", \"\". If it has any of these characters throws\n+   * OMException, else return the path.\n+   */\n+  private static String isValidKeyPath(String path) throws OMException {\n+    boolean isValid = true;\n+\n+    // If keyName is empty string throw error.\n+    if (path.length() == 0) {\n+      throw new OMException(\"Invalid KeyPath, empty keyName\" + path,\n+          INVALID_KEY_NAME);\n+    } else if(path.startsWith(\"/\")) {\n+      isValid = false;\n+    } else {\n+      // Check for \"..\" \".\" \":\" \"/\"\n+      String[] components = StringUtils.split(path, '/');\n+      for (int i = 0; i < components.length; i++) {\n+        String element = components[i];\n+        if (element.equals(\".\") ||\n+            (element.contains(\":\")) ||\n+            (element.contains(\"/\") || element.equals(\"..\"))) {\n+          isValid = false;\n+          break;\n+        }\n+\n+        // The string may end with a /, but not have", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTYwNg==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625606", "bodyText": "I realized this is checked later in OmKeyCreateRequest.", "author": "arp7", "createdAt": "2020-07-17T19:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2MDc4OA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456660788", "bodyText": "Yes, we don't allow for a keyName with trailing /. This method can return after normalization in some cases. So, we checked in OmKeyCreateRequest", "author": "bharatviswa504", "createdAt": "2020-07-17T20:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMjQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTE1NQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625155", "bodyText": "Spurious change?", "author": "arp7", "createdAt": "2020-07-17T19:07:43Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/file/OMFileCreateRequest.java", "diffHunk": "@@ -141,7 +141,6 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n               ozoneManager.getPreallocateBlocksMax(),\n               ozoneManager.isGrpcBlockTokenEnabled(),\n               ozoneManager.getOMNodeId());\n-", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3NTQ4MA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456675480", "bodyText": "Removed it", "author": "bharatviswa504", "createdAt": "2020-07-17T21:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTk4Mg==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456625982", "bodyText": "Let's also mention why it is invalid, else user may be scratching their head. \ud83d\ude42", "author": "arp7", "createdAt": "2020-07-17T19:09:35Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/request/key/OMKeyCreateRequest.java", "diffHunk": "@@ -91,6 +99,19 @@ public OMRequest preExecute(OzoneManager ozoneManager) throws IOException {\n     if(checkKeyNameEnabled){\n       OmUtils.validateKeyName(keyArgs.getKeyName());\n     }\n+\n+    String keyPath = keyArgs.getKeyName();\n+    if (ozoneManager.getEnableFileSystemPaths()) {\n+      // If enabled, disallow keys with trailing /. As in fs semantics\n+      // directories end with trailing /.\n+      keyPath = validateAndNormalizeKey(\n+          ozoneManager.getEnableFileSystemPaths(), keyPath);\n+      if (keyPath.endsWith(\"/\")) {\n+        throw new OMException(\"Invalid KeyPath: \" + keyPath,\n+            OMException.ResultCodes.INVALID_KEY_NAME);", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3NTQ1MQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456675451", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-07-17T21:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNTk4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456630734", "bodyText": "Why is this converted to ../d1/d2/d3? Should it be failed instead due to trailing /?", "author": "arp7", "createdAt": "2020-07-17T19:20:37Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Njc2MA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456666760", "bodyText": "..d1/d2/d3/ -> ../d1/d2/d3 it removed trailing /. Normalize will take care of removing additional /", "author": "bharatviswa504", "createdAt": "2020-07-17T20:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Njk0Nw==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456666947", "bodyText": "we will fail, even after normalize if we have a case like /a/. -> a/", "author": "bharatviswa504", "createdAt": "2020-07-17T20:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTA4Ng==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631086", "bodyText": "Also let's add a check for ../a/b and /../a/b.", "author": "arp7", "createdAt": "2020-07-17T19:21:29Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2ODcwMQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456668701", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-07-17T20:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTg3MA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631870", "bodyText": "Let's add a separate test case for validateAndNormalizeKey itself. All it does is call validateAndNormalizeKey with bunch of hard-coded input and asserts on the expected output.", "author": "arp7", "createdAt": "2020-07-17T19:23:24Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzE4NQ==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456633185", "bodyText": "Ignore this comment, I see it above now. Was reviewing files out of order.", "author": "arp7", "createdAt": "2020-07-17T19:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTk1NA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456631954", "bodyText": "Nice!", "author": "arp7", "createdAt": "2020-07-17T19:23:34Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/key/TestOMKeyCreateRequest.java", "diffHunk": "@@ -327,7 +344,164 @@ private OMRequest createKeyRequest(boolean isMultipartKey, int partNumber) {\n         .setCmdType(OzoneManagerProtocolProtos.Type.CreateKey)\n         .setClientId(UUID.randomUUID().toString())\n         .setCreateKeyRequest(createKeyRequest).build();\n+  }\n+\n+  @Test\n+  public void testKeyCreateWithFileSystemPathsEnabled() throws Exception {\n+\n+    OzoneConfiguration configuration = new OzoneConfiguration();\n+    configuration.setBoolean(OZONE_OM_ENABLE_FILESYSTEM_PATHS, true);\n+    when(ozoneManager.getConfiguration()).thenReturn(configuration);\n+    when(ozoneManager.getEnableFileSystemPaths()).thenReturn(true);\n+\n+    // Add volume and bucket entries to DB.\n+    addVolumeAndBucketToDB(volumeName, bucketName,\n+        omMetadataManager);\n+\n+\n+    keyName = \"dir1/dir2/dir3/file1\";\n+    createAndCheck(keyName);\n+\n+    // Key with leading '/'.\n+    String keyName = \"/a/b/c/file1\";\n+    createAndCheck(keyName);\n+\n+    // Commit openKey entry.\n+    TestOMRequestUtils.addKeyToTable(false, volumeName, bucketName,\n+        keyName.substring(1), 0L, RATIS, THREE, omMetadataManager);\n+\n+    // Now create another file in same dir path.\n+    keyName = \"/a/b/c/file2\";\n+    createAndCheck(keyName);\n+\n+    // Create key with multiple /'s\n+    // converted to a/b/c/file5\n+    keyName = \"///a/b///c///file5\";\n+    createAndCheck(keyName);\n+\n+    // converted to a/b/c/.../file3\n+    keyName = \"///a/b///c//.../file3\";\n+    createAndCheck(keyName);\n+\n+    // converted to r1/r2\n+    keyName = \"././r1/r2/\";\n+    createAndCheck(keyName);\n+\n+    // converted to ..d1/d2/d3\n+    keyName = \"..d1/d2/d3/\";\n+    createAndCheck(keyName);\n+\n+    // Create a file, where a file already exists in the path.\n+    // Now try with a file exists in path. Should fail.\n+    keyName = \"/a/b/c/file1/file3\";\n+    checkNotAFile(keyName);\n+\n+    // Empty keyName.\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+    // Key name ends with /\n+    keyName = \"/a/./\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"/////\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"../../b:/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \":/c/\";\n+    checkNotAValidPath(keyName);\n+\n+    keyName = \"\";\n+    checkNotAValidPath(keyName);\n+\n+  }\n+\n \n+  private void checkNotAValidPath(String keyName) {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    try {\n+      omKeyCreateRequest.preExecute(ozoneManager);\n+      fail(\"checkNotAValidPath failed for path\" + keyName);\n+    } catch (IOException ex) {\n+      Assert.assertTrue(ex instanceof OMException);\n+      OMException omException = (OMException) ex;\n+      Assert.assertEquals(OMException.ResultCodes.INVALID_KEY_NAME,\n+          omException.getResult());\n+    }\n+\n+\n+  }\n+  private void checkNotAFile(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(NOT_A_FILE,\n+        omClientResponse.getOMResponse().getStatus());\n+  }\n+\n+\n+  private void createAndCheck(String keyName) throws Exception {\n+    OMRequest omRequest = createKeyRequest(false, 0, keyName);\n+\n+    OMKeyCreateRequest omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    omRequest = omKeyCreateRequest.preExecute(ozoneManager);\n+\n+    omKeyCreateRequest = new OMKeyCreateRequest(omRequest);\n+\n+    OMClientResponse omClientResponse =\n+        omKeyCreateRequest.validateAndUpdateCache(ozoneManager,\n+            101L, ozoneManagerDoubleBufferHelper);\n+\n+    Assert.assertEquals(OK, omClientResponse.getOMResponse().getStatus());\n+\n+    checkCreatedPaths(omKeyCreateRequest, omRequest, keyName);\n+  }\n+\n+  private void checkCreatedPaths(OMKeyCreateRequest omKeyCreateRequest,\n+      OMRequest omRequest, String keyName) throws Exception {\n+    keyName = omKeyCreateRequest.validateAndNormalizeKey(true, keyName);\n+    // Check intermediate directories created or not.\n+    Path keyPath = Paths.get(keyName);\n+    checkIntermediatePaths(keyPath);", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456633686", "bodyText": "Bharat, more than two dots should normalize to itself. In Unix I can create a dir named ... or ......", "author": "arp7", "createdAt": "2020-07-17T19:27:50Z", "path": "hadoop-ozone/ozone-manager/src/test/java/org/apache/hadoop/ozone/om/request/TestNormalizePaths.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.hadoop.ozone.om.request;\n+\n+import org.apache.hadoop.ozone.om.exceptions.OMException;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.apache.hadoop.ozone.om.request.OMClientRequest.validateAndNormalizeKey;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Class to test normalize paths.\n+ */\n+public class TestNormalizePaths {\n+\n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testNormalizePathsEnabled() throws Exception {\n+\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"/a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/c/d\"));\n+    Assert.assertEquals(\"a/b/c/d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/d\"));\n+    Assert.assertEquals(\"a/b/c/...../d\",\n+        validateAndNormalizeKey(true, \"////a/b/////c/...../d\"));", "originalCommit": "285d0db3c49d3dfb621ba7a5659b27f8656f0255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2NjI2Nw==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456666267", "bodyText": "yes, you are right. It is the samething right, we are checking a/b/c/...../d, just it has removed additional and leading /", "author": "bharatviswa504", "createdAt": "2020-07-17T20:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwOTM3OA==", "url": "https://github.com/apache/ozone/pull/1196#discussion_r456809378", "bodyText": "Right, I got confused.", "author": "arp7", "createdAt": "2020-07-18T17:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMzY4Ng=="}], "type": "inlineReview"}, {"oid": "669102ea9bf94e471db1279efd2c265005801c2a", "url": "https://github.com/apache/ozone/commit/669102ea9bf94e471db1279efd2c265005801c2a", "message": "Add create intermediate dir in key create", "committedDate": "2020-07-17T21:05:21Z", "type": "commit"}, {"oid": "773bfd2e6f25dcc9a86e2ced891d5e644987ad1a", "url": "https://github.com/apache/ozone/commit/773bfd2e6f25dcc9a86e2ced891d5e644987ad1a", "message": "add config", "committedDate": "2020-07-17T21:05:21Z", "type": "commit"}, {"oid": "a9489bb5399ac90e98722d080af40db4b3974f8a", "url": "https://github.com/apache/ozone/commit/a9489bb5399ac90e98722d080af40db4b3974f8a", "message": "add already file exists", "committedDate": "2020-07-17T21:05:21Z", "type": "commit"}, {"oid": "e7eae28042af0928a3bc8f78002a244c95734ab3", "url": "https://github.com/apache/ozone/commit/e7eae28042af0928a3bc8f78002a244c95734ab3", "message": "fix cs", "committedDate": "2020-07-17T21:05:22Z", "type": "commit"}, {"oid": "e5d67e7c2f341afa76501d03c7cd42e380b6f32c", "url": "https://github.com/apache/ozone/commit/e5d67e7c2f341afa76501d03c7cd42e380b6f32c", "message": "address leading /", "committedDate": "2020-07-17T21:05:22Z", "type": "commit"}, {"oid": "d9ebe996de6be06a80ff709a9a39b0d1c2b810b9", "url": "https://github.com/apache/ozone/commit/d9ebe996de6be06a80ff709a9a39b0d1c2b810b9", "message": "add getFileStatus test", "committedDate": "2020-07-17T21:05:22Z", "type": "commit"}, {"oid": "afb0f5ccc37296ba95eb62483bda2bb09b5b5ca1", "url": "https://github.com/apache/ozone/commit/afb0f5ccc37296ba95eb62483bda2bb09b5b5ca1", "message": "address review comments", "committedDate": "2020-07-17T21:05:22Z", "type": "commit"}, {"oid": "da4ed948bbd1c803354cae1fdd21ba21f299a9d3", "url": "https://github.com/apache/ozone/commit/da4ed948bbd1c803354cae1fdd21ba21f299a9d3", "message": "cs", "committedDate": "2020-07-17T21:05:22Z", "type": "commit"}, {"oid": "010da1b8eb13830f8bbaa6465a127fd778cf443b", "url": "https://github.com/apache/ozone/commit/010da1b8eb13830f8bbaa6465a127fd778cf443b", "message": "filesystem api", "committedDate": "2020-07-17T21:05:22Z", "type": "commit"}, {"oid": "d916ee4bba1b8ee044e017e599d7cad47b156c2d", "url": "https://github.com/apache/ozone/commit/d916ee4bba1b8ee044e017e599d7cad47b156c2d", "message": "cs", "committedDate": "2020-07-17T21:05:23Z", "type": "commit"}, {"oid": "c020f4a6474ff424f1b0163b353fdca22455504b", "url": "https://github.com/apache/ozone/commit/c020f4a6474ff424f1b0163b353fdca22455504b", "message": "address leading / to follow fs semantics", "committedDate": "2020-07-17T21:06:22Z", "type": "commit"}, {"oid": "28b7d7eafe4b1a0b82eecd3685401c3a53b15329", "url": "https://github.com/apache/ozone/commit/28b7d7eafe4b1a0b82eecd3685401c3a53b15329", "message": "add disable test", "committedDate": "2020-07-17T21:06:22Z", "type": "commit"}, {"oid": "8c85c11c821438956d0a82eabd5b72356d0341bf", "url": "https://github.com/apache/ozone/commit/8c85c11c821438956d0a82eabd5b72356d0341bf", "message": "cs and fb", "committedDate": "2020-07-17T21:06:22Z", "type": "commit"}, {"oid": "711343a401a00b225c9a7a34ab48a04819235e8a", "url": "https://github.com/apache/ozone/commit/711343a401a00b225c9a7a34ab48a04819235e8a", "message": "fb", "committedDate": "2020-07-17T21:06:22Z", "type": "commit"}, {"oid": "1e55f1e303aa5959ea9edb992dcf3cb6785fcb6e", "url": "https://github.com/apache/ozone/commit/1e55f1e303aa5959ea9edb992dcf3cb6785fcb6e", "message": "some corner case tests address review comments and handle empty keyName", "committedDate": "2020-07-17T21:06:22Z", "type": "commit"}, {"oid": "edd38aac043b39beef2548446c2ae915c75109da", "url": "https://github.com/apache/ozone/commit/edd38aac043b39beef2548446c2ae915c75109da", "message": "add / test", "committedDate": "2020-07-17T21:06:23Z", "type": "commit"}, {"oid": "8458f67c6a7a3372546b247b7b40bbeae9fb9693", "url": "https://github.com/apache/ozone/commit/8458f67c6a7a3372546b247b7b40bbeae9fb9693", "message": "make empty key normal to key create also", "committedDate": "2020-07-17T21:06:23Z", "type": "commit"}, {"oid": "75780f01435076ce60f27534ae161733567496f6", "url": "https://github.com/apache/ozone/commit/75780f01435076ce60f27534ae161733567496f6", "message": "remove file request code", "committedDate": "2020-07-17T21:06:23Z", "type": "commit"}, {"oid": "bcd5b783642d25276065d2daff3595e0263c7caf", "url": "https://github.com/apache/ozone/commit/bcd5b783642d25276065d2daff3595e0263c7caf", "message": "add validatecheck and add tests", "committedDate": "2020-07-17T21:06:23Z", "type": "commit"}, {"oid": "5f8e72a9ead6ee9cc8c2aae3e5d2c59858f01b79", "url": "https://github.com/apache/ozone/commit/5f8e72a9ead6ee9cc8c2aae3e5d2c59858f01b79", "message": "address review comment", "committedDate": "2020-07-17T21:06:23Z", "type": "commit"}, {"oid": "083c2247799113f21582381757420d4e0d1a04ed", "url": "https://github.com/apache/ozone/commit/083c2247799113f21582381757420d4e0d1a04ed", "message": "cs", "committedDate": "2020-07-17T21:06:23Z", "type": "commit"}, {"oid": "301b6d05a4a381837b0876b548b8b478ad444c11", "url": "https://github.com/apache/ozone/commit/301b6d05a4a381837b0876b548b8b478ad444c11", "message": "remove spurious change", "committedDate": "2020-07-17T21:06:24Z", "type": "commit"}, {"oid": "f0389acc8f808c19c46f17df10851fe87e2787f3", "url": "https://github.com/apache/ozone/commit/f0389acc8f808c19c46f17df10851fe87e2787f3", "message": "add test", "committedDate": "2020-07-17T21:06:24Z", "type": "commit"}, {"oid": "f0389acc8f808c19c46f17df10851fe87e2787f3", "url": "https://github.com/apache/ozone/commit/f0389acc8f808c19c46f17df10851fe87e2787f3", "message": "add test", "committedDate": "2020-07-17T21:06:24Z", "type": "forcePushed"}, {"oid": "15b9e5cd28b52f4ee4ae390fe8fac350f8bafdac", "url": "https://github.com/apache/ozone/commit/15b9e5cd28b52f4ee4ae390fe8fac350f8bafdac", "message": "fix bug during rebase", "committedDate": "2020-07-17T21:07:56Z", "type": "commit"}]}