{"pr_number": 843, "pr_title": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times", "pr_createdAt": "2020-04-20T02:19:04Z", "pr_url": "https://github.com/apache/ozone/pull/843", "timeline": [{"oid": "24df66dde6775c7177c63d7f33b53bc1f90703cb", "url": "https://github.com/apache/ozone/commit/24df66dde6775c7177c63d7f33b53bc1f90703cb", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times", "committedDate": "2020-04-20T02:45:20Z", "type": "forcePushed"}, {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d", "url": "https://github.com/apache/ozone/commit/2388d620511404c4de8f99ce8a37e0c411294c8d", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times", "committedDate": "2020-04-20T06:00:07Z", "type": "forcePushed"}, {"oid": "2388d620511404c4de8f99ce8a37e0c411294c8d", "url": "https://github.com/apache/ozone/commit/2388d620511404c4de8f99ce8a37e0c411294c8d", "message": "HDDS-3223. Improve s3g read 1GB object efficiency by 100 times", "committedDate": "2020-04-20T06:00:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4Mzg0MQ==", "url": "https://github.com/apache/ozone/pull/843#discussion_r411883841", "bodyText": "-ve means all, so if I say -1/-2, read entire file till end?.\nBut I don't see that handled in the code.", "author": "bharatviswa504", "createdAt": "2020-04-21T05:39:51Z", "path": "hadoop-ozone/s3gateway/src/main/java/org/apache/hadoop/ozone/s3/io/S3WrapperInputStream.java", "diffHunk": "@@ -76,4 +79,87 @@ public long getPos() throws IOException {\n   public boolean seekToNewSource(long targetPos) throws IOException {\n     return false;\n   }\n+\n+  /**\n+   * Copies some or all bytes from a large (over 2GB) <code>InputStream</code>\n+   * to an <code>OutputStream</code>, optionally skipping input bytes.\n+   * <p>\n+   * Copy the method from IOUtils of commons-io to reimplement skip by seek\n+   * rather than read. The reason why IOUtils of commons-io implement skip\n+   * by read can be found at\n+   * <a href=\"https://issues.apache.org/jira/browse/IO-203\">IO-203</a>.\n+   * </p>\n+   * <p>\n+   * This method buffers the input internally, so there is no need to use a\n+   * <code>BufferedInputStream</code>.\n+   * </p>\n+   * The buffer size is given by {@link #DEFAULT_BUFFER_SIZE}.\n+   *\n+   * @param output the <code>OutputStream</code> to write to\n+   * @param inputOffset : number of bytes to skip from input before copying\n+   * -ve values are ignored\n+   * @param length : number of bytes to copy. -ve means all\n+   * @return the number of bytes copied\n+   * @throws NullPointerException if the input or output is null\n+   * @throws IOException          if an I/O error occurs\n+   */\n+  public long copyLarge(final OutputStream output, final long inputOffset,\n+      final long length) throws IOException {\n+    return copyLarge(output, inputOffset, length,\n+        new byte[DEFAULT_BUFFER_SIZE]);\n+  }\n+\n+  /**\n+   * Copies some or all bytes from a large (over 2GB) <code>InputStream</code>\n+   * to an <code>OutputStream</code>, optionally skipping input bytes.\n+   * <p>\n+   * Copy the method from IOUtils of commons-io to reimplement skip by seek\n+   * rather than read. The reason why IOUtils of commons-io implement skip\n+   * by read can be found at\n+   * <a href=\"https://issues.apache.org/jira/browse/IO-203\">IO-203</a>.\n+   * </p>\n+   * <p>\n+   * This method uses the provided buffer, so there is no need to use a\n+   * <code>BufferedInputStream</code>.\n+   * </p>\n+   *\n+   * @param output the <code>OutputStream</code> to write to\n+   * @param inputOffset : number of bytes to skip from input before copying\n+   * -ve values are ignored\n+   * @param length : number of bytes to copy. -ve means all", "originalCommit": "2388d620511404c4de8f99ce8a37e0c411294c8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNTY2NA==", "url": "https://github.com/apache/ozone/pull/843#discussion_r411905664", "bodyText": "@bharatviswa504 Hi, thanks for your comments.  If length < 0, then bytesToRead equals to bufferLength and never change. So while loop will not break until read == IOUtils.EOF. So it call read entire file till end.", "author": "runzhiwang", "createdAt": "2020-04-21T06:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4Mzg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNzIxOQ==", "url": "https://github.com/apache/ozone/pull/843#discussion_r412437219", "bodyText": "Got it.", "author": "bharatviswa504", "createdAt": "2020-04-21T19:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4Mzg0MQ=="}], "type": "inlineReview"}, {"oid": "f7d948ba8f428b7481bb6eae8bc6cfee9c015081", "url": "https://github.com/apache/ozone/commit/f7d948ba8f428b7481bb6eae8bc6cfee9c015081", "message": "fix code review", "committedDate": "2020-04-22T13:47:16Z", "type": "commit"}]}