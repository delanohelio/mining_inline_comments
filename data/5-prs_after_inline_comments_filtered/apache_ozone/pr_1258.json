{"pr_number": 1258, "pr_title": "HDDS-4029. Recon unable to add a new container which is in CLOSED state.", "pr_createdAt": "2020-07-25T07:24:46Z", "pr_url": "https://github.com/apache/ozone/pull/1258", "timeline": [{"oid": "c9fb09cac0b1920df5cb7ee102991298f1add00a", "url": "https://github.com/apache/ozone/commit/c9fb09cac0b1920df5cb7ee102991298f1add00a", "message": "HDDS-4029. Recon unable to add a new container which is in CLOSED state.", "committedDate": "2020-07-25T07:23:23Z", "type": "commit"}, {"oid": "b3b419418ef46434ac6a81b416392a48edb3612e", "url": "https://github.com/apache/ozone/commit/b3b419418ef46434ac6a81b416392a48edb3612e", "message": "Fix unit test.", "committedDate": "2020-07-25T22:02:40Z", "type": "commit"}, {"oid": "0fc3fdab7b3f4830c4484eecdff9eaa19bedad07", "url": "https://github.com/apache/ozone/commit/0fc3fdab7b3f4830c4484eecdff9eaa19bedad07", "message": "Add more comments.", "committedDate": "2020-07-27T17:07:12Z", "type": "commit"}, {"oid": "37559b32f467a6a646339fb5fcaade079449a78c", "url": "https://github.com/apache/ozone/commit/37559b32f467a6a646339fb5fcaade079449a78c", "message": "Add more unit test cases.", "committedDate": "2020-07-27T17:41:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NTQ1Nw==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r461795457", "bodyText": "I'm trying to understand why this is not an issue in SCM?\nDoes Recon have similar idea like SCM safemode to ensure Pipeline meet the minimal requirement?", "author": "xiaoyuyao", "createdAt": "2020-07-28T18:44:58Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/container/ContainerStateManager.java", "diffHunk": "@@ -325,8 +325,12 @@ public void addContainerInfo(long containerID,\n                                Pipeline pipeline) throws IOException {\n     Preconditions.checkNotNull(containerInfo);\n     containers.addContainer(containerInfo);\n-    pipelineManager.addContainerToPipeline(pipeline.getId(),\n-        ContainerID.valueof(containerID));\n+    if (pipeline != null) {", "originalCommit": "37559b32f467a6a646339fb5fcaade079449a78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMDU2Mw==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462320563", "bodyText": "@xiaoyuyao This is a specific use case to Recon where it may be directly trying to add a new container to its \"passive SCM\" metadata. For example, Recon may have been down during an extended period of time, when a container was created, opened and then eventually closed by SCM. At that point in time, if Recon is started up, it receives container reports for that container, it verifies that it was created by SCM, along with the pipeline information. If it is a closed container, then the pipeline ID returned by SCM is spurious. All that matters is the datanode which hosts the replica.\nIn SCM this is not possible since it already has the container metadata, and the 'addContainerInfo' method is called during \"createContainer\" step.", "author": "avijayanhwx", "createdAt": "2020-07-29T13:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NTQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NDQyMg==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462484422", "bodyText": "My point is that Recon listen to container report and pipeline report from DNs similar to SCM. Why do we need to rely on SCM to provide the pipeline info given Recon is a \"passive SCM\"?", "author": "xiaoyuyao", "createdAt": "2020-07-29T17:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NTQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczMzk5Ng==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462733996", "bodyText": "@xiaoyuyao Good question. Although we get pipeline report for a new pipeline through DN, it does not contain all the information that was used by SCM to create the pipeline (Factor, other nodes). While implementing this, we considered 2 ways to handle this, either through an elaborate pipeline creation ACK command which Recon can pick up, or through Recon requesting SCM for a confirmation whenever it sees a new pipeline. We went with the latter.\nIn general, any state change that \"originates\" in the SCM needs to be synced with Recon. But anything that originates in the Datanode works automatically. Recon is like a \"read-only\" follower here. In the future, the plan is to have Recon become a silent Ratis follower in the OM and SCM HA rings.", "author": "avijayanhwx", "createdAt": "2020-07-30T04:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NjM5MA==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r461796390", "bodyText": "NIT: \"part of \" => \"pipeline\"", "author": "xiaoyuyao", "createdAt": "2020-07-28T18:46:43Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java", "diffHunk": "@@ -77,22 +82,42 @@ public ReconContainerManager(\n    * @throws IOException on Error.\n    */\n   public void checkAndAddNewContainer(ContainerID containerID,\n+      ContainerReplicaProto.State replicaState,\n       DatanodeDetails datanodeDetails)\n       throws IOException {\n     if (!exists(containerID)) {\n       LOG.info(\"New container {} got from {}.\", containerID,\n           datanodeDetails.getHostName());\n       ContainerWithPipeline containerWithPipeline =\n           scmClient.getContainerWithPipeline(containerID.getId());\n-      LOG.debug(\"Verified new container from SCM {} \",\n-          containerWithPipeline.getContainerInfo().containerID());\n+      LOG.info(\"Verified new container from SCM {}, part of {} \",", "originalCommit": "37559b32f467a6a646339fb5fcaade079449a78c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NzI3OQ==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r461797279", "bodyText": "should we more preciously check for ContainerReplicaProto.State.CLOSE state?", "author": "xiaoyuyao", "createdAt": "2020-07-28T18:48:23Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java", "diffHunk": "@@ -77,22 +82,42 @@ public ReconContainerManager(\n    * @throws IOException on Error.\n    */\n   public void checkAndAddNewContainer(ContainerID containerID,\n+      ContainerReplicaProto.State replicaState,\n       DatanodeDetails datanodeDetails)\n       throws IOException {\n     if (!exists(containerID)) {\n       LOG.info(\"New container {} got from {}.\", containerID,\n           datanodeDetails.getHostName());\n       ContainerWithPipeline containerWithPipeline =\n           scmClient.getContainerWithPipeline(containerID.getId());\n-      LOG.debug(\"Verified new container from SCM {} \",\n-          containerWithPipeline.getContainerInfo().containerID());\n+      LOG.info(\"Verified new container from SCM {}, part of {} \",\n+          containerID, containerWithPipeline.getPipeline().getId());\n       // If no other client added this, go ahead and add this container.\n       if (!exists(containerID)) {\n         addNewContainer(containerID.getId(), containerWithPipeline);\n       }\n+    } else {\n+      // Check if container state is not open. In SCM, container state\n+      // changes to CLOSING first, and then the close command is pushed down\n+      // to Datanodes. Recon 'learns' this from DN, and hence replica state\n+      // will move container state to 'CLOSING'.\n+      ContainerInfo containerInfo = getContainer(containerID);\n+      if (containerInfo.getState().equals(HddsProtos.LifeCycleState.OPEN)\n+          && !replicaState.equals(ContainerReplicaProto.State.OPEN)", "originalCommit": "37559b32f467a6a646339fb5fcaade079449a78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMzAxMw==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462323013", "bodyText": "@xiaoyuyao The container could be in any non-open & healthy state (CLOSING, QUASI_CLOSED, CLOSED). When the container was OPEN Recon may have added it to its metadata, but then it may have gone down. When it comes back up, the container could be in any state. A unit test (testProcessICRStateMismatch ) has been added for all the states.", "author": "avijayanhwx", "createdAt": "2020-07-29T14:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzc3Ng==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462327776", "bodyText": "A sample flow of events.\n\nRecon has containerState = OPEN, Recon gets container report with replicaState = QUASI_CLOSED\nBefore processing the replica, it calls on the above logic (ReconContainerManager#checkAndAddNewContainer) which updates containerState to \u2018CLOSING\u2019 through the \"FINALIZE\" event. This is like a pre-processing step for Recon where the container replica state is showing up as unexpected. We have to do this since SCM is where the state transition was initiated, but Recon has to \"learn\" it later from DNs.\nFurther along in the same process container report flow, there is a process replica step which sees that the containerState = \u2018CLOSING\u2019, and replicaState = QUASI_CLOSED, hence moves container state to \u2018QUASI_CLOSED\u2019 (AbstractContainerReportHandler#updateContainerState). This is the same code as used by SCM to transition container state by looking at the replica state.\n\nThe same sequence of events would be true if starting replicaState = \u201cCLOSING\" or \"CLOSED\u201d as well", "author": "avijayanhwx", "createdAt": "2020-07-29T14:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMDI4NA==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462510284", "bodyText": "Thanks for the details of state transition handling on Recon side. It makes sense to me.", "author": "xiaoyuyao", "createdAt": "2020-07-29T18:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NzI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTkzOA==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r461869938", "bodyText": "This can be simplified as\nLOG.warn(\"Pipeline {} not found. Cannot add container {}\",\npipelineID, containerInfo.containerID());", "author": "xiaoyuyao", "createdAt": "2020-07-28T20:49:33Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconContainerManager.java", "diffHunk": "@@ -105,18 +130,32 @@ public void addNewContainer(long containerId,\n     ContainerInfo containerInfo = containerWithPipeline.getContainerInfo();\n     getLock().lock();\n     try {\n-      if (getPipelineManager().containsPipeline(\n-          containerWithPipeline.getPipeline().getId())) {\n-        getContainerStateManager().addContainerInfo(containerId, containerInfo,\n-            getPipelineManager(), containerWithPipeline.getPipeline());\n+      boolean success = false;\n+      if (containerInfo.getState().equals(HddsProtos.LifeCycleState.OPEN)) {\n+        PipelineID pipelineID = containerWithPipeline.getPipeline().getId();\n+        if (getPipelineManager().containsPipeline(pipelineID)) {\n+          getContainerStateManager().addContainerInfo(containerId,\n+              containerInfo, getPipelineManager(),\n+              containerWithPipeline.getPipeline());\n+          success = true;\n+        } else {\n+          // Get open container for a pipeline that Recon does not know\n+          // about yet. Cannot update internal state until pipeline is synced.\n+          LOG.warn(String.format(", "originalCommit": "37559b32f467a6a646339fb5fcaade079449a78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMzE2MA==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r462323160", "bodyText": "Sure, will do.", "author": "avijayanhwx", "createdAt": "2020-07-29T14:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNDI1NQ==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r463334255", "bodyText": "Can we reuse the getTestContainer below to reduce duplicated code?", "author": "xiaoyuyao", "createdAt": "2020-07-30T23:57:13Z", "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/scm/AbstractReconContainerManagerTest.java", "diffHunk": "@@ -129,4 +132,46 @@ private StorageContainerServiceProvider getScmServiceProvider()\n         .thenReturn(containerWithPipeline);\n     return scmServiceProviderMock;\n   }\n+\n+  protected Table<ContainerID, ContainerInfo> getContainerTable()\n+      throws IOException {\n+    return CONTAINERS.getTable(store);\n+  }\n+\n+  protected ContainerWithPipeline getTestContainer(LifeCycleState state)\n+      throws IOException {\n+    ContainerID containerID = new ContainerID(100L);\n+    Pipeline pipeline = getRandomPipeline();", "originalCommit": "37559b32f467a6a646339fb5fcaade079449a78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzk2NA==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r463337964", "bodyText": "Sure, will do.", "author": "avijayanhwx", "createdAt": "2020-07-31T00:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNDI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTY0MA==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r463335640", "bodyText": "Can we add an additional case from CLOSING to QUASI_CLOSED upon receiving State.QUASI_CLOSED?", "author": "xiaoyuyao", "createdAt": "2020-07-31T00:02:07Z", "path": "hadoop-ozone/recon/src/test/java/org/apache/hadoop/ozone/recon/scm/TestReconContainerManager.java", "diffHunk": "@@ -86,12 +104,39 @@ public void testCheckAndAddNewContainer() throws IOException {\n     ReconContainerManager containerManager = getContainerManager();\n     assertFalse(containerManager.exists(containerID));\n     DatanodeDetails datanodeDetails = randomDatanodeDetails();\n-    containerManager.checkAndAddNewContainer(containerID, datanodeDetails);\n+    containerManager.checkAndAddNewContainer(containerID,\n+        OPEN, datanodeDetails);\n     assertTrue(containerManager.exists(containerID));\n \n     // Doing it one more time should not change any state.\n-    containerManager.checkAndAddNewContainer(containerID, datanodeDetails);\n+    containerManager.checkAndAddNewContainer(containerID, OPEN,\n+        datanodeDetails);\n     assertTrue(containerManager.exists(containerID));\n+    assertEquals(LifeCycleState.OPEN,\n+        getContainerManager().getContainer(containerID).getState());\n   }\n \n+  @Test\n+  public void testUpdateContainerStateFromOpen() throws IOException {\n+    ContainerWithPipeline containerWithPipeline =\n+        getTestContainer(LifeCycleState.OPEN);\n+\n+    long id = containerWithPipeline.getContainerInfo().getContainerID();\n+    ContainerID containerID =\n+        containerWithPipeline.getContainerInfo().containerID();\n+\n+    // Adding container #100.\n+    getContainerManager().addNewContainer(id, containerWithPipeline);\n+    assertEquals(LifeCycleState.OPEN,\n+        getContainerManager().getContainer(containerID).getState());\n+\n+    DatanodeDetails datanodeDetails = randomDatanodeDetails();\n+\n+    // First report with \"CLOSED\" replica state moves container state to\n+    // \"CLOSING\".\n+    getContainerManager().checkAndAddNewContainer(containerID, State.CLOSED,\n+        datanodeDetails);\n+    assertEquals(CLOSING,\n+        getContainerManager().getContainer(containerID).getState());", "originalCommit": "37559b32f467a6a646339fb5fcaade079449a78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzODE3Ng==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r463338176", "bodyText": "@xiaoyuyao I have added the tests for all the states in TestReconICR. Is that OK?", "author": "avijayanhwx", "createdAt": "2020-07-31T00:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE0NTQ2OQ==", "url": "https://github.com/apache/ozone/pull/1258#discussion_r464145469", "bodyText": "LGTM.", "author": "xiaoyuyao", "createdAt": "2020-08-03T00:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNTY0MA=="}], "type": "inlineReview"}, {"oid": "775181a129adaa3a1ba5c9901e50ba1e681c8b54", "url": "https://github.com/apache/ozone/commit/775181a129adaa3a1ba5c9901e50ba1e681c8b54", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-4029-master", "committedDate": "2020-07-31T03:26:18Z", "type": "commit"}, {"oid": "394f746ba00cda3e4adeb2490c6459bd3ff2095b", "url": "https://github.com/apache/ozone/commit/394f746ba00cda3e4adeb2490c6459bd3ff2095b", "message": "Addressed review comment.", "committedDate": "2020-07-31T03:27:09Z", "type": "commit"}, {"oid": "8563fb5db7d2edd30c0c2789200e6765511f5373", "url": "https://github.com/apache/ozone/commit/8563fb5db7d2edd30c0c2789200e6765511f5373", "message": "trigger new CI check", "committedDate": "2020-07-31T13:57:49Z", "type": "commit"}, {"oid": "2fe0f64cfa2c8b85d7b3cebf1df2694aa853dd76", "url": "https://github.com/apache/ozone/commit/2fe0f64cfa2c8b85d7b3cebf1df2694aa853dd76", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-4029-master", "committedDate": "2020-07-31T20:23:28Z", "type": "commit"}, {"oid": "ebb3607c14e2c8e3c6b37a7192cf4b3409512dae", "url": "https://github.com/apache/ozone/commit/ebb3607c14e2c8e3c6b37a7192cf4b3409512dae", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-4029-master", "committedDate": "2020-08-02T19:47:58Z", "type": "commit"}]}