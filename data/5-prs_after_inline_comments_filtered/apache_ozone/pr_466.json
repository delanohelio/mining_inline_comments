{"pr_number": 466, "pr_title": "HDDS-2869. Handle pipeline bootstrap from SCM and create pipeline use case in Recon.", "pr_createdAt": "2020-01-21T05:14:13Z", "pr_url": "https://github.com/apache/ozone/pull/466", "timeline": [{"oid": "9ca61fca17be10faa1e5c0d9c525a787fc9b3e20", "url": "https://github.com/apache/ozone/commit/9ca61fca17be10faa1e5c0d9c525a787fc9b3e20", "message": "HDDS-2869. Handle pipeline bootstrap from SCM and create pipeline use case in Recon.", "committedDate": "2020-01-21T05:16:43Z", "type": "commit"}, {"oid": "9ca61fca17be10faa1e5c0d9c525a787fc9b3e20", "url": "https://github.com/apache/ozone/commit/9ca61fca17be10faa1e5c0d9c525a787fc9b3e20", "message": "HDDS-2869. Handle pipeline bootstrap from SCM and create pipeline use case in Recon.", "committedDate": "2020-01-21T05:16:43Z", "type": "forcePushed"}, {"oid": "b979312c6eb1dde06c5d4755a6aa1e956cf5e632", "url": "https://github.com/apache/ozone/commit/b979312c6eb1dde06c5d4755a6aa1e956cf5e632", "message": "HDDS-2869. Fix TestSCMPipelineManager unit test.", "committedDate": "2020-01-21T17:36:12Z", "type": "commit"}, {"oid": "459ad5684d56c9fe2675f42b0f7f0baab8c19be8", "url": "https://github.com/apache/ozone/commit/459ad5684d56c9fe2675f42b0f7f0baab8c19be8", "message": "HDDS-2869. Fix findbugs and acceptance tests.", "committedDate": "2020-01-21T19:52:09Z", "type": "commit"}, {"oid": "f0a1c426d707f16ef8a638bcb36445691880b384", "url": "https://github.com/apache/ozone/commit/f0a1c426d707f16ef8a638bcb36445691880b384", "message": "HDDS-2869. Rafactoring.", "committedDate": "2020-01-22T05:41:01Z", "type": "commit"}, {"oid": "76c67ff8cf46c2c486c40949ded5abba2535fe49", "url": "https://github.com/apache/ozone/commit/76c67ff8cf46c2c486c40949ded5abba2535fe49", "message": "Merge branch 'master' into HDDS-2869-master", "committedDate": "2020-01-27T05:42:46Z", "type": "commit"}, {"oid": "016192d98702a6cf4d09434e8e9c1ffe5b6acd32", "url": "https://github.com/apache/ozone/commit/016192d98702a6cf4d09434e8e9c1ffe5b6acd32", "message": "Merge remote-tracking branch 'upstream/master' into HDDS-2869-master", "committedDate": "2020-01-27T21:06:28Z", "type": "commit"}, {"oid": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "url": "https://github.com/apache/ozone/commit/e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "message": "Merge branch 'HDDS-2869-master' of github.com:avijayanhwx/hadoop-ozone into HDDS-2869-master", "committedDate": "2020-01-27T21:06:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDY2OA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371544668", "bodyText": "The access can be made package-private?", "author": "swagle", "createdAt": "2020-01-27T23:43:44Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineFactory.java", "diffHunk": "@@ -35,7 +35,7 @@\n /**\n  * Creates pipeline based on replication type.\n  */\n-public final class PipelineFactory {\n+public class PipelineFactory {", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MzY1MQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371553651", "bodyText": "This is extended in org.apache.hadoop.ozone.recon.scm.ReconPipelineFactory.", "author": "avijayanhwx", "createdAt": "2020-01-28T00:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NDY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NTQ4MQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371545481", "bodyText": "For cleaner semantics, this can be renamed to setReportedDatanode.", "author": "swagle", "createdAt": "2020-01-27T23:46:45Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/PipelineReportHandler.java", "diffHunk": "@@ -120,4 +116,24 @@ private void processPipelineReport(PipelineReport report, DatanodeDetails dn,\n       }\n     }\n   }\n+\n+\n+  protected void reportDatanode(Pipeline pipeline, DatanodeDetails dn)", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MjczOA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371872738", "bodyText": "Done", "author": "avijayanhwx", "createdAt": "2020-01-28T15:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Njc4MQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371546781", "bodyText": "Instead of contains, we could have made the get return an Optional", "author": "swagle", "createdAt": "2020-01-27T23:51:16Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -200,6 +210,16 @@ public Pipeline getPipeline(PipelineID pipelineID)\n     }\n   }\n \n+  @Override\n+  public boolean containsPipeline(PipelineID pipelineID) {", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NDc0MA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371874740", "bodyText": "Since the API is \"contains\", I wanted to keep it true/false. Can I address this in the next patch?", "author": "avijayanhwx", "createdAt": "2020-01-28T15:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Njc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3OTY1NQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371979655", "bodyText": "It's a minor nit, I am ok with it asis. More of a preference thing, returning Optional already sets the contract and reduces code dup.", "author": "swagle", "createdAt": "2020-01-28T18:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Njc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzYzOA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371547638", "bodyText": "Instead of a get on a lock object, it would make sense to make the reference accessible.", "author": "swagle", "createdAt": "2020-01-27T23:54:10Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/pipeline/SCMPipelineManager.java", "diffHunk": "@@ -523,4 +543,21 @@ protected File getPipelineDBPath(Configuration configuration) {\n     File metaDir = ServerUtils.getScmDbDir(configuration);\n     return new File(metaDir, SCM_PIPELINE_DB);\n   }\n+\n+  protected ReadWriteLock getLock() {", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2MjYwOQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371862609", "bodyText": "That will lead to findbug violation. Do you see any issues using a getter?", "author": "avijayanhwx", "createdAt": "2020-01-28T15:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3OTkyNQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371979925", "bodyText": "I see, ok let's ignore this comment.", "author": "swagle", "createdAt": "2020-01-28T18:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Nzk3Nw==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371547977", "bodyText": "This might not be appropriate for Audit since it is not client access, we should log it in debug mode IMO.", "author": "swagle", "createdAt": "2020-01-27T23:55:25Z", "path": "hadoop-hdds/server-scm/src/main/java/org/apache/hadoop/hdds/scm/server/SCMClientProtocolServer.java", "diffHunk": "@@ -408,6 +408,15 @@ public Pipeline createReplicationPipeline(HddsProtos.ReplicationType type,\n     return scm.getPipelineManager().getPipelines();\n   }\n \n+  @Override\n+  public Pipeline getPipeline(HddsProtos.PipelineID pipelineID)\n+      throws IOException {\n+    AUDIT.logReadSuccess(", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NTI5MQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371875291", "bodyText": "Done", "author": "avijayanhwx", "createdAt": "2020-01-28T15:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0Nzk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODMxNQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371548315", "bodyText": "Should we consider throwing a RuntimeException instead?", "author": "swagle", "createdAt": "2020-01-27T23:56:35Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.map.DefaultedMap;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineFactory;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to stub out SCM's pipeline providers. This makes sure Recon can\n+ * never be on the pipeline CREATE or CLOSE path.\n+ */\n+public class ReconPipelineFactory extends PipelineFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconPipelineFactory.class);\n+\n+  ReconPipelineFactory() {\n+    ReconMockPipelineProvider reconMockPipelineProvider =\n+        new ReconMockPipelineProvider();\n+    setProviders(new DefaultedMap(reconMockPipelineProvider));\n+  }\n+\n+  static class ReconMockPipelineProvider implements PipelineProvider {\n+\n+    @Override\n+    public Pipeline create(HddsProtos.ReplicationFactor factor){\n+      LOG.warn(\"Trying to create pipeline in Recon, which is prohibited!\");\n+      return null;", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2MjEyNw==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371862127", "bodyText": "We don't need to do this since this class protects us against any unintended actions from Recon.", "author": "avijayanhwx", "createdAt": "2020-01-28T15:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODYwNA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371548604", "bodyText": "I would avoid calling this a Mock since unit tests mocks have a different meaning as they return stubbed data structures.", "author": "swagle", "createdAt": "2020-01-27T23:57:41Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/scm/ReconPipelineFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.scm;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.map.DefaultedMap;\n+import org.apache.hadoop.hdds.protocol.DatanodeDetails;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineFactory;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to stub out SCM's pipeline providers. This makes sure Recon can\n+ * never be on the pipeline CREATE or CLOSE path.\n+ */\n+public class ReconPipelineFactory extends PipelineFactory {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(ReconPipelineFactory.class);\n+\n+  ReconPipelineFactory() {\n+    ReconMockPipelineProvider reconMockPipelineProvider =\n+        new ReconMockPipelineProvider();\n+    setProviders(new DefaultedMap(reconMockPipelineProvider));\n+  }\n+\n+  static class ReconMockPipelineProvider implements PipelineProvider {", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDA1OA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371550058", "bodyText": "How about calling initialize from the constructor and make that idempotent using the flag.", "author": "swagle", "createdAt": "2020-01-28T00:02:56Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;\n+\n+  @Inject\n+  public StorageContainerServiceProviderImpl(OzoneConfiguration configuration,\n+      StorageContainerLocationProtocol scmClient) {\n+    this.configuration = configuration;\n+    this.scmClient = scmClient;\n+    if (this.scmClient != null) {", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDE1NA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371550154", "bodyText": "This should be declared volatile.", "author": "swagle", "createdAt": "2020-01-28T00:03:15Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3MzEyNA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371873124", "bodyText": "Done", "author": "avijayanhwx", "createdAt": "2020-01-28T15:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDM1MQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r371550351", "bodyText": "Same here, and next check becomes redundant.", "author": "swagle", "createdAt": "2020-01-28T00:03:55Z", "path": "hadoop-ozone/recon/src/main/java/org/apache/hadoop/ozone/recon/spi/impl/StorageContainerServiceProviderImpl.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.ozone.recon.spi.impl;\n+\n+import static org.apache.hadoop.hdds.scm.client.ContainerOperationClient.newContainerRpcClient;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.hadoop.hdds.conf.OzoneConfiguration;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos;\n+import org.apache.hadoop.hdds.scm.pipeline.Pipeline;\n+import org.apache.hadoop.hdds.scm.protocol.StorageContainerLocationProtocol;\n+import org.apache.hadoop.ozone.recon.spi.StorageContainerServiceProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation for StorageContainerServiceProvider that talks with actual\n+ * cluster SCM.\n+ */\n+public class StorageContainerServiceProviderImpl\n+    implements StorageContainerServiceProvider {\n+\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(StorageContainerServiceProviderImpl.class);\n+\n+  private OzoneConfiguration configuration;\n+  private StorageContainerLocationProtocol scmClient;\n+  private boolean isInitialized = false;\n+\n+  @Inject\n+  public StorageContainerServiceProviderImpl(OzoneConfiguration configuration,\n+      StorageContainerLocationProtocol scmClient) {\n+    this.configuration = configuration;\n+    this.scmClient = scmClient;\n+    if (this.scmClient != null) {\n+      isInitialized = true;\n+    }\n+  }\n+\n+  private void initialize() {\n+    try {\n+      this.scmClient = newContainerRpcClient(configuration);\n+    } catch (IOException ioEx) {\n+      LOG.error(\"Exception encountered while creating SCM client.\", ioEx);\n+    }\n+    isInitialized = true;\n+  }\n+\n+  @Override\n+  public List<Pipeline> getPipelines() throws IOException {\n+    if (!isInitialized) {", "originalCommit": "e8ffb3edce4817dc708470dce9b1839ba14c3ee5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be7a53771251c48bd6f1f5a9735aee97f838157c", "url": "https://github.com/apache/ozone/commit/be7a53771251c48bd6f1f5a9735aee97f838157c", "message": "HDDS-2869. Address review comments.", "committedDate": "2020-01-28T15:27:49Z", "type": "commit"}, {"oid": "e69ceb2d51a19cfe70084ec9c12538fc96b944ec", "url": "https://github.com/apache/ozone/commit/e69ceb2d51a19cfe70084ec9c12538fc96b944ec", "message": "HDDS-2869. Remove audit log line for getPipeline.", "committedDate": "2020-01-28T15:31:51Z", "type": "commit"}, {"oid": "686b669cdb954ab03dccec38b9388fb7f2e74117", "url": "https://github.com/apache/ozone/commit/686b669cdb954ab03dccec38b9388fb7f2e74117", "message": "HDDS-2869. Fix unit test.", "committedDate": "2020-01-28T17:33:32Z", "type": "commit"}, {"oid": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970", "url": "https://github.com/apache/ozone/commit/2758f46cb7dac0e6f1aaf31d2deef78f42eaa970", "message": "HDDS-2869. Remove integration test name change.", "committedDate": "2020-01-28T17:37:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTcxOA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r372091718", "bodyText": "Usually we add new fields at the end of enums.", "author": "arp7", "createdAt": "2020-01-28T22:21:16Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/audit/SCMAction.java", "diffHunk": "@@ -32,6 +32,7 @@\n   GET_CONTAINER_WITH_PIPELINE,\n   LIST_CONTAINER,\n   LIST_PIPELINE,\n+  GET_PIPELINE,", "originalCommit": "2758f46cb7dac0e6f1aaf31d2deef78f42eaa970", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MzQ0NA==", "url": "https://github.com/apache/ozone/pull/466#discussion_r372093444", "bodyText": "Sure, I can move it to the end.", "author": "avijayanhwx", "createdAt": "2020-01-28T22:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NjI5OQ==", "url": "https://github.com/apache/ozone/pull/466#discussion_r372096299", "bodyText": "I think it is okay for now as we don't have to maintain compatibility.", "author": "arp7", "createdAt": "2020-01-28T22:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTcxOA=="}], "type": "inlineReview"}, {"oid": "52148c7dadbd0386970fd3c279d0ed2855de484b", "url": "https://github.com/apache/ozone/commit/52148c7dadbd0386970fd3c279d0ed2855de484b", "message": "Remove GET_PIPELINE SCMAction since the log line was removed.", "committedDate": "2020-01-28T22:30:20Z", "type": "commit"}]}