{"pr_number": 1005, "pr_title": "HDDS-3350. Ozone Retry Policy Improvements.", "pr_createdAt": "2020-06-02T07:48:25Z", "pr_url": "https://github.com/apache/ozone/pull/1005", "timeline": [{"oid": "b29e208a419962a1db585da5ddce5757895d6949", "url": "https://github.com/apache/ozone/commit/b29e208a419962a1db585da5ddce5757895d6949", "message": "Rebase and Fix unit test", "committedDate": "2020-06-03T13:50:40Z", "type": "forcePushed"}, {"oid": "6b308df05157cb77791eb4383c1745c004ccca8c", "url": "https://github.com/apache/ozone/commit/6b308df05157cb77791eb4383c1745c004ccca8c", "message": "HDDS-3350. Ozone Retry Policy Improvements.", "committedDate": "2020-06-09T12:10:56Z", "type": "commit"}, {"oid": "9c4b838aa08014d7a97174df7fe5d181eb40e06f", "url": "https://github.com/apache/ozone/commit/9c4b838aa08014d7a97174df7fe5d181eb40e06f", "message": "Rebase and Fix unit test", "committedDate": "2020-06-09T12:12:28Z", "type": "commit"}, {"oid": "3fffb8505b6ae77ed9c9cad5f51628e8b747b5a1", "url": "https://github.com/apache/ozone/commit/3fffb8505b6ae77ed9c9cad5f51628e8b747b5a1", "message": "Rebase and update ratis snapshot", "committedDate": "2020-06-09T12:12:28Z", "type": "commit"}, {"oid": "e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "url": "https://github.com/apache/ozone/commit/e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "message": "Fix checkstyle issues", "committedDate": "2020-06-09T12:12:28Z", "type": "commit"}, {"oid": "e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "url": "https://github.com/apache/ozone/commit/e83fe30c841f0eefe786ab1d2b9611025f2ce43a", "message": "Fix checkstyle issues", "committedDate": "2020-06-09T12:12:28Z", "type": "forcePushed"}, {"oid": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "url": "https://github.com/apache/ozone/commit/cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "message": "Rebase and fix unit test.", "committedDate": "2020-06-09T12:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437566605", "bodyText": "Instead of explicitly adding no retry for specific exception , can we define a static list of exceptions for which there will be no retry and iterate here. ?", "author": "bshashikant", "createdAt": "2020-06-09T16:34:18Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n \n-  static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n-    int maxRetryCount =\n-        conf.getInt(OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY,\n+  public static RetryPolicy createRetryPolicy(ConfigurationSource conf) {\n+    ExponentialBackoffRetry exponentialBackoffRetry =\n+        createExponentialBackoffPolicy(conf);\n+    MultipleLinearRandomRetry multipleLinearRandomRetry =\n+        MultipleLinearRandomRetry.parseCommaSeparated(conf.get(\n+            OzoneConfigKeys.DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY,\n             OzoneConfigKeys.\n-                DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT);\n-    long retryInterval = conf.getTimeDuration(OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY, OzoneConfigKeys.\n-        DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT\n-        .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n-    TimeDuration sleepDuration =\n-        TimeDuration.valueOf(retryInterval, TimeUnit.MILLISECONDS);\n-    RetryPolicy retryPolicy = RetryPolicies\n-        .retryUpToMaximumCountWithFixedSleep(maxRetryCount, sleepDuration);\n-    return retryPolicy;\n+                DFS_RATIS_CLIENT_MULTILINEAR_RANDOM_RETRY_POLICY_DEFAULT));\n+\n+    long writeTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WRITE_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long watchTimeout = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT, OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_REQUEST_WATCH_TIMEOUT_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+\n+    return RequestTypeDependentRetryPolicy.newBuilder()\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, exponentialBackoffRetry))\n+        .setRetryPolicy(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            createExceptionDependentPolicy(exponentialBackoffRetry,\n+                multipleLinearRandomRetry, RetryPolicies.noRetry()))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WRITE,\n+            TimeDuration.valueOf(writeTimeout, TimeUnit.MILLISECONDS))\n+        .setTimeout(RaftProtos.RaftClientRequestProto.TypeCase.WATCH,\n+            TimeDuration.valueOf(watchTimeout, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExponentialBackoffRetry createExponentialBackoffPolicy(\n+      ConfigurationSource conf) {\n+    long exponentialBaseSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP,\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_BASE_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    long exponentialMaxSleep = conf.getTimeDuration(\n+        OzoneConfigKeys.DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP,\n+        OzoneConfigKeys.\n+            DFS_RATIS_CLIENT_EXPONENTIAL_BACKOFF_MAX_SLEEP_DEFAULT\n+            .toIntExact(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n+    return ExponentialBackoffRetry.newBuilder()\n+        .setBaseSleepTime(\n+            TimeDuration.valueOf(exponentialBaseSleep, TimeUnit.MILLISECONDS))\n+        .setMaxSleepTime(\n+            TimeDuration.valueOf(exponentialMaxSleep, TimeUnit.MILLISECONDS))\n+        .build();\n+  }\n+\n+  private static ExceptionDependentRetry createExceptionDependentPolicy(\n+      ExponentialBackoffRetry exponentialBackoffRetry,\n+      MultipleLinearRandomRetry multipleLinearRandomRetry,", "originalCommit": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2ODY0NQ==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437568645", "bodyText": "I think we need to add AlreadyClosedException to the list of no retry here( as this can be generated from ratis server as well). Also, for RfatLogIOException , the policy should be of no retry.", "author": "bshashikant", "createdAt": "2020-06-09T16:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MzkxOQ==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438143919", "bodyText": "RaftLogIOException is never received at raft client. I have added AlreadyClosedException.", "author": "lokeshj1703", "createdAt": "2020-06-10T13:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4MDcwMQ==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438880701", "bodyText": "Adding NoRetry for AlreadyClosedException was leading to test failures. This exception is generated for closed connections in Ratis. I have removed NoRetry policy for this exception.", "author": "lokeshj1703", "createdAt": "2020-06-11T15:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTUxOA==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437569518", "bodyText": "can we add a table defining the exception to retry policy relationship for better understanding?", "author": "bshashikant", "createdAt": "2020-06-09T16:39:04Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/ratis/RatisHelper.java", "diffHunk": "@@ -269,23 +282,76 @@ static GrpcTlsConfig createTlsClientConfig(SecurityConfig conf,\n     return tlsConfig;\n   }\n ", "originalCommit": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDI4MQ==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438144281", "bodyText": "Done.", "author": "lokeshj1703", "createdAt": "2020-06-10T13:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDYxOA==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r437570618", "bodyText": "i guess it would be better to define these configs in RatisClientConfig instead of defining here.", "author": "bshashikant", "createdAt": "2020-06-09T16:40:53Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/ozone/OzoneConfigKeys.java", "diffHunk": "@@ -281,15 +281,33 @@\n \n   public static final String DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR =\n       \"dfs.container.ratis.datanode.storage.dir\";\n-  public static final String DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY;\n-  public static final int DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT;\n-  public static final String DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY =\n-      ScmConfigKeys.DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY;\n+", "originalCommit": "cb7802dad9f7c3a3bc369560a2f46b7d6575003b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDM3Ng==", "url": "https://github.com/apache/ozone/pull/1005#discussion_r438144376", "bodyText": "Done.", "author": "lokeshj1703", "createdAt": "2020-06-10T13:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDYxOA=="}], "type": "inlineReview"}, {"oid": "53e8cc4b6b99c4574152edcd532bfb3ab73f2361", "url": "https://github.com/apache/ozone/commit/53e8cc4b6b99c4574152edcd532bfb3ab73f2361", "message": "Address review comments.", "committedDate": "2020-06-10T13:57:30Z", "type": "commit"}, {"oid": "3f3afc3df5458a967f14554f1c28bc396e201566", "url": "https://github.com/apache/ozone/commit/3f3afc3df5458a967f14554f1c28bc396e201566", "message": "Fix unit test", "committedDate": "2020-06-11T11:00:03Z", "type": "commit"}, {"oid": "bd91a4ac00c02c4ef568d8f239ded9a45677fdb4", "url": "https://github.com/apache/ozone/commit/bd91a4ac00c02c4ef568d8f239ded9a45677fdb4", "message": "Fix unit test", "committedDate": "2020-06-11T15:36:08Z", "type": "commit"}, {"oid": "8ecf43c9d8de4e0067ac2d79e9f3a31c6f453e95", "url": "https://github.com/apache/ozone/commit/8ecf43c9d8de4e0067ac2d79e9f3a31c6f453e95", "message": "Fix checkstyle", "committedDate": "2020-06-11T15:42:14Z", "type": "commit"}, {"oid": "fcd7c3394b1b60f3f05a2f83d9834691932f0e70", "url": "https://github.com/apache/ozone/commit/fcd7c3394b1b60f3f05a2f83d9834691932f0e70", "message": "Fix unit test", "committedDate": "2020-06-12T08:10:28Z", "type": "commit"}, {"oid": "d0ce87146534453d20a8ae25cc61f5519d282207", "url": "https://github.com/apache/ozone/commit/d0ce87146534453d20a8ae25cc61f5519d282207", "message": "Fix unit test", "committedDate": "2020-06-12T09:40:42Z", "type": "commit"}, {"oid": "f615b48f6100ca11c35f3a032b2386ec44d88706", "url": "https://github.com/apache/ozone/commit/f615b48f6100ca11c35f3a032b2386ec44d88706", "message": "Remove unnecessary logging", "committedDate": "2020-06-12T09:49:01Z", "type": "commit"}]}