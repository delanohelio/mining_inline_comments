{"pr_number": 943, "pr_title": "HDDS-3615. Call cleanup on tables only when double buffer has transactions related to tables.", "pr_createdAt": "2020-05-19T03:16:44Z", "pr_url": "https://github.com/apache/ozone/pull/943", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NzUwNA==", "url": "https://github.com/apache/ozone/pull/943#discussion_r428987504", "bodyText": "What are the difference is the operation is not volume bucket delete? It seems the txIndex are added the same anyway.", "author": "xiaoyuyao", "createdAt": "2020-05-22T00:45:16Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerDoubleBuffer.java", "diffHunk": "@@ -286,30 +301,45 @@ private void flushTransactions() {\n     }\n   }\n \n-  private void cleanupCache(List<Long> lastRatisTransactionIndex) {\n-    // As now only volume and bucket transactions are handled only called\n-    // cleanupCache on bucketTable.\n-    // TODO: After supporting all write operations we need to call\n-    //  cleanupCache on the tables only when buffer has entries for that table.\n-    omMetadataManager.getBucketTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getVolumeTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getUserTable().cleanupCache(lastRatisTransactionIndex);\n-\n-    //TODO: Optimization we can do here is for key transactions we can only\n-    // cleanup cache when it is key commit transaction. In this way all\n-    // intermediate transactions for a key will be read from in-memory cache.\n-    omMetadataManager.getOpenKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getDeletedTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getS3Table().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getMultipartInfoTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getS3SecretTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getDelegationTokenTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getPrefixTable().cleanupCache(lastRatisTransactionIndex);\n+  /**\n+   * Set cleanup epoch for the DoubleBufferEntry.\n+   * @param entry\n+   * @param cleanupEpochs\n+   */\n+  private void setCleanupEpoch(DoubleBufferEntry entry, Map<String,\n+      List<Long>> cleanupEpochs) {\n+    // Add epochs depending on operated tables. In this way\n+    // cleanup will be called only when required.\n+\n+    // As bucket and volume table is full cache add cleanup\n+    // epochs only when request is delete to cleanup deleted\n+    // entries.\n+\n+    String opName =\n+        entry.getResponse().getOMResponse().getCmdType().name();\n+\n+    if (opName.toLowerCase().contains(VOLUME) ||\n+        opName.toLowerCase().contains(BUCKET)) {\n+      if (DeleteBucket.name().equals(opName)\n+          || DeleteVolume.name().equals(opName)) {\n+        entry.getResponse().operatedTables().forEach(\n+            table -> cleanupEpochs.get(table)\n+                .add(entry.getTrxLogIndex()));\n+      }\n+    } else {\n+      entry.getResponse().operatedTables().forEach(", "originalCommit": "50320fb628a1cdd9a2f43c912967f55a12379067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5NjExMQ==", "url": "https://github.com/apache/ozone/pull/943#discussion_r442596111", "bodyText": "When operation is of type volume/bucket entry should be added only when deletevolume/deletebucket.  As volume/bucket is full cache, and cache should be cleaned up only for delete operations.", "author": "bharatviswa504", "createdAt": "2020-06-19T02:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NzUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4Nzk3Mg==", "url": "https://github.com/apache/ozone/pull/943#discussion_r428987972", "bodyText": "As an alternative, you might achieve the same by adding a class annotation with table name string.", "author": "xiaoyuyao", "createdAt": "2020-05-22T00:47:09Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketCreateResponse.java", "diffHunk": "@@ -30,11 +32,16 @@\n import javax.annotation.Nullable;\n import javax.annotation.Nonnull;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.BUCKET_TABLE;\n+\n /**\n  * Response for CreateBucket request.\n  */\n public final class OMBucketCreateResponse extends OMClientResponse {", "originalCommit": "50320fb628a1cdd9a2f43c912967f55a12379067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5OTA3NQ==", "url": "https://github.com/apache/ozone/pull/943#discussion_r442599075", "bodyText": "Done.", "author": "bharatviswa504", "createdAt": "2020-06-19T02:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4Nzk3Mg=="}], "type": "inlineReview"}, {"oid": "16508287169c52734db75a6034100e8618c86c96", "url": "https://github.com/apache/ozone/commit/16508287169c52734db75a6034100e8618c86c96", "message": "use annotation", "committedDate": "2020-06-19T02:18:06Z", "type": "forcePushed"}, {"oid": "7c48f1622130ffd568cf6702d1fdc3e31af16de3", "url": "https://github.com/apache/ozone/commit/7c48f1622130ffd568cf6702d1fdc3e31af16de3", "message": "HDDS-3615. Call cleanup on tables only when double buffer has transactions related to tables.", "committedDate": "2020-06-26T17:21:09Z", "type": "commit"}, {"oid": "c9eb68a2815a57fdae4c76ac444a18be2b3ceaa3", "url": "https://github.com/apache/ozone/commit/c9eb68a2815a57fdae4c76ac444a18be2b3ceaa3", "message": "use annotation", "committedDate": "2020-06-26T17:21:10Z", "type": "commit"}, {"oid": "6ad1eb15e72bddd2dd673e89fca11c6c0c12b02a", "url": "https://github.com/apache/ozone/commit/6ad1eb15e72bddd2dd673e89fca11c6c0c12b02a", "message": "fix checkstyle", "committedDate": "2020-06-26T17:21:10Z", "type": "commit"}, {"oid": "e9ca7351adc8539c461f7d6d2d8ef0e936c0c612", "url": "https://github.com/apache/ozone/commit/e9ca7351adc8539c461f7d6d2d8ef0e936c0c612", "message": "add test and do some more code changes in doublebuffer", "committedDate": "2020-06-26T17:21:10Z", "type": "commit"}, {"oid": "37fc5b924eb8467d79019c87636f926e06320ca8", "url": "https://github.com/apache/ozone/commit/37fc5b924eb8467d79019c87636f926e06320ca8", "message": "fix CI issues", "committedDate": "2020-06-26T17:21:10Z", "type": "commit"}, {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "url": "https://github.com/apache/ozone/commit/ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "message": "add cleanup table to new class", "committedDate": "2020-06-26T17:35:02Z", "type": "commit"}, {"oid": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "url": "https://github.com/apache/ozone/commit/ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "message": "add cleanup table to new class", "committedDate": "2020-06-26T17:35:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNjk4Mw==", "url": "https://github.com/apache/ozone/pull/943#discussion_r446326983", "bodyText": "Should this be removed after we add the annotation?", "author": "xiaoyuyao", "createdAt": "2020-06-26T17:50:53Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketDeleteResponse.java", "diffHunk": "@@ -19,20 +19,29 @@\n package org.apache.hadoop.ozone.om.response.bucket;\n \n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n \n import org.apache.hadoop.ozone.om.OMMetadataManager;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.OMClientResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n import org.apache.hadoop.hdds.utils.db.BatchOperation;\n \n import javax.annotation.Nonnull;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.BUCKET_TABLE;\n+\n /**\n  * Response for DeleteBucket request.\n  */\n+@CleanupTableInfo(cleanupTables = {BUCKET_TABLE})\n public final class OMBucketDeleteResponse extends OMClientResponse {\n \n+  private static final List<String> OPERATED_TABLES =", "originalCommit": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMDUxOA==", "url": "https://github.com/apache/ozone/pull/943#discussion_r446330518", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-26T17:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNjk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzEzOQ==", "url": "https://github.com/apache/ozone/pull/943#discussion_r446327139", "bodyText": "Same as above.", "author": "xiaoyuyao", "createdAt": "2020-06-26T17:51:14Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/response/bucket/OMBucketSetPropertyResponse.java", "diffHunk": "@@ -18,22 +18,31 @@\n package org.apache.hadoop.ozone.om.response.bucket;\n \n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n \n import org.apache.hadoop.ozone.om.OMMetadataManager;\n import org.apache.hadoop.ozone.om.helpers.OmBucketInfo;\n+import org.apache.hadoop.ozone.om.response.CleanupTableInfo;\n import org.apache.hadoop.ozone.om.response.OMClientResponse;\n import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos\n     .OMResponse;\n import org.apache.hadoop.hdds.utils.db.BatchOperation;\n \n import javax.annotation.Nonnull;\n \n+import static org.apache.hadoop.ozone.om.OmMetadataManagerImpl.BUCKET_TABLE;\n+\n /**\n  * Response for SetBucketProperty request.\n  */\n+@CleanupTableInfo(cleanupTables = {BUCKET_TABLE})\n public class OMBucketSetPropertyResponse extends OMClientResponse {\n   private OmBucketInfo omBucketInfo;\n \n+  private static final List<String> OPERATED_TABLES =", "originalCommit": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMDU0OA==", "url": "https://github.com/apache/ozone/pull/943#discussion_r446330548", "bodyText": "Done", "author": "bharatviswa504", "createdAt": "2020-06-26T17:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTY2MQ==", "url": "https://github.com/apache/ozone/pull/943#discussion_r446329661", "bodyText": "Can we add a unit test on response class that misses annotation?", "author": "xiaoyuyao", "createdAt": "2020-06-26T17:56:32Z", "path": "hadoop-ozone/ozone-manager/src/main/java/org/apache/hadoop/ozone/om/ratis/OzoneManagerDoubleBuffer.java", "diffHunk": "@@ -353,29 +368,62 @@ private void flushTransactions() {\n     }\n   }\n \n-  private void cleanupCache(List<Long> lastRatisTransactionIndex) {\n-    // As now only volume and bucket transactions are handled only called\n-    // cleanupCache on bucketTable.\n-    // TODO: After supporting all write operations we need to call\n-    //  cleanupCache on the tables only when buffer has entries for that table.\n-    omMetadataManager.getBucketTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getVolumeTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getUserTable().cleanupCache(lastRatisTransactionIndex);\n-\n-    //TODO: Optimization we can do here is for key transactions we can only\n-    // cleanup cache when it is key commit transaction. In this way all\n-    // intermediate transactions for a key will be read from in-memory cache.\n-    omMetadataManager.getOpenKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getKeyTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getDeletedTable().cleanupCache(lastRatisTransactionIndex);\n-    omMetadataManager.getMultipartInfoTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getS3SecretTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getDelegationTokenTable().cleanupCache(\n-        lastRatisTransactionIndex);\n-    omMetadataManager.getPrefixTable().cleanupCache(lastRatisTransactionIndex);\n+  /**\n+   * Set cleanup epoch for the DoubleBufferEntry.\n+   * @param entry\n+   * @param cleanupEpochs\n+   */\n+  private void setCleanupEpoch(DoubleBufferEntry entry, Map<String,\n+      List<Long>> cleanupEpochs) {\n+    // Add epochs depending on operated tables. In this way\n+    // cleanup will be called only when required.\n+\n+    // As bucket and volume table is full cache add cleanup\n+    // epochs only when request is delete to cleanup deleted\n+    // entries.\n+\n+    String opName =\n+        entry.getResponse().getOMResponse().getCmdType().name();\n+\n+    if (opName.toLowerCase().contains(VOLUME) ||\n+        opName.toLowerCase().contains(BUCKET)) {\n+      if (DeleteBucket.name().equals(opName)\n+          || DeleteVolume.name().equals(opName)) {\n+        addCleanupEntry(entry, cleanupEpochs);\n+      }\n+    } else {\n+      addCleanupEntry(entry, cleanupEpochs);\n+    }\n+  }\n+\n+\n+  private void addCleanupEntry(DoubleBufferEntry entry, Map<String,\n+      List<Long>> cleanupEpochs) {\n+    Class<? extends OMClientResponse> responseClass =\n+        entry.getResponse().getClass();\n+    CleanupTableInfo cleanupTableInfo =\n+        responseClass.getAnnotation(CleanupTableInfo.class);\n+    if (cleanupTableInfo != null) {\n+      String[] cleanupTables = cleanupTableInfo.cleanupTables();\n+      for (String table : cleanupTables) {\n+        cleanupEpochs.computeIfAbsent(table, list -> new ArrayList<>())\n+            .add(entry.getTrxLogIndex());\n+      }\n+    } else {\n+      // This is to catch early errors, when an new response class missed to\n+      // add CleanupTableInfo annotation.\n+      throw new RuntimeException(\"CleanupTableInfo Annotation is missing \" +", "originalCommit": "ac2b771177401a46ecba4e27e6bf53b179d9f1b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMDQ4NA==", "url": "https://github.com/apache/ozone/pull/943#discussion_r446330484", "bodyText": "TestCleanupTableInfo test is added for this purpose.", "author": "bharatviswa504", "createdAt": "2020-06-26T17:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTY2MQ=="}], "type": "inlineReview"}, {"oid": "9c2e326c4763065496f533f269d05e963bce0519", "url": "https://github.com/apache/ozone/commit/9c2e326c4763065496f533f269d05e963bce0519", "message": "review comments", "committedDate": "2020-06-26T17:56:48Z", "type": "commit"}, {"oid": "7f4f817d34d8a6261162f171f3034fabdb07142b", "url": "https://github.com/apache/ozone/commit/7f4f817d34d8a6261162f171f3034fabdb07142b", "message": "add class name which does not have annotation", "committedDate": "2020-06-26T18:02:39Z", "type": "commit"}, {"oid": "35b07d391cd0f970ea530437a940a412e5d640fa", "url": "https://github.com/apache/ozone/commit/35b07d391cd0f970ea530437a940a412e5d640fa", "message": "fix checkstyle", "committedDate": "2020-06-26T18:03:31Z", "type": "commit"}]}