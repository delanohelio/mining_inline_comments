{"pr_number": 656, "pr_title": "HDDS-3142. Create isolated enviornment for OM to test it without SCM.", "pr_createdAt": "2020-03-10T11:43:02Z", "pr_url": "https://github.com/apache/ozone/pull/656", "timeline": [{"oid": "977f740b0fc1f861186abddde5b2fb0c735d9dd4", "url": "https://github.com/apache/ozone/commit/977f740b0fc1f861186abddde5b2fb0c735d9dd4", "message": "HDDS-3142. Fake scm implementation for OM tests\n\ncleanup fake topology", "committedDate": "2020-03-09T12:48:37Z", "type": "commit"}, {"oid": "df300450f9b6786d7184b73bfbe717267cb24cac", "url": "https://github.com/apache/ozone/commit/df300450f9b6786d7184b73bfbe717267cb24cac", "message": "Merge remote-tracking branch 'origin/master' into HDDS-3142", "committedDate": "2020-03-10T17:24:11Z", "type": "commit"}, {"oid": "38ea07cdd78fac2c50c840573a371c3118ea3ea5", "url": "https://github.com/apache/ozone/commit/38ea07cdd78fac2c50c840573a371c3118ea3ea5", "message": "bumping rocksdb version", "committedDate": "2020-03-10T18:48:20Z", "type": "commit"}, {"oid": "266387121d1ec6b79ba60e612800d9167d64c8ce", "url": "https://github.com/apache/ozone/commit/266387121d1ec6b79ba60e612800d9167d64c8ce", "message": "do not cache index and filter blocks", "committedDate": "2020-03-11T09:18:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNzg5Ng==", "url": "https://github.com/apache/ozone/pull/656#discussion_r391137896", "bodyText": "Intended to be BLOCK_PER_CONTAINER?", "author": "adoroszlai", "createdAt": "2020-03-11T17:24:26Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/freon/FakeScmBlockLocationProtocolClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.freon;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ContainerBlockID;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.GetScmInfoResponseProto;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.AllocateBlockResponse;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.AllocateScmBlockResponseProto;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.AllocateScmBlockResponseProto.Builder;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.SCMBlockLocationRequest;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.SCMBlockLocationResponse;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.Status;\n+import org.apache.hadoop.hdds.protocol.proto.ScmBlockLocationProtocolProtos.Type;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Fake SCM client to return a simulated block location.\n+ */\n+public final class FakeScmBlockLocationProtocolClient {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(FakeScmBlockLocationProtocolClient.class);\n+\n+  public static final int BLOCK_PER_COUNTER = 1000;", "originalCommit": "977f740b0fc1f861186abddde5b2fb0c735d9dd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTMzMg==", "url": "https://github.com/apache/ozone/pull/656#discussion_r391139332", "bodyText": "Isn't node 1 added in the loop, too?", "author": "adoroszlai", "createdAt": "2020-03-11T17:26:35Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/freon/FakeScmContainerLocationProtocolClient.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.freon;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.DatanodeDetailsProto;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.Node;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.NodeState;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryResponseProto;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.NodeQueryResponseProto.Builder;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationRequest;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.ScmContainerLocationResponse.Status;\n+import org.apache.hadoop.hdds.protocol.proto.StorageContainerLocationProtocolProtos.Type;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Fake SCM client to return a simulated block location.\n+ */\n+public final class FakeScmContainerLocationProtocolClient {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(FakeScmContainerLocationProtocolClient.class);\n+\n+  private FakeScmContainerLocationProtocolClient() {\n+  }\n+\n+  public static ScmContainerLocationResponse submitRequest(\n+      ScmContainerLocationRequest req)\n+      throws IOException {\n+    try {\n+      if (req.getCmdType() == Type.QueryNode) {\n+        Builder builder = NodeQueryResponseProto.newBuilder()\n+            .addDatanodes(Node.newBuilder()\n+                .setNodeID(FakeClusterTopology.INSTANCE.getDatanode(1))\n+                .addNodeStates(NodeState.HEALTHY)\n+                .build());", "originalCommit": "977f740b0fc1f861186abddde5b2fb0c735d9dd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MjM3Mg==", "url": "https://github.com/apache/ozone/pull/656#discussion_r394492372", "bodyText": "Yeah, it came from an old code, thanks.", "author": "elek", "createdAt": "2020-03-18T16:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzOTMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NjkzMA==", "url": "https://github.com/apache/ozone/pull/656#discussion_r391146930", "bodyText": "typo: piplines -> pipelines", "author": "adoroszlai", "createdAt": "2020-03-11T17:37:18Z", "path": "hadoop-hdds/common/src/main/java/org/apache/hadoop/hdds/freon/FakeClusterTopology.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hdds.freon;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.DatanodeDetailsProto;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.Pipeline;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.Port;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationFactor;\n+import org.apache.hadoop.hdds.protocol.proto.HddsProtos.ReplicationType;\n+import org.apache.hadoop.hdds.scm.pipeline.PipelineID;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to store pre-generated topology information for load-tests.\n+ */\n+public class FakeClusterTopology {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(FakeClusterTopology.class);\n+\n+  public static final FakeClusterTopology INSTANCE = new FakeClusterTopology();\n+\n+  private List<DatanodeDetailsProto> datanodes = new ArrayList<>();\n+\n+  private List<Pipeline> piplines = new ArrayList<>();", "originalCommit": "977f740b0fc1f861186abddde5b2fb0c735d9dd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "163f400beff52da9399e839cc2ee45e2d9aed0cc", "url": "https://github.com/apache/ozone/commit/163f400beff52da9399e839cc2ee45e2d9aed0cc", "message": "address reviews / typo fixes", "committedDate": "2020-03-18T16:47:37Z", "type": "commit"}]}