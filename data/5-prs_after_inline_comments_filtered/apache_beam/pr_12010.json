{"pr_number": 12010, "pr_title": "[BEAM-10259] Use ref-counted connection to Spanner to prevent multiple connections.", "pr_createdAt": "2020-06-15T12:47:24Z", "pr_url": "https://github.com/apache/beam/pull/12010", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MzY3Nw==", "url": "https://github.com/apache/beam/pull/12010#discussion_r441173677", "bodyText": "Setup for SpannerAccessor are done from BatchSpannerRead, CreateTransactionFn, NaiveSpannerRead, ReadSpannerSchema.\nShould this go into SpannerAccessor directly and when create() is called, should that take care of creating if absent rather than SpannerIO? let me know your thoughts.", "author": "allenpradeep", "createdAt": "2020-06-16T22:18:09Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1373,10 +1375,22 @@ public void processElement(ProcessContext c) {\n   @VisibleForTesting\n   static class WriteToSpannerFn extends DoFn<Iterable<MutationGroup>, Void> {\n \n-    private transient SpannerAccessor spannerAccessor;\n     private final SpannerConfig spannerConfig;\n     private final FailureMode failureMode;\n \n+    // Only create one SpannerAccessor for each different SpannerConfig.", "originalCommit": "13eae2e4b1bb94f1300b357f5ed5aa373ca484ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NTE2NA==", "url": "https://github.com/apache/beam/pull/12010#discussion_r445045164", "bodyText": "Good call -- moved to SpannerAccessor.\nTo make it clearer, SpannerAccessor.create(SpannerConfig) has been renamed to getOrCreate(SpannerConfig).", "author": "nielm", "createdAt": "2020-06-24T17:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTQwMg==", "url": "https://github.com/apache/beam/pull/12010#discussion_r441179402", "bodyText": "I guess this could could be common code in SpannerAccessor(may be part of SpannerAccessor.create()) and could be shared as SpannerAccessor is called from other places as well.", "author": "allenpradeep", "createdAt": "2020-06-16T22:33:43Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerIO.java", "diffHunk": "@@ -1423,18 +1438,46 @@ public void processElement(ProcessContext c) {\n     }\n \n     @Setup\n-    public void setup() throws Exception {\n-      // set up non-serializable values here.\n-      spannerAccessor = SpannerAccessor.create(spannerConfig);\n+    public void setup() {\n+      spannerAccessor = spannerAccessors.get(spannerConfig);\n+      if (spannerAccessor == null) {\n+        synchronized (spannerAccessors) {", "originalCommit": "13eae2e4b1bb94f1300b357f5ed5aa373ca484ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NTM2NQ==", "url": "https://github.com/apache/beam/pull/12010#discussion_r445045365", "bodyText": "as above, moved refcounting into SpannerAccessor.", "author": "nielm", "createdAt": "2020-06-24T17:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTQwMg=="}], "type": "inlineReview"}, {"oid": "b96ceecf975baf500cd4ddd901af431e8f1abe3a", "url": "https://github.com/apache/beam/commit/b96ceecf975baf500cd4ddd901af431e8f1abe3a", "message": "Use ref-counted connection to Spanner to prevent multiple connections.\n\nIn a multi-threaded runner, WriteToSpannerFn.setup() is called for\neach instance on each thread, causing multiple session pools to be\ncreated.\n\nUse a ref-counted SpannerAccessor per database to ensure that there\nis only one session pool per database per process.", "committedDate": "2020-06-24T12:30:06Z", "type": "forcePushed"}, {"oid": "95040853e101eb04f09efe6e60043b3c1db42569", "url": "https://github.com/apache/beam/commit/95040853e101eb04f09efe6e60043b3c1db42569", "message": "Move refcounting to SpannerAccessor", "committedDate": "2020-06-24T17:03:50Z", "type": "forcePushed"}, {"oid": "1ca688480c9824e0f9573458f6596593fabf3868", "url": "https://github.com/apache/beam/commit/1ca688480c9824e0f9573458f6596593fabf3868", "message": "Use ref-counted connection to Spanner to prevent multiple connections.\n\nIn a multi-threaded runner, WriteToSpannerFn.setup() is called for\neach instance on each thread, causing multiple session pools to be\ncreated.\n\nUse a ref-counted SpannerAccessor per database to ensure that there\nis only one session pool per database per process.\n\nPut the refcounting in SpannerAccessor so that it will be used\nwith all Spanner connections.", "committedDate": "2020-06-24T17:07:32Z", "type": "forcePushed"}, {"oid": "24f248c3c5b34262988dd900317573332f5a2a0a", "url": "https://github.com/apache/beam/commit/24f248c3c5b34262988dd900317573332f5a2a0a", "message": "Use ref-counted connection to Spanner to prevent multiple connections.\n\nIn a multi-threaded runner, WriteToSpannerFn.setup() is called for\neach instance on each thread, causing multiple session pools to be\ncreated.\n\nUse a ref-counted SpannerAccessor per database to ensure that there\nis only one session pool per database per process.\n\nPut the refcounting in SpannerAccessor so that it will be used\nwith all Spanner connections.", "committedDate": "2020-06-24T17:12:30Z", "type": "commit"}, {"oid": "24f248c3c5b34262988dd900317573332f5a2a0a", "url": "https://github.com/apache/beam/commit/24f248c3c5b34262988dd900317573332f5a2a0a", "message": "Use ref-counted connection to Spanner to prevent multiple connections.\n\nIn a multi-threaded runner, WriteToSpannerFn.setup() is called for\neach instance on each thread, causing multiple session pools to be\ncreated.\n\nUse a ref-counted SpannerAccessor per database to ensure that there\nis only one session pool per database per process.\n\nPut the refcounting in SpannerAccessor so that it will be used\nwith all Spanner connections.", "committedDate": "2020-06-24T17:12:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMDAxMA==", "url": "https://github.com/apache/beam/pull/12010#discussion_r445110010", "bodyText": "NIT: Should we maintain this function for compatibility sake? There might be external customers who may be using create call in their template. Would they be affected when they start using this code.\nInternally, this can call getOrCreate()", "author": "allenpradeep", "createdAt": "2020-06-24T19:06:32Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/spanner/SpannerAccessor.java", "diffHunk": "@@ -31,33 +31,73 @@\n import io.grpc.ClientCall;\n import io.grpc.ClientInterceptor;\n import io.grpc.MethodDescriptor;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.beam.sdk.options.ValueProvider;\n import org.apache.beam.sdk.util.ReleaseInfo;\n import org.joda.time.Duration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /** Manages lifecycle of {@link DatabaseClient} and {@link Spanner} instances. */\n class SpannerAccessor implements AutoCloseable {\n+  private static final Logger LOG = LoggerFactory.getLogger(SpannerAccessor.class);\n+\n   // A common user agent token that indicates that this request was originated from Apache Beam.\n   private static final String USER_AGENT_PREFIX = \"Apache_Beam_Java\";\n \n+  // Only create one SpannerAccessor for each different SpannerConfig.\n+  private static final ConcurrentHashMap<SpannerConfig, SpannerAccessor> spannerAccessors =\n+      new ConcurrentHashMap<>();\n+\n+  // Keep reference counts of each SpannerAccessor's usage so that we can close\n+  // it when it is no longer in use.\n+  private static final ConcurrentHashMap<SpannerConfig, AtomicInteger> refcounts =\n+      new ConcurrentHashMap<>();\n+\n   private final Spanner spanner;\n   private final DatabaseClient databaseClient;\n   private final BatchClient batchClient;\n   private final DatabaseAdminClient databaseAdminClient;\n+  private final SpannerConfig spannerConfig;\n \n   private SpannerAccessor(\n       Spanner spanner,\n       DatabaseClient databaseClient,\n       DatabaseAdminClient databaseAdminClient,\n-      BatchClient batchClient) {\n+      BatchClient batchClient,\n+      SpannerConfig spannerConfig) {\n     this.spanner = spanner;\n     this.databaseClient = databaseClient;\n     this.databaseAdminClient = databaseAdminClient;\n     this.batchClient = batchClient;\n+    this.spannerConfig = spannerConfig;\n   }\n \n-  static SpannerAccessor create(SpannerConfig spannerConfig) {", "originalCommit": "24f248c3c5b34262988dd900317573332f5a2a0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNjkyNg==", "url": "https://github.com/apache/beam/pull/12010#discussion_r445436926", "bodyText": "Its a package-private class -- noone else will be using it.", "author": "nielm", "createdAt": "2020-06-25T09:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMDAxMA=="}], "type": "inlineReview"}]}