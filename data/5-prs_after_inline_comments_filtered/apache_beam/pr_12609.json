{"pr_number": 12609, "pr_title": "[BEAM-10699] Logging BigQuery streaming insert tail latencies", "pr_createdAt": "2020-08-18T01:13:43Z", "pr_url": "https://github.com/apache/beam/pull/12609", "timeline": [{"oid": "ed8d4c5b32a438f14d996985d24ca6cb5ae8e017", "url": "https://github.com/apache/beam/commit/ed8d4c5b32a438f14d996985d24ca6cb5ae8e017", "message": "[BEAM-10699] Logging BigQuery streaming insert tail latencies", "committedDate": "2020-08-18T02:57:27Z", "type": "forcePushed"}, {"oid": "ffd1b114ceb68adda532bbde9332dba64b16c89f", "url": "https://github.com/apache/beam/commit/ffd1b114ceb68adda532bbde9332dba64b16c89f", "message": "[BEAM-10699] Logging BigQuery streaming insert tail latencies", "committedDate": "2020-08-18T07:06:00Z", "type": "forcePushed"}, {"oid": "77083a480c4f4975882a38311f8ce25297165023", "url": "https://github.com/apache/beam/commit/77083a480c4f4975882a38311f8ce25297165023", "message": "[BEAM-10699] Logging BigQuery streaming insert tail latencies", "committedDate": "2020-08-19T00:21:10Z", "type": "commit"}, {"oid": "77083a480c4f4975882a38311f8ce25297165023", "url": "https://github.com/apache/beam/commit/77083a480c4f4975882a38311f8ce25297165023", "message": "[BEAM-10699] Logging BigQuery streaming insert tail latencies", "committedDate": "2020-08-19T00:21:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxMzY2NQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472613665", "bodyText": "Why restrict this to not allow negatives? Any range of numbers for bucket boundaries is valid", "author": "ajamato", "createdAt": "2020-08-19T02:45:23Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A histogram that supports estimated percentile with linear interpolation. */\n+public class Histogram {\n+  private static final Logger LOG = LoggerFactory.getLogger(Histogram.class);\n+\n+  private static final int DEFAULT_NUM_OF_BUCKETS = 50;\n+\n+  private final double rangeFrom;\n+  private final double rangeTo;\n+  private final int numOfBuckets;\n+\n+  private long[] buckets;\n+  private final double bucketSize;\n+  private long totalNumOfRecords;\n+\n+  private final boolean ignoreOutOfRangeRecord;\n+\n+  private Histogram(\n+      double rangeFrom, double rangeTo, int numOfBuckets, boolean ignoreOutOfRangeRecord) {\n+    if (rangeFrom < 0) {\n+      throw new RuntimeException(String.format(\"only positive range allowed: %f\", rangeFrom));\n+    }\n+    if (rangeFrom >= rangeTo) {\n+      throw new RuntimeException(\n+          String.format(\"rangeTo should be larger than rangeFrom: [%f, %f)\", rangeFrom, rangeTo));\n+    }\n+    if (numOfBuckets <= 0) {\n+      throw new RuntimeException(\n+          String.format(\"numOfBuckets should be greater than zero: %d\", numOfBuckets));\n+    }\n+    this.rangeFrom = rangeFrom;\n+    this.rangeTo = rangeTo;\n+    this.numOfBuckets = numOfBuckets;\n+    this.ignoreOutOfRangeRecord = ignoreOutOfRangeRecord;\n+    this.buckets = new long[numOfBuckets];\n+    this.bucketSize = (rangeTo - rangeFrom) / numOfBuckets;\n+    this.totalNumOfRecords = 0;\n+  }\n+\n+  /**\n+   * Create a histogram.\n+   *\n+   * @param rangeFrom The minimum value that this histogram can record. Cannot be negative.", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2OTA0Nw==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473769047", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxMzY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxODY1OQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472618659", "bodyText": "I think that we can remove the ignoreOutOfRangeRecord parameter.\nLet the first and last bucket include up to +ve and -ve infinity\ni.e. for n bucket boundaries, the buckets are:\n(-INF, b0), [b0, b1), ... [bn, +INF)", "author": "ajamato", "createdAt": "2020-08-19T02:53:11Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A histogram that supports estimated percentile with linear interpolation. */\n+public class Histogram {\n+  private static final Logger LOG = LoggerFactory.getLogger(Histogram.class);\n+\n+  private static final int DEFAULT_NUM_OF_BUCKETS = 50;\n+\n+  private final double rangeFrom;\n+  private final double rangeTo;\n+  private final int numOfBuckets;\n+\n+  private long[] buckets;\n+  private final double bucketSize;\n+  private long totalNumOfRecords;\n+\n+  private final boolean ignoreOutOfRangeRecord;\n+\n+  private Histogram(\n+      double rangeFrom, double rangeTo, int numOfBuckets, boolean ignoreOutOfRangeRecord) {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2ODkyNA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473768924", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxODY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyMTQzNQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472621435", "bodyText": "Would you mind please re-doing these parameters so that they represent a linear function. i.e.\nbucket boundaries are define by:\nbi = width * x + start\nfor n bucket boundaries, the buckets are:\n(-INF, b0), [b0, b1), ... [bn, +INF)\npublic static Histogram of(\ndouble startBounds, double bucketWidth, int numOfBuckets, boolean ignoreOutOfRangeRecord)\nThis was one of the histogram bucket definition styles we considered here:\nhttps://docs.google.com/document/d/1kiNG2BAR-51pRdBCK4-XFmc0WuIkSuBzeb__Zv8owbU/edit#heading=h.279ygg7gw109\nI'll enhance this later to add constructors for using exponential and explicit buckets.", "author": "ajamato", "createdAt": "2020-08-19T02:57:33Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A histogram that supports estimated percentile with linear interpolation. */\n+public class Histogram {\n+  private static final Logger LOG = LoggerFactory.getLogger(Histogram.class);\n+\n+  private static final int DEFAULT_NUM_OF_BUCKETS = 50;\n+\n+  private final double rangeFrom;\n+  private final double rangeTo;\n+  private final int numOfBuckets;\n+\n+  private long[] buckets;\n+  private final double bucketSize;\n+  private long totalNumOfRecords;\n+\n+  private final boolean ignoreOutOfRangeRecord;\n+\n+  private Histogram(\n+      double rangeFrom, double rangeTo, int numOfBuckets, boolean ignoreOutOfRangeRecord) {\n+    if (rangeFrom < 0) {\n+      throw new RuntimeException(String.format(\"only positive range allowed: %f\", rangeFrom));\n+    }\n+    if (rangeFrom >= rangeTo) {\n+      throw new RuntimeException(\n+          String.format(\"rangeTo should be larger than rangeFrom: [%f, %f)\", rangeFrom, rangeTo));\n+    }\n+    if (numOfBuckets <= 0) {\n+      throw new RuntimeException(\n+          String.format(\"numOfBuckets should be greater than zero: %d\", numOfBuckets));\n+    }\n+    this.rangeFrom = rangeFrom;\n+    this.rangeTo = rangeTo;\n+    this.numOfBuckets = numOfBuckets;\n+    this.ignoreOutOfRangeRecord = ignoreOutOfRangeRecord;\n+    this.buckets = new long[numOfBuckets];\n+    this.bucketSize = (rangeTo - rangeFrom) / numOfBuckets;\n+    this.totalNumOfRecords = 0;\n+  }\n+\n+  /**\n+   * Create a histogram.\n+   *\n+   * @param rangeFrom The minimum value that this histogram can record. Cannot be negative.\n+   * @param rangeTo The maximum value that this histogram can record. Cannot be smaller than or\n+   *     equal to rangeFrom.\n+   * @param numOfBuckets The number of buckets. Larger number of buckets implies a better resolution\n+   *     for percentile estimation.\n+   * @param ignoreOutOfRangeRecord Whether the out-of-range records are discarded. It will throw\n+   *     RuntimeException for the out-of-range records if this is set to false.\n+   * @return a new Histogram instance.\n+   */\n+  public static Histogram of(\n+      double rangeFrom, double rangeTo, int numOfBuckets, boolean ignoreOutOfRangeRecord) {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2ODc2Nw==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473768767", "bodyText": "Done. Refactored Histogram so that we could easily add more bucket types.", "author": "ihji", "createdAt": "2020-08-20T08:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyMTQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyMjU2OQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472622569", "bodyText": "Please place values in the first or last bucket, inlcuding values up to  -INF and +INF", "author": "ajamato", "createdAt": "2020-08-19T02:59:25Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A histogram that supports estimated percentile with linear interpolation. */\n+public class Histogram {\n+  private static final Logger LOG = LoggerFactory.getLogger(Histogram.class);\n+\n+  private static final int DEFAULT_NUM_OF_BUCKETS = 50;\n+\n+  private final double rangeFrom;\n+  private final double rangeTo;\n+  private final int numOfBuckets;\n+\n+  private long[] buckets;\n+  private final double bucketSize;\n+  private long totalNumOfRecords;\n+\n+  private final boolean ignoreOutOfRangeRecord;\n+\n+  private Histogram(\n+      double rangeFrom, double rangeTo, int numOfBuckets, boolean ignoreOutOfRangeRecord) {\n+    if (rangeFrom < 0) {\n+      throw new RuntimeException(String.format(\"only positive range allowed: %f\", rangeFrom));\n+    }\n+    if (rangeFrom >= rangeTo) {\n+      throw new RuntimeException(\n+          String.format(\"rangeTo should be larger than rangeFrom: [%f, %f)\", rangeFrom, rangeTo));\n+    }\n+    if (numOfBuckets <= 0) {\n+      throw new RuntimeException(\n+          String.format(\"numOfBuckets should be greater than zero: %d\", numOfBuckets));\n+    }\n+    this.rangeFrom = rangeFrom;\n+    this.rangeTo = rangeTo;\n+    this.numOfBuckets = numOfBuckets;\n+    this.ignoreOutOfRangeRecord = ignoreOutOfRangeRecord;\n+    this.buckets = new long[numOfBuckets];\n+    this.bucketSize = (rangeTo - rangeFrom) / numOfBuckets;\n+    this.totalNumOfRecords = 0;\n+  }\n+\n+  /**\n+   * Create a histogram.\n+   *\n+   * @param rangeFrom The minimum value that this histogram can record. Cannot be negative.\n+   * @param rangeTo The maximum value that this histogram can record. Cannot be smaller than or\n+   *     equal to rangeFrom.\n+   * @param numOfBuckets The number of buckets. Larger number of buckets implies a better resolution\n+   *     for percentile estimation.\n+   * @param ignoreOutOfRangeRecord Whether the out-of-range records are discarded. It will throw\n+   *     RuntimeException for the out-of-range records if this is set to false.\n+   * @return a new Histogram instance.\n+   */\n+  public static Histogram of(\n+      double rangeFrom, double rangeTo, int numOfBuckets, boolean ignoreOutOfRangeRecord) {\n+    return new Histogram(rangeFrom, rangeTo, numOfBuckets, ignoreOutOfRangeRecord);\n+  }\n+\n+  public static Histogram of(double rangeFrom, double rangeTo) {\n+    return new Histogram(rangeFrom, rangeTo, DEFAULT_NUM_OF_BUCKETS, false);\n+  }\n+\n+  public void record(double... values) {\n+    for (double value : values) {\n+      record(value);\n+    }\n+  }\n+\n+  public synchronized void clear() {\n+    this.buckets = new long[numOfBuckets];\n+    this.totalNumOfRecords = 0;\n+  }\n+\n+  public synchronized void record(double value) {\n+    if (value >= rangeTo || value < rangeFrom) {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjI2MQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473766261", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyMjU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyNDY1OQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472624659", "bodyText": "nit: rename to numBuckets", "author": "ajamato", "createdAt": "2020-08-19T03:02:44Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A histogram that supports estimated percentile with linear interpolation. */\n+public class Histogram {\n+  private static final Logger LOG = LoggerFactory.getLogger(Histogram.class);\n+\n+  private static final int DEFAULT_NUM_OF_BUCKETS = 50;\n+\n+  private final double rangeFrom;\n+  private final double rangeTo;\n+  private final int numOfBuckets;", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjE0OA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473766148", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyNDY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODIzOA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472628238", "bodyText": "Personally, I think this Histogram class is sufficient for now, and we should proceed with this for now.\nThere may be some arguments to use a histogram library in the future. I.e. to support sparsely populated histograms.\nPlease add a TODO to consider implementing with other potential options, such as.\nApache Commons\nhttps://www.baeldung.com/apache-commons-frequency\nGitHub Hdr Histogram\nhttps://github.com/HdrHistogram/HdrHistogram", "author": "ajamato", "createdAt": "2020-08-19T03:08:24Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A histogram that supports estimated percentile with linear interpolation. */\n+public class Histogram {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjAwNA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473766004", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk3ODc1MA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r476978750", "bodyText": "Please add backwards compatibility warnings to this so that we can remove this without breaking users.\nAlso, could you clarify why we could not use an existing implementation ?", "author": "chamikaramj", "createdAt": "2020-08-26T02:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcxMTAwMQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r477711001", "bodyText": "I couldn't find any 3rd party library that satisfies our interface requirements such as exponential or explicit bucket definitions. Also, the current usecase is simple enough that we could avoid introducing additional dependencies.", "author": "ihji", "createdAt": "2020-08-26T23:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyOTkyNw==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472629927", "bodyText": "Please rename to LatencyRecordingHttpRequestInitializer (So that we can possibly update it to use metrics instead of logging)", "author": "ajamato", "createdAt": "2020-08-19T03:11:06Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LoggingHttpRequestInitializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import com.google.api.client.http.HttpExecuteInterceptor;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import java.io.IOException;\n+import org.apache.beam.sdk.util.Histogram;\n+", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTkwNQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473765905", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyOTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMDI1NA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472630254", "bodyText": "Add a comment describing the purpose of this callls, to record the latency of Http based API calls. I.e. for BigQuery IO", "author": "ajamato", "createdAt": "2020-08-19T03:11:38Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LoggingHttpRequestInitializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import com.google.api.client.http.HttpExecuteInterceptor;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import java.io.IOException;\n+import org.apache.beam.sdk.util.Histogram;\n+\n+public class LoggingHttpRequestInitializer implements HttpRequestInitializer {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTgwMw==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473765803", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMDI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMzY5OA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472633698", "bodyText": "30s seems a bit small. What is the timeout set to? I recommend making the maximum at least another 30s or so larger than the timeout.", "author": "ajamato", "createdAt": "2020-08-19T03:17:07Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -80,6 +89,20 @@\n     this.toTableRow = toTableRow;\n   }\n \n+  @Setup\n+  public void setup() {\n+    // record latency upto 30 seconds in the resolution of 20ms\n+    histogram = Histogram.of(0, 30000, 1500, true);", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTY2NQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r473765665", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-08-20T08:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzMzY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNDUyMQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472634521", "bodyText": "Any reason to suspect that this will not log, if we fail a request snd don't attempt further requests? A logger on a periodic interval might make more sense?", "author": "ajamato", "createdAt": "2020-08-19T03:18:34Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -125,6 +148,20 @@ public void finishBundle(FinishBundleContext context) throws Exception {\n     for (ValueInSingleWindow<ErrorT> row : failedInserts) {\n       context.output(failedOutputTag, row.getValue(), row.getTimestamp(), row.getWindow());\n     }\n+\n+    if (histogram.getTotalCount() > options.getLatencyLoggingFrequency()) {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMTI0OA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r474311248", "bodyText": "Changed to use seconds instead of the number of requests. I think setting frequency in time unit is easier and more intuitive.", "author": "ihji", "createdAt": "2020-08-20T22:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNDUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNDkxOA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472634918", "bodyText": "I don't think we should be passing in the histogram to the factory for building the service.", "author": "ajamato", "createdAt": "2020-08-19T03:19:10Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/testing/FakeBigQueryServices.java", "diffHunk": "@@ -68,6 +69,11 @@ public DatasetService getDatasetService(BigQueryOptions bqOptions) {\n     return datasetService;\n   }\n \n+  @Override\n+  public DatasetService getDatasetService(BigQueryOptions bqOptions, Histogram histogram) {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNTUxNw==", "url": "https://github.com/apache/beam/pull/12609#discussion_r472635517", "bodyText": "I don't think we should be passing in the histogram to the factory for building the service. Couldn't we just instantiate it inside the call to newBigQueryClient()", "author": "ajamato", "createdAt": "2020-08-19T03:20:06Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -131,7 +133,12 @@ public JobService getJobService(BigQueryOptions options) {\n \n   @Override\n   public DatasetService getDatasetService(BigQueryOptions options) {\n-    return new DatasetServiceImpl(options);\n+    return new DatasetServiceImpl(options, null);\n+  }\n+\n+  @Override\n+  public DatasetService getDatasetService(BigQueryOptions options, Histogram histogram) {", "originalCommit": "77083a480c4f4975882a38311f8ce25297165023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxMjk5MQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r474312991", "bodyText": "We create a new service instance per bundle, so it would be hard to aggregate the result across multiple bundles if we don't pass a histogram instance from outside of the service constructor.\nWe could also instantiate a histogram object inside the service constructor and merge them later but it's more time consuming (need an iteration over the bucket array).", "author": "ihji", "createdAt": "2020-08-20T22:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzODA4MQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r474338081", "bodyText": "I see, could you rename the variable from \"histogram\" to something describing what the histogram is for, like \"requestLatencies\", \"requestLatenciesHistogram\"", "author": "ajamato", "createdAt": "2020-08-21T00:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1ODMxNQ==", "url": "https://github.com/apache/beam/pull/12609#discussion_r474958315", "bodyText": "done.", "author": "ihji", "createdAt": "2020-08-21T20:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNTUxNw=="}], "type": "inlineReview"}, {"oid": "66a07ac169d8ac90089c12c33aef9ae733dc87a3", "url": "https://github.com/apache/beam/commit/66a07ac169d8ac90089c12c33aef9ae733dc87a3", "message": "refactor Histogram", "committedDate": "2020-08-20T07:53:07Z", "type": "commit"}, {"oid": "bbff98acba150060f281632a981483b13b8dd8ee", "url": "https://github.com/apache/beam/commit/bbff98acba150060f281632a981483b13b8dd8ee", "message": "rename LoggingHttpRequestInitializer", "committedDate": "2020-08-20T08:10:54Z", "type": "commit"}, {"oid": "2d5fdc0aacf1131f91f1a871f7032455a223e911", "url": "https://github.com/apache/beam/commit/2d5fdc0aacf1131f91f1a871f7032455a223e911", "message": "add comments", "committedDate": "2020-08-20T08:34:25Z", "type": "commit"}, {"oid": "aa14896f3632c63e2523ce1295e20015c26bdb35", "url": "https://github.com/apache/beam/commit/aa14896f3632c63e2523ce1295e20015c26bdb35", "message": "use time instead of element count", "committedDate": "2020-08-20T21:00:34Z", "type": "commit"}, {"oid": "a8bcf5b5074d5bb250deb3e21620697b45099034", "url": "https://github.com/apache/beam/commit/a8bcf5b5074d5bb250deb3e21620697b45099034", "message": "change millis to seconds", "committedDate": "2020-08-20T21:17:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNjE5NA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r474336194", "bodyText": "What's the usage pattern here? If you call this one after another for each bucket index, then the histogram can be modified between calls, by another thread.\nMake this private if its only called within the class (which would mean its a non issue)\nIt would be better to copy and return the buckets in a single get call instead\nThough, if you think that's bad for performance, then this might be fine. Though please add a comment warning about this potential threading issue", "author": "ajamato", "createdAt": "2020-08-21T00:05:24Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/Histogram.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.math.RoundingMode;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.math.DoubleMath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A histogram that supports estimated percentile with linear interpolation.\n+ *\n+ * <p>We may consider using Apache Commons or HdrHistogram library in the future for advanced\n+ * features such as sparsely populated histograms.\n+ */\n+public class Histogram {\n+  private static final Logger LOG = LoggerFactory.getLogger(Histogram.class);\n+\n+  private final BucketType bucketType;\n+\n+  private long[] buckets;\n+  private long numOfRecords;\n+  private long numTopRecords;\n+  private long numBottomRecords;\n+\n+  private Histogram(BucketType bucketType) {\n+    this.bucketType = bucketType;\n+    this.buckets = new long[bucketType.getNumBuckets()];\n+    this.numOfRecords = 0;\n+    this.numTopRecords = 0;\n+    this.numBottomRecords = 0;\n+  }\n+\n+  /**\n+   * Create a histogram with linear buckets.\n+   *\n+   * @param start Lower bound of a starting bucket.\n+   * @param width Bucket width. Smaller width implies a better resolution for percentile estimation.\n+   * @param numBuckets The number of buckets. Upper bound of an ending bucket is defined by start +\n+   *     width * numBuckets.\n+   * @return a new Histogram instance.\n+   */\n+  public static Histogram linear(double start, double width, int numBuckets) {\n+    return new Histogram(LinearBuckets.of(start, width, numBuckets));\n+  }\n+\n+  public void record(double... values) {\n+    for (double value : values) {\n+      record(value);\n+    }\n+  }\n+\n+  public synchronized void clear() {\n+    this.buckets = new long[bucketType.getNumBuckets()];\n+    this.numOfRecords = 0;\n+    this.numTopRecords = 0;\n+    this.numBottomRecords = 0;\n+  }\n+\n+  public synchronized void record(double value) {\n+    double rangeTo = bucketType.getRangeTo();\n+    double rangeFrom = bucketType.getRangeFrom();\n+    if (value >= rangeTo) {\n+      LOG.warn(\"record is out of upper bound {}: {}\", rangeTo, value);\n+      numTopRecords++;\n+    } else if (value < rangeFrom) {\n+      LOG.warn(\"record is out of lower bound {}: {}\", rangeFrom, value);\n+      numBottomRecords++;\n+    } else {\n+      buckets[bucketType.getBucketIndex(value)]++;\n+      numOfRecords++;\n+    }\n+  }\n+\n+  public synchronized long getTotalCount() {\n+    return numOfRecords + numTopRecords + numBottomRecords;\n+  }\n+\n+  public synchronized long getCount(int bucketIndex) {\n+    return buckets[bucketIndex];", "originalCommit": "a8bcf5b5074d5bb250deb3e21620697b45099034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2MTY2OA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r474961668", "bodyText": "It's just an accessor for inspecting the value of the internal array.\nAnd yes, I see your concern. The atomicity is not guaranteed if someone tries to access multiple values such as adding all buckets for calculating the total number of elements. I attached the comment.", "author": "ihji", "createdAt": "2020-08-21T20:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNjE5NA=="}], "type": "inlineReview"}, {"oid": "0a925ecef6e80e2d94a81ba871e68c73d0b6deec", "url": "https://github.com/apache/beam/commit/0a925ecef6e80e2d94a81ba871e68c73d0b6deec", "message": "rename histogram to requestLatencies", "committedDate": "2020-08-21T20:27:14Z", "type": "commit"}, {"oid": "9d6e7697a6d557c4563970b5cc51434d2774881b", "url": "https://github.com/apache/beam/commit/9d6e7697a6d557c4563970b5cc51434d2774881b", "message": "add comment for getCount", "committedDate": "2020-08-21T20:38:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5MDkyNA==", "url": "https://github.com/apache/beam/pull/12609#discussion_r476990924", "bodyText": "Did you confirm that there's no performance impact for the default case due to new HTTP request initializer ?", "author": "chamikaramj", "createdAt": "2020-08-26T02:26:50Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -1014,34 +1021,33 @@ private static boolean nextBackOff(Sleeper sleeper, BackOff backoff) throws Inte\n   }\n \n   /** Returns a BigQuery client builder using the specified {@link BigQueryOptions}. */\n-  private static Bigquery.Builder newBigQueryClient(BigQueryOptions options) {\n+  private static Bigquery.Builder newBigQueryClient(\n+      BigQueryOptions options, @Nullable Histogram requestLatencies) {\n     RetryHttpRequestInitializer httpRequestInitializer =\n         new RetryHttpRequestInitializer(ImmutableList.of(404));\n     httpRequestInitializer.setCustomErrors(createBigQueryClientCustomErrors());\n     httpRequestInitializer.setWriteTimeout(options.getHTTPWriteTimeout());\n+    ImmutableList.Builder<HttpRequestInitializer> initBuilder = ImmutableList.builder();\n+    Credentials credential = options.getGcpCredential();\n+    initBuilder.add(\n+        credential == null\n+            ? new NullCredentialInitializer()\n+            : new HttpCredentialsAdapter(credential));\n+    // Do not log 404. It clutters the output and is possibly even required by the\n+    // caller.\n+    initBuilder.add(httpRequestInitializer);\n+    if (requestLatencies != null) {\n+      initBuilder.add(new LatencyRecordingHttpRequestInitializer(requestLatencies));\n+    }\n+    HttpRequestInitializer chainInitializer =", "originalCommit": "9d6e7697a6d557c4563970b5cc51434d2774881b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NTExMg==", "url": "https://github.com/apache/beam/pull/12609#discussion_r477695112", "bodyText": "I didn't observe any performance difference before and after applying this change. Recording is done in a constant time and percentile estimation only requires a linear time depending on the number of buckets (which is also small like few thousands).", "author": "ihji", "createdAt": "2020-08-26T23:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5MDkyNA=="}], "type": "inlineReview"}, {"oid": "b3bb454e17ee7319dd9be7cc5d99fca6be37aacc", "url": "https://github.com/apache/beam/commit/b3bb454e17ee7319dd9be7cc5d99fca6be37aacc", "message": "add experimental annotation", "committedDate": "2020-08-26T23:36:45Z", "type": "commit"}]}