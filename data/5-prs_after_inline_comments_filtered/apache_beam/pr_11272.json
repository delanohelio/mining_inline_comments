{"pr_number": 11272, "pr_title": "[BEAM-9641] Support ZetaSQL DATE type as a Beam LogicalType", "pr_createdAt": "2020-03-31T01:30:19Z", "pr_url": "https://github.com/apache/beam/pull/11272", "timeline": [{"oid": "64f38ddc34bd5e6e30626b1716a7f4f6e9f24fb1", "url": "https://github.com/apache/beam/commit/64f38ddc34bd5e6e30626b1716a7f4f6e9f24fb1", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-04-07T16:25:39Z", "type": "forcePushed"}, {"oid": "7e97fa3c22bcccc86b3ad8991c63dcab3b24abb7", "url": "https://github.com/apache/beam/commit/7e97fa3c22bcccc86b3ad8991c63dcab3b24abb7", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-04-07T16:55:20Z", "type": "forcePushed"}, {"oid": "3003dbba5bb0ff1ded0c83268ff068fdebdf8e74", "url": "https://github.com/apache/beam/commit/3003dbba5bb0ff1ded0c83268ff068fdebdf8e74", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-04-08T04:51:32Z", "type": "forcePushed"}, {"oid": "cca562debb1da1e6f64b995725599e412d11cd09", "url": "https://github.com/apache/beam/commit/cca562debb1da1e6f64b995725599e412d11cd09", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-04-08T04:52:45Z", "type": "forcePushed"}, {"oid": "99bff4495da707dd1f4a4fab090f3dfbe6ad0f10", "url": "https://github.com/apache/beam/commit/99bff4495da707dd1f4a4fab090f3dfbe6ad0f10", "message": "Fix breaking tests in CalciteSQL dialect", "committedDate": "2020-04-28T17:09:43Z", "type": "forcePushed"}, {"oid": "7b890654e6bbfcab79a2f5677f1badd54bd444aa", "url": "https://github.com/apache/beam/commit/7b890654e6bbfcab79a2f5677f1badd54bd444aa", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-04-28T17:16:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5ODQ1Mw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418198453", "bodyText": "nit: Can you clean up the style and call equals on the constant instead of logicalId (which could be null).", "author": "apilloud", "createdAt": "2020-04-30T18:12:58Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamCalcRel.java", "diffHunk": "@@ -427,17 +430,12 @@ private static Expression value(\n \n     private static Expression value(Expression value, Schema.FieldType type) {\n       if (type.getTypeName().isLogicalType()) {\n-        Expression millisField = Expressions.call(value, \"getMillis\");\n         String logicalId = type.getLogicalType().getIdentifier();\n         if (logicalId.equals(TimeType.IDENTIFIER)) {\n-          return nullOr(value, Expressions.convert_(millisField, int.class));\n-        } else if (logicalId.equals(DateType.IDENTIFIER)) {\n-          value =\n-              nullOr(\n-                  value,\n-                  Expressions.convert_(\n-                      Expressions.divide(millisField, Expressions.constant(MILLIS_PER_DAY)),\n-                      int.class));\n+          return nullOr(\n+              value, Expressions.convert_(Expressions.call(value, \"getMillis\"), int.class));\n+        } else if (logicalId.equals(SqlTypes.DATE.getIdentifier())) {", "originalCommit": "7b890654e6bbfcab79a2f5677f1badd54bd444aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1OTY4OQ==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418759689", "bodyText": "what about using a switch statement? Is there any style guidance on using switch on a String in java?", "author": "TheNeuralBit", "createdAt": "2020-05-01T22:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODg3MTgxOQ==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418871819", "bodyText": "Done. I hope I could use a switch statement here, but unfortunately there is no constant IDENTIFIER defined  in the LogicalType class. (I could add it to each concrete SQL logical type I create, but I don't think that is a good style.)", "author": "robinyqiu", "createdAt": "2020-05-02T03:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5ODQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5ODk2NQ==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418198965", "bodyText": "nit: Call equals on constant to avoid null issues.", "author": "apilloud", "createdAt": "2020-04-30T18:13:53Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamEnumerableConverter.java", "diffHunk": "@@ -303,8 +303,8 @@ private static Object fieldToAvatica(Schema.FieldType type, Object beamValue) {\n         String logicalId = type.getLogicalType().getIdentifier();\n         if (logicalId.equals(TimeType.IDENTIFIER)) {\n           return (int) ((ReadableInstant) beamValue).getMillis();\n-        } else if (logicalId.equals(DateType.IDENTIFIER)) {\n-          return (int) (((ReadableInstant) beamValue).getMillis() / MILLIS_PER_DAY);\n+        } else if (logicalId.equals(SqlTypes.DATE.getIdentifier())) {", "originalCommit": "7b890654e6bbfcab79a2f5677f1badd54bd444aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkxODA0MA==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418918040", "bodyText": "Done.", "author": "robinyqiu", "createdAt": "2020-05-02T05:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5ODk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMDAzNw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418210037", "bodyText": "nit: This order of equals is awesome!", "author": "apilloud", "createdAt": "2020-04-30T18:33:54Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlUtils.java", "diffHunk": "@@ -128,6 +165,17 @@ private static StructField beamFieldToZetaSqlStructField(Field field) {\n     return new StructField(field.getName(), beamFieldTypeToZetaSqlType(field.getType()));\n   }\n \n+  private static Type beamLogicalTypeToZetaSqlType(String identifier) {\n+    if (SqlTypes.DATE.getIdentifier().equals(identifier)) {", "originalCommit": "7b890654e6bbfcab79a2f5677f1badd54bd444aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzE2OQ==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418223169", "bodyText": "I think it is worth documenting that the Long is an offset from an epoch (and what that epoch is).", "author": "apilloud", "createdAt": "2020-04-30T18:57:57Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/logicaltypes/Date.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.schemas.logicaltypes;\n+\n+import java.time.LocalDate;\n+import org.apache.beam.sdk.schemas.Schema;\n+\n+/**\n+ * A date without a time-zone.\n+ *\n+ * <p>It cannot represent an instant on the time-line without additional information such as an", "originalCommit": "7b890654e6bbfcab79a2f5677f1badd54bd444aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkxNzU0Mw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418917543", "bodyText": "Done.", "author": "robinyqiu", "createdAt": "2020-05-02T05:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODg2Nw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418228867", "bodyText": "If I'm reading the correctly, LocalDate is the in memory type (a struct) and Long is the wire format (an offset from epoch)? This conversion could be quite expensive. It appears the Calc nodes both take an offset in this case, when we start to think about performance we might need to change the in memory type to be offset based.", "author": "apilloud", "createdAt": "2020-04-30T19:08:37Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/logicaltypes/Date.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.schemas.logicaltypes;\n+\n+import java.time.LocalDate;\n+import org.apache.beam.sdk.schemas.Schema;\n+\n+/**\n+ * A date without a time-zone.\n+ *\n+ * <p>It cannot represent an instant on the time-line without additional information such as an\n+ * offset or time-zone.\n+ */\n+public class Date implements Schema.LogicalType<LocalDate, Long> {", "originalCommit": "7b890654e6bbfcab79a2f5677f1badd54bd444aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMDg2OA==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418230868", "bodyText": "(If changing the in memory type is going to be difficult in the future, consider doing that now.)", "author": "apilloud", "createdAt": "2020-04-30T19:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc2NDQ1Mw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418764453", "bodyText": "That is unfortunate... but what in-memory type should we use instead? joda.time.LocalDate uses a millisecond long, do we want to add another joda dependency?\nWe could access the base type (wire format type) directly in SQL with Row#getBaseValue, but unfortunately Rows store logical types as the input type (in memory format type), so that wouldn't actually avoid a conversion.", "author": "TheNeuralBit", "createdAt": "2020-05-01T22:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc2NTg0Nw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418765847", "bodyText": "I guess java.sql.Date is another option for a java type backed by millis.", "author": "TheNeuralBit", "createdAt": "2020-05-01T22:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3Mzg5Nw==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418773897", "bodyText": "We should consider not using a JVM, it adds performance overhead too. \ud83e\udd13\nI'm reasonably convinced the wire format is good and the conversion here is lossless, so if there isn't a easy drop-in replacement leave this as is.", "author": "apilloud", "createdAt": "2020-05-01T23:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMDQyNQ==", "url": "https://github.com/apache/beam/pull/11272#discussion_r418920425", "bodyText": "I think Andrew is basically suggesting using a PassThroughLogicalType<Long> as a logical type for DATE. I think we could definitely consider this if performance becomes a problem in the future. (It's not easy to change the in-memory type for Date after it is made public, but we can easily define a new SqlDate.) For now I think we can leave it as is. It's more human readable (e.g. writing tests for DATE type in spec tests is simpler).", "author": "robinyqiu", "createdAt": "2020-05-02T06:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODg2Nw=="}], "type": "inlineReview"}, {"oid": "49e680ddac6d0a71cac3699d12e4833e7e2863a1", "url": "https://github.com/apache/beam/commit/49e680ddac6d0a71cac3699d12e4833e7e2863a1", "message": "Address comments", "committedDate": "2020-05-02T07:15:41Z", "type": "forcePushed"}, {"oid": "fd89885816754ec774715f7f1168ddffd7b08f6e", "url": "https://github.com/apache/beam/commit/fd89885816754ec774715f7f1168ddffd7b08f6e", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-05-06T05:34:40Z", "type": "forcePushed"}, {"oid": "dce14f8b5fd15cacb68e56b43107bdcb068c2814", "url": "https://github.com/apache/beam/commit/dce14f8b5fd15cacb68e56b43107bdcb068c2814", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-05-14T17:55:22Z", "type": "commit"}, {"oid": "dce14f8b5fd15cacb68e56b43107bdcb068c2814", "url": "https://github.com/apache/beam/commit/dce14f8b5fd15cacb68e56b43107bdcb068c2814", "message": "Support ZetaSQL DATE type as a Beam LogicalType", "committedDate": "2020-05-14T17:55:22Z", "type": "forcePushed"}]}