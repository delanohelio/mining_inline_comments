{"pr_number": 11948, "pr_title": "[BEAM-10213] @Ignore: fix the test for testCastToDateWithCase.", "pr_createdAt": "2020-06-08T20:01:02Z", "pr_url": "https://github.com/apache/beam/pull/11948", "timeline": [{"oid": "76436c3faea4f60cf143a3987577e68bf0127160", "url": "https://github.com/apache/beam/commit/76436c3faea4f60cf143a3987577e68bf0127160", "message": "[BEAM-10213] @Ignore: fix the test for testCastToDateWithCase.", "committedDate": "2020-06-08T19:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NzcyNA==", "url": "https://github.com/apache/beam/pull/11948#discussion_r436967724", "bodyText": "SUBSTR counts the first char from position 1.", "author": "amaliujia", "createdAt": "2020-06-08T20:03:25Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3565,19 +3566,16 @@ public void testCaseWithValueNoElseNoMatch() {\n   }\n \n   @Test\n-  @Ignore(\n-      \"Codegen generates code that Janino cannot compile, need further investigation on root\"\n-          + \" cause.\")\n   public void testCastToDateWithCase() {\n     String sql =\n         \"SELECT f_int, \\n\"\n             + \"CASE WHEN CHAR_LENGTH(TRIM(f_string)) = 8 \\n\"\n             + \"    THEN CAST (CONCAT(\\n\"\n-            + \"       SUBSTR(TRIM(f_string), 0, 4) \\n\"\n+            + \"       SUBSTR(TRIM(f_string), 1, 4) \\n\"", "originalCommit": "76436c3faea4f60cf143a3987577e68bf0127160", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTEzNw==", "url": "https://github.com/apache/beam/pull/11948#discussion_r436981137", "bodyText": "I think you don't have to implement a parseDateToLocalDate function yourself. You can use LocalDate.of(y, m, d) or LocalDate.parse(\"yyyy-mm-dd\") directly.", "author": "robinyqiu", "createdAt": "2020-06-08T20:29:28Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -3587,11 +3585,14 @@ public void testCastToDateWithCase() {\n     PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n \n     Schema resultType =\n-        Schema.builder().addInt32Field(\"f_int\").addNullableField(\"f_date\", DATETIME).build();\n+        Schema.builder()\n+            .addInt64Field(\"f_long\")\n+            .addNullableField(\"f_date\", FieldType.logicalType(SqlTypes.DATE))\n+            .build();\n \n     PAssert.that(stream)\n         .containsInAnyOrder(\n-            Row.withSchema(resultType).addValues(1, parseDate(\"2018-10-18\")).build());\n+            Row.withSchema(resultType).addValues(1L, parseDateToLocalDate(\"2018-10-18\")).build());", "originalCommit": "76436c3faea4f60cf143a3987577e68bf0127160", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5Mjk5OA==", "url": "https://github.com/apache/beam/pull/11948#discussion_r436992998", "bodyText": "Thanks!", "author": "amaliujia", "createdAt": "2020-06-08T20:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTEzNw=="}], "type": "inlineReview"}, {"oid": "fd229fd6aaad4d7e42573914afd0556bec3cb322", "url": "https://github.com/apache/beam/commit/fd229fd6aaad4d7e42573914afd0556bec3cb322", "message": "fixup! address comments.", "committedDate": "2020-06-08T20:47:55Z", "type": "commit"}]}