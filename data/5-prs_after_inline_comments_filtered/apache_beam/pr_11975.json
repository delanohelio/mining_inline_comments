{"pr_number": 11975, "pr_title": "[BEAM-9198] BeamSQL aggregation analytics functionality", "pr_createdAt": "2020-06-10T21:46:28Z", "pr_url": "https://github.com/apache/beam/pull/11975", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5NTkwMg==", "url": "https://github.com/apache/beam/pull/11975#discussion_r439795902", "bodyText": "I am wondering if this transform can be reused? https://github.com/apache/beam/blob/master/sdks/java/extensions/sorter/src/main/java/org/apache/beam/sdk/extensions/sorter/SortValues.java", "author": "amaliujia", "createdAt": "2020-06-14T06:12:21Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.BeamBuiltinAggregations;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields =\n+        this.groups.stream()\n+            .map(\n+                anAnalyticGroup -> {\n+                  List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+                  List<Integer> orderByKeys = Lists.newArrayList();\n+                  List<Boolean> orderByDirections = Lists.newArrayList();\n+                  List<Boolean> orderByNullDirections = Lists.newArrayList();\n+                  anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                      .forEach(\n+                          fc -> {\n+                            orderByKeys.add(fc.getFieldIndex());\n+                            orderByDirections.add(\n+                                fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                            orderByNullDirections.add(\n+                                fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                          });\n+                  int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+                  int upperB = Integer.MAX_VALUE; // Unbounded by default\n+                  if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                    lowerB = 0;\n+                  } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                    // pending\n+                  } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                    // pending\n+                  }\n+                  if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                    upperB = 0;\n+                  } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                    // pending\n+                  } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                    // pending\n+                  }\n+                  // Assume a single input for now\n+                  final List<Integer> aggregationFields = Lists.newArrayList();\n+                  anAnalyticGroup.aggCalls.stream()\n+                      .forEach(\n+                          anAggCall -> {\n+                            anAggCall.operands.stream()\n+                                .forEach(\n+                                    anAggCallInput -> {\n+                                      aggregationFields.add(\n+                                          ((RexInputRef) anAggCallInput).getIndex());\n+                                    });\n+                          });\n+                  return new FieldAggregation(\n+                      partitionKeysDef,\n+                      orderByKeys,\n+                      orderByDirections,\n+                      orderByNullDirections,\n+                      lowerB,\n+                      upperB,\n+                      anAnalyticGroup.isRows,\n+                      aggregationFields);\n+                })\n+            .collect(toList());\n+    return new Transform(outputSchema, analyticFields);\n+  }\n+\n+  private static class FieldAggregation implements Serializable {\n+\n+    private List<Integer> partitionKeys;\n+    private List<Integer> orderKeys;\n+    private List<Boolean> orderOrientations;\n+    private List<Boolean> orderNulls;\n+    private int lowerLimit = Integer.MAX_VALUE;\n+    private int upperLimit = Integer.MAX_VALUE;\n+    private boolean rows = true;\n+    private List<Integer> inputFields;\n+    // private AggFunction  ... pending\n+\n+    public FieldAggregation(\n+        List<Integer> partitionKeys,\n+        List<Integer> orderKeys,\n+        List<Boolean> orderOrientations,\n+        List<Boolean> orderNulls,\n+        int lowerLimit,\n+        int upperLimit,\n+        boolean rows,\n+        List<Integer> fields) {\n+      this.partitionKeys = partitionKeys;\n+      this.orderKeys = orderKeys;\n+      this.orderOrientations = orderOrientations;\n+      this.orderNulls = orderNulls;\n+      this.lowerLimit = lowerLimit;\n+      this.upperLimit = upperLimit;\n+      this.rows = rows;\n+      this.inputFields = fields;\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    return inputStat;\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    float multiplier = 1f + 0.125f;\n+    return BeamCostModel.FACTORY.makeCost(\n+        inputStat.getRowCount() * multiplier, inputStat.getRate() * multiplier);\n+  }\n+\n+  private static class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    private Schema outputSchema;\n+    private List<FieldAggregation> aggFields;\n+\n+    public Transform(Schema s, List<FieldAggregation> af) {\n+      this.outputSchema = s;\n+      this.aggFields = af;\n+    }\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      PCollection<Row> r = input.get(0);\n+      for (FieldAggregation af : aggFields) {\n+        org.apache.beam.sdk.schemas.transforms.Group.ByFields<Row> myg =\n+            org.apache.beam.sdk.schemas.transforms.Group.byFieldIds(af.partitionKeys);\n+        r = r.apply(\"partitionBy\", myg);\n+        r = r.apply(\"orderBy\", ParDo.of(sortPartition(af))).setRowSchema(r.getSchema());\n+        r = r.apply(\"aggCall\", ParDo.of(aggField(outputSchema, af))).setRowSchema(outputSchema);\n+      }\n+      return r;\n+    }\n+  }\n+\n+  private static DoFn<Row, Row> aggField(\n+      final Schema outputSchema, final FieldAggregation fieldAgg) {\n+    return new DoFn<Row, Row>() {\n+      @ProcessElement\n+      public void processElement(\n+          @Element Row inputPartition, OutputReceiver<Row> out, ProcessContext c) {\n+        Collection<Row> inputPartitions = inputPartition.getArray(1); // 1 -> value\n+        List<Row> sortedRowsAsList = new ArrayList<Row>(inputPartitions);\n+        for (int idx = 0; idx < sortedRowsAsList.size(); idx++) {\n+          int lowerIndex = idx - fieldAgg.lowerLimit;\n+          int upperIndex = idx + fieldAgg.upperLimit + 1;\n+          lowerIndex = lowerIndex < 0 ? 0 : lowerIndex;\n+          upperIndex = upperIndex > sortedRowsAsList.size() ? sortedRowsAsList.size() : upperIndex;\n+          List<Row> aggRange = sortedRowsAsList.subList(lowerIndex, upperIndex);\n+\n+          // Just concept-proof\n+          // Assume that aggFun = SUM\n+          // Assume dataType = INTEGER\n+          final Combine.CombineFn<Integer, int[], Integer> aggFunction =\n+              (Combine.CombineFn<Integer, int[], Integer>)\n+                  BeamBuiltinAggregations.create(\"SUM\", Schema.FieldType.INT32);\n+          int[] aggAccumulator = aggFunction.createAccumulator();\n+\n+          // Assume a simple expression within SUM($aUniqueDirectField)\n+          final int aggFieldIndex = fieldAgg.inputFields.get(0);\n+\n+          for (Row aggRow : aggRange) {\n+            Integer valueToAgg = aggRow.getInt32(aggFieldIndex);\n+            aggFunction.addInput(aggAccumulator, valueToAgg);\n+          }\n+          Integer aggOutput = aggFunction.extractOutput(aggAccumulator);\n+          List<Object> fieldValues =\n+              Lists.newArrayListWithCapacity(sortedRowsAsList.get(idx).getFieldCount());\n+          fieldValues.addAll(sortedRowsAsList.get(idx).getValues());\n+          fieldValues.add(aggOutput);\n+          Row ou = Row.withSchema(outputSchema).addValues(fieldValues).build();\n+          out.output(ou);\n+        }\n+      }\n+    };\n+  }\n+\n+  private static DoFn<Row, Row> sortPartition(final FieldAggregation fieldAgg) {", "originalCommit": "45d984811bf06e0e5a6d90ca28b21cebaf389f52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5NTk3MQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r439795971", "bodyText": "It does not bad to start from this ParDo though. I posted that transform just for curiosity. Not required to use SortValues at this moment.", "author": "amaliujia", "createdAt": "2020-06-14T06:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5NTkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5NjU1NQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r439796555", "bodyText": "This is nice to use schema's transforms.", "author": "amaliujia", "createdAt": "2020-06-14T06:25:00Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.BeamBuiltinAggregations;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields =\n+        this.groups.stream()\n+            .map(\n+                anAnalyticGroup -> {\n+                  List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+                  List<Integer> orderByKeys = Lists.newArrayList();\n+                  List<Boolean> orderByDirections = Lists.newArrayList();\n+                  List<Boolean> orderByNullDirections = Lists.newArrayList();\n+                  anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                      .forEach(\n+                          fc -> {\n+                            orderByKeys.add(fc.getFieldIndex());\n+                            orderByDirections.add(\n+                                fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                            orderByNullDirections.add(\n+                                fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                          });\n+                  int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+                  int upperB = Integer.MAX_VALUE; // Unbounded by default\n+                  if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                    lowerB = 0;\n+                  } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                    // pending\n+                  } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                    // pending\n+                  }\n+                  if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                    upperB = 0;\n+                  } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                    // pending\n+                  } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                    // pending\n+                  }\n+                  // Assume a single input for now\n+                  final List<Integer> aggregationFields = Lists.newArrayList();\n+                  anAnalyticGroup.aggCalls.stream()\n+                      .forEach(\n+                          anAggCall -> {\n+                            anAggCall.operands.stream()\n+                                .forEach(\n+                                    anAggCallInput -> {\n+                                      aggregationFields.add(\n+                                          ((RexInputRef) anAggCallInput).getIndex());\n+                                    });\n+                          });\n+                  return new FieldAggregation(\n+                      partitionKeysDef,\n+                      orderByKeys,\n+                      orderByDirections,\n+                      orderByNullDirections,\n+                      lowerB,\n+                      upperB,\n+                      anAnalyticGroup.isRows,\n+                      aggregationFields);\n+                })\n+            .collect(toList());\n+    return new Transform(outputSchema, analyticFields);\n+  }\n+\n+  private static class FieldAggregation implements Serializable {\n+\n+    private List<Integer> partitionKeys;\n+    private List<Integer> orderKeys;\n+    private List<Boolean> orderOrientations;\n+    private List<Boolean> orderNulls;\n+    private int lowerLimit = Integer.MAX_VALUE;\n+    private int upperLimit = Integer.MAX_VALUE;\n+    private boolean rows = true;\n+    private List<Integer> inputFields;\n+    // private AggFunction  ... pending\n+\n+    public FieldAggregation(\n+        List<Integer> partitionKeys,\n+        List<Integer> orderKeys,\n+        List<Boolean> orderOrientations,\n+        List<Boolean> orderNulls,\n+        int lowerLimit,\n+        int upperLimit,\n+        boolean rows,\n+        List<Integer> fields) {\n+      this.partitionKeys = partitionKeys;\n+      this.orderKeys = orderKeys;\n+      this.orderOrientations = orderOrientations;\n+      this.orderNulls = orderNulls;\n+      this.lowerLimit = lowerLimit;\n+      this.upperLimit = upperLimit;\n+      this.rows = rows;\n+      this.inputFields = fields;\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    return inputStat;\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    float multiplier = 1f + 0.125f;\n+    return BeamCostModel.FACTORY.makeCost(\n+        inputStat.getRowCount() * multiplier, inputStat.getRate() * multiplier);\n+  }\n+\n+  private static class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    private Schema outputSchema;\n+    private List<FieldAggregation> aggFields;\n+\n+    public Transform(Schema s, List<FieldAggregation> af) {\n+      this.outputSchema = s;\n+      this.aggFields = af;\n+    }\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      PCollection<Row> r = input.get(0);\n+      for (FieldAggregation af : aggFields) {\n+        org.apache.beam.sdk.schemas.transforms.Group.ByFields<Row> myg =\n+            org.apache.beam.sdk.schemas.transforms.Group.byFieldIds(af.partitionKeys);", "originalCommit": "45d984811bf06e0e5a6d90ca28b21cebaf389f52", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5NjY4Mg==", "url": "https://github.com/apache/beam/pull/11975#discussion_r439796682", "bodyText": "Interesting. I didn't know that there is no aggregate calls in WindowRel.\nDo you know where those calls are defined?", "author": "amaliujia", "createdAt": "2020-06-14T06:26:56Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.BeamBuiltinAggregations;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexInputRef;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(", "originalCommit": "45d984811bf06e0e5a6d90ca28b21cebaf389f52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTA1MA==", "url": "https://github.com/apache/beam/pull/11975#discussion_r439799050", "bodyText": "O now I see. The calls are in Group.", "author": "amaliujia", "createdAt": "2020-06-14T07:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5NjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5Njc3Ng==", "url": "https://github.com/apache/beam/pull/11975#discussion_r439796776", "bodyText": "Can you paste logical plan of this query in to comments? Just to help me better understand what Calcite produces at least on Logical plan level.", "author": "amaliujia", "createdAt": "2020-06-14T06:28:08Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamAnalyticFunctionsExperimentTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * A simple Analytic Functions experiment for BeamSQL created in order to understand the query\n+ * processing workflow of BeamSQL and Calcite.\n+ */\n+public class BeamAnalyticFunctionsExperimentTest extends BeamSqlDslBase {\n+\n+  /**\n+   * Table schema and data taken from\n+   * https://cloud.google.com/bigquery/docs/reference/standard-sql/analytic-function-concepts#produce_table\n+   *\n+   * <p>Compute a cumulative sum query taken from\n+   * https://cloud.google.com/bigquery/docs/reference/standard-sql/analytic-function-concepts#compute_a_cumulative_sum\n+   */\n+  @Test\n+  public void testOverCumulativeSum() throws Exception {\n+    pipeline.enableAbandonedNodeEnforcement(false);\n+    Schema schema =\n+        Schema.builder()\n+            .addStringField(\"item\")\n+            .addStringField(\"category\")\n+            .addInt32Field(\"purchases\")\n+            .build();\n+    PCollection<Row> inputRows =\n+        pipeline\n+            .apply(\n+                Create.of(\n+                    TestUtils.rowsBuilderOf(schema)\n+                        .addRows(\n+                            \"kale\",\n+                            \"vegetable\",\n+                            23,\n+                            \"orange\",\n+                            \"fruit\",\n+                            2,\n+                            \"cabbage\",\n+                            \"vegetable\",\n+                            9,\n+                            \"apple\",\n+                            \"fruit\",\n+                            8,\n+                            \"leek\",\n+                            \"vegetable\",\n+                            2,\n+                            \"lettuce\",\n+                            \"vegetable\",\n+                            10)\n+                        .getRows()))\n+            .setRowSchema(schema);\n+    String sql =\n+        \"SELECT item, purchases, category, sum(purchases) over \"\n+            + \"(PARTITION BY category ORDER BY purchases ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\"\n+            + \" as total_purchases  FROM PCOLLECTION\";", "originalCommit": "45d984811bf06e0e5a6d90ca28b21cebaf389f52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3NjY4Mw==", "url": "https://github.com/apache/beam/pull/11975#discussion_r442376683", "bodyText": "BeamCalcRel(expr#0..3=[{inputs}], item=[$t0], purchases=[$t2], category=[$t1], total_purchases=[$t3]) BeamWindowRel(window#0=[window(partition {1} order by [2] rows between UNBOUNDED PRECEDING and CURRENT ROW aggs [SUM($2)])]) BeamIOSourceRel(table=[[beam, PCOLLECTION]])", "author": "jhnmora000", "createdAt": "2020-06-18T17:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5Njc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0NzA5Ng==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444547096", "bodyText": "Thanks. Support PartitionBy and OrderBy is huge!", "author": "amaliujia", "createdAt": "2020-06-23T22:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5Njc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0NzMyOA==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444547328", "bodyText": "Add java doc for classes (java doc means comments starts with /* and ends with */", "author": "amaliujia", "createdAt": "2020-06-23T22:40:39Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0OTc1Mg==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444549752", "bodyText": "Based on your implementation below, it will be really awesome that you add what is supported or what are constrains. Then you can gradually update this java doc once you add new features.", "author": "amaliujia", "createdAt": "2020-06-23T22:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0NzMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0NzcwNQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444547705", "bodyText": "Add a test that includes DESC for ORDER BY?", "author": "amaliujia", "createdAt": "2020-06-23T22:41:46Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0ODE1NA==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444548154", "bodyText": "Add a test or add a checkArgument to disable (either one works for me) for NULL last or NULL first in ORDER BY.\nFor NULL handling, depends on you, you can leave it for future PRs.", "author": "amaliujia", "createdAt": "2020-06-23T22:43:07Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0OTMxNw==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444549317", "bodyText": "Better to use checkArgument to stop execution when you are seeing an unsupported case.\nSee: https://www.baeldung.com/guava-preconditions", "author": "amaliujia", "createdAt": "2020-06-23T22:46:29Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0OTM1NQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444549355", "bodyText": "Same", "author": "amaliujia", "createdAt": "2020-06-23T22:46:38Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0OTM5OQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444549399", "bodyText": "Same", "author": "amaliujia", "createdAt": "2020-06-23T22:46:45Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0OTQyNw==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444549427", "bodyText": "Same", "author": "amaliujia", "createdAt": "2020-06-23T22:46:49Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                // pending", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1MDA5Nw==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444550097", "bodyText": "Even though you will stop executions on some unsupported cases, I think it is still ok to keep this class definition (e.g. no need to remove those unused field).", "author": "amaliujia", "createdAt": "2020-06-23T22:48:52Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                // pending\n+              }\n+              final int lowerBFinal = lowerB;\n+              final int upperBFinal = upperB;\n+              List<AggregateCall> aggregateCalls = anAnalyticGroup.getAggregateCalls(this);\n+              aggregateCalls.stream()\n+                  .forEach(\n+                      anAggCall -> {\n+                        List<Integer> argList = anAggCall.getArgList();\n+                        Schema.Field field =\n+                            CalciteUtils.toField(anAggCall.getName(), anAggCall.getType());\n+                        Combine.CombineFn combineFn =\n+                            AggregationCombineFnAdapter.createCombineFn(\n+                                anAggCall, field, anAggCall.getAggregation().getName());\n+                        FieldAggregation fieldAggregation =\n+                            new FieldAggregation(", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1MDI5Mw==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444550293", "bodyText": "Add a function java doc to describe your choice of cost and why.", "author": "amaliujia", "createdAt": "2020-06-23T22:49:29Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                // pending\n+              }\n+              final int lowerBFinal = lowerB;\n+              final int upperBFinal = upperB;\n+              List<AggregateCall> aggregateCalls = anAnalyticGroup.getAggregateCalls(this);\n+              aggregateCalls.stream()\n+                  .forEach(\n+                      anAggCall -> {\n+                        List<Integer> argList = anAggCall.getArgList();\n+                        Schema.Field field =\n+                            CalciteUtils.toField(anAggCall.getName(), anAggCall.getType());\n+                        Combine.CombineFn combineFn =\n+                            AggregationCombineFnAdapter.createCombineFn(\n+                                anAggCall, field, anAggCall.getAggregation().getName());\n+                        FieldAggregation fieldAggregation =\n+                            new FieldAggregation(\n+                                partitionKeysDef,\n+                                orderByKeys,\n+                                orderByDirections,\n+                                orderByNullDirections,\n+                                lowerBFinal,\n+                                upperBFinal,\n+                                anAnalyticGroup.isRows,\n+                                argList,\n+                                combineFn,\n+                                field);\n+                        analyticFields.add(fieldAggregation);\n+                      });\n+            });\n+\n+    return new Transform(outputSchema, analyticFields);\n+  }\n+\n+  private static class FieldAggregation implements Serializable {\n+\n+    private List<Integer> partitionKeys;\n+    private List<Integer> orderKeys;\n+    private List<Boolean> orderOrientations;\n+    private List<Boolean> orderNulls;\n+    private int lowerLimit = Integer.MAX_VALUE;\n+    private int upperLimit = Integer.MAX_VALUE;\n+    private boolean rows = true;\n+    private List<Integer> inputFields;\n+    private Combine.CombineFn combineFn;\n+    private Schema.Field outputField;\n+\n+    public FieldAggregation(\n+        List<Integer> partitionKeys,\n+        List<Integer> orderKeys,\n+        List<Boolean> orderOrientations,\n+        List<Boolean> orderNulls,\n+        int lowerLimit,\n+        int upperLimit,\n+        boolean rows,\n+        List<Integer> inputFields,\n+        Combine.CombineFn combineFn,\n+        Schema.Field outputField) {\n+      this.partitionKeys = partitionKeys;\n+      this.orderKeys = orderKeys;\n+      this.orderOrientations = orderOrientations;\n+      this.orderNulls = orderNulls;\n+      this.lowerLimit = lowerLimit;\n+      this.upperLimit = upperLimit;\n+      this.rows = rows;\n+      this.inputFields = inputFields;\n+      this.combineFn = combineFn;\n+      this.outputField = outputField;\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    return inputStat;\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1MjM5MQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444552391", "bodyText": "The mock key generation here could be simplified by, something like\n              windowedStream\n                  .apply(WithKeys.of(\"dummy\"))\n                  .apply(GroupByKey.create())\n\nnote that maybe do not for many schema manipulation.", "author": "amaliujia", "createdAt": "2020-06-23T22:55:48Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                // pending\n+              }\n+              final int lowerBFinal = lowerB;\n+              final int upperBFinal = upperB;\n+              List<AggregateCall> aggregateCalls = anAnalyticGroup.getAggregateCalls(this);\n+              aggregateCalls.stream()\n+                  .forEach(\n+                      anAggCall -> {\n+                        List<Integer> argList = anAggCall.getArgList();\n+                        Schema.Field field =\n+                            CalciteUtils.toField(anAggCall.getName(), anAggCall.getType());\n+                        Combine.CombineFn combineFn =\n+                            AggregationCombineFnAdapter.createCombineFn(\n+                                anAggCall, field, anAggCall.getAggregation().getName());\n+                        FieldAggregation fieldAggregation =\n+                            new FieldAggregation(\n+                                partitionKeysDef,\n+                                orderByKeys,\n+                                orderByDirections,\n+                                orderByNullDirections,\n+                                lowerBFinal,\n+                                upperBFinal,\n+                                anAnalyticGroup.isRows,\n+                                argList,\n+                                combineFn,\n+                                field);\n+                        analyticFields.add(fieldAggregation);\n+                      });\n+            });\n+\n+    return new Transform(outputSchema, analyticFields);\n+  }\n+\n+  private static class FieldAggregation implements Serializable {\n+\n+    private List<Integer> partitionKeys;\n+    private List<Integer> orderKeys;\n+    private List<Boolean> orderOrientations;\n+    private List<Boolean> orderNulls;\n+    private int lowerLimit = Integer.MAX_VALUE;\n+    private int upperLimit = Integer.MAX_VALUE;\n+    private boolean rows = true;\n+    private List<Integer> inputFields;\n+    private Combine.CombineFn combineFn;\n+    private Schema.Field outputField;\n+\n+    public FieldAggregation(\n+        List<Integer> partitionKeys,\n+        List<Integer> orderKeys,\n+        List<Boolean> orderOrientations,\n+        List<Boolean> orderNulls,\n+        int lowerLimit,\n+        int upperLimit,\n+        boolean rows,\n+        List<Integer> inputFields,\n+        Combine.CombineFn combineFn,\n+        Schema.Field outputField) {\n+      this.partitionKeys = partitionKeys;\n+      this.orderKeys = orderKeys;\n+      this.orderOrientations = orderOrientations;\n+      this.orderNulls = orderNulls;\n+      this.lowerLimit = lowerLimit;\n+      this.upperLimit = upperLimit;\n+      this.rows = rows;\n+      this.inputFields = inputFields;\n+      this.combineFn = combineFn;\n+      this.outputField = outputField;\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    return inputStat;\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    float multiplier = 1f + 0.125f;\n+    return BeamCostModel.FACTORY.makeCost(\n+        inputStat.getRowCount() * multiplier, inputStat.getRate() * multiplier);\n+  }\n+\n+  private static class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    private Schema outputSchema;\n+    private List<FieldAggregation> aggFields;\n+\n+    public Transform(Schema schema, List<FieldAggregation> fieldAgg) {\n+      this.outputSchema = schema;\n+      this.aggFields = fieldAgg;\n+    }\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      PCollection<Row> inputData = input.get(0);\n+      Schema inputSchema = inputData.getSchema();\n+      for (FieldAggregation af : aggFields) {\n+        if (af.partitionKeys.isEmpty()) {\n+          // This sections simulate a KV Row\n+          // Similar to the output of Group.byFieldIds\n+          // When no partitions are specified\n+          Schema inputSch = inputData.getSchema();", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1Mjg3Ng==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444552876", "bodyText": "Can you skip sort transform when there is no order by? Also leave a comment to say migrate to SortValues transform in the future.", "author": "amaliujia", "createdAt": "2020-06-23T22:57:24Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                // pending\n+              }\n+              final int lowerBFinal = lowerB;\n+              final int upperBFinal = upperB;\n+              List<AggregateCall> aggregateCalls = anAnalyticGroup.getAggregateCalls(this);\n+              aggregateCalls.stream()\n+                  .forEach(\n+                      anAggCall -> {\n+                        List<Integer> argList = anAggCall.getArgList();\n+                        Schema.Field field =\n+                            CalciteUtils.toField(anAggCall.getName(), anAggCall.getType());\n+                        Combine.CombineFn combineFn =\n+                            AggregationCombineFnAdapter.createCombineFn(\n+                                anAggCall, field, anAggCall.getAggregation().getName());\n+                        FieldAggregation fieldAggregation =\n+                            new FieldAggregation(\n+                                partitionKeysDef,\n+                                orderByKeys,\n+                                orderByDirections,\n+                                orderByNullDirections,\n+                                lowerBFinal,\n+                                upperBFinal,\n+                                anAnalyticGroup.isRows,\n+                                argList,\n+                                combineFn,\n+                                field);\n+                        analyticFields.add(fieldAggregation);\n+                      });\n+            });\n+\n+    return new Transform(outputSchema, analyticFields);\n+  }\n+\n+  private static class FieldAggregation implements Serializable {\n+\n+    private List<Integer> partitionKeys;\n+    private List<Integer> orderKeys;\n+    private List<Boolean> orderOrientations;\n+    private List<Boolean> orderNulls;\n+    private int lowerLimit = Integer.MAX_VALUE;\n+    private int upperLimit = Integer.MAX_VALUE;\n+    private boolean rows = true;\n+    private List<Integer> inputFields;\n+    private Combine.CombineFn combineFn;\n+    private Schema.Field outputField;\n+\n+    public FieldAggregation(\n+        List<Integer> partitionKeys,\n+        List<Integer> orderKeys,\n+        List<Boolean> orderOrientations,\n+        List<Boolean> orderNulls,\n+        int lowerLimit,\n+        int upperLimit,\n+        boolean rows,\n+        List<Integer> inputFields,\n+        Combine.CombineFn combineFn,\n+        Schema.Field outputField) {\n+      this.partitionKeys = partitionKeys;\n+      this.orderKeys = orderKeys;\n+      this.orderOrientations = orderOrientations;\n+      this.orderNulls = orderNulls;\n+      this.lowerLimit = lowerLimit;\n+      this.upperLimit = upperLimit;\n+      this.rows = rows;\n+      this.inputFields = inputFields;\n+      this.combineFn = combineFn;\n+      this.outputField = outputField;\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    return inputStat;\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    float multiplier = 1f + 0.125f;\n+    return BeamCostModel.FACTORY.makeCost(\n+        inputStat.getRowCount() * multiplier, inputStat.getRate() * multiplier);\n+  }\n+\n+  private static class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    private Schema outputSchema;\n+    private List<FieldAggregation> aggFields;\n+\n+    public Transform(Schema schema, List<FieldAggregation> fieldAgg) {\n+      this.outputSchema = schema;\n+      this.aggFields = fieldAgg;\n+    }\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      PCollection<Row> inputData = input.get(0);\n+      Schema inputSchema = inputData.getSchema();\n+      for (FieldAggregation af : aggFields) {\n+        if (af.partitionKeys.isEmpty()) {\n+          // This sections simulate a KV Row\n+          // Similar to the output of Group.byFieldIds\n+          // When no partitions are specified\n+          Schema inputSch = inputData.getSchema();\n+          Schema mockKeySchema =\n+              Schema.of(Schema.Field.of(\"mock\", Schema.FieldType.STRING.withNullable(true)));\n+          Schema simulatedKeyValueSchema =\n+              Schema.of(\n+                  Schema.Field.of(\"key\", Schema.FieldType.row(mockKeySchema)),\n+                  Schema.Field.of(\n+                      \"value\", Schema.FieldType.iterable(Schema.FieldType.row(inputSch))));\n+          PCollection<Iterable<Row>> apply =\n+              inputData.apply(org.apache.beam.sdk.schemas.transforms.Group.globally());\n+          inputData =\n+              apply\n+                  .apply(ParDo.of(uniquePartition(mockKeySchema, simulatedKeyValueSchema)))\n+                  .setRowSchema(simulatedKeyValueSchema);\n+        } else {\n+          org.apache.beam.sdk.schemas.transforms.Group.ByFields<Row> myg =\n+              org.apache.beam.sdk.schemas.transforms.Group.byFieldIds(af.partitionKeys);\n+          inputData = inputData.apply(\"partitionBy\", myg);\n+        }\n+        inputData =", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1MzExNw==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444553117", "bodyText": "Add a comment to explain what this piece of code is doing. Basically it stops converting in the OVER clause case.", "author": "amaliujia", "createdAt": "2020-06-23T22:58:06Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rule/BeamCalcRule.java", "diffHunk": "@@ -37,7 +40,20 @@ private BeamCalcRule() {\n \n   @Override\n   public boolean matches(RelOptRuleCall x) {\n-    return true;\n+    boolean hasRexOver = false;", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1MzE4NA==", "url": "https://github.com/apache/beam/pull/11975#discussion_r444553184", "bodyText": "Class java doc will be very helpful.", "author": "amaliujia", "createdAt": "2020-06-23T22:58:21Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rule/BeamWindowRule.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rule;\n+\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamLogicalConvention;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamWindowRel;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.Convention;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.convert.ConverterRule;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.logical.LogicalWindow;\n+\n+public class BeamWindowRule extends ConverterRule {", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNzMyOQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r445107329", "bodyText": "In fact, if there is no order by but only partition by, combine per key will be the best API because backend can do combiner lift optimizations, which works as follow:\nKV -> GroupByKey -> KV -> Combine\ncan be optimized as\nKV -> local combine -> K Combined V -> GroupByKey -> Combine all combined Vs.\nSo basically there could be a pre-combine before shuffle (GroupByKey), and after that each worker will only need to combine those pre-combined value (because of associativity rule).  This optimization will reduce lots of data through shuffle.\nI think this can be left for a future work. Please log a JIRA to document this idea.", "author": "amaliujia", "createdAt": "2020-06-24T19:01:21Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/rel/BeamWindowRel.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.impl.rel;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.BeamCostModel;\n+import org.apache.beam.sdk.extensions.sql.impl.planner.NodeStats;\n+import org.apache.beam.sdk.extensions.sql.impl.transform.agg.AggregationCombineFnAdapter;\n+import org.apache.beam.sdk.extensions.sql.impl.utils.CalciteUtils;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.Combine;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionList;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptCluster;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelOptPlanner;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.plan.RelTraitSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelFieldCollation;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.RelNode;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.AggregateCall;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.core.Window;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.metadata.RelMetadataQuery;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rel.type.RelDataType;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexLiteral;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+\n+public class BeamWindowRel extends Window implements BeamRelNode {\n+  public BeamWindowRel(\n+      RelOptCluster cluster,\n+      RelTraitSet traitSet,\n+      RelNode input,\n+      List<RexLiteral> constants,\n+      RelDataType rowType,\n+      List<Group> groups) {\n+    super(cluster, traitSet, input, constants, rowType, groups);\n+  }\n+\n+  @Override\n+  public PTransform<PCollectionList<Row>, PCollection<Row>> buildPTransform() {\n+    Schema outputSchema = CalciteUtils.toSchema(getRowType());\n+    final List<FieldAggregation> analyticFields = Lists.newArrayList();\n+    this.groups.stream()\n+        .forEach(\n+            anAnalyticGroup -> {\n+              List<Integer> partitionKeysDef = anAnalyticGroup.keys.toList();\n+              List<Integer> orderByKeys = Lists.newArrayList();\n+              List<Boolean> orderByDirections = Lists.newArrayList();\n+              List<Boolean> orderByNullDirections = Lists.newArrayList();\n+              anAnalyticGroup.orderKeys.getFieldCollations().stream()\n+                  .forEach(\n+                      fc -> {\n+                        orderByKeys.add(fc.getFieldIndex());\n+                        orderByDirections.add(\n+                            fc.direction == RelFieldCollation.Direction.ASCENDING);\n+                        orderByNullDirections.add(\n+                            fc.nullDirection == RelFieldCollation.NullDirection.FIRST);\n+                      });\n+              int lowerB = Integer.MAX_VALUE; // Unbounded by default\n+              int upperB = Integer.MAX_VALUE; // Unbounded by default\n+              if (anAnalyticGroup.lowerBound.isCurrentRow()) {\n+                lowerB = 0;\n+              } else if (anAnalyticGroup.lowerBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.lowerBound.isFollowing()) {\n+                // pending\n+              }\n+              if (anAnalyticGroup.upperBound.isCurrentRow()) {\n+                upperB = 0;\n+              } else if (anAnalyticGroup.upperBound.isPreceding()) {\n+                // pending\n+              } else if (anAnalyticGroup.upperBound.isFollowing()) {\n+                // pending\n+              }\n+              final int lowerBFinal = lowerB;\n+              final int upperBFinal = upperB;\n+              List<AggregateCall> aggregateCalls = anAnalyticGroup.getAggregateCalls(this);\n+              aggregateCalls.stream()\n+                  .forEach(\n+                      anAggCall -> {\n+                        List<Integer> argList = anAggCall.getArgList();\n+                        Schema.Field field =\n+                            CalciteUtils.toField(anAggCall.getName(), anAggCall.getType());\n+                        Combine.CombineFn combineFn =\n+                            AggregationCombineFnAdapter.createCombineFn(\n+                                anAggCall, field, anAggCall.getAggregation().getName());\n+                        FieldAggregation fieldAggregation =\n+                            new FieldAggregation(\n+                                partitionKeysDef,\n+                                orderByKeys,\n+                                orderByDirections,\n+                                orderByNullDirections,\n+                                lowerBFinal,\n+                                upperBFinal,\n+                                anAnalyticGroup.isRows,\n+                                argList,\n+                                combineFn,\n+                                field);\n+                        analyticFields.add(fieldAggregation);\n+                      });\n+            });\n+\n+    return new Transform(outputSchema, analyticFields);\n+  }\n+\n+  private static class FieldAggregation implements Serializable {\n+\n+    private List<Integer> partitionKeys;\n+    private List<Integer> orderKeys;\n+    private List<Boolean> orderOrientations;\n+    private List<Boolean> orderNulls;\n+    private int lowerLimit = Integer.MAX_VALUE;\n+    private int upperLimit = Integer.MAX_VALUE;\n+    private boolean rows = true;\n+    private List<Integer> inputFields;\n+    private Combine.CombineFn combineFn;\n+    private Schema.Field outputField;\n+\n+    public FieldAggregation(\n+        List<Integer> partitionKeys,\n+        List<Integer> orderKeys,\n+        List<Boolean> orderOrientations,\n+        List<Boolean> orderNulls,\n+        int lowerLimit,\n+        int upperLimit,\n+        boolean rows,\n+        List<Integer> inputFields,\n+        Combine.CombineFn combineFn,\n+        Schema.Field outputField) {\n+      this.partitionKeys = partitionKeys;\n+      this.orderKeys = orderKeys;\n+      this.orderOrientations = orderOrientations;\n+      this.orderNulls = orderNulls;\n+      this.lowerLimit = lowerLimit;\n+      this.upperLimit = upperLimit;\n+      this.rows = rows;\n+      this.inputFields = inputFields;\n+      this.combineFn = combineFn;\n+      this.outputField = outputField;\n+    }\n+  }\n+\n+  @Override\n+  public NodeStats estimateNodeStats(RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    return inputStat;\n+  }\n+\n+  @Override\n+  public BeamCostModel beamComputeSelfCost(RelOptPlanner planner, RelMetadataQuery mq) {\n+    NodeStats inputStat = BeamSqlRelUtils.getNodeStats(this.input, mq);\n+    float multiplier = 1f + 0.125f;\n+    return BeamCostModel.FACTORY.makeCost(\n+        inputStat.getRowCount() * multiplier, inputStat.getRate() * multiplier);\n+  }\n+\n+  private static class Transform extends PTransform<PCollectionList<Row>, PCollection<Row>> {\n+\n+    private Schema outputSchema;\n+    private List<FieldAggregation> aggFields;\n+\n+    public Transform(Schema schema, List<FieldAggregation> fieldAgg) {\n+      this.outputSchema = schema;\n+      this.aggFields = fieldAgg;\n+    }\n+\n+    @Override\n+    public PCollection<Row> expand(PCollectionList<Row> input) {\n+      PCollection<Row> inputData = input.get(0);\n+      Schema inputSchema = inputData.getSchema();\n+      for (FieldAggregation af : aggFields) {\n+        if (af.partitionKeys.isEmpty()) {\n+          // This sections simulate a KV Row\n+          // Similar to the output of Group.byFieldIds\n+          // When no partitions are specified\n+          Schema inputSch = inputData.getSchema();\n+          Schema mockKeySchema =\n+              Schema.of(Schema.Field.of(\"mock\", Schema.FieldType.STRING.withNullable(true)));\n+          Schema simulatedKeyValueSchema =\n+              Schema.of(\n+                  Schema.Field.of(\"key\", Schema.FieldType.row(mockKeySchema)),\n+                  Schema.Field.of(\n+                      \"value\", Schema.FieldType.iterable(Schema.FieldType.row(inputSch))));\n+          PCollection<Iterable<Row>> apply =\n+              inputData.apply(org.apache.beam.sdk.schemas.transforms.Group.globally());\n+          inputData =\n+              apply\n+                  .apply(ParDo.of(uniquePartition(mockKeySchema, simulatedKeyValueSchema)))\n+                  .setRowSchema(simulatedKeyValueSchema);\n+        } else {\n+          org.apache.beam.sdk.schemas.transforms.Group.ByFields<Row> myg =\n+              org.apache.beam.sdk.schemas.transforms.Group.byFieldIds(af.partitionKeys);\n+          inputData = inputData.apply(\"partitionBy\", myg);", "originalCommit": "c05fca76e7fa2e2c53a3e392dc083d543fe4c0ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2Mjk1MA==", "url": "https://github.com/apache/beam/pull/11975#discussion_r449962950", "bodyText": "I added a comment in the JIRA issue of the project issue", "author": "jhnmora000", "createdAt": "2020-07-06T03:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNzMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTY2MQ==", "url": "https://github.com/apache/beam/pull/11975#discussion_r453159661", "bodyText": "Can you remove the \"Experiment\" from class? I am going to merge this PR so it won't be experiment anymore.", "author": "amaliujia", "createdAt": "2020-07-11T05:44:58Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamAnalyticFunctionsExperimentTest.java", "diffHunk": "@@ -0,0 +1,366 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql;\n+\n+import java.util.List;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.testing.PAssert;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+\n+/**\n+ * A simple Analytic Functions experiment for BeamSQL created in order to understand the query\n+ * processing workflow of BeamSQL and Calcite.\n+ */\n+public class BeamAnalyticFunctionsExperimentTest extends BeamSqlDslBase {", "originalCommit": "65e0732e1ce638b2f3e34a6d75631f453a75ee43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cda6813683c513ec4c3cdcee3299ecdcd683373f", "url": "https://github.com/apache/beam/commit/cda6813683c513ec4c3cdcee3299ecdcd683373f", "message": "[BEAM-9198] BeamSQL aggregation analytics functionality\n\nA simple Analytic Functions experiment for BeamSQL created\nin order to understand the query processing workflow of \nBeamSQL and Calcite.\n\nThe experiment is implemented in the test BeamAnalyticFunctionsExperimentTest.testSimpleOverFunction(), \nwhen executing it a \"BEAM_LOGICAL but does not implement\nthe required interface\" exception is thrown.", "committedDate": "2020-07-14T21:11:16Z", "type": "commit"}, {"oid": "548fe5e0466e2e929a5ab323ba4e6ad23fea864f", "url": "https://github.com/apache/beam/commit/548fe5e0466e2e929a5ab323ba4e6ad23fea864f", "message": "now BeamWindowRule.convert() is executed.", "committedDate": "2020-07-14T21:11:17Z", "type": "commit"}, {"oid": "e4881b5983042526600dbbb9802ff0e968a0b469", "url": "https://github.com/apache/beam/commit/e4881b5983042526600dbbb9802ff0e968a0b469", "message": "Cumulative sum experiment", "committedDate": "2020-07-14T21:11:19Z", "type": "commit"}, {"oid": "6115948f2e67556c0c7f1b6e030f09a7f015c27f", "url": "https://github.com/apache/beam/commit/6115948f2e67556c0c7f1b6e030f09a7f015c27f", "message": "rewrite hard-coded sections", "committedDate": "2020-07-14T21:11:20Z", "type": "commit"}, {"oid": "1866d371b400a39ae97683984818f1e9d2c82ff7", "url": "https://github.com/apache/beam/commit/1866d371b400a39ae97683984818f1e9d2c82ff7", "message": "Fix style warnings", "committedDate": "2020-07-14T21:11:21Z", "type": "commit"}, {"oid": "b2c7334986a7e03c50603041422df460a75f3bab", "url": "https://github.com/apache/beam/commit/b2c7334986a7e03c50603041422df460a75f3bab", "message": "Some improvements\n\n- Add test for ORDER BY DESC.\n- Add Java docs.\n- New registry for Analytic Functions.\n- Remove dummy fields from partition transforms.\n- Add exceptions for unsupported features.\n- Make public GroupByFields.toKVs", "committedDate": "2020-07-14T21:11:22Z", "type": "commit"}, {"oid": "a29d54818c0f2fbb2db2d3c6e925f14685e4d051", "url": "https://github.com/apache/beam/commit/a29d54818c0f2fbb2db2d3c6e925f14685e4d051", "message": "Improvements:\n\n- Add support for bounded windows.\n- Add support for RANGE windows.\n- Add tests for more cases.", "committedDate": "2020-07-14T21:11:23Z", "type": "commit"}, {"oid": "7e536782d6103843dfe65cc3e3ced7c81b53129f", "url": "https://github.com/apache/beam/commit/7e536782d6103843dfe65cc3e3ced7c81b53129f", "message": "Fix style violations", "committedDate": "2020-07-14T21:11:24Z", "type": "commit"}]}