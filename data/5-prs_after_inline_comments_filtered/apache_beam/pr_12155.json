{"pr_number": 12155, "pr_title": "[BEAM-10400] Fix race condition in DirectRunner watermark update", "pr_createdAt": "2020-07-01T19:42:33Z", "pr_url": "https://github.com/apache/beam/pull/12155", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA==", "url": "https://github.com/apache/beam/pull/12155#discussion_r448578714", "bodyText": "We collect here bundles and AppliedPTransforms that have started to process bundle, but have not completed it yet. The reason for that is that the bundle processing might change output watermark of a PTransform before enqueuing the resulting bundle to pendingUpdates of downstream PTransform, which can lead to watermark being updated past the emitted elements.", "author": "je-ik", "createdAt": "2020-07-01T19:43:05Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/QuiescenceDriver.java", "diffHunk": "@@ -70,6 +71,8 @@ public static ExecutionDriver create(\n   private final Map<AppliedPTransform<?, ?, ?>, ConcurrentLinkedQueue<CommittedBundle<?>>>\n       pendingRootBundles;\n   private final Queue<WorkUpdate> pendingWork = new ConcurrentLinkedQueue<>();\n+  private final Map<AppliedPTransform<?, ?, ?>, Collection<CommittedBundle<?>>> inflightBundles =\n+      new ConcurrentHashMap<>();", "originalCommit": "333717387cb4d02a566fb1601d95b1b336b22869", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NjU1OA==", "url": "https://github.com/apache/beam/pull/12155#discussion_r450456558", "bodyText": "The watermark should be held by all timestamps in the bundle, until the bundle is completed and committed.\nCan you move your GitHub review comment into a code comment that explains this field?", "author": "kennknowles", "createdAt": "2020-07-06T20:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczOTY1Nw==", "url": "https://github.com/apache/beam/pull/12155#discussion_r453739657", "bodyText": "Moved the comment to code. One more note - the issue arrises, because of how output watermark of PTransform is directly connected to input watermark of downstream PTransform. Maybe a more \"technically correct\" solution would be to attach output watermark updates to the bundle processing, so that bundle life-cycle would become:\n\nstart bundle\nfinish bundle (and enqueue and resulting bundles to pendingUpdates in downstream PTransform)\nupdate output watermark\n\nBut that would most probably require a more complex refactor.", "author": "je-ik", "createdAt": "2020-07-13T15:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNDIzMg==", "url": "https://github.com/apache/beam/pull/12155#discussion_r459724232", "bodyText": "Yes that sounds about right.", "author": "kennknowles", "createdAt": "2020-07-23T20:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODkwMA==", "url": "https://github.com/apache/beam/pull/12155#discussion_r448578900", "bodyText": "This is removed because it is somewhat duplicate to what StatefulDoFnRunner already does. We can return it back, it is not directly related to purpose of this PR, it is just a cleanup that I did during bug hunting.", "author": "je-ik", "createdAt": "2020-07-01T19:43:32Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java", "diffHunk": "@@ -128,19 +108,6 @@ public void cleanup() throws Exception {\n     final DoFn<KV<K, InputT>, OutputT> doFn = application.getTransform().getDoFn();\n     final DoFnSignature signature = DoFnSignatures.getSignature(doFn.getClass());\n \n-    // If the DoFn is stateful, schedule state clearing.\n-    // It is semantically correct to schedule any number of redundant clear tasks; the\n-    // cache is used to limit the number of tasks to avoid performance degradation.\n-    if (signature.stateDeclarations().size() > 0) {\n-      for (final WindowedValue<?> element : inputBundle.getElements()) {\n-        for (final BoundedWindow window : element.getWindows()) {\n-          cleanupRegistry.get(\n-              AppliedPTransformOutputKeyAndWindow.create(\n-                  application, (StructuralKey<K>) inputBundle.getKey(), window));\n-        }\n-      }\n-    }\n-", "originalCommit": "333717387cb4d02a566fb1601d95b1b336b22869", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1MzMzNQ==", "url": "https://github.com/apache/beam/pull/12155#discussion_r450453335", "bodyText": "Please do make it a separate commit. Because when reading code history it will make more sense. Also single commits can be rolled back. it is fine to have it in the same PR in my opinion.\nI agree that this seems redundant with \n  \n    \n      beam/runners/direct-java/src/main/java/org/apache/beam/runners/direct/ParDoEvaluator.java\n    \n    \n         Line 113\n      in\n      c3d1e5d\n    \n    \n    \n    \n\n        \n          \n           new StatefulDoFnRunner.TimeInternalsCleanupTimer<>( \n        \n    \n  \n\n\nThis code I think predates StatefulDoFnRunner so perhaps this was missed when it was ported to use StatefulDoFnRunner. (I could be wrong; I did not check the git history)", "author": "kennknowles", "createdAt": "2020-07-06T20:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3Mjc1MQ==", "url": "https://github.com/apache/beam/pull/12155#discussion_r453472751", "bodyText": "\ud83d\udc4d", "author": "je-ik", "createdAt": "2020-07-13T08:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTA5MA==", "url": "https://github.com/apache/beam/pull/12155#discussion_r448579090", "bodyText": "It can happen that elements processed inside this bundle set timer, so it is technically better to check this before firing any timer. In practice it probably doesn't matter, because DirectRunner currently apparently doesn't mix bundles with timers and bundles with elements.", "author": "je-ik", "createdAt": "2020-07-01T19:44:01Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/StatefulParDoEvaluatorFactory.java", "diffHunk": "@@ -270,11 +177,13 @@ public void processElement(WindowedValue<KeyedWorkItem<K, KV<K, InputT>>> gbkRes\n         delegateEvaluator.processElement(windowedValue);\n       }\n \n-      Instant currentInputWatermark = timerInternals.currentInputWatermarkTime();\n+      final Instant inputWatermarkTime = timerInternals.currentInputWatermarkTime();\n       PriorityQueue<TimerData> toBeFiredTimers =\n           new PriorityQueue<>(Comparator.comparing(TimerData::getTimestamp));\n       gbkResult.getValue().timersIterable().forEach(toBeFiredTimers::add);\n-      while (!toBeFiredTimers.isEmpty()) {\n+\n+      while (!timerInternals.containsUpdateForTimeBefore(inputWatermarkTime)\n+          && !toBeFiredTimers.isEmpty()) {", "originalCommit": "333717387cb4d02a566fb1601d95b1b336b22869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTQwNw==", "url": "https://github.com/apache/beam/pull/12155#discussion_r448579407", "bodyText": "Not sure what was the purpose for limiting the number of applied updates, but that seems to be wrong - we need to apply all updates at all times, because otherwise we again might not hold the downstream watermark back enough.", "author": "je-ik", "createdAt": "2020-07-01T19:44:44Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/WatermarkManager.java", "diffHunk": "@@ -1110,17 +1109,7 @@ public void updateWatermarks(\n     pendingUpdates.offer(\n         PendingWatermarkUpdate.create(\n             executable, completed, timerUpdate, unprocessedInputs, outputs, earliestHold));\n-    tryApplyPendingUpdates();\n-  }\n-\n-  private void tryApplyPendingUpdates() {\n-    if (refreshLock.tryLock()) {\n-      try {\n-        applyNUpdates(MAX_INCREMENTAL_UPDATES);\n-      } finally {\n-        refreshLock.unlock();\n-      }\n-    }", "originalCommit": "333717387cb4d02a566fb1601d95b1b336b22869", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1NDYxNw==", "url": "https://github.com/apache/beam/pull/12155#discussion_r450454617", "bodyText": "Updates can only move watermarks forward. I think this is just a rate limiting effect. This is from #1287. I believe it is correct. Whenever a bundle is completed, it can allow the watermark to move forward - but not past other holds. In this way, adding updates does not need a shared lock with applying and removing updates.", "author": "kennknowles", "createdAt": "2020-07-06T20:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUwMTExNA==", "url": "https://github.com/apache/beam/pull/12155#discussion_r453501114", "bodyText": "Agree, I misread the code, there is force apply of all updates triggered from EvaluationContext#extractFiredTimers(), which is correct. My tests still pass even after returning this code back.", "author": "je-ik", "createdAt": "2020-07-13T09:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTc1Mg==", "url": "https://github.com/apache/beam/pull/12155#discussion_r448579752", "bodyText": "This was not cleared ever before.", "author": "je-ik", "createdAt": "2020-07-01T19:45:25Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/WatermarkManager.java", "diffHunk": "@@ -1222,6 +1209,7 @@ public synchronized void refreshAll() {\n       while (!toRefresh.isEmpty()) {\n         toRefresh = refreshAllOf(toRefresh);\n       }\n+      pendingRefreshes.clear();", "originalCommit": "333717387cb4d02a566fb1601d95b1b336b22869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "edbdd542d06a5ed5648912e9732a8c76be3a5a08", "url": "https://github.com/apache/beam/commit/edbdd542d06a5ed5648912e9732a8c76be3a5a08", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update", "committedDate": "2020-07-02T12:25:42Z", "type": "forcePushed"}, {"oid": "3134171ae69e1d7184936fdf2956939e6b457a1c", "url": "https://github.com/apache/beam/commit/3134171ae69e1d7184936fdf2956939e6b457a1c", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update", "committedDate": "2020-07-02T12:44:15Z", "type": "forcePushed"}, {"oid": "cb424c1ab3f598333349878ab6f5bf96acd35262", "url": "https://github.com/apache/beam/commit/cb424c1ab3f598333349878ab6f5bf96acd35262", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update", "committedDate": "2020-07-13T10:11:31Z", "type": "forcePushed"}, {"oid": "6d4684d85ae73eaf21733e7bbb1ac0d45847fa99", "url": "https://github.com/apache/beam/commit/6d4684d85ae73eaf21733e7bbb1ac0d45847fa99", "message": "[BEAM-10400] Fix race condition in DirectRunner watermark update", "committedDate": "2020-07-13T10:24:41Z", "type": "commit"}, {"oid": "20b07a582c70a48d6578a012c55ab23156f84bd5", "url": "https://github.com/apache/beam/commit/20b07a582c70a48d6578a012c55ab23156f84bd5", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory", "committedDate": "2020-07-13T10:26:09Z", "type": "forcePushed"}, {"oid": "d7b3ed4ec53143374530c3d8eca56819c92b209f", "url": "https://github.com/apache/beam/commit/d7b3ed4ec53143374530c3d8eca56819c92b209f", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory", "committedDate": "2020-07-13T12:57:58Z", "type": "forcePushed"}, {"oid": "101a493c89f5278190412d0f7e182b41f7451482", "url": "https://github.com/apache/beam/commit/101a493c89f5278190412d0f7e182b41f7451482", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory", "committedDate": "2020-07-13T13:04:08Z", "type": "commit"}, {"oid": "101a493c89f5278190412d0f7e182b41f7451482", "url": "https://github.com/apache/beam/commit/101a493c89f5278190412d0f7e182b41f7451482", "message": "[BEAM-10400] remove redundant state cleanup from StatefulParDoEvaluatorFactory", "committedDate": "2020-07-13T13:04:08Z", "type": "forcePushed"}]}