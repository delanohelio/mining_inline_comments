{"pr_number": 12550, "pr_title": "Follow the same way that BigQuery handles unspecified or duplicate ZetaSQL STRUCT field name", "pr_createdAt": "2020-08-12T18:00:52Z", "pr_url": "https://github.com/apache/beam/pull/12550", "timeline": [{"oid": "d6563c801613daf015e5f54f27ead56947ab7ed3", "url": "https://github.com/apache/beam/commit/d6563c801613daf015e5f54f27ead56947ab7ed3", "message": "Follow the same way that BigQuery handles unspecified or duplicate ZetaSQL STRUCT field name", "committedDate": "2020-08-12T17:52:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA==", "url": "https://github.com/apache/beam/pull/12550#discussion_r469461524", "bodyText": "This does not actually match the behavior of BigQuery. To match BigQuery you should remove the HashSet and instead replace anything starting with _field_ with the correct index for that column.\n(In BigQuery, this condition would be \"\".equals(name) || name.startsWith(\"_field_\"))", "author": "apilloud", "createdAt": "2020-08-12T18:35:03Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -180,12 +182,19 @@ private static RelDataType toCalciteStructType(\n \n   private static List<String> getFieldNameList(List<StructField> fields) {\n     ImmutableList.Builder<String> b = ImmutableList.builder();\n+    Set<String> usedName = new HashSet<>();\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n-      if (\"\".equals(name)) {\n-        name = \"$col\" + i; // avoid empty field names because Beam does not allow duplicate names\n+      // Follow the same way that BigQuery handles unspecified or duplicate field name\n+      if (\"\".equals(name) || usedName.contains(name)) {", "originalCommit": "d6563c801613daf015e5f54f27ead56947ab7ed3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzE2OQ==", "url": "https://github.com/apache/beam/pull/12550#discussion_r469463169", "bodyText": "I run SELECT STRUCT(\"abc\" as a, 3 as a) on BigQuery. The result is a row of 2 fields whose names are f0_.a and f0_._field_2", "author": "robinyqiu", "createdAt": "2020-08-12T18:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NTI1NA==", "url": "https://github.com/apache/beam/pull/12550#discussion_r469465254", "bodyText": "I run SELECT STRUCT(\"abc\" AS _field_22, 3 AS _field_23) on BigQuery. The result is a row of 2 fields whose names are f0_._field_1 and f0_._field_2.", "author": "apilloud", "createdAt": "2020-08-12T18:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NjA4NQ==", "url": "https://github.com/apache/beam/pull/12550#discussion_r469466085", "bodyText": "OK I got your point now. So I believe the condition should be \"\".equals(name) || name.startsWith(\"_field_\") || usedName.contains(name). This way we can avoid throwing the exception.", "author": "robinyqiu", "createdAt": "2020-08-12T18:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA=="}], "type": "inlineReview"}, {"oid": "9dfd39ff1a100ba2b0b43a643b2529e6c0871b79", "url": "https://github.com/apache/beam/commit/9dfd39ff1a100ba2b0b43a643b2529e6c0871b79", "message": "Handle field names starting with _field_", "committedDate": "2020-08-12T18:47:10Z", "type": "commit"}]}