{"pr_number": 10511, "pr_title": "[BEAM-9059] Migrate PTransformTranslation to use string constants", "pr_createdAt": "2020-01-07T00:19:35Z", "pr_url": "https://github.com/apache/beam/pull/10511", "timeline": [{"oid": "d0eb6dd0cf8305c9b5c0bd53a31783337d9ed939", "url": "https://github.com/apache/beam/commit/d0eb6dd0cf8305c9b5c0bd53a31783337d9ed939", "message": "[BEAM-9059] Migrate PTransformTranslation to use string constants", "committedDate": "2020-01-07T00:17:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYwNzcxNQ==", "url": "https://github.com/apache/beam/pull/10511#discussion_r363607715", "bodyText": "Add comment: // Primitives \uff1f(same as line 67)", "author": "sunjincheng121", "createdAt": "2020-01-07T06:31:54Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/PTransformTranslation.java", "diffHunk": "@@ -60,68 +61,131 @@\n  * buffers}.\n  */\n public class PTransformTranslation {\n-\n-  public static final String PAR_DO_TRANSFORM_URN = getUrn(StandardPTransforms.Primitives.PAR_DO);\n-  public static final String FLATTEN_TRANSFORM_URN = getUrn(StandardPTransforms.Primitives.FLATTEN);\n-  public static final String GROUP_BY_KEY_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Primitives.GROUP_BY_KEY);\n-  public static final String IMPULSE_TRANSFORM_URN = getUrn(StandardPTransforms.Primitives.IMPULSE);\n-  public static final String ASSIGN_WINDOWS_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Primitives.ASSIGN_WINDOWS);\n-  public static final String TEST_STREAM_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Primitives.TEST_STREAM);\n-  public static final String MAP_WINDOWS_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Primitives.MAP_WINDOWS);\n-\n+  // We specifically copy the values here so that they can be used in switch case statements\n+  // and we validate that the value matches the actual URN in the static block below.\n+\n+  // Primitives\n+  public static final String PAR_DO_TRANSFORM_URN = \"beam:transform:pardo:v1\";\n+  public static final String FLATTEN_TRANSFORM_URN = \"beam:transform:flatten:v1\";\n+  public static final String GROUP_BY_KEY_TRANSFORM_URN = \"beam:transform:group_by_key:v1\";\n+  public static final String IMPULSE_TRANSFORM_URN = \"beam:transform:impulse:v1\";\n+  public static final String ASSIGN_WINDOWS_TRANSFORM_URN = \"beam:transform:window_into:v1\";\n+  public static final String TEST_STREAM_TRANSFORM_URN = \"beam:transform:teststream:v1\";\n+  public static final String MAP_WINDOWS_TRANSFORM_URN = \"beam:transform:map_windows:v1\";\n+\n+  // DeprecatedPrimitives\n   /**\n    * @deprecated SDKs should move away from creating `Read` transforms and migrate to using Impulse\n    *     + SplittableDoFns.\n    */\n-  @Deprecated\n-  public static final String READ_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.DeprecatedPrimitives.READ);\n+  @Deprecated public static final String READ_TRANSFORM_URN = \"beam:transform:read:v1\";\n+\n   /**\n    * @deprecated runners should move away from translating `CreatePCollectionView` and treat this as\n    *     part of the translation for a `ParDo` side input.\n    */\n   @Deprecated\n-  public static final String CREATE_VIEW_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.DeprecatedPrimitives.CREATE_VIEW);\n+  public static final String CREATE_VIEW_TRANSFORM_URN = \"beam:transform:create_view:v1\";\n \n-  public static final String COMBINE_PER_KEY_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Composites.COMBINE_PER_KEY);\n-  public static final String COMBINE_GLOBALLY_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Composites.COMBINE_GLOBALLY);\n-  public static final String COMBINE_GROUPED_VALUES_TRANSFORM_URN =\n-      getUrn(CombineComponents.COMBINE_GROUPED_VALUES);\n+  // Composites\n+  public static final String COMBINE_PER_KEY_TRANSFORM_URN = \"beam:transform:combine_per_key:v1\";\n+  public static final String COMBINE_GLOBALLY_TRANSFORM_URN = \"beam:transform:combine_globally:v1\";\n+  public static final String RESHUFFLE_URN = \"beam:transform:reshuffle:v1\";\n+  public static final String WRITE_FILES_TRANSFORM_URN = \"beam:transform:write_files:v1\";\n+\n+  // CombineComponents\n   public static final String COMBINE_PER_KEY_PRECOMBINE_TRANSFORM_URN =\n-      getUrn(CombineComponents.COMBINE_PER_KEY_PRECOMBINE);\n+      \"beam:transform:combine_per_key_precombine:v1\";\n   public static final String COMBINE_PER_KEY_MERGE_ACCUMULATORS_TRANSFORM_URN =\n-      getUrn(CombineComponents.COMBINE_PER_KEY_MERGE_ACCUMULATORS);\n+      \"beam:transform:combine_per_key_merge_accumulators:v1\";\n   public static final String COMBINE_PER_KEY_EXTRACT_OUTPUTS_TRANSFORM_URN =\n-      getUrn(CombineComponents.COMBINE_PER_KEY_EXTRACT_OUTPUTS);\n-  public static final String RESHUFFLE_URN = getUrn(StandardPTransforms.Composites.RESHUFFLE);\n-  public static final String WRITE_FILES_TRANSFORM_URN =\n-      getUrn(StandardPTransforms.Composites.WRITE_FILES);\n+      \"beam:transform:combine_per_key_extract_outputs:v1\";\n+  public static final String COMBINE_GROUPED_VALUES_TRANSFORM_URN =\n+      \"beam:transform:combine_grouped_values:v1\";\n \n   // SplittableParDoComponents\n   public static final String SPLITTABLE_PAIR_WITH_RESTRICTION_URN =\n-      getUrn(SplittableParDoComponents.PAIR_WITH_RESTRICTION);\n+      \"beam:transform:sdf_pair_with_restriction:v1\";\n   public static final String SPLITTABLE_SPLIT_RESTRICTION_URN =\n-      getUrn(SplittableParDoComponents.SPLIT_RESTRICTION);\n+      \"beam:transform:sdf_split_restriction:v1\";\n+  /**\n+   * @deprecated runners should move away from using `SplittableProcessKeyedElements` and prefer to\n+   *     internalize any necessary SplittableDoFn expansion.\n+   */\n+  @Deprecated\n   public static final String SPLITTABLE_PROCESS_KEYED_URN =\n-      getUrn(SplittableParDoComponents.PROCESS_KEYED_ELEMENTS);\n+      \"beam:transform:sdf_process_keyed_elements:v1\";\n+\n   public static final String SPLITTABLE_PROCESS_ELEMENTS_URN =\n-      getUrn(SplittableParDoComponents.PROCESS_ELEMENTS);\n+      \"beam:transform:sdf_process_elements:v1\";\n   public static final String SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN =\n-      getUrn(SplittableParDoComponents.SPLIT_AND_SIZE_RESTRICTIONS);\n+      \"beam:transform:sdf_split_and_size_restrictions:v1\";\n   public static final String SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN =\n-      getUrn(SplittableParDoComponents.PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS);\n-\n-  public static final String ITERABLE_SIDE_INPUT =\n-      getUrn(RunnerApi.StandardSideInputTypes.Enum.ITERABLE);\n-  public static final String MULTIMAP_SIDE_INPUT =\n-      getUrn(RunnerApi.StandardSideInputTypes.Enum.MULTIMAP);\n+      \"beam:transform:sdf_process_sized_element_and_restrictions:v1\";\n+\n+  static {\n+    checkState(PAR_DO_TRANSFORM_URN.equals(getUrn(StandardPTransforms.Primitives.PAR_DO)));", "originalCommit": "d0eb6dd0cf8305c9b5c0bd53a31783337d9ed939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NTc4MQ==", "url": "https://github.com/apache/beam/pull/10511#discussion_r363865781", "bodyText": "I'll include that in a followup PR where I change many of the existing getUrn calls as you suggest.", "author": "lukecwik", "createdAt": "2020-01-07T17:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYwNzcxNQ=="}], "type": "inlineReview"}]}