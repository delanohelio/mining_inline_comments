{"pr_number": 13120, "pr_title": "[BEAM-10940] Lengthprefix any input coder for an ProcessBundleDescriptor.", "pr_createdAt": "2020-10-14T22:46:17Z", "pr_url": "https://github.com/apache/beam/pull/13120", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTIzNg==", "url": "https://github.com/apache/beam/pull/13120#discussion_r506265236", "bodyText": "Worth mentioning this will break any existing non-stateful pipelines. We could add another exception here for SDFs, but it's probably better to have a consistent encoding which does not depend on DoFns using state or timers.", "author": "mxm", "createdAt": "2020-10-16T10:24:11Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/ProcessBundleDescriptors.java", "diffHunk": "@@ -141,9 +139,7 @@ private static ExecutableProcessBundleDescriptor fromExecutableStageInternal(\n \n     Map<String, Map<String, TimerSpec>> timerSpecs = forTimerSpecs(stage, components);\n \n-    if (bagUserStateSpecs.size() > 0 || timerSpecs.size() > 0) {\n-      lengthPrefixKeyCoder(stage.getInputPCollection().getId(), components);\n-    }\n+    lengthPrefixAnyInputCoder(stage.getInputPCollection().getId(), components);", "originalCommit": "d78347c63196c69d27a3af05b9cbb9a7f84a6d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzMzUwMA==", "url": "https://github.com/apache/beam/pull/13120#discussion_r506633500", "bodyText": "I would not expect it will break non-stateful pipelines since non-stateful transform doesn't look into this coder?", "author": "boyuanzz", "createdAt": "2020-10-16T17:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjcwMQ==", "url": "https://github.com/apache/beam/pull/13120#discussion_r507826701", "bodyText": "It does, e.g. for buffering data during checkpoints. However, there are usually also other changes in Beam which makes restoring state from previous Beam versions hard.", "author": "mxm", "createdAt": "2020-10-19T15:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxOTY1MQ==", "url": "https://github.com/apache/beam/pull/13120#discussion_r507919651", "bodyText": "In that case, I would image that the buffering data should be encoded/decoded with grpc input coder, which has been lengthperfixed already. Would you like to elaborate more on this?", "author": "boyuanzz", "createdAt": "2020-10-19T17:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyODExNQ==", "url": "https://github.com/apache/beam/pull/13120#discussion_r507928115", "bodyText": "Or do we have some test cases that we can verify?", "author": "boyuanzz", "createdAt": "2020-10-19T17:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzODY2Mw==", "url": "https://github.com/apache/beam/pull/13120#discussion_r508538663", "bodyText": "My bad, the length prefixing here only applies to the coder in the ProcessBundleDescriptor. Indeed, any buffering won't be affected by this because the elements have already been decoded when they are buffered.\nFor the test case, FlinkSavepointITCase should verify that.", "author": "mxm", "createdAt": "2020-10-20T14:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1MzkxMA==", "url": "https://github.com/apache/beam/pull/13120#discussion_r508553910", "bodyText": "I'm wondering, why is length-prefixing the key coder not necessary anymore? Wouldn't the SDK Harness be able to extract a non-length-prefixed key coder even though the input coder has been legth-prefixed? This would then cause a regression like in #9997 if the SDK Harness didn't use the NESTED contex, which it currently does because we had fix this a while ago: \n  \n    \n      beam/sdks/python/apache_beam/runners/worker/bundle_processor.py\n    \n    \n         Line 769\n      in\n      57d2497\n    \n    \n    \n    \n\n        \n          \n           key=self._key_coder.encode_nested(key))), \n        \n    \n  \n\n The idea was to always ensure keys are length-prefixed, so we never run into inconsistent key encodings between the Runner and the SDK Harness.", "author": "mxm", "createdAt": "2020-10-20T14:24:21Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/ProcessBundleDescriptors.java", "diffHunk": "@@ -174,26 +170,18 @@ private static ExecutableProcessBundleDescriptor fromExecutableStageInternal(\n   }\n \n   /**\n-   * Patches the input coder of a stateful transform to ensure that the byte representation of a key\n-   * used to partition the input element at the Runner, matches the key byte representation received\n-   * for state requests and timers from the SDK Harness. Stateful transforms always have a KvCoder\n-   * as input.\n+   * Patches the input coder of the transform to ensure that the byte representation of input used\n+   * at the Runner, matches the byte representation received from the SDK Harness.\n    */\n-  private static void lengthPrefixKeyCoder(\n-      String inputColId, Components.Builder componentsBuilder) {\n-    RunnerApi.PCollection pcollection = componentsBuilder.getPcollectionsOrThrow(inputColId);\n-    RunnerApi.Coder kvCoder = componentsBuilder.getCodersOrThrow(pcollection.getCoderId());\n-    Preconditions.checkState(\n-        ModelCoders.KV_CODER_URN.equals(kvCoder.getSpec().getUrn()),\n-        \"Stateful executable stages must use a KV coder, but is: %s\",\n-        kvCoder.getSpec().getUrn());\n-    String keyCoderId = ModelCoders.getKvCoderComponents(kvCoder).keyCoderId();\n-    // Retain the original coder, but wrap in LengthPrefixCoder\n-    String newKeyCoderId =\n-        LengthPrefixUnknownCoders.addLengthPrefixedCoder(keyCoderId, componentsBuilder, false);\n-    // Replace old key coder with LengthPrefixCoder<old_key_coder>\n-    kvCoder = kvCoder.toBuilder().setComponentCoderIds(0, newKeyCoderId).build();\n-    componentsBuilder.putCoders(pcollection.getCoderId(), kvCoder);\n+  private static void lengthPrefixAnyInputCoder(\n+      String inputPCollectionId, Components.Builder componentsBuilder) {\n+    RunnerApi.PCollection pcollection =\n+        componentsBuilder.getPcollectionsOrThrow(inputPCollectionId);\n+    String newInputCoderId =\n+        LengthPrefixUnknownCoders.addLengthPrefixedCoder(\n+            pcollection.getCoderId(), componentsBuilder, false);\n+    componentsBuilder.putPcollections(\n+        inputPCollectionId, pcollection.toBuilder().setCoderId(newInputCoderId).build());", "originalCommit": "d78347c63196c69d27a3af05b9cbb9a7f84a6d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MDgwNQ==", "url": "https://github.com/apache/beam/pull/13120#discussion_r508560805", "bodyText": "I guess this will still work because if we have a KV Coder we will always end up length-prefixing the key because the KV coder is a known coder and it will recurse into the key afterwards.", "author": "mxm", "createdAt": "2020-10-20T14:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1MzkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MDE3NQ==", "url": "https://github.com/apache/beam/pull/13120#discussion_r509440175", "bodyText": "Yeah that's right. This logic is also verified by the unit test.", "author": "boyuanzz", "createdAt": "2020-10-21T16:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1MzkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MTkyOA==", "url": "https://github.com/apache/beam/pull/13120#discussion_r509441928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                RunnerApi.Coder elementCoder =\n          \n          \n            \n                RunnerApi.Coder keyCoder =", "author": "mxm", "createdAt": "2020-10-21T16:46:13Z", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/ProcessBundleDescriptorsTest.java", "diffHunk": "@@ -151,6 +157,99 @@ public void onTimer() {}\n     ensureLengthPrefixed(timerKeyCoder, originalKeyCoder, pbsCoderMap);\n   }\n \n+  @Test\n+  public void testLengthPrefixingOfInputCoderExecutableStage() throws Exception {\n+    Pipeline p = Pipeline.create();\n+    Coder<Void> voidCoder = VoidCoder.of();\n+    assertThat(ModelCoderRegistrar.isKnownCoder(voidCoder), is(false));\n+    p.apply(\"impulse\", Impulse.create())\n+        .apply(\n+            ParDo.of(\n+                new DoFn<byte[], Void>() {\n+                  @ProcessElement\n+                  public void process(ProcessContext ctxt) {}\n+                }))\n+        .setCoder(voidCoder)\n+        .apply(\n+            ParDo.of(\n+                new DoFn<Void, Void>() {\n+                  @ProcessElement\n+                  public void processElement(\n+                      ProcessContext context, RestrictionTracker<Void, Void> tracker) {}\n+\n+                  @GetInitialRestriction\n+                  public Void getInitialRestriction() {\n+                    return null;\n+                  }\n+\n+                  @NewTracker\n+                  public SomeTracker newTracker(@Restriction Void restriction) {\n+                    return null;\n+                  }\n+                }))\n+        .setCoder(voidCoder);\n+    RunnerApi.Pipeline pipelineProto = PipelineTranslation.toProto(p);\n+    RunnerApi.Pipeline pipelineWithSdfExpanded =\n+        ProtoOverrides.updateTransform(\n+            PTransformTranslation.PAR_DO_TRANSFORM_URN,\n+            pipelineProto,\n+            SplittableParDoExpander.createSizedReplacement());\n+    FusedPipeline fused = GreedyPipelineFuser.fuse(pipelineWithSdfExpanded);\n+    Optional<ExecutableStage> optionalStage =\n+        Iterables.tryFind(\n+            fused.getFusedStages(),\n+            (ExecutableStage stage) ->\n+                stage.getTransforms().stream()\n+                    .anyMatch(\n+                        transform ->\n+                            transform\n+                                .getTransform()\n+                                .getSpec()\n+                                .getUrn()\n+                                .equals(\n+                                    PTransformTranslation\n+                                        .SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN)));\n+    checkState(\n+        optionalStage.isPresent(),\n+        \"Expected a stage with SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN.\");\n+\n+    ExecutableStage stage = optionalStage.get();\n+    PipelineNode.PCollectionNode inputPCollection = stage.getInputPCollection();\n+    Map<String, RunnerApi.Coder> stageCoderMap = stage.getComponents().getCodersMap();\n+    RunnerApi.Coder originalMainInputCoder =\n+        stageCoderMap.get(inputPCollection.getPCollection().getCoderId());\n+\n+    BeamFnApi.ProcessBundleDescriptor pbd =\n+        ProcessBundleDescriptors.fromExecutableStage(\n+                \"test_stage\", stage, Endpoints.ApiServiceDescriptor.getDefaultInstance())\n+            .getProcessBundleDescriptor();\n+    Map<String, RunnerApi.Coder> pbsCoderMap = pbd.getCodersMap();\n+\n+    RunnerApi.Coder pbsMainInputCoder =\n+        pbsCoderMap.get(pbd.getPcollectionsOrThrow(inputPCollection.getId()).getCoderId());\n+\n+    RunnerApi.Coder kvCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(pbsMainInputCoder).keyCoderId());\n+    RunnerApi.Coder elementCoder =", "originalCommit": "d78347c63196c69d27a3af05b9cbb9a7f84a6d09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MjIzOA==", "url": "https://github.com/apache/beam/pull/13120#discussion_r509442238", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                RunnerApi.Coder originalElementCoder =\n          \n          \n            \n                RunnerApi.Coder originalKeyCoder =", "author": "mxm", "createdAt": "2020-10-21T16:46:45Z", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/ProcessBundleDescriptorsTest.java", "diffHunk": "@@ -151,6 +157,99 @@ public void onTimer() {}\n     ensureLengthPrefixed(timerKeyCoder, originalKeyCoder, pbsCoderMap);\n   }\n \n+  @Test\n+  public void testLengthPrefixingOfInputCoderExecutableStage() throws Exception {\n+    Pipeline p = Pipeline.create();\n+    Coder<Void> voidCoder = VoidCoder.of();\n+    assertThat(ModelCoderRegistrar.isKnownCoder(voidCoder), is(false));\n+    p.apply(\"impulse\", Impulse.create())\n+        .apply(\n+            ParDo.of(\n+                new DoFn<byte[], Void>() {\n+                  @ProcessElement\n+                  public void process(ProcessContext ctxt) {}\n+                }))\n+        .setCoder(voidCoder)\n+        .apply(\n+            ParDo.of(\n+                new DoFn<Void, Void>() {\n+                  @ProcessElement\n+                  public void processElement(\n+                      ProcessContext context, RestrictionTracker<Void, Void> tracker) {}\n+\n+                  @GetInitialRestriction\n+                  public Void getInitialRestriction() {\n+                    return null;\n+                  }\n+\n+                  @NewTracker\n+                  public SomeTracker newTracker(@Restriction Void restriction) {\n+                    return null;\n+                  }\n+                }))\n+        .setCoder(voidCoder);\n+    RunnerApi.Pipeline pipelineProto = PipelineTranslation.toProto(p);\n+    RunnerApi.Pipeline pipelineWithSdfExpanded =\n+        ProtoOverrides.updateTransform(\n+            PTransformTranslation.PAR_DO_TRANSFORM_URN,\n+            pipelineProto,\n+            SplittableParDoExpander.createSizedReplacement());\n+    FusedPipeline fused = GreedyPipelineFuser.fuse(pipelineWithSdfExpanded);\n+    Optional<ExecutableStage> optionalStage =\n+        Iterables.tryFind(\n+            fused.getFusedStages(),\n+            (ExecutableStage stage) ->\n+                stage.getTransforms().stream()\n+                    .anyMatch(\n+                        transform ->\n+                            transform\n+                                .getTransform()\n+                                .getSpec()\n+                                .getUrn()\n+                                .equals(\n+                                    PTransformTranslation\n+                                        .SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN)));\n+    checkState(\n+        optionalStage.isPresent(),\n+        \"Expected a stage with SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN.\");\n+\n+    ExecutableStage stage = optionalStage.get();\n+    PipelineNode.PCollectionNode inputPCollection = stage.getInputPCollection();\n+    Map<String, RunnerApi.Coder> stageCoderMap = stage.getComponents().getCodersMap();\n+    RunnerApi.Coder originalMainInputCoder =\n+        stageCoderMap.get(inputPCollection.getPCollection().getCoderId());\n+\n+    BeamFnApi.ProcessBundleDescriptor pbd =\n+        ProcessBundleDescriptors.fromExecutableStage(\n+                \"test_stage\", stage, Endpoints.ApiServiceDescriptor.getDefaultInstance())\n+            .getProcessBundleDescriptor();\n+    Map<String, RunnerApi.Coder> pbsCoderMap = pbd.getCodersMap();\n+\n+    RunnerApi.Coder pbsMainInputCoder =\n+        pbsCoderMap.get(pbd.getPcollectionsOrThrow(inputPCollection.getId()).getCoderId());\n+\n+    RunnerApi.Coder kvCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(pbsMainInputCoder).keyCoderId());\n+    RunnerApi.Coder elementCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(kvCoder).keyCoderId());\n+    RunnerApi.Coder valueKvCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(kvCoder).valueCoderId());\n+    RunnerApi.Coder valueCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(valueKvCoder).keyCoderId());\n+\n+    RunnerApi.Coder originalKvCoder =\n+        stageCoderMap.get(ModelCoders.getKvCoderComponents(originalMainInputCoder).keyCoderId());\n+    RunnerApi.Coder originalElementCoder =", "originalCommit": "d78347c63196c69d27a3af05b9cbb9a7f84a6d09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MjYwOQ==", "url": "https://github.com/apache/beam/pull/13120#discussion_r509442609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ensureLengthPrefixed(elementCoder, originalElementCoder, pbsCoderMap);\n          \n          \n            \n                ensureLengthPrefixed(keyCoder, originalKeyCoder, pbsCoderMap);", "author": "mxm", "createdAt": "2020-10-21T16:47:17Z", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/ProcessBundleDescriptorsTest.java", "diffHunk": "@@ -151,6 +157,99 @@ public void onTimer() {}\n     ensureLengthPrefixed(timerKeyCoder, originalKeyCoder, pbsCoderMap);\n   }\n \n+  @Test\n+  public void testLengthPrefixingOfInputCoderExecutableStage() throws Exception {\n+    Pipeline p = Pipeline.create();\n+    Coder<Void> voidCoder = VoidCoder.of();\n+    assertThat(ModelCoderRegistrar.isKnownCoder(voidCoder), is(false));\n+    p.apply(\"impulse\", Impulse.create())\n+        .apply(\n+            ParDo.of(\n+                new DoFn<byte[], Void>() {\n+                  @ProcessElement\n+                  public void process(ProcessContext ctxt) {}\n+                }))\n+        .setCoder(voidCoder)\n+        .apply(\n+            ParDo.of(\n+                new DoFn<Void, Void>() {\n+                  @ProcessElement\n+                  public void processElement(\n+                      ProcessContext context, RestrictionTracker<Void, Void> tracker) {}\n+\n+                  @GetInitialRestriction\n+                  public Void getInitialRestriction() {\n+                    return null;\n+                  }\n+\n+                  @NewTracker\n+                  public SomeTracker newTracker(@Restriction Void restriction) {\n+                    return null;\n+                  }\n+                }))\n+        .setCoder(voidCoder);\n+    RunnerApi.Pipeline pipelineProto = PipelineTranslation.toProto(p);\n+    RunnerApi.Pipeline pipelineWithSdfExpanded =\n+        ProtoOverrides.updateTransform(\n+            PTransformTranslation.PAR_DO_TRANSFORM_URN,\n+            pipelineProto,\n+            SplittableParDoExpander.createSizedReplacement());\n+    FusedPipeline fused = GreedyPipelineFuser.fuse(pipelineWithSdfExpanded);\n+    Optional<ExecutableStage> optionalStage =\n+        Iterables.tryFind(\n+            fused.getFusedStages(),\n+            (ExecutableStage stage) ->\n+                stage.getTransforms().stream()\n+                    .anyMatch(\n+                        transform ->\n+                            transform\n+                                .getTransform()\n+                                .getSpec()\n+                                .getUrn()\n+                                .equals(\n+                                    PTransformTranslation\n+                                        .SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN)));\n+    checkState(\n+        optionalStage.isPresent(),\n+        \"Expected a stage with SPLITTABLE_PROCESS_SIZED_ELEMENTS_AND_RESTRICTIONS_URN.\");\n+\n+    ExecutableStage stage = optionalStage.get();\n+    PipelineNode.PCollectionNode inputPCollection = stage.getInputPCollection();\n+    Map<String, RunnerApi.Coder> stageCoderMap = stage.getComponents().getCodersMap();\n+    RunnerApi.Coder originalMainInputCoder =\n+        stageCoderMap.get(inputPCollection.getPCollection().getCoderId());\n+\n+    BeamFnApi.ProcessBundleDescriptor pbd =\n+        ProcessBundleDescriptors.fromExecutableStage(\n+                \"test_stage\", stage, Endpoints.ApiServiceDescriptor.getDefaultInstance())\n+            .getProcessBundleDescriptor();\n+    Map<String, RunnerApi.Coder> pbsCoderMap = pbd.getCodersMap();\n+\n+    RunnerApi.Coder pbsMainInputCoder =\n+        pbsCoderMap.get(pbd.getPcollectionsOrThrow(inputPCollection.getId()).getCoderId());\n+\n+    RunnerApi.Coder kvCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(pbsMainInputCoder).keyCoderId());\n+    RunnerApi.Coder elementCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(kvCoder).keyCoderId());\n+    RunnerApi.Coder valueKvCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(kvCoder).valueCoderId());\n+    RunnerApi.Coder valueCoder =\n+        pbsCoderMap.get(ModelCoders.getKvCoderComponents(valueKvCoder).keyCoderId());\n+\n+    RunnerApi.Coder originalKvCoder =\n+        stageCoderMap.get(ModelCoders.getKvCoderComponents(originalMainInputCoder).keyCoderId());\n+    RunnerApi.Coder originalElementCoder =\n+        stageCoderMap.get(ModelCoders.getKvCoderComponents(originalKvCoder).keyCoderId());\n+    RunnerApi.Coder originalvalueKvCoder =\n+        stageCoderMap.get(ModelCoders.getKvCoderComponents(originalKvCoder).valueCoderId());\n+    RunnerApi.Coder originalvalueCoder =\n+        stageCoderMap.get(ModelCoders.getKvCoderComponents(originalvalueKvCoder).keyCoderId());\n+\n+    ensureLengthPrefixed(elementCoder, originalElementCoder, pbsCoderMap);", "originalCommit": "d78347c63196c69d27a3af05b9cbb9a7f84a6d09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc955ded10e0a054d437adf5c7117004de978d46", "url": "https://github.com/apache/beam/commit/bc955ded10e0a054d437adf5c7117004de978d46", "message": "Lengthprefix any input coder for an ProcessBundleDescriptor.", "committedDate": "2020-10-21T17:31:27Z", "type": "commit"}, {"oid": "bc955ded10e0a054d437adf5c7117004de978d46", "url": "https://github.com/apache/beam/commit/bc955ded10e0a054d437adf5c7117004de978d46", "message": "Lengthprefix any input coder for an ProcessBundleDescriptor.", "committedDate": "2020-10-21T17:31:27Z", "type": "forcePushed"}]}