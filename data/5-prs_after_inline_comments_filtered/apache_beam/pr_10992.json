{"pr_number": 10992, "pr_title": "[BEAM-2939] Provide user facing API for reporting the watermark in SplittableDoFns.", "pr_createdAt": "2020-02-27T21:04:02Z", "pr_url": "https://github.com/apache/beam/pull/10992", "timeline": [{"oid": "fc3a17a26e8222d4054dede44c9b73d40eeee1f1", "url": "https://github.com/apache/beam/commit/fc3a17a26e8222d4054dede44c9b73d40eeee1f1", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T21:04:58Z", "type": "forcePushed"}, {"oid": "f96ecbeb5f6d1ff2c7824318468d14acfa09613e", "url": "https://github.com/apache/beam/commit/f96ecbeb5f6d1ff2c7824318468d14acfa09613e", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T21:47:28Z", "type": "forcePushed"}, {"oid": "f8ac3c10ef128d2f1fd186f801820c31f520ae59", "url": "https://github.com/apache/beam/commit/f8ac3c10ef128d2f1fd186f801820c31f520ae59", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T21:52:42Z", "type": "forcePushed"}, {"oid": "36fc1949e88a843efb6dc41a1bf8fcd82bdccfec", "url": "https://github.com/apache/beam/commit/36fc1949e88a843efb6dc41a1bf8fcd82bdccfec", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T22:11:35Z", "type": "forcePushed"}, {"oid": "36a24e0799f51b7a57e890a2458ae98446a7a5ed", "url": "https://github.com/apache/beam/commit/36a24e0799f51b7a57e890a2458ae98446a7a5ed", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T22:13:04Z", "type": "forcePushed"}, {"oid": "18560537b5a48f0cddf566af1592bef504436ce1", "url": "https://github.com/apache/beam/commit/18560537b5a48f0cddf566af1592bef504436ce1", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T22:40:50Z", "type": "forcePushed"}, {"oid": "90f9e64922e450fed0631dc86db5b51b683cc4ac", "url": "https://github.com/apache/beam/commit/90f9e64922e450fed0631dc86db5b51b683cc4ac", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T22:42:31Z", "type": "forcePushed"}, {"oid": "fb42666a4e1aec0413f161c742d8f010ef9fe9f2", "url": "https://github.com/apache/beam/commit/fb42666a4e1aec0413f161c742d8f010ef9fe9f2", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-02-27T22:52:12Z", "type": "forcePushed"}, {"oid": "5a180277f14bea5a7daaa37600a4f3dad4098d26", "url": "https://github.com/apache/beam/commit/5a180277f14bea5a7daaa37600a4f3dad4098d26", "message": "[BEAM-2939] Add support for reporting the watermark in SplittableDoFns.", "committedDate": "2020-03-10T22:17:07Z", "type": "forcePushed"}, {"oid": "feea2ba610aa35344d30bae23a76d18e7b6afe93", "url": "https://github.com/apache/beam/commit/feea2ba610aa35344d30bae23a76d18e7b6afe93", "message": "[BEAM-2939] Implement interfaces and concrete watermark estimators\n\nPlumb watermark estimator, watermark estimator state, and watermark estimator state coder methods through ByteBuddy DoFnInvoker adding method definitions to DoFnSignature and appropriate validation.\n\nThis does not update any of the existing Splittable Dofns to use these watermark estimators or any existing Splittable DoFn \"runners\" (beyond adding throws unsupported operations exception). This is marked as work under BEAM-9430.", "committedDate": "2020-03-13T03:17:38Z", "type": "commit"}, {"oid": "feea2ba610aa35344d30bae23a76d18e7b6afe93", "url": "https://github.com/apache/beam/commit/feea2ba610aa35344d30bae23a76d18e7b6afe93", "message": "[BEAM-2939] Implement interfaces and concrete watermark estimators\n\nPlumb watermark estimator, watermark estimator state, and watermark estimator state coder methods through ByteBuddy DoFnInvoker adding method definitions to DoFnSignature and appropriate validation.\n\nThis does not update any of the existing Splittable Dofns to use these watermark estimators or any existing Splittable DoFn \"runners\" (beyond adding throws unsupported operations exception). This is marked as work under BEAM-9430.", "committedDate": "2020-03-13T03:17:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTk4OA==", "url": "https://github.com/apache/beam/pull/10992#discussion_r392275988", "bodyText": "Note that this terminology deviates from the current getCheckpointMark(). I like it though.", "author": "mxm", "createdAt": "2020-03-13T14:51:17Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/DoFn.java", "diffHunk": "@@ -1070,6 +1091,120 @@ public Duration getAllowedTimestampSkew() {\n   @Experimental(Kind.SPLITTABLE_DO_FN)\n   public @interface NewTracker {}\n \n+  /**\n+   * Annotation for the method that maps an element and restriction to initial watermark estimator\n+   * state for a <a href=\"https://s.apache.org/splittable-do-fn\">splittable</a> {@link DoFn}.\n+   *\n+   * <p>Signature: {@code WatermarkEstimatorStateT getInitialWatermarkState(<arguments>);}\n+   *\n+   * <p>This method must satisfy the following constraints:\n+   *\n+   * <ul>\n+   *   <li>The return type {@code WatermarkEstimatorStateT} defines the watermark state type used\n+   *       within this splittable DoFn. All other methods that use a {@link\n+   *       WatermarkEstimatorState @WatermarkEstimatorState} parameter must use the same type that\n+   *       is used here. It is suggested to use as narrow of a return type definition as possible\n+   *       (for example prefer to use a square type over a shape type as a square is a type of a\n+   *       shape).\n+   *   <li>If one of its arguments is tagged with the {@link Element} annotation, then it will be\n+   *       passed the current element being processed; the argument must be of type {@code InputT}.\n+   *       Note that automatic conversion of {@link Row}s and {@link FieldAccess} parameters are\n+   *       currently unsupported.\n+   *   <li>If one of its arguments is tagged with the {@link Restriction} annotation, then it will\n+   *       be passed the current restriction being processed; the argument must be of type {@code\n+   *       RestrictionT}.\n+   *   <li>If one of its arguments is tagged with the {@link Timestamp} annotation, then it will be\n+   *       passed the timestamp of the current element being processed; the argument must be of type\n+   *       {@link Instant}.\n+   *   <li>If one of its arguments is a subtype of {@link BoundedWindow}, then it will be passed the\n+   *       window of the current element. When applied by {@link ParDo} the subtype of {@link\n+   *       BoundedWindow} must match the type of windows on the input {@link PCollection}. If the\n+   *       window is not accessed a runner may perform additional optimizations.\n+   *   <li>If one of its arguments is of type {@link PaneInfo}, then it will be passed information\n+   *       about the current triggering pane.\n+   *   <li>If one of the parameters is of type {@link PipelineOptions}, then it will be passed the\n+   *       options for the current pipeline.\n+   * </ul>\n+   */\n+  @Documented\n+  @Retention(RetentionPolicy.RUNTIME)\n+  @Target(ElementType.METHOD)\n+  @Experimental(Kind.SPLITTABLE_DO_FN)\n+  public @interface GetInitialWatermarkEstimatorState {}", "originalCommit": "feea2ba610aa35344d30bae23a76d18e7b6afe93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}