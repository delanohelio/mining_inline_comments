{"pr_number": 12601, "pr_title": "[BEAM-9891] Generate query execution summary table after finishing jobs", "pr_createdAt": "2020-08-17T17:59:36Z", "pr_url": "https://github.com/apache/beam/pull/12601", "timeline": [{"oid": "ab432868ee598503314a5e88527ecfd9cd6d777a", "url": "https://github.com/apache/beam/commit/ab432868ee598503314a5e88527ecfd9cd6d777a", "message": "[BEAM-9891] Generate query execution summary table after finishing jobs", "committedDate": "2020-08-17T17:50:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1ODA3OA==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471758078", "bodyText": "Can you replace this with LOG? Here is an example of LOG: https://github.com/apache/beam/blob/master/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/CalciteQueryPlanner.java#L75", "author": "amaliujia", "createdAt": "2020-08-17T20:30:39Z", "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/SqlTransformRunner.java", "diffHunk": "@@ -121,19 +152,26 @@ public static void runUsingSqlTransform(String[] args) throws Exception {\n             String queryString = QueryReader.readQuery(queryNameArr[i]);\n             PCollectionTuple tables = getTables(pipelines[i], csvFormat, queryNameArr[i]);\n \n-            tables\n-                    .apply(\n-                            SqlTransform.query(queryString))\n-                    .apply(\n-                            MapElements.into(TypeDescriptors.strings()).via((Row row) -> row.toString()))\n-                    .apply(TextIO.write()\n-                            .to(resultDirectory + \"/\" + dataSize + \"/\" + pipelines[i].getOptions().getJobName())\n-                            .withSuffix(\".txt\")\n-                            .withNumShards(1));\n+            try {\n+                tables\n+                        .apply(\n+                                SqlTransform.query(queryString))\n+                        .apply(\n+                                MapElements.into(TypeDescriptors.strings()).via((Row row) -> row.toString()))\n+                        .apply(TextIO.write()\n+                                .to(RESULT_DIRECTORY + \"/\" + dataSize + \"/\" + pipelines[i].getOptions().getJobName())\n+                                .withSuffix(\".txt\")\n+                                .withNumShards(1));\n+            } catch (Exception e) {\n+                System.out.println(queryNameArr[i] + \" failed to execute\");", "originalCommit": "ab432868ee598503314a5e88527ecfd9cd6d777a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4NjUwOA==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471786508", "bodyText": "Replaced", "author": "Imfuyuwei", "createdAt": "2020-08-17T21:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1ODA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1OTM4OA==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471759388", "bodyText": "Have also check the state of the PipelineResult: https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/PipelineResult.java#L38?\nMake sure only print successful when job state is successful.", "author": "amaliujia", "createdAt": "2020-08-17T20:33:07Z", "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/SqlTransformRunner.java", "diffHunk": "@@ -97,7 +128,7 @@ public static void runUsingSqlTransform(String[] args) throws Exception {\n \n         // Using ExecutorService and CompletionService to fulfill multi-threading functionality\n         ExecutorService executor = Executors.newFixedThreadPool(nThreads);\n-        CompletionService<PipelineResult> completion = new ExecutorCompletionService<>(executor);\n+        CompletionService<TpcdsRunResult> completion = new ExecutorCompletionService<>(executor);", "originalCommit": "ab432868ee598503314a5e88527ecfd9cd6d777a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1OTYzMg==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471759632", "bodyText": "check pipeline result state.", "author": "amaliujia", "createdAt": "2020-08-17T20:33:41Z", "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/TpcdsRun.java", "diffHunk": "@@ -24,17 +24,30 @@\n /**\n  * To fulfill multi-threaded execution\n  */\n-public class TpcdsRun implements Callable<PipelineResult> {\n+public class TpcdsRun implements Callable<TpcdsRunResult> {\n     private final Pipeline pipeline;\n \n     public TpcdsRun (Pipeline pipeline) {\n         this.pipeline = pipeline;\n     }\n \n     @Override\n-    public PipelineResult call() {\n-        PipelineResult pipelineResult = pipeline.run();\n-        pipelineResult.waitUntilFinish();\n-        return pipelineResult;\n+    public TpcdsRunResult call() {\n+        TpcdsRunResult tpcdsRunResult;\n+\n+        try {\n+            PipelineResult pipelineResult = pipeline.run();\n+            long startTimeStamp = System.currentTimeMillis();\n+            pipelineResult.waitUntilFinish();\n+            long endTimeStamp = System.currentTimeMillis();", "originalCommit": "ab432868ee598503314a5e88527ecfd9cd6d777a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4Nzg1Nw==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471787857", "bodyText": "Check added", "author": "Imfuyuwei", "createdAt": "2020-08-17T21:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1OTYzMg=="}], "type": "inlineReview"}, {"oid": "8e2c9c0b244df4f924bcd365892fb393ec59b2a8", "url": "https://github.com/apache/beam/commit/8e2c9c0b244df4f924bcd365892fb393ec59b2a8", "message": "Print error message using LOG, check PipelineResult's state", "committedDate": "2020-08-17T21:29:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwODY3NQ==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471808675", "bodyText": "Nit: add parentheses around state == State.DONE;, which increases readability.", "author": "amaliujia", "createdAt": "2020-08-17T22:26:40Z", "path": "sdks/java/testing/tpcds/src/main/java/org/apache/beam/sdk/tpcds/TpcdsRun.java", "diffHunk": "@@ -19,22 +19,38 @@\n \n import org.apache.beam.sdk.Pipeline;\n import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineResult.State;\n import java.util.concurrent.Callable;\n \n /**\n  * To fulfill multi-threaded execution\n  */\n-public class TpcdsRun implements Callable<PipelineResult> {\n+public class TpcdsRun implements Callable<TpcdsRunResult> {\n     private final Pipeline pipeline;\n \n     public TpcdsRun (Pipeline pipeline) {\n         this.pipeline = pipeline;\n     }\n \n     @Override\n-    public PipelineResult call() {\n-        PipelineResult pipelineResult = pipeline.run();\n-        pipelineResult.waitUntilFinish();\n-        return pipelineResult;\n+    public TpcdsRunResult call() {\n+        TpcdsRunResult tpcdsRunResult;\n+\n+        try {\n+            PipelineResult pipelineResult = pipeline.run();\n+            long startTimeStamp = System.currentTimeMillis();\n+            State state = pipelineResult.waitUntilFinish();\n+            long endTimeStamp = System.currentTimeMillis();\n+\n+            // Make sure to set the job status to be successful only when pipelineResult's final state is DONE.\n+            boolean isSuccessful = state == State.DONE;", "originalCommit": "8e2c9c0b244df4f924bcd365892fb393ec59b2a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwOTAzMQ==", "url": "https://github.com/apache/beam/pull/12601#discussion_r471809031", "bodyText": "Actually nvm on this.", "author": "amaliujia", "createdAt": "2020-08-17T22:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwODY3NQ=="}], "type": "inlineReview"}]}