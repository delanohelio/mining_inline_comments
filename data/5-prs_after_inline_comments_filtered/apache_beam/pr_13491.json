{"pr_number": 13491, "pr_title": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latenc\u2026", "pr_createdAt": "2020-12-05T01:23:09Z", "pr_url": "https://github.com/apache/beam/pull/13491", "timeline": [{"oid": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "url": "https://github.com/apache/beam/commit/8cfafc91ba64c3f0802e601192e116f7eca0eeef", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging", "committedDate": "2021-01-11T23:45:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNjE1Nw==", "url": "https://github.com/apache/beam/pull/13491#discussion_r555416157", "bodyText": "this.processWideContainer", "author": "ajamato", "createdAt": "2021-01-12T00:01:33Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/DelegatingCounter.java", "diffHunk": "@@ -38,7 +44,10 @@ public void inc() {\n   /** Increment the counter by the given amount. */\n   @Override\n   public void inc(long n) {\n-    MetricsContainer container = MetricsEnvironment.getCurrentContainer();\n+    MetricsContainer container =\n+        processWideContainer", "originalCommit": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0Njc5Ng==", "url": "https://github.com/apache/beam/pull/13491#discussion_r556846796", "bodyText": "Done.", "author": "ihji", "createdAt": "2021-01-13T21:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNjE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0Mjk4NQ==", "url": "https://github.com/apache/beam/pull/13491#discussion_r555442985", "bodyText": "Would you please use a specific name for the metric where it is instantiated\nSee the URN defined here:\nAPI_REQUEST_LATENCIES\nurn = beam:metric:io:api_request_latencies:v1\nhttps://s.apache.org/beam-gcp-debuggability\nFor Labels:\nfor SERVICE_NAME use \"BigQuery\", METHOD_NAME you can use \"BigQueryBatchWrite\" and \"BigQueryBatchRead\". Which is just referring to API calls which read or write elements in batches.\nAdditional Labels (Populate these if they are available, if not leave it for follow up work for me):\nBIGQUERY_PROJECT_ID\nBIGQUERY_DATASET\nBIGQUERY_TABLE\nBIGQUERY_VIEW\nBIGQUERY_QUERY_NAME- user provided query name\nRESOURCE - combination of the above (See my python PR linked below for reference)\nhttps://github.com/apache/beam/pull/13217/files#diff-5427a5d3887eb695cefde082c58575a2372972996b547d55961abeb4f7bc3debR576", "author": "ajamato", "createdAt": "2021-01-12T01:13:13Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LatencyRecordingHttpRequestInitializer.java", "diffHunk": "@@ -23,14 +23,26 @@\n import com.google.api.client.http.HttpResponse;\n import com.google.api.client.http.HttpResponseInterceptor;\n import java.io.IOException;\n-import org.apache.beam.sdk.util.Histogram;\n+import org.apache.beam.sdk.metrics.Histogram;\n+import org.apache.beam.sdk.metrics.Metrics;\n+import org.apache.beam.sdk.util.HistogramData;\n \n /** HttpRequestInitializer for recording request to response latency of Http-based API calls. */\n public class LatencyRecordingHttpRequestInitializer implements HttpRequestInitializer {\n+  public static final String HISTOGRAM_NAME = \"latency_ms\";", "originalCommit": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0ODI2Mg==", "url": "https://github.com/apache/beam/pull/13491#discussion_r556848262", "bodyText": "Done.", "author": "ihji", "createdAt": "2021-01-13T21:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0Mjk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0NTE1MQ==", "url": "https://github.com/apache/beam/pull/13491#discussion_r555445151", "bodyText": "namespace and name parameters are specific to user metric (Which is a metric that populates a specific MonitoringInfo URN with a name and namspace parameter).\nHave this just take a MetricName instead which allows for non user metrics\nI.e. like the ElementCount metric\nwhich is uniquely identifiers by a URN and labels.\nhttps://github.com/apache/beam/pull/7272/files#diff-3834ef03b753005ee8251870a88fe3505732e9a7ad34da600f78e33ab9f37139R45\nYou can make it under the LabeledMetrics class, which is meant to be an internal implementation for SDK harness implementations. Not part of the public API (Much like the internal.Metrics in python you've added).", "author": "ajamato", "createdAt": "2021-01-12T01:19:54Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/Metrics.java", "diffHunk": "@@ -96,6 +97,21 @@ public static Gauge gauge(Class<?> namespace, String name) {\n     return new DelegatingGauge(MetricName.named(namespace, name));\n   }\n \n+  public static class Internal {\n+    public static Counter counter(String namespace, String name, boolean processWideContainer) {\n+      return new DelegatingCounter(MetricName.named(namespace, name), processWideContainer);\n+    }\n+\n+    public static Histogram histogram(\n+        String namespace,", "originalCommit": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0NzU3Mg==", "url": "https://github.com/apache/beam/pull/13491#discussion_r556847572", "bodyText": "Done. Moved into LabeledMetrics.", "author": "ihji", "createdAt": "2021-01-13T21:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0NTE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0NjQ4Nw==", "url": "https://github.com/apache/beam/pull/13491#discussion_r555446487", "bodyText": "Is it possible to use this style for logging, if it exists? If not ignore this suggestion.\n    try (Autolock alock = new Autolock(lock)) {\n        // Whatever you need to do while you own the lock\n    } //unlocks here\n    \n    See:\n\nhttps://stackoverflow.com/questions/151917/autolock-in-java-how-to", "author": "ajamato", "createdAt": "2021-01-12T01:23:35Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/MetricsLogger.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.metrics;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.slf4j.Logger;\n+\n+@Experimental(Kind.METRICS)\n+public interface MetricsLogger extends Serializable {\n+  Lock REPORTING_LOCK = new ReentrantLock();\n+  AtomicLong LAST_REPORTED_MILLIS = new AtomicLong(System.currentTimeMillis());\n+\n+  default void tryLoggingMetrics(\n+      String header, String namespace, long minimumLoggingFrequencyMillis, boolean resetMetrics) {\n+    if (REPORTING_LOCK.tryLock()) {", "originalCommit": "8cfafc91ba64c3f0802e601192e116f7eca0eeef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg2NTk2OQ==", "url": "https://github.com/apache/beam/pull/13491#discussion_r556865969", "bodyText": "Lock is not auto closeable by default and IMHO tryLock doesn't fit well with try-with-resources style (it hides the semantics of tryLock).", "author": "ihji", "createdAt": "2021-01-13T21:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0NjQ4Nw=="}], "type": "inlineReview"}, {"oid": "0f71eb282793ba56051311934eafd27ac25324cf", "url": "https://github.com/apache/beam/commit/0f71eb282793ba56051311934eafd27ac25324cf", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging", "committedDate": "2021-01-13T10:25:22Z", "type": "commit"}, {"oid": "0f71eb282793ba56051311934eafd27ac25324cf", "url": "https://github.com/apache/beam/commit/0f71eb282793ba56051311934eafd27ac25324cf", "message": "[BEAM-11032] Use metric for Java BigQuery streaming insert API latency logging", "committedDate": "2021-01-13T10:25:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU3OTY3MA==", "url": "https://github.com/apache/beam/pull/13491#discussion_r557579670", "bodyText": "This equality looks werid, why would it be considered equal if the param is null?\nCan you add a clairifying comment", "author": "ajamato", "createdAt": "2021-01-14T17:48:00Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MetricsContainerImpl.java", "diffHunk": "@@ -383,4 +409,70 @@ public boolean equals(@Nullable Object object) {\n   public int hashCode() {\n     return Objects.hash(stepName, counters, distributions, gauges);\n   }\n+\n+  private boolean equalsMetricName(MetricName metricName, String namespace, String name) {\n+    return (namespace == null || namespace.equals(metricName.getNamespace()))", "originalCommit": "0f71eb282793ba56051311934eafd27ac25324cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjkzMQ==", "url": "https://github.com/apache/beam/pull/13491#discussion_r557692931", "bodyText": "Yeah, equals prefix is misleading. It's more like matching and when the field will be ignored when the parameter is null. I renamed the method.", "author": "ihji", "createdAt": "2021-01-14T20:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU3OTY3MA=="}], "type": "inlineReview"}, {"oid": "0f574efb0ec8694cf04308b9ea5082a8a3778d46", "url": "https://github.com/apache/beam/commit/0f574efb0ec8694cf04308b9ea5082a8a3778d46", "message": "fix checkstyle error, rename equalsMetricName", "committedDate": "2021-01-14T20:40:20Z", "type": "commit"}]}