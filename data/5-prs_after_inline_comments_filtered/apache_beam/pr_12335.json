{"pr_number": 12335, "pr_title": "[BEAM-10378] Creates Azure Blob Storage Resource Id", "pr_createdAt": "2020-07-22T02:44:31Z", "pr_url": "https://github.com/apache/beam/pull/12335", "timeline": [{"oid": "952837e9c142de8c5b908d3ba7e6940ede3267a3", "url": "https://github.com/apache/beam/commit/952837e9c142de8c5b908d3ba7e6940ede3267a3", "message": "rearranging git branches", "committedDate": "2020-07-22T02:40:03Z", "type": "commit"}, {"oid": "0452cb55f9b4e9812d69f0c741f591ead4bbb0e5", "url": "https://github.com/apache/beam/commit/0452cb55f9b4e9812d69f0c741f591ead4bbb0e5", "message": "applied spotless to fix formatting", "committedDate": "2020-07-22T02:49:53Z", "type": "commit"}, {"oid": "955f82f712408bb1fed2204aaed6d0112e004621", "url": "https://github.com/apache/beam/commit/955f82f712408bb1fed2204aaed6d0112e004621", "message": "applied spotless to fix formatting", "committedDate": "2020-07-22T03:11:30Z", "type": "commit"}, {"oid": "7d6738b82abbbb017bc7a644c8fd8c6184d3a4f8", "url": "https://github.com/apache/beam/commit/7d6738b82abbbb017bc7a644c8fd8c6184d3a4f8", "message": "trying to resolve gradle error", "committedDate": "2020-07-22T03:20:24Z", "type": "commit"}, {"oid": "08aa214f03227c24a1dad87f4bb1ae4332b5fe49", "url": "https://github.com/apache/beam/commit/08aa214f03227c24a1dad87f4bb1ae4332b5fe49", "message": "cleaning code", "committedDate": "2020-07-22T16:58:56Z", "type": "commit"}, {"oid": "5586f0c1673fd87e49ad68db6dfa936db10ec8b1", "url": "https://github.com/apache/beam/commit/5586f0c1673fd87e49ad68db6dfa936db10ec8b1", "message": "applied spotless to fix formatting", "committedDate": "2020-07-22T17:05:44Z", "type": "commit"}, {"oid": "ca2c62148b6d60abef7d6399d4b77945320f76f0", "url": "https://github.com/apache/beam/commit/ca2c62148b6d60abef7d6399d4b77945320f76f0", "message": "wrote filesystem registrar to resolve javadoc error", "committedDate": "2020-07-22T17:20:21Z", "type": "commit"}, {"oid": "a874977992bab8821ea395b3a2f99b44151f684b", "url": "https://github.com/apache/beam/commit/a874977992bab8821ea395b3a2f99b44151f684b", "message": "fixing failing checks", "committedDate": "2020-07-22T17:30:59Z", "type": "commit"}, {"oid": "7bff62e3271eece5d34a1cfbbc3d887d3161c6f0", "url": "https://github.com/apache/beam/commit/7bff62e3271eece5d34a1cfbbc3d887d3161c6f0", "message": "applied spotless to fix formatting", "committedDate": "2020-07-22T17:32:05Z", "type": "commit"}, {"oid": "5e56f4df5fd958d68018a629f7d74c5eba860423", "url": "https://github.com/apache/beam/commit/5e56f4df5fd958d68018a629f7d74c5eba860423", "message": "trying to fix spotless error", "committedDate": "2020-07-22T17:42:34Z", "type": "commit"}, {"oid": "84f0a0ad7f4b2013f39958c54350e1dc5929b1f5", "url": "https://github.com/apache/beam/commit/84f0a0ad7f4b2013f39958c54350e1dc5929b1f5", "message": "Merge branch 'master' into azure-resourceid", "committedDate": "2020-07-22T19:16:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NjEyMQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r458996121", "bodyText": "Remove this empty method?", "author": "pabloem", "createdAt": "2020-07-22T18:26:27Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common gcs paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);\n+    assertEquals(a, b);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"a/b/c/\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"x/y/z\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), \"other-container\", a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(\"other-account\", a.getContainer(), a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\"));\n+  }\n+\n+  @Test\n+  public void testFromComponents() {\n+    AzfsResourceId resourceId = AzfsResourceId.fromComponents(\"account\", \"container\", \"blob\");\n+    assertEquals(\"azfs\", resourceId.getScheme());\n+    assertEquals(\"account\", resourceId.getAccount());\n+    assertEquals(\"container\", resourceId.getContainer());\n+    assertEquals(\"blob\", resourceId.getBlob());\n+    assertEquals(\n+        \"virtualDir/blob\",\n+        AzfsResourceId.fromComponents(\"account\", \"container\", \"virtualDir/blob\").getBlob());\n+    assertEquals(null, AzfsResourceId.fromComponents(\"account\", \"container\").getBlob());\n+  }\n+\n+  @Test\n+  public void testFromUri() {\n+    AzfsResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/blob\");\n+    assertEquals(\"azfs\", resourceId.getScheme());\n+    assertEquals(\"account\", resourceId.getAccount());\n+    assertEquals(\"container\", resourceId.getContainer());\n+    assertEquals(\"blob\", resourceId.getBlob());\n+    assertEquals(\n+        \"virtualDir/blob\",\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob\").getBlob());\n+    assertEquals(null, AzfsResourceId.fromUri(\"azfs://account/container\").getBlob());\n+  }\n+\n+  @Test\n+  public void testIsDirectory() {\n+    assertTrue(AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\").isDirectory());\n+    assertTrue(AzfsResourceId.fromUri(\"azfs://account/container\").isDirectory());\n+    assertFalse(AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob\").isDirectory());\n+  }\n+\n+  @Test\n+  public void testGetCurrentDirectory() {\n+    // test azfs path\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\").getCurrentDirectory());\n+    // test path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u6587\u4ef601.txt\").getCurrentDirectory());\n+    // test path without ending '/'\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container\").getCurrentDirectory());\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/blob\").getCurrentDirectory());\n+  }\n+\n+  @Test\n+  public void testInvalidPathNoContainer() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Invalid AZFS URI: [azfs://]\");\n+    AzfsResourceId.fromUri(\"azfs://\");\n+  }\n+\n+  @Test\n+  public void testInvalidPathNoContainerAndSlash() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Invalid AZFS URI: [azfs:///]\");\n+    AzfsResourceId.fromUri(\"azfs:///\");\n+  }\n+\n+  @Test\n+  public void testGetScheme() {\n+    // Tests azfs paths.\n+    assertEquals(\n+        \"azfs\", AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/\").getScheme());\n+    // Tests bucket with no ending '/'.\n+    assertEquals(\"azfs\", AzfsResourceId.fromUri(\"azfs://account/container\").getScheme());\n+  }\n+\n+  @Test\n+  public void testGetFilename() {\n+    assertNull(AzfsResourceId.fromUri(\"azfs://account/container\").getFilename());\n+    assertEquals(\"blob\", AzfsResourceId.fromUri(\"azfs://account/container/blob\").getFilename());\n+    assertEquals(\"blob\", AzfsResourceId.fromUri(\"azfs://account/container/blob/\").getFilename());\n+    assertEquals(\n+        \"blob\", AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob\").getFilename());\n+    assertEquals(\n+        \"blob\", AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob/\").getFilename());\n+    assertEquals(\n+        \"blob.txt\",\n+        AzfsResourceId.fromUri(\"azfs://account/container/virtualDir/blob.txt/\").getFilename());\n+  }\n+\n+  @Test\n+  public void testContainerParsing() {\n+    AzfsResourceId path1 = AzfsResourceId.fromUri(\"azfs://account/container\");\n+    AzfsResourceId path2 = AzfsResourceId.fromUri(\"azfs://account/container/\");\n+    assertEquals(path1, path2);\n+    assertEquals(path1.toString(), path2.toString());\n+  }\n+\n+  @Test\n+  public void testAzfsResourceIdToString() {\n+    String filename = \"azfs://account/container/dir/file.txt\";\n+    AzfsResourceId path = AzfsResourceId.fromUri(filename);\n+    assertEquals(filename, path.toString());\n+\n+    filename = \"azfs://account/container/blob/\";\n+    path = AzfsResourceId.fromUri(filename);\n+    assertEquals(filename, path.toString());\n+\n+    filename = \"azfs://account/container/\";\n+    path = AzfsResourceId.fromUri(filename);\n+    assertEquals(filename, path.toString());\n+  }\n+\n+  @Test\n+  public void testInvalidAzfsResourceId() {\n+    thrown.expect(IllegalArgumentException.class);\n+    AzfsResourceId.fromUri(\"file://an/invalid/azfs/path\");\n+  }\n+\n+  @Test\n+  public void testInvalidContainer() {\n+    thrown.expect(IllegalArgumentException.class);\n+    AzfsResourceId.fromComponents(\"account\", \"invalid/\", \"\");\n+  }\n+\n+  @Test\n+  public void testResourceIdTester() {", "originalCommit": "5e56f4df5fd958d68018a629f7d74c5eba860423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTc2Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459079763", "bodyText": "Done", "author": "ettirapp", "createdAt": "2020-07-22T20:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NjEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MDg3Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459070873", "bodyText": "Update comment, heh.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Tests for common gcs paths.\n          \n          \n            \n                // Tests for common Azure paths.", "author": "pabloem", "createdAt": "2020-07-22T20:42:37Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common gcs paths.", "originalCommit": "84f0a0ad7f4b2013f39958c54350e1dc5929b1f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21813a99489e08ffcbaee61dcc2463b54831db9c", "url": "https://github.com/apache/beam/commit/21813a99489e08ffcbaee61dcc2463b54831db9c", "message": "fix typo in comment\n\nCo-authored-by: Pablo <pabloem@users.noreply.github.com>", "committedDate": "2020-07-22T20:55:24Z", "type": "commit"}, {"oid": "7f4c5c0261db75be99cf7625702eb2fb55a25fc0", "url": "https://github.com/apache/beam/commit/7f4c5c0261db75be99cf7625702eb2fb55a25fc0", "message": "removed empty method", "committedDate": "2020-07-22T20:57:07Z", "type": "commit"}, {"oid": "b13869f99a5006029bb3c81a4becbbf585fd58b9", "url": "https://github.com/apache/beam/commit/b13869f99a5006029bb3c81a4becbbf585fd58b9", "message": "no change", "committedDate": "2020-07-22T20:58:50Z", "type": "commit"}, {"oid": "eddd2c74dd7018aae11eb78aac31ba1406c2e205", "url": "https://github.com/apache/beam/commit/eddd2c74dd7018aae11eb78aac31ba1406c2e205", "message": "Merge branch 'azure-resourceid' of https://github.com/ettirapp/beam into azure-resourceid", "committedDate": "2020-07-22T20:58:53Z", "type": "commit"}, {"oid": "09852c0b4d9109a7aee0c12c13a29ea76851620d", "url": "https://github.com/apache/beam/commit/09852c0b4d9109a7aee0c12c13a29ea76851620d", "message": "removed unused dependencies", "committedDate": "2020-07-22T21:04:53Z", "type": "commit"}, {"oid": "de418f69067196820fb457fd618057c14b4e71af", "url": "https://github.com/apache/beam/commit/de418f69067196820fb457fd618057c14b4e71af", "message": "removed a comment", "committedDate": "2020-07-22T22:09:52Z", "type": "commit"}, {"oid": "e0c172c56dd8ad1e87bf9b44d6da4c73ea12b358", "url": "https://github.com/apache/beam/commit/e0c172c56dd8ad1e87bf9b44d6da4c73ea12b358", "message": "cleaning comments", "committedDate": "2020-07-22T22:12:35Z", "type": "commit"}, {"oid": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "url": "https://github.com/apache/beam/commit/87e3c906972eaa0165dd3f2e172edc57f68dbbee", "message": "applied spotless to fix formatting", "committedDate": "2020-07-22T22:17:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDE2Nw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459124167", "bodyText": "What if blob is empty?", "author": "boyuanzz", "createdAt": "2020-07-22T22:41:27Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MTU3OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459151578", "bodyText": "I just updated the constructor so that if blob is empty it is set to null.", "author": "ettirapp", "createdAt": "2020-07-23T00:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNDE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNTY1Mg==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459125652", "bodyText": "It seems like this function is not called anywhere. Also what if blob is null?", "author": "boyuanzz", "createdAt": "2020-07-22T22:45:30Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2Mzc3OQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459163779", "bodyText": "I will use this function in working with resource ids containing blobs in the filesystem.  For now I added unit tests for this function so that it is being called.  I also took care of the case where blob is null.", "author": "ettirapp", "createdAt": "2020-07-23T00:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNTY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjE2Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459126163", "bodyText": "It seems like this function is not used?", "author": "boyuanzz", "createdAt": "2020-07-22T22:46:58Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2ODY5Nw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459168697", "bodyText": "I think I will need it later to work with globs in the Azure filesystem, but I will remove it for now.", "author": "ettirapp", "createdAt": "2020-07-23T01:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjY0OQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459126649", "bodyText": "What if blob is empty?", "author": "boyuanzz", "createdAt": "2020-07-22T22:48:19Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {\n+    Matcher m = GLOB_PREFIX.matcher(blob);\n+    checkArgument(m.matches(), String.format(\"Glob expression: [%s] is not expandable.\", blob));\n+    return m.group(\"PREFIX\");\n+  }\n+\n+  @Override\n+  public ResourceId getCurrentDirectory() {\n+    if (isDirectory()) {\n+      return this;\n+    }\n+    if (blob.lastIndexOf('/') == -1) {", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NDAxMQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459154011", "bodyText": "I updated the constructor so if blob is empty it is set to null.", "author": "ettirapp", "createdAt": "2020-07-23T00:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNjY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNzk0Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459127943", "bodyText": "You could use Objects.equals(): https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-", "author": "boyuanzz", "createdAt": "2020-07-22T22:52:01Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {\n+    Matcher m = GLOB_PREFIX.matcher(blob);\n+    checkArgument(m.matches(), String.format(\"Glob expression: [%s] is not expandable.\", blob));\n+    return m.group(\"PREFIX\");\n+  }\n+\n+  @Override\n+  public ResourceId getCurrentDirectory() {\n+    if (isDirectory()) {\n+      return this;\n+    }\n+    if (blob.lastIndexOf('/') == -1) {\n+      return fromComponents(account, container);\n+    }\n+    return fromComponents(account, container, blob.substring(0, blob.lastIndexOf('/') + 1));\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String getFilename() {\n+    if (blob == null) {\n+      return null;\n+    }\n+    if (!isDirectory()) {\n+      return blob.substring(blob.lastIndexOf('/') + 1);\n+    }\n+    String blobWithoutTrailingSlash = blob.substring(0, blob.length() - 1);\n+    return blobWithoutTrailingSlash.substring(blobWithoutTrailingSlash.lastIndexOf('/') + 1);\n+  }\n+\n+  // TODO: ensure that this function lines up with what the filesystem match method expects\n+  @Override\n+  public String toString() {\n+    if (blob != null) {\n+      return String.format(\"%s://%s/%s/%s\", SCHEME, account, container, blob);\n+    }\n+    return String.format(\"%s://%s/%s/\", SCHEME, account, container);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof AzfsResourceId)) {\n+      return false;\n+    }\n+    String otherBlob = ((AzfsResourceId) obj).blob;\n+    boolean equalBlob = blob != null && otherBlob != null && blob.equals(otherBlob);", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1OTQxMw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459159413", "bodyText": "Done, thanks for directing me to this.", "author": "ettirapp", "createdAt": "2020-07-23T00:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNzk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyOTE4MQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459129181", "bodyText": "Add // TODO? Or you may want to have this file together with the file system changes later.", "author": "boyuanzz", "createdAt": "2020-07-22T22:55:26Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemRegistrar.java", "diffHunk": "@@ -15,3 +15,20 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nonnull;\n+import org.apache.beam.sdk.io.FileSystem;\n+import org.apache.beam.sdk.io.FileSystemRegistrar;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+public class AzureBlobStoreFileSystemRegistrar implements FileSystemRegistrar {\n+  @Override\n+  public Iterable<FileSystem> fromOptions(@Nonnull PipelineOptions options) {\n+    checkNotNull(options, \"Expect the runner have called FileSystems.setDefaultPipelineOptions().\");\n+    return ImmutableList.of();", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NDM0Ng==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459154346", "bodyText": "I was getting an error from javadoc because there were no public classes in the PR so I added this file.  I will add TODO.", "author": "ettirapp", "createdAt": "2020-07-23T00:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyOTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTA5NA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459131094", "bodyText": "Minor: You could do this by using Parameterized  but it's up to you.", "author": "boyuanzz", "createdAt": "2020-07-22T23:01:02Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2ODc4OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459168788", "bodyText": "Okay, I will look into that.", "author": "ettirapp", "createdAt": "2020-07-23T01:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NDkxMQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459184911", "bodyText": "I rewrote these tests using Parameterized.  @boyuanzz can you please look over the test and confirm that I used Parameterized correctly?", "author": "ettirapp", "createdAt": "2020-07-23T02:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4OTk4Nw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459189987", "bodyText": "I also moved a few other tests into the parameterized tests.", "author": "ettirapp", "createdAt": "2020-07-23T02:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMTA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMjE1OQ==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459132159", "bodyText": "Why do we want to compare a and a?", "author": "boyuanzz", "createdAt": "2020-07-22T23:04:24Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common Azure paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1ODA0MA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459158040", "bodyText": "To confirm that my equals() function is working properly.", "author": "ettirapp", "createdAt": "2020-07-23T00:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1OTA5Mg==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459159092", "bodyText": "but maybe a,b?", "author": "pabloem", "createdAt": "2020-07-23T00:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MDQ3Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459160473", "bodyText": "ah nevermind, I see that both are used.", "author": "pabloem", "createdAt": "2020-07-23T00:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMjE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2MjExOA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459162118", "bodyText": "I see that S3ResourceIdTest writes both assertEquals(a, a) and assertEquals(a, b).  I can't think of any case where the second would pass but the first would fail, so I'll remove the assertEquals(a, a) test.", "author": "ettirapp", "createdAt": "2020-07-23T00:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMjE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMzczMA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459133730", "bodyText": "assertNotEquals(a, b) means the same as ``assertNotEquals(b, a)", "author": "boyuanzz", "createdAt": "2020-07-22T23:09:40Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common Azure paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);\n+    assertEquals(a, b);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"a/b/c/\");\n+    assertNotEquals(a, b);", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1Nzg2NA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459157864", "bodyText": "I copied some of these tests from S3ResourceIdTest.  I removed the duplicate tests now; we should remove them from S3 too.", "author": "ettirapp", "createdAt": "2020-07-23T00:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMzczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNDA1NA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459134054", "bodyText": "Please also test when blob is null and when blob is empty.", "author": "boyuanzz", "createdAt": "2020-07-22T23:10:34Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  static final class TestCase {\n+\n+    final String baseUri;\n+    final String relativePath;\n+    final ResolveOptions.StandardResolveOptions resolveOptions;\n+    final String expectedResult;\n+\n+    TestCase(\n+        String baseUri,\n+        String relativePath,\n+        ResolveOptions.StandardResolveOptions resolveOptions,\n+        String expectedResult) {\n+      this.baseUri = baseUri;\n+      this.relativePath = relativePath;\n+      this.resolveOptions = resolveOptions;\n+      this.expectedResult = expectedResult;\n+    }\n+  }\n+\n+  // Each test case is an expected URL, then the components used to build it.\n+  // Empty components result in a double slash.\n+  private static final List<TestCase> PATH_TEST_CASES =\n+      Arrays.asList(\n+          new TestCase(\n+              \"azfs://account/container/\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\", \"\", RESOLVE_DIRECTORY, \"azfs://account/container/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/dir\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/dir/\"),\n+          new TestCase(\n+              \"azfs://account/container\",\n+              \"path/to/object\",\n+              RESOLVE_FILE,\n+              \"azfs://account/container/path/to/object\"),\n+          new TestCase(\n+              \"azfs://account/container/path/to/dir/\",\n+              \"..\",\n+              RESOLVE_DIRECTORY,\n+              \"azfs://account/container/path/to/\"));\n+\n+  @Test\n+  public void testResolve() {\n+    for (TestCase testCase : PATH_TEST_CASES) {\n+      ResourceId resourceId = AzfsResourceId.fromUri(testCase.baseUri);\n+      ResourceId resolved = resourceId.resolve(testCase.relativePath, testCase.resolveOptions);\n+      assertEquals(testCase.expectedResult, resolved.toString());\n+    }\n+\n+    // Tests for common Azure paths.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\").resolve(\"aa\", RESOLVE_FILE));\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa/bb/cc/\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/\")\n+            .resolve(\"aa\", RESOLVE_DIRECTORY)\n+            .resolve(\"bb\", RESOLVE_DIRECTORY)\n+            .resolve(\"cc\", RESOLVE_DIRECTORY));\n+\n+    // Tests absolute path.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/aa\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/tmp/bb/\")\n+            .resolve(\"azfs://account/container/tmp/aa\", RESOLVE_FILE));\n+\n+    // Tests container with no ending '/'.\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/my-container/tmp\"),\n+        AzfsResourceId.fromUri(\"azfs://account/my-container\").resolve(\"tmp\", RESOLVE_FILE));\n+\n+    // Tests path with unicode\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\u8f93\u51fa \u6587\u4ef601.txt\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\u8f93\u51fa \u76ee\u5f55/\")\n+            .resolve(\"\u8f93\u51fa \u6587\u4ef601.txt\", RESOLVE_FILE));\n+  }\n+\n+  @Test\n+  public void testResolveInvalidInputs() {\n+    thrown.expect(IllegalArgumentException.class);\n+    thrown.expectMessage(\"Cannot resolve a file with a directory path: [tmp/]\");\n+    AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp/\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testResolveInvalidNotDirectory() {\n+    ResourceId tmpDir =\n+        AzfsResourceId.fromUri(\"azfs://account/my_container/\").resolve(\"tmp dir\", RESOLVE_FILE);\n+\n+    thrown.expect(IllegalStateException.class);\n+    thrown.expectMessage(\n+        \"Expected this resource to be a directory, but was [azfs://account/my_container/tmp dir]\");\n+    tmpDir.resolve(\"aa\", RESOLVE_FILE);\n+  }\n+\n+  @Test\n+  public void testS3ResolveWithFileBase() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/file\");\n+    thrown.expect(IllegalStateException.class);\n+    resourceId.resolve(\"child-path\", RESOLVE_DIRECTORY); // resource is not a directory\n+  }\n+\n+  @Test\n+  public void testResolveParentToFile() {\n+    ResourceId resourceId = AzfsResourceId.fromUri(\"azfs://account/container/path/to/dir/\");\n+    thrown.expect(IllegalArgumentException.class);\n+    resourceId.resolve(\"..\", RESOLVE_FILE); // '..' only resolves as dir, not as file\n+  }\n+\n+  @Test\n+  public void testEquals() {\n+    AzfsResourceId a = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    AzfsResourceId b = AzfsResourceId.fromComponents(\"account\", \"container\", \"a/b/c\");\n+    assertEquals(a, a);\n+    assertEquals(a, b);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"a/b/c/\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), a.getContainer(), \"x/y/z\");\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(a.getAccount(), \"other-container\", a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    b = AzfsResourceId.fromComponents(\"other-account\", a.getContainer(), a.getBlob());\n+    assertNotEquals(a, b);\n+    assertNotEquals(b, a);\n+\n+    assertEquals(\n+        AzfsResourceId.fromUri(\"azfs://account/container\"),\n+        AzfsResourceId.fromUri(\"azfs://account/container/\"));\n+  }\n+\n+  @Test\n+  public void testFromComponents() {", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NzEzNw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459157137", "bodyText": "Done, thanks for bringing this to my attention.", "author": "ettirapp", "createdAt": "2020-07-23T00:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNDA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNTk5Ng==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459135996", "bodyText": "It seems like this function is not used.", "author": "boyuanzz", "createdAt": "2020-07-22T23:16:34Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    this.blob = blob;\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {\n+      blob = null;\n+    }\n+    return fromComponents(account, container, blob);\n+  }\n+\n+  public String getAccount() {\n+    return account;\n+  }\n+\n+  public String getContainer() {\n+    return container;\n+  }\n+\n+  public String getBlob() {\n+    return blob;\n+  }\n+\n+  @Override\n+  public String getScheme() {\n+    return SCHEME;\n+  }\n+\n+  @Override\n+  public boolean isDirectory() {\n+    return (blob == null) || (blob.endsWith(\"/\"));\n+  }\n+\n+  boolean isWildcard() {\n+    return GLOB_PREFIX.matcher(blob).matches();\n+  }\n+\n+  String getBlobNonWildcardPrefix() {\n+    Matcher m = GLOB_PREFIX.matcher(blob);\n+    checkArgument(m.matches(), String.format(\"Glob expression: [%s] is not expandable.\", blob));\n+    return m.group(\"PREFIX\");\n+  }\n+\n+  @Override\n+  public ResourceId getCurrentDirectory() {\n+    if (isDirectory()) {\n+      return this;\n+    }\n+    if (blob.lastIndexOf('/') == -1) {\n+      return fromComponents(account, container);\n+    }\n+    return fromComponents(account, container, blob.substring(0, blob.lastIndexOf('/') + 1));\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String getFilename() {\n+    if (blob == null) {\n+      return null;\n+    }\n+    if (!isDirectory()) {\n+      return blob.substring(blob.lastIndexOf('/') + 1);\n+    }\n+    String blobWithoutTrailingSlash = blob.substring(0, blob.length() - 1);\n+    return blobWithoutTrailingSlash.substring(blobWithoutTrailingSlash.lastIndexOf('/') + 1);\n+  }\n+\n+  // TODO: ensure that this function lines up with what the filesystem match method expects\n+  @Override\n+  public String toString() {\n+    if (blob != null) {\n+      return String.format(\"%s://%s/%s/%s\", SCHEME, account, container, blob);\n+    }\n+    return String.format(\"%s://%s/%s/\", SCHEME, account, container);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof AzfsResourceId)) {\n+      return false;\n+    }\n+    String otherBlob = ((AzfsResourceId) obj).blob;\n+    boolean equalBlob = blob != null && otherBlob != null && blob.equals(otherBlob);\n+    boolean noBlobs = blob == null && otherBlob == null;\n+    return account.equals(((AzfsResourceId) obj).account)\n+        && container.equals(((AzfsResourceId) obj).container)\n+        && (equalBlob || noBlobs);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(account, container, blob);\n+  }\n+\n+  @Override\n+  public ResourceId resolve(String other, ResolveOptions resolveOptions) {\n+    checkState(isDirectory(), \"Expected this resource to be a directory, but was [%s]\", toString());\n+    // TODO: check if resolve options are an illegal name in any way, see:\n+    // https://docs.microsoft.com/en-us/rest/api/storageservices/Naming-and-Referencing-Containers--Blobs--and-Metadata\n+\n+    if (resolveOptions == ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY) {\n+      if (\"..\".equals(other)) {\n+        if (\"/\".equals(blob)) {\n+          return this;\n+        }\n+        int parentStopsAt = blob.substring(0, blob.length() - 1).lastIndexOf('/');\n+        return fromComponents(account, container, blob.substring(0, parentStopsAt + 1));\n+      }\n+\n+      if (\"\".equals(other)) {\n+        return this;\n+      }\n+\n+      if (!other.endsWith(\"/\")) {\n+        other += \"/\";\n+      }\n+      if (AZFS_URI.matcher(other).matches()) {\n+        return fromUri(other);\n+      }\n+      if (blob == null) {\n+        return fromComponents(account, container, other);\n+      }\n+      return fromComponents(account, container, blob + other);\n+    }\n+\n+    if (resolveOptions == ResolveOptions.StandardResolveOptions.RESOLVE_FILE) {\n+      checkArgument(\n+          !other.endsWith(\"/\"), \"Cannot resolve a file with a directory path: [%s]\", other);\n+      checkArgument(!\"..\".equals(other), \"Cannot resolve parent as file: [%s]\", other);\n+      if (AZFS_URI.matcher(other).matches()) {\n+        return fromUri(other);\n+      }\n+      if (blob == null) {\n+        return fromComponents(account, container, other);\n+      }\n+      return fromComponents(account, container, blob + other);\n+    }\n+\n+    throw new UnsupportedOperationException(\n+        String.format(\"Unexpected StandardResolveOptions [%s]\", resolveOptions));\n+  }\n+\n+  // url format to interact with Azure\n+  public String toAzureUrl() {", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2ODM1OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459168358", "bodyText": "I think I will need it later to interact with the Azure client, but I will remove it for now.", "author": "ettirapp", "createdAt": "2020-07-23T01:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNTk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MTE5OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459141198", "bodyText": "Remove the empty file?", "author": "boyuanzz", "createdAt": "2020-07-22T23:33:09Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzureBlobStoreFileSystemTest.java", "diffHunk": "@@ -15,3 +15,4 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.beam.sdk.io.azure.blobstore;", "originalCommit": "87e3c906972eaa0165dd3f2e172edc57f68dbbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjA2OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459152068", "bodyText": "Done.", "author": "ettirapp", "createdAt": "2020-07-23T00:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MTE5OA=="}], "type": "inlineReview"}, {"oid": "46a3719e23e11866b545b764efbd505f6e063b80", "url": "https://github.com/apache/beam/commit/46a3719e23e11866b545b764efbd505f6e063b80", "message": "dealt with empty blob", "committedDate": "2020-07-23T00:09:12Z", "type": "commit"}, {"oid": "bf523b311eaa0cc54176717f2b01ba6b6aecf767", "url": "https://github.com/apache/beam/commit/bf523b311eaa0cc54176717f2b01ba6b6aecf767", "message": "removed empty file", "committedDate": "2020-07-23T00:11:21Z", "type": "commit"}, {"oid": "e019c91ccf7d71922c8d484f2f1061a33e203159", "url": "https://github.com/apache/beam/commit/e019c91ccf7d71922c8d484f2f1061a33e203159", "message": "updated testFromComponents to test null/empty blobs", "committedDate": "2020-07-23T00:25:44Z", "type": "commit"}, {"oid": "a2f680778044c1f71e08f697c043e97fea37ee2d", "url": "https://github.com/apache/beam/commit/a2f680778044c1f71e08f697c043e97fea37ee2d", "message": "applied spotless to fix formatting", "committedDate": "2020-07-23T00:29:02Z", "type": "commit"}, {"oid": "c77aa0725af05cc2c48a1c7faa0ccbf5db38aade", "url": "https://github.com/apache/beam/commit/c77aa0725af05cc2c48a1c7faa0ccbf5db38aade", "message": "removed duplicate tests", "committedDate": "2020-07-23T00:32:42Z", "type": "commit"}, {"oid": "a74bc1458e2aa79b57eb037e888fd56563e2e9cf", "url": "https://github.com/apache/beam/commit/a74bc1458e2aa79b57eb037e888fd56563e2e9cf", "message": "cleaned up equals method", "committedDate": "2020-07-23T00:39:35Z", "type": "commit"}, {"oid": "5b91ebd5b848fa18a16005f937b07ee45861a42e", "url": "https://github.com/apache/beam/commit/5b91ebd5b848fa18a16005f937b07ee45861a42e", "message": "added TODO", "committedDate": "2020-07-23T00:42:38Z", "type": "commit"}, {"oid": "e5c23740e25bc65f75a974bdc60fab030f4217df", "url": "https://github.com/apache/beam/commit/e5c23740e25bc65f75a974bdc60fab030f4217df", "message": "added tests for isWildcard", "committedDate": "2020-07-23T00:52:56Z", "type": "commit"}, {"oid": "a682fa5ada15e4942429f6cdf1420ccdc646b86b", "url": "https://github.com/apache/beam/commit/a682fa5ada15e4942429f6cdf1420ccdc646b86b", "message": "dealing will null blob in isWildcard", "committedDate": "2020-07-23T00:56:50Z", "type": "commit"}, {"oid": "3d53270812a8543ed5101ba1c96435083b527f09", "url": "https://github.com/apache/beam/commit/3d53270812a8543ed5101ba1c96435083b527f09", "message": "removed extra test", "committedDate": "2020-07-23T00:59:01Z", "type": "commit"}, {"oid": "a7359dd202ba3bda129c17d9b9c40913fba9e4f9", "url": "https://github.com/apache/beam/commit/a7359dd202ba3bda129c17d9b9c40913fba9e4f9", "message": "removed unused methods", "committedDate": "2020-07-23T01:17:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NzYxNg==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459167616", "bodyText": "The constructor will take care of this , right?", "author": "boyuanzz", "createdAt": "2020-07-23T01:13:37Z", "path": "sdks/java/io/azure/src/main/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceId.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Strings;\n+\n+class AzfsResourceId implements ResourceId {\n+\n+  static final String SCHEME = \"azfs\";\n+\n+  private static final Pattern AZFS_URI =\n+      Pattern.compile(\"(?<SCHEME>[^:]+)://(?<ACCOUNT>[^/]+)/(?<CONTAINER>[^/]+)(?:/(?<BLOB>.*))?\");\n+\n+  /** Matches a glob containing a wildcard, capturing the portion before the first wildcard. */\n+  private static final Pattern GLOB_PREFIX = Pattern.compile(\"(?<PREFIX>[^\\\\[*?]*)[\\\\[*?].*\");\n+\n+  private final String account;\n+  private final String container;\n+  private final String blob;\n+\n+  private AzfsResourceId(String account, String container, @Nullable String blob) {\n+    // We are assuming that every resource id is either a container or a blob in a container, not\n+    // just an account.\n+    // This is because we will not enable users to create Azure containers through beam at this\n+    // time.\n+    checkArgument(!Strings.isNullOrEmpty(container), \"container\");\n+    checkArgument(!container.contains(\"/\"), \"container must not contain '/': [%s]\", container);\n+    this.account = account;\n+    this.container = container;\n+    if (blob == null || blob.isEmpty()) {\n+      this.blob = null;\n+    } else {\n+      this.blob = blob;\n+    }\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container, String blob) {\n+    return new AzfsResourceId(account, container, blob);\n+  }\n+\n+  static AzfsResourceId fromComponents(String account, String container) {\n+    return new AzfsResourceId(account, container, null);\n+  }\n+\n+  static AzfsResourceId fromUri(String uri) {\n+    Matcher m = AZFS_URI.matcher(uri);\n+    checkArgument(m.matches(), \"Invalid AZFS URI: [%s]\", uri);\n+    checkArgument(m.group(\"SCHEME\").equalsIgnoreCase(SCHEME), \"Invalid AZFS URI scheme: [%s]\", uri);\n+    String account = m.group(\"ACCOUNT\");\n+    String container = m.group(\"CONTAINER\");\n+    String blob = m.group(\"BLOB\");\n+    if (blob != null && blob.isEmpty()) {", "originalCommit": "3d53270812a8543ed5101ba1c96435083b527f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MjI0NA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459172244", "bodyText": "Yes, I'll remove this extra code.", "author": "ettirapp", "createdAt": "2020-07-23T01:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NzYxNg=="}], "type": "inlineReview"}, {"oid": "135e50505962986149f1e0adc9a67f364bf92fdd", "url": "https://github.com/apache/beam/commit/135e50505962986149f1e0adc9a67f364bf92fdd", "message": "removed extra code", "committedDate": "2020-07-23T01:33:21Z", "type": "commit"}, {"oid": "fbbc535b2cbeadc374057833364009d6bef11b1c", "url": "https://github.com/apache/beam/commit/fbbc535b2cbeadc374057833364009d6bef11b1c", "message": "rewrote resolve test using parameterized", "committedDate": "2020-07-23T02:31:00Z", "type": "commit"}, {"oid": "15b6b5ce061a5677935d705468cf4e9721381a4d", "url": "https://github.com/apache/beam/commit/15b6b5ce061a5677935d705468cf4e9721381a4d", "message": "deleted extra code", "committedDate": "2020-07-23T02:41:45Z", "type": "commit"}, {"oid": "3a182bba14e986ffccd8be0f91f57ac4b07d512e", "url": "https://github.com/apache/beam/commit/3a182bba14e986ffccd8be0f91f57ac4b07d512e", "message": "rearranged tests for clarity", "committedDate": "2020-07-23T02:54:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459194598", "bodyText": "It should be @RunWith(Enclosed.class) to make sure inner test classes to be picked up.", "author": "boyuanzz", "createdAt": "2020-07-23T03:19:04Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)", "originalCommit": "3a182bba14e986ffccd8be0f91f57ac4b07d512e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNzY0NA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459207644", "bodyText": "If I switch @RunWith(JUnit4.class) to @RunWith(Enclosed.class) then all the tests except the inner test class are skipped.", "author": "ettirapp", "createdAt": "2020-07-23T04:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwOTc3Nw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459209777", "bodyText": "I see. I thought you were using subclass with @RunWith.  Let's keep with @RunWith(JUnit4.class).", "author": "boyuanzz", "createdAt": "2020-07-23T04:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDExNg==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459214116", "bodyText": "@boyuanzz How can I get both the parameterized and the non-parameterized tests to run?  I tried putting all the non-parameterized tests in a separate inner class, but that didn't work either because that class would need to be static for the tests to run but if the class is static then I get an error since thrown is non-static.", "author": "ettirapp", "createdAt": "2020-07-23T04:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTk2Ng==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459215966", "bodyText": "You could something similar to this: \n  \n    \n      beam/sdks/java/testing/nexmark/src/test/java/org/apache/beam/sdk/nexmark/queries/sql/SqlQuery0Test.java\n    \n    \n         Line 36\n      in\n      d4d45bf\n    \n    \n    \n    \n\n        \n          \n           @RunWith(Enclosed.class)", "author": "boyuanzz", "createdAt": "2020-07-23T05:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNjAyNg==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459216026", "bodyText": "I just saw your comment now.  You are correct that the inner test classes are being skipped with the current runner, so we shouldn't keep @RunWith(JUnit4.class).", "author": "ettirapp", "createdAt": "2020-07-23T05:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNjk1Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459216953", "bodyText": "If I use @RunWith(Enclosed.class) then the non-parameterized tests are skipped unless they are also in an inner class. But if they are in an inner class then the class needs to be static, and that causes an error non-static variable thrown cannot be referenced from a static context.", "author": "ettirapp", "createdAt": "2020-07-23T05:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyOTQ3Nw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459629477", "bodyText": "Now you should change it to @RunWith(Enclosed.class)", "author": "boyuanzz", "createdAt": "2020-07-23T17:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NjY0Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459196643", "bodyText": "The annotation @Parameterized.Parameter can be used to avoid creating constructor. But having constructor is also good. It's up to you.", "author": "boyuanzz", "createdAt": "2020-07-23T03:29:01Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  @RunWith(Parameterized.class)\n+  public static class ResolveTest {\n+\n+    private String baseUri;", "originalCommit": "3a182bba14e986ffccd8be0f91f57ac4b07d512e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNzMwOA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459217308", "bodyText": "Where would I need to put the annotation?", "author": "ettirapp", "createdAt": "2020-07-23T05:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NjY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMTU0OA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459221548", "bodyText": "You could do something similar to \n  \n    \n      beam/sdks/java/harness/src/test/java/org/apache/beam/fn/harness/BeamFnDataReadRunnerTest.java\n    \n    \n         Line 435\n      in\n      6fdde4f\n    \n    \n    \n    \n\n        \n          \n           @Parameterized.Parameter(0)", "author": "boyuanzz", "createdAt": "2020-07-23T05:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NjY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDA4MA==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459474080", "bodyText": "I see, thanks for the example.", "author": "ettirapp", "createdAt": "2020-07-23T14:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NjY0Mw=="}], "type": "inlineReview"}, {"oid": "b4e01b54a63509b2502fb1498457fe855aac10d9", "url": "https://github.com/apache/beam/commit/b4e01b54a63509b2502fb1498457fe855aac10d9", "message": "removed constructor in parameterized", "committedDate": "2020-07-23T14:04:29Z", "type": "commit"}, {"oid": "1c18efa44ee53580070723f73627cfc3a3f37052", "url": "https://github.com/apache/beam/commit/1c18efa44ee53580070723f73627cfc3a3f37052", "message": "separating tests into parameterized and non-parameterized - work in progress", "committedDate": "2020-07-23T17:31:27Z", "type": "commit"}, {"oid": "045580b758d45de0256528e74432eab54d5dc8b5", "url": "https://github.com/apache/beam/commit/045580b758d45de0256528e74432eab54d5dc8b5", "message": "applied spotless. work in progress.", "committedDate": "2020-07-23T17:35:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyOTMwNw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459629307", "bodyText": "Please move this under the scope of NonParameterizedTests", "author": "boyuanzz", "createdAt": "2020-07-23T17:58:30Z", "path": "sdks/java/io/azure/src/test/java/org/apache/beam/sdk/io/azure/blobstore/AzfsResourceIdTest.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.azure.blobstore;\n+\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_DIRECTORY;\n+import static org.apache.beam.sdk.io.fs.ResolveOptions.StandardResolveOptions.RESOLVE_FILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.beam.sdk.io.fs.ResolveOptions;\n+import org.apache.beam.sdk.io.fs.ResourceId;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(JUnit4.class)\n+public class AzfsResourceIdTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();", "originalCommit": "045580b758d45de0256528e74432eab54d5dc8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTk3Mw==", "url": "https://github.com/apache/beam/pull/12335#discussion_r459631973", "bodyText": "This resolves the issues I had before - all my tests are running now.  Thanks @boyuanzz !", "author": "ettirapp", "createdAt": "2020-07-23T18:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyOTMwNw=="}], "type": "inlineReview"}, {"oid": "7217225a68a744ac3fa0cfe6981127abc01575f4", "url": "https://github.com/apache/beam/commit/7217225a68a744ac3fa0cfe6981127abc01575f4", "message": "changed scope of thrown variable", "committedDate": "2020-07-23T18:02:38Z", "type": "commit"}]}