{"pr_number": 12759, "pr_title": "[BEAM-10760] Generalize state cleanup optimization for global window", "pr_createdAt": "2020-09-02T13:18:01Z", "pr_url": "https://github.com/apache/beam/pull/12759", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482084426", "bodyText": "Could we do this using CleanupTimer? Something like\n      StatefulDoFnRunner.CleanupTimer cleanupTimer =\n          new StatefulDoFnRunner.TimeInternalsCleanupTimer(timerInternals, windowingStrategy) {\n            @Override\n            public void setForWindow(Object input, BoundedWindow window) {\n              if (!window.equals(GlobalWindow.INSTANCE)) {\n                super.setForWindow(input, window);\n              }\n            }\n          };\nin DoFnOperator:317", "author": "je-ik", "createdAt": "2020-09-02T13:50:36Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -1330,6 +1338,19 @@ public void setTimer(\n     @Deprecated\n     @Override\n     public void setTimer(TimerData timer) {\n+      if (timer.getTimestamp().isAfter(GlobalWindow.INSTANCE.maxTimestamp())) {", "originalCommit": "cce653f6e3da985cceb26666f72559bcd538ef83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0MTQ0Mg==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482141442", "bodyText": "It was a deliberate decision not to do it using CleanupTimer. Setting the timer is an implementation detail and should be transparent to the CleanupTimer class.", "author": "mxm", "createdAt": "2020-09-02T15:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MTE0Ng==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482151146", "bodyText": "Also consider this requires to add the code at both implementations of CleanupTimer (portable and classic).", "author": "mxm", "createdAt": "2020-09-02T15:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1NTcxMQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482255711", "bodyText": "I understand the concerns about code duplication. But the duplication would be really very small. On the other hand - I would say, that the CleanupTimer abstraction is there precisely for the reasons needed here - the StatefulDoFnRunner delegates on CleanupTimer the decision to setup a timer for window. Precisely what we are looking for here. The approach with tweaking setupTimer internally can have unexpected side-effects in the future, because there might (in theory) be another timer set after the end of global window.\nOn the other hand, because the probability of these unwanted side-effects seem to be low and they would be very much likely caught early in development, I think we can leave it as it is, although my personal preference would definitely be the CleanupTimer.", "author": "je-ik", "createdAt": "2020-09-02T17:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MjQ1Mw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482392453", "bodyText": "The namespace we use for cleanup is based on GlobalWindow and so should be the condition here. I think we can prioritize clarity over the duplication of a single conditional return statement, which should be covered by the unit tests. Or better, make a common setCleanupTimer method that has the Window parameter?", "author": "tweise", "createdAt": "2020-09-02T20:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3OTcyNg==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482779726", "bodyText": "We could create a NonGlobalWindowCleanupTimer (or something similar) in runner-core and reuse it in both portability and non-portable runner. If the code duplication would be the biggest concern.", "author": "je-ik", "createdAt": "2020-09-03T07:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ5ODUwNA==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484498504", "bodyText": "Please have a look, I've adjusted the implementation.", "author": "mxm", "createdAt": "2020-09-07T15:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MjcxMw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482392713", "bodyText": "The existing solution checks that we have not already reached the watermark to avoid repeated execution of the cleanup code. Please carry that over.\nAlso, why check for keyedStateInternals? See #12733 (comment)", "author": "tweise", "createdAt": "2020-09-02T20:08:42Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -753,6 +754,13 @@ private void maybeEmitWatermark(long watermark) {\n       LOG.debug(\"Emitting watermark {}\", watermark);\n       currentOutputWatermark = watermark;\n       output.emitWatermark(new Watermark(watermark));\n+\n+      // Check if the final watermark was triggered to perform state cleanup for global window\n+      if (keyedStateInternals != null\n+          && currentOutputWatermark", "originalCommit": "cce653f6e3da985cceb26666f72559bcd538ef83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MDkxNw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482840917", "bodyText": "Cleanup will only be performed if there is new state which IMHO is the correct thing to do.", "author": "mxm", "createdAt": "2020-09-03T09:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ5ODMxNQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484498315", "bodyText": "Due to all logic now being in keyedStateInternals, we need the null check. The state internals will be null if we do not have keyed input.", "author": "mxm", "createdAt": "2020-09-07T15:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MjcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5ODI0OA==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482398248", "bodyText": "I would remove \"because we are not guaranteed to ever receive the final watermark\" because that is misleading. The problem is that we accumulate too many timers, depending on the number of keys.", "author": "tweise", "createdAt": "2020-09-02T20:12:46Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -114,16 +127,27 @@ public K getKey() {\n     return address.getSpec().bind(address.getId(), new FlinkStateBinder(namespace, context));\n   }\n \n-  public void clearBagStates(StateNamespace namespace, StateTag<? extends BagState> address)\n-      throws Exception {\n-    CoderTypeSerializer typeSerializer = new CoderTypeSerializer<>(VoidCoder.of());\n-    flinkStateBackend.applyToAllKeys(\n-        namespace.stringKey(),\n-        StringSerializer.INSTANCE,\n-        new ListStateDescriptor<>(address.getId(), typeSerializer),\n-        (key, state) -> {\n-          state.clear();\n-        });\n+  /**\n+   * Allows to clear all state for the global watermark when the maximum watermark arrives. We do\n+   * not clean up the global window state via timers because we are not guranteed to ever receive\n+   * the final watermark which would lead to an unbounded number of keys and cleanup timers.\n+   * Instead, the cleanup code below should be run when we finally receive the max watermark.", "originalCommit": "cce653f6e3da985cceb26666f72559bcd538ef83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwMDY4OQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482400689", "bodyText": "As implemented this contains all state descriptors, regardless of the window?", "author": "tweise", "createdAt": "2020-09-02T20:14:37Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -75,7 +80,14 @@\n public class FlinkStateInternals<K> implements StateInternals {\n \n   private final KeyedStateBackend<ByteBuffer> flinkStateBackend;\n-  private Coder<K> keyCoder;\n+  private final Coder<K> keyCoder;\n+\n+  /**\n+   * A set which contains all state descriptors created in the global window. Used for cleanup on", "originalCommit": "cce653f6e3da985cceb26666f72559bcd538ef83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MTg5Mw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482841893", "bodyText": "Yes, that's right but that doesn't matter because all other state should also be cleaned up with the global window.", "author": "mxm", "createdAt": "2020-09-03T09:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwMDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MjUwNA==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482842504", "bodyText": "I'll remove \"global window\".", "author": "mxm", "createdAt": "2020-09-03T09:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwMDY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDAzMA==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482420030", "bodyText": "This is executed on every state access in the portable runner. It might be possible to reuse the descriptors. How much could be the net benefit? Probably small compared to the fn api overhead.", "author": "tweise", "createdAt": "2020-09-02T20:29:16Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -139,17 +163,27 @@ private FlinkStateBinder(StateNamespace namespace, StateContext<?> stateContext)\n     @Override\n     public <T2> ValueState<T2> bindValue(\n         String id, StateSpec<ValueState<T2>> spec, Coder<T2> coder) {\n-      return new FlinkValueState<>(flinkStateBackend, id, namespace, coder);\n+      ValueStateDescriptor<T2> valueStateDescriptor =\n+          new ValueStateDescriptor<>(id, new CoderTypeSerializer<>(coder));\n+      globalWindowStateDescriptors.add(valueStateDescriptor);\n+      return new FlinkValueState<>(flinkStateBackend, id, namespace, valueStateDescriptor);\n     }\n \n     @Override\n     public <T2> BagState<T2> bindBag(String id, StateSpec<BagState<T2>> spec, Coder<T2> elemCoder) {\n-      return new FlinkBagState<>(flinkStateBackend, id, namespace, elemCoder);\n+      ListStateDescriptor<T2> listStateDescriptor =\n+          new ListStateDescriptor<>(id, new CoderTypeSerializer<>(elemCoder));\n+      globalWindowStateDescriptors.add(listStateDescriptor);", "originalCommit": "cce653f6e3da985cceb26666f72559bcd538ef83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0Mjg4NQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482842885", "bodyText": "This is unrelated to the changes here. This object was just created a layer down before (FlinkBagState). Let's handle such optimizations in a follow-up.", "author": "mxm", "createdAt": "2020-09-03T09:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ5ODcyMw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484498723", "bodyText": "Changed reverted.", "author": "mxm", "createdAt": "2020-09-07T15:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNTQzMQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482425431", "bodyText": "Keep this to check that the cleanup isn't repeated even when the watermark is repeated.", "author": "tweise", "createdAt": "2020-09-02T20:33:27Z", "path": "runners/flink/src/test/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperatorTest.java", "diffHunk": "@@ -910,21 +892,16 @@ public void testEnsureStateCleanupOnFinalWatermark() throws Exception {\n         operator.keyedStateInternals.state(\n             stateNamespace, StateTags.bag(stateId, ByteStringCoder.of()));\n     state.add(ByteString.copyFrom(\"userstate\".getBytes(Charsets.UTF_8)));\n+    // No timers have been set for cleanup\n+    assertThat(testHarness.numEventTimeTimers(), is(0));\n+    // State has been created\n     assertThat(testHarness.numKeyedStateEntries(), is(1));\n \n     // Generate final watermark to trigger state cleanup\n     testHarness.processWatermark(\n         new Watermark(BoundedWindow.TIMESTAMP_MAX_VALUE.plus(1).getMillis()));\n \n     assertThat(testHarness.numKeyedStateEntries(), is(0));\n-\n-    // Close should not repeat state cleanup", "originalCommit": "cce653f6e3da985cceb26666f72559bcd538ef83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MDUxMQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r482840511", "bodyText": "I believe the cleanup ought to be repeated if there is new state. If there is none, then no cleanup will be performed because we keep track of the state descriptors created and clear that set on clean-up.", "author": "mxm", "createdAt": "2020-09-03T09:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNTQzMQ=="}], "type": "inlineReview"}, {"oid": "91068489f91ebccd72b1d4d85c28b87bd292d757", "url": "https://github.com/apache/beam/commit/91068489f91ebccd72b1d4d85c28b87bd292d757", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner.", "committedDate": "2020-09-07T15:41:16Z", "type": "forcePushed"}, {"oid": "81f48209810b8538429e6888fce6a98b377027e1", "url": "https://github.com/apache/beam/commit/81f48209810b8538429e6888fce6a98b377027e1", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner.", "committedDate": "2020-09-07T15:43:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxODc5NQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484618795", "bodyText": "Is there a good reason to not use applyToAllKeys? A specific state backend may have a better implementation, overriding the naive generic key iteration here: https://github.com/apache/flink/blob/c1a12e925b6ef46ad5cf0e0a5723949572550e9b/flink-runtime/src/main/java/org/apache/flink/runtime/state/AbstractKeyedStateBackend.java#L242", "author": "tweise", "createdAt": "2020-09-08T02:36:55Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -111,19 +128,43 @@ public K getKey() {\n   @Override\n   public <T extends State> T state(\n       StateNamespace namespace, StateTag<T> address, StateContext<?> context) {\n+    if (globalWindowNamespace.equals(namespace)) {\n+      // Take note of state bound to the global window for cleanup in clearGlobalState below.\n+      globalWindowStateTags.add(address);\n+    }\n     return address.getSpec().bind(address.getId(), new FlinkStateBinder(namespace, context));\n   }\n \n-  public void clearBagStates(StateNamespace namespace, StateTag<? extends BagState> address)\n-      throws Exception {\n-    CoderTypeSerializer typeSerializer = new CoderTypeSerializer<>(VoidCoder.of());\n-    flinkStateBackend.applyToAllKeys(\n-        namespace.stringKey(),\n-        StringSerializer.INSTANCE,\n-        new ListStateDescriptor<>(address.getId(), typeSerializer),\n-        (key, state) -> {\n+  /**\n+   * Allows to clear all state for the global watermark when the maximum watermark arrives. We do\n+   * not clean up the global window state via timers which would lead to an unbounded number of keys\n+   * and cleanup timers. Instead, the cleanup code below should be run when we finally receive the\n+   * max watermark.\n+   */\n+  public void clearGlobalState() {\n+    try {\n+      for (StateTag stateTag : globalWindowStateTags) {\n+        State state =\n+            state(\n+                globalWindowNamespace,\n+                stateTag,\n+                StateContexts.windowOnlyContext(GlobalWindow.INSTANCE));\n+        // We collect all keys in the global window for a particular state\n+        // Note that the alternative method applyToAllKeys(..) does the same internally.", "originalCommit": "81f48209810b8538429e6888fce6a98b377027e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcyMDgxMQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484720811", "bodyText": "Not really, other than using Beam's state descriptors instead of Flink's. Good point on other state backends potentially allowing to iterate over the keys without materializing first. Have reverted this back to the old behavior.", "author": "mxm", "createdAt": "2020-09-08T07:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYxODc5NQ=="}], "type": "inlineReview"}, {"oid": "b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068", "url": "https://github.com/apache/beam/commit/b434a0d9e2bbeec68d483cca0e5f3cbf5fd9f068", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner.", "committedDate": "2020-09-08T07:42:50Z", "type": "forcePushed"}, {"oid": "26b087bcd4770268fbbed0899386573be11796c6", "url": "https://github.com/apache/beam/commit/26b087bcd4770268fbbed0899386573be11796c6", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner.", "committedDate": "2020-09-08T08:46:21Z", "type": "commit"}, {"oid": "26b087bcd4770268fbbed0899386573be11796c6", "url": "https://github.com/apache/beam/commit/26b087bcd4770268fbbed0899386573be11796c6", "message": "[BEAM-10760] Generalize state cleanup optimization for global window\n\nThe previous fix a6f4a60edd3ed02839b5b37cdbb29ed137517fae only cleaned up the\nstate in the portable Flink Runner. This also adds the optimization to the\nclassic Flink Runner.", "committedDate": "2020-09-08T08:46:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NDUyOA==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484784528", "bodyText": "Looks we can keep this private?", "author": "je-ik", "createdAt": "2020-09-08T09:35:25Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/ExecutableStageDoFnOperator.java", "diffHunk": "@@ -899,7 +876,7 @@ public void finishBundle() {\n   }\n \n   static class CleanupTimer<InputT> implements StatefulDoFnRunner.CleanupTimer<InputT> {\n-    private static final String GC_TIMER_ID = \"__user-state-cleanup__\";\n+    public static final String GC_TIMER_ID = \"__user-state-cleanup__\";", "originalCommit": "26b087bcd4770268fbbed0899386573be11796c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1NDQwOQ==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484954409", "bodyText": "Yep! Thanks.", "author": "mxm", "createdAt": "2020-09-08T14:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2ODk0Nw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484968947", "bodyText": "Addressed in the merge commit.", "author": "mxm", "createdAt": "2020-09-08T14:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NDUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTkyMw==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484949923", "bodyText": "Doesn't need to be public?", "author": "tweise", "createdAt": "2020-09-08T14:08:48Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkStateInternals.java", "diffHunk": "@@ -114,16 +129,26 @@ public K getKey() {\n     return address.getSpec().bind(address.getId(), new FlinkStateBinder(namespace, context));\n   }\n \n-  public void clearBagStates(StateNamespace namespace, StateTag<? extends BagState> address)\n-      throws Exception {\n-    CoderTypeSerializer typeSerializer = new CoderTypeSerializer<>(VoidCoder.of());\n-    flinkStateBackend.applyToAllKeys(\n-        namespace.stringKey(),\n-        StringSerializer.INSTANCE,\n-        new ListStateDescriptor<>(address.getId(), typeSerializer),\n-        (key, state) -> {\n-          state.clear();\n-        });\n+  /**\n+   * Allows to clear all state for the global watermark when the maximum watermark arrives. We do\n+   * not clean up the global window state via timers which would lead to an unbounded number of keys\n+   * and cleanup timers. Instead, the cleanup code below should be run when we finally receive the\n+   * max watermark.\n+   */\n+  public void clearGlobalState() {", "originalCommit": "26b087bcd4770268fbbed0899386573be11796c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1NTAwNA==", "url": "https://github.com/apache/beam/pull/12759#discussion_r484955004", "bodyText": "I think it has to be because this is called from outside of the state package.", "author": "mxm", "createdAt": "2020-09-08T14:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0OTkyMw=="}], "type": "inlineReview"}]}