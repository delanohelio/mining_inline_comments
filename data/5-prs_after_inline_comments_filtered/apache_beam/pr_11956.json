{"pr_number": 11956, "pr_title": "[BEAM-8133] Publishing results of Nexmark tests to InfluxDB", "pr_createdAt": "2020-06-09T12:34:06Z", "pr_url": "https://github.com/apache/beam/pull/11956", "timeline": [{"oid": "7f2be4379c341e6a2ea8d067cbac147c6e78e0bd", "url": "https://github.com/apache/beam/commit/7f2be4379c341e6a2ea8d067cbac147c6e78e0bd", "message": "[BEAM-8133]\u00a0Build new Grafana images conditionally", "committedDate": "2020-06-10T14:09:01Z", "type": "forcePushed"}, {"oid": "fab9cff7006b35c6a14937e5bb90d7f6530062b2", "url": "https://github.com/apache/beam/commit/fab9cff7006b35c6a14937e5bb90d7f6530062b2", "message": "[BEAM-8133]\u00a0Build new Grafana images conditionally", "committedDate": "2020-06-10T14:12:31Z", "type": "forcePushed"}, {"oid": "5fedf7e4ebe8b44de12267986cfd5c61d11334f7", "url": "https://github.com/apache/beam/commit/5fedf7e4ebe8b44de12267986cfd5c61d11334f7", "message": "[BEAM-8133]\u00a0Build new Grafana images conditionally", "committedDate": "2020-06-10T15:23:15Z", "type": "forcePushed"}, {"oid": "e89172cd82451d8aabd4ffc04f38cf83e9b3b575", "url": "https://github.com/apache/beam/commit/e89172cd82451d8aabd4ffc04f38cf83e9b3b575", "message": "[BEAM-8133]\u00a0Build new Grafana images conditionally", "committedDate": "2020-06-11T17:25:51Z", "type": "forcePushed"}, {"oid": "1586c7522cefe122ab47df1be28635673e45ca11", "url": "https://github.com/apache/beam/commit/1586c7522cefe122ab47df1be28635673e45ca11", "message": "[BEAM-8133]\u00a0Build new Grafana images conditionally", "committedDate": "2020-06-15T11:07:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng==", "url": "https://github.com/apache/beam/pull/11956#discussion_r441348786", "bodyText": "I'm wondering if it would make sense to extract the appends of keys and values to a method, but I can't find a nice and clean way of doing it. @kamilwu do you have any thoughts about it?", "author": "mwalenia", "createdAt": "2020-06-17T07:48:04Z", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -40,34 +43,72 @@\n \n   private InfluxDBPublisher() {}\n \n+  public static void publishNexmarkResults(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishNexmark(results, settings));\n+  }\n+\n   public static void publishWithSettings(\n       final Collection<NamedTestResult> results, final InfluxDBSettings settings) {\n+    publishWithCheck(settings, () -> publishCommon(results, settings));\n+  }\n+\n+  private static void publishWithCheck(\n+      final InfluxDBSettings settings, final PublishFunction publishFunction) {\n     requireNonNull(settings, \"InfluxDB settings must not be null\");\n     if (isNoneBlank(settings.measurement, settings.database)) {\n       try {\n-        publish(results, settings);\n-      } catch (final Exception exception) {\n+        publishFunction.publish();\n+      } catch (Exception exception) {\n         LOG.warn(\"Unable to publish metrics due to error: {}\", exception.getMessage(), exception);\n       }\n     } else {\n       LOG.warn(\"Missing property -- measurement/database. Metrics won't be published.\");\n     }\n   }\n \n-  private static void publish(\n-      final Collection<NamedTestResult> results, final InfluxDBSettings settings) throws Exception {\n+  private static void publishNexmark(\n+      final Collection<Map<String, Object>> results, final InfluxDBSettings settings)\n+      throws Exception {\n \n-    final HttpClientBuilder builder = HttpClientBuilder.create();\n+    final HttpClientBuilder builder = provideHttpBuilder(settings);\n+    final HttpPost postRequest = providePOSTRequest(settings);\n+    final StringBuilder metricBuilder = new StringBuilder();\n+    results.forEach(\n+        map ->\n+            metricBuilder\n+                .append(map.get(\"measurement\"))", "originalCommit": "1586c7522cefe122ab47df1be28635673e45ca11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NDc5Ng==", "url": "https://github.com/apache/beam/pull/11956#discussion_r441364796", "bodyText": "How about adding a method getKV that would return a String in this format: \"key=value\", e.g. \"runner=DataflowRunner\"? This would reduce the number of appends.", "author": "kamilwu", "createdAt": "2020-06-17T08:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NTAxNg==", "url": "https://github.com/apache/beam/pull/11956#discussion_r441365016", "bodyText": "@pawelpasterz", "author": "kamilwu", "createdAt": "2020-06-17T08:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2ODkwOA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r441368908", "bodyText": "Yeah, makes sense, thanks!", "author": "pawelpasterz", "createdAt": "2020-06-17T08:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0ODc4Ng=="}], "type": "inlineReview"}, {"oid": "92d802f6762acd3cae1c7064589635ec3ad983d7", "url": "https://github.com/apache/beam/commit/92d802f6762acd3cae1c7064589635ec3ad983d7", "message": "[BEAM-8133] Update publish logic", "committedDate": "2020-06-15T11:07:50Z", "type": "forcePushed"}, {"oid": "116ad4ad78b37d1ddc4e14eaac1babd6db7f961a", "url": "https://github.com/apache/beam/commit/116ad4ad78b37d1ddc4e14eaac1babd6db7f961a", "message": "[BEAM-8133] Update publish logic", "committedDate": "2020-06-19T09:09:37Z", "type": "forcePushed"}, {"oid": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "url": "https://github.com/apache/beam/commit/b52dc6d043a5df203b229496d8167cd9f4faf83e", "message": "[BEAM-8133] Update publish logic", "committedDate": "2020-06-19T12:58:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTA5NA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r444759094", "bodyText": "Since the goal is to improve the existing use case can we make this an integer and use ms instead to make it more precise?", "author": "iemejia", "createdAt": "2020-06-24T09:17:22Z", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")", "originalCommit": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MTcyMA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445451720", "bodyText": "Sure, but I think we need to change wording to runtimeMs as well, WDYT?", "author": "pawelpasterz", "createdAt": "2020-06-25T10:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0MjQ4OA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445542488", "bodyText": "Yes good idea", "author": "iemejia", "createdAt": "2020-06-25T13:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTYzMQ==", "url": "https://github.com/apache/beam/pull/11956#discussion_r444759631", "bodyText": "Do we use this one? it looks with runtimeMs + numResults this is not needed anymore or we can deduce it if someone cares.", "author": "iemejia", "createdAt": "2020-06-24T09:18:10Z", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")", "originalCommit": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NTA5OA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445395098", "bodyText": "Sure, I'll remove it from implementation but not here (we want to preserve compatibility with BQ), I'll change it in influx publisher, thanks for the info!", "author": "pawelpasterz", "createdAt": "2020-06-25T08:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg==", "url": "https://github.com/apache/beam/pull/11956#discussion_r444761572", "bodyText": "Oh I thought timestamps in Influxe were in ms well probably we don't need that level of precision for the start timestamp.", "author": "iemejia", "createdAt": "2020-06-24T09:21:36Z", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Main.java", "diffHunk": "@@ -142,21 +148,27 @@ void runAll(String[] args) throws IOException {\n         saveSummary(null, configurations, actual, baseline, start, options);\n       }\n \n-      if (options.getExportSummaryToBigQuery()) {\n-        ImmutableMap<String, String> schema =\n-            ImmutableMap.<String, String>builder()\n-                .put(\"timestamp\", \"timestamp\")\n-                .put(\"runtimeSec\", \"float\")\n-                .put(\"eventsPerSec\", \"float\")\n-                .put(\"numResults\", \"integer\")\n-                .build();\n+      final ImmutableMap<String, String> schema =\n+          ImmutableMap.<String, String>builder()\n+              .put(\"timestamp\", \"timestamp\")\n+              .put(\"runtimeSec\", \"float\")\n+              .put(\"eventsPerSec\", \"float\")\n+              .put(\"numResults\", \"integer\")\n+              .build();\n \n+      if (options.getExportSummaryToBigQuery()) {\n         savePerfsToBigQuery(\n             BigQueryResultsPublisher.create(options.getBigQueryDataset(), schema),\n             options,\n             actual,\n             start);\n       }\n+\n+      if (options.getExportSummaryToInfluxDB()) {\n+        final long timestamp = start.getMillis() / 1000; // seconds", "originalCommit": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNjU2Nw==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445336567", "bodyText": "The default precision is nanoseconds. In case of nexmark results we changed it and use seconds instead\nreturn new HttpPost(\n        settings.host + \"/write?db=\" + settings.database + \"&\" + retentionPolicy + \"&precision=s\");", "author": "pawelpasterz", "createdAt": "2020-06-25T06:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMTEzNQ==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445401135", "bodyText": "We've thought that we don't really need milliseconds. Even seconds are probably more than enough", "author": "kamilwu", "createdAt": "2020-06-25T08:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0MzIxNQ==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445543215", "bodyText": "Yes you guys are right seconds is ok for the execution timestamp and ms is good for the benchmark run time", "author": "iemejia", "createdAt": "2020-06-25T13:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjY5Nw==", "url": "https://github.com/apache/beam/pull/11956#discussion_r444762697", "bodyText": "\ud83d\udc4d", "author": "iemejia", "createdAt": "2020-06-24T09:23:33Z", "path": "sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkQueryName.java", "diffHunk": "@@ -42,8 +42,8 @@\n   PROCESSING_TIME_WINDOWS(12), // Query \"12\"\n \n   // Other non-numbered queries\n-  BOUNDED_SIDE_INPUT_JOIN,\n-  SESSION_SIDE_INPUT_JOIN;\n+  BOUNDED_SIDE_INPUT_JOIN(13),", "originalCommit": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MzYwMQ==", "url": "https://github.com/apache/beam/pull/11956#discussion_r444763601", "bodyText": "Do not depend on repackaged commons-lang3 this will probably be removed in the future so better add the explicit commons-lang3 import and corresponding classes.", "author": "iemejia", "createdAt": "2020-06-24T09:25:06Z", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -19,14 +19,19 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils.isBlank;", "originalCommit": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzcyNg==", "url": "https://github.com/apache/beam/pull/11956#discussion_r444867726", "bodyText": "nit: The original code with the strings looks uglier but somehow is easier to understand in a single read (so easier to maintain), the new one requires a lot of methods and jumping back and forth in code for not much. Can we go back to the older approach", "author": "iemejia", "createdAt": "2020-06-24T12:47:55Z", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -66,30 +125,43 @@ private static void publish(\n       builder.setDefaultCredentialsProvider(provider);\n     }\n \n-    final HttpPost postRequest = new HttpPost(settings.host + \"/write?db=\" + settings.database);\n+    return builder;\n+  }\n \n-    final StringBuilder metricBuilder = new StringBuilder();\n-    results.stream()", "originalCommit": "b52dc6d043a5df203b229496d8167cd9f4faf83e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzMTU2MA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445331560", "bodyText": "Hm...sure we can.", "author": "pawelpasterz", "createdAt": "2020-06-25T06:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzcyNg=="}], "type": "inlineReview"}, {"oid": "c1a17b762d1ee5bc4e2caf0af7f609f1c36ea225", "url": "https://github.com/apache/beam/commit/c1a17b762d1ee5bc4e2caf0af7f609f1c36ea225", "message": "[BEAM-8133] Apply InfluxDB pipeline options in Nexmark tests", "committedDate": "2020-06-25T10:27:35Z", "type": "commit"}, {"oid": "f58fb616a25d85daf3c50485c0f10d2563686296", "url": "https://github.com/apache/beam/commit/f58fb616a25d85daf3c50485c0f10d2563686296", "message": "[BEAM-8133] Infinite retention policy for InfluxDB", "committedDate": "2020-06-25T10:27:35Z", "type": "commit"}, {"oid": "91d0081d8113274a2f41257bb6979f0f9ca1fee6", "url": "https://github.com/apache/beam/commit/91d0081d8113274a2f41257bb6979f0f9ca1fee6", "message": "fix: change unit from sec to ms, rename runtimeSec to runtimeMs", "committedDate": "2020-06-25T11:12:26Z", "type": "forcePushed"}, {"oid": "12f2cbe9d9a22783d683c8414598ded57adea2d6", "url": "https://github.com/apache/beam/commit/12f2cbe9d9a22783d683c8414598ded57adea2d6", "message": "[BEAM-8133] Update dashboards to reflect model changes\n\n* changed unit from seconds to milliseconds\n* renamed `runtimeSec` field to `runtimeMs`", "committedDate": "2020-06-25T11:17:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NjAzOA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445546038", "bodyText": "argh this commons import escaped here too. Can you use the non repackaged version please.", "author": "iemejia", "createdAt": "2020-06-25T13:10:59Z", "path": "sdks/java/testing/test-utils/src/main/java/org/apache/beam/sdk/testutils/publishing/InfluxDBPublisher.java", "diffHunk": "@@ -19,14 +19,16 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n-import static org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils.isNoneBlank;\n \n import java.io.IOException;\n import java.util.Collection;\n+import java.util.Map;\n+import org.apache.beam.repackaged.core.org.apache.commons.lang3.StringUtils;", "originalCommit": "12f2cbe9d9a22783d683c8414598ded57adea2d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDY4OA==", "url": "https://github.com/apache/beam/pull/11956#discussion_r445554688", "bodyText": "ah..I would swear I changed it...thanks!", "author": "pawelpasterz", "createdAt": "2020-06-25T13:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NjAzOA=="}], "type": "inlineReview"}, {"oid": "49d5e872012a1786a604e3ac95dce7c92f0adefe", "url": "https://github.com/apache/beam/commit/49d5e872012a1786a604e3ac95dce7c92f0adefe", "message": "[BEAM-8133] Update publish logic", "committedDate": "2020-06-25T14:53:13Z", "type": "commit"}, {"oid": "abfb1dd58c84f00e0d7b96bc7700dc154eb1766c", "url": "https://github.com/apache/beam/commit/abfb1dd58c84f00e0d7b96bc7700dc154eb1766c", "message": "[BEAM-8133] Update dashboards to reflect model changes\n\n* changed unit from seconds to milliseconds\n* renamed `runtimeSec` field to `runtimeMs`", "committedDate": "2020-06-25T14:53:13Z", "type": "forcePushed"}, {"oid": "e89324f43b186a3f26d68d11b74e916a47a21907", "url": "https://github.com/apache/beam/commit/e89324f43b186a3f26d68d11b74e916a47a21907", "message": "[BEAM-8133] Update dashboards to reflect model changes\n\n* changed unit from seconds to milliseconds\n* renamed `runtimeSec` field to `runtimeMs`", "committedDate": "2020-06-25T15:33:36Z", "type": "commit"}, {"oid": "e89324f43b186a3f26d68d11b74e916a47a21907", "url": "https://github.com/apache/beam/commit/e89324f43b186a3f26d68d11b74e916a47a21907", "message": "[BEAM-8133] Update dashboards to reflect model changes\n\n* changed unit from seconds to milliseconds\n* renamed `runtimeSec` field to `runtimeMs`", "committedDate": "2020-06-25T15:33:36Z", "type": "forcePushed"}]}