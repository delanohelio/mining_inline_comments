{"pr_number": 13003, "pr_title": "[BEAM-10992] Add @SchemaCaseFormat annotation", "pr_createdAt": "2020-10-02T18:58:36Z", "pr_url": "https://github.com/apache/beam/pull/13003", "timeline": [{"oid": "8e70cf6698522127450611e7c7892015e074b6f0", "url": "https://github.com/apache/beam/commit/8e70cf6698522127450611e7c7892015e074b6f0", "message": "More helpful error when we can't find a way to construct a POJO", "committedDate": "2020-10-02T18:26:14Z", "type": "commit"}, {"oid": "d9fe3f8f48d5507142b26d73fcc592b6e392a819", "url": "https://github.com/apache/beam/commit/d9fe3f8f48d5507142b26d73fcc592b6e392a819", "message": "More helpful error when we can't construct a Java Bean", "committedDate": "2020-10-02T18:26:14Z", "type": "commit"}, {"oid": "17c9d4920ec5627ffedce97679bb978a528f8d7e", "url": "https://github.com/apache/beam/commit/17c9d4920ec5627ffedce97679bb978a528f8d7e", "message": "Add @SchemaCaseFormat, test with AutoValue beans and POJOs", "committedDate": "2020-10-02T19:01:09Z", "type": "commit"}, {"oid": "17c9d4920ec5627ffedce97679bb978a528f8d7e", "url": "https://github.com/apache/beam/commit/17c9d4920ec5627ffedce97679bb978a528f8d7e", "message": "Add @SchemaCaseFormat, test with AutoValue beans and POJOs", "committedDate": "2020-10-02T19:01:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE0MA==", "url": "https://github.com/apache/beam/pull/13003#discussion_r499005140", "bodyText": "I hate inheritance but I have to ask: what happens with\n@SchemaCaseFormat(A)\nclass Parent {\n  ... fields ...\n}\n\n@SchemaCaseFormat(B)\nclass Child extends Parent { }\nI'm honestly not sure what should happen. I think in your case anything not overridden will get case format A. That seems right but just want to highlight it.", "author": "kennknowles", "createdAt": "2020-10-02T19:14:44Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/FieldValueTypeInformation.java", "diffHunk": "@@ -118,6 +123,29 @@ public static FieldValueTypeInformation forField(Field field) {\n         .build();\n   }\n \n+  public static <T extends AnnotatedElement & Member> String getNameOverride(\n+      String original, T member) {\n+    SchemaFieldName fieldName = member.getAnnotation(SchemaFieldName.class);\n+    SchemaCaseFormat caseFormatAnnotation = member.getAnnotation(SchemaCaseFormat.class);\n+    SchemaCaseFormat classCaseFormatAnnotation =\n+        member.getDeclaringClass().getAnnotation(SchemaCaseFormat.class);", "originalCommit": "17c9d4920ec5627ffedce97679bb978a528f8d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMjI2Ng==", "url": "https://github.com/apache/beam/pull/13003#discussion_r499022266", "bodyText": "Hm I didn't consider inheritance at all. I think your assessment about how this will behave is correct. I think this behavior would be fine, except in a context like this:\nclass SomethingOutOfMyControl {\n   ... fields ...\n}\n\n@SchemaCaseFormat(B)\nclass MyBeamObject extends SomethingOutOfMyControl { }\nNot sure how often something like that comes up, but maybe that's enough reason to scope the case format to the class we're inferring the schema from.", "author": "TheNeuralBit", "createdAt": "2020-10-02T19:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNDczNw==", "url": "https://github.com/apache/beam/pull/13003#discussion_r499734737", "bodyText": "Worst cast, the person authoring MyBeamObject has to write a bunch of trivial overrides. I'm OK with that.", "author": "kennknowles", "createdAt": "2020-10-05T16:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE0MA=="}], "type": "inlineReview"}, {"oid": "a6cd84c51ef5f46066246da29051962c9015a2e9", "url": "https://github.com/apache/beam/commit/a6cd84c51ef5f46066246da29051962c9015a2e9", "message": "lint", "committedDate": "2020-11-13T19:33:52Z", "type": "commit"}]}