{"pr_number": 12498, "pr_title": "[BEAM-10654] Implemented ExternalSchemaIOTransformRegistrar for jdbc", "pr_createdAt": "2020-08-07T14:21:48Z", "pr_url": "https://github.com/apache/beam/pull/12498", "timeline": [{"oid": "3a1c49c3057e37e7410632dbcc112218b85322ba", "url": "https://github.com/apache/beam/commit/3a1c49c3057e37e7410632dbcc112218b85322ba", "message": "updated schemaio gradles", "committedDate": "2020-08-07T19:42:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzEwMw==", "url": "https://github.com/apache/beam/pull/12498#discussion_r467337103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.apache.beam.sdk.extensions.schemaio.expansion;\n          \n          \n            \n            @DefaultQualifier(NonNull.class)\n          \n          \n            \n            package org.apache.beam.sdk.extensions.schemaio.expansion;\n          \n          \n            \n            \n          \n          \n            \n            import org.checkerframework.framework.qual.DefaultQualifier;\n          \n          \n            \n            import org.checkerframework.checker.nullness.qual.NonNull;\n          \n      \n    \n    \n  \n\nWe should make everything default to NonNull. After you do this you'll likely get a lot of build errors from checker framework that will require you to add @Nullable on anything that can be null.\n(See https://checkerframework.org/manual/#default-qualifier)", "author": "TheNeuralBit", "createdAt": "2020-08-08T00:29:20Z", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** External Transform Registration for SchemaIOs. */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;", "originalCommit": "3a1c49c3057e37e7410632dbcc112218b85322ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODUyOQ==", "url": "https://github.com/apache/beam/pull/12498#discussion_r468718529", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-11T16:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzMzMQ==", "url": "https://github.com/apache/beam/pull/12498#discussion_r467337331", "bodyText": "Let's make these URNs mention schemaio to distinguish them in case there are non-schemaio versions. Maybe beam:external:java:schemaio:<identifier>", "author": "TheNeuralBit", "createdAt": "2020-08-08T00:30:46Z", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",", "originalCommit": "3a1c49c3057e37e7410632dbcc112218b85322ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTI5MA==", "url": "https://github.com/apache/beam/pull/12498#discussion_r468719290", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-11T16:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNzMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODY1NQ==", "url": "https://github.com/apache/beam/pull/12498#discussion_r467338655", "bodyText": "This isn't ideal since it will swallow up any other exception that occurs inside the try block, and when it does catch something from translateRow or translateSchema it's not clear where the problem is. Could you instead add a try-catch in translateRow and translateSchema that catches the specific exception(s) that might be thrown, and re-throws them with a RuntimeException?\nWhen you re-throw you should always reference the original exception as well, like throw new RuntimeException(\"Some additional context\", e)", "author": "TheNeuralBit", "createdAt": "2020-08-08T00:40:48Z", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",\n+            new WriterBuilder(schemaIOProvider));\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static class Configuration {\n+    String location = \"\";\n+    byte[] config = new byte[0];\n+    @Nullable byte[] dataSchema = null;\n+\n+    public void setLocation(String location) {\n+      this.location = location;\n+    }\n+\n+    public void setConfig(byte[] config) {\n+      this.config = config;\n+    }\n+\n+    public void setDataSchema(byte[] dataSchema) {\n+      this.dataSchema = dataSchema;\n+    }\n+  }\n+\n+  @Nullable\n+  private static Schema translateSchema(@Nullable byte[] schemaBytes) throws Exception {\n+    if (schemaBytes == null) {\n+      return null;\n+    }\n+    SchemaApi.Schema protoSchema = SchemaApi.Schema.parseFrom(schemaBytes);\n+    return SchemaTranslation.schemaFromProto(protoSchema);\n+  }\n+\n+  private static Row translateRow(byte[] rowBytes, Schema configSchema) throws Exception {\n+    RowCoder rowCoder = RowCoder.of(configSchema);\n+    InputStream stream = new ByteArrayInputStream(rowBytes);\n+    return rowCoder.decode(stream);\n+  }\n+\n+  private static class ReaderBuilder\n+      implements ExternalTransformBuilder<Configuration, PBegin, PCollection<Row>> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    ReaderBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(Configuration configuration) {\n+      try {\n+        return schemaIOProvider\n+            .from(\n+                configuration.location,\n+                translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                translateSchema(configuration.dataSchema))\n+            .buildReader();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");\n+      }\n+    }\n+  }\n+\n+  private static class WriterBuilder\n+      implements ExternalTransformBuilder<Configuration, PCollection<Row>, PDone> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    WriterBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildExternal(Configuration configuration) {\n+      try {\n+        return (PTransform<PCollection<Row>, PDone>)\n+            schemaIOProvider\n+                .from(\n+                    configuration.location,\n+                    translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                    translateSchema(configuration.dataSchema))\n+                .buildWriter();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");", "originalCommit": "3a1c49c3057e37e7410632dbcc112218b85322ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxODk3NQ==", "url": "https://github.com/apache/beam/pull/12498#discussion_r468718975", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-11T16:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTAwNA==", "url": "https://github.com/apache/beam/pull/12498#discussion_r467339004", "bodyText": "There should probably be some unit tests that exercise WriterBuilder and ReaderBuilder. You could create instances that reference a mock SchemaIOProvider and verify they do what we expect.", "author": "TheNeuralBit", "createdAt": "2020-08-08T00:43:05Z", "path": "sdks/java/extensions/schemaio-expansion-service/src/main/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import javax.annotation.Nullable;\n+import org.apache.beam.model.pipeline.v1.SchemaApi;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+\n+@Experimental(Experimental.Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class ExternalSchemaIOTransformRegistrar implements ExternalTransformRegistrar {\n+\n+  @Override\n+  public Map<String, ExternalTransformBuilder<?, ?, ?>> knownBuilderInstances() {\n+    ImmutableMap.Builder builder = ImmutableMap.<String, ExternalTransformRegistrar>builder();\n+    try {\n+      for (SchemaIOProvider schemaIOProvider : ServiceLoader.load(SchemaIOProvider.class)) {\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":read:v1\",\n+            new ReaderBuilder(schemaIOProvider));\n+        builder.put(\n+            \"beam:external:java:\" + schemaIOProvider.identifier() + \":write:v1\",\n+            new WriterBuilder(schemaIOProvider));\n+      }\n+    } catch (Exception e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static class Configuration {\n+    String location = \"\";\n+    byte[] config = new byte[0];\n+    @Nullable byte[] dataSchema = null;\n+\n+    public void setLocation(String location) {\n+      this.location = location;\n+    }\n+\n+    public void setConfig(byte[] config) {\n+      this.config = config;\n+    }\n+\n+    public void setDataSchema(byte[] dataSchema) {\n+      this.dataSchema = dataSchema;\n+    }\n+  }\n+\n+  @Nullable\n+  private static Schema translateSchema(@Nullable byte[] schemaBytes) throws Exception {\n+    if (schemaBytes == null) {\n+      return null;\n+    }\n+    SchemaApi.Schema protoSchema = SchemaApi.Schema.parseFrom(schemaBytes);\n+    return SchemaTranslation.schemaFromProto(protoSchema);\n+  }\n+\n+  private static Row translateRow(byte[] rowBytes, Schema configSchema) throws Exception {\n+    RowCoder rowCoder = RowCoder.of(configSchema);\n+    InputStream stream = new ByteArrayInputStream(rowBytes);\n+    return rowCoder.decode(stream);\n+  }\n+\n+  private static class ReaderBuilder\n+      implements ExternalTransformBuilder<Configuration, PBegin, PCollection<Row>> {\n+    SchemaIOProvider schemaIOProvider;\n+\n+    ReaderBuilder(SchemaIOProvider schemaIOProvider) {\n+      this.schemaIOProvider = schemaIOProvider;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildExternal(Configuration configuration) {\n+      try {\n+        return schemaIOProvider\n+            .from(\n+                configuration.location,\n+                translateRow(configuration.config, schemaIOProvider.configurationSchema()),\n+                translateSchema(configuration.dataSchema))\n+            .buildReader();\n+      } catch (Exception e) {\n+        throw new RuntimeException(\"Could not convert configuration proto to row or schema.\");\n+      }\n+    }\n+  }\n+\n+  private static class WriterBuilder", "originalCommit": "3a1c49c3057e37e7410632dbcc112218b85322ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDEzNA==", "url": "https://github.com/apache/beam/pull/12498#discussion_r468720134", "bodyText": "ACK, I will add these in.", "author": "sclukas77", "createdAt": "2020-08-11T16:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTAwNA=="}], "type": "inlineReview"}, {"oid": "45811f4f37520cd4ef932bb0715d4f80e0697a44", "url": "https://github.com/apache/beam/commit/45811f4f37520cd4ef932bb0715d4f80e0697a44", "message": "Modified JdbcSchemaIOProvider to infer query/statement from location", "committedDate": "2020-08-11T16:31:32Z", "type": "forcePushed"}, {"oid": "e4cbdca6d90d5f16fec0e9aea11cc78938579904", "url": "https://github.com/apache/beam/commit/e4cbdca6d90d5f16fec0e9aea11cc78938579904", "message": "Modified JdbcSchemaIOProvider to infer query/statement from location", "committedDate": "2020-08-11T16:34:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjE3MA==", "url": "https://github.com/apache/beam/pull/12498#discussion_r468722170", "bodyText": "The number of ?s in this query should depend on the number of fields in the schema of the input PCollection. (?, ?, ?) will only work when writing exactly three fields. I'd suggest returning a PTransform that looks at the input PCollection in its expand method. Something like this:\nreturn new PTransform<PCollection<Row>, PDone>() {\n  public PDone expand(PCollection<Row> input) {\n    Schema schema = input.getSchema()\n    // Generate writeStatement based on input schema\n    \n    return input.apply(JdbcIO.<Row>write()...);\n  }\n}", "author": "TheNeuralBit", "createdAt": "2020-08-11T16:48:22Z", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing JSON payloads with {@link\n+ * JdbcIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class JdbcSchemaIOProvider implements SchemaIOProvider {\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"jdbc\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */\n+  @Override\n+  public Schema configurationSchema() {\n+    return Schema.builder()\n+        .addStringField(\"driverClassName\")\n+        .addStringField(\"jdbcUrl\")\n+        .addStringField(\"username\")\n+        .addStringField(\"password\")\n+        .addNullableField(\"connectionProperties\", FieldType.STRING)\n+        .addNullableField(\"connectionInitSqls\", FieldType.iterable(FieldType.STRING))\n+        .addNullableField(\"readQuery\", FieldType.STRING)\n+        .addNullableField(\"writeStatement\", FieldType.STRING)\n+        .addNullableField(\"fetchSize\", FieldType.INT16)\n+        .addNullableField(\"outputParallelization\", FieldType.BOOLEAN)\n+        .build();\n+  }\n+\n+  /**\n+   * Produce a SchemaIO given a String representing the data's location, the schema of the data that\n+   * resides there, and some IO-specific configuration object.\n+   */\n+  @Override\n+  public JdbcSchemaIO from(String location, Row configuration, Schema dataSchema) {\n+    return new JdbcSchemaIO(location, configuration);\n+  }\n+\n+  @Override\n+  public boolean requiresDataSchema() {\n+    return false;\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  /** An abstraction to create schema aware IOs. */\n+  static class JdbcSchemaIO implements SchemaIO, Serializable {\n+    protected final Row config;\n+    protected final String location;\n+\n+    JdbcSchemaIO(String location, Row config) {\n+      this.config = config;\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public Schema schema() {\n+      return null;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildReader() {\n+      String readQuery;\n+      if (config.getString(\"readQuery\") != null) {\n+        readQuery = config.getString(\"readQuery\");\n+      } else {\n+        readQuery = String.format(\"SELECT f_int FROM %s\", location);\n+      }\n+\n+      JdbcIO.DataSourceConfiguration dataSourceConfiguration = getDataSourceConfiguration();\n+\n+      JdbcIO.ReadRows readRows =\n+          JdbcIO.readRows()\n+              .withDataSourceConfiguration(dataSourceConfiguration)\n+              .withQuery(readQuery);\n+\n+      if (config.getInt16(\"fetchSize\") != null) {\n+        readRows = readRows.withFetchSize(config.getInt16(\"fetchSize\"));\n+      }\n+      if (config.getBoolean(\"outputParallelization\") != null) {\n+        readRows = readRows.withOutputParallelization(config.getBoolean(\"outputParallelization\"));\n+      }\n+      return readRows;\n+    }\n+\n+    @Override\n+    public PTransform<PCollection<Row>, PDone> buildWriter() {\n+      String writeStatement;\n+      if (config.getString(\"writeStatement\") != null) {\n+        writeStatement = config.getString(\"writeStatement\");\n+      } else {\n+        writeStatement = String.format(\"INSERT INTO %s VALUES(?, ?, ?)\", location);", "originalCommit": "e4cbdca6d90d5f16fec0e9aea11cc78938579904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NTI3OQ==", "url": "https://github.com/apache/beam/pull/12498#discussion_r470865279", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-14T21:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjYyMA==", "url": "https://github.com/apache/beam/pull/12498#discussion_r468722620", "bodyText": "Similarly this shouldn't mention specific field names. In this case I think we could just do SELECT * FROM %s", "author": "TheNeuralBit", "createdAt": "2020-08-11T16:49:08Z", "path": "sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcSchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.jdbc;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.Schema.FieldType;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PDone;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing JSON payloads with {@link\n+ * JdbcIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class JdbcSchemaIOProvider implements SchemaIOProvider {\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"jdbc\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */\n+  @Override\n+  public Schema configurationSchema() {\n+    return Schema.builder()\n+        .addStringField(\"driverClassName\")\n+        .addStringField(\"jdbcUrl\")\n+        .addStringField(\"username\")\n+        .addStringField(\"password\")\n+        .addNullableField(\"connectionProperties\", FieldType.STRING)\n+        .addNullableField(\"connectionInitSqls\", FieldType.iterable(FieldType.STRING))\n+        .addNullableField(\"readQuery\", FieldType.STRING)\n+        .addNullableField(\"writeStatement\", FieldType.STRING)\n+        .addNullableField(\"fetchSize\", FieldType.INT16)\n+        .addNullableField(\"outputParallelization\", FieldType.BOOLEAN)\n+        .build();\n+  }\n+\n+  /**\n+   * Produce a SchemaIO given a String representing the data's location, the schema of the data that\n+   * resides there, and some IO-specific configuration object.\n+   */\n+  @Override\n+  public JdbcSchemaIO from(String location, Row configuration, Schema dataSchema) {\n+    return new JdbcSchemaIO(location, configuration);\n+  }\n+\n+  @Override\n+  public boolean requiresDataSchema() {\n+    return false;\n+  }\n+\n+  @Override\n+  public PCollection.IsBounded isBounded() {\n+    return PCollection.IsBounded.BOUNDED;\n+  }\n+\n+  /** An abstraction to create schema aware IOs. */\n+  static class JdbcSchemaIO implements SchemaIO, Serializable {\n+    protected final Row config;\n+    protected final String location;\n+\n+    JdbcSchemaIO(String location, Row config) {\n+      this.config = config;\n+      this.location = location;\n+    }\n+\n+    @Override\n+    public Schema schema() {\n+      return null;\n+    }\n+\n+    @Override\n+    public PTransform<PBegin, PCollection<Row>> buildReader() {\n+      String readQuery;\n+      if (config.getString(\"readQuery\") != null) {\n+        readQuery = config.getString(\"readQuery\");\n+      } else {\n+        readQuery = String.format(\"SELECT f_int FROM %s\", location);", "originalCommit": "e4cbdca6d90d5f16fec0e9aea11cc78938579904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2NTM2Mg==", "url": "https://github.com/apache/beam/pull/12498#discussion_r470865362", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-14T21:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNDk2Mw==", "url": "https://github.com/apache/beam/pull/12498#discussion_r470904963", "bodyText": "Nice :)", "author": "TheNeuralBit", "createdAt": "2020-08-14T23:34:39Z", "path": "sdks/java/extensions/schemaio-expansion-service/src/test/java/org/apache/beam/sdk/extensions/schemaio/expansion/ExternalSchemaIOTransformRegistrarTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.schemaio.expansion;\n+\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.RowCoder;\n+import org.apache.beam.sdk.extensions.schemaio.expansion.ExternalSchemaIOTransformRegistrar.Configuration;\n+import org.apache.beam.sdk.extensions.schemaio.expansion.ExternalSchemaIOTransformRegistrar.ReaderBuilder;\n+import org.apache.beam.sdk.extensions.schemaio.expansion.ExternalSchemaIOTransformRegistrar.WriterBuilder;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaTranslation;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mockito;\n+\n+/** Unit tests for {@link ExternalSchemaIOTransformRegistrar}. */\n+@RunWith(JUnit4.class)\n+public class ExternalSchemaIOTransformRegistrarTest {\n+  String location = \"test\";\n+  Schema validDataSchema = Schema.builder().addStringField(\"dataField\").build();\n+  Schema validConfigSchema = Schema.builder().addStringField(\"configField\").build();\n+  Row validConfigRow = Row.withSchema(validConfigSchema).addValue(\"value\").build();\n+\n+  byte[] validSchemaBytes = SchemaTranslation.schemaToProto(validDataSchema, true).toByteArray();\n+  byte[] invalidBytes = \"Nice try\".getBytes(Charset.defaultCharset());", "originalCommit": "703905e73c61eea2d8d4ba2332bf35871658c40e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "72cda05d16488f46bf9a09229f2a3a6cdfd6b8f5", "url": "https://github.com/apache/beam/commit/72cda05d16488f46bf9a09229f2a3a6cdfd6b8f5", "message": "[BEAM-10654] Implemented ExternalSchemaIOTransformRegistrar for jdbc", "committedDate": "2020-08-18T16:03:46Z", "type": "commit"}, {"oid": "11ac471451a655ed5ce13f9c792d833bd7b99873", "url": "https://github.com/apache/beam/commit/11ac471451a655ed5ce13f9c792d833bd7b99873", "message": "updated schemaio gradles", "committedDate": "2020-08-18T16:03:46Z", "type": "commit"}, {"oid": "eb837e91f182b364374db86a5db7c60a1fe05793", "url": "https://github.com/apache/beam/commit/eb837e91f182b364374db86a5db7c60a1fe05793", "message": "Modified JdbcSchemaIOProvider to infer query/statement from location", "committedDate": "2020-08-18T16:03:46Z", "type": "commit"}, {"oid": "d953a5f4f8ca401cd21ac80b3d9f2279368b5c93", "url": "https://github.com/apache/beam/commit/d953a5f4f8ca401cd21ac80b3d9f2279368b5c93", "message": "Added ExternalSchemaIOTransformRegistrar tests", "committedDate": "2020-08-18T16:43:15Z", "type": "commit"}, {"oid": "7cb7ba6684e0d39cd09db4f579ade65baf43b170", "url": "https://github.com/apache/beam/commit/7cb7ba6684e0d39cd09db4f579ade65baf43b170", "message": "Updated javadoc and TODOs", "committedDate": "2020-08-19T16:54:42Z", "type": "commit"}, {"oid": "7cb7ba6684e0d39cd09db4f579ade65baf43b170", "url": "https://github.com/apache/beam/commit/7cb7ba6684e0d39cd09db4f579ade65baf43b170", "message": "Updated javadoc and TODOs", "committedDate": "2020-08-19T16:54:42Z", "type": "forcePushed"}, {"oid": "249a667f873566b177523ba858ba09621ad0d50c", "url": "https://github.com/apache/beam/commit/249a667f873566b177523ba858ba09621ad0d50c", "message": "SpotlessApply, python formatter", "committedDate": "2020-08-20T20:00:49Z", "type": "commit"}, {"oid": "249a667f873566b177523ba858ba09621ad0d50c", "url": "https://github.com/apache/beam/commit/249a667f873566b177523ba858ba09621ad0d50c", "message": "SpotlessApply, python formatter", "committedDate": "2020-08-20T20:00:49Z", "type": "forcePushed"}, {"oid": "ac5dd7cb29239e6c9ddaaa3fb3c20d5a33c4a53c", "url": "https://github.com/apache/beam/commit/ac5dd7cb29239e6c9ddaaa3fb3c20d5a33c4a53c", "message": "removed old JdbcTransformsRegistrar logic", "committedDate": "2020-08-21T19:41:38Z", "type": "forcePushed"}, {"oid": "b5914bb92bc4106ed3459aedc8be95920f0d4517", "url": "https://github.com/apache/beam/commit/b5914bb92bc4106ed3459aedc8be95920f0d4517", "message": "Deleted JdbcTransformsRegistrar", "committedDate": "2020-08-21T19:46:41Z", "type": "forcePushed"}, {"oid": "8e2d0ab1b1f9d90e6ff1f41135e711dc710b5269", "url": "https://github.com/apache/beam/commit/8e2d0ab1b1f9d90e6ff1f41135e711dc710b5269", "message": "Deleted JdbcTransformsRegistrar", "committedDate": "2020-08-21T20:05:41Z", "type": "commit"}, {"oid": "8e2d0ab1b1f9d90e6ff1f41135e711dc710b5269", "url": "https://github.com/apache/beam/commit/8e2d0ab1b1f9d90e6ff1f41135e711dc710b5269", "message": "Deleted JdbcTransformsRegistrar", "committedDate": "2020-08-21T20:05:41Z", "type": "forcePushed"}]}