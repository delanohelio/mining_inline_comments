{"pr_number": 11331, "pr_title": "[BEAM-9646] Add Google Cloud vision integration transform", "pr_createdAt": "2020-04-07T12:20:08Z", "pr_url": "https://github.com/apache/beam/pull/11331", "timeline": [{"oid": "86175c8c2da9350ce683101264da58a18fc2d4b9", "url": "https://github.com/apache/beam/commit/86175c8c2da9350ce683101264da58a18fc2d4b9", "message": "Add @Experimental annotation, make parent class package-private", "committedDate": "2020-04-29T10:40:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4ODA3OQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421688079", "bodyText": "Why was 5 chosen?", "author": "tysonjh", "createdAt": "2020-05-07T17:55:12Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4OTU4NA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422989584", "bodyText": "5 is the limit set by the API for sychronous requests\nhttps://cloud.google.com/vision/docs/batch\nI'll include the link in the comments for clarity.", "author": "mwalenia", "createdAt": "2020-05-11T12:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4ODA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTk5Mw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421689993", "bodyText": "Would you please add comments to this as well? It would be useful for those implementing subclasses.", "author": "tysonjh", "createdAt": "2020-05-07T17:58:29Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1MTQwMw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r428351403", "bodyText": "A summary fragment would be nice here, even something simple like 'Constructs an AnnotateImages transform.'", "author": "tysonjh", "createdAt": "2020-05-20T22:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MzQ1OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421693458", "bodyText": "'larger or equal to %d'", "author": "tysonjh", "createdAt": "2020-05-07T18:04:01Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4OTg0MA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422989840", "bodyText": "Right, thanks!", "author": "mwalenia", "createdAt": "2020-05-11T12:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MzQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzU5Mw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421697593", "bodyText": "What do you think about adding a CheckForNull annotation for ctx? Mentioning that the parameter may be null in the comments, and the significance of it, would be helpful.", "author": "tysonjh", "createdAt": "2020-05-07T18:11:01Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzODEyOQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r423038129", "bodyText": "I think using Nullable would be better here, since there are cases when we completely ignore the argument.", "author": "mwalenia", "createdAt": "2020-05-11T13:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyOTI5NA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421829294", "bodyText": "Should this be in finishBundle()?\nI would expect either a new ImageAnnotatorClient is created with each bundle and closed after processing a bundle, or that a single instance is used for the life of the DoFn using setup/teardown.", "author": "tysonjh", "createdAt": "2020-05-07T22:24:12Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);\n+\n+  /**\n+   * The {@link DoFn} performing the calls to Cloud Vision API. Input PCollection contains lists of\n+   * {@link AnnotateImageRequest}s ready for batching.\n+   */\n+  public static class PerformImageAnnotation\n+      extends DoFn<List<AnnotateImageRequest>, List<AnnotateImageResponse>> {\n+\n+    private ImageAnnotatorClient imageAnnotatorClient;\n+\n+    public PerformImageAnnotation() {}\n+\n+    /**\n+     * Parametrized constructor to make mock injection easier in testing.\n+     *\n+     * @param imageAnnotatorClient\n+     */\n+    public PerformImageAnnotation(ImageAnnotatorClient imageAnnotatorClient) {\n+      this.imageAnnotatorClient = imageAnnotatorClient;\n+    }\n+\n+    @StartBundle\n+    public void startBundle() throws IOException {\n+      imageAnnotatorClient = ImageAnnotatorClient.create();\n+    }\n+\n+    @Teardown\n+    public void teardown() {\n+      imageAnnotatorClient.close();", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4OTg4MA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422989880", "bodyText": "I moved initialization of the client to setup() instead, like it's done in Python.", "author": "mwalenia", "createdAt": "2020-05-11T12:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyOTI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDA2Nw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421830067", "bodyText": "Nit: 'the call itself' doesn't describe what this method does. Consider rephrasing.", "author": "tysonjh", "createdAt": "2020-05-07T22:26:11Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);\n+\n+  /**\n+   * The {@link DoFn} performing the calls to Cloud Vision API. Input PCollection contains lists of\n+   * {@link AnnotateImageRequest}s ready for batching.\n+   */\n+  public static class PerformImageAnnotation\n+      extends DoFn<List<AnnotateImageRequest>, List<AnnotateImageResponse>> {\n+\n+    private ImageAnnotatorClient imageAnnotatorClient;\n+\n+    public PerformImageAnnotation() {}\n+\n+    /**\n+     * Parametrized constructor to make mock injection easier in testing.\n+     *\n+     * @param imageAnnotatorClient\n+     */\n+    public PerformImageAnnotation(ImageAnnotatorClient imageAnnotatorClient) {\n+      this.imageAnnotatorClient = imageAnnotatorClient;\n+    }\n+\n+    @StartBundle\n+    public void startBundle() throws IOException {\n+      imageAnnotatorClient = ImageAnnotatorClient.create();\n+    }\n+\n+    @Teardown\n+    public void teardown() {\n+      imageAnnotatorClient.close();\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) {\n+      context.output(getResponse(context.element()));\n+    }\n+\n+    /**\n+     * Performs the call itself. Default access for testing.", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MDc3Ng==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422990776", "bodyText": "Corrected, thanks for the suggestion", "author": "mwalenia", "createdAt": "2020-05-11T12:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421831948", "bodyText": "From what I read, GroupIntoBatches only batches elements within a key. If keys are random, won't this result in very little batching?", "author": "tysonjh", "createdAt": "2020-05-07T22:31:27Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+public abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 5L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private long batchSize;\n+\n+  public AnnotateImages(\n+      PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize) {\n+    this.contextSideInput = contextSideInput;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  public AnnotateImages(List<Feature> featureList, long batchSize) {\n+    contextSideInput = null;\n+    this.featureList = featureList;\n+    checkBatchSizeCorrectness(batchSize);\n+    this.batchSize = batchSize;\n+  }\n+\n+  private void checkBatchSizeCorrectness(long batchSize) {\n+    if (batchSize > MAX_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Max batch size exceeded.\\n\" + \"Batch size needs to be equal or smaller than %d\",\n+              MAX_BATCH_SIZE));\n+    } else if (batchSize < MIN_BATCH_SIZE) {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Min batch size not reached.\\n\" + \"Batch size needs to be larger than %d\",\n+              MIN_BATCH_SIZE));\n+    }\n+  }\n+\n+  /**\n+   * Applies all necessary transforms to call the Vision API. In order to group requests into\n+   * batches, we assign keys to the requests, as {@link GroupIntoBatches} works only on {@link KV}s.\n+   */\n+  @Override\n+  public PCollection<List<AnnotateImageResponse>> expand(PCollection<T> input) {\n+    ParDo.SingleOutput<T, AnnotateImageRequest> inputToRequestMapper;\n+    if (contextSideInput != null) {\n+      inputToRequestMapper =\n+          ParDo.of(new MapInputToRequest(contextSideInput)).withSideInputs(contextSideInput);\n+    } else {\n+      inputToRequestMapper = ParDo.of(new MapInputToRequest(null));\n+    }\n+    return input\n+        .apply(inputToRequestMapper)\n+        .apply(ParDo.of(new AssignRandomKeys()))\n+        .apply(GroupIntoBatches.ofSize(batchSize))\n+        .apply(ParDo.of(new ExtractValues()))\n+        .apply(ParDo.of(new PerformImageAnnotation()));\n+  }\n+\n+  /**\n+   * Input type to {@link AnnotateImageRequest} mapper. Needs to be implemented by child classes\n+   *\n+   * @param input Input element.\n+   * @param ctx optional image context.\n+   * @return A valid {@link AnnotateImageRequest} object.\n+   */\n+  public abstract AnnotateImageRequest mapToRequest(T input, ImageContext ctx);\n+\n+  /**\n+   * The {@link DoFn} performing the calls to Cloud Vision API. Input PCollection contains lists of\n+   * {@link AnnotateImageRequest}s ready for batching.\n+   */\n+  public static class PerformImageAnnotation\n+      extends DoFn<List<AnnotateImageRequest>, List<AnnotateImageResponse>> {\n+\n+    private ImageAnnotatorClient imageAnnotatorClient;\n+\n+    public PerformImageAnnotation() {}\n+\n+    /**\n+     * Parametrized constructor to make mock injection easier in testing.\n+     *\n+     * @param imageAnnotatorClient\n+     */\n+    public PerformImageAnnotation(ImageAnnotatorClient imageAnnotatorClient) {\n+      this.imageAnnotatorClient = imageAnnotatorClient;\n+    }\n+\n+    @StartBundle\n+    public void startBundle() throws IOException {\n+      imageAnnotatorClient = ImageAnnotatorClient.create();\n+    }\n+\n+    @Teardown\n+    public void teardown() {\n+      imageAnnotatorClient.close();\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) {\n+      context.output(getResponse(context.element()));\n+    }\n+\n+    /**\n+     * Performs the call itself. Default access for testing.\n+     *\n+     * @param requests request list.\n+     * @return response list.\n+     */\n+    List<AnnotateImageResponse> getResponse(List<AnnotateImageRequest> requests) {\n+      BatchAnnotateImagesResponse batchAnnotateImagesResponse =\n+          imageAnnotatorClient.batchAnnotateImages(requests);\n+      return batchAnnotateImagesResponse.getResponsesList();\n+    }\n+  }\n+\n+  /** A transform that converts input elements to {@link KV}s for grouping. */\n+  private static class AssignRandomKeys\n+      extends DoFn<AnnotateImageRequest, KV<Long, AnnotateImageRequest>> {\n+    private Random random;\n+\n+    @Setup\n+    public void setup() {\n+      random = new Random();\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext context) {\n+      context.output(KV.of(random.nextLong(), context.element()));", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5Mjg4OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422992888", "bodyText": "You're right. Java SDK doesn't really have a transform that batches the elements in bundles of set size regardless of key - do you think we can omit the batching and process all the elements serially?", "author": "mwalenia", "createdAt": "2020-05-11T12:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Mjc2OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r423862768", "bodyText": "If batching is to reduce the number of calls to the annotation API, what about using a collection in the DoFn instead to batch up requests?\nAssigning random keys and grouping could possibly increase the transform parallelism depending on the source, the data distribution, the operations in the upstream graph, and the runner capabilities but at this point I think the user would be most capable of making that decision. Grouping requires a shuffle and that is an expensive operation that should be avoided if possible.", "author": "tysonjh", "createdAt": "2020-05-12T16:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NjUxNg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r424356516", "bodyText": "I tried creating my own batching DoFn and discovered that input elements need to be KVs anyway - to get around it I set all keys for input KVs to zero and figured that I can just reuse GroupIntoBatches since it does exactly the same thing as my custom DoFn anyway.\nWDYT about this approach?", "author": "mwalenia", "createdAt": "2020-05-13T11:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTQ5OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r424585498", "bodyText": "+1 on using GroupIntoBatches", "author": "lukecwik", "createdAt": "2020-05-13T16:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MzcwOA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r424593708", "bodyText": "@lukecwik Are you OK with assigning the same keys to all elements just to use GroupIntoBatches without friction?", "author": "mwalenia", "createdAt": "2020-05-13T17:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzOTU2OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r424639568", "bodyText": "Please use a random assignment using a fixed number of keys for now. There have been some discussions in Google about making GroupIntoBatches work efficiently even if there is only one key but that project will take months before being realized.", "author": "lukecwik", "createdAt": "2020-05-13T18:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTY1MA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r424761650", "bodyText": "Will having a single key result in all the records going through a single worker thread after the GroupIntoBatches?\n@lukecwik what do you think is a reasonable number of fixed keys? I'm uncertain since it will probably depend on the input size and desired parallelism of worker threads.", "author": "tysonjh", "createdAt": "2020-05-13T22:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNDY2MA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r425314660", "bodyText": "I can't as this is IO dependent and I don't know what the QPS expectations for a pipeline for this API are. For example 50 made sense for BigQuery but it was doing 1000s of QPS.", "author": "lukecwik", "createdAt": "2020-05-14T17:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MjQ5Nw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r425882497", "bodyText": "OK so I see two reasonable options then,\n\ndetermine the QPS expectations or limits of using this transform in a pipeline and select a default number of keys based on this (with a comment to explain the logic and an option to override)\nparameterize the number of keys with no default\n\n@mwalenia either is fine with me.", "author": "tysonjh", "createdAt": "2020-05-15T15:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MTk5OQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r426451999", "bodyText": "The default limit of QPS is 30 (1800 requests per minute). I don't know what the default number of keys should be based on that - @lukecwik can you help me here?\nI'll start with parametrizing the number with no default. Thanks!", "author": "mwalenia", "createdAt": "2020-05-18T08:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MDM5MA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r430950390", "bodyText": "@lukecwik What do you think the number of keys should be, based on the default limit of QPS being 30? If you're fine with no default and the parametrization being left for the user, let me know as well.", "author": "mwalenia", "createdAt": "2020-05-27T08:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1NDM3Ng==", "url": "https://github.com/apache/beam/pull/11331#discussion_r431254376", "bodyText": "A good rule of thumb would be to follow QPS * AverageLatency ~= NumKeys", "author": "lukecwik", "createdAt": "2020-05-27T15:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2NTQ3Mg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r431765472", "bodyText": "I think this will be best left for the user, as latency can change and the limit can be changed by GCP project owners.", "author": "mwalenia", "createdAt": "2020-05-28T11:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2NjkwMg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r431766902", "bodyText": "@lukecwik if you're OK with leaving it without a default, I think we can merge this.", "author": "mwalenia", "createdAt": "2020-05-28T11:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTExNQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r432765115", "bodyText": "Since the default limit is 30QPS but the latency will depend a lot on the size of the input let's be cautious, assume smaller sized input data, and use something small like 5 keys. We should make this choice clear in the documentation of the class, constructor with the default, and recommend that a user updates this to better reflect their desired QPS.", "author": "tysonjh", "createdAt": "2020-05-29T22:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MDA5MQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r421840091", "bodyText": "Since there is a max and min for this parameter it would be good to mention both requirements. There are a couple places in this file where this applies.", "author": "tysonjh", "createdAt": "2020-05-07T22:55:14Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageContext;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.protobuf.ByteString;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Factory class for implementations of {@link AnnotateImages}.\n+ *\n+ * <p>Example usage:\n+ *\n+ * <pre>\n+ * pipeline\n+ *  .apply(Create.of(IMAGE_URI))\n+ *  .apply(CloudVision.annotateImagesFromGcsUri(sideInputWithContext,\n+ *         features, 1));\n+ * </pre>\n+ */\n+public class CloudVision {\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images.\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MzEwMg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422993102", "bodyText": "I'll hold off with changes here until we settle the batching issue", "author": "mwalenia", "createdAt": "2020-05-11T12:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MDA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDUzNQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422224535", "bodyText": "It would be helpful to describe the effects of including/excluding a contextSideInput, either here or in the method comments within this class.", "author": "tysonjh", "createdAt": "2020-05-08T15:57:18Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageContext;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.protobuf.ByteString;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Factory class for implementations of {@link AnnotateImages}.", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5Mzk2Mw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422993963", "bodyText": "Good suggestion, thanks!", "author": "mwalenia", "createdAt": "2020-05-11T12:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyODYzMQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422228631", "bodyText": "I think you can drop 'Implementaiton of' since we get this information from the class signature. It would be helpful to know what this implementation does differently than other implementations. The name of the class is very descriptive which is great, you could even start the comment with it to the effect of 'Annotates images from a GCS URI. (then a bit more detail)'.", "author": "tysonjh", "createdAt": "2020-05-08T16:05:15Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageContext;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.protobuf.ByteString;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollectionView;\n+\n+/**\n+ * Factory class for implementations of {@link AnnotateImages}.\n+ *\n+ * <p>Example usage:\n+ *\n+ * <pre>\n+ * pipeline\n+ *  .apply(Create.of(IMAGE_URI))\n+ *  .apply(CloudVision.annotateImagesFromGcsUri(sideInputWithContext,\n+ *         features, 1));\n+ * </pre>\n+ */\n+public class CloudVision {\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images.\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n+      PCollectionView<Map<String, ImageContext>> contextSideInput,\n+      List<Feature> features,\n+      long batchSize) {\n+    return new AnnotateImagesFromGcsUri(contextSideInput, features, batchSize);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * contents encoded in {@link ByteString}s.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images.\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromBytes annotateImagesFromBytes(\n+      PCollectionView<Map<ByteString, ImageContext>> contextSideInput,\n+      List<Feature> features,\n+      long batchSize) {\n+    return new AnnotateImagesFromBytes(contextSideInput, features, batchSize);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from KVs of\n+   * their GCS addresses in Strings and {@link ImageContext} for each image.\n+   *\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromBytesWithContext annotateImagesFromBytesWithContext(\n+      List<Feature> features, long batchSize) {\n+    return new AnnotateImagesFromBytesWithContext(features, batchSize);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from KVs of\n+   * their String-encoded contents and {@link ImageContext} for each image.\n+   *\n+   * @param features annotation features that should be passed to the API\n+   * @param batchSize request batch size to be sent to API. Max 5.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromGcsUriWithContext annotateImagesFromGcsUriWithContext(\n+      List<Feature> features, long batchSize) {\n+    return new AnnotateImagesFromGcsUriWithContext(features, batchSize);\n+  }\n+\n+  /**\n+   * Implementation of {@link AnnotateImages} that accepts {@link String} (image URI on GCS) with", "originalCommit": "ae6ef78224af8d00f9dc51a027283d98f943d4f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MzI1OQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r422993259", "bodyText": "Good idea, thanks", "author": "mwalenia", "createdAt": "2020-05-11T12:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyODYzMQ=="}], "type": "inlineReview"}, {"oid": "53d9601284e2fd081d27ae3b4b265f66a6be40ef", "url": "https://github.com/apache/beam/commit/53d9601284e2fd081d27ae3b4b265f66a6be40ef", "message": "Fixes after code review", "committedDate": "2020-05-11T13:31:00Z", "type": "forcePushed"}, {"oid": "6089b1fda1f1831568ae139af146c052c4e45cec", "url": "https://github.com/apache/beam/commit/6089b1fda1f1831568ae139af146c052c4e45cec", "message": "Add customizable number of keys to the transform", "committedDate": "2020-05-18T11:57:21Z", "type": "forcePushed"}, {"oid": "aa91ce7bcc3825f4ab882562c51619c758d9493b", "url": "https://github.com/apache/beam/commit/aa91ce7bcc3825f4ab882562c51619c758d9493b", "message": "Added changes to CHANGES.md", "committedDate": "2020-05-25T08:50:00Z", "type": "forcePushed"}, {"oid": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac", "url": "https://github.com/apache/beam/commit/cd7d3deb4f7e84f96a16299e44b192d4642f94ac", "message": "Update README.md", "committedDate": "2020-05-28T11:24:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTQzNQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r432765435", "bodyText": "Instead of numKeys, which is an implementation detail, let's change it to desiredRequestParallelism to represent the maximum number of concurrent threads that will be issuing API calls. This will need to be documented clearly. Apply it elsewhere as well since I see it in a few constructors and classes.", "author": "tysonjh", "createdAt": "2020-05-29T22:22:51Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.WithKeys;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API. https://cloud.google.com/vision/docs/batch\n+ * Max batch size limit is imposed by the API for synchronous requests.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+@Experimental\n+abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 16L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private final long batchSize;\n+  protected final int numKeys;\n+\n+  /**\n+   * @param contextSideInput Side input optionally containting a map of elements to {@link\n+   *     ImageContext} objects with metadata for the analysis.\n+   * @param featureList list of features to be extracted from the image.\n+   * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n+   *     16.\n+   * @param numKeys number of keys to map the requests into for batching.\n+   */\n+  public AnnotateImages(\n+      @Nullable PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize,\n+      int numKeys) {", "originalCommit": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMDkwMg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433130902", "bodyText": "Sure, I changed it.", "author": "mwalenia", "createdAt": "2020-06-01T09:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTc3Ng==", "url": "https://github.com/apache/beam/pull/11331#discussion_r432765776", "bodyText": "Can this be named batchSizeBytes instead? Or mention in the parameter documentation that the unit for this parameter is bytes. Apply this elsewhere as well since I see it in a few constructors and classes.", "author": "tysonjh", "createdAt": "2020-05-29T22:24:11Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.ml;\n+\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageContext;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Random;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.GroupIntoBatches;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.transforms.SerializableFunction;\n+import org.apache.beam.sdk.transforms.WithKeys;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.PCollectionView;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+\n+/**\n+ * Parent class for transform utilizing Cloud Vision API. https://cloud.google.com/vision/docs/batch\n+ * Max batch size limit is imposed by the API for synchronous requests.\n+ *\n+ * @param <T> Type of input PCollection.\n+ */\n+@Experimental\n+abstract class AnnotateImages<T>\n+    extends PTransform<PCollection<T>, PCollection<List<AnnotateImageResponse>>> {\n+\n+  private static final Long MIN_BATCH_SIZE = 1L;\n+  private static final Long MAX_BATCH_SIZE = 16L;\n+\n+  protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n+  protected final List<Feature> featureList;\n+  private final long batchSize;\n+  protected final int numKeys;\n+\n+  /**\n+   * @param contextSideInput Side input optionally containting a map of elements to {@link\n+   *     ImageContext} objects with metadata for the analysis.\n+   * @param featureList list of features to be extracted from the image.\n+   * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n+   *     16.\n+   * @param numKeys number of keys to map the requests into for batching.\n+   */\n+  public AnnotateImages(\n+      @Nullable PCollectionView<Map<T, ImageContext>> contextSideInput,\n+      List<Feature> featureList,\n+      long batchSize,", "originalCommit": "cd7d3deb4f7e84f96a16299e44b192d4642f94ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4MjgyNg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433082826", "bodyText": "It cannot, there is no unit for this parameter - it's the number of images batched into one request for analysis.", "author": "mwalenia", "createdAt": "2020-06-01T07:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNTIyNw==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433315227", "bodyText": "My mistake, thank you.", "author": "tysonjh", "createdAt": "2020-06-01T15:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNjg0Mg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433316842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "author": "tysonjh", "createdAt": "2020-06-01T15:42:08Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -58,24 +58,24 @@\n   protected final PCollectionView<Map<T, ImageContext>> contextSideInput;\n   protected final List<Feature> featureList;\n   private final long batchSize;\n-  protected final int numKeys;\n+  protected final int desiredRequestParallelism;\n \n   /**\n    * @param contextSideInput Side input optionally containting a map of elements to {@link\n    *     ImageContext} objects with metadata for the analysis.\n    * @param featureList list of features to be extracted from the image.\n    * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n    *     16.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNzQyNA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433317424", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "author": "tysonjh", "createdAt": "2020-06-01T15:42:45Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/AnnotateImages.java", "diffHunk": "@@ -86,10 +86,10 @@ public AnnotateImages(\n    * @param featureList list of features to be extracted from the image.\n    * @param batchSize desired size of request batches sent to Cloud Vision API. At least 1, at most\n    *     16.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNzg1OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433317858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "author": "tysonjh", "createdAt": "2020-06-01T15:43:10Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -54,15 +55,34 @@\n    *     can\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxOTA2Mg==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433319062", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * GCS addresses. Uses default parallelism of 5.\n          \n          \n            \n               * GCS addresses. Uses a default value 5 for desiredRequestParallelism.", "author": "tysonjh", "createdAt": "2020-06-01T15:44:30Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -54,15 +55,34 @@\n    *     can\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n    * @return the PTransform.\n    */\n   public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n       PCollectionView<Map<String, ImageContext>> contextSideInput,\n       List<Feature> features,\n       long batchSize,\n-      int numKeys) {\n-    return new AnnotateImagesFromGcsUri(contextSideInput, features, batchSize, numKeys);\n+      int desiredRequestParallelism) {\n+    return new AnnotateImagesFromGcsUri(\n+        contextSideInput, features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses. Uses default parallelism of 5.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMDE1OA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433320158", "bodyText": "This comment is incomplete... 'This way users can' ....", "author": "tysonjh", "createdAt": "2020-06-01T15:45:38Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -54,15 +55,34 @@\n    *     can\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n    * @return the PTransform.\n    */\n   public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n       PCollectionView<Map<String, ImageContext>> contextSideInput,\n       List<Feature> features,\n       long batchSize,\n-      int numKeys) {\n-    return new AnnotateImagesFromGcsUri(contextSideInput, features, batchSize, numKeys);\n+      int desiredRequestParallelism) {\n+    return new AnnotateImagesFromGcsUri(\n+        contextSideInput, features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * GCS addresses. Uses default parallelism of 5.\n+   *\n+   * @param contextSideInput optional side input with contexts for select images. The {@link\n+   *     ImageContext} objects provide additional metadata for the annotation API. This way users\n+   *     can", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMDczNQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433320735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "author": "tysonjh", "createdAt": "2020-06-01T15:46:15Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -72,15 +92,32 @@ public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n    * @param contextSideInput optional side input with contexts for select images.\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMTE4NQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433321185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * contents encoded in {@link ByteString}s. Uses default parallelism of 5.\n          \n          \n            \n               * contents encoded in {@link ByteString}s. Uses a default value 5 for desiredRequestParallelism.", "author": "tysonjh", "createdAt": "2020-06-01T15:46:46Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -72,15 +92,32 @@ public static AnnotateImagesFromGcsUri annotateImagesFromGcsUri(\n    * @param contextSideInput optional side input with contexts for select images.\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n    * @return the PTransform.\n    */\n   public static AnnotateImagesFromBytes annotateImagesFromBytes(\n       PCollectionView<Map<ByteString, ImageContext>> contextSideInput,\n       List<Feature> features,\n       long batchSize,\n-      int numKeys) {\n-    return new AnnotateImagesFromBytes(contextSideInput, features, batchSize, numKeys);\n+      int desiredRequestParallelism) {\n+    return new AnnotateImagesFromBytes(\n+        contextSideInput, features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from their\n+   * contents encoded in {@link ByteString}s. Uses default parallelism of 5.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMTY0NQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433321645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "author": "tysonjh", "createdAt": "2020-06-01T15:47:19Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -89,12 +126,26 @@ public static AnnotateImagesFromBytes annotateImagesFromBytes(\n    *\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyMjIwOQ==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433322209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * their GCS addresses in Strings and {@link ImageContext} for each image. Uses default\n          \n          \n            \n               * parallelism of 5.\n          \n          \n            \n               * their GCS addresses in Strings and {@link ImageContext} for each image. Uses a default \n          \n          \n            \n               * value of 5 for desiredRequestParallelism.", "author": "tysonjh", "createdAt": "2020-06-01T15:47:54Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -89,12 +126,26 @@ public static AnnotateImagesFromBytes annotateImagesFromBytes(\n    *\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.\n+   * @return the PTransform.\n+   */\n+  public static AnnotateImagesFromBytesWithContext annotateImagesFromBytesWithContext(\n+      List<Feature> features, long batchSize, int desiredRequestParallelism) {\n+    return new AnnotateImagesFromBytesWithContext(features, batchSize, desiredRequestParallelism);\n+  }\n+\n+  /**\n+   * Creates a {@link org.apache.beam.sdk.transforms.PTransform} that annotates images from KVs of\n+   * their GCS addresses in Strings and {@link ImageContext} for each image. Uses default\n+   * parallelism of 5.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMyNDQxNA==", "url": "https://github.com/apache/beam/pull/11331#discussion_r433324414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param desiredRequestParallelism number of keys to map the requests into for batching.\n          \n          \n            \n               * @param desiredRequestParallelism desired number of concurrent batched requests.", "author": "tysonjh", "createdAt": "2020-06-01T15:50:21Z", "path": "sdks/java/extensions/ml/src/main/java/org/apache/beam/sdk/extensions/ml/CloudVision.java", "diffHunk": "@@ -103,12 +154,26 @@ public static AnnotateImagesFromBytesWithContext annotateImagesFromBytesWithCont\n    *\n    * @param features annotation features that should be passed to the API\n    * @param batchSize request batch size to be sent to API. Max 16, at least 1.\n-   * @param numKeys number of keys to map the requests into for batching.\n+   * @param desiredRequestParallelism number of keys to map the requests into for batching.", "originalCommit": "16e087a3eb98a09b1be93b7570adbe31ce7beb67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be5d91a8a4bb5816a72a52c5075a537c888a7dff", "url": "https://github.com/apache/beam/commit/be5d91a8a4bb5816a72a52c5075a537c888a7dff", "message": "[BEAM-9646] Add Google Cloud vision integration transform", "committedDate": "2020-06-02T10:42:38Z", "type": "commit"}, {"oid": "0100fdcfe6ae94edddd4323ea06607322ce43775", "url": "https://github.com/apache/beam/commit/0100fdcfe6ae94edddd4323ea06607322ce43775", "message": "Fix spotbugs errors", "committedDate": "2020-06-02T10:42:39Z", "type": "commit"}, {"oid": "e0ed48deed395eefaff5751863d691a5b4ce986d", "url": "https://github.com/apache/beam/commit/e0ed48deed395eefaff5751863d691a5b4ce986d", "message": "Add @Experimental annotation, make parent class package-private", "committedDate": "2020-06-02T10:42:39Z", "type": "commit"}, {"oid": "b8f048e79504ddaa5dee077eecec105e309bef4a", "url": "https://github.com/apache/beam/commit/b8f048e79504ddaa5dee077eecec105e309bef4a", "message": "Add dependency to build.gradle", "committedDate": "2020-06-02T10:45:36Z", "type": "commit"}, {"oid": "6aa6815d4b8d05853f3bb918d3ce4622aec2030a", "url": "https://github.com/apache/beam/commit/6aa6815d4b8d05853f3bb918d3ce4622aec2030a", "message": "Fixes after code review", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "b108cb3efa7b8fc9ef8369f6ecaa4c9e7a9a25db", "url": "https://github.com/apache/beam/commit/b108cb3efa7b8fc9ef8369f6ecaa4c9e7a9a25db", "message": "Set the same key for each element so that grouping is done correctly by existing transforms", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "962aefacc4f63a402c08c103cd7cf1709e2fb16b", "url": "https://github.com/apache/beam/commit/962aefacc4f63a402c08c103cd7cf1709e2fb16b", "message": "Add customizable number of keys to the transform", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "60ee68edd7d448940ddf7ea1b5522aaf19b2eac9", "url": "https://github.com/apache/beam/commit/60ee68edd7d448940ddf7ea1b5522aaf19b2eac9", "message": "Added changes to CHANGES.md", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "5860c851902e3df41193c1368299b269ee398ba3", "url": "https://github.com/apache/beam/commit/5860c851902e3df41193c1368299b269ee398ba3", "message": "Update README.md", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "7145d47383674cb86e562df00cd431625b5108d7", "url": "https://github.com/apache/beam/commit/7145d47383674cb86e562df00cd431625b5108d7", "message": "Change param name from numKeys to desiredRequestParallelism", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "6038bfc5be9a65c4aad5016d81b81c2b1a25d274", "url": "https://github.com/apache/beam/commit/6038bfc5be9a65c4aad5016d81b81c2b1a25d274", "message": "Add default parallelism value", "committedDate": "2020-06-02T10:45:37Z", "type": "commit"}, {"oid": "c40306adba420dd872bc7e1a61c20326836a2e7b", "url": "https://github.com/apache/beam/commit/c40306adba420dd872bc7e1a61c20326836a2e7b", "message": "Fix code comments", "committedDate": "2020-06-02T10:45:38Z", "type": "commit"}, {"oid": "c40306adba420dd872bc7e1a61c20326836a2e7b", "url": "https://github.com/apache/beam/commit/c40306adba420dd872bc7e1a61c20326836a2e7b", "message": "Fix code comments", "committedDate": "2020-06-02T10:45:38Z", "type": "forcePushed"}]}