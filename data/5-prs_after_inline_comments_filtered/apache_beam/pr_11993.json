{"pr_number": 11993, "pr_title": "Change time granularity to seconds in ParDoTest TestStream timer test\u2026", "pr_createdAt": "2020-06-11T20:25:15Z", "pr_url": "https://github.com/apache/beam/pull/11993", "timeline": [{"oid": "b5e40b3c8dfb9347e93c70b91baa45ee35d44a6a", "url": "https://github.com/apache/beam/commit/b5e40b3c8dfb9347e93c70b91baa45ee35d44a6a", "message": "Change time granularity to seconds in ParDoTest TestStream timer tests to accomodate Dataflow runner", "committedDate": "2020-06-11T20:19:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng==", "url": "https://github.com/apache/beam/pull/11993#discussion_r442378176", "bodyText": "Updating other tests to second granularity makes sense but changing the test to see how END_OF_GLOBAL_WINDOW is interpreted changes what this test is explicitly trying to do.", "author": "lukecwik", "createdAt": "2020-06-18T17:10:14Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -3808,15 +3817,24 @@ public void onTimer(\n       TestStream<KV<String, Integer>> stream =\n           TestStream.create(KvCoder.of(StringUtf8Coder.of(), VarIntCoder.of()))\n               // See GlobalWindow,\n-              // END_OF_GLOBAL_WINDOW is TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(1))\n-              .advanceWatermarkTo(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(1)))\n+              // END_OF_GLOBAL_WINDOW is TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(1)),", "originalCommit": "b5e40b3c8dfb9347e93c70b91baa45ee35d44a6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMDE0Nw==", "url": "https://github.com/apache/beam/pull/11993#discussion_r442420147", "bodyText": "My understanding is that it's trying to test setting a timer with timestamp that exceed END_OF_GLOBAL_WINDOW and the fire timestamp gets altered to the END_OF_GLOBAL_WINDOW(gc time). How the original exceeding-limit timestamp is obtained(and whether it is set exactly at END_OF_GLOBAL_WINDOW or later than END_OF_GLOBAL_WINDOW) shouldn't make a difference?\nSince END_OF_GLOBAL_WINDOW is with millis granularity, advance the watermark of the TestStream to this time will not be processed by dataflow.", "author": "y1chi", "createdAt": "2020-06-18T18:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzODUyNw==", "url": "https://github.com/apache/beam/pull/11993#discussion_r442538527", "bodyText": "My issue is that this changes the test such that the boundary condition is looser by making END_OF_GLOBAL_WINDOW looser which allows for off by one errors to not be detected.\n@acrites Any ideas/suggestions here?", "author": "lukecwik", "createdAt": "2020-06-18T22:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzcwMw==", "url": "https://github.com/apache/beam/pull/11993#discussion_r442563703", "bodyText": "we can also explicitly set timer with absolute time equal to the same fire time the with original timer.align(Duration.standardDays(1)).setRelative();, would that make sense?", "author": "y1chi", "createdAt": "2020-06-19T00:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzOTEwMg==", "url": "https://github.com/apache/beam/pull/11993#discussion_r444339102", "bodyText": "Yichi and I played around with some flag settings in Dataflow and I think we can change the time resolution for tests to milliseconds, which should make this test pass. However, I'm a little worried in that we then aren't testing the same as prod, so we might end up missing some other bugs that come up.\nOtherwise, I don't really know a good way around this since BoundedWindow.TIMESTAMP_MAX_VALUE is not a round number of seconds.", "author": "acrites", "createdAt": "2020-06-23T16:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzE1NQ==", "url": "https://github.com/apache/beam/pull/11993#discussion_r444343155", "bodyText": "@acrites and I chatted about some of the tests. There is an option to alter the windmill wm_work_set_watermark_resolution_usec and dataflow_watermark_resolution_usec so that the AdvanceWatermark and AdvanceProcessingTime can deal with milliseconds. But it requires additional test framework plumbing. Should we keep this test as it was and try to unsickbay it after we can set the windmill flag values?", "author": "y1chi", "createdAt": "2020-06-23T16:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNzc2Nw==", "url": "https://github.com/apache/beam/pull/11993#discussion_r445817767", "bodyText": "Lets leave this one tests as is and remove it from the change. We can update the others with the changes since they won't change the semantics of what is being tested.\nFor Dataflow's TestStream implementation, to simulate production, it should round all the advance timestampts to the closest >= internal timestamp. It should also make sure that no two advance timestamps that aren't the same are not rounded to the same value. I believe this would make this test work and it would simulate what is happening in production.", "author": "lukecwik", "createdAt": "2020-06-25T20:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3ODE3Ng=="}], "type": "inlineReview"}, {"oid": "1cb582cfe0e547e3a12dfd8a9d1605f2d3a9979f", "url": "https://github.com/apache/beam/commit/1cb582cfe0e547e3a12dfd8a9d1605f2d3a9979f", "message": "Revert change to testEventTimeTimerAlignAfterGcTimeUnbounded", "committedDate": "2020-06-25T20:35:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNjI4Ng==", "url": "https://github.com/apache/beam/pull/11993#discussion_r445826286", "bodyText": "nit: use GlobalWindow.INSTANCE.maxTimestamp():\n\n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/windowing/GlobalWindow.java\n    \n    \n         Line 42\n      in\n      7269e3f\n    \n    \n    \n    \n\n        \n          \n           public Instant maxTimestamp() { \n        \n    \n  \n\n\nHere and below instead of calculating it.", "author": "lukecwik", "createdAt": "2020-06-25T20:42:30Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -3817,24 +3817,15 @@ public void onTimer(\n       TestStream<KV<String, Integer>> stream =\n           TestStream.create(KvCoder.of(StringUtf8Coder.of(), VarIntCoder.of()))\n               // See GlobalWindow,\n-              // END_OF_GLOBAL_WINDOW is TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(1)),\n-              // minus 775 milliseconds to make the grainularity to second as required by dataflow\n-              // for TestStream.\n-              .advanceWatermarkTo(\n-                  BoundedWindow.TIMESTAMP_MAX_VALUE\n-                      .minus(Duration.standardDays(1))\n-                      .minus(BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis() % 1000))\n+              // END_OF_GLOBAL_WINDOW is TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(1))\n+              .advanceWatermarkTo(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(Duration.standardDays(1)))", "originalCommit": "1cb582cfe0e547e3a12dfd8a9d1605f2d3a9979f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzNjgwMg==", "url": "https://github.com/apache/beam/pull/11993#discussion_r445836802", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-06-25T21:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNjI4Ng=="}], "type": "inlineReview"}, {"oid": "657ee84895948f7bf1810dfe16079131f0a44255", "url": "https://github.com/apache/beam/commit/657ee84895948f7bf1810dfe16079131f0a44255", "message": "Use GlobalWindow maxTimestamp()", "committedDate": "2020-06-25T20:53:36Z", "type": "commit"}]}