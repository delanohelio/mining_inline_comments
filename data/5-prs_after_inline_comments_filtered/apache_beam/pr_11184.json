{"pr_number": 11184, "pr_title": "[BEAM-4374] Update protos related to MonitoringInfo.", "pr_createdAt": "2020-03-20T20:30:15Z", "pr_url": "https://github.com/apache/beam/pull/11184", "timeline": [{"oid": "c07fc9c204611939521e63ba37376e47778111ca", "url": "https://github.com/apache/beam/commit/c07fc9c204611939521e63ba37376e47778111ca", "message": "[BEAM-4374] Update protos related to MonitoringInfo.", "committedDate": "2020-03-25T17:00:19Z", "type": "forcePushed"}, {"oid": "6664d865fff40e760e2817a4683134488fcccb84", "url": "https://github.com/apache/beam/commit/6664d865fff40e760e2817a4683134488fcccb84", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T02:28:38Z", "type": "forcePushed"}, {"oid": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "url": "https://github.com/apache/beam/commit/d1cc9a69ce451bd602bf985518c6f8edf70565cf", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T02:51:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NDI2OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398794269", "bodyText": "Looks like SimpleMonitoringInfoBuilder helped a lot with this refactor :)", "author": "ajamato", "createdAt": "2020-03-26T18:21:39Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java", "diffHunk": "@@ -86,46 +89,97 @@ public SimpleMonitoringInfoBuilder setUrn(String urn) {\n     return this;\n   }\n \n-  /** Sets the timestamp of the MonitoringInfo to the current time. */\n-  public SimpleMonitoringInfoBuilder setTimestampToNow() {\n-    Instant time = Instant.now();\n-    this.builder.getTimestampBuilder().setSeconds(time.getEpochSecond()).setNanos(time.getNano());\n+  /**\n+   * Sets the type of the MonitoringInfo.\n+   *\n+   * @param type The type of the MonitoringInfo\n+   */\n+  public SimpleMonitoringInfoBuilder setType(String type) {\n+    this.builder.setType(type);\n+    return this;\n+  }\n+\n+  /**\n+   * Encodes the value and sets the type to {@link MonitoringInfoConstants.TypeUrns#SUM_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setInt64SumValue(long value) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(value, output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the int64Value of the CounterData in the MonitoringInfo, and the appropriate type URN. */\n-  public SimpleMonitoringInfoBuilder setInt64Value(long value) {\n-    this.builder.getMetricBuilder().getCounterDataBuilder().setInt64Value(value);\n-    this.setInt64TypeUrn();\n+  public SimpleMonitoringInfoBuilder setDoubleSumValue(double value) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      DOUBLE_CODER.encode(value, output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_DOUBLE_TYPE);\n     return this;\n   }\n \n   /**\n-   * Sets the IntDistributionData of the DistributionData in the MonitoringInfo, and the appropriate\n-   * type URN.\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#LATEST_INT64_TYPE}.\n    */\n-  public SimpleMonitoringInfoBuilder setInt64DistributionValue(DistributionData data) {\n-    this.builder\n-        .getMetricBuilder()\n-        .getDistributionDataBuilder()\n-        .getIntDistributionDataBuilder()\n-        .setCount(data.count())\n-        .setSum(data.sum())\n-        .setMin(data.min())\n-        .setMax(data.max());\n-    this.setInt64DistributionTypeUrn();\n+  public SimpleMonitoringInfoBuilder setInt64LatestValue(GaugeData data) {\n+    checkArgument(GaugeData.empty() != data, \"Cannot encode empty gauge data\");\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(data.timestamp().getMillis(), output);\n+      VARINT_CODER.encode(data.value(), output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.LATEST_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the the appropriate type URN for int64 distribution tuples. */\n-  public SimpleMonitoringInfoBuilder setInt64DistributionTypeUrn() {\n-    this.builder.setType(MonitoringInfoConstants.TypeUrns.DISTRIBUTION_INT64);\n+  /**\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#DISTRIBUTION_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setInt64DistributionValue(DistributionData data) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(data.count(), output);\n+      VARINT_CODER.encode(data.sum(), output);\n+      VARINT_CODER.encode(data.min(), output);\n+      VARINT_CODER.encode(data.max(), output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.DISTRIBUTION_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the the appropriate type URN for sum int64 counters. */\n-  public SimpleMonitoringInfoBuilder setInt64TypeUrn() {\n-    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64);\n+  /**\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#DISTRIBUTION_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setDoubleDistributionValue(", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MjQ1MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398852450", "bodyText": "Yup", "author": "lukecwik", "createdAt": "2020-03-26T19:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NDI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTg2Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398795863", "bodyText": "Why did you add the isEmpty() checks, this looks like the old matcher didn't have this logic, and it would match if you initialized the matcher with an empty monitoring info", "author": "ajamato", "createdAt": "2020-03-26T18:23:39Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java", "diffHunk": "@@ -28,30 +31,17 @@\n    * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n    *\n    * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and int64Values.\n+   * Currently this will only check for URNs, labels, type URNs and payloads.\n    */\n   public static TypeSafeMatcher<MonitoringInfo> matchSetFields(final MonitoringInfo mi) {\n     return new TypeSafeMatcher<MonitoringInfo>() {\n \n       @Override\n       protected boolean matchesSafely(MonitoringInfo item) {\n-        if (!item.getUrn().equals(mi.getUrn())) {\n-          return false;\n-        }\n-        if (!item.getLabels().equals(mi.getLabels())) {\n-          return false;\n-        }\n-        if (!item.getType().equals(mi.getType())) {\n-          return false;\n-        }\n-\n-        if (mi.getMetric().hasCounterData()) {\n-          long valueToMatch = mi.getMetric().getCounterData().getInt64Value();\n-          if (valueToMatch != item.getMetric().getCounterData().getInt64Value()) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        return (mi.getUrn().isEmpty() || mi.getUrn().equals(item.getUrn()))", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NTMxMw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398855313", "bodyText": "The contract of the matcher states that it only compares set fields and it seemed it was incorrectly implemented. I can change it back to the existing implementation where urn, labels, and type must always be specified and fix the comment.", "author": "lukecwik", "createdAt": "2020-03-26T20:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODU4MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398798580", "bodyText": "would this only work with certain types? Should this be renamed?", "author": "ajamato", "createdAt": "2020-03-26T18:27:44Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java", "diffHunk": "@@ -76,17 +63,20 @@ public void describeTo(Description description) {\n    * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n    *\n    * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and int64Values.\n+   * Currently this will only check for URNs, labels, type URNs and {@code beam:coder:varint:v1}\n+   * encoded values.\n    */\n-  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThan(final long value) {\n+  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThanOrEqualTo(final long value) {", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NjY2OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398856669", "bodyText": "Renamed to counterValueGreaterThanOrEqualTo\nAlso fixed comment.", "author": "lukecwik", "createdAt": "2020-03-26T20:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTM3Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398801376", "bodyText": "Can we encapsulte this so that its still one line to get the value out? I think that this would be a nicer interface. For consumers. Ideally something as easy to use on the receiving side as SimpleMonitoringInfoBuilder.\ni.e.\nlong value = MonitoringInfos.getSumInt64Value(monitoringInfo)", "author": "ajamato", "createdAt": "2020-03-26T18:31:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -95,7 +99,12 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTcwNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398899707", "bodyText": "Done here and elsewhere. I introduced a MonitoringInfoEncodings class with the convenience methods for the currently used encodings.", "author": "lukecwik", "createdAt": "2020-03-26T21:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjkxMQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398802911", "bodyText": "Can you key this by a tuple instead of a 2 layer dictionary? That might reduce some of the boilerplate below. I believe the Pair class can work here", "author": "ajamato", "createdAt": "2020-03-26T18:34:21Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -35,50 +35,82 @@\n public class FnApiMonitoringInfoToCounterUpdateTransformer\n     implements MonitoringInfoToCounterUpdateTransformer {\n \n-  final Map<String, MonitoringInfoToCounterUpdateTransformer> counterTransformers = new HashMap<>();\n+  final Map<String, Map<String, MonitoringInfoToCounterUpdateTransformer>>", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1ODQyOA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398858428", "bodyText": "Done.", "author": "lukecwik", "createdAt": "2020-03-26T20:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDk0NQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398804945", "bodyText": "Ditto here, please use a one liner helper method to extract the value, here and in all the transformer classes.", "author": "ajamato", "createdAt": "2020-03-26T18:37:39Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -120,14 +110,19 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTIyNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398805227", "bodyText": "ditto", "author": "ajamato", "createdAt": "2020-03-26T18:38:06Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -100,8 +101,18 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    IntDistributionData value =\n-        monitoringInfo.getMetric().getDistributionData().getIntDistributionData();\n+    long count;\n+    long sum;\n+    try {\n+      InputStream payload = monitoringInfo.getPayload().newInput();", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTU3OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398805578", "bodyText": "ditto, this is also too low level, please use a helper here. Let's try to encapsulate the bytes payload format of MonitoringInfos.", "author": "ajamato", "createdAt": "2020-03-26T18:38:38Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java", "diffHunk": "@@ -446,7 +447,11 @@ long getInputElementsConsumed(final Iterable<MonitoringInfo> monitoringInfos) {\n         String pcollection =\n             mi.getLabelsOrDefault(MonitoringInfoConstants.Labels.PCOLLECTION, null);\n         if (pcollection != null && pcollection.equals(grpcReadTransformOutputPCollectionName)) {\n-          return mi.getMetric().getCounterData().getInt64Value();\n+          try {\n+            return VARINT_CODER.decode(mi.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjk5Nw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398806997", "bodyText": "ditto please use one liner here", "author": "ajamato", "createdAt": "2020-03-26T18:40:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -95,7 +100,12 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk5OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398810999", "bodyText": "Can you add a TODO to rename this to ExecutionTimeMonitoringInfoToCounterUpdateTransformer", "author": "ajamato", "createdAt": "2020-03-26T18:47:23Z", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformerTest.java", "diffHunk": "@@ -54,39 +58,33 @@ public void setUp() throws Exception {\n \n   @Test\n   public void testTransformReturnsNullIfSpecValidationFails() {\n-    Map<String, String> counterNameMapping = new HashMap<>();\n-    counterNameMapping.put(\"beam:counter:supported\", \"supportedCounter\");\n-\n     Map<String, DataflowStepContext> stepContextMapping = new HashMap<>();\n \n     MSecMonitoringInfoToCounterUpdateTransformer testObject =", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MTQ2NA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398851464", "bodyText": "Did the rename.", "author": "lukecwik", "createdAt": "2020-03-26T19:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjY5MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398812690", "bodyText": "ditto, please use a helper here to make this a one liner to extract the value", "author": "ajamato", "createdAt": "2020-03-26T18:49:58Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java", "diffHunk": "@@ -115,17 +113,15 @@ private static PortableMetrics convertMonitoringInfosToMetricResults(\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    MetricsApi.IntExtremaData extremaData =\n-        monitoringInfo.getMetric().getExtremaData().getIntExtremaData();\n-    // Get only last value of the extrema table\n-    Instant timestamp = Instant.ofEpochSecond(monitoringInfo.getTimestamp().getSeconds());\n-    if (extremaData.getIntValuesCount() > 0) {\n-      GaugeResult result =\n-          GaugeResult.create(\n-              extremaData.getIntValues(extremaData.getIntValuesCount() - 1), timestamp);\n+    try {\n+      InputStream input = monitoringInfo.getPayload().newInput();\n+      long timestamp = VARINT_CODER.decode(input);", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjg2MQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398812861", "bodyText": "ditto, please use helper here", "author": "ajamato", "createdAt": "2020-03-26T18:50:12Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java", "diffHunk": "@@ -135,21 +131,23 @@ private static PortableMetrics convertMonitoringInfosToMetricResults(\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    MetricsApi.IntDistributionData intDistributionData =\n-        monitoringInfo.getMetric().getDistributionData().getIntDistributionData();\n-    DistributionResult result =\n-        DistributionResult.create(\n-            intDistributionData.getSum(),\n-            intDistributionData.getCount(),\n-            intDistributionData.getMin(),\n-            intDistributionData.getMax());\n-    return MetricResult.create(key, false, result);\n+    try {\n+      InputStream input = monitoringInfo.getPayload().newInput();\n+      long count = VARINT_CODER.decode(input);", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "23a41f374e899eeda3e9d709974ec277eeb50f78", "url": "https://github.com/apache/beam/commit/23a41f374e899eeda3e9d709974ec277eeb50f78", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T23:37:15Z", "type": "forcePushed"}, {"oid": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "url": "https://github.com/apache/beam/commit/40bc44a1a1e0fcb23771e08f41d06bcecda04494", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-27T18:30:44Z", "type": "commit"}, {"oid": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "url": "https://github.com/apache/beam/commit/40bc44a1a1e0fcb23771e08f41d06bcecda04494", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-27T18:30:44Z", "type": "forcePushed"}]}