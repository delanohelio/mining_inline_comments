{"pr_number": 687, "pr_title": "Add temporal interval data type and support interval clause as function", "pr_createdAt": "2020-08-15T00:39:46Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687", "timeline": [{"oid": "f07352c93e91a4a4ce9229e46bb073c2365a69b2", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f07352c93e91a4a4ce9229e46bb073c2365a69b2", "message": "add interval type", "committedDate": "2020-08-15T00:36:56Z", "type": "commit"}, {"oid": "703ce05e095c1e1298a88a7590fffd614825bc34", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/703ce05e095c1e1298a88a7590fffd614825bc34", "message": "Merge remote-tracking branch 'upstream/develop' into interval", "committedDate": "2020-08-15T00:37:10Z", "type": "commit"}, {"oid": "99253c88988ea6a62a7ca08eb1e3cd0bca6c535d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/99253c88988ea6a62a7ca08eb1e3cd0bca6c535d", "message": "add interval type", "committedDate": "2020-08-15T00:41:35Z", "type": "commit"}, {"oid": "10084ad0cf8c1c6bbfa8f770bc889e61b4c5ea61", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/10084ad0cf8c1c6bbfa8f770bc889e61b4c5ea61", "message": "added docs", "committedDate": "2020-08-17T21:17:13Z", "type": "commit"}, {"oid": "29e9d4c44bb4f6b3b183c80a04615a5b427780de", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/29e9d4c44bb4f6b3b183c80a04615a5b427780de", "message": "update", "committedDate": "2020-08-17T21:35:47Z", "type": "commit"}, {"oid": "60a6da0a9aae1d38455391b7702bd7761f98c8d3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/60a6da0a9aae1d38455391b7702bd7761f98c8d3", "message": "update", "committedDate": "2020-08-17T21:44:40Z", "type": "commit"}, {"oid": "7ba1c60001a030fee5f39928e06478e8ad57ffd5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7ba1c60001a030fee5f39928e06478e8ad57ffd5", "message": "Merge remote-tracking branch 'upstream/develop' into interval", "committedDate": "2020-08-17T22:56:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTk0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472335949", "bodyText": "do we need this method?", "author": "penghuo", "createdAt": "2020-08-18T16:44:57Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprValueUtils.java", "diffHunk": "@@ -172,4 +171,8 @@ public static Boolean getBooleanValue(ExprValue exprValue) {\n   public static ZonedDateTime getDateValue(ExprValue exprValue) {\n     return exprValue.dateValue();\n   }\n+\n+  public static TemporalAmount getIntervalValue(ExprValue exprValue) {", "originalCommit": "7ba1c60001a030fee5f39928e06478e8ad57ffd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMDA1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472430052", "bodyText": "yes, i've also added getTimeValue, getDatetimeValue, getTimestampValue in the other PR #694  to stay consistent. We can also remove all these methods including the getDateValue actually", "author": "chloe-zh", "createdAt": "2020-08-18T19:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0MjgwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472342803", "bodyText": "Datetime is not implemented yet?", "author": "penghuo", "createdAt": "2020-08-18T16:56:08Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/ast/expression/DataType.java", "diffHunk": "@@ -29,13 +29,15 @@\n   NULL(ExprCoreType.UNKNOWN),\n \n   INTEGER(ExprCoreType.INTEGER),\n+  LONG(ExprCoreType.LONG),\n   DOUBLE(ExprCoreType.DOUBLE),\n   STRING(ExprCoreType.STRING),\n   BOOLEAN(ExprCoreType.BOOLEAN),\n \n   DATE(ExprCoreType.DATE),\n   TIME(ExprCoreType.TIME),\n-  TIMESTAMP(ExprCoreType.TIMESTAMP);\n+  TIMESTAMP(ExprCoreType.TIMESTAMP),", "originalCommit": "7ba1c60001a030fee5f39928e06478e8ad57ffd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMDE1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472430151", "bodyText": "it's in #694", "author": "chloe-zh", "createdAt": "2020-08-18T19:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0MjgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0OTE1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472349151", "bodyText": "@UtilityClass will add static automatically.", "author": "penghuo", "createdAt": "2020-08-18T17:06:19Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -56,7 +57,7 @@ public FunctionResolver define(FunctionName functionName,\n    * @param functions    a list of function implementation.\n    * @return FunctionResolver.\n    */\n-  public FunctionResolver define(FunctionName functionName,\n+  public static FunctionResolver define(FunctionName functionName,", "originalCommit": "7ba1c60001a030fee5f39928e06478e8ad57ffd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3MjY4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472572682", "bodyText": "Removed static keywords", "author": "chloe-zh", "createdAt": "2020-08-19T00:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0OTE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NTA0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472355047", "bodyText": "could we reuse the FunctionDSL.impl?", "author": "penghuo", "createdAt": "2020-08-18T17:14:41Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/IntervalClause.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.datetime;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getIntegerValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getLongValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils.getStringValue;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionDSL.define;\n+\n+import com.amazon.opendistroforelasticsearch.sql.common.utils.StringUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprIntervalValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionSignature;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableBiFunction;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.SerializableFunction;\n+import java.time.Duration;\n+import java.time.Period;\n+import java.util.Arrays;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+@UtilityClass\n+public class IntervalClause {\n+\n+  private static final String MICRO_SECOND = \"microsecond\";\n+  private static final String SECOND = \"second\";\n+  private static final String MINUTE = \"minute\";\n+  private static final String HOUR = \"hour\";\n+  private static final String DAY = \"day\";\n+  private static final String WEEK = \"week\";\n+  private static final String MONTH = \"month\";\n+  private static final String QUARTER = \"quarter\";\n+  private static final String YEAR = \"year\";\n+\n+  public void register(BuiltinFunctionRepository repository) {\n+    repository.register(interval());\n+  }\n+\n+  private FunctionResolver interval() {\n+    return define(BuiltinFunctionName.INTERVAL.getName(),\n+        intervalImp(IntervalClause::interval, INTEGER),\n+        intervalImp(IntervalClause::interval, LONG),\n+        intervalImp(IntervalClause::interval, FLOAT),\n+        intervalImp(IntervalClause::interval, DOUBLE));\n+  }\n+\n+  private ExprValue interval(ExprValue value, ExprValue unit) {\n+    switch (getStringValue(unit).toLowerCase()) {\n+      case MICRO_SECOND:\n+        return microsecond(value);\n+      case SECOND:\n+        return second(value);\n+      case MINUTE:\n+        return minute(value);\n+      case HOUR:\n+        return hour(value);\n+      case DAY:\n+        return day(value);\n+      case WEEK:\n+        return week(value);\n+      case MONTH:\n+        return month(value);\n+      case QUARTER:\n+        return quarter(value);\n+      case YEAR:\n+        return year(value);\n+      default:\n+        throw new ExpressionEvaluationException(\n+            String.format(\"interval unit %s is not supported\", getStringValue(unit)));\n+    }\n+  }\n+\n+  private ExprValue microsecond(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofNanos(getLongValue(value) * 1000));\n+  }\n+\n+  private ExprValue second(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofSeconds(getLongValue(value)));\n+  }\n+\n+  private ExprValue minute(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofMinutes(getLongValue(value)));\n+  }\n+\n+  private ExprValue hour(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofHours(getLongValue(value)));\n+  }\n+\n+  private ExprValue day(ExprValue value) {\n+    return new ExprIntervalValue(Duration.ofDays(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue week(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofWeeks(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue month(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value)));\n+  }\n+\n+  private ExprValue quarter(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofMonths(getIntegerValue(value) * 3));\n+  }\n+\n+  private ExprValue year(ExprValue value) {\n+    return new ExprIntervalValue(Period.ofYears(getIntegerValue(value)));\n+  }\n+\n+  /**\n+   * Interval argument implementation as function.\n+   */\n+  private static SerializableFunction", "originalCommit": "7ba1c60001a030fee5f39928e06478e8ad57ffd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMTA2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472431063", "bodyText": "toString() method needs to be overridden", "author": "chloe-zh", "createdAt": "2020-08-18T19:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0Mzc1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/687#discussion_r472543755", "bodyText": "toString() method needs to be overridden\n\nWhere is the toString method used? I recall it was required earlier because we didn't have original field name in SELECT?", "author": "dai-chen", "createdAt": "2020-08-18T23:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NTA0Nw=="}], "type": "inlineReview"}, {"oid": "8dd6fb9b5d43848aab236e1d49de646d3485a4a1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8dd6fb9b5d43848aab236e1d49de646d3485a4a1", "message": "corrected typo", "committedDate": "2020-08-18T19:30:55Z", "type": "commit"}, {"oid": "790465e7ea50edd906f93601b66ad826f69938a4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/790465e7ea50edd906f93601b66ad826f69938a4", "message": "update", "committedDate": "2020-08-18T22:12:13Z", "type": "commit"}, {"oid": "557b95a4e176d8fe448e192fc62d29a7a961a0b6", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/557b95a4e176d8fe448e192fc62d29a7a961a0b6", "message": "added interval in sql parser", "committedDate": "2020-08-19T00:50:44Z", "type": "commit"}, {"oid": "d5307dc0d9f6e51169d42a82de1b405a8a9bbb6d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d5307dc0d9f6e51169d42a82de1b405a8a9bbb6d", "message": "update", "committedDate": "2020-08-19T21:51:47Z", "type": "commit"}, {"oid": "492007bf16c5efa8005b8a3e79a28bc1521c0426", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/492007bf16c5efa8005b8a3e79a28bc1521c0426", "message": "Merge remote-tracking branch 'upstream/develop' into interval\n\n# Conflicts:\n#\tsql/src/main/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/AstExpressionBuilder.java\n#\tsql/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/parser/AstExpressionBuilderTest.java", "committedDate": "2020-08-20T22:53:13Z", "type": "commit"}]}