{"pr_number": 390, "pr_title": "Simple Query Cursor support", "pr_createdAt": "2020-03-19T21:27:17Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390", "timeline": [{"oid": "19499d6d9b08168e8aad449239276a3edaf7b574", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/19499d6d9b08168e8aad449239276a3edaf7b574", "message": "Add  integ tests to be passed", "committedDate": "2020-03-11T07:07:58Z", "type": "commit"}, {"oid": "dd400f39d6d2081deb74369bb7247ef6ab20bef8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/dd400f39d6d2081deb74369bb7247ef6ab20bef8", "message": "Add cluster settings for cursor - enabled, fetch_size, keep_alive", "committedDate": "2020-03-11T22:48:23Z", "type": "commit"}, {"oid": "abf7d653e817222c85faa43dc75506f8b08cda16", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/abf7d653e817222c85faa43dc75506f8b08cda16", "message": "Add fetch_size and cursor params. fetch_size valisation", "committedDate": "2020-03-12T02:33:34Z", "type": "commit"}, {"oid": "496335c097935fc417f33fa6a10aef60fd0ba591", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/496335c097935fc417f33fa6a10aef60fd0ba591", "message": "new SqlRequest constructor for cursor", "committedDate": "2020-03-12T03:57:21Z", "type": "commit"}, {"oid": "68efc8b663e504d8457e884ae6824b9cf1141864", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/68efc8b663e504d8457e884ae6824b9cf1141864", "message": "Add logic to open scroll based on settings, fetch_size and limit values", "committedDate": "2020-03-12T06:40:13Z", "type": "commit"}, {"oid": "e5bc18b87c86ec90605005467b1e3dac20e9a2f0", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e5bc18b87c86ec90605005467b1e3dac20e9a2f0", "message": "Add curosr close endpoint", "committedDate": "2020-03-12T06:58:54Z", "type": "commit"}, {"oid": "6871b355017e1ef3e43f20e76cd1b7cf8d46d44d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6871b355017e1ef3e43f20e76cd1b7cf8d46d44d", "message": "Some updates", "committedDate": "2020-03-16T18:15:43Z", "type": "commit"}, {"oid": "7818bd624586eaf4674c383dd0b9385b74ba0a7f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7818bd624586eaf4674c383dd0b9385b74ba0a7f", "message": "Remove date formatting changes", "committedDate": "2020-03-18T05:06:40Z", "type": "commit"}, {"oid": "9b82f75ad647cb9b8e4d531c8e8f1f682f9df7b5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9b82f75ad647cb9b8e4d531c8e8f1f682f9df7b5", "message": "Fix unit and integ tests, Ignored date format tests for a while, synced previous cursor changes", "committedDate": "2020-03-18T07:57:59Z", "type": "commit"}, {"oid": "444fc0649920b995c191f4f9e7d8309111624b1f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/444fc0649920b995c191f4f9e7d8309111624b1f", "message": "Add cursor generation", "committedDate": "2020-03-18T16:28:42Z", "type": "commit"}, {"oid": "d5a52633bca5712bf4af503c2143047e8d0ba436", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d5a52633bca5712bf4af503c2143047e8d0ba436", "message": "Add test helper methods", "committedDate": "2020-03-18T17:15:20Z", "type": "commit"}, {"oid": "fc1dc3a7c0173f303aa70240e4598434c3033cbb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/fc1dc3a7c0173f303aa70240e4598434c3033cbb", "message": "Add test hepler method to get query with explicit fetch_size", "committedDate": "2020-03-18T21:17:38Z", "type": "commit"}, {"oid": "1b46c3338a6a8013659774264152ee6249ef7afc", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1b46c3338a6a8013659774264152ee6249ef7afc", "message": "Add some integ test cases", "committedDate": "2020-03-18T21:18:22Z", "type": "commit"}, {"oid": "718a773619b6d344fa6104eb89a27ad18715ca14", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/718a773619b6d344fa6104eb89a27ad18715ca14", "message": "More integ tests, more test hepler methods", "committedDate": "2020-03-18T22:26:24Z", "type": "commit"}, {"oid": "527f6f91408c9fb01289a95b117017ba77476436", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/527f6f91408c9fb01289a95b117017ba77476436", "message": "Add two more integ tests", "committedDate": "2020-03-18T22:51:50Z", "type": "commit"}, {"oid": "c1a8642d7f99ed60a75c3945688d0da165aa59dd", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c1a8642d7f99ed60a75c3945688d0da165aa59dd", "message": "Refactor", "committedDate": "2020-03-19T05:13:45Z", "type": "commit"}, {"oid": "d6c623bb9fffecfca3cf1f3b2b8438b5280c7855", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d6c623bb9fffecfca3cf1f3b2b8438b5280c7855", "message": "Cursor close API", "committedDate": "2020-03-19T16:03:26Z", "type": "commit"}, {"oid": "dbaf8c137383b76361f0cb6c91d311aff36a549d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/dbaf8c137383b76361f0cb6c91d311aff36a549d", "message": "Close cursor integ tests", "committedDate": "2020-03-19T17:10:17Z", "type": "commit"}, {"oid": "3c0213e603e90392635e51adcbc9079a79e26932", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3c0213e603e90392635e51adcbc9079a79e26932", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-03-19T17:40:08Z", "type": "commit"}, {"oid": "b82f98fb2e725538dec1d43ac9af005cdc0dd2e9", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b82f98fb2e725538dec1d43ac9af005cdc0dd2e9", "message": "Fix typo causing cursor close API to fail", "committedDate": "2020-03-19T18:26:57Z", "type": "commit"}, {"oid": "f592e8884c59b1fa207e64d6ca3f5e1aade2207f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f592e8884c59b1fa207e64d6ca3f5e1aade2207f", "message": "Remove commented code and add partial date formatting change", "committedDate": "2020-03-19T18:28:03Z", "type": "commit"}, {"oid": "1d13a83b6aa240081ddee6f89363731c3306abc7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1d13a83b6aa240081ddee6f89363731c3306abc7", "message": "Remove unused import causing build failure", "committedDate": "2020-03-19T18:32:50Z", "type": "commit"}, {"oid": "25a174917139ec947ab58d388ed4923c7cc6bd15", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/25a174917139ec947ab58d388ed4923c7cc6bd15", "message": "Add error metrics when not able to close cursor", "committedDate": "2020-03-19T20:17:37Z", "type": "commit"}, {"oid": "cbe4f93faaed56695d7e9fc29cd063c236ce58b8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cbe4f93faaed56695d7e9fc29cd063c236ce58b8", "message": "Add indexname and fieldAliasMap to cursor context", "committedDate": "2020-03-19T20:30:05Z", "type": "commit"}, {"oid": "c7df8df42fee34f2f9f23894baf65b85d21f2573", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c7df8df42fee34f2f9f23894baf65b85d21f2573", "message": "Remove ignored test cases affected by date formatting changes", "committedDate": "2020-03-19T20:40:19Z", "type": "commit"}, {"oid": "21f00ff7bbff5af6854d3b7d701fc4a59675f10c", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/21f00ff7bbff5af6854d3b7d701fc4a59675f10c", "message": "Remove unneeded interface, refactor CursorType enum", "committedDate": "2020-03-19T20:47:29Z", "type": "commit"}, {"oid": "392defdabad00c3e2b73c6bf6fd5b13eca4fb77e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/392defdabad00c3e2b73c6bf6fd5b13eca4fb77e", "message": "Remove logs, unneeded fields, comments, refactor", "committedDate": "2020-03-19T21:13:27Z", "type": "commit"}, {"oid": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "message": "Add more assert and remove comments", "committedDate": "2020-03-19T21:15:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjY5OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395346698", "bodyText": "suggestion: tempResponse -> firstResponse", "author": "penghuo", "createdAt": "2020-03-19T22:07:48Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/CursorIT.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class CursorIT extends SQLIntegTestCase {\n+\n+    private static final String JDBC = \"jdbc\";\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    @Test\n+    public void invalidFetchSize() throws IOException {\n+        // invalid fetch_size --> negative(-2), non-numeric(\"hello\")\n+        // acceptable fetch_size --> positive numbers, even in string form \"532.4\"\n+        String query = StringUtils.format(\"SELECT firstname, state FROM %s\", TestsConstants.TEST_INDEX_ACCOUNT);\n+        Response response = null;\n+        try {\n+            String queryResult = executeFetchQuery(query, -2, JDBC);\n+        } catch (ResponseException ex) {\n+            response = ex.getResponse();\n+        }\n+\n+        JSONObject resp = new JSONObject(TestUtils.getResponseBody(response));\n+        assertThat(resp.getInt(\"status\"), equalTo(400));\n+        assertThat(resp.query(\"/error/reason\"), equalTo(\"Invalid SQL query\"));\n+        assertThat(resp.query(\"/error/details\"), equalTo(\"Fetch_size must be greater or equal to 0\"));\n+        assertThat(resp.query(\"/error/type\"), equalTo(\"IllegalArgumentException\"));\n+    }\n+\n+    @Test\n+    public void noPaginationWhenFetchSizeZero() throws IOException {\n+        // fetch_size = 0, default to non-pagination behaviour for simple queries\n+        // this can be checked by checking that cursor is not present, and old default limit applies\n+        String selectQuery = StringUtils.format(\"SELECT firstname, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchQuery(selectQuery, 0, JDBC));\n+        assertFalse(response.has(\"cursor\"));\n+        assertThat(response.getJSONArray(\"datarows\").length(), equalTo(200));\n+    }\n+\n+    @Test\n+    public void validNumberOfPages() throws IOException {\n+        // the index has 1000 records, with fetch size of 50 we should get 20 pages with no cursor on last page\n+        String selectQuery = StringUtils.format(\"SELECT firstname, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchQuery(selectQuery, 50, JDBC));\n+        String cursor = response.getString(\"cursor\");\n+        int pageCount = 1;\n+\n+        while (!cursor.isEmpty()) { //this condition also checks that there is no cursor on last page\n+            response = executeCursorQuery(cursor);\n+            cursor = response.optString(\"cursor\");\n+            pageCount++;\n+        }\n+\n+        assertThat(pageCount, equalTo(20));\n+\n+        // using random value here, with fetch size of 28 we should get 36 pages (ceil of 1000/28)\n+        response = new JSONObject(executeFetchQuery(selectQuery, 28, JDBC));\n+        cursor = response.getString(\"cursor\");\n+        System.out.println(response);\n+        pageCount = 1;\n+\n+        while (!cursor.isEmpty()) {\n+            response = executeCursorQuery(cursor);\n+            cursor = response.optString(\"cursor\");\n+            pageCount++;\n+        }\n+        assertThat(pageCount, equalTo(36));\n+    }\n+\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPagination() throws IOException {\n+        // simple query - accounts index has 1000 docs, using higher limit to get all docs\n+        String selectQuery = StringUtils.format(\"SELECT firstname, state FROM %s \", TEST_INDEX_ACCOUNT );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 80);\n+    }\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPaginationWhereClause() throws IOException {\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s WHERE balance < 25000 AND age > 32\", TEST_INDEX_ACCOUNT\n+        );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 17);\n+    }\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPaginationOrderBy() throws IOException {\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s ORDER BY balance DESC \", TEST_INDEX_ACCOUNT\n+        );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 26);\n+    }\n+\n+    @Test\n+    public void validTotalResultWithAndWithoutPaginationWhereAndOrderBy() throws IOException {\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s WHERE balance < 25000 ORDER BY balance ASC \", TEST_INDEX_ACCOUNT\n+        );\n+        verifyWithAndWithoutPaginationResponse(selectQuery + \" LIMIT 2000\" , selectQuery , 80);\n+\n+    }\n+\n+    //TODO: add test cases for nested and subqueries after checking both works as part of query coverage test\n+\n+    @Test\n+    public void noCursorWhenResultsLessThanFetchSize() throws IOException {\n+        // fetch_size is 100, but actual number of rows returned from ElasticSearch is 97\n+        // a scroll context will be opened but will be closed after first page as all records are fetched\n+        String selectQuery = StringUtils.format(\n+                \"SELECT * FROM %s WHERE balance < 25000 AND age > 36 LIMIT 2000\", TEST_INDEX_ACCOUNT\n+        );\n+        JSONObject response = new JSONObject(executeFetchQuery(selectQuery, 100, JDBC));\n+        assertFalse(response.has(\"cursor\"));\n+    }\n+\n+\n+\n+    @Test\n+    public void defaultBehaviorWhenCursorSettingIsDisabled() throws IOException {\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.enabled\", \"false\"));\n+        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchQuery(query, 100, JDBC));\n+        assertFalse(response.has(\"cursor\"));\n+\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.enabled\", null));\n+        query = StringUtils.format(\"SELECT firstname, email, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        response = new JSONObject(executeFetchQuery(query, 100, JDBC));\n+        assertTrue(response.has(\"cursor\"));\n+\n+        wipeAllClusterSettings();\n+    }\n+\n+\n+    @Test\n+    public void testCursorSettings() throws IOException {\n+        // Assert default cursor settings\n+        JSONObject clusterSettings = getAllClusterSettings();\n+        assertThat(clusterSettings.query(\"/defaults/opendistro.sql.cursor.enabled\"), equalTo(\"true\"));\n+        assertThat(clusterSettings.query(\"/defaults/opendistro.sql.cursor.fetch_size\"), equalTo(\"1000\"));\n+        assertThat(clusterSettings.query(\"/defaults/opendistro.sql.cursor.keep_alive\"), equalTo(\"1m\"));\n+\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.enabled\", \"false\"));\n+        updateClusterSettings(new ClusterSetting(TRANSIENT, \"opendistro.sql.cursor.fetch_size\", \"400\"));\n+        updateClusterSettings(new ClusterSetting(PERSISTENT, \"opendistro.sql.cursor.keep_alive\", \"200s\"));\n+\n+        clusterSettings = getAllClusterSettings();\n+        assertThat(clusterSettings.query(\"/persistent/opendistro.sql.cursor.enabled\"), equalTo(\"false\"));\n+        assertThat(clusterSettings.query(\"/transient/opendistro.sql.cursor.fetch_size\"), equalTo(\"400\"));\n+        assertThat(clusterSettings.query(\"/persistent/opendistro.sql.cursor.keep_alive\"), equalTo(\"200s\"));\n+\n+        wipeAllClusterSettings();\n+    }\n+\n+\n+    @Test\n+    public void testDefaultFetchSize() throws IOException {\n+        // the default fetch size is 1000\n+        // using non-nested query here as page will have more rows on flattening\n+        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s\", TEST_INDEX_ACCOUNT);\n+        JSONObject response = new JSONObject(executeFetchLessQuery(query, JDBC));\n+        JSONArray datawRows = response.optJSONArray(\"datarows\");\n+        assertThat(datawRows.length(), equalTo(1000));\n+\n+        updateClusterSettings(new ClusterSetting(TRANSIENT, \"opendistro.sql.cursor.fetch_size\", \"786\"));\n+        response = new JSONObject(executeFetchLessQuery(query, JDBC));\n+        datawRows = response.optJSONArray(\"datarows\");\n+        assertThat(datawRows.length(), equalTo(786));\n+\n+        wipeAllClusterSettings();\n+    }\n+\n+    @Test\n+    public void testCursorCloseAPI() throws IOException {\n+        // multiple invocation of closing cursor should return success\n+        // fetch page using old cursor should throw error\n+        String selectQuery = StringUtils.format(\n+                \"SELECT firstname, state FROM %s WHERE balance > 100 and age < 40\", TEST_INDEX_ACCOUNT);\n+        JSONObject result = new JSONObject(executeFetchQuery(selectQuery, 50, JDBC));\n+        String cursor = result.getString(\"cursor\");\n+\n+        // Retrieving next 10 pages out of remaining 19 pages\n+        for(int i =0 ; i < 10 ; i++) {\n+            result = executeCursorQuery(cursor);\n+            cursor = result.optString(\"cursor\");\n+        }\n+        //Closing the cursor\n+        JSONObject closeResp = executeCursorCloseQuery(cursor);\n+        assertThat(closeResp.getBoolean(\"succeeded\"), equalTo(true));\n+\n+        //Closing the cursor multiple times is idempotent\n+        for(int i =0 ; i < 5 ; i++) {\n+            closeResp = executeCursorCloseQuery(cursor);\n+            assertThat(closeResp.getBoolean(\"succeeded\"), equalTo(true));\n+        }\n+\n+        // using the cursor after its cleared, will throw exception\n+        Response response = null;\n+        try {\n+            JSONObject queryResult = executeCursorQuery(cursor);\n+        } catch (ResponseException ex) {\n+            response = ex.getResponse();\n+        }\n+\n+        JSONObject resp = new JSONObject(TestUtils.getResponseBody(response));\n+        assertThat(resp.getInt(\"status\"), equalTo(404));\n+        assertThat(resp.query(\"/error/reason\"), equalTo(\"all shards failed\"));\n+        assertThat(resp.query(\"/error/caused_by/reason\").toString(), containsString(\"No search context found\"));\n+        assertThat(resp.query(\"/error/type\"), equalTo(\"search_phase_execution_exception\"));\n+    }\n+\n+\n+    @Test\n+    public void invalidCursorIdNotDecodable() throws IOException {\n+        // could be either not decode-able\n+        String randomCursor = \"eyJzY2hlbWEiOlt7Im5hbWUiOiJmaXJzdG5hbWUiLCJ0eXBlIjoidGV4dCJ9LHsibmFtZSI6InN0Y\";\n+\n+        Response response = null;\n+        try {\n+            JSONObject resp = executeCursorQuery(randomCursor);\n+        } catch (ResponseException ex) {\n+            response = ex.getResponse();\n+        }\n+\n+        JSONObject resp = new JSONObject(TestUtils.getResponseBody(response));\n+        assertThat(resp.getInt(\"status\"), equalTo(400));\n+        assertThat(resp.query(\"/error/type\"), equalTo(\"illegal_argument_exception\"));\n+    }\n+\n+    @Test\n+    public void respectLimitPassedInSelectClause() throws IOException {\n+        //TODO:\n+//        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s LIMIT 800\", TEST_INDEX_ACCOUNT);\n+//        String result = executeFetchQuery(query, 50, \"jdbc\");\n+        assertThat(1, equalTo(1));\n+    }\n+\n+\n+    @Test\n+    public void noPaginationWithNonJDBCFormat() throws IOException {\n+        // checking for CSV, RAW format\n+        String query = StringUtils.format(\"SELECT firstname, email, state FROM %s LIMIT 2000\", TEST_INDEX_ACCOUNT);\n+        String csvResult = executeFetchQuery(query, 100, \"csv\");\n+        String[] rows = csvResult.split(\"\\n\");\n+        // all the 1000 records (+1 for header) are retrieved instead of fetch_size number of records\n+        assertThat(rows.length, equalTo(1001));\n+\n+        String rawResult = executeFetchQuery(query, 100, \"raw\");\n+        rows = rawResult.split(\"\\n\");\n+        // all the 1000 records (NO headers) are retrieved instead of fetch_size number of records\n+        assertThat(rows.length, equalTo(1000));\n+    }\n+\n+\n+    public void verifyWithAndWithoutPaginationResponse(String sqlQuery, String cursorQuery, int fetch_size) throws IOException {\n+        // we are only checking here for schema and aatarows\n+        JSONObject withoutCursorResponse = new JSONObject(executeFetchQuery(sqlQuery, 0, JDBC));\n+\n+        JSONObject withCursorResponse = new JSONObject(\"{\\\"schema\\\":[],\\\"datarows\\\":[]}\");\n+        JSONArray schema = withCursorResponse.getJSONArray(\"schema\");\n+        JSONArray dataRows = withCursorResponse.getJSONArray(\"datarows\");\n+\n+        JSONObject tempResponse = new JSONObject(executeFetchQuery(cursorQuery, fetch_size, JDBC));", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2NzAwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395767001", "bodyText": "Keeping it simply response as the variable is being re-used to hold subsequent page results.", "author": "abbashus", "createdAt": "2020-03-20T16:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NjY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1Mzc1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395353757", "bodyText": "delete it", "author": "penghuo", "createdAt": "2020-03-19T22:25:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -57,6 +68,16 @@ public String getSql() {\n         return this.sql;\n     }\n \n+    public String cursor() {\n+        return this.cursor;\n+//        return (jsonContent == null) ? null : jsonContent.getString(SqlRequestFactory.SQL_CURSOR_FIELD_NAME);", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MzQ1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395393456", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-03-20T00:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1Mzc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395355098", "bodyText": "null or 0?", "author": "penghuo", "createdAt": "2020-03-19T22:29:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjA0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386049", "bodyText": "+1", "author": "davidcui1225", "createdAt": "2020-03-20T00:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NDE0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395394149", "bodyText": "null to imply that fetch_size was not passed in query. In DefaultQueryAction, if fetch_size == null, we will use the fetch_size value from cluster settings.\nfetch_size == 0 will imply falling back to non-paginated behavior.", "author": "abbashus", "createdAt": "2020-03-20T00:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxMDY0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406310647", "bodyText": "I suggest to use Optional instead of null value in this case.", "author": "penghuo", "createdAt": "2020-04-09T16:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDM2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407000363", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-04-11T01:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NTA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NjgxMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395356810", "bodyText": "In which case the exception will been throw? Does it been tested?", "author": "penghuo", "createdAt": "2020-03-19T22:33:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;\n+        try {\n+            if (jsonContent.has(SQL_FETCH_FIELD_NAME)) {\n+                fetchSize = jsonContent.getInt(SQL_FETCH_FIELD_NAME);\n+                if (fetchSize < 0) {\n+                    throw new IllegalArgumentException(\"Fetch_size must be greater or equal to 0\");\n+                }\n+            }\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Failed to parse field [\" + SQL_FETCH_FIELD_NAME +\"]\", e);", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NTUwNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395395504", "bodyText": "This exception will be thrown when passing non-numeric value to fetch_size , for example \"fetch_size\" : \"hello world\". An IllegalArgumentException is thrown to be caught as client error (400) in RestSqlAction.java. Will add a test for this.", "author": "abbashus", "createdAt": "2020-03-20T00:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NjgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NzcyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395357723", "bodyText": "Have you updated the doc in PluginSettingIT?", "author": "penghuo", "createdAt": "2020-03-19T22:36:47Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/SqlSettings.java", "diffHunk": "@@ -68,6 +73,13 @@ public SqlSettings() {\n         settings.put(METRICS_ROLLING_INTERVAL, Setting.longSetting(METRICS_ROLLING_INTERVAL, 60L, 1L,\n                 NodeScope, Dynamic));\n \n+        // Settings for cursor\n+        settings.put(CURSOR_ENABLED, Setting.boolSetting(CURSOR_ENABLED, true, NodeScope, Dynamic));", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MjM1MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395362350", "bodyText": "Will do.", "author": "abbashus", "createdAt": "2020-03-19T22:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NzcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzY3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406383675", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-04-09T18:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzI2NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395363264", "bodyText": "what happen if it is an explain request", "author": "penghuo", "createdAt": "2020-03-19T22:52:34Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorActionRequestRestExecutorFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import org.elasticsearch.rest.RestRequest;\n+\n+public class CursorActionRequestRestExecutorFactory {\n+    //TODO: add javadocs, see RestExecutor\n+\n+    public static CursorRestExecutor createExecutor(RestRequest request, String cursor, Format format) {\n+        if (isCursorCloseRequest(request)) {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NzY2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395367669", "bodyText": "As per plugin usage ,  _explain does make sense with cursor. Will handle this case.", "author": "abbashus", "createdAt": "2020-03-19T23:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTIzNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406265236", "bodyText": "Handled this case. Added integration test for same.", "author": "abbashus", "createdAt": "2020-04-09T14:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzYwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395363603", "bodyText": "Doc", "author": "penghuo", "createdAt": "2020-03-19T22:53:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorRestExecutor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.RestChannel;\n+\n+import java.util.Map;\n+\n+public interface CursorRestExecutor {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjU3NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395372574", "bodyText": "Will add.", "author": "abbashus", "createdAt": "2020-03-19T23:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MzYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NjQ2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395366461", "bodyText": "What is the function of this? If it is not supported, just thrown an exception.", "author": "penghuo", "createdAt": "2020-03-19T23:01:39Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorAsyncRestExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.query.QueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.join.BackOffRetryStrategy;\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.QUERY_SLOWLOG;\n+\n+public class CursorAsyncRestExecutor implements CursorRestExecutor {\n+    /**\n+     * Custom thread pool name managed by ES\n+     */\n+    public static final String SQL_WORKER_THREAD_POOL_NAME = \"sql-worker\";\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorAsyncRestExecutor.class);\n+\n+    private static final Predicate<QueryAction> ALL_ACTION_IS_BLOCKING = anyAction -> true;\n+\n+    /**\n+     * Delegated rest executor to async\n+     */\n+    private final CursorRestExecutor executor;\n+\n+    /**\n+     * Request type that expect to async to avoid blocking\n+     */\n+    private final Predicate<QueryAction> isBlocking;\n+\n+    CursorAsyncRestExecutor(CursorRestExecutor executor) {\n+        this(executor, ALL_ACTION_IS_BLOCKING);\n+    }\n+\n+    CursorAsyncRestExecutor(CursorRestExecutor executor, Predicate<QueryAction> isBlocking) {\n+        this.executor = executor;\n+        this.isBlocking = isBlocking;\n+    }\n+\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        LOG.info(\"executing something inside CursorAsyncRestExecutor execute \");\n+        async(client, params, channel);\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzkyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406383923", "bodyText": "Removed this method.", "author": "abbashus", "createdAt": "2020-04-09T18:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NjQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NzQyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395367429", "bodyText": "It almost as same as AsyncRestExecutor. Any improvement?", "author": "penghuo", "createdAt": "2020-03-19T23:04:49Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorAsyncRestExecutor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.query.QueryAction;\n+import com.amazon.opendistroforelasticsearch.sql.query.join.BackOffRetryStrategy;\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.QUERY_SLOWLOG;\n+\n+public class CursorAsyncRestExecutor implements CursorRestExecutor {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjI4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395372287", "bodyText": "The signature of execute methods in CursorRestExecutor does not take QueryAction as parameter. Will try to combine them in one.", "author": "abbashus", "createdAt": "2020-03-19T23:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NzQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2Nzg0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395367842", "bodyText": "Log.error?", "author": "penghuo", "createdAt": "2020-03-19T23:06:03Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjQzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395372435", "bodyText": "Will add.", "author": "abbashus", "createdAt": "2020-03-19T23:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2Nzg0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDc0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405924742", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-04-09T02:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2Nzg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2ODg2MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395368860", "bodyText": "Add separate class to encapsulate is much better.", "author": "penghuo", "createdAt": "2020-03-19T23:09:15Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDY2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405924669", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-04-09T02:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2ODg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MTAxNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395371014", "bodyText": "Instead of using JSONObject, I suggest to abstract cursor as JavaBean.", "author": "penghuo", "createdAt": "2020-03-19T23:15:59Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDYyMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405924620", "bodyText": "Abstracted all cursor encode/decode logic via Cursor interface and individual implementation.", "author": "abbashus", "createdAt": "2020-04-09T02:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjE4NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395372184", "bodyText": "Why the response is different?", "author": "penghuo", "createdAt": "2020-03-19T23:19:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);\n+\n+        String type = cursorJson.optString(\"type\", null); // see if it is a good case to use Optionals\n+        CursorType cursorType = null;\n+\n+        if (type != null) {\n+            cursorType = CursorType.valueOf(type);\n+        }\n+\n+        if (cursorType!=null) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    return handleDefaultCursorCloseRequest(client, cursorJson);\n+                case AGGREGATION:\n+                    return handleAggregationCursorCloseRequest(client, cursorJson);\n+                case JOIN:\n+                    return handleJoinCursorCloseRequest(client, cursorJson);\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Invalid cursor\");\n+    }\n+\n+    private String handleDefaultCursorCloseRequest(Client client, JSONObject cursorContext) {\n+        String scrollId = cursorContext.getString(\"scrollId\");\n+        ClearScrollResponse clearScrollResponse = client.prepareClearScroll().addScrollId(scrollId).get();\n+        if (clearScrollResponse.isSucceeded()) {\n+            return SUCCEEDED_TRUE;\n+        } else {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            return SUCCEEDED_FALSE;\n+        }\n+    }\n+\n+    private String handleAggregationCursorCloseRequest(Client client, JSONObject cursorContext) {\n+        return SUCCEEDED_TRUE;\n+    }\n+\n+    private String handleJoinCursorCloseRequest(Client client, JSONObject cursorContext) {\n+        return SUCCEEDED_FALSE;\n+    }", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzYyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395373623", "bodyText": "Bad copy, will make it consistent.", "author": "abbashus", "createdAt": "2020-03-19T23:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzQ5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395373491", "bodyText": "Should we also catch SQLFeatureNotSupportedException in here?", "author": "penghuo", "createdAt": "2020-03-19T23:24:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4NDQwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407584406", "bodyText": "Not needed after refactoring.", "author": "abbashus", "createdAt": "2020-04-13T16:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NzkzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395377939", "bodyText": "could be removed.", "author": "penghuo", "createdAt": "2020-03-19T23:39:33Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -153,6 +198,36 @@ private String outputInTableFormat() {\n         return null;\n     }\n \n+\n+    public String cursorFormat() {\n+        if (status == OK_STATUS && cursorContext!=null) {\n+            switch (formatType) {\n+                case \"jdbc\":\n+                    return cursorOutputInJDBCFormat();\n+                case \"table\":", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODUwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395378505", "bodyText": "Which part- case table?", "author": "abbashus", "createdAt": "2020-03-19T23:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMzE4OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406323188", "bodyText": "Yes, do we support table?", "author": "penghuo", "createdAt": "2020-04-09T16:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NTE3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406875175", "bodyText": "Removed.", "author": "abbashus", "createdAt": "2020-04-10T18:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NzkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MjY0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395382642", "bodyText": "return null or cursor?", "author": "penghuo", "createdAt": "2020-03-19T23:56:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ResultSet.java", "diffHunk": "@@ -48,4 +50,8 @@ protected boolean matchesPattern(String string, String pattern) {\n         Matcher matcher = p.matcher(string);\n         return matcher.find();\n     }\n+\n+    public String getCursor() {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDI2MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405924260", "bodyText": "Removed this method as part of refactoring.", "author": "abbashus", "createdAt": "2020-04-09T02:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MjY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NDcyMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395384722", "bodyText": "FeatureNotSupportedExecption?", "author": "penghuo", "createdAt": "2020-03-20T00:04:28Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -203,4 +278,79 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n-}\n+\n+    public void generateCursorId() {\n+        // TODO: only to be used for generating cursor from first page\n+        // for subsequent pages the cursorType and cursor should be set from\n+        switch(cursorType) {\n+            case DEFAULT:\n+                int pages_left = pagesLeft();\n+                if (options.get(\"scrollId\") != null && pages_left > 0) {\n+                    JSONObject cursorJson = new JSONObject();\n+                    cursorJson.put(\"type\", cursorType.name());\n+                    cursorJson.put(\"schema\", getSchemaAsJson());\n+                    cursorJson.put(\"scrollId\", options.get(\"scrollId\"));\n+                    cursorJson.put(\"left\", pagesLeft());\n+                    setIndexNameInCursor(cursorJson);\n+                    setFieldAliasMapInCursor(cursorJson);\n+                    cursor = encodeCursorContext(cursorJson);\n+\n+                } else {\n+                    // explicitly setting this to null to avoid any ambiguity\n+                    cursor = null;\n+                }\n+                options.remove(\"scrollId\");\n+                options.remove(\"fetch_size\");\n+                break;\n+            case AGGREGATION:\n+                throw new ElasticsearchException(\"Cursor not yet supported for GROUP BY queries\");", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyNDE1MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405924150", "bodyText": "Removed this logic as part of refactoring.", "author": "abbashus", "createdAt": "2020-04-09T02:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NDcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NTE1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395385153", "bodyText": "why remove?", "author": "penghuo", "createdAt": "2020-03-20T00:06:16Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -203,4 +278,79 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n-}\n+\n+    public void generateCursorId() {\n+        // TODO: only to be used for generating cursor from first page\n+        // for subsequent pages the cursorType and cursor should be set from\n+        switch(cursorType) {\n+            case DEFAULT:\n+                int pages_left = pagesLeft();\n+                if (options.get(\"scrollId\") != null && pages_left > 0) {\n+                    JSONObject cursorJson = new JSONObject();\n+                    cursorJson.put(\"type\", cursorType.name());\n+                    cursorJson.put(\"schema\", getSchemaAsJson());\n+                    cursorJson.put(\"scrollId\", options.get(\"scrollId\"));\n+                    cursorJson.put(\"left\", pagesLeft());\n+                    setIndexNameInCursor(cursorJson);\n+                    setFieldAliasMapInCursor(cursorJson);\n+                    cursor = encodeCursorContext(cursorJson);\n+\n+                } else {\n+                    // explicitly setting this to null to avoid any ambiguity\n+                    cursor = null;\n+                }\n+                options.remove(\"scrollId\");", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMzg5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405923896", "bodyText": "Removed this logic as part of refactoring.", "author": "abbashus", "createdAt": "2020-04-09T02:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NTUwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395385503", "bodyText": "suggest to separate cursor related code from Protocol and add UT for that.", "author": "penghuo", "createdAt": "2020-03-20T00:07:37Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -203,4 +278,79 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n-}\n+\n+    public void generateCursorId() {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMzY1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405923655", "bodyText": "Refactored cursor related code from Protocol.", "author": "abbashus", "createdAt": "2020-04-09T02:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjAxMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386013", "bodyText": "if fetchSize is initialized to null, will this throw a NullPointerException?", "author": "davidcui1225", "createdAt": "2020-03-20T00:09:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequestFactory.java", "diffHunk": "@@ -59,16 +61,36 @@ private static SqlRequest parseSqlRequestFromPayload(RestRequest restRequest) {\n         JSONObject jsonContent;\n         try {\n             jsonContent = new JSONObject(content);\n+            if (jsonContent.has(SQL_CURSOR_FIELD_NAME)) {\n+                return new SqlRequest(jsonContent.getString(SQL_CURSOR_FIELD_NAME));\n+            }\n         } catch (JSONException e) {\n             throw new IllegalArgumentException(\"Failed to parse request payload\", e);\n         }\n         String sql = jsonContent.getString(SQL_FIELD_NAME);\n+\n         if (jsonContent.has(PARAM_FIELD_NAME)) { // is a PreparedStatement\n             JSONArray paramArray = jsonContent.getJSONArray(PARAM_FIELD_NAME);\n             List<PreparedStatementRequest.PreparedStatementParameter> parameters = parseParameters(paramArray);\n             return new PreparedStatementRequest(sql, jsonContent, parameters);\n         }\n-        return new SqlRequest(sql, jsonContent);\n+        return new SqlRequest(sql, validateAndGetFetchSize(jsonContent), jsonContent);\n+    }\n+\n+\n+    private static Integer validateAndGetFetchSize(JSONObject jsonContent) {\n+        Integer fetchSize = null;\n+        try {\n+            if (jsonContent.has(SQL_FETCH_FIELD_NAME)) {\n+                fetchSize = jsonContent.getInt(SQL_FETCH_FIELD_NAME);\n+                if (fetchSize < 0) {", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NzYzMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395397633", "bodyText": "This will never throw NullPointerException, as we are either assigning integer value to fetch_size or throwing JSONException", "author": "abbashus", "createdAt": "2020-03-20T01:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjQwMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386402", "bodyText": "should these style of comments go outside of the actual test case as a JavaDoc comment?", "author": "davidcui1225", "createdAt": "2020-03-20T00:11:21Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/CursorIT.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class CursorIT extends SQLIntegTestCase {\n+\n+    private static final String JDBC = \"jdbc\";\n+\n+    @Override\n+    protected void init() throws Exception {\n+        loadIndex(Index.ACCOUNT);\n+    }\n+\n+    @Test\n+    public void invalidFetchSize() throws IOException {\n+        // invalid fetch_size --> negative(-2), non-numeric(\"hello\")\n+        // acceptable fetch_size --> positive numbers, even in string form \"532.4\"", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5NzEwNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395397104", "bodyText": "Not necessary for tests, does not affect readability or clarity. Its a best practice for code exposed as public libraries.", "author": "abbashus", "createdAt": "2020-03-20T00:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNDkyNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395804927", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-03-20T18:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4NjQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4Njc3OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395386778", "bodyText": "if the scrollhint is deprecated should we delete these tests?", "author": "davidcui1225", "createdAt": "2020-03-20T00:12:58Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/QueryIT.java", "diffHunk": "@@ -1297,6 +1297,7 @@ public void isNotNullTest() throws IOException {\n     }\n \n     @Test\n+    @Ignore(\"Use of scroll hint is deprecated in lieu of cursor support\")", "originalCommit": "3cb9ffb1def7eaa8bc64be0c74e854cde39f9ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4OTA1NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395389054", "bodyText": "Even I had the same concern, will delete these tests.", "author": "abbashus", "createdAt": "2020-03-20T00:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4Njc3OA=="}], "type": "inlineReview"}, {"oid": "edbb36c61572c9207bef39b92a153ce89589f7d5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/edbb36c61572c9207bef39b92a153ce89589f7d5", "message": "Address comments", "committedDate": "2020-03-20T17:51:19Z", "type": "commit"}, {"oid": "4d9a6e8507e20729f41f7b5f6c1a459175deb154", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4d9a6e8507e20729f41f7b5f6c1a459175deb154", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-03-20T17:57:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMjM0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395802349", "bodyText": "Add type in error message?", "author": "dai-chen", "createdAt": "2020-03-20T17:55:49Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);\n+\n+        String type = cursorJson.optString(\"type\", null); // see if it is a good case to use Optionals\n+        CursorType cursorType = null;\n+\n+        if (type != null) {\n+            cursorType = CursorType.valueOf(type);\n+        }\n+\n+        if (cursorType!=null) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    return handleDefaultCursorCloseRequest(client, cursorJson);\n+                case AGGREGATION:\n+                    return handleAggregationCursorCloseRequest(client, cursorJson);\n+                case JOIN:\n+                    return handleJoinCursorCloseRequest(client, cursorJson);\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Invalid cursor\");", "originalCommit": "edbb36c61572c9207bef39b92a153ce89589f7d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMzUwNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405923507", "bodyText": "Added logging for invalid cursor type. Not adding type as part of exception message to hide implementation.", "author": "abbashus", "createdAt": "2020-04-09T02:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMjM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwODY5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r395808691", "bodyText": "I recall this may throw Enum exception.", "author": "dai-chen", "createdAt": "2020-03-20T18:07:18Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Base64;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            e.printStackTrace();\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+\n+        String decodedCursorContext = new String(Base64.getDecoder().decode(cursorId));\n+        JSONObject cursorJson = new JSONObject(decodedCursorContext);\n+\n+        String type = cursorJson.optString(\"type\", null); // see if it is a good case to use Optionals\n+        CursorType cursorType = null;\n+\n+        if (type != null) {\n+            cursorType = CursorType.valueOf(type);", "originalCommit": "edbb36c61572c9207bef39b92a153ce89589f7d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMjMwNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405922307", "bodyText": "This logic has been removed after refactoring.", "author": "abbashus", "createdAt": "2020-04-09T02:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwODY5MQ=="}], "type": "inlineReview"}, {"oid": "29941ad14ec95f84d733196bf8ed31ebf68c2d8d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/29941ad14ec95f84d733196bf8ed31ebf68c2d8d", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-03-24T21:35:54Z", "type": "commit"}, {"oid": "afd251fd2c05322d494dfd711936c85c02d6ccd2", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/afd251fd2c05322d494dfd711936c85c02d6ccd2", "message": "Disable cursor by default, remove comments, fixed tests", "committedDate": "2020-03-26T20:17:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTYxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r401695619", "bodyText": "Since we're adding new fields to the protocol and version information is missing, could you add a version field too? For example, version missing or 1.0 means \"old\" client code and version = 2.0 means \"new\".", "author": "dai-chen", "createdAt": "2020-04-01T15:16:18Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -36,11 +36,22 @@\n \n     String sql;\n     JSONObject jsonContent;\n+    String cursor;", "originalCommit": "afd251fd2c05322d494dfd711936c85c02d6ccd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5MTE1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r403191157", "bodyText": "I took a quick look into version field of other protocol. Take Internet Protocol (IP) for example, the first field in the header is version which indicates IPv4 or IPv6. What follows this field in the header differs for different version so application is aware of how to parse the entire header.\nIn our case, because we are only adding new fields, probably we can delay adding version field. We need to reconsider this and may need to refactor our protocol carefully (ex. divide into header and body) when adding such as binary protocol.\nReference: https://en.wikipedia.org/wiki/IPv4#Version and https://en.wikipedia.org/wiki/IPv6_packet#Fixed_header", "author": "dai-chen", "createdAt": "2020-04-03T17:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMjE2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r405922161", "bodyText": "Yes, we can add this later if needed. This will not break existing clients now as we adding new field and not modifying/deleting existing one.", "author": "abbashus", "createdAt": "2020-04-09T02:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMDk0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r401700942", "bodyText": "I assume cursor can work with PreparedStatement. If so, could you check if our cursor implementation can work with prepared statement request and add test case here?", "author": "dai-chen", "createdAt": "2020-04-01T15:23:24Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/CursorIT.java", "diffHunk": "@@ -0,0 +1,373 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseException;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestUtils.getResponseBody;\n+import static com.amazon.opendistroforelasticsearch.sql.esintgtest.TestsConstants.TEST_INDEX_ACCOUNT;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class CursorIT extends SQLIntegTestCase {", "originalCommit": "afd251fd2c05322d494dfd711936c85c02d6ccd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MTAzMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r401971030", "bodyText": "Sure, will confirm and add a test case as well.", "author": "abbashus", "createdAt": "2020-04-01T23:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMDk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MzE3OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r401973178", "bodyText": "Thanks!", "author": "dai-chen", "createdAt": "2020-04-01T23:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMDk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMjc1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r402702751", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-04-03T02:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMDk0Mg=="}], "type": "inlineReview"}, {"oid": "153d91a7c9e76b4a4cb786d0a96bea770808228a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/153d91a7c9e76b4a4cb786d0a96bea770808228a", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-04-03T01:01:00Z", "type": "commit"}, {"oid": "16712b396f7d5246ac560f70acc9c8723ea74641", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/16712b396f7d5246ac560f70acc9c8723ea74641", "message": "Fix cursor for parameterized request, add integration test for same", "committedDate": "2020-04-03T02:31:10Z", "type": "commit"}, {"oid": "7c272ec42bffafbfff21f7f1bde1f0216e037357", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7c272ec42bffafbfff21f7f1bde1f0216e037357", "message": "LIMIT changes", "committedDate": "2020-04-06T18:38:23Z", "type": "commit"}, {"oid": "a285d1015a2a4a99ed55837dc21f0fd20dd3b74d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a285d1015a2a4a99ed55837dc21f0fd20dd3b74d", "message": "Changes to handle different LIMIT cases", "committedDate": "2020-04-06T21:35:23Z", "type": "commit"}, {"oid": "230f8e7a55f39becd90b4b56ece50772dae64055", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/230f8e7a55f39becd90b4b56ece50772dae64055", "message": "Add default cursor metrics", "committedDate": "2020-04-06T23:26:12Z", "type": "commit"}, {"oid": "f48ab5f159ba7e692cbd4a8624f28b1d6289a4aa", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f48ab5f159ba7e692cbd4a8624f28b1d6289a4aa", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-04-07T16:59:49Z", "type": "commit"}, {"oid": "0b7c5b67f6199c07fe2209e0ba5ae76b44929da2", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0b7c5b67f6199c07fe2209e0ba5ae76b44929da2", "message": "Refactoring and integration tests", "committedDate": "2020-04-09T02:19:08Z", "type": "commit"}, {"oid": "160754c3f30114dac78a287e10b51dfc46fb7298", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/160754c3f30114dac78a287e10b51dfc46fb7298", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-04-09T02:23:00Z", "type": "commit"}, {"oid": "4bbbd5fdd377d1c3a3ac1bbec5224dca8dc8f191", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4bbbd5fdd377d1c3a3ac1bbec5224dca8dc8f191", "message": "Address comments", "committedDate": "2020-04-09T03:33:32Z", "type": "commit"}, {"oid": "641ed2819724c9e506b249213772312f727e0f30", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/641ed2819724c9e506b249213772312f727e0f30", "message": "Add integration test on explain cursor", "committedDate": "2020-04-09T04:14:43Z", "type": "commit"}, {"oid": "6bc00b1ac9d3f12d47e651a3f846765a497ef50a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6bc00b1ac9d3f12d47e651a3f846765a497ef50a", "message": "Update monitoring, settings and endpoint docs", "committedDate": "2020-04-09T13:55:49Z", "type": "commit"}, {"oid": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/63868ec5991b1849ca1b40eadf1a0b46572d225a", "message": "Refactor cursor classes to separate package", "committedDate": "2020-04-09T14:49:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMTY1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406321655", "bodyText": "Do we have UT to test the logic in here. IMO, the  setting, fetchSize, rowCount has different combination which determine the scroll logic which should be covered in the UT.", "author": "penghuo", "createdAt": "2020-04-09T16:19:57Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/DefaultQueryAction.java", "diffHunk": "@@ -78,51 +84,61 @@ public void initialize(SearchRequestBuilder request) {\n \n     @Override\n     public SqlElasticSearchRequestBuilder explain() throws SqlParseException {\n-        Hint scrollHint = null;\n-        for (Hint hint : select.getHints()) {\n-            if (hint.getType() == HintType.USE_SCROLL) {\n-                scrollHint = hint;\n-                break;\n-            }\n-        }\n-        if (scrollHint != null && scrollHint.getParams()[0] instanceof String) {\n-            return new SqlElasticSearchRequestBuilder(new SearchScrollRequestBuilder(client,\n-                    SearchScrollAction.INSTANCE, (String) scrollHint.getParams()[0])\n-                    .setScroll(new TimeValue((Integer) scrollHint.getParams()[1])));\n-        }\n+        Objects.requireNonNull(this.sqlRequest, \"SqlRequest is required for ES request build\");\n+        buildRequest();\n+        checkAndSetScroll();\n+        return new SqlElasticSearchRequestBuilder(request);\n+    }\n \n+    private void buildRequest() throws SqlParseException {\n         this.request = new SearchRequestBuilder(client, SearchAction.INSTANCE);\n         setIndicesAndTypes();\n-\n         setFields(select.getFields());\n         setWhere(select.getWhere());\n         setSorts(select.getOrderBys());\n-        setLimit(select.getOffset(), select.getRowCount());\n-\n-        if (scrollHint != null) {\n-            if (!select.isOrderdSelect()) {\n-                request.addSort(FieldSortBuilder.DOC_FIELD_NAME, SortOrder.ASC);\n-            }\n-            request.setSize((Integer) scrollHint.getParams()[0])\n-                    .setScroll(new TimeValue((Integer) scrollHint.getParams()[1]));\n-        } else {\n-            request.setSearchType(SearchType.DFS_QUERY_THEN_FETCH);\n-        }\n         updateRequestWithIndexAndRoutingOptions(select, request);\n         updateRequestWithHighlight(select, request);\n         updateRequestWithCollapse(select, request);\n         updateRequestWithPostFilter(select, request);\n         updateRequestWithInnerHits(select, request);\n+    }\n \n-        return new SqlElasticSearchRequestBuilder(request);\n+    private void checkAndSetScroll() {", "originalCommit": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MzIyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406383221", "bodyText": "Will add unit test for this.", "author": "abbashus", "createdAt": "2020-04-09T18:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDI5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407000297", "bodyText": "Added.", "author": "abbashus", "createdAt": "2020-04-11T01:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMTY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDkwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406334901", "bodyText": "Two concerns.\n\nThe execute method is almost as same as CursorResultExecutor.execute, only difference is the LOG.error. Is it possible to avoid the duplication.\nIn case we already define the Curser, could we construct CursorCloseExecutor by using cursor and encapsulate the Cursor construct operation in CursorFactory?", "author": "penghuo", "createdAt": "2020-04-09T16:41:23Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorCloseExecutor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.json.JSONException;\n+\n+import java.util.Map;\n+\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorCloseExecutor implements CursorRestExecutor {\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorCloseExecutor.class);\n+\n+    private static final String SUCCEEDED_TRUE = \"{\\\"succeeded\\\":true}\";\n+    private static final String SUCCEEDED_FALSE = \"{\\\"succeeded\\\":false}\";\n+\n+    private String cursorId;\n+\n+    public CursorCloseExecutor(String cursorId) {\n+        this.cursorId = cursorId;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {", "originalCommit": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MjkyOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406382928", "bodyText": "Sure, will give a shot to refactor as described.", "author": "abbashus", "createdAt": "2020-04-09T18:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODYzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407598631", "bodyText": "Keeping it as it now, little tricky to refactor.", "author": "abbashus", "createdAt": "2020-04-13T17:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxMTYxMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407611612", "bodyText": "In my opinion, the cursor format \":\" which should be encapsulated to Cursor implementation and should not been exposed to caller.\nWe can leave it for now for time consideration, Please consider add UT to cover the logic in CursorCloseExecutor and CursorResultExecutor. If possible, add the issue to tracking the refactoring.", "author": "penghuo", "createdAt": "2020-04-13T17:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxODgyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407618829", "bodyText": "#426.\nAdding UTs.", "author": "abbashus", "createdAt": "2020-04-13T17:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MTM2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406341369", "bodyText": "In case of rowsLeft = 0, we still include the newScrollId in response?", "author": "penghuo", "createdAt": "2020-04-09T16:52:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }\n+\n+        String type = splittedCursor[0];\n+        CursorType cursorType = CursorType.getById(type);\n+\n+        if (cursorType!=CursorType.NULL) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    DefaultCursor defaultCursor = DefaultCursor.from(splittedCursor[1]);\n+                    return handleDefaultCursorRequest(client, defaultCursor);\n+                case AGGREGATION:\n+                case JOIN:\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Not able to parse invalid cursor\");\n+    }\n+\n+    private String handleDefaultCursorRequest(Client client, DefaultCursor cursor) {\n+        String previousScrollId = cursor.getScrollId();\n+        LocalClusterState clusterState = LocalClusterState.state();\n+        TimeValue scrollTimeout = clusterState.getSettingValue(CURSOR_KEEPALIVE);\n+        SearchResponse scrollResponse = client.prepareSearchScroll(previousScrollId).setScroll(scrollTimeout).get();\n+        SearchHits searchHits = scrollResponse.getHits();\n+        SearchHit[] searchHitArray = searchHits.getHits();\n+        String newScrollId = scrollResponse.getScrollId();\n+\n+        int rowsLeft = (int) cursor.getRowsLeft();\n+        int fetch = cursor.getFetchSize();\n+\n+        if (rowsLeft < fetch && rowsLeft < searchHitArray.length) {\n+            /**\n+             * This condition implies we are on the last page, and we might need to truncate the result from SearchHit[]\n+             * Avoid truncating in following two scenarios\n+             * 1. number of rows to be sent equals fetchSize\n+             * 2. size of SearchHit[] is already less that rows that needs to be sent\n+             *\n+             * Else truncate to desired number of rows\n+             */\n+            SearchHit[] newSearchHits = Arrays.copyOf(searchHitArray, rowsLeft);\n+            searchHits = new SearchHits(newSearchHits, searchHits.getTotalHits(), searchHits.getMaxScore());\n+        }\n+\n+        rowsLeft = rowsLeft - fetch;\n+\n+        if (rowsLeft <=0) {\n+            /** Clear the scroll context on last page */\n+            ClearScrollResponse clearScrollResponse = client.prepareClearScroll().addScrollId(newScrollId).get();\n+            if (!clearScrollResponse.isSucceeded()) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+                LOG.info(\"Error closing the cursor context {} \", newScrollId);\n+            }\n+        }\n+\n+        cursor.setRowsLeft(rowsLeft);\n+        cursor.setScrollId(newScrollId);", "originalCommit": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NjE2MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406376160", "bodyText": "No, as part of cursor generation if rowsleft <=0 the cursor is set to null, and thus omitted from response. See DefaultCursor.generateId().  The code was structured like this to avoid if...else condition and the final logic to generate cursor id delegated to implementing class.", "author": "abbashus", "createdAt": "2020-04-09T17:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MTM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MjU0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406342542", "bodyText": "minor: consider to use Lombok to auto generate get/set method.", "author": "penghuo", "createdAt": "2020-04-09T16:54:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/cursor/DefaultCursor.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Schema;\n+import com.google.common.base.Strings;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+\n+/**\n+ * Minimum metdata that will be serialized for generating cursorId for\n+ * SELECT .... FROM .. ORDER BY .... queries\n+ */\n+public class DefaultCursor implements Cursor {\n+\n+    /** Make sure all keys are unique to prevent overriding\n+     * and as small as possible to make cursor compact\n+     */\n+    private static final String FETCH_SIZE = \"f\";\n+    private static final String ROWS_LEFT = \"l\";\n+    private static final String INDEX_PATTERN = \"i\";\n+    private static final String SCROLL_ID = \"s\";\n+    private static final String SCHEMA_COLUMNS = \"c\";\n+    private static final String FIELD_ALIAS_MAP = \"a\";\n+\n+    /** To get mappings for index to check if type is date needed for\n+     * @see com.amazon.opendistroforelasticsearch.sql.executor.format.DateFieldFormatter */\n+    private String indexPattern;\n+\n+    /** List of Schema.Column for maintaining field order and generating null values of missing fields */\n+    private List<Schema.Column> columns;\n+\n+    /** To delegate to correct cursor handler to get next page*/\n+    private final CursorType type = CursorType.DEFAULT;\n+\n+    /**\n+     * Truncate the @see DataRows to respect LIMIT clause and/or to identify last page to close scroll context.\n+     * docsLeft is decremented by fetch_size for call to get page of result.\n+     */\n+    private long rowsLeft;\n+\n+    /** @see com.amazon.opendistroforelasticsearch.sql.executor.format.SelectResultSet */\n+    private Map<String, String> fieldAliasMap;\n+\n+    /** To get next batch of result */\n+    private String scrollId;\n+\n+    /** To reduce the number of rows left by fetchSize */\n+    private Integer fetchSize;\n+\n+\n+    private Integer limit;\n+\n+    @Override\n+    public CursorType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String generateCursorId() {\n+        if (rowsLeft <=0 || Strings.isNullOrEmpty(scrollId)) {\n+            return null;\n+        }\n+        JSONObject json = new JSONObject();\n+        json.put(FETCH_SIZE, fetchSize);\n+        json.put(ROWS_LEFT, rowsLeft);\n+        json.put(INDEX_PATTERN, indexPattern);\n+        json.put(SCROLL_ID, scrollId);\n+        json.put(SCHEMA_COLUMNS, getSchemaAsJson());\n+        json.put(FIELD_ALIAS_MAP, fieldAliasMap);\n+        return String.format(\"%s:%s\", type.getId(), encodeCursor(json));\n+    }\n+\n+    public static DefaultCursor from(String cursorId) {\n+        /**\n+         * It is assumed that cursorId here is the second part of the original cursor passed\n+         * by the client after removing first part which identifies cursor type\n+         */\n+         JSONObject json = decodeCursor(cursorId);\n+         DefaultCursor cursor = new DefaultCursor();\n+         cursor.setFetchSize(json.getInt(FETCH_SIZE));\n+         cursor.setRowsLeft(json.getLong(ROWS_LEFT));\n+         cursor.setIndexPattern(json.getString(INDEX_PATTERN));\n+         cursor.setScrollId(json.getString(SCROLL_ID));\n+         cursor.setColumns(getColumnsFromSchema(json.getJSONArray(SCHEMA_COLUMNS)));\n+         cursor.setFieldAliasMap(fieldAliasMap(json.getJSONObject(FIELD_ALIAS_MAP)));\n+\n+         return cursor;\n+    }\n+\n+\n+    public String getIndexPattern() {", "originalCommit": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MjQzMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406382432", "bodyText": "Sure, will consider using Lombok.", "author": "abbashus", "createdAt": "2020-04-09T18:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MjU0Mg=="}], "type": "inlineReview"}, {"oid": "579d12cefd8758c43badac119b6a14194ab4b692", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/579d12cefd8758c43badac119b6a14194ab4b692", "message": "Add Lombok for DefaultCursor", "committedDate": "2020-04-09T19:22:44Z", "type": "commit"}, {"oid": "3ef6d7a840e9a173e49d08fb4434959690967d05", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3ef6d7a840e9a173e49d08fb4434959690967d05", "message": "Add unit test for DefaultCursor", "committedDate": "2020-04-09T20:21:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyODk5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406528995", "bodyText": "Could you add some JavaDoc here?", "author": "dai-chen", "createdAt": "2020-04-09T23:22:52Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/cursor/CursorType.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.cursor;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public enum CursorType {", "originalCommit": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzg1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406533856", "bodyText": "Any chance to reuse AsyncRestExecutor? I don't see any special logic here and you can make AsyncRestExecutor async all cursor request.\n    AsyncRestExecutor(RestExecutor executor) {\n        this(executor, ALL_ACTION_IS_BLOCKING);\n    }", "author": "dai-chen", "createdAt": "2020-04-09T23:41:10Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorAsyncRestExecutor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.query.join.BackOffRetryStrategy;\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.QUERY_SLOWLOG;\n+\n+public class CursorAsyncRestExecutor {", "originalCommit": "63868ec5991b1849ca1b40eadf1a0b46572d225a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzOTE1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r406539157", "bodyText": "Sure, will give a shot.", "author": "abbashus", "createdAt": "2020-04-10T00:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NTQxMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407595410", "bodyText": "Not straightforward to use AsyncRestExecutor here. AsyncRestExecutor requires using QueryAction, which we don't have for Cursor request.  Keeping it as it is for now.", "author": "abbashus", "createdAt": "2020-04-13T17:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzg1Ng=="}], "type": "inlineReview"}, {"oid": "cafa9d93846f132e561efbc924a33ebc5b055269", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cafa9d93846f132e561efbc924a33ebc5b055269", "message": "Update doc", "committedDate": "2020-04-10T19:48:18Z", "type": "commit"}, {"oid": "06be5e537617525b440ca4c6a0da78aa07f46810", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/06be5e537617525b440ca4c6a0da78aa07f46810", "message": "Unit tests, bug fix , refactoring", "committedDate": "2020-04-11T01:19:14Z", "type": "commit"}, {"oid": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-04-11T01:27:39Z", "type": "commit"}, {"oid": "14d2b7c9be30398188705911e319b055a511239f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/14d2b7c9be30398188705911e319b055a511239f", "message": "Updates", "committedDate": "2020-04-13T17:30:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzMwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407593303", "bodyText": "Where is this used?", "author": "dai-chen", "createdAt": "2020-04-13T17:09:25Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/cursor/DefaultCursor.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Schema;\n+import com.google.common.base.Strings;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+\n+/**\n+ * Minimum metdata that will be serialized for generating cursorId for\n+ * SELECT .... FROM .. ORDER BY .... queries\n+ */\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class DefaultCursor implements Cursor {\n+\n+    /** Make sure all keys are unique to prevent overriding\n+     * and as small as possible to make cursor compact\n+     */\n+    private static final String FETCH_SIZE = \"f\";\n+    private static final String ROWS_LEFT = \"l\";\n+    private static final String INDEX_PATTERN = \"i\";\n+    private static final String SCROLL_ID = \"s\";\n+    private static final String SCHEMA_COLUMNS = \"c\";\n+    private static final String FIELD_ALIAS_MAP = \"a\";\n+\n+    /** To get mappings for index to check if type is date needed for\n+     * @see com.amazon.opendistroforelasticsearch.sql.executor.format.DateFieldFormatter */\n+    @NonNull\n+    private String indexPattern;\n+\n+    /** List of Schema.Column for maintaining field order and generating null values of missing fields */\n+    @NonNull\n+    private List<Schema.Column> columns;\n+\n+    /** To delegate to correct cursor handler to get next page*/\n+    private final CursorType type = CursorType.DEFAULT;\n+\n+    /**\n+     * Truncate the @see DataRows to respect LIMIT clause and/or to identify last page to close scroll context.\n+     * docsLeft is decremented by fetch_size for call to get page of result.\n+     */\n+    private long rowsLeft;\n+\n+    /** @see com.amazon.opendistroforelasticsearch.sql.executor.format.SelectResultSet */\n+    @NonNull\n+    private Map<String, String> fieldAliasMap;\n+\n+    /** To get next batch of result */\n+    private String scrollId;\n+\n+    /** To reduce the number of rows left by fetchSize */\n+    @NonNull\n+    private Integer fetchSize;\n+\n+    private Integer limit;", "originalCommit": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyOTM2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407629365", "bodyText": "Used to pass limit from PrettyFormatExecutor-> Protocol -> SelectResultSet", "author": "abbashus", "createdAt": "2020-04-13T18:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMDM3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407600375", "bodyText": "Is it possible that more colons present in Base64 encoded string after first colon? ex. colon in field name selected. If so could we only split the whole string by first colon found?", "author": "dai-chen", "createdAt": "2020-04-13T17:22:17Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }", "originalCommit": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMzg4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407633889", "bodyText": "Is it possible that more colons present in Base64 encoded string after first colon?\n\nNo possible as whole string after first : is Base64 encoded.\n\nIf so could we only split the whole string by first colon found?\n\nSure, will change to  cursorId.split(\":\", 2)", "author": "abbashus", "createdAt": "2020-04-13T18:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMDM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMjg1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407602856", "bodyText": "To simplify the logic and handle all invalid cursor (ex. helloworld:..., I think this should be handled in the switch too.\nswitch (cursorType) {\n    case DEFAULT: return ...\n    case AGGREGATION or JOIN: throw unsupported feature exception with cursor type\n    default: throw verification exception with cursor type\n}", "author": "dai-chen", "createdAt": "2020-04-13T17:26:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }\n+\n+        String type = splittedCursor[0];\n+        CursorType cursorType = CursorType.getById(type);\n+\n+        if (cursorType!=CursorType.NULL) {", "originalCommit": "72cbe34e8b86f6d9698e8e1a688b305b3e5709e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NjE0MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407696140", "bodyText": "Done.", "author": "abbashus", "createdAt": "2020-04-13T20:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMjg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxMjg4OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407612888", "bodyText": "I think you can pass a number, say limit, to your new added Protocol constructor to skip unwanted rows when generating  response. Then you don't need to create and copy to another array which may be costly.", "author": "dai-chen", "createdAt": "2020-04-13T17:44:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/cursor/CursorResultExecutor.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.cursor;\n+\n+import com.amazon.opendistroforelasticsearch.sql.cursor.CursorType;\n+import com.amazon.opendistroforelasticsearch.sql.cursor.DefaultCursor;\n+import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;\n+import com.amazon.opendistroforelasticsearch.sql.executor.Format;\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.Protocol;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.MetricName;\n+import com.amazon.opendistroforelasticsearch.sql.metrics.Metrics;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.matchtoterm.VerificationException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.ClearScrollResponse;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestChannel;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.json.JSONException;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.plugin.SqlSettings.CURSOR_KEEPALIVE;\n+import static org.elasticsearch.rest.RestStatus.OK;\n+\n+public class CursorResultExecutor implements CursorRestExecutor {\n+\n+    private String cursorId;\n+    private Format format;\n+\n+    private static final Logger LOG = LogManager.getLogger(CursorResultExecutor.class);\n+\n+    public CursorResultExecutor(String cursorId, Format format) {\n+        this.cursorId = cursorId;\n+        this.format = format;\n+    }\n+\n+    public void execute(Client client, Map<String, String> params, RestChannel channel) throws Exception {\n+        try {\n+            String formattedResponse = execute(client, params);\n+            channel.sendResponse(new BytesRestResponse(OK, \"application/json; charset=UTF-8\", formattedResponse));\n+        } catch (IllegalArgumentException | JSONException e) {\n+            Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            LOG.error(\"Error parsing the cursor\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        } catch (ElasticsearchException e) {\n+            int status = (e.status().getStatus());\n+            if (status > 399 && status < 500) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_CUS).increment();\n+            } else if (status > 499) {\n+                Metrics.getInstance().getNumericalMetric(MetricName.FAILED_REQ_COUNT_SYS).increment();\n+            }\n+            LOG.error(\"Error completing cursor request\", e);\n+            channel.sendResponse(new BytesRestResponse(channel, e));\n+        }\n+    }\n+\n+    public String execute(Client client, Map<String, String> params) throws Exception {\n+        /**\n+         * All cursor's are of the form <cursorType>:<base64 encoded cursor>\n+         * The serialized form before encoding is upto Cursor implementation\n+         */\n+        String[] splittedCursor = cursorId.split(\":\");\n+\n+        if (splittedCursor.length!=2) {\n+            throw new VerificationException(\"Not able to parse invalid cursor\");\n+        }\n+\n+        String type = splittedCursor[0];\n+        CursorType cursorType = CursorType.getById(type);\n+\n+        if (cursorType!=CursorType.NULL) {\n+            switch(cursorType) {\n+                case DEFAULT:\n+                    DefaultCursor defaultCursor = DefaultCursor.from(splittedCursor[1]);\n+                    return handleDefaultCursorRequest(client, defaultCursor);\n+                case AGGREGATION:\n+                case JOIN:\n+                default: throw new VerificationException(\"Unsupported cursor\");\n+            }\n+        }\n+\n+        throw new VerificationException(\"Not able to parse invalid cursor\");\n+    }\n+\n+    private String handleDefaultCursorRequest(Client client, DefaultCursor cursor) {\n+        String previousScrollId = cursor.getScrollId();\n+        LocalClusterState clusterState = LocalClusterState.state();\n+        TimeValue scrollTimeout = clusterState.getSettingValue(CURSOR_KEEPALIVE);\n+        SearchResponse scrollResponse = client.prepareSearchScroll(previousScrollId).setScroll(scrollTimeout).get();\n+        SearchHits searchHits = scrollResponse.getHits();\n+        SearchHit[] searchHitArray = searchHits.getHits();\n+        String newScrollId = scrollResponse.getScrollId();\n+\n+        int rowsLeft = (int) cursor.getRowsLeft();\n+        int fetch = cursor.getFetchSize();\n+\n+        if (rowsLeft < fetch && rowsLeft < searchHitArray.length) {\n+            /**\n+             * This condition implies we are on the last page, and we might need to truncate the result from SearchHit[]\n+             * Avoid truncating in following two scenarios\n+             * 1. number of rows to be sent equals fetchSize\n+             * 2. size of SearchHit[] is already less that rows that needs to be sent\n+             *\n+             * Else truncate to desired number of rows\n+             */\n+            SearchHit[] newSearchHits = Arrays.copyOf(searchHitArray, rowsLeft);\n+            searchHits = new SearchHits(newSearchHits, searchHits.getTotalHits(), searchHits.getMaxScore());\n+        }", "originalCommit": "14d2b7c9be30398188705911e319b055a511239f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0MjI3MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407642270", "bodyText": "Good suggestion, will do, wasn't apparent initially.", "author": "abbashus", "createdAt": "2020-04-13T18:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxMjg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1NTQ2NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407655464", "bodyText": "I realized that though we can skip unwanted DataRows.Row using limit, but this will apply to final flattened row, and will impact correctness result for nested queries.\nFor example:\nIf the final page has rowLeft as 2, implying two un-nested doc, and assuming each doc has atleast 3 nested docs. If use above logic there will be 2 Row, instead of 8 that we expect.", "author": "abbashus", "createdAt": "2020-04-13T19:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxMjg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxNzQ0NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407617444", "bodyText": "I think NullCursor could be a constant in Cursor interface and no need to create every time.", "author": "dai-chen", "createdAt": "2020-04-13T17:52:57Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/PrettyFormatRestExecutor.java", "diffHunk": "@@ -81,4 +91,29 @@ public String execute(Client client, Map<String, String> params, QueryAction que\n \n         return protocol.format();\n     }\n+\n+    /**\n+     * QueryActionElasticExecutor.executeAnyAction() returns SearchHits inside SearchResponse.\n+     * In order to get scroll ID if any, we need to execute DefaultQueryAction ourselves for SearchResponse.\n+     */\n+    private Protocol buildProtocolForDefaultQuery(Client client, DefaultQueryAction queryAction)\n+            throws SqlParseException {\n+\n+        SearchResponse response = (SearchResponse) queryAction.explain().get();\n+        String scrollId = response.getScrollId();\n+\n+        Protocol protocol;\n+        if (!Strings.isNullOrEmpty(scrollId)) {\n+            DefaultCursor defaultCursor = new DefaultCursor();\n+            defaultCursor.setScrollId(scrollId);\n+            defaultCursor.setLimit(queryAction.getSelect().getRowCount());\n+            defaultCursor.setFetchSize(queryAction.getSqlRequest().fetchSize());\n+            protocol = new Protocol(client, queryAction, response.getHits(), format, defaultCursor);\n+        } else {\n+            NullCursor nullCursor = new NullCursor();", "originalCommit": "14d2b7c9be30398188705911e319b055a511239f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMTUwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407621503", "bodyText": "Why not just change existing format and outputInJdbcFormat? I think ideally we should have single interface method in Protocol.", "author": "dai-chen", "createdAt": "2020-04-13T17:59:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -153,6 +182,30 @@ private String outputInTableFormat() {\n         return null;\n     }\n \n+    public String cursorFormat() {", "originalCommit": "14d2b7c9be30398188705911e319b055a511239f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NTk5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407695996", "bodyText": "True, ideally we should have single interface method in Protocol, but not doing it here for two reasons:\n\nWe don't support non-JDBC format for cursor.\nAlso protocol is different for cursor result  either datarows or datarows + cursor.\n\nWe can do a check to know if first page or subsequent pages, but the code does not turn out to be clean.", "author": "abbashus", "createdAt": "2020-04-13T20:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNzQ4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407637485", "bodyText": "I saw this cursor populate logic and scroll close logic in both here and CursorResultExecutor. Is it due to different code path?", "author": "dai-chen", "createdAt": "2020-04-13T18:29:00Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/SelectResultSet.java", "diffHunk": "@@ -525,20 +579,66 @@ private void extractData() {\n \n             this.rows = populateRows(searchHits);\n             this.size = rows.size();\n-            this.totalHits = Math.max(size, // size may be greater than totalHits after nested rows be flatten\n-                    Optional.ofNullable(searchHits.getTotalHits()).map(th -> th.value)\n-                            .orElse(0L));\n-\n+            this.internalTotalHits = Optional.ofNullable(searchHits.getTotalHits()).map(th -> th.value).orElse(0L);\n+            // size may be greater than totalHits after nested rows be flatten\n+            this.totalHits = Math.max(size, internalTotalHits);\n         } else if (queryResult instanceof Aggregations) {\n             Aggregations aggregations = (Aggregations) queryResult;\n \n             this.rows = populateRows(aggregations);\n             this.size = rows.size();\n+            this.internalTotalHits = size;\n             // Total hits is not available from Aggregations so 'size' is used\n             this.totalHits = size;\n         }\n     }\n \n+    private void populateCursor() {\n+        switch(cursor.getType()) {\n+            case DEFAULT:\n+                populateDefaultCursor((DefaultCursor) cursor);\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private void populateDefaultCursor(DefaultCursor cursor) {\n+        /**\n+         * Assumption: scrollId, fetchSize, limit already being set in\n+         * @see PrettyFormatRestExecutor.buildProtocolForDefaultQuery()\n+         */\n+\n+        Integer limit = cursor.getLimit();\n+        long rowsLeft = rowsLeft(cursor.getFetchSize(), cursor.getLimit());\n+        if (rowsLeft <= 0) {", "originalCommit": "14d2b7c9be30398188705911e319b055a511239f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzODg3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/390#discussion_r407638872", "bodyText": "Yes, this logic is for first page request.", "author": "abbashus", "createdAt": "2020-04-13T18:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNzQ4NQ=="}], "type": "inlineReview"}, {"oid": "32bbfe52e9b1333d621aa15bb2ac96a31cb54c9d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/32bbfe52e9b1333d621aa15bb2ac96a31cb54c9d", "message": "Merge branch 'master' into cursor-one", "committedDate": "2020-04-13T20:04:14Z", "type": "commit"}, {"oid": "e5f344b73ad7caf7445978369a00095a95b5367c", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e5f344b73ad7caf7445978369a00095a95b5367c", "message": "Address comments", "committedDate": "2020-04-13T20:04:45Z", "type": "commit"}]}