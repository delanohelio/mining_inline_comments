{"pr_number": 540, "pr_title": "Support mathematical functions ceil/ceiling, exp, floor, ln, log", "pr_createdAt": "2020-06-29T23:11:37Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540", "timeline": [{"oid": "c316dfcc183255ba94a30dd551fa818143ec4a3a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c316dfcc183255ba94a30dd551fa818143ec4a3a", "message": "Support ceil/ceiling, exact, exp, floor, ln, log functions", "committedDate": "2020-06-29T20:10:54Z", "type": "commit"}, {"oid": "69ed20c556d36e9f874bd1b290465895d9486fec", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/69ed20c556d36e9f874bd1b290465895d9486fec", "message": "Added integ test cases", "committedDate": "2020-06-29T22:56:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDc5OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r447314798", "bodyText": "np: can all these methods reuse a method like FunctionExpression  compile(BuiltinFunctionName name, Expression...exprs)", "author": "dai-chen", "createdAt": "2020-06-29T23:24:48Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/DSL.java", "diffHunk": "@@ -58,6 +58,38 @@ public FunctionExpression abs(Environment<Expression, ExprType> env, Expression.\n         repository.compile(BuiltinFunctionName.ABS.getName(), Arrays.asList(expressions), env);\n   }\n \n+  public FunctionExpression ceil(Environment<Expression, ExprType> env, Expression... expressions) {\n+    return (FunctionExpression)\n+        repository.compile(BuiltinFunctionName.CEIL.getName(), Arrays.asList(expressions), env);", "originalCommit": "69ed20c556d36e9f874bd1b290465895d9486fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA4OTg2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r453089866", "bodyText": "Done", "author": "chloe-zh", "createdAt": "2020-07-10T21:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMDg5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r447830897", "bodyText": "What's the difference between this new method and binaryOperator() above?", "author": "dai-chen", "createdAt": "2020-06-30T16:46:38Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/OperatorUtils.java", "diffHunk": "@@ -104,6 +104,57 @@ public String toString() {\n         };\n   }\n \n+  /**\n+   * Construct {@link FunctionBuilder} which call function with arguments produced by observer1 and\n+   * observer2 In general, if any operand evaluates to a MISSING value, the enclosing operator will\n+   * return MISSING; if none of operands evaluates to a MISSING value but there is an operand\n+   * evaluates to a NULL value, the enclosing operator will return NULL.\n+   *\n+   * @param functionName function name\n+   * @param function     {@link BiFunction}\n+   * @param observer1    extract the value of type T from the first argument\n+   * @param observer2    extract the value of type U from the second argument\n+   * @param returnType   return type\n+   * @param <T>          the type of the first argument to the function\n+   * @param <U>          the type of the second argument to the function\n+   * @param <R>          the type of the result of the function\n+   * @return {@link FunctionBuilder}\n+   */\n+  public static <T, U, R> FunctionBuilder doubleArgFunc(", "originalCommit": "69ed20c556d36e9f874bd1b290465895d9486fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3MDU5NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r451770594", "bodyText": "only the toString method is different, for example operator add with args a and b is to a + b, and function log with the args is to log(a, b)", "author": "chloe-zh", "createdAt": "2020-07-08T19:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMDg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MTA0MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r453071040", "bodyText": "Okay. For now toString seems being used for column name in response, I think we can treat arithmetic and function toString same way later when column name is retrieved in other way.", "author": "dai-chen", "createdAt": "2020-07-10T20:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMDg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMjI2MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r447832260", "bodyText": "Exact same as ceil()?", "author": "dai-chen", "createdAt": "2020-06-30T16:48:49Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.operator.arthmetic;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.operator.OperatorUtils.doubleArgFunc;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.operator.OperatorUtils.unaryOperator;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.BuiltinFunctionRepository;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionResolver;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionSignature;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+public class MathematicalFunction {\n+  /**\n+   * Register Mathematical Functions.\n+   *\n+   * @param repository {@link BuiltinFunctionRepository}.\n+   */\n+  public static void register(BuiltinFunctionRepository repository) {\n+    repository.register(abs());\n+    repository.register(ceil());\n+    repository.register(ceiling());\n+    repository.register(exp());\n+    repository.register(floor());\n+    repository.register(ln());\n+    repository.register(log());\n+  }\n+\n+  /**\n+   * Definition of abs() function.\n+   * The supported signature of abs() function are\n+   * INT -> INT\n+   * LONG -> LONG\n+   * FLOAT -> FLOAT\n+   * DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver abs() {\n+    return new FunctionResolver(\n+        BuiltinFunctionName.ABS.getName(),\n+        singleArgumentFunction(\n+            BuiltinFunctionName.ABS.getName(), Math::abs, Math::abs, Math::abs, Math::abs));\n+  }\n+\n+  /**\n+   * Definition of ceil(x)/ceiling(x) function.\n+   * Calculate the next highest integer that x rounds up to\n+   * The supported signature of ceil/ceiling function is\n+   * DOUBLE -> LONG\n+   */\n+  private static FunctionResolver ceil() {\n+    FunctionName functionName = BuiltinFunctionName.CEIL.getName();\n+    return new FunctionResolver(\n+        BuiltinFunctionName.CEIL.getName(),\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName, Arrays.asList(ExprType.DOUBLE)),\n+                unaryOperator(\n+                    functionName, v -> ((long) Math.ceil(v)), ExprValueUtils::getDoubleValue,\n+                    ExprType.LONG))\n+            .build());\n+  }\n+\n+  private static FunctionResolver ceiling() {\n+    FunctionName functionName = BuiltinFunctionName.CEILING.getName();\n+    return new FunctionResolver(\n+        BuiltinFunctionName.CEILING.getName(),\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName, Arrays.asList(ExprType.DOUBLE)),\n+                unaryOperator(\n+                    functionName, v -> ((long) Math.ceil(v)), ExprValueUtils::getDoubleValue,\n+                    ExprType.LONG))\n+            .build());", "originalCommit": "69ed20c556d36e9f874bd1b290465895d9486fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3MDgwNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r451770804", "bodyText": "Yes the same function but with different registered name", "author": "chloe-zh", "createdAt": "2020-07-08T19:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMjI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5NzU3OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r451797578", "bodyText": "I see. I think we can refactor these kind of similar function family later by generating from same method with different argument, such as substr and substring, log and log2 etc.", "author": "dai-chen", "createdAt": "2020-07-08T20:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMjI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNjEyNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r447836126", "bodyText": "For assertion on floating-point number, please check if we're using matcher like isCloseTo() to avoid precision problem.", "author": "dai-chen", "createdAt": "2020-06-30T16:54:48Z", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/MathematicalFunctionIT.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.TestsConstants.TEST_INDEX_BANK;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+\n+import java.io.IOException;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+public class MathematicalFunctionIT extends PPLIntegTestCase {\n+\n+  @Override\n+  public void init() throws IOException {\n+    loadIndex(Index.BANK);\n+    loadIndex(Index.BANK_WITH_NULL_VALUES);\n+  }\n+\n+  @Test\n+  public void testAbs() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | eval f = abs(age) | fields f\", TEST_INDEX_BANK));\n+    verifySchema(result, schema(\"f\", null, \"integer\"));\n+    verifyDataRows(\n+        result,\n+        rows(32), rows(36), rows(28), rows(33), rows(36), rows(39), rows(34));\n+  }\n+\n+  @Test\n+  public void testCeil() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | eval f = ceil(age) | fields f\", TEST_INDEX_BANK));\n+    verifySchema(result, schema(\"f\", null, \"long\"));\n+    verifyDataRows(\n+        result,\n+        rows(32), rows(36), rows(28), rows(33), rows(36), rows(39), rows(34));\n+  }\n+\n+  @Test\n+  public void testExp() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | eval f = exp(age) | fields f\", TEST_INDEX_BANK));\n+    verifySchema(result, schema(\"f\", null, \"double\"));\n+    verifyDataRows(\n+        result, rows(Math.exp(32)), rows(Math.exp(36)), rows(Math.exp(28)), rows(Math.exp(33)),\n+        rows(Math.exp(36)), rows(Math.exp(39)), rows(Math.exp(34)));\n+  }\n+\n+  @Test\n+  public void testFloor() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | eval f = floor(age) | fields f\", TEST_INDEX_BANK));\n+    verifySchema(result, schema(\"f\", null, \"long\"));\n+    verifyDataRows(\n+        result,\n+        rows(32), rows(36), rows(28), rows(33), rows(36), rows(39), rows(34));\n+  }\n+\n+  @Test\n+  public void testLn() throws IOException {\n+    JSONObject result =\n+        executeQuery(\n+            String.format(\n+                \"source=%s | eval f = ln(age) | fields f\", TEST_INDEX_BANK));\n+    verifySchema(result, schema(\"f\", null, \"double\"));\n+    verifyDataRows(\n+        result, rows(Math.log(32)), rows(Math.log(36)), rows(Math.log(28)), rows(Math.log(33)),\n+        rows(Math.log(36)), rows(Math.log(39)), rows(Math.log(34)));", "originalCommit": "69ed20c556d36e9f874bd1b290465895d9486fec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cda07d883b20180de706c1c39cf6b7cb64014684", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cda07d883b20180de706c1c39cf6b7cb64014684", "message": "Merge remote-tracking branch 'upstream/develop' into func-math\n\n# Conflicts:\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/ExpressionTestBase.java", "committedDate": "2020-07-08T19:41:02Z", "type": "commit"}, {"oid": "03d932da33dc7879edd49ff2bb7d903939908176", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/03d932da33dc7879edd49ff2bb7d903939908176", "message": "Set the registration of function name to be case insensitive", "committedDate": "2020-07-08T19:57:28Z", "type": "commit"}, {"oid": "417bbee25364c81d98339316d50c8c93304e7dab", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/417bbee25364c81d98339316d50c8c93304e7dab", "message": "Merge remote-tracking branch 'upstream/develop' into func-math\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/DSL.java\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/UnaryFunction.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/config/TestConfig.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/UnaryFunctionTest.java", "committedDate": "2020-07-08T22:54:41Z", "type": "commit"}, {"oid": "4ebd3608758b27c8cdc1f934a11d67b9fa5fa394", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4ebd3608758b27c8cdc1f934a11d67b9fa5fa394", "message": "Function signature changed consistent with mysql", "committedDate": "2020-07-09T04:28:35Z", "type": "commit"}, {"oid": "a0c3a53a786e15dcff1a0e499b78810742eeef2d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a0c3a53a786e15dcff1a0e499b78810742eeef2d", "message": "Function signature changed consistent with mysql", "committedDate": "2020-07-09T04:41:52Z", "type": "commit"}, {"oid": "7449a07cfb162e61cbee40ae493e7bbdc5d13a9b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7449a07cfb162e61cbee40ae493e7bbdc5d13a9b", "message": "Merge remote-tracking branch 'upstream/develop' into func-math", "committedDate": "2020-07-09T18:00:33Z", "type": "commit"}, {"oid": "5f54cc6a19783508c866fdf678e6a8757996683f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5f54cc6a19783508c866fdf678e6a8757996683f", "message": "Merge remote-tracking branch 'upstream/develop' into func-math", "committedDate": "2020-07-09T19:30:39Z", "type": "commit"}, {"oid": "ff1d3a9e72713cd104edb448da927c4cc8b20bb5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ff1d3a9e72713cd104edb448da927c4cc8b20bb5", "message": "Function signature changed consistent with mysql", "committedDate": "2020-07-10T17:07:25Z", "type": "commit"}, {"oid": "b67245b384cf633ef5ebe52a149881d71be845cb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b67245b384cf633ef5ebe52a149881d71be845cb", "message": "Merge remote-tracking branch 'upstream/develop' into func-math", "committedDate": "2020-07-10T17:12:27Z", "type": "commit"}, {"oid": "01d6f964c0128c56b99e8fd3591affe80c63e67e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/01d6f964c0128c56b99e8fd3591affe80c63e67e", "message": "Added comparison test cases", "committedDate": "2020-07-10T18:42:09Z", "type": "commit"}, {"oid": "520cc968559971cde44fc7c7a6286b6b43a7f643", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/520cc968559971cde44fc7c7a6286b6b43a7f643", "message": "changed matcher to closeto", "committedDate": "2020-07-10T19:18:09Z", "type": "commit"}, {"oid": "529df83c3b0e59fd22b7d37459834df478466f5e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/529df83c3b0e59fd22b7d37459834df478466f5e", "message": "added closeTo matcher", "committedDate": "2020-07-10T21:19:51Z", "type": "commit"}, {"oid": "ef44d0bad611273f85882da34f4e9d7fa1b5bc9b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ef44d0bad611273f85882da34f4e9d7fa1b5bc9b", "message": "Extracted method to compile functions in DSL", "committedDate": "2020-07-10T21:41:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5MzMyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r453093325", "bodyText": "np: allMatch(v -> valuesAreClose...) ?", "author": "dai-chen", "createdAt": "2020-07-10T21:52:23Z", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/util/MatcherUtils.java", "diffHunk": "@@ -239,8 +233,29 @@ protected boolean matchesSafely(JSONArray array) {\n     };\n   }\n \n-  public static IsCloseTo closeTo(Number value) {\n-    return new IsCloseTo(value.doubleValue(), 1e-10);\n+  public static TypeSafeMatcher<JSONArray> closeTo(Number... values) {\n+    final double error = 1e-10;\n+    return new TypeSafeMatcher<JSONArray>() {\n+      @Override\n+      protected boolean matchesSafely(JSONArray item) {\n+        List<Number> expectedValues = new ArrayList<>(Arrays.asList(values));\n+        List<Number> actualValues = new ArrayList<>();\n+        item.iterator().forEachRemaining(v -> actualValues.add((Number) v));\n+        return actualValues.stream()\n+            .map(v -> (valuesAreClose(v, expectedValues.get(actualValues.indexOf(v)))))\n+            .reduce((a, b) -> a && b)\n+            .get();", "originalCommit": "ef44d0bad611273f85882da34f4e9d7fa1b5bc9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMTMxMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/540#discussion_r453111313", "bodyText": "Done, thanks!", "author": "chloe-zh", "createdAt": "2020-07-10T22:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5MzMyNQ=="}], "type": "inlineReview"}, {"oid": "af58dbe04c3120ad0795e8b9bdc2afb7498f0fd7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/af58dbe04c3120ad0795e8b9bdc2afb7498f0fd7", "message": "update", "committedDate": "2020-07-10T22:54:55Z", "type": "commit"}]}