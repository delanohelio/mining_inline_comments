{"pr_number": 577, "pr_title": "Support mathematical functions: conv, crc32, mod, pow/power, round, sign, sqrt, truncate", "pr_createdAt": "2020-07-15T00:03:22Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577", "timeline": [{"oid": "2525facd5fb7248def143cadd0943c238eeb2033", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2525facd5fb7248def143cadd0943c238eeb2033", "message": "supported conv, crc32, mod, pow/power, round, sign, sqrt, truncate functions", "committedDate": "2020-07-14T23:34:25Z", "type": "commit"}, {"oid": "a5d1ab1c8e30811b6bf41e477773a902e1566997", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a5d1ab1c8e30811b6bf41e477773a902e1566997", "message": "Merge branch 'develop' into math2\n\n# Conflicts:\n#\tsql/src/main/antlr/OpenDistroSQLParser.g4", "committedDate": "2020-07-15T00:02:46Z", "type": "commit"}, {"oid": "2066375cd4c819de2d64f2de660c3935572c505e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2066375cd4c819de2d64f2de660c3935572c505e", "message": "update", "committedDate": "2020-07-15T00:43:40Z", "type": "commit"}, {"oid": "2d9cc31818940a1ef851ad84f752684cf66a4b0a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2d9cc31818940a1ef851ad84f752684cf66a4b0a", "message": "added test cases", "committedDate": "2020-07-15T21:39:44Z", "type": "commit"}, {"oid": "ba6d9b17a36d9fed2c9950b3b3f38cad840343a1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ba6d9b17a36d9fed2c9950b3b3f38cad840343a1", "message": "update", "committedDate": "2020-07-15T23:04:08Z", "type": "commit"}, {"oid": "3e15b7b838cd282ade23972e9983dcca31847b80", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3e15b7b838cd282ade23972e9983dcca31847b80", "message": "added integ test cases", "committedDate": "2020-07-16T03:38:07Z", "type": "commit"}, {"oid": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4038f5aeddf3435d3c684fc15bb47858bf5cbccf", "message": "update", "committedDate": "2020-07-16T04:20:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1NTc5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455855797", "bodyText": "Is this case and all others in this IT unable to cover in comparison test?", "author": "dai-chen", "createdAt": "2020-07-16T15:02:49Z", "path": "integ-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/MathematicalFunctionIT.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.sql;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.legacy.plugin.RestSqlAction.QUERY_API_ENDPOINT;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.rows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.schema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifyDataRows;\n+import static com.amazon.opendistroforelasticsearch.sql.util.MatcherUtils.verifySchema;\n+import static com.amazon.opendistroforelasticsearch.sql.util.TestUtils.getResponseBody;\n+\n+import com.amazon.opendistroforelasticsearch.sql.legacy.SQLIntegTestCase;\n+import com.amazon.opendistroforelasticsearch.sql.util.TestUtils;\n+import java.io.IOException;\n+import java.util.Locale;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.RequestOptions;\n+import org.elasticsearch.client.Response;\n+import org.json.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+public class MathematicalFunctionIT extends SQLIntegTestCase {\n+\n+  @Override\n+  public void init() throws Exception {\n+    super.init();\n+    TestUtils.enableNewQueryEngine(client());\n+  }\n+\n+  @Test\n+  public void testConv() throws IOException {\n+    JSONObject result = executeQuery(\"select conv(11, 10, 16)\");\n+    verifySchema(result, schema(\"conv(11, 10, 16)\", null, \"string\"));\n+    verifyDataRows(result, rows(\"b\"));\n+\n+    result = executeQuery(\"select conv(11, 16, 10)\");\n+    verifySchema(result, schema(\"conv(11, 16, 10)\", null, \"string\"));\n+    verifyDataRows(result, rows(\"17\"));\n+  }\n+\n+  @Test\n+  public void testCrc32() throws IOException {\n+    JSONObject result = executeQuery(\"select crc32('MySQL')\");\n+    verifySchema(result, schema(\"crc32(\\\"MySQL\\\")\", null, \"long\"));\n+    verifyDataRows(result, rows(3259397556L));\n+  }\n+\n+  @Test\n+  public void testMod() throws IOException {\n+    JSONObject result = executeQuery(\"select mod(3, 2)\");\n+    verifySchema(result, schema(\"mod(3, 2)\", null, \"integer\"));\n+    verifyDataRows(result, rows(1));\n+\n+    result = executeQuery(\"select mod(3.1, 2)\");\n+    verifySchema(result, schema(\"mod(3.1, 2)\", null, \"double\"));\n+    verifyDataRows(result, rows(1.1));\n+  }\n+\n+  @Test\n+  public void testRound() throws IOException {\n+    JSONObject result = executeQuery(\"select round(56.78)\");\n+    verifySchema(result, schema(\"round(56.78)\", null, \"double\"));\n+    verifyDataRows(result, rows(57));\n+\n+    result = executeQuery(\"select round(56.78, 1)\");\n+    verifySchema(result, schema(\"round(56.78, 1)\", null, \"double\"));\n+    verifyDataRows(result, rows(56.8));\n+\n+    result = executeQuery(\"select round(56.78, -1)\");\n+    verifySchema(result, schema(\"round(56.78, -1)\", null, \"double\"));\n+    verifyDataRows(result, rows(60));\n+\n+    result = executeQuery(\"select round(-56)\");\n+    verifySchema(result, schema(\"round(-56)\", null, \"long\"));\n+    verifyDataRows(result, rows(-56));\n+\n+    result = executeQuery(\"select round(-56, 1)\");\n+    verifySchema(result, schema(\"round(-56, 1)\", null, \"long\"));\n+    verifyDataRows(result, rows(-56));\n+\n+    result = executeQuery(\"select round(-56, -1)\");\n+    verifySchema(result, schema(\"round(-56, -1)\", null, \"long\"));\n+    verifyDataRows(result, rows(-60));\n+  }\n+\n+  /**\n+   * Test sign function with double value.\n+   */\n+  @Test\n+  public void testSign() throws IOException {", "originalCommit": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDA2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455960065", "bodyText": "the sign function in comparison test is covered by H2, but the schema doesn't match for now", "author": "chloe-zh", "createdAt": "2020-07-16T17:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1NTc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2MDQxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455860415", "bodyText": "Could we use more readable argument name such as (num, fromBase, toBase) -> ?", "author": "dai-chen", "createdAt": "2020-07-16T15:09:07Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -97,6 +110,58 @@ private static FunctionResolver ceiling() {\n             .build());\n   }\n \n+  /**\n+   * Definition of conv(x, a, b) function.\n+   * Convert number x from base a to base b\n+   * The supported signature of floor function is\n+   * (STRING, INTEGER, INTEGER) -> STRING\n+   */\n+  private static FunctionResolver conv() {\n+    FunctionName functionName = BuiltinFunctionName.CONV.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName,\n+                    Arrays.asList(ExprCoreType.STRING, ExprCoreType.INTEGER, ExprCoreType.INTEGER)),\n+                tripleArgFunc(\n+                    functionName, (t, u, v) -> Integer.toString(Integer.parseInt(t, u), v),", "originalCommit": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0NzY1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455947655", "bodyText": "sounds good, will do", "author": "chloe-zh", "createdAt": "2020-07-16T17:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2MDQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455898666", "bodyText": "does mod support LONG and FLOAT?", "author": "penghuo", "createdAt": "2020-07-16T16:02:55Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -182,6 +247,186 @@ private static FunctionResolver log2() {\n         singleArgumentFunction(BuiltinFunctionName.LOG2.getName(), v -> Math.log(v) / Math.log(2)));\n   }\n \n+  /**\n+   * Definition of mod(x, y) function.\n+   * Calculate the remainder of x divided by y\n+   * The supported signature of mod function is\n+   * (INTEGER, INTEGER) -> INTEGER\n+   * (LONG, LONG) -> LONG\n+   * (FLOAT, FLOAT) -> FLOAT\n+   * (DOUBLE, DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver mod() {", "originalCommit": "4038f5aeddf3435d3c684fc15bb47858bf5cbccf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzgzNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455913834", "bodyText": "MySQL seems support float and long? https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_mod\n@chloe-zh Btw, does Java native '%' cover this case in MySQL doc above? \"MOD(N,0) returns NULL.\" I recall our '/' throw divide zero exception which should have returned NULL too.", "author": "dai-chen", "createdAt": "2020-07-16T16:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MzAyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r455983023", "bodyText": "LONG type should be good as says in MySQL manual (as BIGINT), but it doesn't mention about FLOAT.", "author": "chloe-zh", "createdAt": "2020-07-16T18:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NzA5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/577#discussion_r456087097", "bodyText": "@dai-chen Good point! yes currently it also throws arithmetic exception. Will change its behavior to return NULL instead.", "author": "chloe-zh", "createdAt": "2020-07-16T21:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5ODY2Ng=="}], "type": "inlineReview"}, {"oid": "37131cacad08b453d73cb47df95cba80fbafdb2d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/37131cacad08b453d73cb47df95cba80fbafdb2d", "message": "address comments", "committedDate": "2020-07-16T22:15:48Z", "type": "commit"}, {"oid": "aec97aceaa6c1ecdf0f3c4fdeed47b733d12674e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/aec97aceaa6c1ecdf0f3c4fdeed47b733d12674e", "message": "updated java doc, change the behavior of divided by 0, updated sql function doc", "committedDate": "2020-07-16T23:09:00Z", "type": "commit"}, {"oid": "92b7dfd329aa2e0c12d9f596f4db42adab92835e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/92b7dfd329aa2e0c12d9f596f4db42adab92835e", "message": "Merge remote-tracking branch 'upstream/develop' into math2", "committedDate": "2020-07-16T23:09:17Z", "type": "commit"}, {"oid": "76a7f7815fc4572f378e52d446959127a7e85e65", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/76a7f7815fc4572f378e52d446959127a7e85e65", "message": "update", "committedDate": "2020-07-16T23:59:09Z", "type": "commit"}, {"oid": "bc58fe39a7840d0d0a7fec3bfe5a5f7aa7aa79d1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/bc58fe39a7840d0d0a7fec3bfe5a5f7aa7aa79d1", "message": "update", "committedDate": "2020-07-17T05:07:06Z", "type": "commit"}, {"oid": "a8962517dd5359111a3b5a67927e880807e80555", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a8962517dd5359111a3b5a67927e880807e80555", "message": "remove test cases that returns null value in doctest", "committedDate": "2020-07-17T15:12:14Z", "type": "commit"}, {"oid": "b868f74cbceed7be1ef569f97972cdf4fe3b53d6", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b868f74cbceed7be1ef569f97972cdf4fe3b53d6", "message": "added instruction in null value result", "committedDate": "2020-07-17T15:38:48Z", "type": "commit"}]}