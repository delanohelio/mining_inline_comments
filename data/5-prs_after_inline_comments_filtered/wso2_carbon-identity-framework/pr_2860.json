{"pr_number": 2860, "pr_title": "Templates pre-loading with multiple template storage support", "pr_createdAt": "2020-04-09T13:39:05Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2860", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNzU3Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406217572", "bodyText": "remove this method.. The same thing can be done by other method?", "author": "thanujalk", "createdAt": "2020-04-09T13:49:01Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/ReadOnlyTemplateHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler;\n+\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+import org.wso2.carbon.identity.template.mgt.model.TemplateInfo;\n+\n+import java.util.List;\n+\n+public interface ReadOnlyTemplateHandler {\n+\n+    /**\n+     * Return the template given the template id.\n+     *\n+     * @param templateId unique identifier of the template.\n+     * @return template.\n+     * @throws TemplateManagementException if an error occurs while retrieving the template.\n+     */\n+    Template getTemplateById(String templateId) throws TemplateManagementException;\n+\n+    /**\n+     * This method is used to get the names and descriptions of all or filtered existing templates.\n+     *\n+     * @param limit  Number of search results.\n+     * @param offset Start index of the search.\n+     * @return Filtered list of TemplateInfo elements.\n+     * @throws TemplateManagementException Template Management Exception.\n+     * @deprecated use {@link #listTemplates(String, Integer, Integer)} instead.", "originalCommit": "c71b604d981ae4abcede793bc1c9d137c9ee0464", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzODYwNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406238605", "bodyText": "addressed in 26d7233", "author": "AnuradhaSK", "createdAt": "2020-04-09T14:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNzU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMDQ4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406220483", "bodyText": "this is not a error... You just don't have templates. Just print an info log saying no file-based templates.", "author": "thanujalk", "createdAt": "2020-04-09T13:53:15Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,119 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.warn(\"Templates directory not found at \" + path);\n+                throw new FileNotFoundException(\"Templates directory not found at \" + path);", "originalCommit": "c71b604d981ae4abcede793bc1c9d137c9ee0464", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzODcxMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406238712", "bodyText": "addressed in 26d7233", "author": "AnuradhaSK", "createdAt": "2020-04-09T14:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMDQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMDg3Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406220876", "bodyText": "move to the previous line.", "author": "thanujalk", "createdAt": "2020-04-09T13:53:45Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,119 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.warn(\"Templates directory not found at \" + path);\n+                throw new FileNotFoundException(\"Templates directory not found at \" + path);\n+            } else {\n+                try {\n+                    Files.walk(path)\n+                            .filter(filePath -> Files.isRegularFile(filePath) && filePath.toString().endsWith\n+                                    (TemplateMgtConstants\n+                                            .FILE_EXT_JSON))", "originalCommit": "c71b604d981ae4abcede793bc1c9d137c9ee0464", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzOTEwMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406239100", "bodyText": "addressed in 26d7233", "author": "AnuradhaSK", "createdAt": "2020-04-09T14:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMDg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNDQ3OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406224479", "bodyText": "as a practice, please use the constant attribute as the first element. Nothing wrong with the code :) as you are using StringUtils.equals()", "author": "thanujalk", "createdAt": "2020-04-09T13:58:46Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,119 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.warn(\"Templates directory not found at \" + path);\n+                throw new FileNotFoundException(\"Templates directory not found at \" + path);\n+            } else {\n+                try {\n+                    Files.walk(path)\n+                            .filter(filePath -> Files.isRegularFile(filePath) && filePath.toString().endsWith\n+                                    (TemplateMgtConstants\n+                                            .FILE_EXT_JSON))\n+                            .forEach(filePath -> {\n+                                try {\n+                                    String templateJsonString = FileUtils.readFileToString(filePath.toFile());\n+                                    JSONObject templateObj = new JSONObject(templateJsonString);\n+                                    Template template = new Template();\n+\n+                                    template.setTemplateId(templateObj.getString(TemplateMgtConstants.ID));\n+                                    template.setTemplateName(templateObj.getString(TemplateMgtConstants.NAME));\n+                                    template.setDescription(templateObj.getString(TemplateMgtConstants.DESCRIPTION));\n+                                    template.setImageUrl(templateObj.getString(TemplateMgtConstants.IMAGE));\n+\n+                                    if (StringUtils.equals(path.toString(), TemplateMgtConstants", "originalCommit": "c71b604d981ae4abcede793bc1c9d137c9ee0464", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzOTIzNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406239234", "bodyText": "addressed in 26d7233", "author": "AnuradhaSK", "createdAt": "2020-04-09T14:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNDQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNTc0Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406225743", "bodyText": "format this line.", "author": "thanujalk", "createdAt": "2020-04-09T14:00:33Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,119 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.warn(\"Templates directory not found at \" + path);\n+                throw new FileNotFoundException(\"Templates directory not found at \" + path);\n+            } else {\n+                try {\n+                    Files.walk(path)\n+                            .filter(filePath -> Files.isRegularFile(filePath) && filePath.toString().endsWith\n+                                    (TemplateMgtConstants\n+                                            .FILE_EXT_JSON))\n+                            .forEach(filePath -> {\n+                                try {\n+                                    String templateJsonString = FileUtils.readFileToString(filePath.toFile());\n+                                    JSONObject templateObj = new JSONObject(templateJsonString);\n+                                    Template template = new Template();\n+\n+                                    template.setTemplateId(templateObj.getString(TemplateMgtConstants.ID));\n+                                    template.setTemplateName(templateObj.getString(TemplateMgtConstants.NAME));\n+                                    template.setDescription(templateObj.getString(TemplateMgtConstants.DESCRIPTION));\n+                                    template.setImageUrl(templateObj.getString(TemplateMgtConstants.IMAGE));\n+\n+                                    if (StringUtils.equals(path.toString(), TemplateMgtConstants\n+                                            .SP_TEMPLATES_DIR_PATH.toString())) {\n+                                        template.setTemplateType(TemplateMgtConstants.TemplateType\n+                                                .APPLICATION_TEMPLATE);\n+                                        template.setPropertiesMap(extractApplicationSpecificProperties(templateObj));\n+                                        template.setTemplateScript(templateObj.getJSONObject(TemplateMgtConstants\n+                                                .APPLICATION).toString());\n+                                    } else if (StringUtils.equals(path.toString(), TemplateMgtConstants\n+                                            .IDP_TEMPLATES_DIR_PATH.toString())) {\n+                                        template.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n+                                        template.setPropertiesMap(extractIDPSpecificProperties(templateObj));\n+                                        template.setTemplateScript(templateObj.getJSONObject(TemplateMgtConstants\n+                                                .IDP).toString());\n+                                    }\n+                                    //add file based templates to FileBasedTemplates map.\n+                                    getFileBasedTemplates().put(templateObj.getString(TemplateMgtConstants.ID),\n+                                            template);\n+                                } catch (IOException e) {\n+                                    log.error(\"Error while reading  templates.\", e);\n+                                }\n+                            });\n+                } catch (IOException e) {\n+                    log.error(\"Error while reading templates.\", e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private Map<String, String> extractApplicationSpecificProperties(JSONObject templateObj) {\n+\n+        Map<String, String> properties = new HashMap<>();\n+        if (StringUtils.isNotEmpty(templateObj.getString(TemplateMgtConstants.AUTHENTICATION_PROTOCOL))) {\n+            properties.put(TemplateMgtConstants.AUTHENTICATION_PROTOCOL, templateObj.getString(TemplateMgtConstants\n+                    .AUTHENTICATION_PROTOCOL));\n+        }\n+        if (templateObj.getJSONArray(TemplateMgtConstants.TYPES) != null) {\n+            JSONArray typesJSONArray = templateObj.getJSONArray(TemplateMgtConstants.TYPES);\n+            List<String> types = new ArrayList<>();\n+            for (int i = 0; i < typesJSONArray.length(); i++) {\n+                types.add(typesJSONArray.getString(i));\n+            }\n+            properties.put(TemplateMgtConstants.TYPES, String.join(\",\", types));\n+        }\n+        if (StringUtils.isNotEmpty(templateObj.getString(TemplateMgtConstants.CATEGORY))) {\n+            properties.put(TemplateMgtConstants.CATEGORY, templateObj.getString(TemplateMgtConstants.CATEGORY));\n+        }\n+        if (StringUtils.isNotEmpty(String.valueOf(templateObj.getInt(TemplateMgtConstants.DISPLAY_ORDER)))) {\n+            properties.put(TemplateMgtConstants.DISPLAY_ORDER, Integer.toString(templateObj.getInt\n+                    (TemplateMgtConstants.DISPLAY_ORDER)));\n+        }\n+        return properties;\n+    }\n+\n+    private Map<String, String> extractIDPSpecificProperties(JSONObject templateObj) {\n+\n+        Map<String, String> properties = new HashMap<>();\n+        if (StringUtils.isNotEmpty(templateObj.getString(TemplateMgtConstants.PROP_CATEGORY))) {\n+            properties.put(TemplateMgtConstants.PROP_CATEGORY, templateObj.getString(TemplateMgtConstants\n+                    .PROP_CATEGORY));\n+        }\n+        if (StringUtils.isNotEmpty(String.valueOf(templateObj.getInt(TemplateMgtConstants.PROP_DISPLAY_ORDER))\n+        )) {", "originalCommit": "c71b604d981ae4abcede793bc1c9d137c9ee0464", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzOTMzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r406239336", "bodyText": "addressed in 26d7233", "author": "AnuradhaSK", "createdAt": "2020-04-09T14:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNTc0Mw=="}], "type": "inlineReview"}, {"oid": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "url": "https://github.com/wso2/carbon-identity-framework/commit/2d1861ccb642a3ab36a913fc92ca6099452ec366", "message": "Add caching for config store based template handler", "committedDate": "2020-04-13T13:55:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2NzkzNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408567935", "bodyText": "add class level  comment", "author": "emswbandara", "createdAt": "2020-04-15T04:04:48Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/cache/ConfigStoreBasedTemplateCache.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.cache;\n+\n+import org.wso2.carbon.identity.application.common.cache.BaseCache;\n+import org.wso2.carbon.utils.CarbonUtils;\n+\n+public class ConfigStoreBasedTemplateCache extends BaseCache<ConfigStoreBasedTemplateCacheKey,", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NjAxNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408766016", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2NzkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2ODQ0OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408568449", "bodyText": "add new line after method declaration", "author": "emswbandara", "createdAt": "2020-04-15T04:06:53Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerDataHolder.java", "diffHunk": "@@ -41,12 +68,56 @@ public void setConfigurationManager(ConfigurationManager configurationManager) {\n     }\n \n     /**\n-     * Get the ConfigurationManager object held at the data holder.\n+     * Get read write template handler.\n      *\n-     * @return configuration manger object.\n+     * @return template handler.\n      */\n-    public ConfigurationManager getConfigurationManager() {\n+    public TemplateHandler getReadWriteTemplateHandler() {\n \n-        return this.configurationManager;\n+        return readWriteTemplateHandler;\n+    }\n+\n+    /**\n+     * Set read write template handler.\n+     *\n+     * @param readWriteTemplateHandler template handler.\n+     */\n+    public void setReadWriteTemplateHandler(TemplateHandler readWriteTemplateHandler) {\n+\n+        this.readWriteTemplateHandler = readWriteTemplateHandler;\n+    }\n+\n+    /**\n+     * Get template handlers.\n+     *\n+     * @return list of template handlers.\n+     */\n+    public List<ReadOnlyTemplateHandler> getReadOnlyTemplateHandlers() {\n+\n+        return Collections.unmodifiableList(readOnlyTemplateHandlers);\n+    }\n+\n+    /**\n+     * Add template handler.\n+     *\n+     * @param templateHandler template handler.\n+     */\n+    public void addReadOnlyTemplateHandler(ReadOnlyTemplateHandler templateHandler) {\n+\n+        this.readOnlyTemplateHandlers.add(templateHandler);\n+    }\n+\n+    /**\n+     * Remove template handler.\n+     *\n+     * @param templateHandler template handler.\n+     */\n+    public void removeReadOnlyTemplateHandler(ReadOnlyTemplateHandler templateHandler) {\n+\n+        this.readOnlyTemplateHandlers.remove(templateHandler);\n+    }\n+\n+    public static Map<String, Template> getFileBasedTemplates() {", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTk4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765983", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2ODQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NjM2Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408876362", "bodyText": "this method should non-static", "author": "thanujalk", "createdAt": "2020-04-15T14:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2ODQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3Njg3NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408876874", "bodyText": "There should be another method to addFileBasedTemplate()", "author": "thanujalk", "createdAt": "2020-04-15T14:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2ODQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzkxNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408877914", "bodyText": "This should return return Collections.unmodifiableMap(fileBasedTemplates)", "author": "thanujalk", "createdAt": "2020-04-15T14:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2ODQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDYwNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408604606", "bodyText": "let's add a debug log before returning..", "author": "emswbandara", "createdAt": "2020-04-15T06:18:19Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -254,34 +246,16 @@ private void validatePaginationParameters(Integer limit, Integer offset) throws\n     @Override\n     public Template getTemplateById(String templateId) throws TemplateManagementException {\n \n-        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n-        try {\n-            Resource resource = configManager.getTenantResourceById(templateId);\n-            Template template = new ResourceToTemplate().apply(resource);\n-            if (resource.getFiles().size() == 1) {\n-                InputStream templateScriptInputStream = configManager.getFileById(resource.getResourceType(),\n-                        resource.getResourceName(), resource.getFiles().get(0).getId());\n-                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(template.getTemplateType().toString() + \" can have only one templated object. But the \" +\n-                            \"template with id: \" + templateId + \" has \" + resource.getFiles().size() + \" templated \" +\n-                            \"object/s. Therefore templated object is not retrieved.\");\n-                }\n-            }\n-            return template;\n-        } catch (ConfigurationManagementException e) {\n-            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(e\n-                    .getErrorCode())) {\n-                throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n-                        templateId, getTenantDomainFromCarbonContext());\n+        List<ReadOnlyTemplateHandler> readOnlyTemplateHandlers =\n+                TemplateManagerDataHolder.getInstance().getReadOnlyTemplateHandlers();\n+        for (ReadOnlyTemplateHandler readOnlyTemplateHandler: readOnlyTemplateHandlers) {\n+            Template template = readOnlyTemplateHandler.getTemplateById(templateId);\n+            if (template != null) {\n+                return template;", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTk0NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765944", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDc3OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408604778", "bodyText": "can readOnlyTemplateHandlers be null here? if so add a null check", "author": "emswbandara", "createdAt": "2020-04-15T06:18:48Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -254,34 +246,16 @@ private void validatePaginationParameters(Integer limit, Integer offset) throws\n     @Override\n     public Template getTemplateById(String templateId) throws TemplateManagementException {\n \n-        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n-        try {\n-            Resource resource = configManager.getTenantResourceById(templateId);\n-            Template template = new ResourceToTemplate().apply(resource);\n-            if (resource.getFiles().size() == 1) {\n-                InputStream templateScriptInputStream = configManager.getFileById(resource.getResourceType(),\n-                        resource.getResourceName(), resource.getFiles().get(0).getId());\n-                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(template.getTemplateType().toString() + \" can have only one templated object. But the \" +\n-                            \"template with id: \" + templateId + \" has \" + resource.getFiles().size() + \" templated \" +\n-                            \"object/s. Therefore templated object is not retrieved.\");\n-                }\n-            }\n-            return template;\n-        } catch (ConfigurationManagementException e) {\n-            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(e\n-                    .getErrorCode())) {\n-                throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n-                        templateId, getTenantDomainFromCarbonContext());\n+        List<ReadOnlyTemplateHandler> readOnlyTemplateHandlers =\n+                TemplateManagerDataHolder.getInstance().getReadOnlyTemplateHandlers();\n+        for (ReadOnlyTemplateHandler readOnlyTemplateHandler: readOnlyTemplateHandlers) {", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTkxMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765913", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNjg0OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408606849", "bodyText": "rather than having the directory paths as repository/resources/identity/application-templates, IMO it would be more clear if we have the following structure.\nrepository/resources/identity/templates/applications\nrepository/resources/identity/templates/identity-providers\nrepository/resources/identity/templates/emails etc.\nWDYT? @AnuradhaSK @thanujalk", "author": "emswbandara", "createdAt": "2020-04-15T06:24:21Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateMgtConstants.java", "diffHunk": "@@ -41,6 +46,30 @@\n     public static final String STATUS_INTERNAL_SERVER_ERROR_MESSAGE_DEFAULT = \"Internal server error\";\n \n     public static final String TEMPLATE_RESOURCE_PATH = \"/\";\n+    public static final Path SP_TEMPLATES_DIR_PATH = Paths.get(CarbonUtils.getCarbonHome(), \"repository\",\n+            \"resources\", \"identity\", \"application-templates\");", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTg0NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765844", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNjg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNzAyNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408607027", "bodyText": "add fullstop at the end of a comment. Please check other places as well", "author": "emswbandara", "createdAt": "2020-04-15T06:24:51Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateMgtConstants.java", "diffHunk": "@@ -41,6 +46,30 @@\n     public static final String STATUS_INTERNAL_SERVER_ERROR_MESSAGE_DEFAULT = \"Internal server error\";\n \n     public static final String TEMPLATE_RESOURCE_PATH = \"/\";\n+    public static final Path SP_TEMPLATES_DIR_PATH = Paths.get(CarbonUtils.getCarbonHome(), \"repository\",\n+            \"resources\", \"identity\", \"application-templates\");\n+    public static final Path IDP_TEMPLATES_DIR_PATH = Paths.get(CarbonUtils.getCarbonHome(), \"repository\",\n+            \"resources\", \"identity\", \"identity-provider-templates\");\n+    public static final String FILE_EXT_JSON = \".json\";\n+\n+    // Common attributes to all templates", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTc3Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765777", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNzAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwODE2Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408608167", "bodyText": "don't we need a serialVersionUID? Pl refer\nhttps://github.com/wso2-extensions/identity-inbound-auth-oauth/blob/master/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/cache/AuthorizationGrantCacheEntry.java#L35", "author": "emswbandara", "createdAt": "2020-04-15T06:27:55Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/cache/ConfigStoreBasedTemplateCacheEntry.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.cache;\n+\n+import org.wso2.carbon.identity.application.common.cache.CacheEntry;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+public class ConfigStoreBasedTemplateCacheEntry extends CacheEntry {\n+\n+    private Template template;", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTcxMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765712", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwODE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwODMxMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408608313", "bodyText": "add new line", "author": "emswbandara", "createdAt": "2020-04-15T06:28:17Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/cache/ConfigStoreBasedTemplateCacheKey.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.cache;\n+\n+import org.wso2.carbon.identity.application.common.cache.CacheKey;\n+\n+public class ConfigStoreBasedTemplateCacheKey extends CacheKey {\n+\n+    private static final long serialVersionUID = 8263255365985309443L;\n+\n+    private String templateKey;\n+\n+    public ConfigStoreBasedTemplateCacheKey(String templateId) {\n+        this.templateKey = templateId;", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTY3OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765678", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwODMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMDkyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408610926", "bodyText": "let;s handle the 2 cases seperately. I.e if limit < 0 throw error message saying limit is invalid. and follow same for offset.", "author": "emswbandara", "createdAt": "2020-04-15T06:35:15Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/FileBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementClientException;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.handler.ReadOnlyTemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.wso2.carbon.identity.template.mgt.TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_ARGUMENTS_FOR_LIMIT_OFFSET;\n+import static org.wso2.carbon.identity.template.mgt.internal.TemplateManagerDataHolder.getFileBasedTemplates;\n+import static org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils.handleClientException;\n+\n+/**\n+ * File based template handler implementation.\n+ */\n+public class FileBasedTemplateHandler implements ReadOnlyTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(FileBasedTemplateHandler.class);\n+    private static final Integer DEFAULT_SEARCH_LIMIT = 100;\n+\n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        return getFileBasedTemplates().get(templateId);\n+    }\n+\n+    @Override\n+    public List<Template> listTemplates(String templateType, Integer limit, Integer offset, Condition\n+            searchCondition) throws TemplateManagementException {\n+\n+        validatePaginationParameters(limit, offset);\n+\n+        if (limit == 0) {\n+            limit = DEFAULT_SEARCH_LIMIT;\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Limit is not defined in the request, default to: \" + limit);\n+            }\n+        }\n+\n+        return getFileBasedTemplates().entrySet().stream()\n+                .filter(entry -> StringUtils.equals(entry.getValue().getTemplateType().toString(), (templateType)))\n+                .skip(offset)\n+                .limit(limit)\n+                .map(Map.Entry::getValue)\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * This method is used to validate the pagination parameters.\n+     *\n+     * @param limit  Limits the number of templates listed on a page.\n+     * @param offset Specifies the starting point for the templates to be displayed.\n+     * @throws TemplateManagementException Consent Management Exception.\n+     */\n+    private void validatePaginationParameters(Integer limit, Integer offset) throws TemplateManagementClientException {\n+\n+        if (limit < 0 || offset < 0) {\n+            throw handleClientException(ERROR_CODE_INVALID_ARGUMENTS_FOR_LIMIT_OFFSET, null);", "originalCommit": "2d1861ccb642a3ab36a913fc92ca6099452ec366", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTYyMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408765621", "bodyText": "addressed in feace15", "author": "AnuradhaSK", "createdAt": "2020-04-15T11:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMDkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NTYzNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408855637", "bodyText": "check whether log.isDebugEnabled", "author": "emswbandara", "createdAt": "2020-04-15T13:48:27Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/CacheBackedConfigStoreBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCache;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheEntry;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheKey;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+\n+/**\n+ * Cached config store based template handler for the template management. All config store based template handling\n+ * happen through this layer to ensure single point of caching.\n+ */\n+public class CacheBackedConfigStoreBasedTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(CacheBackedConfigStoreBasedTemplateHandler.class);\n+\n+    private ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler = null;\n+    private ConfigStoreBasedTemplateCache configStoreBasedTemplateCache = null;\n+\n+    public CacheBackedConfigStoreBasedTemplateHandler(ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler) {\n+\n+        this.configStoreBasedTemplateHandler = configStoreBasedTemplateHandler;\n+        configStoreBasedTemplateCache = ConfigStoreBasedTemplateCache.getInstance();\n+    }\n+\n+    /**\n+     * Add new template into the config store.\n+     *\n+     * @param template Template.\n+     * @return Resource id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public String addTemplate(Template template) throws TemplateManagementException {\n+\n+        return configStoreBasedTemplateHandler.addTemplate(template);\n+    }\n+\n+    /**\n+     * Get the template for the given id from config store.\n+     *\n+     * @param templateId Template id.\n+     * @return Template for the given id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigStoreBasedTemplateCacheKey cacheKey = new ConfigStoreBasedTemplateCacheKey(templateId);\n+        ConfigStoreBasedTemplateCacheEntry entry = configStoreBasedTemplateCache.getValueFromCache(cacheKey);\n+\n+        if (entry != null) {\n+            log.debug(\"Cache entry found for Template with id \" + templateId);", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NTgxNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408855814", "bodyText": "check whether log.isDebugEnabled", "author": "emswbandara", "createdAt": "2020-04-15T13:48:40Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/CacheBackedConfigStoreBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCache;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheEntry;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheKey;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+\n+/**\n+ * Cached config store based template handler for the template management. All config store based template handling\n+ * happen through this layer to ensure single point of caching.\n+ */\n+public class CacheBackedConfigStoreBasedTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(CacheBackedConfigStoreBasedTemplateHandler.class);\n+\n+    private ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler = null;\n+    private ConfigStoreBasedTemplateCache configStoreBasedTemplateCache = null;\n+\n+    public CacheBackedConfigStoreBasedTemplateHandler(ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler) {\n+\n+        this.configStoreBasedTemplateHandler = configStoreBasedTemplateHandler;\n+        configStoreBasedTemplateCache = ConfigStoreBasedTemplateCache.getInstance();\n+    }\n+\n+    /**\n+     * Add new template into the config store.\n+     *\n+     * @param template Template.\n+     * @return Resource id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public String addTemplate(Template template) throws TemplateManagementException {\n+\n+        return configStoreBasedTemplateHandler.addTemplate(template);\n+    }\n+\n+    /**\n+     * Get the template for the given id from config store.\n+     *\n+     * @param templateId Template id.\n+     * @return Template for the given id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigStoreBasedTemplateCacheKey cacheKey = new ConfigStoreBasedTemplateCacheKey(templateId);\n+        ConfigStoreBasedTemplateCacheEntry entry = configStoreBasedTemplateCache.getValueFromCache(cacheKey);\n+\n+        if (entry != null) {\n+            log.debug(\"Cache entry found for Template with id \" + templateId);\n+            Template template = entry.getTemplate();\n+            return template;\n+        } else {\n+            log.debug(\"Cache entry not found for Template with id \" + templateId + \". Fetching entry from DB\");", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NTkxOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408855919", "bodyText": "check whether log.isDebugEnabled", "author": "emswbandara", "createdAt": "2020-04-15T13:48:49Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/CacheBackedConfigStoreBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCache;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheEntry;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheKey;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+\n+/**\n+ * Cached config store based template handler for the template management. All config store based template handling\n+ * happen through this layer to ensure single point of caching.\n+ */\n+public class CacheBackedConfigStoreBasedTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(CacheBackedConfigStoreBasedTemplateHandler.class);\n+\n+    private ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler = null;\n+    private ConfigStoreBasedTemplateCache configStoreBasedTemplateCache = null;\n+\n+    public CacheBackedConfigStoreBasedTemplateHandler(ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler) {\n+\n+        this.configStoreBasedTemplateHandler = configStoreBasedTemplateHandler;\n+        configStoreBasedTemplateCache = ConfigStoreBasedTemplateCache.getInstance();\n+    }\n+\n+    /**\n+     * Add new template into the config store.\n+     *\n+     * @param template Template.\n+     * @return Resource id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public String addTemplate(Template template) throws TemplateManagementException {\n+\n+        return configStoreBasedTemplateHandler.addTemplate(template);\n+    }\n+\n+    /**\n+     * Get the template for the given id from config store.\n+     *\n+     * @param templateId Template id.\n+     * @return Template for the given id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigStoreBasedTemplateCacheKey cacheKey = new ConfigStoreBasedTemplateCacheKey(templateId);\n+        ConfigStoreBasedTemplateCacheEntry entry = configStoreBasedTemplateCache.getValueFromCache(cacheKey);\n+\n+        if (entry != null) {\n+            log.debug(\"Cache entry found for Template with id \" + templateId);\n+            Template template = entry.getTemplate();\n+            return template;\n+        } else {\n+            log.debug(\"Cache entry not found for Template with id \" + templateId + \". Fetching entry from DB\");\n+        }\n+\n+        Template template = configStoreBasedTemplateHandler.getTemplateById(templateId);\n+\n+        if (template != null) {\n+            log.debug(\"Entry fetched from Config store for Template \" + templateId + \". Updating cache\");", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1NjA0NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408856045", "bodyText": "check whether log.isDebugEnabled", "author": "emswbandara", "createdAt": "2020-04-15T13:48:57Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/CacheBackedConfigStoreBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCache;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheEntry;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheKey;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+\n+/**\n+ * Cached config store based template handler for the template management. All config store based template handling\n+ * happen through this layer to ensure single point of caching.\n+ */\n+public class CacheBackedConfigStoreBasedTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(CacheBackedConfigStoreBasedTemplateHandler.class);\n+\n+    private ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler = null;\n+    private ConfigStoreBasedTemplateCache configStoreBasedTemplateCache = null;\n+\n+    public CacheBackedConfigStoreBasedTemplateHandler(ConfigStoreBasedTemplateHandler configStoreBasedTemplateHandler) {\n+\n+        this.configStoreBasedTemplateHandler = configStoreBasedTemplateHandler;\n+        configStoreBasedTemplateCache = ConfigStoreBasedTemplateCache.getInstance();\n+    }\n+\n+    /**\n+     * Add new template into the config store.\n+     *\n+     * @param template Template.\n+     * @return Resource id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public String addTemplate(Template template) throws TemplateManagementException {\n+\n+        return configStoreBasedTemplateHandler.addTemplate(template);\n+    }\n+\n+    /**\n+     * Get the template for the given id from config store.\n+     *\n+     * @param templateId Template id.\n+     * @return Template for the given id.\n+     * @throws TemplateManagementException Template Management Exception.\n+     */\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigStoreBasedTemplateCacheKey cacheKey = new ConfigStoreBasedTemplateCacheKey(templateId);\n+        ConfigStoreBasedTemplateCacheEntry entry = configStoreBasedTemplateCache.getValueFromCache(cacheKey);\n+\n+        if (entry != null) {\n+            log.debug(\"Cache entry found for Template with id \" + templateId);\n+            Template template = entry.getTemplate();\n+            return template;\n+        } else {\n+            log.debug(\"Cache entry not found for Template with id \" + templateId + \". Fetching entry from DB\");\n+        }\n+\n+        Template template = configStoreBasedTemplateHandler.getTemplateById(templateId);\n+\n+        if (template != null) {\n+            log.debug(\"Entry fetched from Config store for Template \" + templateId + \". Updating cache\");\n+            configStoreBasedTemplateCache.addToCache(cacheKey, new ConfigStoreBasedTemplateCacheEntry(template));\n+        } else {\n+            log.debug(\"Entry for Template with id \" + templateId + \" not found in cache or config store\");", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1OTI1MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408859251", "bodyText": "don't we need to check if limit == null as well?", "author": "emswbandara", "createdAt": "2020-04-15T13:53:12Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/FileBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementClientException;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.handler.ReadOnlyTemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.wso2.carbon.identity.template.mgt.TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_ARGUMENTS_FOR_LIMIT;\n+import static org.wso2.carbon.identity.template.mgt.TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_ARGUMENTS_FOR_OFFSET;\n+import static org.wso2.carbon.identity.template.mgt.internal.TemplateManagerDataHolder.getFileBasedTemplates;\n+import static org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils.handleClientException;\n+\n+/**\n+ * File based template handler implementation.\n+ */\n+public class FileBasedTemplateHandler implements ReadOnlyTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(FileBasedTemplateHandler.class);\n+    private static final Integer DEFAULT_SEARCH_LIMIT = 100;\n+\n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        return getFileBasedTemplates().get(templateId);\n+    }\n+\n+    @Override\n+    public List<Template> listTemplates(String templateType, Integer limit, Integer offset, Condition\n+            searchCondition) throws TemplateManagementException {\n+\n+        validatePaginationParameters(limit, offset);\n+\n+        if (limit == 0) {", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MzYxMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408883613", "bodyText": "also check whether offset is null, and default to 0 if not defined", "author": "emswbandara", "createdAt": "2020-04-15T14:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg1OTI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MDE0Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408860142", "bodyText": "shall we make this a debug log?", "author": "emswbandara", "createdAt": "2020-04-15T13:54:23Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,124 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.info(\"No file-based templates\");", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MDk4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408860983", "bodyText": "also lelts change the log as No file-based idp/application templates found", "author": "emswbandara", "createdAt": "2020-04-15T13:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MDE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MTkxOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408861918", "bodyText": "do we need this nested try block? since we already have a try block at line 163?", "author": "emswbandara", "createdAt": "2020-04-15T13:56:37Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,124 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.info(\"No file-based templates\");\n+            } else {\n+                try {\n+                    Files.walk(path)\n+                            .filter(filePath -> Files.isRegularFile(filePath) && filePath.toString().endsWith\n+                                    (TemplateMgtConstants.FILE_EXT_JSON))\n+                            .forEach(filePath -> {\n+                                try {", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MzUyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408863526", "bodyText": "check whether typesJSONArray is not  null before accessing ypesJSONArray.length()", "author": "emswbandara", "createdAt": "2020-04-15T13:58:33Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerComponent.java", "diffHunk": "@@ -100,4 +129,124 @@ protected void unsetConfigurationManager(ConfigurationManager configurationManag\n         }\n         TemplateManagerDataHolder.getInstance().setConfigurationManager(null);\n     }\n+\n+    @Reference(\n+            name = \"identity.template.handler\",\n+            service = ReadOnlyTemplateHandler.class,\n+            cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetReadOnlyTemplateHandler\")\n+    protected void setReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is added.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().addReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    protected void unsetReadOnlyTemplateHandler(ReadOnlyTemplateHandler readOnlyTemplateHandler) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Template handler \" + readOnlyTemplateHandler.getClass().getName() + \" is removed.\");\n+        }\n+        TemplateManagerDataHolder.getInstance().removeReadOnlyTemplateHandler(readOnlyTemplateHandler);\n+    }\n+\n+    private void loadDefaultTemplates() throws FileNotFoundException {\n+\n+        List<Path> paths = Arrays.asList(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH, TemplateMgtConstants\n+                .IDP_TEMPLATES_DIR_PATH);\n+        for (Path path : paths) {\n+            if (!Files.exists(path) || !Files.isDirectory(path)) {\n+                log.info(\"No file-based templates\");\n+            } else {\n+                try {\n+                    Files.walk(path)\n+                            .filter(filePath -> Files.isRegularFile(filePath) && filePath.toString().endsWith\n+                                    (TemplateMgtConstants.FILE_EXT_JSON))\n+                            .forEach(filePath -> {\n+                                try {\n+                                    String templateJsonString = FileUtils.readFileToString(filePath.toFile());\n+                                    JSONObject templateObj = new JSONObject(templateJsonString);\n+                                    Template template = new Template();\n+\n+                                    template.setTemplateId(templateObj.getString(TemplateMgtConstants.ID));\n+                                    template.setTemplateName(templateObj.getString(TemplateMgtConstants.NAME));\n+                                    template.setDescription(templateObj.getString(TemplateMgtConstants.DESCRIPTION));\n+                                    template.setImageUrl(templateObj.getString(TemplateMgtConstants.IMAGE));\n+\n+                                    if (StringUtils.equals(TemplateMgtConstants.SP_TEMPLATES_DIR_PATH.toString(),\n+                                            path.toString())) {\n+                                        template.setTemplateType(TemplateMgtConstants.TemplateType\n+                                                .APPLICATION_TEMPLATE);\n+                                        template.setPropertiesMap(extractApplicationSpecificProperties(templateObj));\n+                                        template.setTemplateScript(templateObj.getJSONObject(TemplateMgtConstants\n+                                                .APPLICATION).toString());\n+                                    } else if (StringUtils.equals(TemplateMgtConstants.IDP_TEMPLATES_DIR_PATH\n+                                            .toString(), path.toString())) {\n+                                        template.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n+                                        template.setPropertiesMap(extractIDPSpecificProperties(templateObj));\n+                                        template.setTemplateScript(templateObj.getJSONObject(TemplateMgtConstants\n+                                                .IDP).toString());\n+                                    }\n+                                    //add file based templates to FileBasedTemplates map.\n+                                    getFileBasedTemplates().put(templateObj.getString(TemplateMgtConstants.ID),\n+                                            template);\n+                                } catch (IOException e) {\n+                                    log.error(\"Error while reading  templates.\", e);\n+                                }\n+                            });\n+                } catch (IOException e) {\n+                    log.error(\"Error while reading templates.\", e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private Map<String, String> extractApplicationSpecificProperties(JSONObject templateObj) {\n+\n+        Map<String, String> properties = new HashMap<>();\n+        if (StringUtils.isNotEmpty(templateObj.getString(TemplateMgtConstants.AUTHENTICATION_PROTOCOL))) {\n+            properties.put(TemplateMgtConstants.AUTHENTICATION_PROTOCOL, templateObj.getString(TemplateMgtConstants\n+                    .AUTHENTICATION_PROTOCOL));\n+        }\n+        if (templateObj.getJSONArray(TemplateMgtConstants.TYPES) != null) {\n+            JSONArray typesJSONArray = templateObj.getJSONArray(TemplateMgtConstants.TYPES);\n+            List<String> types = new ArrayList<>();\n+            for (int i = 0; i < typesJSONArray.length(); i++) {\n+                types.add(typesJSONArray.getString(i));\n+            }\n+            properties.put(TemplateMgtConstants.TYPES, String.join(\",\", types));\n+        }\n+        if (StringUtils.isNotEmpty(templateObj.getString(TemplateMgtConstants.CATEGORY))) {\n+            properties.put(TemplateMgtConstants.CATEGORY, templateObj.getString(TemplateMgtConstants.CATEGORY));\n+        }\n+        if (StringUtils.isNotEmpty(String.valueOf(templateObj.getInt(TemplateMgtConstants.DISPLAY_ORDER)))) {\n+            properties.put(TemplateMgtConstants.DISPLAY_ORDER, Integer.toString(templateObj.getInt\n+                    (TemplateMgtConstants.DISPLAY_ORDER)));\n+        }\n+        return properties;\n+    }\n+\n+    private Map<String, String> extractIDPSpecificProperties(JSONObject templateObj) {\n+\n+        Map<String, String> properties = new HashMap<>();\n+        if (StringUtils.isNotEmpty(templateObj.getString(TemplateMgtConstants.PROP_CATEGORY))) {\n+            properties.put(TemplateMgtConstants.PROP_CATEGORY, templateObj.getString(TemplateMgtConstants\n+                    .PROP_CATEGORY));\n+        }\n+        if (StringUtils.isNotEmpty(String.valueOf(templateObj.getInt(TemplateMgtConstants.PROP_DISPLAY_ORDER)))) {\n+            properties.put(TemplateMgtConstants.PROP_DISPLAY_ORDER, Integer.toString(templateObj.getInt\n+                    (TemplateMgtConstants.PROP_DISPLAY_ORDER)));\n+        }\n+        if (templateObj.getJSONArray(TemplateMgtConstants.PROP_SERVICES) != null) {\n+            JSONArray typesJSONArray = templateObj.getJSONArray(TemplateMgtConstants.PROP_SERVICES);\n+            List<String> services = new ArrayList<>();\n+            for (int i = 0; i < typesJSONArray.length(); i++) {", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2MDUwNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408860504", "bodyText": "unnecessary null check.", "author": "thanujalk", "createdAt": "2020-04-15T13:54:47Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -254,34 +246,20 @@ private void validatePaginationParameters(Integer limit, Integer offset) throws\n     @Override\n     public Template getTemplateById(String templateId) throws TemplateManagementException {\n \n-        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n-        try {\n-            Resource resource = configManager.getTenantResourceById(templateId);\n-            Template template = new ResourceToTemplate().apply(resource);\n-            if (resource.getFiles().size() == 1) {\n-                InputStream templateScriptInputStream = configManager.getFileById(resource.getResourceType(),\n-                        resource.getResourceName(), resource.getFiles().get(0).getId());\n-                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(template.getTemplateType().toString() + \" can have only one templated object. But the \" +\n-                            \"template with id: \" + templateId + \" has \" + resource.getFiles().size() + \" templated \" +\n-                            \"object/s. Therefore templated object is not retrieved.\");\n+        List<ReadOnlyTemplateHandler> readOnlyTemplateHandlers =\n+                TemplateManagerDataHolder.getInstance().getReadOnlyTemplateHandlers();\n+        if (readOnlyTemplateHandlers != null) {", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2Nzg4OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408867889", "bodyText": "try(InputStream templateScriptInputStream = configManager\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .getFileById(resource.getResourceType(), resource.getResourceName(),\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.getFiles().get(0).getId())) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 template.setTemplateScript(IOUtils.toString(templateScriptInputStream));}", "author": "thanujalk", "createdAt": "2020-04-15T14:04:21Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/ConfigStoreBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.configuration.mgt.core.constant.ConfigurationConstants;\n+import org.wso2.carbon.identity.configuration.mgt.core.exception.ConfigurationManagementException;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceTypeAdd;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.TemplateMgtConstants;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.function.ResourceToTemplate;\n+import org.wso2.carbon.identity.template.mgt.function.TemplateToResource;\n+import org.wso2.carbon.identity.template.mgt.function.TemplateToResourceAdd;\n+import org.wso2.carbon.identity.template.mgt.handler.TemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.internal.TemplateManagerDataHolder;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils.getTenantDomainFromCarbonContext;\n+import static org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils.handleClientException;\n+import static org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils.handleServerException;\n+\n+/**\n+ * Config store based template handler.\n+ */\n+public class ConfigStoreBasedTemplateHandler implements TemplateHandler {\n+\n+    private static Log log = LogFactory.getLog(ConfigStoreBasedTemplateHandler.class);\n+\n+    @Override\n+    public String addTemplate(Template template) throws TemplateManagementException {\n+\n+        return addTemplateToConfigStore(template);\n+    }\n+\n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resource resource = configManager.getTenantResourceById(templateId);\n+            Template template = new ResourceToTemplate().apply(resource);\n+            if (resource.getFiles().size() == 1) {\n+                InputStream templateScriptInputStream = configManager\n+                        .getFileById(resource.getResourceType(), resource.getResourceName(),\n+                                resource.getFiles().get(0).getId());\n+                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2OTE2OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408869168", "bodyText": "IOUtils.toString does not close the stream... since this is AutoClosable above will fix that", "author": "thanujalk", "createdAt": "2020-04-15T14:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2Nzg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODQ4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408878483", "bodyText": "no need to make this static", "author": "thanujalk", "createdAt": "2020-04-15T14:18:53Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/internal/TemplateManagerDataHolder.java", "diffHunk": "@@ -19,17 +19,47 @@\n package org.wso2.carbon.identity.template.mgt.internal;\n \n import org.wso2.carbon.identity.configuration.mgt.core.ConfigurationManager;\n+import org.wso2.carbon.identity.template.mgt.handler.ReadOnlyTemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.handler.TemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.handler.impl.ConfigStoreBasedTemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A class to keep the data of the template manager component.\n+ */\n public class TemplateManagerDataHolder {\n \n     private static TemplateManagerDataHolder instance = new TemplateManagerDataHolder();\n+\n     private ConfigurationManager configurationManager;\n \n+    private TemplateHandler readWriteTemplateHandler = new ConfigStoreBasedTemplateHandler();\n+\n+    private List<ReadOnlyTemplateHandler> readOnlyTemplateHandlers = new ArrayList<>();\n+\n+    private static Map<String, Template> fileBasedTemplates = new HashMap<>();", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5Mzg1Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408893856", "bodyText": "this might cause problems if we are going to support pagination in the future.. this will paginate from each ReadOnlyTemplateHandler available.. whereas the client expects to paginate the total result from all the handlers.. WDYT?", "author": "emswbandara", "createdAt": "2020-04-15T14:38:41Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -302,102 +280,22 @@ public Template getTemplateById(String templateId) throws TemplateManagementExce\n         if (limit != null || offset != null) {\n             throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_PAGINATION_NOT_SUPPORTED, null);\n         }\n-        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n-        try {\n-            Resources resourcesList;\n-            if (searchCondition == null) {\n-                resourcesList = configManager.getResourcesByType(templateType);\n-            } else {\n-                resourcesList = configManager.getTenantResources(searchCondition);\n-            }\n-            return resourcesList.getResources().stream().map(resource -> {\n-                resource.setResourceType(templateType);\n-                return new ResourceToTemplate().apply(resource);\n-            }).collect(Collectors.toList());\n-        } catch (ConfigurationManagementException e) {\n-            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_TYPE_DOES_NOT_EXISTS.getCode().equals(e\n-                    .getErrorCode())) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Template type : '\" + templateType + \"' has not been created in the database.\", e);\n-                }\n-                return Collections.emptyList();\n-            } else if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCES_DOES_NOT_EXISTS.getCode().equals(e\n-                    .getErrorCode())) {\n-                if (log.isDebugEnabled()) {\n-                    String message = \"Templates do not exist for template type: \" + templateType;\n-                    if (searchCondition != null) {\n-                        message = message + \", and search  criteria:\" + searchCondition.toString();\n-                    }\n-                    log.debug(message, e);\n-                }\n-                return Collections.emptyList();\n-            }\n-            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_LIST_TEMPLATES, e, templateType,\n-                    getTenantDomainFromCarbonContext());\n-        }\n-    }\n-\n-    @Override\n-    public void deleteTemplateById(String templateId) throws TemplateManagementException {\n \n-        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n-        try {\n-            configManager.deleteResourceById(templateId);\n-        } catch (ConfigurationManagementException e) {\n-            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(\n-                    e.getErrorCode())) {\n-                throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n-                        templateId, getTenantDomainFromCarbonContext());\n-            }\n-            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_DELETE_TEMPLATE_BY_ID, e,\n-                    templateId, getTenantDomainFromCarbonContext());\n+        List<Template> templates = new ArrayList<>();\n+        List<ReadOnlyTemplateHandler> readOnlyTemplateHandlers =\n+                TemplateManagerDataHolder.getInstance().getReadOnlyTemplateHandlers();\n+        for (ReadOnlyTemplateHandler readOnlyTemplateHandler : readOnlyTemplateHandlers) {\n+            templates.addAll(readOnlyTemplateHandler.listTemplates(templateType, limit, offset, searchCondition));", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMDY3NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r409020674", "bodyText": "in order to address the above concern, we need to get the totalCount from each template handler and modify the limit to be passed to each handler.. we can address this concern when we support pagination for template API..", "author": "emswbandara", "createdAt": "2020-04-15T17:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5Mzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5Nzc5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408897799", "bodyText": "shouldn't this implement TemplateHandler interface?", "author": "emswbandara", "createdAt": "2020-04-15T14:43:38Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/CacheBackedConfigStoreBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCache;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheEntry;\n+import org.wso2.carbon.identity.template.mgt.cache.ConfigStoreBasedTemplateCacheKey;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+\n+/**\n+ * Cached config store based template handler for the template management. All config store based template handling\n+ * happen through this layer to ensure single point of caching.\n+ */\n+public class CacheBackedConfigStoreBasedTemplateHandler {", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTgxOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408899818", "bodyText": "there's a config in identity.xml file for default limit. Let's use that instead of hard-coding", "author": "emswbandara", "createdAt": "2020-04-15T14:46:09Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/handler/impl/FileBasedTemplateHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.handler.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.search.Condition;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementClientException;\n+import org.wso2.carbon.identity.template.mgt.exception.TemplateManagementException;\n+import org.wso2.carbon.identity.template.mgt.handler.ReadOnlyTemplateHandler;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.wso2.carbon.identity.template.mgt.TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_ARGUMENTS_FOR_LIMIT;\n+import static org.wso2.carbon.identity.template.mgt.TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_ARGUMENTS_FOR_OFFSET;\n+import static org.wso2.carbon.identity.template.mgt.internal.TemplateManagerDataHolder.getFileBasedTemplates;\n+import static org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils.handleClientException;\n+\n+/**\n+ * File based template handler implementation.\n+ */\n+public class FileBasedTemplateHandler implements ReadOnlyTemplateHandler {\n+\n+    private static final Log log = LogFactory.getLog(FileBasedTemplateHandler.class);\n+    private static final Integer DEFAULT_SEARCH_LIMIT = 100;\n+\n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        return getFileBasedTemplates().get(templateId);\n+    }\n+\n+    @Override\n+    public List<Template> listTemplates(String templateType, Integer limit, Integer offset, Condition\n+            searchCondition) throws TemplateManagementException {\n+\n+        validatePaginationParameters(limit, offset);\n+\n+        if (limit == 0) {\n+            limit = DEFAULT_SEARCH_LIMIT;", "originalCommit": "feace15495adc9efeb86cb5bad49ff0e1ee41c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408901436", "bodyText": "carbon-identity-framework/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java\n    \n    \n         Line 1419\n      in\n      398d82d\n    \n    \n    \n    \n\n        \n          \n           public static int getDefaultItemsPerPage() {", "author": "emswbandara", "createdAt": "2020-04-15T14:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMDI1Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2860#discussion_r408930252", "bodyText": "Basically use IdentityUtil.getDefaultItemsPerPage() instead of DEFAULT_SEARCH_LIMIT", "author": "emswbandara", "createdAt": "2020-04-15T15:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTgxOA=="}], "type": "inlineReview"}, {"oid": "0e648159da57882f1cce9da3ae1ae6a3b717becf", "url": "https://github.com/wso2/carbon-identity-framework/commit/0e648159da57882f1cce9da3ae1ae6a3b717becf", "message": "Implement FileBasedTemplateHandler", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "e40f2458aa4b24144fbd8a1cfaf0b94eddb2a76c", "url": "https://github.com/wso2/carbon-identity-framework/commit/e40f2458aa4b24144fbd8a1cfaf0b94eddb2a76c", "message": "Implement FileBasedTemplateHandler functions", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "0ecfd2b5329b26e755b0f6cd56b1fd2e6d01d818", "url": "https://github.com/wso2/carbon-identity-framework/commit/0ecfd2b5329b26e755b0f6cd56b1fd2e6d01d818", "message": "Remove deprecated listTemplates method and format the code", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "d54c0c3fea326531e90e9a08d030ca109067225e", "url": "https://github.com/wso2/carbon-identity-framework/commit/d54c0c3fea326531e90e9a08d030ca109067225e", "message": "Implement ConfigStoreBasedTemplateHandler and TemplateManagerImpl", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "5c7f81adaa0a9897946f8c52b6a4b2f2cfaa12b6", "url": "https://github.com/wso2/carbon-identity-framework/commit/5c7f81adaa0a9897946f8c52b6a4b2f2cfaa12b6", "message": "Move filtering supported template listing to ConfigureBasedTemplateHandler", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "38d6d34e4af99f1638b4b6b2d37088d369935961", "url": "https://github.com/wso2/carbon-identity-framework/commit/38d6d34e4af99f1638b4b6b2d37088d369935961", "message": "Add services property to file based IDP templates", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "be7579c257c9bb769539b6ffa5536f856d2968ee", "url": "https://github.com/wso2/carbon-identity-framework/commit/be7579c257c9bb769539b6ffa5536f856d2968ee", "message": "Add caching for config store based template handler", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "e71f769c4fdc01ac3d4f95f1144ec21563425d23", "url": "https://github.com/wso2/carbon-identity-framework/commit/e71f769c4fdc01ac3d4f95f1144ec21563425d23", "message": "Address formatting issues and comments", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "5507a78277b13c5fdd0b1d7131efeb4006ae4ba8", "url": "https://github.com/wso2/carbon-identity-framework/commit/5507a78277b13c5fdd0b1d7131efeb4006ae4ba8", "message": "Address comments", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "593d0985eb81296a7ffe2fd66d938d6e9ffebfcc", "url": "https://github.com/wso2/carbon-identity-framework/commit/593d0985eb81296a7ffe2fd66d938d6e9ffebfcc", "message": "Add null check to offset", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "6362b45e75f64b36cad4845d857d048110ef797c", "url": "https://github.com/wso2/carbon-identity-framework/commit/6362b45e75f64b36cad4845d857d048110ef797c", "message": "Add config store based handler as read write handler", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "59873a73539c171f1a8a25f44a08d7184c3a1c27", "url": "https://github.com/wso2/carbon-identity-framework/commit/59873a73539c171f1a8a25f44a08d7184c3a1c27", "message": "Remove Default search limit constant", "committedDate": "2020-04-15T18:06:56Z", "type": "commit"}, {"oid": "59873a73539c171f1a8a25f44a08d7184c3a1c27", "url": "https://github.com/wso2/carbon-identity-framework/commit/59873a73539c171f1a8a25f44a08d7184c3a1c27", "message": "Remove Default search limit constant", "committedDate": "2020-04-15T18:06:56Z", "type": "forcePushed"}]}