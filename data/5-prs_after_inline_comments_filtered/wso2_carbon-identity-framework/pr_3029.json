{"pr_number": 3029, "pr_title": "Implement DAO layer for CORS", "pr_createdAt": "2020-07-27T06:18:27Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3029", "timeline": [{"oid": "25273fe823923ef20647f0147a109ae74fd2a553", "url": "https://github.com/wso2/carbon-identity-framework/commit/25273fe823923ef20647f0147a109ae74fd2a553", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes", "committedDate": "2020-07-27T06:19:53Z", "type": "forcePushed"}, {"oid": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "url": "https://github.com/wso2/carbon-identity-framework/commit/13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "message": "Implement DAO layer for CORS\n\n- Add CORS fixes", "committedDate": "2020-07-27T06:23:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4ODk3OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460688979", "bodyText": "You can use the available util to resolve the tenantID. IdentityTenantUtil.getTenantId(tenantDomain)", "author": "ashensw", "createdAt": "2020-07-27T07:12:48Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.SQLConstants;\n+import org.wso2.carbon.identity.cors.mgt.core.dao.CORSOriginDAO;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ADD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ORIGIN_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_RETRIEVE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.ErrorUtils.handleServerException;\n+\n+/**\n+ * {@link CORSOriginDAO} implementation.\n+ */\n+public class CORSOriginDAOImpl implements CORSOriginDAO {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginDAOImpl.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getPriority() {\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByTenantDomain(String tenantDomain)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_APPLICATION_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.setString(2, applicationId);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection retrieveConnection = IdentityDatabaseUtil.getDBConnection(false);\n+        Connection commitConnection = IdentityDatabaseUtil.getDBConnection(true);\n+        try {\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                preparedStatement = retrieveConnection.prepareStatement(SQLConstants.GET_TENANT_ID_BY_DOMAIN);\n+                preparedStatement.setString(1, tenantDomain);\n+                resultSet = preparedStatement.executeQuery();\n+\n+                String tenantId = null;\n+                while (resultSet.next()) {\n+                    tenantId = resultSet.getString(\"ID\");\n+                }\n+\n+                if (StringUtils.isBlank(tenantId)) {\n+                    throw handleServerException(ERROR_CODE_CORS_ADD, tenantDomain);\n+                }", "originalCommit": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTQ5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460689499", "bodyText": "Here also let's handle the rollback as well.", "author": "ashensw", "createdAt": "2020-07-27T07:13:59Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.SQLConstants;\n+import org.wso2.carbon.identity.cors.mgt.core.dao.CORSOriginDAO;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ADD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ORIGIN_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_RETRIEVE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.ErrorUtils.handleServerException;\n+\n+/**\n+ * {@link CORSOriginDAO} implementation.\n+ */\n+public class CORSOriginDAOImpl implements CORSOriginDAO {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginDAOImpl.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getPriority() {\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByTenantDomain(String tenantDomain)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_APPLICATION_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.setString(2, applicationId);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection retrieveConnection = IdentityDatabaseUtil.getDBConnection(false);\n+        Connection commitConnection = IdentityDatabaseUtil.getDBConnection(true);\n+        try {\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                preparedStatement = retrieveConnection.prepareStatement(SQLConstants.GET_TENANT_ID_BY_DOMAIN);\n+                preparedStatement.setString(1, tenantDomain);\n+                resultSet = preparedStatement.executeQuery();\n+\n+                String tenantId = null;\n+                while (resultSet.next()) {\n+                    tenantId = resultSet.getString(\"ID\");\n+                }\n+\n+                if (StringUtils.isBlank(tenantId)) {\n+                    throw handleServerException(ERROR_CODE_CORS_ADD, tenantDomain);\n+                }\n+\n+                preparedStatement = commitConnection.prepareStatement(SQLConstants.INSERT_CORS_ORIGIN);\n+                preparedStatement.setString(1, tenantId);\n+                preparedStatement.setString(2, corsOrigin.getOrigin());\n+                preparedStatement.executeUpdate();\n+            }\n+            IdentityDatabaseUtil.commitTransaction(commitConnection);\n+        } catch (SQLException e) {\n+            IdentityDatabaseUtil.rollbackTransaction(commitConnection);\n+            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(retrieveConnection, null, preparedStatement);\n+            IdentityDatabaseUtil.closeConnection(commitConnection);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void updateCORSOriginById(String corsOriginId, CORSOrigin corsOrigin) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOriginById(String corsOriginId) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.DELETE_CORS_ORIGIN_BY_ID);\n+            preparedStatement.setString(1, corsOriginId);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_ORIGIN_DELETE, e, corsOriginId);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, null, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteAllCORSOriginsByTenantDomain(String tenantDomain) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);", "originalCommit": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTU5Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460689596", "bodyText": "Here also let's handle the rollback as well.", "author": "ashensw", "createdAt": "2020-07-27T07:14:11Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.core.util.IdentityDatabaseUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.SQLConstants;\n+import org.wso2.carbon.identity.cors.mgt.core.dao.CORSOriginDAO;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ADD;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_ORIGIN_DELETE;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_CORS_RETRIEVE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.ErrorUtils.handleServerException;\n+\n+/**\n+ * {@link CORSOriginDAO} implementation.\n+ */\n+public class CORSOriginDAOImpl implements CORSOriginDAO {\n+\n+    private static final Log log = LogFactory.getLog(CORSOriginDAOImpl.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getPriority() {\n+\n+        return 1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByTenantDomain(String tenantDomain)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSOrigin> getCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.GET_CORS_ORIGINS_BY_APPLICATION_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.setString(2, applicationId);\n+            resultSet = preparedStatement.executeQuery();\n+\n+            List<CORSOrigin> corsOrigins = new ArrayList<>();\n+            while (resultSet.next()) {\n+                CORSOrigin corsOrigin = new CORSOrigin();\n+                corsOrigin.setId(resultSet.getString(\"ID\"));\n+                corsOrigin.setOrigin(resultSet.getString(\"ORIGIN\"));\n+                corsOrigins.add(corsOrigin);\n+            }\n+            return corsOrigins;\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        ResultSet resultSet = null;\n+        Connection retrieveConnection = IdentityDatabaseUtil.getDBConnection(false);\n+        Connection commitConnection = IdentityDatabaseUtil.getDBConnection(true);\n+        try {\n+            for (CORSOrigin corsOrigin : corsOrigins) {\n+                preparedStatement = retrieveConnection.prepareStatement(SQLConstants.GET_TENANT_ID_BY_DOMAIN);\n+                preparedStatement.setString(1, tenantDomain);\n+                resultSet = preparedStatement.executeQuery();\n+\n+                String tenantId = null;\n+                while (resultSet.next()) {\n+                    tenantId = resultSet.getString(\"ID\");\n+                }\n+\n+                if (StringUtils.isBlank(tenantId)) {\n+                    throw handleServerException(ERROR_CODE_CORS_ADD, tenantDomain);\n+                }\n+\n+                preparedStatement = commitConnection.prepareStatement(SQLConstants.INSERT_CORS_ORIGIN);\n+                preparedStatement.setString(1, tenantId);\n+                preparedStatement.setString(2, corsOrigin.getOrigin());\n+                preparedStatement.executeUpdate();\n+            }\n+            IdentityDatabaseUtil.commitTransaction(commitConnection);\n+        } catch (SQLException e) {\n+            IdentityDatabaseUtil.rollbackTransaction(commitConnection);\n+            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(retrieveConnection, null, preparedStatement);\n+            IdentityDatabaseUtil.closeConnection(commitConnection);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void updateCORSOriginById(String corsOriginId, CORSOrigin corsOrigin) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOriginById(String corsOriginId) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.DELETE_CORS_ORIGIN_BY_ID);\n+            preparedStatement.setString(1, corsOriginId);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_ORIGIN_DELETE, e, corsOriginId);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, null, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteAllCORSOriginsByTenantDomain(String tenantDomain) throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        try {\n+            preparedStatement = connection.prepareStatement(SQLConstants.DELETE_CORS_ORIGINS_BY_TENANT_ID);\n+            preparedStatement.setString(1, tenantDomain);\n+            preparedStatement.executeUpdate();\n+        } catch (SQLException e) {\n+            throw handleServerException(ERROR_CODE_CORS_DELETE, e, tenantDomain);\n+        } finally {\n+            IdentityDatabaseUtil.closeAllConnections(connection, null, preparedStatement);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteAllCORSOriginsByApplicationId(String tenantDomain, String applicationId)\n+            throws CORSManagementServiceServerException {\n+\n+        PreparedStatement preparedStatement = null;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);", "originalCommit": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5MDE1OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r460690159", "bodyText": "Why we have commented the code in this class?", "author": "ashensw", "createdAt": "2020-07-27T07:15:17Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "diffHunk": "@@ -37,16 +34,16 @@\n     private String origin;\n \n     /**\n-     * App IDs associated with the {@code origin}.\n+     * Applications associated with the {@code origin}.\n      */\n-    private Set<String> appIds;\n+//    private List<CORSApplication> associatedApplications;", "originalCommit": "13b8775d610d6343b0d8412bd9eaf0a1d078d16e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97aee14ae1d77a09725f1ab122c4522c2e5c758d", "url": "https://github.com/wso2/carbon-identity-framework/commit/97aee14ae1d77a09725f1ab122c4522c2e5c758d", "message": "Implement DAO layer for CORS", "committedDate": "2020-07-27T17:51:22Z", "type": "forcePushed"}, {"oid": "d99e30722f371f81601d80cfae4e97aebd0e0dbd", "url": "https://github.com/wso2/carbon-identity-framework/commit/d99e30722f371f81601d80cfae4e97aebd0e0dbd", "message": "Implement DAO layer for CORS", "committedDate": "2020-07-28T00:03:04Z", "type": "forcePushed"}, {"oid": "533e4a9c638bc7876c66ea19a266ead37029ed23", "url": "https://github.com/wso2/carbon-identity-framework/commit/533e4a9c638bc7876c66ea19a266ead37029ed23", "message": "Implement DAO layer for CORS", "committedDate": "2020-07-28T19:33:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzczMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r462007731", "bodyText": "Add the license.", "author": "ashensw", "createdAt": "2020-07-29T02:55:20Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,488 @@\n+package org.wso2.carbon.identity.cors.mgt.core.dao.impl;", "originalCommit": "533e4a9c638bc7876c66ea19a266ead37029ed23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwODMxNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r462008317", "bodyText": "Why this part is commented? Do we need this?", "author": "ashensw", "createdAt": "2020-07-29T02:57:31Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/helper/CORSManagementServiceTestHelper.java", "diffHunk": "@@ -18,41 +18,32 @@\n \n package org.wso2.carbon.identity.cors.mgt.core.helper;\n \n-import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n-import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static org.wso2.carbon.identity.cors.mgt.core.constant.TestConstants.APP_ID_1;\n-import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.TENANT_ASSOCIATION;\n-\n /**\n  * Helper class for CORSServiceTest.\n  */\n public class CORSManagementServiceTestHelper {\n \n-    public static ResourceAdd getSampleTenantResourceAdd(String origin) {\n-\n-        List<Attribute> attributeList = new ArrayList<>();\n-        Attribute attribute = new Attribute(TENANT_ASSOCIATION, \"\");\n-        attributeList.add(attribute);\n-\n-        ResourceAdd resourceAdd = new ResourceAdd();\n-        resourceAdd.setName(origin);\n-        resourceAdd.setAttributes(attributeList);\n-        return resourceAdd;\n-    }\n-\n-    public static ResourceAdd getSampleApplicationResourceAdd(String origin) {\n-\n-        List<Attribute> attributeList = new ArrayList<>();\n-        Attribute attribute = new Attribute(APP_ID_1, \"\");\n-        attributeList.add(attribute);\n-\n-        ResourceAdd resourceAdd = new ResourceAdd();\n-        resourceAdd.setName(origin);\n-        resourceAdd.setAttributes(attributeList);\n-        return resourceAdd;\n-    }\n+//    public static ResourceAdd getSampleTenantResourceAdd(String origin) {", "originalCommit": "533e4a9c638bc7876c66ea19a266ead37029ed23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMDcyMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r462010721", "bodyText": "We don't. Forgot to remove it.\nI'll remove it.", "author": "ivantha", "createdAt": "2020-07-29T03:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwODMxNw=="}], "type": "inlineReview"}, {"oid": "6314b288203f9866f062e7048ec0d769313801b1", "url": "https://github.com/wso2/carbon-identity-framework/commit/6314b288203f9866f062e7048ec0d769313801b1", "message": "Implement DAO layer for CORS", "committedDate": "2020-07-29T05:59:04Z", "type": "forcePushed"}, {"oid": "2ef827e848992c29726bad12c0906d72cf054286", "url": "https://github.com/wso2/carbon-identity-framework/commit/2ef827e848992c29726bad12c0906d72cf054286", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-04T02:42:31Z", "type": "forcePushed"}, {"oid": "9536a9d5f340bca7472217258c205c73410e1905", "url": "https://github.com/wso2/carbon-identity-framework/commit/9536a9d5f340bca7472217258c205c73410e1905", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-04T06:22:28Z", "type": "forcePushed"}, {"oid": "a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5", "url": "https://github.com/wso2/carbon-identity-framework/commit/a5c0de9b51cd0bf70e0b0efd353de0aff9990cc5", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-04T12:37:37Z", "type": "forcePushed"}, {"oid": "78236f30529573f79c9d1147bb8811254869bab4", "url": "https://github.com/wso2/carbon-identity-framework/commit/78236f30529573f79c9d1147bb8811254869bab4", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-04T13:00:34Z", "type": "forcePushed"}, {"oid": "a8e3d5c44d9a7b5b8cbf67d40b2076a2f88f7d0a", "url": "https://github.com/wso2/carbon-identity-framework/commit/a8e3d5c44d9a7b5b8cbf67d40b2076a2f88f7d0a", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-04T14:34:35Z", "type": "forcePushed"}, {"oid": "cedf146f62c5dd1e655421b19714cc429eb59d5d", "url": "https://github.com/wso2/carbon-identity-framework/commit/cedf146f62c5dd1e655421b19714cc429eb59d5d", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-05T06:08:54Z", "type": "forcePushed"}, {"oid": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "url": "https://github.com/wso2/carbon-identity-framework/commit/e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "message": "Remove DAO queue", "committedDate": "2020-08-05T13:54:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMjM1Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466122356", "bodyText": "Shall we add a debug log for here as well?", "author": "ashensw", "createdAt": "2020-08-06T03:23:06Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/CORSManagementServiceHolder.java", "diffHunk": "@@ -38,24 +46,52 @@ public static CORSManagementServiceHolder getInstance() {\n         return SingletonHelper.INSTANCE;\n     }\n \n-    public ConfigurationManager getConfigurationManager() {\n+    public CORSOriginDAO getCorsOriginDAO() {\n \n-        return configurationManager;\n+        return corsOriginDAO;\n     }\n \n-    public void setConfigurationManager(ConfigurationManager configurationManager) {\n+    public void setCorsOriginDAO(CORSOriginDAO corsOriginDAO) {\n+\n+        if (corsOriginDAO == null) {\n+            this.corsOriginDAO = null;", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMjQ3OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466122479", "bodyText": "Shall we add a debug log for here as well?", "author": "ashensw", "createdAt": "2020-08-06T03:23:38Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/CORSManagementServiceHolder.java", "diffHunk": "@@ -38,24 +46,52 @@ public static CORSManagementServiceHolder getInstance() {\n         return SingletonHelper.INSTANCE;\n     }\n \n-    public ConfigurationManager getConfigurationManager() {\n+    public CORSOriginDAO getCorsOriginDAO() {\n \n-        return configurationManager;\n+        return corsOriginDAO;\n     }\n \n-    public void setConfigurationManager(ConfigurationManager configurationManager) {\n+    public void setCorsOriginDAO(CORSOriginDAO corsOriginDAO) {\n+\n+        if (corsOriginDAO == null) {\n+            this.corsOriginDAO = null;\n+        } else if (corsOriginDAO.getPriority() > this.corsOriginDAO.getPriority()) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(String.format(\"Replacing the CORSOriginDAO of priority %s \" +\n+                                \"with a CORSOriginDAO of priority %s.\",\n+                        this.corsOriginDAO.getPriority(), corsOriginDAO.getPriority()));\n+            }\n+            this.corsOriginDAO = corsOriginDAO;\n+        }\n+    }\n \n-        this.configurationManager = configurationManager;\n+    public CORSConfigurationDAO getCorsConfigurationDAO() {\n+\n+        return corsConfigurationDAO;\n     }\n \n-    public CORSManagementService getCorsManagementService() {\n+    public void setCorsConfigurationDAO(CORSConfigurationDAO corsConfigurationDAO) {\n+\n+        if (corsConfigurationDAO == null) {\n+            this.corsConfigurationDAO = null;", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI3Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466123276", "bodyText": "What's the usage of this?", "author": "ashensw", "createdAt": "2020-08-06T03:26:41Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -75,396 +55,238 @@\n \n     private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public List<CORSOrigin> getTenantCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(TENANT_ASSOCIATION)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public List<CORSOrigin> getApplicationCORSOrigins(String tenantDomain, String appId)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(appId)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public void setTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        setCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByTenantId(tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void setApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public List<CORSOrigin> getApplicationCORSOrigins(String applicationId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        setCORSOrigins(tenantDomain, appId, origins);\n-    }\n-\n-    @Override\n-    public void addTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        addCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void addApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public void setCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        addCORSOrigins(tenantDomain, appId, origins);\n-    }\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-    @Override\n-    public void deleteTenantCORSOrigins(String tenantDomain, List<String> originIds)\n-            throws CORSManagementServiceException {\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n \n-        validateTenantDomain(tenantDomain);\n-        deleteCORSOrigins(tenantDomain, TENANT_ASSOCIATION, originIds);\n+        // Set the CORS origins.\n+        getCORSOriginDAO().setCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void deleteApplicationCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    public void addCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        deleteCORSOrigins(tenantDomain, appId, originIds);\n-    }\n-\n-    @Override\n-    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resource resource = getResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, CORS_CONFIGURATION_RESOURCE_NAME);\n-            CORSConfiguration corsConfiguration;\n-            if (resource == null) {\n-                corsConfiguration = CORSConfigurationUtils.getServerCORSConfiguration();\n-            } else {\n-                corsConfiguration = new ResourceToCORSConfiguration().apply(resource);\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n+\n+        // Check if the CORS origins are already present.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n+            if (existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList())\n+                    .contains(validatedOrigin.getValue())) {\n+                // CORS origin is already registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain, validatedOrigin));\n+                }\n+                throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, validatedOrigin.getValue());\n             }\n-            return corsConfiguration;\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n \n-    @Override\n-    public void setCORSConfiguration(String tenantDomain, CORSConfiguration corsConfiguration)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            ResourceAdd resourceAdd = new CORSConfigurationToResourceAdd().apply(corsConfiguration);\n-            getConfigurationManager().replaceResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, resourceAdd);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n-    }\n-\n-    private List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n-\n-        List<CORSOrigin> corsOrigins;\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resources resources = getResources(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n-            corsOrigins = resources.getResources().stream().map(new ResourceToCORSOrigin())\n-                    .collect(Collectors.toList());\n-            return Collections.unmodifiableList(corsOrigins);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Add the CORS origins.\n+        getCORSOriginDAO().addCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId\n+        );\n     }\n \n-    private void setCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOrigins(String applicationId, List<String> originIds, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Delete all CORS origins from the tenant.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, corsOrigin.getOrigin());\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Check if the CORS origins are not in the system.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (String originId : originIds) {\n+            if (!existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList()).contains(originId)) {\n+                // CORS origin is not registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain, originId));\n                 }\n+                throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, originId);\n             }\n-\n-            // Save ValidatedOrigins in the Configuration Management store.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                CORSOrigin corsOrigin = new CORSOrigin();\n-                corsOrigin.setOrigin(validatedOrigin.getValue());\n-                corsOrigin.setAppIds(Collections.singleton(appId));\n-                ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n-\n-    private void addCORSOrigins(String tenantDomain, String appId, List<String> origins)\n-            throws CORSManagementServiceException {\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n \n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Check if the CORS origin is already registered.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is already registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain,\n-                                    validatedOrigin));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain,\n-                                validatedOrigin.getValue());\n-                    }\n-                }\n-            }\n-\n-            // Add CORS origins.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-\n-                // Resource is null. Set the new origin resource.\n-                // i.e Add origin at the tenant level.\n-                if (resource == null) {\n-                    CORSOrigin corsOrigin = new CORSOrigin();\n-                    corsOrigin.setOrigin(validatedOrigin.getValue());\n-                    ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                    Attribute attribute = new Attribute(appId, \"\");\n-                    List<Attribute> attributes = Collections.singletonList(attribute);\n-                    resourceAdd.setAttributes(attributes);\n-                    getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Delete the CORS origin application associations.\n+        getCORSOriginDAO().deleteCORSOrigins(applicationBasicInfo.getApplicationId(), originIds, tenantId);\n     }\n \n-    private void deleteCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSApplication> getCORSApplicationsByCORSOriginId(String corsOriginId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Check if the CORS origin is not registered.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (!corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is not registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                    originID));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                                originID);\n-                    }\n-                } else {\n-                    // CORS origin is not registered for the appId.\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                originID));\n-                    }\n-                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                            originID);\n-                }\n-            }\n-\n-            // Delete CORS origins from the application.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                // Remove the origin association for the tenant/application.\n-                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                        resource.getResourceName(), appId);\n-                resource = getResourceById(originID);\n-                if (resource.getAttributes().isEmpty()) {\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                            resource.getResourceName());\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_DELETE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // DAO layer throws an exception if CORSApplications cannot be retrieved for the corsOriginId.\n+        // i.e The corsOriginId is invalid.\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginApplications(corsOriginId));\n     }\n \n     /**\n-     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n-     *\n-     * @return ConfigurationManager The ConfigurationManager instance.\n+     * {@inheritDoc}\n      */\n-    private ConfigurationManager getConfigurationManager() {\n+    @Override\n+    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n \n-        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+        getTenantId(tenantDomain);", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNjk1Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466126952", "bodyText": "Calling this function with the tenantDomain validates it.", "author": "ivantha", "createdAt": "2020-08-06T03:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODYzMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466128633", "bodyText": "I added a separate function for this.", "author": "ivantha", "createdAt": "2020-08-06T03:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI5Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466123292", "bodyText": "What's the usage of this?", "author": "ashensw", "createdAt": "2020-08-06T03:26:46Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -75,396 +55,238 @@\n \n     private static final Log log = LogFactory.getLog(CORSManagementServiceImpl.class);\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public List<CORSOrigin> getTenantCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(TENANT_ASSOCIATION)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public List<CORSOrigin> getApplicationCORSOrigins(String tenantDomain, String appId)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-        return getCORSOrigins(tenantDomain).stream().filter(corsOrigin -> corsOrigin.getAppIds()\n-                .contains(appId)).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public void setTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        setCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByTenantId(tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void setApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public List<CORSOrigin> getApplicationCORSOrigins(String applicationId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        setCORSOrigins(tenantDomain, appId, origins);\n-    }\n-\n-    @Override\n-    public void addTenantCORSOrigins(String tenantDomain, List<String> origins) throws CORSManagementServiceException {\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-        validateTenantDomain(tenantDomain);\n-        addCORSOrigins(tenantDomain, TENANT_ASSOCIATION, origins);\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void addApplicationCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    public void setCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        addCORSOrigins(tenantDomain, appId, origins);\n-    }\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n \n-    @Override\n-    public void deleteTenantCORSOrigins(String tenantDomain, List<String> originIds)\n-            throws CORSManagementServiceException {\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n \n-        validateTenantDomain(tenantDomain);\n-        deleteCORSOrigins(tenantDomain, TENANT_ASSOCIATION, originIds);\n+        // Set the CORS origins.\n+        getCORSOriginDAO().setCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public void deleteApplicationCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    public void addCORSOrigins(String applicationId, List<String> origins, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        validateTenantDomain(tenantDomain);\n-        validateApplicationId(tenantDomain, appId);\n-        deleteCORSOrigins(tenantDomain, appId, originIds);\n-    }\n-\n-    @Override\n-    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resource resource = getResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, CORS_CONFIGURATION_RESOURCE_NAME);\n-            CORSConfiguration corsConfiguration;\n-            if (resource == null) {\n-                corsConfiguration = CORSConfigurationUtils.getServerCORSConfiguration();\n-            } else {\n-                corsConfiguration = new ResourceToCORSConfiguration().apply(resource);\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Convert Origins to ValidatedOrigins.\n+        List<ValidatedOrigin> validatedOrigins = originsToValidatedOrigins(origins);\n+\n+        // Check if the CORS origins are already present.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n+            if (existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList())\n+                    .contains(validatedOrigin.getValue())) {\n+                // CORS origin is already registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain, validatedOrigin));\n+                }\n+                throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain, validatedOrigin.getValue());\n             }\n-            return corsConfiguration;\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n \n-    @Override\n-    public void setCORSConfiguration(String tenantDomain, CORSConfiguration corsConfiguration)\n-            throws CORSManagementServiceException {\n-\n-        validateTenantDomain(tenantDomain);\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            ResourceAdd resourceAdd = new CORSConfigurationToResourceAdd().apply(corsConfiguration);\n-            getConfigurationManager().replaceResource(CORS_CONFIGURATION_RESOURCE_TYPE_NAME, resourceAdd);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_CONFIG_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n-    }\n-\n-    private List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n-\n-        List<CORSOrigin> corsOrigins;\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            Resources resources = getResources(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n-            corsOrigins = resources.getResources().stream().map(new ResourceToCORSOrigin())\n-                    .collect(Collectors.toList());\n-            return Collections.unmodifiableList(corsOrigins);\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Add the CORS origins.\n+        getCORSOriginDAO().addCORSOrigins(applicationBasicInfo.getApplicationId(),\n+                validatedOrigins.stream().map(validatedOrigin -> {\n+                    // Create the CORS origin.\n+                    CORSOrigin corsOrigin = new CORSOrigin();\n+                    corsOrigin.setOrigin(validatedOrigin.getValue());\n+                    return corsOrigin;\n+                }).collect(Collectors.toList()), tenantId\n+        );\n     }\n \n-    private void setCORSOrigins(String tenantDomain, String appId, List<String> origins)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteCORSOrigins(String applicationId, List<String> originIds, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Delete all CORS origins from the tenant.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, corsOrigin.getOrigin());\n+        int tenantId = getTenantId(tenantDomain);\n+        ApplicationBasicInfo applicationBasicInfo = getApplicationBasicInfo(applicationId, tenantDomain);\n+\n+        // Check if the CORS origins are not in the system.\n+        List<CORSOrigin> existingCORSOrigins = getCORSOriginDAO().getCORSOriginsByApplicationId(\n+                applicationBasicInfo.getApplicationId(), tenantId);\n+        for (String originId : originIds) {\n+            if (!existingCORSOrigins.stream().map(CORSOrigin::getId).collect(Collectors.toList()).contains(originId)) {\n+                // CORS origin is not registered for the application.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain, originId));\n                 }\n+                throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain, originId);\n             }\n-\n-            // Save ValidatedOrigins in the Configuration Management store.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                CORSOrigin corsOrigin = new CORSOrigin();\n-                corsOrigin.setOrigin(validatedOrigin.getValue());\n-                corsOrigin.setAppIds(Collections.singleton(appId));\n-                ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_SET, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n         }\n-    }\n-\n-    private void addCORSOrigins(String tenantDomain, String appId, List<String> origins)\n-            throws CORSManagementServiceException {\n-\n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n \n-            // Convert Origins to ValidatedOrigins.\n-            List<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n-            for (String origin : origins) {\n-                validatedOrigins.add(new ValidatedOrigin(origin));\n-            }\n-\n-            // Check if the CORS origin is already registered.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is already registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_PRESENT.getMessage(), tenantDomain,\n-                                    validatedOrigin));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_PRESENT, tenantDomain,\n-                                validatedOrigin.getValue());\n-                    }\n-                }\n-            }\n-\n-            // Add CORS origins.\n-            for (ValidatedOrigin validatedOrigin : validatedOrigins) {\n-                Resource resource = getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, validatedOrigin.getValue());\n-\n-                // Resource is null. Set the new origin resource.\n-                // i.e Add origin at the tenant level.\n-                if (resource == null) {\n-                    CORSOrigin corsOrigin = new CORSOrigin();\n-                    corsOrigin.setOrigin(validatedOrigin.getValue());\n-                    ResourceAdd resourceAdd = new CORSOriginToResourceAdd().apply(corsOrigin);\n-                    Attribute attribute = new Attribute(appId, \"\");\n-                    List<Attribute> attributes = Collections.singletonList(attribute);\n-                    resourceAdd.setAttributes(attributes);\n-                    getConfigurationManager().addResource(CORS_ORIGIN_RESOURCE_TYPE_NAME, resourceAdd);\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_ADD, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // Delete the CORS origin application associations.\n+        getCORSOriginDAO().deleteCORSOrigins(applicationBasicInfo.getApplicationId(), originIds, tenantId);\n     }\n \n-    private void deleteCORSOrigins(String tenantDomain, String appId, List<String> originIds)\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<CORSApplication> getCORSApplicationsByCORSOriginId(String corsOriginId, String tenantDomain)\n             throws CORSManagementServiceException {\n \n-        try {\n-            FrameworkUtils.startTenantFlow(tenantDomain);\n-\n-            // Check if the CORS origin is not registered.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                if (resource != null) {\n-                    CORSOrigin corsOrigin = new ResourceToCORSOrigin().apply(resource);\n-                    if (!corsOrigin.getAppIds().contains(appId)) {\n-                        // CORS origin is not registered for the appId.\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                    originID));\n-                        }\n-                        throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                                originID);\n-                    }\n-                } else {\n-                    // CORS origin is not registered for the appId.\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(String.format(ERROR_CODE_ORIGIN_NOT_PRESENT.getMessage(), tenantDomain,\n-                                originID));\n-                    }\n-                    throw handleClientException(ERROR_CODE_ORIGIN_NOT_PRESENT, tenantDomain,\n-                            originID);\n-                }\n-            }\n-\n-            // Delete CORS origins from the application.\n-            for (String originID : originIds) {\n-                Resource resource = getResourceById(originID);\n-                // Remove the origin association for the tenant/application.\n-                getConfigurationManager().deleteAttribute(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                        resource.getResourceName(), appId);\n-                resource = getResourceById(originID);\n-                if (resource.getAttributes().isEmpty()) {\n-                    getConfigurationManager().deleteResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                            resource.getResourceName());\n-                }\n-            }\n-        } catch (ConfigurationManagementException e) {\n-            throw handleServerException(ERROR_CODE_CORS_DELETE, e, tenantDomain);\n-        } finally {\n-            FrameworkUtils.endTenantFlow();\n-        }\n+        // DAO layer throws an exception if CORSApplications cannot be retrieved for the corsOriginId.\n+        // i.e The corsOriginId is invalid.\n+        return Collections.unmodifiableList(getCORSOriginDAO().getCORSOriginApplications(corsOriginId));\n     }\n \n     /**\n-     * Retrieve the ConfigurationManager instance from the CORSServiceHolder.\n-     *\n-     * @return ConfigurationManager The ConfigurationManager instance.\n+     * {@inheritDoc}\n      */\n-    private ConfigurationManager getConfigurationManager() {\n+    @Override\n+    public CORSConfiguration getCORSConfiguration(String tenantDomain) throws CORSManagementServiceException {\n \n-        return CORSManagementServiceHolder.getInstance().getConfigurationManager();\n+        getTenantId(tenantDomain);\n+\n+        return getCORSConfigurationDAO().getCORSConfigurationByTenantDomain(tenantDomain);\n     }\n \n     /**\n-     * Configuration Management API returns a ConfigurationManagementException with the error code CONFIGM_00017 when\n-     * resource is not found. This method wraps the original method and returns null if the resource is not found.\n-     *\n-     * @param resourceTypeName Resource type name.\n-     * @param resourceName     Resource name.\n-     * @return Retrieved resource from the configuration store. Returns {@code null} if the resource is not found.\n-     * @throws ConfigurationManagementException\n+     * {@inheritDoc}\n      */\n-    private Resource getResource(String resourceTypeName, String resourceName) throws ConfigurationManagementException {\n+    @Override\n+    public void setCORSConfiguration(CORSConfiguration corsConfiguration, String tenantDomain)\n+            throws CORSManagementServiceException {\n \n-        try {\n-            return getConfigurationManager().getResource(resourceTypeName, resourceName);\n-        } catch (ConfigurationManagementException e) {\n-            if (e.getErrorCode().equals(ERROR_CODE_RESOURCE_DOES_NOT_EXISTS.getCode())) {\n-                return null;\n-            } else {\n-                throw e;\n-            }\n-        }\n+        getTenantId(tenantDomain);", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNjk4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466126983", "bodyText": "Calling this function with the tenantDomain validates it.", "author": "ivantha", "createdAt": "2020-08-06T03:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODYwMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466128602", "bodyText": "I added a separate function for this.", "author": "ivantha", "createdAt": "2020-08-06T03:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNTU1Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466125553", "bodyText": "Shall we add a try-catch block as done in here. Otherwise it will be difficult to identify if something goes wrong during the activation.", "author": "ashensw", "createdAt": "2020-08-06T03:35:43Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/CORSManagementServiceComponent.java", "diffHunk": "@@ -50,8 +55,13 @@\n     @Activate\n     protected void activate(ComponentContext context) {\n \n-        context.getBundleContext()\n-                .registerService(CORSManagementService.class, new CORSManagementServiceImpl(), null);\n+        BundleContext bundleContext = context.getBundleContext();\n+        bundleContext.registerService(CORSOriginDAO.class,\n+                new CORSOriginDAOImpl(), null);\n+        bundleContext.registerService(CORSConfigurationDAO.class,\n+                new CORSConfigurationDAOImpl(), null);\n+\n+        bundleContext.registerService(CORSManagementService.class, new CORSManagementServiceImpl(), null);", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTEyNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129127", "bodyText": "Update the license.", "author": "ashensw", "createdAt": "2020-08-06T03:49:44Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSOriginDAOImpl.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTI3NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129275", "bodyText": "Update the license.", "author": "ashensw", "createdAt": "2020-08-06T03:50:16Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/impl/CORSConfigurationDAOImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTMyOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129328", "bodyText": "Update the license.", "author": "ashensw", "createdAt": "2020-08-06T03:50:30Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/CORSOriginDAO.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyOTM0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r466129347", "bodyText": "Update the license.", "author": "ashensw", "createdAt": "2020-08-06T03:50:36Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/dao/CORSConfigurationDAO.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "e7d0d3b5c0ec7fcd142f7459f02368e5729218f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2fde90e78e1a79313975a416bc1d79d3bc3bcb0", "url": "https://github.com/wso2/carbon-identity-framework/commit/a2fde90e78e1a79313975a416bc1d79d3bc3bcb0", "message": "Remove DAO queue", "committedDate": "2020-08-06T03:50:21Z", "type": "forcePushed"}, {"oid": "5a3d8607061c701fb4806d84ceed10830bf94d3f", "url": "https://github.com/wso2/carbon-identity-framework/commit/5a3d8607061c701fb4806d84ceed10830bf94d3f", "message": "Remove DAO queue", "committedDate": "2020-08-06T03:50:47Z", "type": "forcePushed"}, {"oid": "809aea42c0f21ce95932cce50962104ba6f76693", "url": "https://github.com/wso2/carbon-identity-framework/commit/809aea42c0f21ce95932cce50962104ba6f76693", "message": "Remove DAO queue", "committedDate": "2020-08-06T03:53:48Z", "type": "forcePushed"}, {"oid": "19e728bfa4478e211c063ed81ff5310b0daf2e6b", "url": "https://github.com/wso2/carbon-identity-framework/commit/19e728bfa4478e211c063ed81ff5310b0daf2e6b", "message": "Remove DAO queue", "committedDate": "2020-08-06T06:38:29Z", "type": "forcePushed"}, {"oid": "342f87a9eff0775eb634881f3a302867a1e2c3d0", "url": "https://github.com/wso2/carbon-identity-framework/commit/342f87a9eff0775eb634881f3a302867a1e2c3d0", "message": "Implement DAO layer for CORS", "committedDate": "2020-08-06T12:13:58Z", "type": "commit"}, {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf", "url": "https://github.com/wso2/carbon-identity-framework/commit/cc731d5389bb3174b0ab2379446a21aa2f756edf", "message": "Remove DAO queue", "committedDate": "2020-08-06T12:13:58Z", "type": "commit"}, {"oid": "cc731d5389bb3174b0ab2379446a21aa2f756edf", "url": "https://github.com/wso2/carbon-identity-framework/commit/cc731d5389bb3174b0ab2379446a21aa2f756edf", "message": "Remove DAO queue", "committedDate": "2020-08-06T12:13:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTI4MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r498619281", "bodyText": "Missing license", "author": "omindu", "createdAt": "2020-10-02T05:01:15Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/ErrorUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;", "originalCommit": "cc731d5389bb3174b0ab2379446a21aa2f756edf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NzI5Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r499177293", "bodyText": "Fixed in #3145", "author": "ivantha", "createdAt": "2020-10-03T19:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTI5MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r498619291", "bodyText": "Missing license", "author": "omindu", "createdAt": "2020-10-02T05:01:21Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSApplication.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.wso2.carbon.identity.cors.mgt.core.model;", "originalCommit": "cc731d5389bb3174b0ab2379446a21aa2f756edf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NzI5OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3029#discussion_r499177298", "bodyText": "Fixed in #3145", "author": "ivantha", "createdAt": "2020-10-03T19:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTI5MQ=="}], "type": "inlineReview"}]}