{"pr_number": 3027, "pr_title": "Add config to enable deprecated APIs", "pr_createdAt": "2020-07-23T10:45:53Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3027", "timeline": [{"oid": "64fcfeee2bf79f05de345706ce2aa327df885978", "url": "https://github.com/wso2/carbon-identity-framework/commit/64fcfeee2bf79f05de345706ce2aa327df885978", "message": "Add legacy feature configuration", "committedDate": "2020-07-23T10:32:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyMTM0OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460021348", "bodyText": "let;s make the constructor of this class private", "author": "emswbandara", "createdAt": "2020-07-24T12:27:58Z", "path": "components/identity-core/org.wso2.carbon.identity.base/src/main/java/org/wso2/carbon/identity/base/IdentityConstants.java", "diffHunk": "@@ -513,4 +513,16 @@ private IdentityConstants() {\n         public static final String MAX_AGE = \"CORS.MaxAge\";\n         public static final String TAG_REQUESTS = \"CORS.TagRequests\";\n     }\n+\n+    /**\n+     * Contains the constants related to Legacy Feature config elements.\n+     */\n+    public static class LegacyFeatureConfigElements {", "originalCommit": "64fcfeee2bf79f05de345706ce2aa327df885978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNzc1Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460527757", "bodyText": "Why do we need to make this constructor private? I need to access this constructor from out of this package.", "author": "GANGANI", "createdAt": "2020-07-26T13:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyMTM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTU3MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460029570", "bodyText": "shouldn't this be <LegacyFeature>", "author": "emswbandara", "createdAt": "2020-07-24T12:45:21Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityConfigParser.java", "diffHunk": "@@ -374,6 +386,60 @@ private void buildCookieConfig()    {\n         }\n     }\n \n+    public void buildLegacyFeatureConfig() {\n+\n+        LegacyFeatureConfig legacyFeatureConfig;\n+        OMElement legacyFeaturesConfigElement =\n+                this.getConfigElement(IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_CONFIG);\n+        if (legacyFeaturesConfigElement != null) {\n+\n+            int legacyFeaturesConfigElementIndex = 0;\n+            Iterator<OMElement> legacyFeatures = legacyFeaturesConfigElement.\n+                    getChildrenWithName(getQNameWithIdentityNS(IdentityConstants.\n+                            LegacyFeatureConfigElements.LEGACY_FEATURE));\n+            if (legacyFeatures != null) {\n+                while (legacyFeatures.hasNext()) {\n+                    legacyFeaturesConfigElementIndex += 1;\n+                    OMElement legacyFeature = legacyFeatures.next();\n+\n+                    OMElement legacyFeatureIdElement = legacyFeature.getFirstChildWithName(getQNameWithIdentityNS(\n+                            IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_ID));\n+                    OMElement legacyFeatureVersionElement = legacyFeature.getFirstChildWithName(getQNameWithIdentityNS(\n+                            IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_VERSION));\n+                    OMElement legacyFeatureEnableElement = legacyFeature.getFirstChildWithName(getQNameWithIdentityNS(\n+                            IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_ENABLE));\n+\n+                    String legacyFeatureId;\n+                    String legacyFeatureVersion;\n+                    boolean isLegacyFeatureEnable = false;\n+                    if (legacyFeatureIdElement != null && legacyFeatureVersionElement != null\n+                            && legacyFeatureEnableElement != null) {\n+                        legacyFeatureId = legacyFeatureIdElement.getText();\n+                        if (StringUtils.isNotBlank(legacyFeatureId)) {\n+                            legacyFeatureId = legacyFeatureId.trim();\n+                        }\n+                        legacyFeatureVersion = legacyFeatureVersionElement.getText();\n+                        if (StringUtils.isNotBlank(legacyFeatureVersion)) {\n+                            legacyFeatureVersion = legacyFeatureVersion.trim();\n+                        }\n+                        String legacyFeatureEnable = legacyFeatureEnableElement.getText();\n+                        if (StringUtils.isNotBlank(legacyFeatureEnable)) {\n+                            isLegacyFeatureEnable = Boolean.parseBoolean(legacyFeatureEnable.trim());\n+                        }\n+\n+                        String legacyFeatureConfigKey = legacyFeatureId + legacyFeatureVersion;\n+                        legacyFeatureConfig = new LegacyFeatureConfig(legacyFeatureId, legacyFeatureVersion,\n+                                isLegacyFeatureEnable);\n+                        legacyFeatureConfigurationHolder.put(legacyFeatureConfigKey, legacyFeatureConfig);\n+                    } else {\n+                        log.warn(\"Configured <Feature> element at index: \" + legacyFeaturesConfigElementIndex +", "originalCommit": "64fcfeee2bf79f05de345706ce2aa327df885978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNzc5MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460527791", "bodyText": "Fixed 76ad8e0", "author": "GANGANI", "createdAt": "2020-07-26T13:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyOTU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMDQ3NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460030474", "bodyText": "add nullcheck on legacyFeatureId and legacyFeatureVersion. If Id is null, return. However feature version can be allowed to be null in the case of identity/connect/dcr. That should be handled properly", "author": "emswbandara", "createdAt": "2020-07-24T12:47:09Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java", "diffHunk": "@@ -214,11 +216,41 @@ public static IdentityCookieConfig getIdentityCookieConfig(String cookieName) {\n         return identityCookiesConfigurationHolder;\n     }\n \n+    /**\n+     * This method can use to check whether the legacy feature for the given legacy feature id is enabled or not\n+     *\n+     * @param legacyFeatureId      Legacy feature id.\n+     * @param legacyFeatureVersion Legacy feature version.\n+     * @return Whether the legacy feature is enabled or not.\n+     */\n+    public static boolean isLegacyFeatureEnabled(String legacyFeatureId, String legacyFeatureVersion) {\n+\n+        String legacyFeatureConfig = legacyFeatureId.trim() + legacyFeatureVersion.trim();", "originalCommit": "64fcfeee2bf79f05de345706ce2aa327df885978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyODAwNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460528007", "bodyText": "Fixed 76ad8e0", "author": "GANGANI", "createdAt": "2020-07-26T13:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMDQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMTAwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460031001", "bodyText": "let's log the version also", "author": "emswbandara", "createdAt": "2020-07-24T12:48:16Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java", "diffHunk": "@@ -214,11 +216,41 @@ public static IdentityCookieConfig getIdentityCookieConfig(String cookieName) {\n         return identityCookiesConfigurationHolder;\n     }\n \n+    /**\n+     * This method can use to check whether the legacy feature for the given legacy feature id is enabled or not\n+     *\n+     * @param legacyFeatureId      Legacy feature id.\n+     * @param legacyFeatureVersion Legacy feature version.\n+     * @return Whether the legacy feature is enabled or not.\n+     */\n+    public static boolean isLegacyFeatureEnabled(String legacyFeatureId, String legacyFeatureVersion) {\n+\n+        String legacyFeatureConfig = legacyFeatureId.trim() + legacyFeatureVersion.trim();\n+        if (StringUtils.isNotBlank(legacyFeatureConfig)) {\n+            LegacyFeatureConfig legacyFeatureConfiguration =\n+                    legacyFeatureConfigurationHolder.get(legacyFeatureConfig);\n+            if (legacyFeatureConfiguration != null && legacyFeatureConfiguration.isEnabled()) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Legacy feature id: \" + legacyFeatureConfiguration.getId() +", "originalCommit": "64fcfeee2bf79f05de345706ce2aa327df885978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNzk0Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r460527942", "bodyText": "Fixed 76ad8e0", "author": "GANGANI", "createdAt": "2020-07-26T13:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMTAwMQ=="}], "type": "inlineReview"}, {"oid": "76ad8e0307b509aefc1c7e7716756ad143850105", "url": "https://github.com/wso2/carbon-identity-framework/commit/76ad8e0307b509aefc1c7e7716756ad143850105", "message": "Address comment", "committedDate": "2020-07-26T13:21:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2OTkyMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r483969922", "bodyText": "Java doc comment for a public method missing", "author": "senthalan", "createdAt": "2020-09-05T17:18:33Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityConfigParser.java", "diffHunk": "@@ -374,6 +386,60 @@ private void buildCookieConfig()    {\n         }\n     }\n \n+    public void buildLegacyFeatureConfig() {", "originalCommit": "76ad8e0307b509aefc1c7e7716756ad143850105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM5ODQ5NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r487398494", "bodyText": "Fixed 0b1c211", "author": "GANGANI", "createdAt": "2020-09-12T11:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2OTkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MzU1OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r487373559", "bodyText": "wasn't better to add a seperater between the feature id and version.", "author": "senthalan", "createdAt": "2020-09-12T06:00:44Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityConfigParser.java", "diffHunk": "@@ -374,6 +386,60 @@ private void buildCookieConfig()    {\n         }\n     }\n \n+    public void buildLegacyFeatureConfig() {\n+\n+        LegacyFeatureConfig legacyFeatureConfig;\n+        OMElement legacyFeaturesConfigElement =\n+                this.getConfigElement(IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_CONFIG);\n+        if (legacyFeaturesConfigElement != null) {\n+\n+            int legacyFeaturesConfigElementIndex = 0;\n+            Iterator<OMElement> legacyFeatures = legacyFeaturesConfigElement.\n+                    getChildrenWithName(getQNameWithIdentityNS(IdentityConstants.\n+                            LegacyFeatureConfigElements.LEGACY_FEATURE));\n+            if (legacyFeatures != null) {\n+                while (legacyFeatures.hasNext()) {\n+                    legacyFeaturesConfigElementIndex += 1;\n+                    OMElement legacyFeature = legacyFeatures.next();\n+\n+                    OMElement legacyFeatureIdElement = legacyFeature.getFirstChildWithName(getQNameWithIdentityNS(\n+                            IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_ID));\n+                    OMElement legacyFeatureVersionElement = legacyFeature.getFirstChildWithName(getQNameWithIdentityNS(\n+                            IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_VERSION));\n+                    OMElement legacyFeatureEnableElement = legacyFeature.getFirstChildWithName(getQNameWithIdentityNS(\n+                            IdentityConstants.LegacyFeatureConfigElements.LEGACY_FEATURE_ENABLE));\n+\n+                    String legacyFeatureId;\n+                    String legacyFeatureVersion;\n+                    boolean isLegacyFeatureEnable = false;\n+                    if (legacyFeatureIdElement != null && legacyFeatureVersionElement != null\n+                            && legacyFeatureEnableElement != null) {\n+                        legacyFeatureId = legacyFeatureIdElement.getText();\n+                        if (StringUtils.isNotBlank(legacyFeatureId)) {\n+                            legacyFeatureId = legacyFeatureId.trim();\n+                        }\n+                        legacyFeatureVersion = legacyFeatureVersionElement.getText();\n+                        if (StringUtils.isNotBlank(legacyFeatureVersion)) {\n+                            legacyFeatureVersion = legacyFeatureVersion.trim();\n+                        }\n+                        String legacyFeatureEnable = legacyFeatureEnableElement.getText();\n+                        if (StringUtils.isNotBlank(legacyFeatureEnable)) {\n+                            isLegacyFeatureEnable = Boolean.parseBoolean(legacyFeatureEnable.trim());\n+                        }\n+\n+                        String legacyFeatureConfigKey = legacyFeatureId + legacyFeatureVersion;", "originalCommit": "76ad8e0307b509aefc1c7e7716756ad143850105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM5ODIzNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r487398235", "bodyText": "In https://github.com/GANGANI/carbon-identity-framework/blob/76ad8e0307b509aefc1c7e7716756ad143850105/components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java#L228-L236, this Map value was used. Since some configs do not have a feature version, adding a separator would not be appropriate when retrieving the value from the Map. WDYT?", "author": "GANGANI", "createdAt": "2020-09-12T11:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NDUyMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r489394523", "bodyText": "Shall we change it as:\nlog.debug(\"Legacy feature is not configured or the configured legacy feature is empty. \" +\n\"Hence returning false.\");", "author": "dewniMW", "createdAt": "2020-09-16T12:23:57Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityUtil.java", "diffHunk": "@@ -214,11 +216,50 @@ public static IdentityCookieConfig getIdentityCookieConfig(String cookieName) {\n         return identityCookiesConfigurationHolder;\n     }\n \n+    /**\n+     * This method can use to check whether the legacy feature for the given legacy feature id is enabled or not\n+     *\n+     * @param legacyFeatureId      Legacy feature id.\n+     * @param legacyFeatureVersion Legacy feature version.\n+     * @return Whether the legacy feature is enabled or not.\n+     */\n+    public static boolean isLegacyFeatureEnabled(String legacyFeatureId, String legacyFeatureVersion) {\n+\n+        String legacyFeatureConfig;\n+        if (StringUtils.isBlank(legacyFeatureId)) {\n+            return false;\n+        }\n+        if (StringUtils.isBlank(legacyFeatureVersion)) {\n+            legacyFeatureConfig = legacyFeatureId.trim();\n+        } else {\n+            legacyFeatureConfig = legacyFeatureId.trim() + legacyFeatureVersion.trim();\n+        }\n+        if (StringUtils.isNotBlank(legacyFeatureConfig)) {\n+            LegacyFeatureConfig legacyFeatureConfiguration =\n+                    legacyFeatureConfigurationHolder.get(legacyFeatureConfig);\n+            if (legacyFeatureConfiguration != null && legacyFeatureConfiguration.isEnabled()) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Legacy feature id: \" + legacyFeatureConfiguration.getId() +\n+                            \" legacy feature version : \" + legacyFeatureConfiguration.getVersion() +\n+                            \" is enabled: \" + legacyFeatureConfiguration.isEnabled());\n+                }\n+                return legacyFeatureConfiguration.isEnabled();\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"legacy feature is not configured or the configured legacy feature is empty. \" +\n+                        \"Hence returning false \");", "originalCommit": "76ad8e0307b509aefc1c7e7716756ad143850105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjYwMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3027#discussion_r489536600", "bodyText": "Fixed 62f2f6e", "author": "GANGANI", "createdAt": "2020-09-16T15:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NDUyMw=="}], "type": "inlineReview"}]}