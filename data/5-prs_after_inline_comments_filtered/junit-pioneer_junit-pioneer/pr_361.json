{"pr_number": 361, "pr_title": "Introduce Issue-Extension with Service-API (#135 / #361)", "pr_createdAt": "2020-10-19T11:41:22Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/361", "timeline": [{"oid": "56ae5eba9a5d70d63f7a0ef03806eac5b31b3dc4", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/56ae5eba9a5d70d63f7a0ef03806eac5b31b3dc4", "message": "Change to abstract class as an interface", "committedDate": "2020-10-19T07:30:52Z", "type": "commit"}, {"oid": "821b3215a3408941bbeb8f10e62fd3346396c3a9", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/821b3215a3408941bbeb8f10e62fd3346396c3a9", "message": "Provide IssueProcessor call it", "committedDate": "2020-10-19T09:09:33Z", "type": "commit"}, {"oid": "90dfe59c126d9e1fe359ceb1457282df75e513ce", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/90dfe59c126d9e1fe359ceb1457282df75e513ce", "message": "Avoid exception if no service provider is present", "committedDate": "2020-10-19T09:20:34Z", "type": "commit"}, {"oid": "36db0150115f1c8d5a2ab2a4c81d4f4a50fcdba0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/36db0150115f1c8d5a2ab2a4c81d4f4a50fcdba0", "message": "IssueExtensionTests", "committedDate": "2020-10-19T09:45:53Z", "type": "commit"}, {"oid": "b0ba7b5e26d124722f1f4a598140a38f8f4ca96f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b0ba7b5e26d124722f1f4a598140a38f8f4ca96f", "message": "IssueExtensionListener Tests", "committedDate": "2020-10-19T09:54:34Z", "type": "commit"}, {"oid": "e90fefad0ba3b3213f10f19e5bd65ad3c187eddc", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e90fefad0ba3b3213f10f19e5bd65ad3c187eddc", "message": "IssueExtensionListener Tests", "committedDate": "2020-10-19T10:16:24Z", "type": "commit"}, {"oid": "acca3c08c66c901d488bf2147acb7ee2f8b50923", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/acca3c08c66c901d488bf2147acb7ee2f8b50923", "message": "Documentation", "committedDate": "2020-10-19T10:55:34Z", "type": "commit"}, {"oid": "50873798ca6e2825e01575de1aaa6b13a1ed7433", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/50873798ca6e2825e01575de1aaa6b13a1ed7433", "message": "Update module-info.java", "committedDate": "2020-10-19T12:01:42Z", "type": "commit"}, {"oid": "57544af67d4dd4b689dc2cc930a4e07e6cf545a1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/57544af67d4dd4b689dc2cc930a4e07e6cf545a1", "message": "Cover toString with test", "committedDate": "2020-10-19T12:14:59Z", "type": "commit"}, {"oid": "e0157e4087c177cf1976e523307889f198828d6b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e0157e4087c177cf1976e523307889f198828d6b", "message": "Remove code smell", "committedDate": "2020-10-19T12:30:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507750532", "bodyText": "Why a List? A Map<String, IssuedTestCase> would make more sense to me. (issue id to tests & results).", "author": "Michael1993", "createdAt": "2020-10-19T13:35:02Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessor.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.List;\n+\n+/**\n+ * This interfaces offers a method to process the results of `@Issue` annotated test cases.\n+ */\n+public interface IssueProcessor {\n+\n+\t/**\n+\t * Processes results of `@Issue` annotated test cases, called {@link IssuedTestCase}.\n+\t *\n+\t * @param allResults List of tests with their unique name, issueId and execution results.\n+\t */\n+\tvoid processTestResults(List<IssuedTestCase> allResults);", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MzcyNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508273727", "bodyText": "Why make it more complex? All information are in the IssuedTestCase and a List is easier than a Map I think.", "author": "Bukama", "createdAt": "2020-10-20T07:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTM3OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520815379", "bodyText": "I'd prefer to pass on more structured information. What about a list of these:\npublic record TestedIssue(String issueId, List<IssueTestCase>) { }\npublic record IssueTestCase(String testId, Status result) { }\nBut obviously not as records. \ud83d\ude0a", "author": "nipafx", "createdAt": "2020-11-10T19:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNzE3Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520817173", "bodyText": "I also think that gathering these information in separate maps is a bit iffy. I prefer richer data structures - maybe a Map<TestId, TestedIssueBuilder>?", "author": "nipafx", "createdAt": "2020-11-10T19:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3MDAyMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r523170020", "bodyText": "I'd prefer to pass on more structured information. What about a list of these:\npublic record TestedIssue(String issueId, List<IssueTestCase>) { }\npublic record IssueTestCase(String testId, Status result) { }\n\n\nChanged\n\nI also think that gathering these information in separate maps is a bit iffy. I prefer richer data structures - maybe a Map<TestId, TestedIssueBuilder>?\n\nI don't understand what you mean with TestedIssueBuilder", "author": "Bukama", "createdAt": "2020-11-13T19:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1MDUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1Mzc2MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507753760", "bodyText": "You only call this once, no? Why not invoke ServiceLoader directly?", "author": "Michael1993", "createdAt": "2020-10-19T13:39:22Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {\n+\t\tString testId = testIdentifier.getUniqueId();\n+\n+\t\t// Check if the report entry is an issue id\n+\t\tMap<String, String> entryKeyValues = entry.getKeyValuePairs();\n+\t\tif (entryKeyValues.containsKey(KEY_ISSUE)) {\n+\t\t\tString issueId = entryKeyValues.get(KEY_ISSUE);\n+\n+\t\t\t// Store that the current test belongs to annotated issue\n+\t\t\tissueTestsCache.putIfAbsent(issueId, new ArrayList<>());\n+\t\t\tissueTestsCache.get(issueId).add(testId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+\t\tif (testIdentifier.isTest()) {\n+\t\t\t// Store test result in cache\n+\t\t\ttestStatusCache.put(testIdentifier.getUniqueId(), testExecutionResult.getStatus().toString());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan testPlan) {\n+\t\t// Retrieve all tests, which are annotated with @Issue, and their result.\n+\t\tfor (Map.Entry<String, List<String>> entry : issueTestsCache.entrySet()) {\n+\t\t\tString issueId = entry.getKey();\n+\t\t\tList<String> allTests = entry.getValue();\n+\n+\t\t\tallTests.forEach(testID -> {\n+\t\t\t\tString status = testStatusCache.getOrDefault(testID, \"UNKNOWN\");\n+\n+\t\t\t\tallIssuedTests.add(new IssuedTestCase(testID, issueId, status));\n+\t\t\t});\n+\t\t}\n+\n+\t\t// Pass results to all IssueProcessors\n+\t\tIterator<IssueProcessor> processors = IssueProcessorProvider.getInstance().providers();", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjA3Ng==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508272076", "bodyText": "The ServiceLoader tutorial I worked with showed it that way, to encapsulate the retrieval of the ServiceLoader.", "author": "Bukama", "createdAt": "2020-10-20T07:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1Mzc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE2OTQ3OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r523169479", "bodyText": "Changed", "author": "Bukama", "createdAt": "2020-11-13T19:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1Mzc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTgzMQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507755831", "bodyText": "It's not a cache.\n\n\"...a cache [...] stores data so that future requests for that data can be served faster\"", "author": "Michael1993", "createdAt": "2020-10-19T13:42:04Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTk5Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507755997", "bodyText": "Also not a cache.", "author": "Michael1993", "createdAt": "2020-10-19T13:42:19Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NzM5MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507757390", "bodyText": "Could you verify the behaviour with a private implementation of IssueProcessor? Then this could be just a local variable.", "author": "Michael1993", "createdAt": "2020-10-19T13:44:11Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2NzU4Mg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508267582", "bodyText": "Then I would add code just for testing in a productive code base, which is bad coding. Package private variables, methods, etc. are best practices for testable code.\nI know that you don't like that (see your comment above about package private method), but I keep this coding style fully minded. I had this discussions for years at my work. I tested my methods and had almost no errors in my code, while colleagues had uncountable amount of errors, because they uses private methods and then claimed, that they could not test their code.", "author": "Bukama", "createdAt": "2020-10-20T07:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NzM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTIwMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507759203", "bodyText": "1.) The Extension is package-private so it can only be invoked via the Issue annotation.\n2.) readIssueIdFromAnnotation throws an exception if the annotation is somehow still not present.\nChecking it in an if (basically the 3rd check) seems like overkill at this point. Worse, I think we should throw an exception if the annotation is missing but the if statement prevents that.", "author": "Michael1993", "createdAt": "2020-10-19T13:46:31Z", "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\t//noinspection unchecked\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Issue.class)) {", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTc2NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507759764", "bodyText": "Why is this package-private? Could this be private?", "author": "Michael1993", "createdAt": "2020-10-19T13:47:13Z", "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\t//noinspection unchecked\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Issue.class)) {\n+\t\t\tString issueId = readIssueIdFromAnnotation(context);\n+\t\t\tcontext.publishReportEntry(KEY, issueId);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Reads the {@code @Issue} value from the annotation.\n+\t * @param context The Extensions context\n+\t * @return The read value\n+\t */\n+\tString readIssueIdFromAnnotation(ExtensionContext context) {", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2MDIzNg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508260236", "bodyText": "Same question, with same answer as in every PR.", "author": "Bukama", "createdAt": "2020-10-20T07:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjE1Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507762153", "bodyText": "The extension makes the assumption that people won't publish report entries with the key \"Issue\". I do not like that.", "author": "Michael1993", "createdAt": "2020-10-19T13:50:30Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2MjM3Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508262377", "bodyText": "I could change it to org.junit-pioneer.issue, but then you still argue, that people want to publish other report entries with this key. Same with every generated value, like an UUID.", "author": "Bukama", "createdAt": "2020-10-20T07:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjQyOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507762428", "bodyText": "Maybe the extension (as a whole) could be simpler if this class implemented the TestWatcher interface? Not quite sure.", "author": "Michael1993", "createdAt": "2020-10-19T13:50:53Z", "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODY4OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508258689", "bodyText": "I don't think so, because (when I understand it correctly) the TestWatcher has a callback for each of the result, but the extension only needs to publish the annotations value.", "author": "Bukama", "createdAt": "2020-10-20T07:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MTYxMQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520781611", "bodyText": "I think it would be very interesting to gather more information that just the test's name, e.g. whether it failed and if so with what exception. But we can leave that for later. Changing the extension point shouldn't matter to the outside world.", "author": "nipafx", "createdAt": "2020-11-10T18:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MjQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2NzIxNA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507767214", "bodyText": "Is this not a duplicate?", "author": "Michael1993", "createdAt": "2020-10-19T13:56:50Z", "path": "src/main/java/org/junitpioneer/jupiter/IssueExtension.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+/**\n+ * This class implements the functionality for the {@code @Issue} annotation.\n+ *\n+ * @see Issue\n+ */\n+class IssueExtension implements BeforeEachCallback {\n+\n+\tstatic final String KEY = \"Issue\";", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjYwNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520806607", "bodyText": "Yes, I removed the duplication.", "author": "nipafx", "createdAt": "2020-11-10T19:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2NzIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3MTM5NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507771394", "bodyText": "Why just the status? You could store all the information you get from JUnit, nicely encapsulated in a TestExecutionResult object...", "author": "Michael1993", "createdAt": "2020-10-19T14:01:03Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {\n+\t\tString testId = testIdentifier.getUniqueId();\n+\n+\t\t// Check if the report entry is an issue id\n+\t\tMap<String, String> entryKeyValues = entry.getKeyValuePairs();\n+\t\tif (entryKeyValues.containsKey(KEY_ISSUE)) {\n+\t\t\tString issueId = entryKeyValues.get(KEY_ISSUE);\n+\n+\t\t\t// Store that the current test belongs to annotated issue\n+\t\t\tissueTestsCache.putIfAbsent(issueId, new ArrayList<>());\n+\t\t\tissueTestsCache.get(issueId).add(testId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+\t\tif (testIdentifier.isTest()) {\n+\t\t\t// Store test result in cache\n+\t\t\ttestStatusCache.put(testIdentifier.getUniqueId(), testExecutionResult.getStatus().toString());", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODg3NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508268874", "bodyText": "The TestExecutionResult only contains the status and maybe a Throwable, but the extension only cares about the status.", "author": "Bukama", "createdAt": "2020-10-20T07:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3MTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3MzU3OA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507773578", "bodyText": "You store things in a Map and then convert the Map into a List.\n1.) Why not just pass the Map to the IssueProcessors?\n2.) Why not create the List directly?", "author": "Michael1993", "createdAt": "2020-10-19T14:03:50Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Cache with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsCache = new ConcurrentHashMap<>();\n+\n+\t// Cache with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusCache = new ConcurrentHashMap<>();\n+\n+\t// Package private by purpose for testing\n+\tList<IssuedTestCase> allIssuedTests = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier testIdentifier, ReportEntry entry) {\n+\t\tString testId = testIdentifier.getUniqueId();\n+\n+\t\t// Check if the report entry is an issue id\n+\t\tMap<String, String> entryKeyValues = entry.getKeyValuePairs();\n+\t\tif (entryKeyValues.containsKey(KEY_ISSUE)) {\n+\t\t\tString issueId = entryKeyValues.get(KEY_ISSUE);\n+\n+\t\t\t// Store that the current test belongs to annotated issue\n+\t\t\tissueTestsCache.putIfAbsent(issueId, new ArrayList<>());\n+\t\t\tissueTestsCache.get(issueId).add(testId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n+\t\tif (testIdentifier.isTest()) {\n+\t\t\t// Store test result in cache\n+\t\t\ttestStatusCache.put(testIdentifier.getUniqueId(), testExecutionResult.getStatus().toString());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan testPlan) {\n+\t\t// Retrieve all tests, which are annotated with @Issue, and their result.\n+\t\tfor (Map.Entry<String, List<String>> entry : issueTestsCache.entrySet()) {\n+\t\t\tString issueId = entry.getKey();\n+\t\t\tList<String> allTests = entry.getValue();\n+\n+\t\t\tallTests.forEach(testID -> {\n+\t\t\t\tString status = testStatusCache.getOrDefault(testID, \"UNKNOWN\");\n+\n+\t\t\t\tallIssuedTests.add(new IssuedTestCase(testID, issueId, status));", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MDI4Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508270287", "bodyText": "Because I combine the entries of two different Maps into a single List.", "author": "Bukama", "createdAt": "2020-10-20T07:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3MzU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NjA1NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507776054", "bodyText": "I think the fields should be only (if you agree with my other comments):\nprivate final String uniqueName;\nprivate final TestExecutionResult result;", "author": "Michael1993", "createdAt": "2020-10-19T14:06:13Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssuedTestCase.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+/**\n+ * Represents the execution result of test method, which is annotated with {@link org.junitpioneer.jupiter.Issue}.\n+ *\n+ * In future java this could be a record.\n+ */\n+public final class IssuedTestCase {\n+\n+\tprivate final String uniqueName;\n+\tprivate final String issueId;\n+\tprivate final String result;", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDczMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508274730", "bodyText": "I don't agree :D", "author": "Bukama", "createdAt": "2020-10-20T07:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NjA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyMTU2Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520821563", "bodyText": "I wanted to recommend TestExecutionResult as well, but it doesn't know the test's id, so we have to store that ourselves anyway. Instead of referencing it, we can just repack the information we need into our own class - see my proposal for IssueTestCase above.", "author": "nipafx", "createdAt": "2020-11-10T19:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NjA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NzI1OA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507777258", "bodyText": "A singleton? Why?!", "author": "Michael1993", "createdAt": "2020-10-19T14:07:08Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessorProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Provider for implementations of the {@link IssueProcessor} interface.\n+ */\n+public class IssueProcessorProvider {\n+\n+\tprivate static IssueProcessorProvider provider;\n+\tprivate ServiceLoader<IssueProcessor> loader;\n+\n+\tprivate IssueProcessorProvider() {\n+\t\tloader = ServiceLoader.load(IssueProcessor.class);\n+\t}\n+\n+\t/**\n+\t * Retrieve an instance of the IssueProcessorProvider.\n+\t *\n+\t * @return Instance of IssueProcessorProvider\n+\t */\n+\tpublic static IssueProcessorProvider getInstance() {", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NDA2Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r508274063", "bodyText": "The tutorial I worked with showed it that way.", "author": "Bukama", "createdAt": "2020-10-20T07:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3MDA5MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r523170091", "bodyText": "Changed", "author": "Bukama", "createdAt": "2020-11-13T19:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NzI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MTM3Ng==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r507781376", "bodyText": "If you insist on this class being necessary, I suggest abandoning the singleton pattern:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic Iterator<IssueProcessor> providers() {\n          \n          \n            \n            \t\treturn loader.iterator();\n          \n          \n            \n            \tpublic static Iterator<IssueProcessor> providers() {\n          \n          \n            \n            \t\treturn ServiceLoader.load(IssueProcessor.class).iterator();", "author": "Michael1993", "createdAt": "2020-10-19T14:11:33Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueProcessorProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Provider for implementations of the {@link IssueProcessor} interface.\n+ */\n+public class IssueProcessorProvider {\n+\n+\tprivate static IssueProcessorProvider provider;\n+\tprivate ServiceLoader<IssueProcessor> loader;\n+\n+\tprivate IssueProcessorProvider() {\n+\t\tloader = ServiceLoader.load(IssueProcessor.class);\n+\t}\n+\n+\t/**\n+\t * Retrieve an instance of the IssueProcessorProvider.\n+\t *\n+\t * @return Instance of IssueProcessorProvider\n+\t */\n+\tpublic static IssueProcessorProvider getInstance() {\n+\t\tif (null == provider) {\n+\t\t\tprovider = new IssueProcessorProvider();\n+\t\t}\n+\n+\t\treturn provider;\n+\t}\n+\n+\t/**\n+\t * Provides all registered service providers.\n+\t *\n+\t * @return All known {@link IssueProcessor}s\n+\t */\n+\tpublic Iterator<IssueProcessor> providers() {\n+\t\treturn loader.iterator();", "originalCommit": "e0157e4087c177cf1976e523307889f198828d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxODU5MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520818591", "bodyText": "I don't see the use for this class either. It just seems to be a wrapper around ServiceLoader.load(IssueProcessor.class). No reason not to call that directly wherever you need it.", "author": "nipafx", "createdAt": "2020-11-10T19:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MTM3Ng=="}], "type": "inlineReview"}, {"oid": "c0cede4ee4ecca05ac93a7a15c72a6f260a09a57", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c0cede4ee4ecca05ac93a7a15c72a6f260a09a57", "message": "Feedback", "committedDate": "2020-10-20T07:04:45Z", "type": "commit"}, {"oid": "ce008f350668d7cb1a31b4158068b9f2e1ee845b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ce008f350668d7cb1a31b4158068b9f2e1ee845b", "message": "Feedback", "committedDate": "2020-10-20T07:38:48Z", "type": "commit"}, {"oid": "63630f5e64ce4aa34c2c41740169ba3f05c4336d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/63630f5e64ce4aa34c2c41740169ba3f05c4336d", "message": "Small changes to documentation and code", "committedDate": "2020-11-10T19:33:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNTk5NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520805995", "bodyText": "This extension isn't stateless. As far as I'm aware, Jupiter doesn't guarantee it will use the same instance for the entire test run (although I couldn't verify that in the user guide). I wanted to propose to use the store to store and retrieve all necessary information, but I just see that TestExecutionListeners don't have access to that (makes sense, because TestExecutionListener doesn't know anything about Jupiter, which is where the store lives).", "author": "nipafx", "createdAt": "2020-11-10T19:03:20Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {\n+\n+\tstatic final String KEY_ISSUE = \"Issue\";\n+\n+\t// Storage with all tests that belong to an issue <issueId, List<UniqueIdentifier>>\n+\tprivate final ConcurrentHashMap<String, List<String>> issueTestsStorage = new ConcurrentHashMap<>();\n+\n+\t// Storage with tests results of test cases <UniqueIdentifier, result>\n+\tprivate final ConcurrentHashMap<String, String> testStatusStorage = new ConcurrentHashMap<>();", "originalCommit": "ce008f350668d7cb1a31b4158068b9f2e1ee845b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyODU4MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520828580", "bodyText": "I think we should include Execution in the name, e.g. IssueExtensionExecutionListener.", "author": "nipafx", "createdAt": "2020-11-10T19:42:38Z", "path": "src/main/java/org/junitpioneer/jupiter/issue/IssueExtensionListener.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.issue;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * <p>This listener collects the names and results of all tests, which are annotated with the {@link org.junitpioneer.jupiter.Issue} annotation.\n+ * After all tests are finished the results are provided to an {@link IssueProcessor} for further processing.</p>\n+ */\n+public class IssueExtensionListener implements TestExecutionListener {", "originalCommit": "ce008f350668d7cb1a31b4158068b9f2e1ee845b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzMTIxOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/361#discussion_r520831218", "bodyText": "This needs to be here for services to work on the module path:\n\tprovides org.junit.platform.launcher.TestExecutionListener\n\t\t\twith org.junitpioneer.jupiter.issue.IssueExtensionListener;\n\n(I wanted to propose a change, but I can't propose one at the end of the file, which is where this should go.)", "author": "nipafx", "createdAt": "2020-11-10T19:47:09Z", "path": "src/main/module/module-info.java", "diffHunk": "@@ -2,6 +2,7 @@\n \trequires org.junit.jupiter.api;\n \trequires org.junit.jupiter.params;\n \trequires org.junit.platform.commons;\n+\trequires org.junit.platform.launcher;\n ", "originalCommit": "ce008f350668d7cb1a31b4158068b9f2e1ee845b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "799d517101d7e1d64240d6fbf4679f61381c9436", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/799d517101d7e1d64240d6fbf4679f61381c9436", "message": "Rename IssueExtensionListener.java", "committedDate": "2020-11-13T17:41:48Z", "type": "commit"}, {"oid": "2ba661f4c3781fdae8db869b8ebf97616aa04127", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2ba661f4c3781fdae8db869b8ebf97616aa04127", "message": "Remove IssueProcessorProvider.java", "committedDate": "2020-11-13T17:51:55Z", "type": "commit"}, {"oid": "51c05a8fa300264c3b7c335c6006385194a6af1a", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/51c05a8fa300264c3b7c335c6006385194a6af1a", "message": "Add IssueExtensionListener to module-info.java", "committedDate": "2020-11-13T17:54:54Z", "type": "commit"}, {"oid": "1e2a3e9363f44161fee3aa9574bab057051762cd", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1e2a3e9363f44161fee3aa9574bab057051762cd", "message": "Add possibility to add annotation on class level", "committedDate": "2020-11-13T18:17:27Z", "type": "commit"}, {"oid": "61b9d27a4d45696903b5a4e69cdc664fc96cc5a6", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/61b9d27a4d45696903b5a4e69cdc664fc96cc5a6", "message": "Move most classes to jupiter package", "committedDate": "2020-11-13T18:25:48Z", "type": "commit"}, {"oid": "e23d000e832d5d18f2b2b6ff445e141ca6111d63", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e23d000e832d5d18f2b2b6ff445e141ca6111d63", "message": "Rewrite record classes", "committedDate": "2020-11-13T19:09:59Z", "type": "commit"}, {"oid": "c97e8f04125931ca8b1e9c883682e967cfdf42ba", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c97e8f04125931ca8b1e9c883682e967cfdf42ba", "message": "Fix module-info.java", "committedDate": "2020-11-13T21:11:10Z", "type": "commit"}, {"oid": "c9cfc714203b03db9fddd88ee479d33a783707c7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c9cfc714203b03db9fddd88ee479d33a783707c7", "message": "Put my fingers into all the pies aka refactoring", "committedDate": "2020-11-22T15:13:17Z", "type": "commit"}, {"oid": "47dd5fe8c391c3271f150473d27c6c57b85e0493", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/47dd5fe8c391c3271f150473d27c6c57b85e0493", "message": "Provide sample IssueProcessor service for tests", "committedDate": "2020-11-22T17:50:42Z", "type": "commit"}, {"oid": "c0bfbf49c79aabe7086fe7bed1ddc57687335f28", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c0bfbf49c79aabe7086fe7bed1ddc57687335f28", "message": "Fail at creating an integration test", "committedDate": "2020-11-24T19:56:12Z", "type": "commit"}]}