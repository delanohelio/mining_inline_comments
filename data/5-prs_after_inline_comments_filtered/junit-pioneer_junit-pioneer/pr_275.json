{"pr_number": 275, "pr_title": "Revamp/improvement of StdIoExtension", "pr_createdAt": "2020-06-19T19:37:18Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/275", "timeline": [{"oid": "a4405089e44d4f4284cfdaf71c571a36541f419e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a4405089e44d4f4284cfdaf71c571a36541f419e", "message": "Small edits to documentation and code", "committedDate": "2020-06-16T19:05:10Z", "type": "commit"}, {"oid": "91831341534679a907befb8063a5282138040be4", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/91831341534679a907befb8063a5282138040be4", "message": "Complete revamp of StdIoExtension following suggestions on #274", "committedDate": "2020-06-19T19:36:01Z", "type": "commit"}, {"oid": "590806419e67a70f00d83b3ca553ef66d7362ad0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/590806419e67a70f00d83b3ca553ef66d7362ad0", "message": "Added reset (and tests) to StdIoExtension", "committedDate": "2020-06-19T20:40:29Z", "type": "commit"}, {"oid": "08a74b7960426484157fc644a8c5df9b6dd1ce58", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/08a74b7960426484157fc644a8c5df9b6dd1ce58", "message": "Replace star imports (I should fix my IDE settings)", "committedDate": "2020-06-19T20:42:07Z", "type": "commit"}, {"oid": "54b920f8eae5d6b7fec42d4edaa25880308a1220", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/54b920f8eae5d6b7fec42d4edaa25880308a1220", "message": "Added some NOSONAR comments. Bad boy, SONAR, sit!", "committedDate": "2020-06-19T20:50:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQ1OA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443216458", "bodyText": "The note about no parameter is not needed. Two sentences before you already mentioned that.\nFurthermore it interrupts  the \"surrounding\" two sentenced which belong together. I would rewrite the latter of them to something like \"If you want to provide no input/expect no output, just use the annotation without additional values\".\nThird: The arrays does not only contain values which are provided to System. in but also expected values printed by System.out.", "author": "Bukama", "createdAt": "2020-06-21T12:48:20Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIo.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * Marks a method to be extended with {@link StdIoExtension} and provided with\n+ * {@link StdIoExtension.StdIn StdIn} or {@link StdIoExtension.StdOut StdOut}.\n+ * The annotated method must take one or both parameters or an\n+ * {@link org.junit.jupiter.api.extension.ExtensionConfigurationException} will be thrown.\n+ *\n+ * Provide values that the {@link StdIoExtension extension} will read instead of reading the\n+ * standard input ({@code System.in}).\n+ * If values are provided but there is no {@link StdIoExtension.StdIn} parameter\n+ * an {@link org.junit.jupiter.api.extension.ExtensionConfigurationException} will be thrown.\n+ * The opposite is not true to enable testing for empty inputs.", "originalCommit": "54b920f8eae5d6b7fec42d4edaa25880308a1220", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MzM5Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443243397", "bodyText": "Your last statement is incorrect. This is only for StdIn.", "author": "Michael1993", "createdAt": "2020-06-21T18:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQ4Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443216483", "bodyText": "Also expected values of System.out", "author": "Bukama", "createdAt": "2020-06-21T12:48:46Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIo.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * Marks a method to be extended with {@link StdIoExtension} and provided with\n+ * {@link StdIoExtension.StdIn StdIn} or {@link StdIoExtension.StdOut StdOut}.\n+ * The annotated method must take one or both parameters or an\n+ * {@link org.junit.jupiter.api.extension.ExtensionConfigurationException} will be thrown.\n+ *\n+ * Provide values that the {@link StdIoExtension extension} will read instead of reading the\n+ * standard input ({@code System.in}).\n+ * If values are provided but there is no {@link StdIoExtension.StdIn} parameter\n+ * an {@link org.junit.jupiter.api.extension.ExtensionConfigurationException} will be thrown.\n+ * The opposite is not true to enable testing for empty inputs.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+@ExtendWith(StdIoExtension.class)\n+public @interface StdIo {\n+\n+\t/**\n+\t * Provides the intercepted standard input with values.\n+\t * If this is not blank, the annotated method has to\n+\t * have a {@link StdIoExtension.StdIn} parameter.\n+\t */", "originalCommit": "54b920f8eae5d6b7fec42d4edaa25880308a1220", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MzQxNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443243417", "bodyText": "No, that's not correct.", "author": "Michael1993", "createdAt": "2020-06-21T18:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzc1NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443217754", "bodyText": "I don't get this. The if tests if the value array is not empty and if the parameter does not contain StdIn, but the error messages says that there are parameter but StdIn was * not* provided. Which is totally fine, if StdOut was provided and the values are the expected written values.\nDid you miss to add the check for StdOut, because you want to check if there is a) an annotation with values but b) neither StdIn or StdOut parameter?", "author": "Bukama", "createdAt": "2020-06-21T13:05:02Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -61,11 +90,34 @@ private Object getOut() {\n \tprivate String[] getSourceValuesFromAnnotation(ExtensionContext context) {\n \t\treturn context\n \t\t\t\t.getTestMethod()\n-\t\t\t\t.map(method -> method.getAnnotation(StdInSource.class))\n-\t\t\t\t.map(StdInSource::value)\n+\t\t\t\t.map(method -> method.getAnnotation(StdIo.class))\n+\t\t\t\t.map(StdIo::value)\n \t\t\t\t.orElseThrow(() -> new ParameterResolutionException(\n-\t\t\t\t\tformat(\"Can not resolve test method parameter %s. Method has to be annotated with '%s'\",\n-\t\t\t\t\t\tStdIn.class.getName(), StdInSource.class.getName())));\n+\t\t\t\t\tformat(\"Can not resolve test method parameter %s. Method has to be annotated with '%s'.\",\n+\t\t\t\t\t\tStdIn.class.getName(), StdIo.class.getName())));\n+\t}\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tOptional<Method> method = context.getTestMethod();\n+\t\tif (method.isPresent()) {\n+\t\t\tif (method.get().getAnnotation(StdIo.class) == null) {\n+\t\t\t\tthrow new ExtensionConfigurationException(\n+\t\t\t\t\tformat(\"StdIoExtension is active but no %s annotation was found.\", StdIo.class.getName()));\n+\t\t\t}\n+\t\t\tList<Class<?>> params = Arrays.asList(method.get().getParameterTypes());\n+\t\t\tif (!params.contains(StdIn.class) && !params.contains(StdOut.class)) {\n+\t\t\t\tthrow new ExtensionConfigurationException(\n+\t\t\t\t\tformat(\"Method is annotated with %s but no %s or %s parameters were found.\", StdIo.class.getName(),\n+\t\t\t\t\t\tStdIn.class.getName(), StdOut.class.getName()));\n+\t\t\t}\n+\t\t\tif (!String.join(\"\", method.get().getAnnotation(StdIo.class).value()).isEmpty()\n+\t\t\t\t\t&& !params.contains(StdIn.class)) {\n+\t\t\t\tthrow new ExtensionConfigurationException(format(\n+\t\t\t\t\t\"Method has no %s parameter but input sources were provided in the %s annotation (Did you forget to add a test parameter?).\",\n+\t\t\t\t\tStdIn.class.getName(), StdIo.class.getName()));", "originalCommit": "54b920f8eae5d6b7fec42d4edaa25880308a1220", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0MzQ4Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443243487", "bodyText": "If the array is not empty, then you provided values for StdIn - which is incorrect if you don't have and StdIn parameter.", "author": "Michael1993", "createdAt": "2020-06-21T18:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODIxMQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443218211", "bodyText": "The method gets no values provided, so the expected result is that out.capturedLines() is empty.\nWhere do the expected lines come from? (I know - from the code itself, but you get what I mean?)", "author": "Bukama", "createdAt": "2020-06-21T13:10:48Z", "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -10,84 +10,115 @@\n \n package org.junitpioneer.jupiter;\n \n+import static java.lang.String.format;\n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.junitpioneer.testkit.PioneerTestKit.executeTestMethod;\n+import static org.junitpioneer.testkit.PioneerTestKit.executeTestMethodWithParameterTypes;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.io.PrintStream;\n \n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ParameterResolutionException;\n-import org.junitpioneer.jupiter.StdIOExtension.StdIn;\n-import org.junitpioneer.jupiter.StdIOExtension.StdOut;\n+import org.junitpioneer.jupiter.StdIoExtension.StdIn;\n+import org.junitpioneer.jupiter.StdIoExtension.StdOut;\n import org.junitpioneer.testkit.ExecutionResults;\n-import org.junitpioneer.testkit.PioneerTestKit;\n \n /**\n  * Shakespeare's Sonnet VII is in the public domain.\n  */\n-@DisplayName(\"StdIOExtension \")\n+@DisplayName(\"StdIoExtension \")\n public class StdIoExtensionTests {\n \n \tfinal BasicCommandLineApp app = new BasicCommandLineApp();\n \n+\tprivate final static PrintStream STDOUT = System.out;\n+\tprivate final static InputStream STDIN = System.in;\n+\n \t@Nested\n \t@DisplayName(\"with specific configuration \")\n \tclass ConfigurationTests {\n \n+\t\t@Test\n+\t\t@DisplayName(\"fails if the method is annotated but no parameter is passed to the test\")\n+\t\tvoid needsParameter() {\n+\t\t\tExecutionResults results = executeTestMethod(StdIoExtensionConfigurations.class, \"noParameter\");\n+\n+\t\t\tassertThat(results.firstFailuresThrowable())\n+\t\t\t\t\t.isInstanceOf(ExtensionConfigurationException.class)\n+\t\t\t\t\t.hasMessage(format(\"Method is annotated with %s but no %s or %s parameters were found.\",\n+\t\t\t\t\t\tStdIo.class.getName(), StdIn.class.getName(), StdOut.class.getName()));\n+\t\t}\n+\n \t\t@Test\n \t\t@DisplayName(\"fails if the parameter type is not StdIn or StdOut\")\n \t\tvoid needsType() {\n-\t\t\tExecutionResults results = PioneerTestKit\n-\t\t\t\t\t.executeTestMethodWithParameterTypes(StdIOExtensionConfigurations.class, \"badType\",\n-\t\t\t\t\t\tBoolean.class.getName());\n+\t\t\tExecutionResults results = executeTestMethodWithParameterTypes(StdIoExtensionConfigurations.class,\n+\t\t\t\t\"badType\", Boolean.class.getName());\n \n \t\t\tassertThat(results.firstFailuresThrowable())\n-\t\t\t\t\t.isInstanceOf(ParameterResolutionException.class)\n-\t\t\t\t\t.hasMessageContaining(\"No ParameterResolver registered\");\n+\t\t\t\t\t.isInstanceOf(ExtensionConfigurationException.class)\n+\t\t\t\t\t.hasMessage(format(\"Method is annotated with %s but no %s or %s parameters were found.\",\n+\t\t\t\t\t\tStdIo.class.getName(), StdIn.class.getName(), StdOut.class.getName()));\n \t\t}\n \n \t\t@Test\n-\t\t@DisplayName(\"fails if the parameter is StdIn but test method is not annotated with @StdInSource\")\n-\t\tvoid needsAnnotation() {\n-\t\t\tExecutionResults results = PioneerTestKit\n-\t\t\t\t\t.executeTestMethodWithParameterTypes(StdIOExtensionConfigurations.class, \"noAnnotation\",\n-\t\t\t\t\t\tStdIn.class.getName());\n+\t\t@DisplayName(\"fails if the parameter is StdIn or StdOut but StdIoExtension is not active\")\n+\t\tvoid needsExtension() {\n+\t\t\tExecutionResults results = executeTestMethodWithParameterTypes(\n+\t\t\t\tNotAnnotatedStdIoExtensionConfiguration.class, \"noAnnotation\", StdOut.class.getName());\n \n \t\t\tassertThat(results.firstFailuresThrowable())\n \t\t\t\t\t.isInstanceOf(ParameterResolutionException.class)\n-\t\t\t\t\t.hasMessageContainingAll(\"Can not resolve test method parameter\", \"Method has to be annotated\");\n+\t\t\t\t\t.hasMessageStartingWith(\"No ParameterResolver registered\");\n \t\t}\n \n \t\t@Test\n-\t\t@DisplayName(\"resolves parameter for type StdIn and annotation\")\n-\t\tvoid goodConfig_stdIn() {\n-\t\t\tExecutionResults results = PioneerTestKit\n-\t\t\t\t\t.executeTestMethodWithParameterTypes(StdIOExtensionConfigurations.class, \"resolveStdIn\",\n-\t\t\t\t\t\tStdIn.class.getName());\n-\t\t\tassertThat(results.numberOfStartedTests()).isGreaterThan(0);\n+\t\t@DisplayName(\"fails if the parameter is StdIn or StdOut but test method is not annotated with @StdIo\")\n+\t\tvoid needsAnnotation() {\n+\t\t\tExecutionResults results = executeTestMethodWithParameterTypes(StdIoExtensionConfigurations.class,\n+\t\t\t\t\"noAnnotation\", StdIn.class.getName());\n+\n+\t\t\tassertThat(results.firstFailuresThrowable())\n+\t\t\t\t\t// This is because the class is annotated with @ExtendWith\n+\t\t\t\t\t.isInstanceOf(ExtensionConfigurationException.class)\n+\t\t\t\t\t.hasMessage(\n+\t\t\t\t\t\tformat(\"StdIoExtension is active but no %s annotation was found.\", StdIo.class.getName()));\n \t\t}\n \n \t\t@Test\n-\t\t@DisplayName(\"resolves parameter for type StdOut\")\n-\t\tvoid goodConfig_stdOut() {\n-\t\t\tExecutionResults results = PioneerTestKit\n-\t\t\t\t\t.executeTestMethodWithParameterTypes(StdIOExtensionConfigurations.class, \"resolveStdOut\",\n-\t\t\t\t\t\tStdOut.class.getName());\n-\t\t\tassertThat(results.numberOfStartedTests()).isGreaterThan(0);\n+\t\t@DisplayName(\"fails if the method is annotated and has input sources but no StdIn parameter\")\n+\t\tvoid needsStdIn() {\n+\t\t\tExecutionResults results = executeTestMethodWithParameterTypes(StdIoExtensionConfigurations.class,\n+\t\t\t\t\"noStdIn\", StdOut.class.getName());\n+\n+\t\t\tassertThat(results.firstFailuresThrowable())\n+\t\t\t\t\t.isInstanceOf(ExtensionConfigurationException.class)\n+\t\t\t\t\t.hasMessage(format(\n+\t\t\t\t\t\t\"Method has no %s parameter but input sources were provided in the %s annotation (Did you forget to add a test parameter?).\",\n+\t\t\t\t\t\tStdIn.class.getName(), StdIo.class.getName()));\n \t\t}\n \n \t}\n \n \t@Nested\n-\t@ExtendWith(StdIOExtension.class)\n-\tclass ExtendWithTests {\n+\t@DisplayName(\"with standard configuration \")\n+\tclass StdIoTests {\n \n \t\t@Test\n \t\t@DisplayName(\"catches the output on the standard out as lines\")\n+\t\t@StdIo\n \t\tvoid catchesOut(StdOut out) {\n \t\t\tapp.write();\n ", "originalCommit": "54b920f8eae5d6b7fec42d4edaa25880308a1220", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwOTIwNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r453209205", "bodyText": "You don't provide values to System.out - you want to test that your SUT writes to System.out what you expect it to.", "author": "Michael1993", "createdAt": "2020-07-11T16:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4MTg3Ng==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r453781876", "bodyText": "The expected lines come from the app.write() method. In it, there are calls to System.out.println() - which are redirected to StdOut by the extension.", "author": "Michael1993", "createdAt": "2020-07-13T16:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxOTEwNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443219105", "bodyText": "Just a note:\nThis nested class should be thread safe due the use of @TestMethodOrder regarding to JUnit 5 User Guide\n\nThe default execution mode is applied to all nodes of the test tree with a few notable exceptions, namely test classes that use the Lifecycle.PER_CLASS mode or a MethodOrderer (except for Random).", "author": "Bukama", "createdAt": "2020-06-21T13:22:28Z", "path": "src/test/java/org/junitpioneer/jupiter/StdIoExtensionTests.java", "diffHunk": "@@ -122,10 +153,55 @@ void catchesBoth(StdIn in, StdOut out) throws IOException {\n \n \t}\n \n-\t@ExtendWith(StdIOExtension.class)\n-\tstatic class StdIOExtensionConfigurations {\n+\t@Nested\n+\t@TestMethodOrder(OrderAnnotation.class)", "originalCommit": "54b920f8eae5d6b7fec42d4edaa25880308a1220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40233c2e619c616d23e5ab41f0019f991d2a90b1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/40233c2e619c616d23e5ab41f0019f991d2a90b1", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into issue/274-improve-std-io\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/org/junitpioneer/jupiter/StdInSource.java\n\u0001\tsrc/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "committedDate": "2020-06-21T18:44:49Z", "type": "commit"}, {"oid": "75cb4e6c85f8d940202b916f04199fb8bf4cfc92", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/75cb4e6c85f8d940202b916f04199fb8bf4cfc92", "message": "Added comment to StdIo annotation\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-06-21T18:51:52Z", "type": "commit"}, {"oid": "7a51f858a70e78700a8e136acbba8b79ac13e993", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7a51f858a70e78700a8e136acbba8b79ac13e993", "message": "Renamed extension in package-info\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-06-21T18:55:43Z", "type": "commit"}, {"oid": "a4b54be1c58d5f2c54dbf27dae16967071288edc", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a4b54be1c58d5f2c54dbf27dae16967071288edc", "message": "Removed Optional - Method is required, ensured by JUnit\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-06-21T19:31:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MzQ2Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443763467", "bodyText": "Is this Namespace intended to be created from DefaultLocaleExtension.class?", "author": "NPException", "createdAt": "2020-06-22T18:58:11Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n \n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n import org.junit.jupiter.api.extension.ParameterContext;\n-import org.junit.jupiter.api.extension.ParameterResolutionException;\n import org.junit.jupiter.api.extension.ParameterResolver;\n \n /**\n  * <p>For details and examples, see\n  * <a href=\"https://junit-pioneer.org/docs/standard-input-output/\" target=\"_top\">the documentation on <code>Standard input/output</code></a>\n  * </p>\n  */\n-public class StdIOExtension implements ParameterResolver {\n+public class StdIoExtension implements ParameterResolver, BeforeTestExecutionCallback, AfterEachCallback {\n \n \tprivate static final String SEPARATOR = System.getProperty(\"line.separator\");\n \n+\tprivate static final Namespace NAMESPACE = Namespace.create(DefaultLocaleExtension.class);", "originalCommit": "a4b54be1c58d5f2c54dbf27dae16967071288edc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwODUwNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r453208507", "bodyText": "Oops. \ud83d\ude05", "author": "Michael1993", "createdAt": "2020-07-11T16:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MzQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NzE0NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r443767144", "bodyText": "Could this break if only one of StdIn or StdOut is used?\nSystem.in or System.out may end up being null if one of these .get(...) calls returns null.", "author": "NPException", "createdAt": "2020-06-22T19:05:35Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n \n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n import org.junit.jupiter.api.extension.ParameterContext;\n-import org.junit.jupiter.api.extension.ParameterResolutionException;\n import org.junit.jupiter.api.extension.ParameterResolver;\n \n /**\n  * <p>For details and examples, see\n  * <a href=\"https://junit-pioneer.org/docs/standard-input-output/\" target=\"_top\">the documentation on <code>Standard input/output</code></a>\n  * </p>\n  */\n-public class StdIOExtension implements ParameterResolver {\n+public class StdIoExtension implements ParameterResolver, BeforeTestExecutionCallback, AfterEachCallback {\n \n \tprivate static final String SEPARATOR = System.getProperty(\"line.separator\");\n \n+\tprivate static final Namespace NAMESPACE = Namespace.create(DefaultLocaleExtension.class);\n+\n+\tprivate static final String IN_KEY = \"StdIo_In\";\n+\tprivate static final String OUT_KEY = \"StdIo_Out\";\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tSystem.setIn(context.getStore(NAMESPACE).get(IN_KEY, InputStream.class)); //NOSONAR resetting input\n+\t\tSystem.setOut(context.getStore(NAMESPACE).get(OUT_KEY, PrintStream.class));", "originalCommit": "a4b54be1c58d5f2c54dbf27dae16967071288edc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwODcwNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r453208705", "bodyText": "Yeah, should probably check if it even needs to be reset first.", "author": "Michael1993", "createdAt": "2020-07-11T16:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NzE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MDU4MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r453770581", "bodyText": "I added more tests to cover this case and changed the behaviour.", "author": "Michael1993", "createdAt": "2020-07-13T16:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NzE0NA=="}], "type": "inlineReview"}, {"oid": "e2fd345ef27f612a5acb03f3751c1efde1cda839", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e2fd345ef27f612a5acb03f3751c1efde1cda839", "message": "Added more tests, fixed resetting and documentation.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-07-13T16:22:40Z", "type": "commit"}, {"oid": "ff9f6993bcdf1cf8d809802690ab70f1dc9da172", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ff9f6993bcdf1cf8d809802690ab70f1dc9da172", "message": "Spotless and CheckStyle ganged up on me again. :(\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-07-13T16:35:49Z", "type": "commit"}, {"oid": "2ee6dc7fb2c46e8da19dccd230c6c0f56474f81c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2ee6dc7fb2c46e8da19dccd230c6c0f56474f81c", "message": "Merge branch 'master' into issue/274-improve-std-io", "committedDate": "2020-07-21T19:29:19Z", "type": "commit"}, {"oid": "63b236399b181d8d891d5af00e3354d3c4d0fd13", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/63b236399b181d8d891d5af00e3354d3c4d0fd13", "message": "Make StdIn optional an parameter", "committedDate": "2020-07-21T19:49:24Z", "type": "commit"}, {"oid": "92a6b5b58d417e94ebe5a2559a6df6aad4d7f02e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/92a6b5b58d417e94ebe5a2559a6df6aad4d7f02e", "message": "[WIP] Start updating documentation to new behavior", "committedDate": "2020-07-21T20:02:18Z", "type": "commit"}, {"oid": "03d5496f451c2e8a18c251ce66261da40fd15c32", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/03d5496f451c2e8a18c251ce66261da40fd15c32", "message": "Small rewrite and more poetry.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-07-24T12:26:34Z", "type": "commit"}, {"oid": "257981af3ace4a7fa5094bf5ed984e416020ba58", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/257981af3ace4a7fa5094bf5ed984e416020ba58", "message": "I forgot about checkstyle and spotless again.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-07-24T12:32:58Z", "type": "commit"}, {"oid": "83539edde2e1de74b69d5152b59f08a703d13798", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/83539edde2e1de74b69d5152b59f08a703d13798", "message": "Update documentation", "committedDate": "2020-07-28T18:21:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMTc2OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r462221769", "bodyText": "The @StdIo annotation must be present. The StdIoExtension itself is not public and can only be registered with the annotation.\nWe could delete this condition and exception because this never happens and could be confusing.", "author": "Michael1993", "createdAt": "2020-07-29T11:13:54Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.lang.String.format;\n+\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+\n+class StdIoExtension implements ParameterResolver, BeforeTestExecutionCallback, AfterEachCallback {\n+\n+\tstatic final String SEPARATOR = System.getProperty(\"line.separator\");\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StdIoExtension.class);\n+\n+\tprivate static final String SYSTEM_IN_KEY = \"StdIo_System_In\";\n+\tprivate static final String STD_IN_KEY = \"StdIo_Std_In\";\n+\tprivate static final String OUT_KEY = \"StdIo_Std_Out\";\n+\n+\t@Override\n+\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n+\t\tClass<?> type = parameterContext.getParameter().getType();\n+\t\treturn (type == StdIn.class || type == StdOut.class);\n+\t}\n+\n+\t@Override\n+\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n+\t\tClass<?> parameterType = parameterContext.getParameter().getType();\n+\t\tif (parameterType == StdOut.class)\n+\t\t\treturn prepareStdOut(extensionContext);\n+\t\tif (parameterType == StdIn.class) {\n+\t\t\tString[] source = extensionContext.getRequiredTestMethod().getAnnotation(StdIo.class).value();\n+\t\t\tif (source.length == 0)\n+\t\t\t\tthrow new ExtensionConfigurationException(\n+\t\t\t\t\t\"@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. \"\n+\t\t\t\t\t\t\t+ \"If you want to define empty input, use `@StdIo(\\\"\\\")`.\");\n+\t\t\telse\n+\t\t\t\t//@formatter:off\n+\t\t\t\treturn extensionContext\n+\t\t\t\t\t\t.getStore(NAMESPACE)\n+\t\t\t\t\t\t.getOrComputeIfAbsent(\n+\t\t\t\t\t\t\t\tSTD_IN_KEY,\n+\t\t\t\t\t\t\t\t__ -> createSwapStoreStdIn(extensionContext, source),\n+\t\t\t\t\t\t\t\tStdIn.class);\n+\t\t\t\t//@formatter:on\n+\t\t}\n+\t\tthrow new ParameterResolutionException(format(\"Could not resolve parameter of type %s.\", parameterType));\n+\t}\n+\n+\tprivate StdOut prepareStdOut(ExtensionContext context) {\n+\t\tstoreStdOut(context);\n+\t\treturn createOut();\n+\t}\n+\n+\tprivate void storeStdOut(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).put(OUT_KEY, System.out); //NOSONAR never writing to System.out, only storing it\n+\t}\n+\n+\tprivate StdOut createOut() {\n+\t\tStdOut out = new StdOut();\n+\t\tSystem.setOut(new PrintStream(out));\n+\t\treturn out;\n+\t}\n+\n+\tprivate StdIn createSwapStoreStdIn(ExtensionContext context, String[] source) {\n+\t\tStdIn newStdIn = new StdIn(source);\n+\t\tswapAndStoreIn(context, newStdIn);\n+\t\treturn newStdIn;\n+\t}\n+\n+\tprivate void swapAndStoreIn(ExtensionContext context, StdIn stdIn) {\n+\t\tcontext.getStore(NAMESPACE).put(SYSTEM_IN_KEY, System.in); //NOSONAR never reading from System.in, only storing it\n+\t\tcontext.getStore(NAMESPACE).put(STD_IN_KEY, stdIn);\n+\t\tSystem.setIn(stdIn); //NOSONAR required to redirect output\n+\t}\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tfinal Method method = context.getRequiredTestMethod();\n+\t\tif (!method.isAnnotationPresent(StdIo.class))", "originalCommit": "83539edde2e1de74b69d5152b59f08a703d13798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3OTQ5OA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r462879498", "bodyText": "I switched annotation detection to our utils (so meta-annotations are found as well), which forces us to consider the absent case because it returns an Optional.", "author": "nipafx", "createdAt": "2020-07-30T09:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyMTc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyNDI0NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r462224244", "bodyText": "This exception is never thrown. Could be deleted.\nFrom the ParameterResolver::resolveParameter documentation:\n\nThis method is only called by the framework if supportsParameter(org.junit.jupiter.api.extension.ParameterContext, org.junit.jupiter.api.extension.ExtensionContext) previously returned true for the same ParameterContext and ExtensionContext.", "author": "Michael1993", "createdAt": "2020-07-29T11:19:10Z", "path": "src/main/java/org/junitpioneer/jupiter/StdIoExtension.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.lang.String.format;\n+\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+\n+class StdIoExtension implements ParameterResolver, BeforeTestExecutionCallback, AfterEachCallback {\n+\n+\tstatic final String SEPARATOR = System.getProperty(\"line.separator\");\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StdIoExtension.class);\n+\n+\tprivate static final String SYSTEM_IN_KEY = \"StdIo_System_In\";\n+\tprivate static final String STD_IN_KEY = \"StdIo_Std_In\";\n+\tprivate static final String OUT_KEY = \"StdIo_Std_Out\";\n+\n+\t@Override\n+\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n+\t\tClass<?> type = parameterContext.getParameter().getType();\n+\t\treturn (type == StdIn.class || type == StdOut.class);\n+\t}\n+\n+\t@Override\n+\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n+\t\tClass<?> parameterType = parameterContext.getParameter().getType();\n+\t\tif (parameterType == StdOut.class)\n+\t\t\treturn prepareStdOut(extensionContext);\n+\t\tif (parameterType == StdIn.class) {\n+\t\t\tString[] source = extensionContext.getRequiredTestMethod().getAnnotation(StdIo.class).value();\n+\t\t\tif (source.length == 0)\n+\t\t\t\tthrow new ExtensionConfigurationException(\n+\t\t\t\t\t\"@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. \"\n+\t\t\t\t\t\t\t+ \"If you want to define empty input, use `@StdIo(\\\"\\\")`.\");\n+\t\t\telse\n+\t\t\t\t//@formatter:off\n+\t\t\t\treturn extensionContext\n+\t\t\t\t\t\t.getStore(NAMESPACE)\n+\t\t\t\t\t\t.getOrComputeIfAbsent(\n+\t\t\t\t\t\t\t\tSTD_IN_KEY,\n+\t\t\t\t\t\t\t\t__ -> createSwapStoreStdIn(extensionContext, source),\n+\t\t\t\t\t\t\t\tStdIn.class);\n+\t\t\t\t//@formatter:on\n+\t\t}\n+\t\tthrow new ParameterResolutionException(format(\"Could not resolve parameter of type %s.\", parameterType));", "originalCommit": "83539edde2e1de74b69d5152b59f08a703d13798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2OTUzMg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/275#discussion_r462869532", "bodyText": "Without this line, the compiler complains because the method does not return/throw on all paths. I prefer an exception over return null.", "author": "nipafx", "createdAt": "2020-07-30T09:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyNDI0NA=="}], "type": "inlineReview"}, {"oid": "a7b86a4b4e75ee27a67b05ccea0aab21fa6ccf1c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a7b86a4b4e75ee27a67b05ccea0aab21fa6ccf1c", "message": "Switch to 'BeforeEach' extension point", "committedDate": "2020-07-30T09:38:26Z", "type": "commit"}, {"oid": "1a413db5374ef5595a86407c0f83e47702e49931", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1a413db5374ef5595a86407c0f83e47702e49931", "message": "Use annotation utils to detect @StdIo", "committedDate": "2020-07-30T09:41:57Z", "type": "commit"}]}