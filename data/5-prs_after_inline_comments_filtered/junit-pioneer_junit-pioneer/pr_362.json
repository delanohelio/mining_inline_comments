{"pr_number": 362, "pr_title": "CartesianProductTest \u00d7 RangeSources", "pr_createdAt": "2020-10-19T18:00:31Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/362", "timeline": [{"oid": "7d30741a1809da9d967edadec1cd1bf78e4fe8ad", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7d30741a1809da9d967edadec1cd1bf78e4fe8ad", "message": "Made RangeSources repeatable, CartesianProductTestExtension now works with Consumer<? extends Annotation> argument providers.", "committedDate": "2020-10-19T17:56:56Z", "type": "commit"}, {"oid": "ccd15e285b0cb8e6a8e727db311de83012097bcf", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ccd15e285b0cb8e6a8e727db311de83012097bcf", "message": "Add comments, rename method, clarify behaviour", "committedDate": "2020-10-19T18:27:04Z", "type": "commit"}, {"oid": "c03ccbde8dcf1a75cc347c2946d2caf93024e572", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c03ccbde8dcf1a75cc347c2946d2caf93024e572", "message": "Fix code smells.", "committedDate": "2020-10-19T18:37:10Z", "type": "commit"}, {"oid": "1fef46445f7c1e45070611d82572f4878cee9168", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1fef46445f7c1e45070611d82572f4878cee9168", "message": "Add some documentation and test", "committedDate": "2020-10-19T21:00:53Z", "type": "commit"}, {"oid": "64f78996f0e715ab4000069dd14a7d5cb80c92d7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/64f78996f0e715ab4000069dd14a7d5cb80c92d7", "message": "Spotless, why hast thou forsaken me?", "committedDate": "2020-10-19T21:03:43Z", "type": "commit"}, {"oid": "53e492be6b339198a3b5ac3cf01a92cc2d68904f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/53e492be6b339198a3b5ac3cf01a92cc2d68904f", "message": "While I nodded, nearly napping - did some coding, refactoring", "committedDate": "2020-10-19T22:47:56Z", "type": "commit"}, {"oid": "423f2dccd3a586ccec74d0c219dab9925f318cc2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/423f2dccd3a586ccec74d0c219dab9925f318cc2", "message": "Add more tests about range sources\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-24T12:30:37Z", "type": "commit"}, {"oid": "340be38b2c76285e7ffe9480fca4f80787e35826", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/340be38b2c76285e7ffe9480fca4f80787e35826", "message": "Oops, almost forgot spotless.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-24T12:31:31Z", "type": "commit"}, {"oid": "b8d1ba3275eb43dbdf9d48141b7acd159a2d6a39", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b8d1ba3275eb43dbdf9d48141b7acd159a2d6a39", "message": "Expand documentation\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-24T12:48:55Z", "type": "commit"}, {"oid": "d0ef6d0e6d307246a54747055866f12973d9971c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d0ef6d0e6d307246a54747055866f12973d9971c", "message": "Fix checkstyle error\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-24T12:49:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4OTQ3Mg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529889472", "bodyText": "As these annotations are now repeatable and can be used with Cartesian products, I think they need some more changes:\n\nexplain their dual use in their Javadoc (including a link to Cartesian product docu)\nexplain where they can be repeated and where they can't", "author": "nipafx", "createdAt": "2020-11-24T21:28:47Z", "path": "src/main/java/org/junitpioneer/jupiter/params/ByteRangeSource.java", "diffHunk": "@@ -36,6 +37,7 @@\n @Documented\n @ArgumentsSource(RangeSourceArgumentsProvider.class)\n @RangeClass(ByteRange.class)\n+@Repeatable(ByteRangeSource.ByteRangeSources.class)", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4OTk3NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529889974", "bodyText": "This message may be more helpful if we explain why, even though the annotation is repeatable, it can only occur once on @ParameterizedTests.", "author": "nipafx", "createdAt": "2020-11-24T21:29:43Z", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceArgumentsProvider.java", "diffHunk": "@@ -63,17 +78,16 @@\n \t\t\tthrow new IllegalArgumentException(message);", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTMyNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529891325", "bodyText": "This looks great!", "author": "nipafx", "createdAt": "2020-11-24T21:32:34Z", "path": "src/test/java/org/junitpioneer/jupiter/CartesianProductTestExtensionTests.java", "diffHunk": "@@ -590,4 +671,41 @@ void distinctInputsFactory(TimeUnit unit, String string) {\n         //@formatter:on\n \t}\n \n+\tstatic class ArgumentsSourceTestCases {\n+\n+\t\t@CartesianProductTest\n+\t\t@IntRangeSource(from = 1, to = 4, closed = true)\n+\t\t@IntRangeSource(from = 2, to = 4, step = 2, closed = true)\n+\t\t@ReportEntry(\"{0},{1}\")\n+\t\tvoid basicIntRangeSource(int i, int j) {\n+\t\t}", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTU1OA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529891558", "bodyText": "If this works with @CartesianValueSource, there should be a test for that.", "author": "nipafx", "createdAt": "2020-11-24T21:33:02Z", "path": "src/test/java/org/junitpioneer/jupiter/CartesianProductTestExtensionTests.java", "diffHunk": "@@ -590,4 +671,41 @@ void distinctInputsFactory(TimeUnit unit, String string) {\n         //@formatter:on\n \t}\n \n+\tstatic class ArgumentsSourceTestCases {\n+\n+\t\t@CartesianProductTest\n+\t\t@IntRangeSource(from = 1, to = 4, closed = true)\n+\t\t@IntRangeSource(from = 2, to = 4, step = 2, closed = true)\n+\t\t@ReportEntry(\"{0},{1}\")\n+\t\tvoid basicIntRangeSource(int i, int j) {\n+\t\t}\n+\n+\t\t@CartesianProductTest\n+\t\t@IntRangeSource(from = 0, to = 4)\n+\t\t@ValueSource(ints = { 2, 4 })", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDAzOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529894038", "bodyText": "Without looking into this, I'm a but surprised that there's a combination of annotation search parameters that we don't already cover. Can you help me understand how this is different from the other methods?", "author": "nipafx", "createdAt": "2020-11-24T21:38:15Z", "path": "src/main/java/org/junitpioneer/jupiter/PioneerAnnotationUtils.java", "diffHunk": "@@ -117,6 +121,39 @@ public static boolean isAnyRepeatableAnnotationPresent(ExtensionContext context,\n \t\treturn findAnnotations(context, annotationType, true, true);\n \t}\n \n+\t/**\n+\t * Returns the annotations <em>present</em> on the {@code AnnotatedElement}\n+\t * that are annotated with the specified annotation. The meta-annotation can be <em>present</em>,\n+\t * <em>indirectly present</em>, <em>meta-present</em>, or <em>enclosing present</em>.\n+\t */\n+\tpublic static <A extends Annotation> List<Annotation> findAnnotatedAnnotations(AnnotatedElement element,\n+\t\t\tClass<A> annotation) {\n+\t\treturn Arrays\n+\t\t\t\t.stream(element.getDeclaredAnnotations())\n+\t\t\t\t// flatten @Repeatable aggregator annotations\n+\t\t\t\t.flatMap(PioneerAnnotationUtils::flatten)\n+\t\t\t\t.filter(a -> !(findOnElement(a.annotationType(), annotation, true).isEmpty()))\n+\t\t\t\t.collect(Collectors.toList());\n+\t}", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjgyNA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r532802824", "bodyText": "JUnits AnnotationSupport and our own PioneerAnnotationUtils has a lot of methods for getting specific annotations directly. We can not get annotations based on a criteria. I wanted to get all annotations on a test method that are themselves annotated with @ArgumentsSource. So, that's what this does - returns all annotations on an AnnotatedElement that are annotated with a given annotation.", "author": "Michael1993", "createdAt": "2020-11-30T18:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NDM4MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547474380", "bodyText": "Got it now. \ud83d\udc4d\ud83c\udffe", "author": "nipafx", "createdAt": "2020-12-22T19:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDg1Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529894853", "bodyText": "Did you check newer Eclipse versions work with this?", "author": "nipafx", "createdAt": "2020-11-24T21:39:47Z", "path": "src/main/java/org/junitpioneer/jupiter/CartesianValueArgumentsProvider.java", "diffHunk": "@@ -13,28 +13,29 @@\n import static java.util.stream.Collectors.toList;\n \n import java.lang.reflect.Array;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.function.Consumer;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n import org.junit.platform.commons.PreconditionViolationException;\n \n /**\n  * This is basically a copy of ValueSourceArgumentsProvider,\n  * except it does NOT support {@code @ParameterizedTest}.\n  */\n-class CartesianValueArgumentsProvider implements Consumer<CartesianValueSource> {\n+class CartesianValueArgumentsProvider implements Consumer<CartesianValueSource>, ArgumentsProvider {\n \n \tprivate Object[] arguments;\n \n \t@Override\n \tpublic void accept(CartesianValueSource source) {\n \t\t// @formatter:off\n \t\tList<Object> arrays =\n-\t\t\t\t// Declaration of <Object> is necessary due to a bug in Eclipse Photon.\n-\t\t\t\tStream.<Object> of(\n+\t\t\t\tStream.of(", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwNjM5Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r530906397", "bodyText": "Hm, I can't remember. I think I did, but I forgot to write it down. \ud83e\udd26", "author": "Michael1993", "createdAt": "2020-11-26T09:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5ODY0OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r532798649", "bodyText": "I will revert it just to be safe - but we should check it sometime.", "author": "Michael1993", "createdAt": "2020-11-30T18:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NzYxMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529897613", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tcatch (Exception e) {\n          \n          \n            \n            \t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tcatch (Exception ex) {\n          \n          \n            \n            \t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", ex);\n          \n          \n            \n            \t\t}", "author": "nipafx", "createdAt": "2020-11-24T21:44:53Z", "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {\n+\t\ttry {\n+\t\t\tArgumentsProvider provider = initializeArgumentsProvider(source);\n+\t\t\treturn provideArguments(context, source, provider);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n+\t\t}", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5OTk0Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529899947", "bodyText": "Is Annotation source a ...Rangesource? If so, can you rename the variable(s) accordingly?", "author": "nipafx", "createdAt": "2020-11-24T21:49:05Z", "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxMjQ4NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r530912485", "bodyText": "Not a RangeSource - it is an Annotation that is itself annotated with @ArgumentsSource.\nIt works like this (basically copying ParameterizedTest, btw):\n\nYour test is a CartesianProductTest\nThis test has annotations on it that are annotated with @ArgumentsSource\nThe @ArgumentsSource defines an ArgumentsProvider (class) that must implement AnnotationConsumer<A extends Annotation> (in our case this should be CartesianAnnotationConsumer instead)\nWe instantiate the ArgumentsProvider (must have no-args constructor)\nWe call the ArgumentsProvider#accept(Annotation) method with the original annotation\nWe call ArgumentsProvider#provideArguments(ExtensionContext context)\n\nEasy-peasy, right?", "author": "Michael1993", "createdAt": "2020-11-26T10:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5OTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExODQyMQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r538118421", "bodyText": "After re-reading this >7 day later, I feel like I need to demonstrate with an example:\n@ArgumentsSource(ExampleArgumentsProvider.class)\n@interface ExampleSourceAnnotation {\n   int intValue();\n}\n\nclass ExampleArgumentsProvider implements ArgumentsProvider, CartesianAnnotationConsumer<ExampleSourceAnnotation> {\n  int i;\n\n  void accept(ExampleSourceAnnotation annotation) {\n    /* do something with intValue() */\n    i = annotation.intValue();\n  }\n\n  Stream<? extends Arguments> provideArguments(ExtensionContext context) {\n    /* `accept` was already called so `i` should have a value */\n    return Stream.of(Arguments.of(i));\n  }\n}\nSo, if we have a CartesianProductTest, annotated with ExampleSourceAnnotation, we store the annotation, instantiate ExampleArgumentsProvider (with no-arg constructor), 'feed it' the ExampleSourceAnnotation and call provideArguments to get the set for our test.", "author": "Michael1993", "createdAt": "2020-12-08T08:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5OTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI0MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529905240", "bodyText": "This should be...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (Arrays.asList(provider.getClass().getInterfaces()).contains(Consumer.class)) {\n          \n          \n            \n            \t\tif (provider instanceof Consumer) {\n          \n      \n    \n    \n  \n\n... but, it's not? (One test fails after the change.)", "author": "nipafx", "createdAt": "2020-11-24T21:54:00Z", "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {\n+\t\ttry {\n+\t\t\tArgumentsProvider provider = initializeArgumentsProvider(source);\n+\t\t\treturn provideArguments(context, source, provider);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n+\t\t}\n+\t}\n+\n+\tprivate ArgumentsProvider initializeArgumentsProvider(Annotation source) {\n+\t\tArgumentsSource providerAnnotation = AnnotationSupport\n+\t\t\t\t.findAnnotation(source.annotationType(), ArgumentsSource.class)\n+\t\t\t\t// never happens, we already know these annotations are annotated with @ArgumentsSource\n+\t\t\t\t.orElseThrow(() -> new PreconditionViolationException(format(\n+\t\t\t\t\t\"%s was not annotated with @ArgumentsSource but should have been.\", source.annotationType())));\n+\t\treturn ReflectionSupport.newInstance(providerAnnotation.value());\n+\t}\n+\n+\tprivate List<Object> provideArguments(ExtensionContext context, Annotation source, ArgumentsProvider provider)\n+\t\t\tthrows Exception {\n+\t\tif (Arrays.asList(provider.getClass().getInterfaces()).contains(Consumer.class)) {", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1ODc4Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r531058783", "bodyText": "ArgumentsProviders used by annotations belonging to JUnit's @ParameterizedTest (e.g.: @ValueSource) implement Consumer through AnnotationConsumer. We will fix this with defining CartesianAnnotationConsumer.", "author": "Michael1993", "createdAt": "2020-11-26T14:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTk4Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r529905983", "bodyText": "Note to self: Take a close look at this when you're more awake. :)", "author": "nipafx", "createdAt": "2020-11-24T21:54:38Z", "path": "src/main/java/org/junitpioneer/jupiter/CartesianProductTestExtension.java", "diffHunk": "@@ -94,17 +102,50 @@ private static void ensureNoInputConflicts(CartesianProductTest annotation,\n \t\treturn sets;\n \t}\n \n-\tprivate List<List<?>> getSetsFromRepeatableAnnotation(List<CartesianValueSource> valueSources) {\n+\tprivate List<List<?>> getSetsFromArgumentsSources(List<? extends Annotation> argumentsSources,\n+\t\t\tExtensionContext context) {\n \t\tList<List<?>> sets = new ArrayList<>();\n-\t\tfor (CartesianValueSource source : valueSources) {\n-\t\t\tCartesianValueArgumentsProvider provider = new CartesianValueArgumentsProvider();\n-\t\t\tprovider.accept(source);\n-\t\t\tList<Object> collect = provider.provideArguments().distinct().collect(toList());\n-\t\t\tsets.add(collect);\n+\t\tfor (Annotation source : argumentsSources) {\n+\t\t\tsets.add(getSetFromAnnotation(context, source));\n \t\t}\n \t\treturn sets;\n \t}\n \n+\tprivate List<Object> getSetFromAnnotation(ExtensionContext context, Annotation source) {\n+\t\ttry {\n+\t\t\tArgumentsProvider provider = initializeArgumentsProvider(source);\n+\t\t\treturn provideArguments(context, source, provider);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not provide arguments because of exception.\", e);\n+\t\t}\n+\t}\n+\n+\tprivate ArgumentsProvider initializeArgumentsProvider(Annotation source) {\n+\t\tArgumentsSource providerAnnotation = AnnotationSupport\n+\t\t\t\t.findAnnotation(source.annotationType(), ArgumentsSource.class)\n+\t\t\t\t// never happens, we already know these annotations are annotated with @ArgumentsSource\n+\t\t\t\t.orElseThrow(() -> new PreconditionViolationException(format(\n+\t\t\t\t\t\"%s was not annotated with @ArgumentsSource but should have been.\", source.annotationType())));\n+\t\treturn ReflectionSupport.newInstance(providerAnnotation.value());\n+\t}\n+\n+\tprivate List<Object> provideArguments(ExtensionContext context, Annotation source, ArgumentsProvider provider)\n+\t\t\tthrows Exception {\n+\t\tif (Arrays.asList(provider.getClass().getInterfaces()).contains(Consumer.class)) {\n+\t\t\t((Consumer<Annotation>) provider).accept(source);\n+\t\t\treturn provider\n+\t\t\t\t\t.provideArguments(context)\n+\t\t\t\t\t.map(Arguments::get)\n+\t\t\t\t\t.flatMap(Arrays::stream)\n+\t\t\t\t\t.distinct()\n+\t\t\t\t\t.collect(toList());\n+\t\t} else {\n+\t\t\tthrow new PreconditionViolationException(\n+\t\t\t\tformat(\"%s does not implement the Consumer<T> interface.\", provider.getClass()));\n+\t\t}\n+\t}", "originalCommit": "d0ef6d0e6d307246a54747055866f12973d9971c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff44c3044dab3311c7ef56198276dd9a59daf8da", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ff44c3044dab3311c7ef56198276dd9a59daf8da", "message": "Update based on feedback - might need to be polished\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-30T18:19:35Z", "type": "commit"}, {"oid": "2263f77628924c66a1269e093e5239d4acda21c0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2263f77628924c66a1269e093e5239d4acda21c0", "message": "Commit gradlew because wtf\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-30T18:26:05Z", "type": "commit"}, {"oid": "b59b74f95467493fccc7743f462b17c12f2c8fa5", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b59b74f95467493fccc7743f462b17c12f2c8fa5", "message": "Checkstyle import fix\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-30T18:31:05Z", "type": "commit"}, {"oid": "3aa61f9bf7b08ae114c6e9241f2b7d6728b024ed", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3aa61f9bf7b08ae114c6e9241f2b7d6728b024ed", "message": "Merge branch 'master' into issue/354-cartesian-range-sources\n\n# Conflicts:\n#\tdocs/cartesian-product.adoc", "committedDate": "2020-11-30T18:33:30Z", "type": "commit"}, {"oid": "f99dfda58f1c464aa10c813db6890ad749037a4f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f99dfda58f1c464aa10c813db6890ad749037a4f", "message": "Finish merge and update `since`\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-30T18:36:06Z", "type": "commit"}, {"oid": "f70f6886a43fa05390d221e5ad449de3766ec7f9", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f70f6886a43fa05390d221e5ad449de3766ec7f9", "message": "spotless and iterable tests\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-30T18:42:06Z", "type": "commit"}, {"oid": "44daf751369eac90fff57276f6ff9c1d70e89201", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/44daf751369eac90fff57276f6ff9c1d70e89201", "message": "Update documentation, javadoc and exception message.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-30T19:10:31Z", "type": "commit"}, {"oid": "b495e41ad4982eefb14aa049900b5370ac14a3da", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b495e41ad4982eefb14aa049900b5370ac14a3da", "message": "Update JavaDoc for CartesianProductTest$Sets\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-07T19:23:45Z", "type": "commit"}, {"oid": "a8bf2ed945a70a79c4b2b0ec48e7457b8a8c074d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a8bf2ed945a70a79c4b2b0ec48e7457b8a8c074d", "message": "Merge branch 'master' into issue/354-cartesian-range-sources", "committedDate": "2020-12-07T19:24:00Z", "type": "commit"}, {"oid": "45e5e6a07038312be26ddc15308109b3156c722b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/45e5e6a07038312be26ddc15308109b3156c722b", "message": "Add contribution to README.md\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-07T19:37:38Z", "type": "commit"}, {"oid": "8f43c7cadce1c9b65277e3cc6cf8aa9b9149c253", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8f43c7cadce1c9b65277e3cc6cf8aa9b9149c253", "message": "Update small mistakes in documentation\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-07T19:41:28Z", "type": "commit"}, {"oid": "4af6804fa9384a786fd1ecab93235ce946687285", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4af6804fa9384a786fd1ecab93235ce946687285", "message": "Close all tags in javadoc\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-07T19:45:56Z", "type": "commit"}, {"oid": "018ee0cb06802e19652e50f4914f3b7cd0907727", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/018ee0cb06802e19652e50f4914f3b7cd0907727", "message": "Remove dubious tags from javadoc\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-07T19:57:20Z", "type": "commit"}, {"oid": "981b5da732cb29627dc5d6bb7aff96cec99c0d68", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/981b5da732cb29627dc5d6bb7aff96cec99c0d68", "message": "Small edits and changes", "committedDate": "2020-12-22T20:13:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4MjcxNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547482717", "bodyText": "Will this find meta-annotations? I doubt it would. Does this make sense?\n@IntRangeSource(from = 0, to = 10)\npublic @interface FromZeroToTen { }\n\n@CartesianProductTest\n@FromZeroToTen\nvoid test(int i) {\n}\nIf it does, we need to make sure that we find such annotations. Please use/extend org.junitpioneer.jupiter.params.PioneerAnnotationUtils if it's suitable - as painful as that may be.", "author": "nipafx", "createdAt": "2020-12-22T20:03:39Z", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceArgumentsProvider.java", "diffHunk": "@@ -41,20 +44,34 @@\n  * @see DoubleRangeSource\n  * @see FloatRangeSource\n  */\n-class RangeSourceArgumentsProvider implements ArgumentsProvider {\n+class RangeSourceArgumentsProvider implements ArgumentsProvider, CartesianAnnotationConsumer<Annotation> {\n+\n+\tprivate Annotation argumentsSource;\n \n \t@Override\n \tpublic Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n \t\t// since it's a method annotation, the element will always be present\n-\t\tList<Annotation> argumentsSources = context\n-\t\t\t\t.getElement()\n-\t\t\t\t.map(method -> Arrays\n-\t\t\t\t\t\t.stream(method.getAnnotations())\n-\t\t\t\t\t\t.filter(annotations -> Arrays\n-\t\t\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n-\t\t\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))\n-\t\t\t\t\t\t.collect(Collectors.toList()))\n-\t\t\t\t.orElseThrow(IllegalStateException::new);\n+\t\tif (argumentsSource == null)\n+\t\t\tinitArgumentsSource(context);\n+\t\tClass<? extends Annotation> argumentsSourceClass = argumentsSource.annotationType();\n+\t\tClass<? extends Range> rangeClass = argumentsSourceClass.getAnnotation(RangeClass.class).value();\n+\n+\t\tRange<?> range = (Range<?>) rangeClass.getConstructors()[0].newInstance(argumentsSource);\n+\t\trange.validate();\n+\t\treturn asStream(range).map(Arguments::of);\n+\t}\n+\n+\tprivate void initArgumentsSource(ExtensionContext context) {\n+\t\t// since it's a method annotation, the element will always be present\n+\t\tAnnotatedElement element = context.getElement().orElseThrow(IllegalStateException::new);\n+\n+\t\tverifyNoContainerAnnotationIsPresent(element);\n+\t\tList<Annotation> argumentsSources = Stream\n+\t\t\t\t.of(element.getAnnotations())\n+\t\t\t\t.filter(annotations -> Arrays\n+\t\t\t\t\t\t.stream(annotations.annotationType().getAnnotationsByType(ArgumentsSource.class))\n+\t\t\t\t\t\t.anyMatch(annotation -> getClass().equals(annotation.value())))", "originalCommit": "018ee0cb06802e19652e50f4914f3b7cd0907727", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg3MzcwOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r548873708", "bodyText": "All range sources have @Target(ElementType.METHOD) on them. No meta-annotations can exist. If you want, I can update this in a separate PR later, because this one is getting really bloated.", "author": "Michael1993", "createdAt": "2020-12-25T13:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4MjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxNTY1MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r556015650", "bodyText": "True. We should probably discuss on an issue first whether this makes sense.", "author": "nipafx", "createdAt": "2021-01-12T19:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4MjcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ4NTMyNg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/362#discussion_r547485326", "bodyText": "I just saw this code in PioneerAnnotationUtils, no need to repeat it here. Just expose there and add (reflectively) to the params variant.", "author": "nipafx", "createdAt": "2020-12-22T20:09:50Z", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceArgumentsProvider.java", "diffHunk": "@@ -63,17 +80,36 @@\n \t\t\tthrow new IllegalArgumentException(message);\n \t\t}\n \n-\t\tAnnotation argumentsSource = argumentsSources.get(0);\n-\t\tClass<? extends Annotation> argumentsSourceClass = argumentsSource.annotationType();\n-\t\tClass<? extends Range> rangeClass = argumentsSourceClass.getAnnotation(RangeClass.class).value();\n+\t\targumentsSource = argumentsSources.get(0);\n+\t}\n \n-\t\tRange<?> range = (Range) rangeClass.getConstructors()[0].newInstance(argumentsSource);\n-\t\trange.validate();\n-\t\treturn asStream(range).map(Arguments::of);\n+\tprivate void verifyNoContainerAnnotationIsPresent(AnnotatedElement element) {\n+\t\tif (Stream.of(element.getAnnotations()).anyMatch(this::isContainerAnnotation))\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\"Range source annotation should not be repeated for @ParameterizedTest. @ParameterizedTest should have exactly one argument source.\");\n+\t}\n+\n+\tprivate boolean isContainerAnnotation(Annotation annotation) {\n+\t\t// See https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.6.3\n+\t\treturn Stream\n+\t\t\t\t.of(annotation.annotationType().getMethods())\n+\t\t\t\t.anyMatch(method -> method.getName().equals(\"value\") && method.getReturnType().isArray()\n+\t\t\t\t\t\t&& method.getReturnType().getComponentType().isAnnotation()\n+\t\t\t\t\t\t&& declaresContainer(method.getReturnType().getComponentType(), annotation));\n \t}\n \n-\tprivate Stream<?> asStream(Range r) {\n+\tprivate static boolean declaresContainer(Class<?> componentType, Annotation annotation) {\n+\t\tRepeatable repeatable = componentType.getAnnotation(Repeatable.class);\n+\t\treturn repeatable != null && repeatable.value().equals(annotation.annotationType());\n+\t}", "originalCommit": "018ee0cb06802e19652e50f4914f3b7cd0907727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "414c397d4bc923918c7acae646c735d64e5cb01c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/414c397d4bc923918c7acae646c735d64e5cb01c", "message": "Small changes\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-24T11:07:11Z", "type": "commit"}, {"oid": "af238692de0e72fe623093c18237cdf85e10d09c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/af238692de0e72fe623093c18237cdf85e10d09c", "message": "Merge branch 'master' into issue/354-cartesian-range-sources", "committedDate": "2020-12-24T11:07:16Z", "type": "commit"}, {"oid": "af760d14fbc1eee5a3c829e8a79fea733f4d842e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/af760d14fbc1eee5a3c829e8a79fea733f4d842e", "message": "More reflection. I don't like this approach.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-24T11:33:40Z", "type": "commit"}, {"oid": "4533a187d1d9f95c6afad5019ca4cf0301a10df1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4533a187d1d9f95c6afad5019ca4cf0301a10df1", "message": "Update documentation with how to write arguments provider\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-01-04T23:50:00Z", "type": "commit"}, {"oid": "aff499d976a7cc5be109a9f798fe8128fb3dff5e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/aff499d976a7cc5be109a9f798fe8128fb3dff5e", "message": "Merge branch 'master' into issue/354-cartesian-range-sources", "committedDate": "2021-01-05T00:01:20Z", "type": "commit"}, {"oid": "6f7fd19402eabf89c0c0c5525d462c6d973ecd81", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6f7fd19402eabf89c0c0c5525d462c6d973ecd81", "message": "Spotless T^T\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-01-05T00:03:44Z", "type": "commit"}, {"oid": "1ab6dae4818cc88413cfc25ff38e4360ab4d2a7d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1ab6dae4818cc88413cfc25ff38e4360ab4d2a7d", "message": "...and now Sonar too T^T\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-01-05T00:14:17Z", "type": "commit"}, {"oid": "3c4306ab271c32256547c67da29cc91ed04bc20d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3c4306ab271c32256547c67da29cc91ed04bc20d", "message": "Update tests and annotation utils\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-01-05T13:23:02Z", "type": "commit"}]}