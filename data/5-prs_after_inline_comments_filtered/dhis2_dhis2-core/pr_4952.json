{"pr_number": 4952, "pr_title": "2.33 pepfar bug validation refactor", "pr_createdAt": "2020-02-25T16:07:55Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/4952", "timeline": [{"oid": "c346476902b87567ae335875745c933c2ace61c7", "url": "https://github.com/dhis2/dhis2-core/commit/c346476902b87567ae335875745c933c2ace61c7", "message": "fix: fetch unique values during metadata import\n\n- DHIS2-8267\n- Introduced new component that fetches all unique attributes for a\nall Metadata objects of a given class (instead that the full object graph) during Metadata import pre-heat\n- Refactored Metadata import validation into Validation Rules, in order\nto improve testability and \"code-cleaness\"", "committedDate": "2020-02-28T15:57:55Z", "type": "commit"}, {"oid": "c346476902b87567ae335875745c933c2ace61c7", "url": "https://github.com/dhis2/dhis2-core/commit/c346476902b87567ae335875745c933c2ace61c7", "message": "fix: fetch unique values during metadata import\n\n- DHIS2-8267\n- Introduced new component that fetches all unique attributes for a\nall Metadata objects of a given class (instead that the full object graph) during Metadata import pre-heat\n- Refactored Metadata import validation into Validation Rules, in order\nto improve testability and \"code-cleaness\"", "committedDate": "2020-02-28T15:57:55Z", "type": "forcePushed"}, {"oid": "85e1c5aa0bea0a92b0c347a28ef223841066fa8b", "url": "https://github.com/dhis2/dhis2-core/commit/85e1c5aa0bea0a92b0c347a28ef223841066fa8b", "message": "chore: fix code formatting", "committedDate": "2020-02-28T16:10:59Z", "type": "commit"}, {"oid": "5140d85a236b4a927f99e0121b8fc0e264a537e8", "url": "https://github.com/dhis2/dhis2-core/commit/5140d85a236b4a927f99e0121b8fc0e264a537e8", "message": "fix: failing tests", "committedDate": "2020-02-28T19:26:20Z", "type": "commit"}, {"oid": "961cf05213968cf33867682fcbfc70dfad2b57fa", "url": "https://github.com/dhis2/dhis2-core/commit/961cf05213968cf33867682fcbfc70dfad2b57fa", "message": "chore: sonarqube fixes", "committedDate": "2020-03-02T09:10:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0Njg4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386946882", "bodyText": "Missing spaces in paranthesis :)", "author": "stian-sandvold", "createdAt": "2020-03-03T11:03:50Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/DeletionCheck.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class DeletionCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext ctx )\n+    {\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        if ( nonPersistedObjects == null || nonPersistedObjects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        for ( IdentifiableObject identifiableObject : nonPersistedObjects )\n+        {\n+            IdentifiableObject object = bundle.getPreheat().get( bundle.getPreheatIdentifier(), identifiableObject );", "originalCommit": "961cf05213968cf33867682fcbfc70dfad2b57fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3ODMwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r387078300", "bodyText": "fixed", "author": "luciano-fiandesio", "createdAt": "2020-03-03T15:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0Njg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0NzM4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386947384", "bodyText": "space in paranthesis :)", "author": "stian-sandvold", "createdAt": "2020-03-03T11:04:54Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/ReferencesCheck.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.hisp.dhis.common.EmbeddedObject;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.AtomicMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ObjectReport;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.preheat.Preheat;\n+import org.hisp.dhis.preheat.PreheatErrorReport;\n+import org.hisp.dhis.preheat.PreheatIdentifier;\n+import org.hisp.dhis.schema.PropertyType;\n+import org.hisp.dhis.schema.Schema;\n+import org.hisp.dhis.system.util.ReflectionUtils;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserCredentials;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ReferencesCheck\n+    implements\n+    ValidationCheck\n+{\n+    @Override\n+    public TypeReport check( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+        ImportStrategy importStrategy, ValidationContext ctx )\n+    {\n+        TypeReport typeReport = new TypeReport( klass );\n+\n+        List<IdentifiableObject> objects = ValidationUtils.joinObjects( persistedObjects, nonPersistedObjects );\n+\n+        if ( objects.isEmpty() )\n+        {\n+            return typeReport;\n+        }\n+\n+        for ( IdentifiableObject object : objects )\n+        {\n+            List<PreheatErrorReport> errorReports = checkReferences( object, bundle.getPreheat(),\n+                bundle.getPreheatIdentifier(), bundle.isSkipSharing(), ctx );\n+\n+            if ( errorReports.isEmpty() )\n+                continue;\n+            \n+            if ( object != null )\n+            {\n+                ObjectReport objectReport = new ObjectReport( object, bundle );\n+                objectReport.addErrorReports( errorReports );\n+                typeReport.addObjectReport( objectReport );\n+            }\n+        }\n+\n+        if ( !typeReport.getErrorReports().isEmpty() && AtomicMode.ALL == bundle.getAtomicMode() )\n+        {\n+            typeReport.getStats().incIgnored();\n+        }\n+\n+        return typeReport;\n+    }\n+\n+    private List<PreheatErrorReport> checkReferences( IdentifiableObject object, Preheat preheat,\n+        PreheatIdentifier identifier, boolean skipSharing, ValidationContext ctx )\n+    {\n+        List<PreheatErrorReport> preheatErrorReports = new ArrayList<>();\n+\n+        if ( object == null )\n+        {\n+            return preheatErrorReports;\n+        }\n+\n+        Schema schema = ctx.getSchemaService().getDynamicSchema( object.getClass() );\n+        schema.getProperties().stream().filter( p -> p.isPersisted() && p.isOwner()\n+            && (PropertyType.REFERENCE == p.getPropertyType() || PropertyType.REFERENCE == p.getItemPropertyType()) )", "originalCommit": "961cf05213968cf33867682fcbfc70dfad2b57fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3OTI2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r387079266", "bodyText": "fixed", "author": "luciano-fiandesio", "createdAt": "2020-03-03T15:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0NzM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3NjkyMw==", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386976923", "bodyText": "space in paranthesis :)", "author": "stian-sandvold", "createdAt": "2020-03-03T12:07:36Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/ValidationFactory.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleHook;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.schema.SchemaService;\n+import org.hisp.dhis.schema.validation.SchemaValidator;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class ValidationFactory\n+{\n+\n+    private static final Log log = LogFactory.getLog( ValidationFactory.class );\n+\n+    private final SchemaValidator schemaValidator;\n+\n+    private final SchemaService schemaService;\n+\n+    private final AclService aclService;\n+\n+    private final UserService userService;\n+\n+    private final Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap;\n+\n+    private List<ObjectBundleHook> objectBundleHooks;\n+\n+\n+\n+    public ValidationFactory( SchemaValidator schemaValidator, SchemaService schemaService, AclService aclService,\n+        UserService userService, List<ObjectBundleHook> objectBundleHooks,\n+        Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap )\n+    {\n+        this.schemaValidator = schemaValidator;\n+        this.schemaService = schemaService;\n+        this.aclService = aclService;\n+        this.userService = userService;\n+        this.validatorMap = validatorMap;\n+        this.objectBundleHooks = objectBundleHooks == null ? Collections.emptyList() : objectBundleHooks;\n+    }\n+\n+    /**\n+     * Run the validation checks against the bundle\n+     *\n+     * @param bundle an {@see ObjectBundle}\n+     * @param klass the Class type that is getting validated\n+     * @param persistedObjects a List of IdentifiableObject\n+     * @param nonPersistedObjects a List of IdentifiableObject\n+     *\n+     * @return a {@see TypeReport} containing the outcome of the validation\n+     */\n+    public TypeReport validateBundle( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects)\n+    {\n+        ValidationContext ctx = getContext();\n+        TypeReport typeReport =  new ValidationRunner( validatorMap.get( bundle.getImportMode() ) ).executeValidationChain( bundle, klass,\n+            persistedObjects, nonPersistedObjects, ctx );\n+\n+        // remove from the bundle the invalid objects\n+        removeFromBundle(klass, ctx, bundle );", "originalCommit": "961cf05213968cf33867682fcbfc70dfad2b57fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3NzExOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/4952#discussion_r386977119", "bodyText": "space in paranthesis :)", "author": "stian-sandvold", "createdAt": "2020-03-03T12:08:07Z", "path": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/validation/ValidationFactory.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.hisp.dhis.dxf2.metadata.objectbundle.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleHook;\n+import org.hisp.dhis.feedback.TypeReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.schema.SchemaService;\n+import org.hisp.dhis.schema.validation.SchemaValidator;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.UserService;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+@Component\n+public class ValidationFactory\n+{\n+\n+    private static final Log log = LogFactory.getLog( ValidationFactory.class );\n+\n+    private final SchemaValidator schemaValidator;\n+\n+    private final SchemaService schemaService;\n+\n+    private final AclService aclService;\n+\n+    private final UserService userService;\n+\n+    private final Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap;\n+\n+    private List<ObjectBundleHook> objectBundleHooks;\n+\n+\n+\n+    public ValidationFactory( SchemaValidator schemaValidator, SchemaService schemaService, AclService aclService,\n+        UserService userService, List<ObjectBundleHook> objectBundleHooks,\n+        Map<ImportStrategy, List<Class<? extends ValidationCheck>>> validatorMap )\n+    {\n+        this.schemaValidator = schemaValidator;\n+        this.schemaService = schemaService;\n+        this.aclService = aclService;\n+        this.userService = userService;\n+        this.validatorMap = validatorMap;\n+        this.objectBundleHooks = objectBundleHooks == null ? Collections.emptyList() : objectBundleHooks;\n+    }\n+\n+    /**\n+     * Run the validation checks against the bundle\n+     *\n+     * @param bundle an {@see ObjectBundle}\n+     * @param klass the Class type that is getting validated\n+     * @param persistedObjects a List of IdentifiableObject\n+     * @param nonPersistedObjects a List of IdentifiableObject\n+     *\n+     * @return a {@see TypeReport} containing the outcome of the validation\n+     */\n+    public TypeReport validateBundle( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+        List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects)\n+    {\n+        ValidationContext ctx = getContext();\n+        TypeReport typeReport =  new ValidationRunner( validatorMap.get( bundle.getImportMode() ) ).executeValidationChain( bundle, klass,\n+            persistedObjects, nonPersistedObjects, ctx );\n+\n+        // remove from the bundle the invalid objects\n+        removeFromBundle(klass, ctx, bundle );\n+\n+        return addStatistics( typeReport, bundle, persistedObjects, nonPersistedObjects );\n+    }\n+\n+    private TypeReport addStatistics( TypeReport typeReport, ObjectBundle bundle,\n+                                      List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects )\n+    {\n+        if ( bundle.getImportMode().isCreateAndUpdate() )\n+        {\n+            typeReport.getStats().incCreated( nonPersistedObjects.size() );\n+            typeReport.getStats().incUpdated( persistedObjects.size() );\n+\n+        }\n+        else if ( bundle.getImportMode().isCreate() )\n+        {\n+            typeReport.getStats().incCreated( nonPersistedObjects.size() );\n+\n+        }\n+        else if ( bundle.getImportMode().isUpdate() )\n+        {\n+            typeReport.getStats().incUpdated( persistedObjects.size() );\n+\n+        }\n+        else if ( bundle.getImportMode().isDelete() )\n+        {\n+            typeReport.getStats().incDeleted( persistedObjects.size() );\n+        }\n+        return typeReport;\n+    }\n+\n+    /**\n+     *\n+     * @param klass the class of the objects to remove from bundle\n+     * @param ctx the {@see ValidationContext} containing the list of objects to remove\n+     * @param bundle the {@see ObjectBundle}\n+     */\n+    private void removeFromBundle( Class<? extends IdentifiableObject> klass, ValidationContext ctx,\n+        ObjectBundle bundle )\n+    {\n+        List<IdentifiableObject> persisted = bundle.getObjects( klass, true );\n+        persisted.removeAll( ctx.getMarkedForRemoval() );\n+\n+        List<IdentifiableObject> nonPersisted = bundle.getObjects( klass, false );\n+        nonPersisted.removeAll( ctx.getMarkedForRemoval() );\n+    }\n+\n+    private ValidationContext getContext()\n+    {\n+        return new ValidationContext( this.objectBundleHooks, this.schemaValidator, this.aclService, this.userService,\n+            this.schemaService );\n+    }\n+\n+    static class ValidationRunner\n+    {\n+\n+        private List<Class<? extends ValidationCheck>> validators;\n+\n+        public ValidationRunner( List<Class<? extends ValidationCheck>> validators )\n+        {\n+            this.validators = validators;\n+        }\n+\n+        public TypeReport executeValidationChain( ObjectBundle bundle, Class<? extends IdentifiableObject> klass,\n+            List<IdentifiableObject> persistedObjects, List<IdentifiableObject> nonPersistedObjects,\n+            ValidationContext ctx )\n+        {\n+\n+            TypeReport typeReport = new TypeReport( klass );\n+            for ( Class<? extends ValidationCheck> validator : validators )\n+            {\n+                try\n+                {\n+                    ValidationCheck validationCheck = validator.newInstance();\n+                    typeReport.merge( validationCheck.check( bundle, klass, persistedObjects, nonPersistedObjects,\n+                        bundle.getImportMode(), ctx ) );\n+                }\n+                catch ( InstantiationException | IllegalAccessException e )\n+                {\n+                    log.error(\"An error occurred during metadata import validation\", e);", "originalCommit": "961cf05213968cf33867682fcbfc70dfad2b57fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c20cf1e9b7e884a66a18c568c656dabbe41ba6e0", "url": "https://github.com/dhis2/dhis2-core/commit/c20cf1e9b7e884a66a18c568c656dabbe41ba6e0", "message": "chore: reformat", "committedDate": "2020-03-03T15:04:59Z", "type": "commit"}]}