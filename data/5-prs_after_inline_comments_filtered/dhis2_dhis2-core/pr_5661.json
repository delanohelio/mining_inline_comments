{"pr_number": 5661, "pr_title": "feat: DHIS2-8839 - New dataItems endpoint", "pr_createdAt": "2020-06-03T16:31:28Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5661", "timeline": [{"oid": "8a1eee320b97d0c5c00ecc210dc18ce299b3574b", "url": "https://github.com/dhis2/dhis2-core/commit/8a1eee320b97d0c5c00ecc210dc18ce299b3574b", "message": "feat: Draft impl for the new /dataItems endpoint [DHIS2-8839]\n\nThis a draft implementation that still needs to be tested, improved and test covered.", "committedDate": "2020-05-28T16:45:23Z", "type": "commit"}, {"oid": "7b36ef9fa846f326bb32bf79f42748f6ab8deab3", "url": "https://github.com/dhis2/dhis2-core/commit/7b36ef9fa846f326bb32bf79f42748f6ab8deab3", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-05-28T16:46:05Z", "type": "commit"}, {"oid": "2f93032cf44737f44fdc565ab58cbcdb3d6b7a6a", "url": "https://github.com/dhis2/dhis2-core/commit/2f93032cf44737f44fdc565ab58cbcdb3d6b7a6a", "message": "fix: Improving pagination [DHIS2-8839]", "committedDate": "2020-05-29T10:37:49Z", "type": "commit"}, {"oid": "ce42664af0c779b466ecceea8966bee4c3812480", "url": "https://github.com/dhis2/dhis2-core/commit/ce42664af0c779b466ecceea8966bee4c3812480", "message": "fix: Mapping missing entities so they can be queried [DHIS2-8839]\n\nAlso removing unecessary code/logic", "committedDate": "2020-05-29T13:39:32Z", "type": "commit"}, {"oid": "2ca5e95cc0f9a91aa9404289b79df892a7762937", "url": "https://github.com/dhis2/dhis2-core/commit/2ca5e95cc0f9a91aa9404289b79df892a7762937", "message": "refactor: Small refactoring and more comments [DHIS2-8839]", "committedDate": "2020-05-29T14:11:33Z", "type": "commit"}, {"oid": "bc1a83cfa13728256ec8f574643086ecbe02c146", "url": "https://github.com/dhis2/dhis2-core/commit/bc1a83cfa13728256ec8f574643086ecbe02c146", "message": "refactor: Improving response handling [DHIS2-8839]", "committedDate": "2020-05-29T16:45:06Z", "type": "commit"}, {"oid": "161fa7b6e2e403c8e0f85e5f4248eaa0a6ed95e5", "url": "https://github.com/dhis2/dhis2-core/commit/161fa7b6e2e403c8e0f85e5f4248eaa0a6ed95e5", "message": "fix: Reusing glocal caching components [DHIS2-8839]", "committedDate": "2020-06-02T10:22:49Z", "type": "commit"}, {"oid": "04766097222aa4467e659cba34faf9829e27be1a", "url": "https://github.com/dhis2/dhis2-core/commit/04766097222aa4467e659cba34faf9829e27be1a", "message": "chore: Adding static import [DHIS2-8839]", "committedDate": "2020-06-02T10:24:51Z", "type": "commit"}, {"oid": "8665f938d02ea11913c0ba8c052725fcc963d32b", "url": "https://github.com/dhis2/dhis2-core/commit/8665f938d02ea11913c0ba8c052725fcc963d32b", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-02T10:27:13Z", "type": "commit"}, {"oid": "9661f2f6b74b4907293dd63bb0a0e2867b3e81a8", "url": "https://github.com/dhis2/dhis2-core/commit/9661f2f6b74b4907293dd63bb0a0e2867b3e81a8", "message": "feat: Adding filter for  program.id [DHIS2-8839]", "committedDate": "2020-06-03T16:26:59Z", "type": "commit"}, {"oid": "d1c8780bcbbed41981978db885cc003211e25880", "url": "https://github.com/dhis2/dhis2-core/commit/d1c8780bcbbed41981978db885cc003211e25880", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-04T10:12:02Z", "type": "commit"}, {"oid": "11528c5949daff19541c14c483eb56674442d4e9", "url": "https://github.com/dhis2/dhis2-core/commit/11528c5949daff19541c14c483eb56674442d4e9", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-05T06:56:41Z", "type": "commit"}, {"oid": "feb70c8043fc081ff5eddf2c0cd8746aff06ba3c", "url": "https://github.com/dhis2/dhis2-core/commit/feb70c8043fc081ff5eddf2c0cd8746aff06ba3c", "message": "fix: Adding support to query all default items [DHIS2-8839]", "committedDate": "2020-06-05T09:04:49Z", "type": "commit"}, {"oid": "8f7b9b301ffa426e8f28f1602c6b1403cdcba94b", "url": "https://github.com/dhis2/dhis2-core/commit/8f7b9b301ffa426e8f28f1602c6b1403cdcba94b", "message": "fix: Fixing the map of querying elements [DHIS2-8839]", "committedDate": "2020-06-05T09:06:49Z", "type": "commit"}, {"oid": "e64214572e31abcf4c84ddc8ef80d666318f9ab4", "url": "https://github.com/dhis2/dhis2-core/commit/e64214572e31abcf4c84ddc8ef80d666318f9ab4", "message": "feat: Add support for IN filter [DHIS2-8839]\n\nPagination was also fixed and now it's not allowed for multiple dimension items (2.35)", "committedDate": "2020-06-05T13:43:25Z", "type": "commit"}, {"oid": "6c6708450ddd80ecd7e5a38cc88514f584bac0a0", "url": "https://github.com/dhis2/dhis2-core/commit/6c6708450ddd80ecd7e5a38cc88514f584bac0a0", "message": "refactor: Extracting common code into a new method [DHIS2-8839]", "committedDate": "2020-06-08T06:28:20Z", "type": "commit"}, {"oid": "54bc7f366a2648ab53eca08f7fdf801b08658d46", "url": "https://github.com/dhis2/dhis2-core/commit/54bc7f366a2648ab53eca08f7fdf801b08658d46", "message": "chore: Adding more unit tests [DHIS2-8839]", "committedDate": "2020-06-08T12:55:31Z", "type": "commit"}, {"oid": "6115745fbfe09f935cf99f7a463276d11dbf1d12", "url": "https://github.com/dhis2/dhis2-core/commit/6115745fbfe09f935cf99f7a463276d11dbf1d12", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-09T07:26:33Z", "type": "commit"}, {"oid": "ff4b915d8b5ef5e79590a7a631b1778c60085edb", "url": "https://github.com/dhis2/dhis2-core/commit/ff4b915d8b5ef5e79590a7a631b1778c60085edb", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-09T12:42:57Z", "type": "commit"}, {"oid": "ba6926d9ee2a70173b715ee89dc564bbaae44b6a", "url": "https://github.com/dhis2/dhis2-core/commit/ba6926d9ee2a70173b715ee89dc564bbaae44b6a", "message": "feat: Adding pagination and sorting skeleton [DHIS2-8839]", "committedDate": "2020-06-11T16:26:31Z", "type": "commit"}, {"oid": "39e0bf4029671afdff1b97fcbe7f97ee9842f8eb", "url": "https://github.com/dhis2/dhis2-core/commit/39e0bf4029671afdff1b97fcbe7f97ee9842f8eb", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-11T16:26:46Z", "type": "commit"}, {"oid": "725ce54f940e46aba3b6950cd91065b5e9a49d02", "url": "https://github.com/dhis2/dhis2-core/commit/725ce54f940e46aba3b6950cd91065b5e9a49d02", "message": "chore: Unit tests and validation improvements. [DHIS2-8839]", "committedDate": "2020-06-12T15:57:30Z", "type": "commit"}, {"oid": "cef4656f7c9f4bba11930fbf2b9531f093ba5338", "url": "https://github.com/dhis2/dhis2-core/commit/cef4656f7c9f4bba11930fbf2b9531f093ba5338", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-12T15:57:43Z", "type": "commit"}, {"oid": "cc05d51dc594c1f9289c0aa822b8b6dc1d098085", "url": "https://github.com/dhis2/dhis2-core/commit/cc05d51dc594c1f9289c0aa822b8b6dc1d098085", "message": "chore: Adding new tests [DHIS2-8839]", "committedDate": "2020-06-15T11:29:38Z", "type": "commit"}, {"oid": "a01a059c8193f052c626d60e5e6fa08c608ed132", "url": "https://github.com/dhis2/dhis2-core/commit/a01a059c8193f052c626d60e5e6fa08c608ed132", "message": "chore: Adding more unit tests [DHIS2-8839]", "committedDate": "2020-06-15T13:56:42Z", "type": "commit"}, {"oid": "7b005960990ee2a19fe29a94a6d37fc00ec4a517", "url": "https://github.com/dhis2/dhis2-core/commit/7b005960990ee2a19fe29a94a6d37fc00ec4a517", "message": "fix: Javadoc typo [DHIS2-8839]", "committedDate": "2020-06-15T13:58:24Z", "type": "commit"}, {"oid": "e125638b32fbdebe4d5a2858e78f38a9c31155c0", "url": "https://github.com/dhis2/dhis2-core/commit/e125638b32fbdebe4d5a2858e78f38a9c31155c0", "message": "refactor: Using error codes for exceptions [DHIS2-8839]", "committedDate": "2020-06-15T17:36:02Z", "type": "commit"}, {"oid": "37cc24abed0b1986cc170267714646cb16473f5f", "url": "https://github.com/dhis2/dhis2-core/commit/37cc24abed0b1986cc170267714646cb16473f5f", "message": "fix: Removing unecessary logic [DHIS2-8839]", "committedDate": "2020-06-16T07:22:15Z", "type": "commit"}, {"oid": "809a52568459d975d6b0399577a4d673c9be432b", "url": "https://github.com/dhis2/dhis2-core/commit/809a52568459d975d6b0399577a4d673c9be432b", "message": "fix: Removing unecessary code [DHIS2-8839]", "committedDate": "2020-06-16T11:17:05Z", "type": "commit"}, {"oid": "f4b4d198b2a44c5c52f2490898e837828041594e", "url": "https://github.com/dhis2/dhis2-core/commit/f4b4d198b2a44c5c52f2490898e837828041594e", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-16T11:17:26Z", "type": "commit"}, {"oid": "45215afd7914560729f7fe6e2a5a36745e944b7d", "url": "https://github.com/dhis2/dhis2-core/commit/45215afd7914560729f7fe6e2a5a36745e944b7d", "message": "chore: Removing unused code [DHIS2-8839]", "committedDate": "2020-06-16T12:37:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjU0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441532546", "bodyText": "Remove \"the\", just \"parse filter\".", "author": "larshelge", "createdAt": "2020-06-17T13:11:14Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java", "diffHunk": "@@ -59,6 +59,9 @@\n     E2011( \"User is not allowed to read data for attribute option combo: `{0}`\" ),\n     E2012( \"User is not allowed to view org unit: `{0}`\" ),\n     E2013( \"At least one data set must be specified\" ),\n+    E2014( \"Unable to parse the filter `{0}`\" ),", "originalCommit": "45215afd7914560729f7fe6e2a5a36745e944b7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNzU1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441627558", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-17T15:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjY1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441532653", "bodyText": "Remove \"the\", just \"parse order param\".", "author": "larshelge", "createdAt": "2020-06-17T13:11:25Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java", "diffHunk": "@@ -59,6 +59,9 @@\n     E2011( \"User is not allowed to read data for attribute option combo: `{0}`\" ),\n     E2012( \"User is not allowed to view org unit: `{0}`\" ),\n     E2013( \"At least one data set must be specified\" ),\n+    E2014( \"Unable to parse the filter `{0}`\" ),\n+    E2015( \"Unable to parse the order param: `{0}`\" ),", "originalCommit": "45215afd7914560729f7fe6e2a5a36745e944b7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNzYwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441627602", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-17T15:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjg5OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441532899", "bodyText": "Add a bit more info about what we actually are unable to parse.", "author": "larshelge", "createdAt": "2020-06-17T13:11:48Z", "path": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java", "diffHunk": "@@ -59,6 +59,9 @@\n     E2011( \"User is not allowed to read data for attribute option combo: `{0}`\" ),\n     E2012( \"User is not allowed to view org unit: `{0}`\" ),\n     E2013( \"At least one data set must be specified\" ),\n+    E2014( \"Unable to parse the filter `{0}`\" ),\n+    E2015( \"Unable to parse the order param: `{0}`\" ),\n+    E2016( \"Unable to parse `{0}`. The values available are: {1}\" ),", "originalCommit": "45215afd7914560729f7fe6e2a5a36745e944b7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNzY0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441627644", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-17T15:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzEzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441533135", "bodyText": "Add \"public\" modifier.", "author": "larshelge", "createdAt": "2020-06-17T13:12:12Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/DataItemQueryController.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package org.hisp.dhis.webapi.controller.dataitem;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.Lists.newArrayList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.DhisApiVersion.ALL;\n+import static org.hisp.dhis.common.DhisApiVersion.DEFAULT;\n+import static org.hisp.dhis.feedback.ErrorCode.E3012;\n+import static org.hisp.dhis.node.NodeUtils.createMetadata;\n+import static org.springframework.http.HttpStatus.FOUND;\n+import static org.springframework.http.HttpStatus.NOT_FOUND;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+import org.hisp.dhis.node.Preset;\n+import org.hisp.dhis.node.types.RootNode;\n+import org.hisp.dhis.query.QueryParserException;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;\n+import org.hisp.dhis.webapi.service.ContextService;\n+import org.hisp.dhis.webapi.webdomain.WebOptions;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * This class is responsible for providing methods responsible for retrieving\n+ * dimensional items based on the provided URL params and filters.\n+ *\n+ * It should expose only query methods.\n+ */\n+@Slf4j\n+@ApiVersion( { DEFAULT, ALL } )\n+@RestController\n+class DataItemQueryController", "originalCommit": "45215afd7914560729f7fe6e2a5a36745e944b7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNzcwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441627701", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-17T15:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzEzNQ=="}], "type": "inlineReview"}, {"oid": "d10ce86e1f122e404c420903b878385d125194de", "url": "https://github.com/dhis2/dhis2-core/commit/d10ce86e1f122e404c420903b878385d125194de", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-17T14:58:44Z", "type": "commit"}, {"oid": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "url": "https://github.com/dhis2/dhis2-core/commit/900c01d454f079378a29c8c3bc389cf6dd97ad3d", "message": "fix: Code review fixes [DHIS2-8839]", "committedDate": "2020-06-17T15:14:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDg1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441664850", "bodyText": "Commnted out code", "author": "luciano-fiandesio", "createdAt": "2020-06-17T16:13:58Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/DataItemQueryController.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package org.hisp.dhis.webapi.controller.dataitem;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.Lists.newArrayList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.DhisApiVersion.ALL;\n+import static org.hisp.dhis.common.DhisApiVersion.DEFAULT;\n+import static org.hisp.dhis.feedback.ErrorCode.E3012;\n+import static org.hisp.dhis.node.NodeUtils.createMetadata;\n+import static org.springframework.http.HttpStatus.FOUND;\n+import static org.springframework.http.HttpStatus.NOT_FOUND;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+import org.hisp.dhis.node.Preset;\n+import org.hisp.dhis.node.types.RootNode;\n+import org.hisp.dhis.query.QueryParserException;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;\n+import org.hisp.dhis.webapi.service.ContextService;\n+import org.hisp.dhis.webapi.webdomain.WebOptions;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * This class is responsible for providing methods responsible for retrieving\n+ * dimensional items based on the provided URL params and filters.\n+ *\n+ * It should expose only query methods.\n+ */\n+@Slf4j\n+@ApiVersion( { DEFAULT, ALL } )\n+@RestController\n+public class DataItemQueryController\n+{\n+    static final String API_RESOURCE_PATH = \"/dataItems\";\n+\n+    private static final String FIELDS = \"fields\";\n+\n+    private static final String FILTER = \"filter\";\n+\n+    private final DataItemServiceFacade dataItemServiceFacade;\n+\n+    private final ContextService contextService;\n+\n+    private final ResponseHandler responseHandler;\n+\n+    private final AclService aclService;\n+\n+    public DataItemQueryController( final DataItemServiceFacade dataItemServiceFacade,\n+        final ContextService contextService, final ResponseHandler responseHandler, final AclService aclService )\n+    {\n+        checkNotNull( dataItemServiceFacade );\n+        checkNotNull( contextService );\n+        checkNotNull( responseHandler );\n+        checkNotNull( aclService );\n+\n+        this.dataItemServiceFacade = dataItemServiceFacade;\n+        this.contextService = contextService;\n+        this.responseHandler = responseHandler;\n+        this.aclService = aclService;\n+    }\n+\n+    /**\n+     * Retrieve all data items based in the URL filters and parameters.\n+     *\n+     * @return the list of items found in JSON format\n+     */\n+    @GetMapping( value = API_RESOURCE_PATH, produces = APPLICATION_JSON_VALUE )\n+    public ResponseEntity<RootNode> getJson( @RequestParam\n+    final Map<String, String> urlParameters, final OrderParams orderParams, final User currentUser )\n+        throws QueryParserException\n+    {\n+        log.debug( \"Looking for data items (JSON response)\" );\n+\n+        return getDimensionalItems( currentUser, urlParameters, orderParams );\n+    }\n+\n+    /**\n+     * Retrieve all data items based in the URL filters and parameters.\n+     *\n+     * @return the list of items found in XML format\n+     */\n+    @GetMapping( value = API_RESOURCE_PATH + \".xml\", produces = APPLICATION_XML_VALUE )\n+    public ResponseEntity<RootNode> getXml( @RequestParam\n+    final Map<String, String> urlParameters, final OrderParams orderParams, final User currentUser )\n+    {\n+        log.debug( \"Looking for data items (XML response)\" );\n+\n+        return getDimensionalItems( currentUser, urlParameters, orderParams );\n+    }\n+\n+    /**\n+     * Based on the informed arguments, this method will read the URL and based on\n+     * the give params will retrieve the respective data items.\n+     * \n+     * @param currentUser the logged user\n+     * @param urlParameters the request url params\n+     * @param orderParams the request order params\n+     * @return the complete root node\n+     */\n+    private ResponseEntity<RootNode> getDimensionalItems( final User currentUser,\n+        final Map<String, String> urlParameters,\n+        final OrderParams orderParams )\n+    {\n+        // Defining the input params.\n+        final List<String> fields = newArrayList( contextService.getParameterValues( FIELDS ) );\n+        final List<String> filters = newArrayList( contextService.getParameterValues( FILTER ) );\n+        final WebOptions options = new WebOptions( urlParameters );\n+\n+        // checkPaginationSupport( filters );", "originalCommit": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3ODYwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r442178601", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-18T12:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjM3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441666374", "bodyText": "Just a consideration: do we need to fail the entire request if one of the entity is not readable?", "author": "luciano-fiandesio", "createdAt": "2020-06-17T16:16:30Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/DataItemQueryController.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package org.hisp.dhis.webapi.controller.dataitem;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.Lists.newArrayList;\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.hisp.dhis.common.DhisApiVersion.ALL;\n+import static org.hisp.dhis.common.DhisApiVersion.DEFAULT;\n+import static org.hisp.dhis.feedback.ErrorCode.E3012;\n+import static org.hisp.dhis.node.NodeUtils.createMetadata;\n+import static org.springframework.http.HttpStatus.FOUND;\n+import static org.springframework.http.HttpStatus.NOT_FOUND;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+import static org.springframework.http.MediaType.APPLICATION_XML_VALUE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+import org.hisp.dhis.node.Preset;\n+import org.hisp.dhis.node.types.RootNode;\n+import org.hisp.dhis.query.QueryParserException;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.webapi.mvc.annotation.ApiVersion;\n+import org.hisp.dhis.webapi.service.ContextService;\n+import org.hisp.dhis.webapi.webdomain.WebOptions;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * This class is responsible for providing methods responsible for retrieving\n+ * dimensional items based on the provided URL params and filters.\n+ *\n+ * It should expose only query methods.\n+ */\n+@Slf4j\n+@ApiVersion( { DEFAULT, ALL } )\n+@RestController\n+public class DataItemQueryController\n+{\n+    static final String API_RESOURCE_PATH = \"/dataItems\";\n+\n+    private static final String FIELDS = \"fields\";\n+\n+    private static final String FILTER = \"filter\";\n+\n+    private final DataItemServiceFacade dataItemServiceFacade;\n+\n+    private final ContextService contextService;\n+\n+    private final ResponseHandler responseHandler;\n+\n+    private final AclService aclService;\n+\n+    public DataItemQueryController( final DataItemServiceFacade dataItemServiceFacade,\n+        final ContextService contextService, final ResponseHandler responseHandler, final AclService aclService )\n+    {\n+        checkNotNull( dataItemServiceFacade );\n+        checkNotNull( contextService );\n+        checkNotNull( responseHandler );\n+        checkNotNull( aclService );\n+\n+        this.dataItemServiceFacade = dataItemServiceFacade;\n+        this.contextService = contextService;\n+        this.responseHandler = responseHandler;\n+        this.aclService = aclService;\n+    }\n+\n+    /**\n+     * Retrieve all data items based in the URL filters and parameters.\n+     *\n+     * @return the list of items found in JSON format\n+     */\n+    @GetMapping( value = API_RESOURCE_PATH, produces = APPLICATION_JSON_VALUE )\n+    public ResponseEntity<RootNode> getJson( @RequestParam\n+    final Map<String, String> urlParameters, final OrderParams orderParams, final User currentUser )\n+        throws QueryParserException\n+    {\n+        log.debug( \"Looking for data items (JSON response)\" );\n+\n+        return getDimensionalItems( currentUser, urlParameters, orderParams );\n+    }\n+\n+    /**\n+     * Retrieve all data items based in the URL filters and parameters.\n+     *\n+     * @return the list of items found in XML format\n+     */\n+    @GetMapping( value = API_RESOURCE_PATH + \".xml\", produces = APPLICATION_XML_VALUE )\n+    public ResponseEntity<RootNode> getXml( @RequestParam\n+    final Map<String, String> urlParameters, final OrderParams orderParams, final User currentUser )\n+    {\n+        log.debug( \"Looking for data items (XML response)\" );\n+\n+        return getDimensionalItems( currentUser, urlParameters, orderParams );\n+    }\n+\n+    /**\n+     * Based on the informed arguments, this method will read the URL and based on\n+     * the give params will retrieve the respective data items.\n+     * \n+     * @param currentUser the logged user\n+     * @param urlParameters the request url params\n+     * @param orderParams the request order params\n+     * @return the complete root node\n+     */\n+    private ResponseEntity<RootNode> getDimensionalItems( final User currentUser,\n+        final Map<String, String> urlParameters,\n+        final OrderParams orderParams )\n+    {\n+        // Defining the input params.\n+        final List<String> fields = newArrayList( contextService.getParameterValues( FIELDS ) );\n+        final List<String> filters = newArrayList( contextService.getParameterValues( FILTER ) );\n+        final WebOptions options = new WebOptions( urlParameters );\n+\n+        // checkPaginationSupport( filters );\n+\n+        if ( fields.isEmpty() )\n+        {\n+            fields.addAll( Preset.ALL.getFields() );\n+        }\n+\n+        // Extracting the target entities to be queried.\n+        final Set<Class<? extends BaseDimensionalItemObject>> targetEntities = dataItemServiceFacade\n+            .extractTargetEntities( filters );\n+\n+        // Checking if the user can read all the target entities.\n+        checkAuthorization( currentUser, targetEntities );\n+\n+        // Retrieving the data items based on the input params.\n+        final List<BaseDimensionalItemObject> dimensionalItems = dataItemServiceFacade.retrieveDataItemEntities(\n+            targetEntities, filters, options, orderParams );\n+\n+        // Creating the response node.\n+        final RootNode rootNode = createMetadata();\n+        responseHandler.addResultsToNode( rootNode, dimensionalItems, fields );\n+        responseHandler.addPaginationToNode( rootNode, new ArrayList<>( targetEntities ), currentUser, options,\n+            filters );\n+\n+        if ( isNotEmpty( dimensionalItems ) )\n+        {\n+            return new ResponseEntity<>( rootNode, FOUND );\n+        }\n+\n+        return new ResponseEntity<>( rootNode, NOT_FOUND );\n+    }\n+\n+    private void checkAuthorization( final User currentUser,\n+        final Set<Class<? extends BaseDimensionalItemObject>> entities )\n+    {\n+        if ( isNotEmpty( entities ) )\n+        {\n+            for ( final Class<? extends BaseDimensionalItemObject> entity : entities )\n+            {\n+                if ( !aclService.canRead( currentUser, entity ) )\n+                {\n+                    throw new IllegalQueryException(", "originalCommit": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4MTAwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r442181007", "bodyText": "I'm not sure. In the other hand, if we don't fail the user might have the impression that results are missing as we will skip the non-readable ones behind the scenes. This seems to be a behaviour that should come from the requirements.\n@larshelge, what's your opinion on this situation? Luciano raised a good point.\nThanks", "author": "maikelarabori", "createdAt": "2020-06-18T12:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4NDk3MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r476384971", "bodyText": "I think we should simply filter out the items which the user does not have access to. That is how it works for other APIs.", "author": "larshelge", "createdAt": "2020-08-25T11:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2NjM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MjY1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441672659", "bodyText": "minor: you can use generics here: Comparator<BaseDimensionalItemObject>", "author": "luciano-fiandesio", "createdAt": "2020-06-17T16:26:56Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/helper/OrderingHelper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.hisp.dhis.webapi.controller.dataitem.helper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.apache.commons.lang3.StringUtils.split;\n+import static org.hisp.dhis.feedback.ErrorCode.E2015;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.beanutils.BeanComparator;\n+import org.apache.commons.collections4.comparators.ComparatorChain;\n+import org.apache.commons.collections4.comparators.NullComparator;\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+\n+/**\n+ * Helper class responsible for providing sorting capabilities.\n+ */\n+public class OrderingHelper\n+{\n+    private static final int ORDERING_ATTRIBUTE = 0;\n+\n+    private static final int ORDERING_VALUE = 1;\n+\n+    private static final String DESC = \"desc\";\n+\n+    /**\n+     * Sorts the given list based on the given sorting params.\n+     *\n+     * @param dimensionalItems\n+     * @param sortingParams\n+     */\n+    public static void sort( final List<BaseDimensionalItemObject> dimensionalItems, final OrderParams sortingParams )\n+    {\n+        if ( sortingParams != null && isNotEmpty( dimensionalItems ) )\n+        {\n+            final ComparatorChain<BaseDimensionalItemObject> chainOfComparators = new ComparatorChain();\n+            final Set<String> orderingPairs = sortingParams.getOrders();\n+\n+            if ( sortingParams != null && isNotEmpty( orderingPairs ) )\n+            {\n+                for ( final String orderingPair : orderingPairs )\n+                {\n+                    chainOfComparators.addComparator( getComparator( orderingPair ) );\n+                }\n+\n+                Collections.sort( dimensionalItems, chainOfComparators );\n+            }\n+        }\n+    }\n+\n+    private static Comparator getComparator( final String orderingParam )", "originalCommit": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3ODU3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r442178573", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-18T12:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MjY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MzAwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441673009", "bodyText": "very minory:\nBeanComparator<>\nNullComparator<>\nto remove the generics warning", "author": "luciano-fiandesio", "createdAt": "2020-06-17T16:27:27Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/helper/OrderingHelper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.hisp.dhis.webapi.controller.dataitem.helper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.apache.commons.lang3.StringUtils.split;\n+import static org.hisp.dhis.feedback.ErrorCode.E2015;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.beanutils.BeanComparator;\n+import org.apache.commons.collections4.comparators.ComparatorChain;\n+import org.apache.commons.collections4.comparators.NullComparator;\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+\n+/**\n+ * Helper class responsible for providing sorting capabilities.\n+ */\n+public class OrderingHelper\n+{\n+    private static final int ORDERING_ATTRIBUTE = 0;\n+\n+    private static final int ORDERING_VALUE = 1;\n+\n+    private static final String DESC = \"desc\";\n+\n+    /**\n+     * Sorts the given list based on the given sorting params.\n+     *\n+     * @param dimensionalItems\n+     * @param sortingParams\n+     */\n+    public static void sort( final List<BaseDimensionalItemObject> dimensionalItems, final OrderParams sortingParams )\n+    {\n+        if ( sortingParams != null && isNotEmpty( dimensionalItems ) )\n+        {\n+            final ComparatorChain<BaseDimensionalItemObject> chainOfComparators = new ComparatorChain();\n+            final Set<String> orderingPairs = sortingParams.getOrders();\n+\n+            if ( sortingParams != null && isNotEmpty( orderingPairs ) )\n+            {\n+                for ( final String orderingPair : orderingPairs )\n+                {\n+                    chainOfComparators.addComparator( getComparator( orderingPair ) );\n+                }\n+\n+                Collections.sort( dimensionalItems, chainOfComparators );\n+            }\n+        }\n+    }\n+\n+    private static Comparator getComparator( final String orderingParam )\n+    {\n+        final String[] orderingAttributes = split( orderingParam, \":\" );\n+        final boolean hasValidOrderingAttributes = orderingAttributes != null & orderingAttributes.length == 2;\n+\n+        if ( hasValidOrderingAttributes )\n+        {\n+            final BeanComparator<BaseDimensionalItemObject> comparator = new BeanComparator(", "originalCommit": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3ODU1Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r442178552", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-18T12:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MzAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MzM0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441673344", "bodyText": "alternative: dimensionalItems.sort( chainOfComparators );", "author": "luciano-fiandesio", "createdAt": "2020-06-17T16:28:02Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/helper/OrderingHelper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.hisp.dhis.webapi.controller.dataitem.helper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.apache.commons.lang3.StringUtils.split;\n+import static org.hisp.dhis.feedback.ErrorCode.E2015;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.beanutils.BeanComparator;\n+import org.apache.commons.collections4.comparators.ComparatorChain;\n+import org.apache.commons.collections4.comparators.NullComparator;\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+\n+/**\n+ * Helper class responsible for providing sorting capabilities.\n+ */\n+public class OrderingHelper\n+{\n+    private static final int ORDERING_ATTRIBUTE = 0;\n+\n+    private static final int ORDERING_VALUE = 1;\n+\n+    private static final String DESC = \"desc\";\n+\n+    /**\n+     * Sorts the given list based on the given sorting params.\n+     *\n+     * @param dimensionalItems\n+     * @param sortingParams\n+     */\n+    public static void sort( final List<BaseDimensionalItemObject> dimensionalItems, final OrderParams sortingParams )\n+    {\n+        if ( sortingParams != null && isNotEmpty( dimensionalItems ) )\n+        {\n+            final ComparatorChain<BaseDimensionalItemObject> chainOfComparators = new ComparatorChain();\n+            final Set<String> orderingPairs = sortingParams.getOrders();\n+\n+            if ( sortingParams != null && isNotEmpty( orderingPairs ) )\n+            {\n+                for ( final String orderingPair : orderingPairs )\n+                {\n+                    chainOfComparators.addComparator( getComparator( orderingPair ) );\n+                }\n+\n+                Collections.sort( dimensionalItems, chainOfComparators );", "originalCommit": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3ODUyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r442178526", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-18T12:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MzM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDEyNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r441674124", "bodyText": "very minor:\nnew ComparatorChain<>()\nto remove the warning", "author": "luciano-fiandesio", "createdAt": "2020-06-17T16:29:16Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/dataitem/helper/OrderingHelper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.hisp.dhis.webapi.controller.dataitem.helper;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n+import static org.apache.commons.lang3.StringUtils.split;\n+import static org.hisp.dhis.feedback.ErrorCode.E2015;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.beanutils.BeanComparator;\n+import org.apache.commons.collections4.comparators.ComparatorChain;\n+import org.apache.commons.collections4.comparators.NullComparator;\n+import org.hisp.dhis.common.BaseDimensionalItemObject;\n+import org.hisp.dhis.common.IllegalQueryException;\n+import org.hisp.dhis.dxf2.common.OrderParams;\n+import org.hisp.dhis.feedback.ErrorMessage;\n+\n+/**\n+ * Helper class responsible for providing sorting capabilities.\n+ */\n+public class OrderingHelper\n+{\n+    private static final int ORDERING_ATTRIBUTE = 0;\n+\n+    private static final int ORDERING_VALUE = 1;\n+\n+    private static final String DESC = \"desc\";\n+\n+    /**\n+     * Sorts the given list based on the given sorting params.\n+     *\n+     * @param dimensionalItems\n+     * @param sortingParams\n+     */\n+    public static void sort( final List<BaseDimensionalItemObject> dimensionalItems, final OrderParams sortingParams )\n+    {\n+        if ( sortingParams != null && isNotEmpty( dimensionalItems ) )\n+        {\n+            final ComparatorChain<BaseDimensionalItemObject> chainOfComparators = new ComparatorChain();", "originalCommit": "900c01d454f079378a29c8c3bc389cf6dd97ad3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE3ODQ4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r442178487", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-06-18T12:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDEyNA=="}], "type": "inlineReview"}, {"oid": "be337cf3f80742ba179544083740ae40f3cc4f2c", "url": "https://github.com/dhis2/dhis2-core/commit/be337cf3f80742ba179544083740ae40f3cc4f2c", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-18T12:02:10Z", "type": "commit"}, {"oid": "306f30030e81c3f35e9e6431a231819b04551e34", "url": "https://github.com/dhis2/dhis2-core/commit/306f30030e81c3f35e9e6431a231819b04551e34", "message": "fix: Code review genercis issues [DHIS2-8839]", "committedDate": "2020-06-18T12:10:41Z", "type": "commit"}, {"oid": "f2d7029d50c6d0de732233d40638696fddd05712", "url": "https://github.com/dhis2/dhis2-core/commit/f2d7029d50c6d0de732233d40638696fddd05712", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-26T13:59:44Z", "type": "commit"}, {"oid": "c4b4d8d41b6d035074e21d1a168b3b3805b65cd8", "url": "https://github.com/dhis2/dhis2-core/commit/c4b4d8d41b6d035074e21d1a168b3b3805b65cd8", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-06-29T06:48:22Z", "type": "commit"}, {"oid": "e3fa6781ae1a23875583493431685e9ae2fb5d53", "url": "https://github.com/dhis2/dhis2-core/commit/e3fa6781ae1a23875583493431685e9ae2fb5d53", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-07-07T11:25:50Z", "type": "commit"}, {"oid": "238c76963054970ce89b23d72e1d498ab1a9e1c5", "url": "https://github.com/dhis2/dhis2-core/commit/238c76963054970ce89b23d72e1d498ab1a9e1c5", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-07-14T10:07:25Z", "type": "commit"}, {"oid": "aa9a402394787a39e80eab4f07d9ee38f8ba44ba", "url": "https://github.com/dhis2/dhis2-core/commit/aa9a402394787a39e80eab4f07d9ee38f8ba44ba", "message": "Merge branch 'master' of https://github.com/dhis2/dhis2-core into DHIS2-8839", "committedDate": "2020-07-15T07:14:13Z", "type": "commit"}, {"oid": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "url": "https://github.com/dhis2/dhis2-core/commit/9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "message": "feat: Adding e2e tests [DHIS2-8839]", "committedDate": "2020-07-15T09:29:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTE0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454969149", "bodyText": "for the sake of reporting, I would use rest-assured assertions here. For example:\nresponse.validate().body(\"nameableObjects.dimensionItemType\", hasSize(greaterOrEqualTo(1))). If you do so, upon failure the response will be printed out and the assertion message will look more meaningful than only \"expected true, but found false\"", "author": "vilkg", "createdAt": "2020-07-15T11:02:29Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/dataitems/DataItemQueryTests.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.dataitems;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.isA;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.dataitem.DataItemActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test cases related to GET \"dataItems\" endpoint. The tests and assertions are\n+ * based on the file \"setup/metadata.json\" => \"programIndicators\",\n+ * \"dataElements\".\n+ * \n+ * The test cases using default pagination will imply \"paging=true\", which is\n+ * the default when \"paging\" is omitted.\n+ *\n+ * @author maikel arabori\n+ */\n+public class DataItemQueryTests extends ApiTest\n+{\n+    private static final int FOUND = 302;\n+\n+    private static final int NOT_FOUND = 404;\n+\n+    private static final int CONFLICT = 409;\n+\n+    private DataItemActions dataItemActions;\n+\n+    @BeforeAll\n+    public void before()\n+    {\n+        dataItemActions = new DataItemActions();\n+\n+        login();\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPagination()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get();\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );", "originalCommit": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NTQzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454985431", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-07-15T11:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDY0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454970643", "bodyText": "Do you import this data item before the tests? We run them on empty db.", "author": "vilkg", "createdAt": "2020-07-15T11:05:25Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/dataitems/DataItemQueryTests.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.dataitems;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.isA;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.dataitem.DataItemActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test cases related to GET \"dataItems\" endpoint. The tests and assertions are\n+ * based on the file \"setup/metadata.json\" => \"programIndicators\",\n+ * \"dataElements\".\n+ * \n+ * The test cases using default pagination will imply \"paging=true\", which is\n+ * the default when \"paging\" is omitted.\n+ *\n+ * @author maikel arabori\n+ */\n+public class DataItemQueryTests extends ApiTest\n+{\n+    private static final int FOUND = 302;\n+\n+    private static final int NOT_FOUND = 404;\n+\n+    private static final int CONFLICT = 409;\n+\n+    private DataItemActions dataItemActions;\n+\n+    @BeforeAll\n+    public void before()\n+    {\n+        dataItemActions = new DataItemActions();\n+\n+        login();\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPagination()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get();\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsWithoutPagination()\n+    {\n+        // Given\n+        final String noPagination = \"?paging=false\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( noPagination );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", is( nullValue() ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPaginationOrderedByCode()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get( \"?order=code:asc\" );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", isA( String.class ) );\n+        response.validate().body( \"nameableObjects[0].code\", is( \"AAAAAAA-1234\" ) );", "originalCommit": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NTM0NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454985344", "bodyText": "Yes, I added a new \"programIndicators\" attribute to the \"metadata.json\". It should be imported during the execution chain. Or not?", "author": "maikelarabori", "createdAt": "2020-07-15T11:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4ODgxNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454988814", "bodyText": "yep, that's correct!", "author": "vilkg", "createdAt": "2020-07-15T11:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTQzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454971435", "bodyText": "I would validate that every item in nameableObjects array is equal to theDimensionType here.\nFor example: response.validate().body( \"nameableObjects.dimensionItemType\", everyItem(is( theDimensionType ) ));", "author": "vilkg", "createdAt": "2020-07-15T11:07:02Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/dataitems/DataItemQueryTests.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.dataitems;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.isA;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.dataitem.DataItemActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test cases related to GET \"dataItems\" endpoint. The tests and assertions are\n+ * based on the file \"setup/metadata.json\" => \"programIndicators\",\n+ * \"dataElements\".\n+ * \n+ * The test cases using default pagination will imply \"paging=true\", which is\n+ * the default when \"paging\" is omitted.\n+ *\n+ * @author maikel arabori\n+ */\n+public class DataItemQueryTests extends ApiTest\n+{\n+    private static final int FOUND = 302;\n+\n+    private static final int NOT_FOUND = 404;\n+\n+    private static final int CONFLICT = 409;\n+\n+    private DataItemActions dataItemActions;\n+\n+    @BeforeAll\n+    public void before()\n+    {\n+        dataItemActions = new DataItemActions();\n+\n+        login();\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPagination()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get();\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsWithoutPagination()\n+    {\n+        // Given\n+        final String noPagination = \"?paging=false\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( noPagination );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", is( nullValue() ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPaginationOrderedByCode()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get( \"?order=code:asc\" );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", isA( String.class ) );\n+        response.validate().body( \"nameableObjects[0].code\", is( \"AAAAAAA-1234\" ) );\n+    }\n+\n+    @Test\n+    public void testFilterByDimensionTypeUsingDefaultPagination()\n+    {\n+        // Given\n+        final String theDimensionType = \"PROGRAM_INDICATOR\";\n+        final String theUrlParams = \"?filter=dimensionItemType:in:[%s]\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( format( theUrlParams, theDimensionType ) );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", is( theDimensionType ) );", "originalCommit": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4ODMyMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454988322", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-07-15T11:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MjQxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454972410", "bodyText": "Are you sure that this one will always be first item returned? You could do \"nameableObjects.code\", contains('...')", "author": "vilkg", "createdAt": "2020-07-15T11:09:03Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/dataitems/DataItemQueryTests.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.dataitems;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.isA;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.dataitem.DataItemActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test cases related to GET \"dataItems\" endpoint. The tests and assertions are\n+ * based on the file \"setup/metadata.json\" => \"programIndicators\",\n+ * \"dataElements\".\n+ * \n+ * The test cases using default pagination will imply \"paging=true\", which is\n+ * the default when \"paging\" is omitted.\n+ *\n+ * @author maikel arabori\n+ */\n+public class DataItemQueryTests extends ApiTest\n+{\n+    private static final int FOUND = 302;\n+\n+    private static final int NOT_FOUND = 404;\n+\n+    private static final int CONFLICT = 409;\n+\n+    private DataItemActions dataItemActions;\n+\n+    @BeforeAll\n+    public void before()\n+    {\n+        dataItemActions = new DataItemActions();\n+\n+        login();\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPagination()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get();\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsWithoutPagination()\n+    {\n+        // Given\n+        final String noPagination = \"?paging=false\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( noPagination );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", is( nullValue() ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPaginationOrderedByCode()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get( \"?order=code:asc\" );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", isA( String.class ) );\n+        response.validate().body( \"nameableObjects[0].code\", is( \"AAAAAAA-1234\" ) );\n+    }\n+\n+    @Test\n+    public void testFilterByDimensionTypeUsingDefaultPagination()\n+    {\n+        // Given\n+        final String theDimensionType = \"PROGRAM_INDICATOR\";\n+        final String theUrlParams = \"?filter=dimensionItemType:in:[%s]\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( format( theUrlParams, theDimensionType ) );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", is( theDimensionType ) );\n+    }\n+\n+    @Test\n+    public void testFilterByProgramUsingDefaultPagination()\n+    {\n+        // Given\n+        final String theDimensionType = \"PROGRAM_INDICATOR\";\n+        final String theProgramId = \"BJ42SUrAvHo\";\n+        final String aValidFilteringAttribute = \"program.id\";\n+        final String theUrlParams = \"?filter=dimensionItemType:in:[%s]&filter=\" + aValidFilteringAttribute\n+            + \":eq:%s&order=code:asc\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( format( theUrlParams, theDimensionType, theProgramId ) );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].code\", is( \"AAAAAAA-1234\" ) );", "originalCommit": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4ODI5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454988297", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-07-15T11:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MjQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3Mjk0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454972945", "bodyText": "you could use anyInvalidDimensionType var here instead of INVALID_TYPE", "author": "vilkg", "createdAt": "2020-07-15T11:10:11Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/dataitems/DataItemQueryTests.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.dataitems;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.isA;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.dataitem.DataItemActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test cases related to GET \"dataItems\" endpoint. The tests and assertions are\n+ * based on the file \"setup/metadata.json\" => \"programIndicators\",\n+ * \"dataElements\".\n+ * \n+ * The test cases using default pagination will imply \"paging=true\", which is\n+ * the default when \"paging\" is omitted.\n+ *\n+ * @author maikel arabori\n+ */\n+public class DataItemQueryTests extends ApiTest\n+{\n+    private static final int FOUND = 302;\n+\n+    private static final int NOT_FOUND = 404;\n+\n+    private static final int CONFLICT = 409;\n+\n+    private DataItemActions dataItemActions;\n+\n+    @BeforeAll\n+    public void before()\n+    {\n+        dataItemActions = new DataItemActions();\n+\n+        login();\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPagination()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get();\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsWithoutPagination()\n+    {\n+        // Given\n+        final String noPagination = \"?paging=false\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( noPagination );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", is( nullValue() ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", is( not( empty() ) ) );\n+        assertThat( hasMultipleDataItemTypes( response ), is( true ) );\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPaginationOrderedByCode()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get( \"?order=code:asc\" );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", isA( String.class ) );\n+        response.validate().body( \"nameableObjects[0].code\", is( \"AAAAAAA-1234\" ) );\n+    }\n+\n+    @Test\n+    public void testFilterByDimensionTypeUsingDefaultPagination()\n+    {\n+        // Given\n+        final String theDimensionType = \"PROGRAM_INDICATOR\";\n+        final String theUrlParams = \"?filter=dimensionItemType:in:[%s]\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( format( theUrlParams, theDimensionType ) );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].dimensionItemType\", is( theDimensionType ) );\n+    }\n+\n+    @Test\n+    public void testFilterByProgramUsingDefaultPagination()\n+    {\n+        // Given\n+        final String theDimensionType = \"PROGRAM_INDICATOR\";\n+        final String theProgramId = \"BJ42SUrAvHo\";\n+        final String aValidFilteringAttribute = \"program.id\";\n+        final String theUrlParams = \"?filter=dimensionItemType:in:[%s]&filter=\" + aValidFilteringAttribute\n+            + \":eq:%s&order=code:asc\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( format( theUrlParams, theDimensionType, theProgramId ) );\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects[0].code\", is( \"AAAAAAA-1234\" ) );\n+    }\n+\n+    @Test\n+    public void testFilterUsingInvalidDimensionTypeUsingDefaultPagination()\n+    {\n+        // Given\n+        final String anyInvalidDimensionType = \"INVALID_TYPE\";\n+        final String theUrlParams = \"?filter=dimensionItemType:in:[%s]\";\n+\n+        // When\n+        final ApiResponse response = dataItemActions.get( format( theUrlParams, anyInvalidDimensionType ) );\n+\n+        // Then\n+        response.validate().statusCode( is( CONFLICT ) );\n+        response.validate().body( \"pager\", is( nullValue() ) );\n+        response.validate().body( \"httpStatus\", is( \"Conflict\" ) );\n+        response.validate().body( \"httpStatusCode\", is( CONFLICT ) );\n+        response.validate().body( \"status\", is( \"ERROR\" ) );\n+        response.validate().body( \"errorCode\", is( \"E2016\" ) );\n+        response.validate().body( \"message\", containsString(\n+            \"Unable to parse element `INVALID_TYPE` on filter `dimensionItemType`. The values available are:\" ) );", "originalCommit": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4ODQwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454988400", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-07-15T11:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3Mjk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NDE5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r454974193", "bodyText": "I would propose to change the contract from nameableObjects to dataItems, to make it consistent with other APIs", "author": "vilkg", "createdAt": "2020-07-15T11:12:50Z", "path": "dhis-2/dhis-e2e-test/src/test/java/org/hisp/dhis/dataitems/DataItemQueryTests.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.hisp.dhis.dataitems;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.isA;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.hisp.dhis.ApiTest;\n+import org.hisp.dhis.actions.LoginActions;\n+import org.hisp.dhis.actions.dataitem.DataItemActions;\n+import org.hisp.dhis.dto.ApiResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test cases related to GET \"dataItems\" endpoint. The tests and assertions are\n+ * based on the file \"setup/metadata.json\" => \"programIndicators\",\n+ * \"dataElements\".\n+ * \n+ * The test cases using default pagination will imply \"paging=true\", which is\n+ * the default when \"paging\" is omitted.\n+ *\n+ * @author maikel arabori\n+ */\n+public class DataItemQueryTests extends ApiTest\n+{\n+    private static final int FOUND = 302;\n+\n+    private static final int NOT_FOUND = 404;\n+\n+    private static final int CONFLICT = 409;\n+\n+    private DataItemActions dataItemActions;\n+\n+    @BeforeAll\n+    public void before()\n+    {\n+        dataItemActions = new DataItemActions();\n+\n+        login();\n+    }\n+\n+    @Test\n+    public void testGetAllDataItemsUsingDefaultPagination()\n+    {\n+        // When\n+        final ApiResponse response = dataItemActions.get();\n+\n+        // Then\n+        response.validate().statusCode( is( FOUND ) );\n+        response.validate().body( \"pager\", isA( Object.class ) );\n+        response.validate().body( \"nameableObjects\", isA( Object.class ) );", "originalCommit": "9e4180a3d07bb4991328a0d2a4c19b79ed2c2eb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MjgxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r455552815", "bodyText": "Done", "author": "maikelarabori", "createdAt": "2020-07-16T07:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NDE5Mw=="}], "type": "inlineReview"}, {"oid": "bfc9681a11d8e1327f08925b0d66561ce3bb4cd6", "url": "https://github.com/dhis2/dhis2-core/commit/bfc9681a11d8e1327f08925b0d66561ce3bb4cd6", "message": "fix: Fixing e2e tests per code review [DHIS2-8839]", "committedDate": "2020-07-15T15:00:15Z", "type": "commit"}, {"oid": "3324e4e825eb55971469f448098a86a1fb89af75", "url": "https://github.com/dhis2/dhis2-core/commit/3324e4e825eb55971469f448098a86a1fb89af75", "message": "chore: Adding missing javadoc [DHIS2-8839]", "committedDate": "2020-07-16T07:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4MTYyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r476381621", "bodyText": "Just wondering, where is this class RestApiActions? Is it part of this PR or already existing?", "author": "larshelge", "createdAt": "2020-08-25T11:39:34Z", "path": "dhis-2/dhis-e2e-test/src/main/java/org/hisp/dhis/actions/dataitem/DataItemActions.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.hisp.dhis.actions.dataitem;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.actions.RestApiActions;\n+\n+/**\n+ * @author maikel arabori\n+ */\n+public class DataItemActions\n+    extends RestApiActions", "originalCommit": "3324e4e825eb55971469f448098a86a1fb89af75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4NzY4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r476387680", "bodyText": "It's an existing class in the dhis-e2e-test module.", "author": "vilkg", "createdAt": "2020-08-25T11:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4MTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwNTk1MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5661#discussion_r476405951", "bodyText": "Got it!", "author": "larshelge", "createdAt": "2020-08-25T12:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4MTYyMQ=="}], "type": "inlineReview"}]}