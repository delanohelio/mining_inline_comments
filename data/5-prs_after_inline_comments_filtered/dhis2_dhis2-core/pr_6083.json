{"pr_number": 6083, "pr_title": "fix: [DHIS2-9286] add exception handling globally to catch any unhandled ones and notify job correctly", "pr_createdAt": "2020-09-03T09:16:24Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/6083", "timeline": [{"oid": "d8686a986c99df6c4e2e2b15ee1551381455fb82", "url": "https://github.com/dhis2/dhis2-core/commit/d8686a986c99df6c4e2e2b15ee1551381455fb82", "message": "feat: add main exception handling in new tracker import job", "committedDate": "2020-09-02T12:40:23Z", "type": "commit"}, {"oid": "86297d3e9cf4a52a48f12a71c536bc28b7479720", "url": "https://github.com/dhis2/dhis2-core/commit/86297d3e9cf4a52a48f12a71c536bc28b7479720", "message": "Add error report into import report in case of exceptions", "committedDate": "2020-09-03T08:13:54Z", "type": "commit"}, {"oid": "c924875d2141896556f9dcda3d583f01bf5a80c4", "url": "https://github.com/dhis2/dhis2-core/commit/c924875d2141896556f9dcda3d583f01bf5a80c4", "message": "minor", "committedDate": "2020-09-03T08:44:20Z", "type": "commit"}, {"oid": "d4ff562a5310c3d51d0efac153fe7a8f736ad452", "url": "https://github.com/dhis2/dhis2-core/commit/d4ff562a5310c3d51d0efac153fe7a8f736ad452", "message": "Minor refactor", "committedDate": "2020-09-03T09:15:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDUyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/6083#discussion_r482834526", "bodyText": "@luciano-fiandesio  Your thoughts?", "author": "ameenhere", "createdAt": "2020-09-03T09:20:51Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -102,32 +104,62 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n         {\n             notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n+        \n+        try\n+        {\n \n-        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n+            List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        trackerBundles = preProcessBundle( trackerBundles, importReport );\n+            trackerBundles = preProcessBundle( trackerBundles, importReport );\n \n-        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n+            TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-        {\n-            importReport.setStatus( TrackerStatus.ERROR );\n-        }\n-        else\n-        {\n-            if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n             {\n-                deleteBundle( params, importReport, trackerBundles );\n+                importReport.setStatus( TrackerStatus.ERROR );\n             }\n             else\n             {\n-                commitBundle( params, importReport, trackerBundles );\n+                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+                {\n+                    deleteBundle( params, importReport, trackerBundles );\n+                }\n+                else\n+                {\n+                    commitBundle( params, importReport, trackerBundles );\n+                }\n             }\n+\n+            importReport.getTimings().setTotalImport( requestTimer.toString() );\n+\n+            TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n+\n         }\n+        catch ( Exception e )\n+        {\n+            \n+            TrackerValidationReport tvr = importReport.getTrackerValidationReport();\n+            \n+            if ( tvr == null )\n+            {\n+                tvr = new TrackerValidationReport();\n+            }\n+            \n+            tvr.getErrorReports().add(new TrackerErrorReport( null, \"Exception:\"+e.getMessage(), TrackerErrorCode.E9999, 0, null, null, null, null ));\n+            importReport.setTrackerValidationReport( tvr );\n+            importReport.setStatus( TrackerStatus.ERROR );\n+            \n+            if ( params.hasJobConfiguration() )\n+            {\n+                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            }\n+            \n+            //TODO: Should this be rethrown in case of sync? Or is the error report added to the import report in the above lines enough?\n+            throw e;", "originalCommit": "d4ff562a5310c3d51d0efac153fe7a8f736ad452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNDI3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/6083#discussion_r482914278", "bodyText": "I don't think we should rethrow. If we rethrow, then the exception will be \"handled\" by the SecurityContextRunnable class (or a subclass). Please, see my comment in the approve box, based on our conversation.", "author": "luciano-fiandesio", "createdAt": "2020-09-03T11:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDUyNg=="}], "type": "inlineReview"}, {"oid": "b599b904efe879711d3e4eda1cdc5e04af0e9a5d", "url": "https://github.com/dhis2/dhis2-core/commit/b599b904efe879711d3e4eda1cdc5e04af0e9a5d", "message": "Added logging", "committedDate": "2020-09-03T09:22:26Z", "type": "commit"}, {"oid": "d636d78108d3e74e5c053c48febd67119d665ad0", "url": "https://github.com/dhis2/dhis2-core/commit/d636d78108d3e74e5c053c48febd67119d665ad0", "message": "Remove rethrowing of exception", "committedDate": "2020-09-03T09:55:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0NjQyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/6083#discussion_r483446420", "bodyText": "There is a static method to create new errors ValidationErrorReporter.newReport(errorCode) and then you can add an arg.\nYou can find a lot of examples in the validation hooks.\nNot a big change, but we avoid to have all this null in the constructor", "author": "enricocolasante", "createdAt": "2020-09-04T07:45:19Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -102,32 +107,60 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n         {\n             notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n+        \n+        try\n+        {\n \n-        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n+            List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        trackerBundles = preProcessBundle( trackerBundles, importReport );\n+            trackerBundles = preProcessBundle( trackerBundles, importReport );\n \n-        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n+            TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-        {\n-            importReport.setStatus( TrackerStatus.ERROR );\n-        }\n-        else\n-        {\n-            if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n             {\n-                deleteBundle( params, importReport, trackerBundles );\n+                importReport.setStatus( TrackerStatus.ERROR );\n             }\n             else\n             {\n-                commitBundle( params, importReport, trackerBundles );\n+                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+                {\n+                    deleteBundle( params, importReport, trackerBundles );\n+                }\n+                else\n+                {\n+                    commitBundle( params, importReport, trackerBundles );\n+                }\n             }\n+\n+            importReport.getTimings().setTotalImport( requestTimer.toString() );\n+\n+            TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n+\n         }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\",e );\n+            \n+            TrackerValidationReport tvr = importReport.getTrackerValidationReport();\n+            \n+            if ( tvr == null )\n+            {\n+                tvr = new TrackerValidationReport();\n+            }\n+            \n+            tvr.getErrorReports().add(new TrackerErrorReport( null, \"Exception:\"+e.getMessage(), TrackerErrorCode.E9999, 0, null, null, null, null ));", "originalCommit": "d636d78108d3e74e5c053c48febd67119d665ad0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1NTU0Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/6083#discussion_r483455542", "bodyText": "Good point! Thanks", "author": "ameenhere", "createdAt": "2020-09-04T08:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0NjQyMA=="}], "type": "inlineReview"}, {"oid": "b266f8c4dd9861199e020c31e095a76dd4879e9f", "url": "https://github.com/dhis2/dhis2-core/commit/b266f8c4dd9861199e020c31e095a76dd4879e9f", "message": "Formatting", "committedDate": "2020-09-04T10:28:24Z", "type": "commit"}, {"oid": "7919e69114ee708876d5340140840c9e64ad35c9", "url": "https://github.com/dhis2/dhis2-core/commit/7919e69114ee708876d5340140840c9e64ad35c9", "message": "Fixed a test to solve potential race condition", "committedDate": "2020-09-04T10:37:21Z", "type": "commit"}, {"oid": "5ae6f9f600a73bf3cd833e6280497a7401d95a28", "url": "https://github.com/dhis2/dhis2-core/commit/5ae6f9f600a73bf3cd833e6280497a7401d95a28", "message": "Added a new constructor to avoid too many nulls in constructor", "committedDate": "2020-09-04T11:03:46Z", "type": "commit"}, {"oid": "e118ca0360d8ef71782fa632a094ec002768e4bd", "url": "https://github.com/dhis2/dhis2-core/commit/e118ca0360d8ef71782fa632a094ec002768e4bd", "message": "Revert weird tes", "committedDate": "2020-09-04T11:14:55Z", "type": "commit"}]}