{"pr_number": 793, "pr_title": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code (redo)", "pr_createdAt": "2020-06-04T02:09:13Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/793", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzU4MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r434953580", "bodyText": "This log statement was annoying while I was debugging, and I imagine it would be for users, too", "author": "timtay-microsoft", "createdAt": "2020-06-04T02:14:26Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/Message.java", "diffHunk": "@@ -301,7 +301,6 @@ public void setProperty(String name, String value)\n             this.properties.remove(messageProperty);\n         }\n \n-        log.trace(\"Setting message property\");", "originalCommit": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r434953930", "bodyText": "This was a bug where the token renewal time was much more proactive than it needed to be. Note that it was doing (time in seconds) X (85) which yielded a unit of time between seconds and milliseconds. But the return value was supposed to be in milliseconds", "author": "timtay-microsoft", "createdAt": "2020-06-04T02:15:47Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;", "originalCommit": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODY0NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437018644", "bodyText": "Won't the value be 10x larger now?\nIs it a count down or count up?", "author": "drwill-ms", "createdAt": "2020-06-08T21:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzkyNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437077927", "bodyText": "@timtay-microsoft ?", "author": "drwill-ms", "createdAt": "2020-06-09T00:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzU2MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437533561", "bodyText": "The value will be 10 times larger, yes. The bug here was that the sas token was previously being renewed at 8.5% of its life spent, instead of the intended 85%. This was due to an incorrect mixing of seconds and milliseconds, and the timeBufferPercentage being treated as 85 instead of .85", "author": "timtay-microsoft", "createdAt": "2020-06-09T15:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4ODAwNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437588006", "bodyText": "Please add code comments.", "author": "drwill-ms", "createdAt": "2020-06-09T17:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NDE2Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r434954166", "bodyText": "Every call to this API was already passing in an IotHubTransportMessage type (which is a derived type from Message), and it made the amqp refactor easier for this interface to just take a transport message (which has callback info that Message does not)", "author": "timtay-microsoft", "createdAt": "2020-06-04T02:16:45Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubTransportConnection.java", "diffHunk": "@@ -60,7 +60,7 @@\n      * @return true if the acknowledgement was sent successfully, and false otherwise\n      * @throws TransportException if an exception occurred while sending the acknowledgement\n      */\n-    boolean sendMessageResult(Message message, IotHubMessageResult result) throws TransportException;", "originalCommit": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODgyOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437018828", "bodyText": "Is this change contract breaking?", "author": "drwill-ms", "createdAt": "2020-06-08T21:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NDE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzcxOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437533719", "bodyText": "No, this is an internal interface", "author": "timtay-microsoft", "createdAt": "2020-06-09T15:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NDE2Ng=="}], "type": "inlineReview"}, {"oid": "157b7d07b471af8602c740a05accf925c297594c", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/157b7d07b471af8602c740a05accf925c297594c", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-04T22:12:52Z", "type": "forcePushed"}, {"oid": "cbb16c0d4bd4035edb0bfb8b33c58390dd4a4841", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/cbb16c0d4bd4035edb0bfb8b33c58390dd4a4841", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T00:10:13Z", "type": "forcePushed"}, {"oid": "597bce0d3d1315125ee576676afd3500970414cf", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/597bce0d3d1315125ee576676afd3500970414cf", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T01:00:48Z", "type": "forcePushed"}, {"oid": "4dec47a22f5a07bb0dab28a111e2741ddcf5e15c", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/4dec47a22f5a07bb0dab28a111e2741ddcf5e15c", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T01:18:05Z", "type": "forcePushed"}, {"oid": "359664bbc561b62f93412533995effbeb02f5a9a", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/359664bbc561b62f93412533995effbeb02f5a9a", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T02:36:29Z", "type": "forcePushed"}, {"oid": "da275f1f1845190381a2715aa1adee3025e7552a", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/da275f1f1845190381a2715aa1adee3025e7552a", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T03:06:57Z", "type": "forcePushed"}, {"oid": "5f8747e0738ad444c48bb2fe984f7310e751d97a", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5f8747e0738ad444c48bb2fe984f7310e751d97a", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T04:15:58Z", "type": "forcePushed"}, {"oid": "6ec7927a4dd3b952386c0616614c120930f23799", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/6ec7927a4dd3b952386c0616614c120930f23799", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T04:58:26Z", "type": "forcePushed"}, {"oid": "f1e7ec144f51675568ea5548a3918c06830fb7de", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f1e7ec144f51675568ea5548a3918c06830fb7de", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T15:59:16Z", "type": "forcePushed"}, {"oid": "ad0b3a5322842e824bc7043bfabf3ae89c203e48", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/ad0b3a5322842e824bc7043bfabf3ae89c203e48", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T16:35:04Z", "type": "forcePushed"}, {"oid": "de4ff9a70ce7cfe19603f20afcb7d8049c2812d4", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/de4ff9a70ce7cfe19603f20afcb7d8049c2812d4", "message": "refactor(iot-dev): Clean up AMQP layer redundancies and useless code\n\nNow our AMQP layer makes use of multiple reactor handlers to create the abstraction of responsibility such that linkHandlers handle links opening/closing, session handlers handle session opening/closing, and so on.\n\nThis cleanup made a lot of unit tests redundant or no longer relevant", "committedDate": "2020-06-05T19:32:17Z", "type": "forcePushed"}, {"oid": "3fd1e125449cd5b8e0eb1ccd5edfb6ab222d3352", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/3fd1e125449cd5b8e0eb1ccd5edfb6ab222d3352", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-05T19:45:55Z", "type": "forcePushed"}, {"oid": "c5a640a2c746ee84b0878ab31d2ff6915240e0fa", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/c5a640a2c746ee84b0878ab31d2ff6915240e0fa", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-05T21:48:53Z", "type": "forcePushed"}, {"oid": "6a45d8f0201b4c03c1b3dafae0dbc52a257d1595", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/6a45d8f0201b4c03c1b3dafae0dbc52a257d1595", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-05T21:56:44Z", "type": "forcePushed"}, {"oid": "2c3a306f2f308151d2cf0e0ed736a025aa599054", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/2c3a306f2f308151d2cf0e0ed736a025aa599054", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-05T23:02:11Z", "type": "forcePushed"}, {"oid": "0925ec85093f64f0396ec1cff9f19ba33038f9f2", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0925ec85093f64f0396ec1cff9f19ba33038f9f2", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-05T23:40:16Z", "type": "forcePushed"}, {"oid": "84c9fc637f82364c1493a9052724bcf164040718", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/84c9fc637f82364c1493a9052724bcf164040718", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-06T01:29:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTAyNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437019025", "bodyText": "What is divide by 100 for?", "author": "bikamani", "createdAt": "2020-06-08T21:45:01Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;\n+        return (int) ((this.tokenValidSecs * 1000) * (this.timeBufferPercentage / 100.0));", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMTY5Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437021696", "bodyText": "The field timeBufferPercentage is supposed to represent 85%, but it is just 85 instead of .85", "author": "timtay-microsoft", "createdAt": "2020-06-08T21:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMzk3Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437023977", "bodyText": "Worth a code comment.", "author": "drwill-ms", "createdAt": "2020-06-08T21:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjgxMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437022810", "bodyText": "if this isn't used outside of the if statement below, can it be moved into it?", "author": "drwill-ms", "createdAt": "2020-06-08T21:54:08Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMethodsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.MessageType;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public final class AmqpsMethodsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String CORRELATION_ID_KEY = \"com.microsoft:channel-correlation-id\";\n+    private static final String CORRELATION_ID_KEY_PREFIX = \"methods:\";\n+\n+    private static final String APPLICATION_PROPERTY_KEY_IOTHUB_STATUS = \"IoThub-status\";\n+\n+    private static final String DEVICE_SENDER_LINK_ENDPOINT_PATH = \"/devices/%s/methods/devicebound\";\n+    private static final String MODULE_SENDER_LINK_ENDPOINT_PATH = \"/devices/%s/modules/%s/methods/devicebound\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"sender_link_devicemethods-\";\n+\n+    AmqpsMethodsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback, DeviceClientConfig deviceClientConfig, String linkCorrelationId)\n+    {\n+        super(sender, amqpsLinkStateCallback, linkCorrelationId);\n+\n+        this.senderLinkTag = getTag(deviceClientConfig, linkCorrelationId);\n+        this.senderLinkAddress = getAddress(deviceClientConfig);\n+\n+        //Note that this correlation id value must be equivalent to the correlation id in the method receiver link that it is paired with\n+        this.amqpProperties.put(Symbol.getSymbol(CORRELATION_ID_KEY), Symbol.getSymbol(CORRELATION_ID_KEY_PREFIX + this.linkCorrelationId));\n+        this.amqpProperties.put(Symbol.getSymbol(VERSION_IDENTIFIER_KEY), deviceClientConfig.getProductInfo().getUserAgentString());\n+    }\n+\n+    static String getTag(DeviceClientConfig deviceClientConfig, String linkCorrelationId)\n+    {\n+        String moduleId = deviceClientConfig.getModuleId();\n+        String deviceId = deviceClientConfig.getDeviceId();\n+        if (moduleId != null && !moduleId.isEmpty())\n+        {\n+            return SENDER_LINK_TAG_PREFIX + deviceId + \"/\" + moduleId + \"-\" + linkCorrelationId;\n+        }\n+        else\n+        {\n+            return SENDER_LINK_TAG_PREFIX + deviceId + \"-\" + linkCorrelationId;\n+        }\n+    }\n+\n+    private static String getAddress(DeviceClientConfig deviceClientConfig)\n+    {\n+        String moduleId = deviceClientConfig.getModuleId();\n+        String deviceId = deviceClientConfig.getDeviceId();\n+        if (moduleId != null && !moduleId.isEmpty())\n+        {\n+            return String.format(MODULE_SENDER_LINK_ENDPOINT_PATH, deviceId, moduleId);\n+        }\n+        else\n+        {\n+            return String.format(DEVICE_SENDER_LINK_ENDPOINT_PATH, deviceId);\n+        }\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"methods\";\n+    }\n+\n+    @Override\n+    protected MessageImpl iotHubMessageToProtonMessage(Message message)\n+    {\n+        if (message.getMessageType() == MessageType.DEVICE_METHODS)\n+        {\n+            MessageImpl protonMessage = super.iotHubMessageToProtonMessage(message);\n+            IotHubTransportMessage deviceMethodMessage = (IotHubTransportMessage) message;\n+\n+            Properties properties;\n+            if (protonMessage.getProperties() != null)\n+            {\n+                properties = protonMessage.getProperties();\n+            }\n+            else\n+            {\n+                properties = new Properties();\n+            }\n+\n+            if (deviceMethodMessage.getRequestId() != null)\n+            {\n+                properties.setCorrelationId(UUID.fromString(deviceMethodMessage.getRequestId()));\n+            }\n+\n+            protonMessage.setProperties(properties);\n+\n+            Map<String, Object> userProperties = new HashMap<>();\n+            if (deviceMethodMessage.getStatus() != null)\n+            {\n+                userProperties.put(APPLICATION_PROPERTY_KEY_IOTHUB_STATUS, Integer.parseInt(deviceMethodMessage.getStatus()));\n+            }\n+\n+            Map<String, Object> applicationPropertiesMap;", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMzEzNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437023135", "bodyText": "It can be moved in there, good catch", "author": "timtay-microsoft", "createdAt": "2020-06-08T21:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTUxOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437031518", "bodyText": "Is this a new line or appears this way on github?", "author": "bikamani", "createdAt": "2020-06-08T22:16:13Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMjkzNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437032935", "bodyText": "I'm not sure that I see what you are seeing. This class javadoc is two lines for me", "author": "timtay-microsoft", "createdAt": "2020-06-08T22:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzkyMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437037921", "bodyText": "I'm not sure I see what you are seeing", "author": "timtay-microsoft", "createdAt": "2020-06-08T22:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzA5NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437033094", "bodyText": "should this be defined as private static final String", "author": "bikamani", "createdAt": "2020-06-08T22:20:26Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.\n+ */\n+@Slf4j\n+public final class AmqpsCbsReceiverLinkHandler extends AmqpsReceiverLinkHandler\n+{\n+    private final static String APPLICATION_PROPERTY_STATUS_CODE = \"status-code\";\n+    private final static String APPLICATION_PROPERTY_STATUS_DESCRIPTION = \"status-description\";\n+\n+    private static final String RECEIVER_LINK_ENDPOINT_PATH = \"$cbs\";\n+    private static final String RECEIVER_LINK_TAG_PREFIX = \"cbs-receiver\";\n+\n+    private Map<UUID, AuthenticationMessageCallback> correlationMap = new ConcurrentHashMap<>();\n+\n+    AmqpsCbsReceiverLinkHandler(Receiver receiver, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(receiver, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+        this.receiverLinkTag = RECEIVER_LINK_TAG_PREFIX;\n+        this.receiverLinkAddress = RECEIVER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return RECEIVER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzI3Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437033273", "bodyText": "what is correlationmap?", "author": "bikamani", "createdAt": "2020-06-08T22:20:57Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.\n+ */\n+@Slf4j\n+public final class AmqpsCbsReceiverLinkHandler extends AmqpsReceiverLinkHandler\n+{\n+    private final static String APPLICATION_PROPERTY_STATUS_CODE = \"status-code\";\n+    private final static String APPLICATION_PROPERTY_STATUS_DESCRIPTION = \"status-description\";\n+\n+    private static final String RECEIVER_LINK_ENDPOINT_PATH = \"$cbs\";\n+    private static final String RECEIVER_LINK_TAG_PREFIX = \"cbs-receiver\";\n+\n+    private Map<UUID, AuthenticationMessageCallback> correlationMap = new ConcurrentHashMap<>();", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNDA1Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437034052", "bodyText": "I can add some comments to explain this. When the CBS receiver link gets a message from iothub, it needs to correlate that message's correlation id back to a callback so that a device session knows that it was authenticated", "author": "timtay-microsoft", "createdAt": "2020-06-08T22:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNDI3OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437034279", "bodyText": "you can use CBS_REPLY  here", "author": "bikamani", "createdAt": "2020-06-08T22:23:46Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated.\n+ */\n+@Slf4j\n+public final class AmqpsCbsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String SENDER_LINK_ENDPOINT_PATH = \"$cbs\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"cbs-sender\";\n+\n+    private static final String CBS_TO = \"$cbs\";\n+    private static final String CBS_REPLY = \"cbs\";\n+\n+    private static final String OPERATION_KEY = \"operation\";\n+    private static final String TYPE_KEY = \"type\";\n+    private static final String NAME_KEY = \"name\";\n+\n+    private static final String OPERATION_VALUE = \"put-token\";\n+    private static final String TYPE_VALUE = \"servicebus.windows.net:sastoken\";\n+\n+    private static final String DEVICES_PATH = \"/devices/\";\n+\n+    AmqpsCbsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(sender, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+\n+        this.senderLinkTag = SENDER_LINK_TAG_PREFIX;\n+        this.senderLinkAddress = SENDER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return SENDER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjEwMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437036100", "bodyText": "I'll add a private static final variable called LINK_TYPE on all these sender/receiver links instead, so they all feel similar", "author": "timtay-microsoft", "createdAt": "2020-06-08T22:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNDI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjA0MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437036040", "bodyText": "In which case is this value null?", "author": "bikamani", "createdAt": "2020-06-08T22:28:29Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated.\n+ */\n+@Slf4j\n+public final class AmqpsCbsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String SENDER_LINK_ENDPOINT_PATH = \"$cbs\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"cbs-sender\";\n+\n+    private static final String CBS_TO = \"$cbs\";\n+    private static final String CBS_REPLY = \"cbs\";\n+\n+    private static final String OPERATION_KEY = \"operation\";\n+    private static final String TYPE_KEY = \"type\";\n+    private static final String NAME_KEY = \"name\";\n+\n+    private static final String OPERATION_VALUE = \"put-token\";\n+    private static final String TYPE_VALUE = \"servicebus.windows.net:sastoken\";\n+\n+    private static final String DEVICES_PATH = \"/devices/\";\n+\n+    AmqpsCbsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(sender, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+\n+        this.senderLinkTag = SENDER_LINK_TAG_PREFIX;\n+        this.senderLinkAddress = SENDER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return SENDER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";\n+    }\n+\n+    UUID sendAuthenticationMessage(DeviceClientConfig deviceClientConfig) throws TransportException\n+    {\n+        UUID correlationId = UUID.randomUUID();\n+        MessageImpl outgoingMessage = createCBSAuthenticationMessage(deviceClientConfig, correlationId);\n+\n+        AmqpsSendResult sendResult = this.sendMessageAndGetDeliveryTag(outgoingMessage);\n+\n+        //This message will be ignored when this send is acknowledged, so just provide an empty message for the map\n+        inProgressMessages.put(sendResult.getDeliveryTag(), new Message());\n+\n+        return correlationId;\n+    }\n+\n+    private MessageImpl createCBSAuthenticationMessage(DeviceClientConfig deviceClientConfig, UUID correlationId) throws TransportException\n+    {\n+        MessageImpl outgoingMessage = (MessageImpl) Proton.message();\n+\n+        Properties properties = new Properties();\n+\n+        // Note that setting \"messageId = correlationId\" is intentional.\n+        // IotHub only responds correctly if this correlation id is set this way\n+        properties.setMessageId(correlationId);\n+\n+        properties.setTo(CBS_TO);\n+        properties.setReplyTo(CBS_REPLY);\n+        outgoingMessage.setProperties(properties);\n+\n+        Map<String, Object> userProperties = new HashMap<>(3);\n+        userProperties.put(OPERATION_KEY, OPERATION_VALUE);\n+        userProperties.put(TYPE_KEY, TYPE_VALUE);\n+\n+        String host = deviceClientConfig.getGatewayHostname();", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjY1Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437036653", "bodyText": "Gateway host name is only not null when connecting to edgehub. Typically, it is null", "author": "timtay-microsoft", "createdAt": "2020-06-08T22:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzOTAxMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437039013", "bodyText": "So all these is not being used?", "author": "bikamani", "createdAt": "2020-06-08T22:36:32Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMessage.java", "diffHunk": "@@ -19,96 +17,18 @@\n  */\n public class AmqpsMessage extends MessageImpl\n {\n-    private Delivery _delivery;\n-\n-    private MessageType amqpsMessageType;\n-\n-    public enum ACK_TYPE\n-    {\n-        COMPLETE,\n-        ABANDON,\n-        REJECT\n-    }\n-\n-    private DeviceClientConfig deviceClientConfig;\n+    @Getter\n+    @Setter\n+    private Delivery delivery;\n \n     /**\n      * Sends acknowledgement of this message using the provided ACK_TYPE.\n-     * @param ackType acknowledgement type to send\n-     */\n-    public void acknowledge(ACK_TYPE ackType)\n-    {\n-        switch(ackType)\n-        {\n-            // Codes_SRS_AMQPSMESSAGE_14_001: [If the ACK_TYPE is COMPLETE, the function shall set an Accepted disposition on the private Delivery object.]\n-            case COMPLETE:\n-                _delivery.disposition(Accepted.getInstance());\n-                break;\n-            // Codes_SRS_AMQPSMESSAGE_14_002: [If the ACK_TYPE is ABANDON, the function shall set a Released disposition on the private Delivery object.]\n-            case ABANDON:\n-                _delivery.disposition(Released.getInstance());\n-                break;\n-            // Codes_SRS_AMQPSMESSAGE_14_003: [If the ACK_TYPE is REJECT, the function shall set a Rejected disposition on the private Delivery object.]\n-            case REJECT:\n-                _delivery.disposition(new Rejected());\n-                break;\n-            default:\n-                //This should never happen\n-                throw new IllegalStateException(\"Invalid ack type given. Type \"+ ackType +\" does not exist.\");\n-        }\n-        // Codes_SRS_AMQPSMESSAGE_14_005: [The function shall settle the delivery after setting the proper disposition.]\n-        _delivery.settle();\n-    }\n-\n-    /**\n-     * Set this AmqpsMessage Delivery Object\n-     * @param _delivery the new Delivery\n-     */\n-    public void setDelivery(Delivery _delivery)\n-    {\n-        this._delivery = _delivery;\n-    }\n-\n-    /**\n-     * Get the AmqpsMessageMessageType\n-     * @return The type of the message\n-     */\n-    public MessageType getAmqpsMessageType()\n-    {\n-        // Codes_SRS_AMQPSMESSAGE_12_001: [Getter for the MessageType.]\n-        return amqpsMessageType;\n-    }\n-\n-    /**\n-     * Set the AmqpsMessageMessageType\n      *\n-     * @param amqpsMessageType the new AmqpsMessageMessageType\n-     */\n-    public void setAmqpsMessageType(MessageType amqpsMessageType)\n-    {\n-        // Codes_SRS_AMQPSMESSAGE_12_002: [Setter for the MessageType.]\n-        this.amqpsMessageType = amqpsMessageType;\n-    }\n-\n-    /**\n-     * Get the deviceClientConfig\n-     *\n-     * @return The type of the message\n-     */\n-    public DeviceClientConfig getDeviceClientConfig()", "originalCommit": "84c9fc637f82364c1493a9052724bcf164040718", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTk4NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437041985", "bodyText": "correct", "author": "timtay-microsoft", "createdAt": "2020-06-08T22:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzOTAxMw=="}], "type": "inlineReview"}, {"oid": "883b632fe3b50e58fa7bb1f4d02771e36e295fae", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/883b632fe3b50e58fa7bb1f4d02771e36e295fae", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-09T01:04:09Z", "type": "forcePushed"}, {"oid": "a82d53fa1c0a4899e1b43c63b19a7be4193d4155", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/a82d53fa1c0a4899e1b43c63b19a7be4193d4155", "message": "fix(iot-dev): Fix issue where sas token pre-emptive renenwal occurred earlier than necessary", "committedDate": "2020-06-15T23:05:06Z", "type": "commit"}, {"oid": "5b5ffcc3b2fe1b26478cb30bc679633cf285401f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5b5ffcc3b2fe1b26478cb30bc679633cf285401f", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-15T23:05:06Z", "type": "commit"}, {"oid": "5b5ffcc3b2fe1b26478cb30bc679633cf285401f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5b5ffcc3b2fe1b26478cb30bc679633cf285401f", "message": "fix(iot-device): Fix multiplexed devices not maintaining their own sas token renewal schedule\n\nRefactored the entire amqp layer to accomplish this, as well as to make the amqp layer more easily understood. Now each layer (conneciton/session/link) has its own handler and error handling logic", "committedDate": "2020-06-15T23:05:06Z", "type": "forcePushed"}]}