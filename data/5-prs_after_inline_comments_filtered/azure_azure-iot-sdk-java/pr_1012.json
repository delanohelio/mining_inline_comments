{"pr_number": 1012, "pr_title": "fix(iot-dev): Fix possible NPE in AMQP layer", "pr_createdAt": "2020-12-03T22:29:33Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/1012", "timeline": [{"oid": "dac7b12792e418673549f7f1a4dba7de2700af86", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/dac7b12792e418673549f7f1a4dba7de2700af86", "message": "fix(iot-dev): Fix possible NPE in AMQP layer\n\nSending a get twin request while the subscribe to desired properties request was in progress seemed to cause reliable NPE in transport clients that start twin for each of their devices. By waiting for the in progress subscriptions to finish before sending actual messages over these links, the NPE goes away.", "committedDate": "2020-12-03T22:29:22Z", "type": "commit"}, {"oid": "e7fadac092f09359b7aa9d005fbf69893aa3db6b", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e7fadac092f09359b7aa9d005fbf69893aa3db6b", "message": "refactor(iot-dev): Simplify AMQP executor service cleanup, remove chance for InterruptedException\n\nThere is no reason for the AMQP layer to wait for the executor service to shutdown beyond calling shutdownNow(), so this commit removes all the superfluous logic", "committedDate": "2020-12-03T22:33:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMTY2NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1012#discussion_r535701664", "bodyText": "it looks like we were trying really hard to make sure the executorService gets terminated before nulling it out.\nWhat are the consequences of not waiting for these anymore?", "author": "azabbasi", "createdAt": "2020-12-03T22:48:37Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnection.java", "diffHunk": "@@ -740,35 +740,13 @@ else if (this.connection.getLocalState() == EndpointState.CLOSED && this.connect\n         }\n     }\n \n-    private void executorServicesCleanup() throws TransportException\n+    private void executorServicesCleanup()\n     {\n         if (this.executorService != null)\n         {\n             log.trace(\"Shutdown of executor service has started\");\n-            this.executorService.shutdown();\n-            try\n-            {\n-                // Wait a while for existing tasks to terminate\n-                if (!this.executorService.awaitTermination(MAX_WAIT_TO_TERMINATE_EXECUTOR, TimeUnit.SECONDS))\n-                {\n-                    this.executorService.shutdownNow(); // Cancel currently executing tasks\n-                    // Wait a while for tasks to respond to being cancelled\n-                    if (!this.executorService.awaitTermination(MAX_WAIT_TO_TERMINATE_EXECUTOR, TimeUnit.SECONDS))", "originalCommit": "e7fadac092f09359b7aa9d005fbf69893aa3db6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNzIxOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1012#discussion_r535707219", "bodyText": "Nothing really. This executor was used to manage the one worker thread that we extend to proton-j to run the AMQP connection. When this function is called, we are deliberately closing everything, including this thread pool.", "author": "timtay-microsoft", "createdAt": "2020-12-03T22:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMTY2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNDM2Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1012#discussion_r535714362", "bodyText": "For reference, this method is only called when opening the connection fails or when we have finished closing a successful AMQP connection. In both cases, there is nothing left that we need to be careful about cleaning up in the AMQP library.", "author": "timtay-microsoft", "createdAt": "2020-12-03T23:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMTY2NA=="}], "type": "inlineReview"}, {"oid": "0e27d70bfbe9aec90401237651b89367e5a3c9ac", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0e27d70bfbe9aec90401237651b89367e5a3c9ac", "message": "fixup", "committedDate": "2020-12-03T22:57:46Z", "type": "commit"}, {"oid": "500b68fdf18f5eef263c19fdc4e8f317a2ca10c1", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/500b68fdf18f5eef263c19fdc4e8f317a2ca10c1", "message": "fixup", "committedDate": "2020-12-03T23:18:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcyNDU0MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1012#discussion_r535724540", "bodyText": "Q - from where will this message be retried?", "author": "abhipsaMisra", "createdAt": "2020-12-03T23:34:29Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsSessionHandler.java", "diffHunk": "@@ -355,6 +355,26 @@ else if (subscriptionType == DEVICE_OPERATION_TWIN_SUBSCRIBE_DESIRED_PROPERTIES_\n                         || senderLinkHandler instanceof AmqpsTwinSenderLinkHandler && messageType == DEVICE_TWIN\n                         || senderLinkHandler instanceof AmqpsMethodsSenderLinkHandler && messageType == DEVICE_METHODS)\n                 {\n+                    if (messageType == DEVICE_TWIN)\n+                    {\n+                        if (explicitInProgressTwinSubscriptionMessage != null)\n+                        {\n+                            // Don't send any twin messages while a twin subscription is in progress. Wait until the subscription\n+                            // has been acknowledged by the service before sending it.", "originalCommit": "500b68fdf18f5eef263c19fdc4e8f317a2ca10c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NDQ2OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1012#discussion_r535744469", "bodyText": "The function that calls this checks to see if the message send was successful. If it wasn't, it requeues the message. that's why we return false here to mimic a sending failure", "author": "timtay-microsoft", "createdAt": "2020-12-04T00:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcyNDU0MA=="}], "type": "inlineReview"}]}