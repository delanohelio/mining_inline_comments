{"pr_number": 947, "pr_title": "E2E tests and workaround for retrofit error with null payload", "pr_createdAt": "2020-09-29T19:41:18Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/947", "timeline": [{"oid": "cbf5e25469b0d58e5bf3142d07a2517a393c0deb", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/cbf5e25469b0d58e5bf3142d07a2517a393c0deb", "message": "E2E tests", "committedDate": "2020-09-29T19:39:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMTA4Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497001086", "bodyText": "You're now sending the payload as a string as opposed to as an Object. Is this intentional?", "author": "barustum", "createdAt": "2020-09-29T19:45:12Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -183,13 +188,13 @@ public static DigitalTwinAsyncClient createFromConnectionString(String connectio\n             options = new DigitalTwinInvokeCommandRequestOptions();\n         }\n \n-        Object payloadAsObject = null;\n-        if(payload != null)\n+        // Retrofit does not work well with null in body\n+        if(payload == null)\n         {\n-            payloadAsObject = objectMapper.readValue(payload, Object.class);\n+            payload = \"\";\n         }\n \n-        return digitalTwin.invokeRootLevelCommandWithServiceResponseAsync(digitalTwinId, commandName, payloadAsObject, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())\n+        return digitalTwin.invokeRootLevelCommandWithServiceResponseAsync(digitalTwinId, commandName, payload, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0MDkxOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497040918", "bodyText": "We have some issues with serialization. I was working on a fix for it and it is ready now. I will send it out in the next PR so that you can understand the difference.", "author": "vinagesh", "createdAt": "2020-09-29T20:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MDgwOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497050809", "bodyText": "#948", "author": "vinagesh", "createdAt": "2020-09-29T20:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMTA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMjUyOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497002529", "bodyText": "remove space", "author": "barustum", "createdAt": "2020-09-29T19:47:50Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+\n+@DigitalTwinTest\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinClientComponentTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60); // 5 minutes max per method tested\n+\n+    @Parameterized.Parameter(0)\n+    public IotHubClientProtocol protocol;\n+\n+    @Parameterized.Parameters(name = \"{index}: Digital Twin Test: protocol={0}\")\n+    public static Collection<Object[]> data() {\n+        return asList(new Object[][] {\n+                {MQTT},\n+                {MQTT_WS},\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setUpBeforeClass() throws IOException {\n+        registryManager = RegistryManager.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @Before\n+    public void setUp() throws URISyntaxException, IOException, IotHubException {\n+", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNDQ1Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497004456", "bodyText": "empty test", "author": "barustum", "createdAt": "2020-09-29T19:51:29Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+\n+@DigitalTwinTest\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinClientComponentTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60); // 5 minutes max per method tested\n+\n+    @Parameterized.Parameter(0)\n+    public IotHubClientProtocol protocol;\n+\n+    @Parameterized.Parameters(name = \"{index}: Digital Twin Test: protocol={0}\")\n+    public static Collection<Object[]> data() {\n+        return asList(new Object[][] {\n+                {MQTT},\n+                {MQTT_WS},\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setUpBeforeClass() throws IOException {\n+        registryManager = RegistryManager.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @Before\n+    public void setUp() throws URISyntaxException, IOException, IotHubException {\n+\n+        this.deviceClient = createDeviceClient(protocol);\n+        deviceClient.open();\n+        digitalTwinClient = DigitalTwinClient.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        try {\n+            deviceClient.closeNow();\n+            registryManager.removeDevice(deviceId);\n+        } catch (Exception ex) {\n+            log.error(\"An exception occurred while closing/ deleting the device {}: {}\", deviceId, ex);\n+        }\n+    }\n+\n+    private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n+        ClientOptions options = new ClientOptions();\n+        options.setModelId(E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+\n+        this.deviceId = DEVICE_ID_PREFIX.concat(UUID.randomUUID().toString());\n+        Device device = Device.createDevice(deviceId, AuthenticationType.SAS);\n+        Device registeredDevice = registryManager.addDevice(device);\n+        String deviceConnectionString = registryManager.getDeviceConnectionString(registeredDevice);\n+        return new DeviceClient(deviceConnectionString, protocol, options);\n+    }\n+\n+    @AfterClass\n+    public static void cleanUpAfterClass()\n+    {\n+        registryManager.close();\n+    }\n+\n+    @Test\n+    public void getDigitalTwin() {\n+        // act\n+        BasicDigitalTwin response = this.digitalTwinClient.getDigitalTwin(deviceId, BasicDigitalTwin.class);\n+        ServiceResponseWithHeaders<BasicDigitalTwin, DigitalTwinGetHeaders> responseWithHeaders = this.digitalTwinClient.getDigitalTwinWithResponse(deviceId, BasicDigitalTwin.class);\n+\n+        // assert\n+        assertEquals(response.getMetadata().getModelId(), E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+        assertEquals(responseWithHeaders.body().getMetadata().getModelId(), E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+    }\n+\n+    @Test\n+    public void updateDigitalTwin() throws IOException {\n+    }", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzNzkxOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497037919", "bodyText": "yes it will be filled up in the next PR. I got tired and taking  a break before finishing update E2E test.", "author": "vinagesh", "createdAt": "2020-09-29T20:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNDQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNTg5MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497005890", "bodyText": "extract 15 to constant since it's used in multiple tests", "author": "barustum", "createdAt": "2020-09-29T19:54:13Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+\n+@DigitalTwinTest\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinClientComponentTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60); // 5 minutes max per method tested\n+\n+    @Parameterized.Parameter(0)\n+    public IotHubClientProtocol protocol;\n+\n+    @Parameterized.Parameters(name = \"{index}: Digital Twin Test: protocol={0}\")\n+    public static Collection<Object[]> data() {\n+        return asList(new Object[][] {\n+                {MQTT},\n+                {MQTT_WS},\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setUpBeforeClass() throws IOException {\n+        registryManager = RegistryManager.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @Before\n+    public void setUp() throws URISyntaxException, IOException, IotHubException {\n+\n+        this.deviceClient = createDeviceClient(protocol);\n+        deviceClient.open();\n+        digitalTwinClient = DigitalTwinClient.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        try {\n+            deviceClient.closeNow();\n+            registryManager.removeDevice(deviceId);\n+        } catch (Exception ex) {\n+            log.error(\"An exception occurred while closing/ deleting the device {}: {}\", deviceId, ex);\n+        }\n+    }\n+\n+    private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n+        ClientOptions options = new ClientOptions();\n+        options.setModelId(E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+\n+        this.deviceId = DEVICE_ID_PREFIX.concat(UUID.randomUUID().toString());\n+        Device device = Device.createDevice(deviceId, AuthenticationType.SAS);\n+        Device registeredDevice = registryManager.addDevice(device);\n+        String deviceConnectionString = registryManager.getDeviceConnectionString(registeredDevice);\n+        return new DeviceClient(deviceConnectionString, protocol, options);\n+    }\n+\n+    @AfterClass\n+    public static void cleanUpAfterClass()\n+    {\n+        registryManager.close();\n+    }\n+\n+    @Test\n+    public void getDigitalTwin() {\n+        // act\n+        BasicDigitalTwin response = this.digitalTwinClient.getDigitalTwin(deviceId, BasicDigitalTwin.class);\n+        ServiceResponseWithHeaders<BasicDigitalTwin, DigitalTwinGetHeaders> responseWithHeaders = this.digitalTwinClient.getDigitalTwinWithResponse(deviceId, BasicDigitalTwin.class);\n+\n+        // assert\n+        assertEquals(response.getMetadata().getModelId(), E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+        assertEquals(responseWithHeaders.body().getMetadata().getModelId(), E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+    }\n+\n+    @Test\n+    public void updateDigitalTwin() throws IOException {\n+    }\n+\n+    @Test\n+    public void invokeComponentLevelCommand() throws IOException {\n+        // arrange\n+        String componentName = \"thermostat1\";\n+        String commandName = \"getMaxMinReport\";\n+        String commandInput = ZonedDateTime.now(ZoneOffset.UTC).minusMinutes(5).format(DateTimeFormatter.ISO_DATE_TIME);\n+        DigitalTwinInvokeCommandRequestOptions options = new DigitalTwinInvokeCommandRequestOptions();\n+        options.setConnectTimeoutInSeconds(15);\n+        options.setResponseTimeoutInSeconds(15);\n+\n+        // setup device callback\n+        Integer deviceSuccessResponseStatus = 200;\n+        String deviceSuccessResponseMessage = \"Success\";\n+        Integer deviceFailureResponseStatus = 500;\n+        String deviceFailureResponseMessage = \"Failed\";\n+\n+        // Device method callback\n+        String componentCommandName = componentName + \"*\" + commandName;\n+        DeviceMethodCallback deviceMethodCallback = (methodName, methodData, context) -> {\n+            if(methodName.equalsIgnoreCase(componentCommandName)) {\n+                return new DeviceMethodData(deviceSuccessResponseStatus, deviceSuccessResponseMessage);\n+            }\n+            else {\n+                return new DeviceMethodData(deviceFailureResponseStatus, deviceFailureResponseMessage);\n+            }\n+        };\n+\n+        // IotHub event callback\n+        IotHubEventCallback iotHubEventCallback = (responseStatus, callbackContext) -> {};\n+\n+        deviceClient.subscribeToDeviceMethod(deviceMethodCallback, commandName, iotHubEventCallback, commandName);\n+\n+        // act\n+        DigitalTwinCommandResponse responseWithNoPayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, null);\n+        DigitalTwinCommandResponse response = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, commandInput);\n+        ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> responseWithHeaders = this.digitalTwinClient.invokeComponentCommandWithResponse(deviceId, componentName, commandName, commandInput, options);\n+\n+        // assert\n+        String receivedDeviceResponseStatus = \"\\\"\" + deviceSuccessResponseMessage + \"\\\"\";\n+        assertEquals(deviceSuccessResponseStatus, responseWithNoPayload.getStatus());\n+        assertEquals(receivedDeviceResponseStatus, responseWithNoPayload.getPayload());\n+        assertEquals(deviceSuccessResponseStatus, responseWithNoPayload.getStatus());\n+        assertEquals(receivedDeviceResponseStatus, response.getPayload());\n+        assertEquals(deviceSuccessResponseStatus, responseWithHeaders.body().getStatus());\n+        assertEquals(receivedDeviceResponseStatus, responseWithHeaders.body().getPayload());\n+    }\n+\n+    @Test\n+    public void invokeRootLevelCommand() throws IOException {\n+        // arrange\n+        String commandName = \"reboot\";\n+        String commandInput = \"5\";\n+        DigitalTwinInvokeCommandRequestOptions options = new DigitalTwinInvokeCommandRequestOptions();\n+        options.setConnectTimeoutInSeconds(15);", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzOTc5Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497039792", "bodyText": "I felt it would be more readable for a test to have it right there. Specially you might want different tests to do different things. But I'm open to a discussion. For product code, I agree constants are good.", "author": "vinagesh", "createdAt": "2020-09-29T20:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNjE3NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497006174", "bodyText": "extract variables in this block to constants", "author": "barustum", "createdAt": "2020-09-29T19:54:45Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n+\n+@DigitalTwinTest\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinClientComponentTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60); // 5 minutes max per method tested\n+\n+    @Parameterized.Parameter(0)\n+    public IotHubClientProtocol protocol;\n+\n+    @Parameterized.Parameters(name = \"{index}: Digital Twin Test: protocol={0}\")\n+    public static Collection<Object[]> data() {\n+        return asList(new Object[][] {\n+                {MQTT},\n+                {MQTT_WS},\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setUpBeforeClass() throws IOException {\n+        registryManager = RegistryManager.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @Before\n+    public void setUp() throws URISyntaxException, IOException, IotHubException {\n+\n+        this.deviceClient = createDeviceClient(protocol);\n+        deviceClient.open();\n+        digitalTwinClient = DigitalTwinClient.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        try {\n+            deviceClient.closeNow();\n+            registryManager.removeDevice(deviceId);\n+        } catch (Exception ex) {\n+            log.error(\"An exception occurred while closing/ deleting the device {}: {}\", deviceId, ex);\n+        }\n+    }\n+\n+    private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n+        ClientOptions options = new ClientOptions();\n+        options.setModelId(E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+\n+        this.deviceId = DEVICE_ID_PREFIX.concat(UUID.randomUUID().toString());\n+        Device device = Device.createDevice(deviceId, AuthenticationType.SAS);\n+        Device registeredDevice = registryManager.addDevice(device);\n+        String deviceConnectionString = registryManager.getDeviceConnectionString(registeredDevice);\n+        return new DeviceClient(deviceConnectionString, protocol, options);\n+    }\n+\n+    @AfterClass\n+    public static void cleanUpAfterClass()\n+    {\n+        registryManager.close();\n+    }\n+\n+    @Test\n+    public void getDigitalTwin() {\n+        // act\n+        BasicDigitalTwin response = this.digitalTwinClient.getDigitalTwin(deviceId, BasicDigitalTwin.class);\n+        ServiceResponseWithHeaders<BasicDigitalTwin, DigitalTwinGetHeaders> responseWithHeaders = this.digitalTwinClient.getDigitalTwinWithResponse(deviceId, BasicDigitalTwin.class);\n+\n+        // assert\n+        assertEquals(response.getMetadata().getModelId(), E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+        assertEquals(responseWithHeaders.body().getMetadata().getModelId(), E2ETestConstants.TEMPERATURE_CONTROLLER_MODEL_ID);\n+    }\n+\n+    @Test\n+    public void updateDigitalTwin() throws IOException {\n+    }\n+\n+    @Test\n+    public void invokeComponentLevelCommand() throws IOException {\n+        // arrange\n+        String componentName = \"thermostat1\";\n+        String commandName = \"getMaxMinReport\";\n+        String commandInput = ZonedDateTime.now(ZoneOffset.UTC).minusMinutes(5).format(DateTimeFormatter.ISO_DATE_TIME);\n+        DigitalTwinInvokeCommandRequestOptions options = new DigitalTwinInvokeCommandRequestOptions();\n+        options.setConnectTimeoutInSeconds(15);\n+        options.setResponseTimeoutInSeconds(15);\n+\n+        // setup device callback\n+        Integer deviceSuccessResponseStatus = 200;\n+        String deviceSuccessResponseMessage = \"Success\";\n+        Integer deviceFailureResponseStatus = 500;\n+        String deviceFailureResponseMessage = \"Failed\";\n+\n+        // Device method callback\n+        String componentCommandName = componentName + \"*\" + commandName;\n+        DeviceMethodCallback deviceMethodCallback = (methodName, methodData, context) -> {\n+            if(methodName.equalsIgnoreCase(componentCommandName)) {\n+                return new DeviceMethodData(deviceSuccessResponseStatus, deviceSuccessResponseMessage);\n+            }\n+            else {\n+                return new DeviceMethodData(deviceFailureResponseStatus, deviceFailureResponseMessage);\n+            }\n+        };\n+\n+        // IotHub event callback\n+        IotHubEventCallback iotHubEventCallback = (responseStatus, callbackContext) -> {};\n+\n+        deviceClient.subscribeToDeviceMethod(deviceMethodCallback, commandName, iotHubEventCallback, commandName);\n+\n+        // act\n+        DigitalTwinCommandResponse responseWithNoPayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, null);\n+        DigitalTwinCommandResponse response = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, commandInput);\n+        ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> responseWithHeaders = this.digitalTwinClient.invokeComponentCommandWithResponse(deviceId, componentName, commandName, commandInput, options);\n+\n+        // assert\n+        String receivedDeviceResponseStatus = \"\\\"\" + deviceSuccessResponseMessage + \"\\\"\";\n+        assertEquals(deviceSuccessResponseStatus, responseWithNoPayload.getStatus());\n+        assertEquals(receivedDeviceResponseStatus, responseWithNoPayload.getPayload());\n+        assertEquals(deviceSuccessResponseStatus, responseWithNoPayload.getStatus());\n+        assertEquals(receivedDeviceResponseStatus, response.getPayload());\n+        assertEquals(deviceSuccessResponseStatus, responseWithHeaders.body().getStatus());\n+        assertEquals(receivedDeviceResponseStatus, responseWithHeaders.body().getPayload());\n+    }\n+\n+    @Test\n+    public void invokeRootLevelCommand() throws IOException {\n+        // arrange\n+        String commandName = \"reboot\";\n+        String commandInput = \"5\";\n+        DigitalTwinInvokeCommandRequestOptions options = new DigitalTwinInvokeCommandRequestOptions();\n+        options.setConnectTimeoutInSeconds(15);\n+        options.setResponseTimeoutInSeconds(15);\n+\n+        // setup device callback\n+        Integer deviceSuccessResponseStatus = 200;", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzOTczMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497039731", "bodyText": "I felt it would be more readable for a test to have it right there. Specially you might want different tests to do different things. But I'm open to a discussion. For product code, I agree constants are good.", "author": "vinagesh", "createdAt": "2020-09-29T20:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNjE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1OTc1Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497059752", "bodyText": "Temperature controller here?", "author": "bikamani", "createdAt": "2020-09-29T21:06:32Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/helpers/E2ETestConstants.java", "diffHunk": "@@ -2,5 +2,6 @@\n \n public class E2ETestConstants {\n     public static final String IOTHUB_CONNECTION_STRING_ENV_VAR_NAME = \"IOTHUB_CONNECTION_STRING\";\n-    public static final String MODEL_ID = \"dtmi:com:example:Thermostat;1\";\n+    public static final String THERMOSTAT_MODEL_ID = \"dtmi:com:example:Thermostat;1\";\n+    public static final String TEMPERATURE_CONTROLLER_MODEL_ID = \"dtmi:com:example:Thermostat;1\";", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MzYwMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497063601", "bodyText": "ohhh yes thanks. Good catch!", "author": "vinagesh", "createdAt": "2020-09-29T21:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1OTc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MDU5Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497060597", "bodyText": "You won't need this since it is covered in withResponse overload", "author": "bikamani", "createdAt": "2020-09-29T21:08:13Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -164,6 +164,11 @@ public static DigitalTwinAsyncClient createFromConnectionString(String connectio\n      * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n      */\n     public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        if(payload == null)", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2Mzk4MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497063981", "bodyText": "yes i've cleaned up all of this in the follow up PR.", "author": "vinagesh", "createdAt": "2020-09-29T21:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MDU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NDAwMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497064000", "bodyText": "\ud83d\udc4d", "author": "bikamani", "createdAt": "2020-09-29T21:15:11Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinMetadata.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n     /* Model-defined writable properties' request state. */\n     @JsonIgnore\n-    private final Map<String, Object> writeableProperties = new HashMap<>();\n+    private final Map<String, WritableProperty> writeableProperties = new HashMap<>();", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NTAzOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497065038", "bodyText": "We should call it a TEST_MODEL_ID instead", "author": "bikamani", "createdAt": "2020-09-29T21:17:17Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientTests.java", "diffHunk": "@@ -90,7 +92,7 @@ public void cleanUp() {\n \n     private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n         ClientOptions options = new ClientOptions();\n-        options.setModelId(E2ETestConstants.MODEL_ID);\n+        options.setModelId(E2ETestConstants.THERMOSTAT_MODEL_ID);", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NjY4Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497066683", "bodyText": "We have two different modelIds. I used these terms to differentiate.", "author": "vinagesh", "createdAt": "2020-09-29T21:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NTAzOA=="}], "type": "inlineReview"}, {"oid": "1ae3a6664df9d2cc14c36cbb7845abda9bdacb73", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/1ae3a6664df9d2cc14c36cbb7845abda9bdacb73", "message": "E2E tests", "committedDate": "2020-09-29T21:18:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NTQ4Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497065487", "bodyText": "I see so the idea here is testing both get overloads in same test?", "author": "bikamani", "createdAt": "2020-09-29T21:18:12Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientTests.java", "diffHunk": "@@ -107,43 +109,61 @@ public static void cleanUpAfterClass()\n \n     @Test\n     public void getDigitalTwin() {\n-        BasicDigitalTwin getResponse = this.digitalTwinClient.getDigitalTwin(deviceId, BasicDigitalTwin.class);\n-        assertEquals(getResponse.getMetadata().getModelId(), E2ETestConstants.MODEL_ID);\n-    }\n-\n-    @Test\n-    public void getDigitalTwinWithResponse() {\n-        String digitalTwinId = \"\";\n-    }\n+        // act\n+        BasicDigitalTwin response = digitalTwinClient.getDigitalTwin(deviceId, BasicDigitalTwin.class);\n+        ServiceResponseWithHeaders<BasicDigitalTwin, DigitalTwinGetHeaders> responseWithHeaders = digitalTwinClient.getDigitalTwinWithResponse(deviceId, BasicDigitalTwin.class);", "originalCommit": "abe229a79decb254b16a81ca116ad640980502de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NTk0NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/947#discussion_r497065944", "bodyText": "I thought it would reduce number of devices we create in the e2e. It should help scale better. What do you think?", "author": "vinagesh", "createdAt": "2020-09-29T21:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NTQ4Nw=="}], "type": "inlineReview"}, {"oid": "1ae3a6664df9d2cc14c36cbb7845abda9bdacb73", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/1ae3a6664df9d2cc14c36cbb7845abda9bdacb73", "message": "E2E tests", "committedDate": "2020-09-29T21:18:08Z", "type": "forcePushed"}]}