{"pr_number": 937, "pr_title": "e2e(digitaltwin): add get digital twin tests", "pr_createdAt": "2020-09-26T22:42:54Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/937", "timeline": [{"oid": "5c1dd786112a27a6704fb990654b19323096931c", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5c1dd786112a27a6704fb990654b19323096931c", "message": "add get e2e test:", "committedDate": "2020-09-26T22:35:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0OTI5Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r495749296", "bodyText": "nit: change prefix to DigitalTwinClientE2ETests, or DigitalTwinServiceClientTests_ to match file name", "author": "barustum", "createdAt": "2020-09-28T07:48:04Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "diffHunk": "@@ -1,38 +1,90 @@\n package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n \n-import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.BasicDigitalTwin;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator.TestDigitalTwinDevice;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n \n import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n \n @DigitalTwinTest\n+@Slf4j\n+@RunWith(Parameterized.class)\n public class DigitalTwinServiceClientTests {\n \n+    protected static String iotHubConnectionString = \"\";\n+    private TestDigitalTwinDevice testDevice;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinE2ETests_\";", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2Njc1OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496066759", "bodyText": "Would suggest renaming to DigitalTwinTestDevice", "author": "vinagesh", "createdAt": "2020-09-28T16:06:35Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/simulator/TestDigitalTwinDevice.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+@Slf4j\n+@Getter\n+public class TestDigitalTwinDevice {", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MTA3NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496071074", "bodyText": "On another note, we should just reuse this - TwinPnPTestInstance that already exists.", "author": "vinagesh", "createdAt": "2020-09-28T16:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2Njc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MzYzNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496183634", "bodyText": "refactored some code and do not need the other class anymore", "author": "bikamani", "createdAt": "2020-09-28T19:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2Njc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzMxMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496067312", "bodyText": "nit - Everywhere else (samples) we are using this - IOTHUB_CONNECTON_STRING so we can follow that convention.", "author": "vinagesh", "createdAt": "2020-09-28T16:07:26Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/simulator/TestDigitalTwinDevice.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+@Slf4j\n+@Getter\n+public class TestDigitalTwinDevice {\n+    private static final String IOT_HUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NDAzMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496184032", "bodyText": "Done", "author": "bikamani", "createdAt": "2020-09-28T19:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODE2Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496068167", "bodyText": "Do we need to register a callback at all for change of status? We will mostly need something for commands though.", "author": "vinagesh", "createdAt": "2020-09-28T16:08:55Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/simulator/TestDigitalTwinDevice.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+@Slf4j\n+@Getter\n+public class TestDigitalTwinDevice {\n+    private static final String IOT_HUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+\n+    public TestDigitalTwinDevice(@NonNull String deviceId, @NonNull IotHubClientProtocol protocol) throws IotHubException, IOException, URISyntaxException {\n+        if (!protocol.equals(IotHubClientProtocol.MQTT) && !protocol.equals(IotHubClientProtocol.MQTT_WS)) {\n+            throw new IllegalArgumentException(\"Supported protocols for DigitalTwin are MQTT, MQTT_WS\");\n+        }\n+            this.deviceId = deviceId;\n+            this.deviceClient = createDeviceClient(protocol);\n+            this.deviceClient.registerConnectionStatusChangeCallback((iotHubConnectionStatus, iotHubConnectionStatusChangeReason, throwable, o) -> {", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjE5OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496072199", "bodyText": "We won't need to add @Afte in this file if we reuse TwinPnPTestInstance  but we should try to use things like - @after and @before for setup and cleanup", "author": "vinagesh", "createdAt": "2020-09-28T16:15:08Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/simulator/TestDigitalTwinDevice.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+@Slf4j\n+@Getter\n+public class TestDigitalTwinDevice {\n+    private static final String IOT_HUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+\n+    public TestDigitalTwinDevice(@NonNull String deviceId, @NonNull IotHubClientProtocol protocol) throws IotHubException, IOException, URISyntaxException {\n+        if (!protocol.equals(IotHubClientProtocol.MQTT) && !protocol.equals(IotHubClientProtocol.MQTT_WS)) {\n+            throw new IllegalArgumentException(\"Supported protocols for DigitalTwin are MQTT, MQTT_WS\");\n+        }\n+            this.deviceId = deviceId;\n+            this.deviceClient = createDeviceClient(protocol);\n+            this.deviceClient.registerConnectionStatusChangeCallback((iotHubConnectionStatus, iotHubConnectionStatusChangeReason, throwable, o) -> {\n+                TestDigitalTwinDevice testDigitalTwinDevice = (TestDigitalTwinDevice) o;\n+                log.debug(\"DeviceID={}; status={}, reason={}\", testDigitalTwinDevice.getDeviceId(), iotHubConnectionStatus, iotHubConnectionStatusChangeReason);\n+            }, this);\n+            log.debug(\"Created device: {}\", deviceId);\n+        }\n+\n+    private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n+        RegistryManager registryManager = RegistryManager.createFromConnectionString(IOT_HUB_CONNECTION_STRING);\n+        ClientOptions options = new ClientOptions();\n+        options.setModelId(E2ETestConstants.MODEL_ID);\n+        Device device = Device.createDevice(deviceId, AuthenticationType.SAS);\n+        Device registeredDevice = registryManager.addDevice(device);\n+        String deviceConnectionString = registryManager.getDeviceConnectionString(registeredDevice);\n+        registryManager.close();\n+\n+        return new DeviceClient(deviceConnectionString, protocol, options);\n+    }\n+\n+    public void closeAndDeleteDevice() {", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NDA4OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496074089", "bodyText": "We should create just one static instance of registryManager and use that.", "author": "vinagesh", "createdAt": "2020-09-28T16:17:55Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/simulator/TestDigitalTwinDevice.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+@Slf4j\n+@Getter\n+public class TestDigitalTwinDevice {\n+    private static final String IOT_HUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+\n+    public TestDigitalTwinDevice(@NonNull String deviceId, @NonNull IotHubClientProtocol protocol) throws IotHubException, IOException, URISyntaxException {\n+        if (!protocol.equals(IotHubClientProtocol.MQTT) && !protocol.equals(IotHubClientProtocol.MQTT_WS)) {\n+            throw new IllegalArgumentException(\"Supported protocols for DigitalTwin are MQTT, MQTT_WS\");\n+        }\n+            this.deviceId = deviceId;\n+            this.deviceClient = createDeviceClient(protocol);\n+            this.deviceClient.registerConnectionStatusChangeCallback((iotHubConnectionStatus, iotHubConnectionStatusChangeReason, throwable, o) -> {\n+                TestDigitalTwinDevice testDigitalTwinDevice = (TestDigitalTwinDevice) o;\n+                log.debug(\"DeviceID={}; status={}, reason={}\", testDigitalTwinDevice.getDeviceId(), iotHubConnectionStatus, iotHubConnectionStatusChangeReason);\n+            }, this);\n+            log.debug(\"Created device: {}\", deviceId);\n+        }\n+\n+    private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n+        RegistryManager registryManager = RegistryManager.createFromConnectionString(IOT_HUB_CONNECTION_STRING);\n+        ClientOptions options = new ClientOptions();\n+        options.setModelId(E2ETestConstants.MODEL_ID);\n+        Device device = Device.createDevice(deviceId, AuthenticationType.SAS);\n+        Device registeredDevice = registryManager.addDevice(device);\n+        String deviceConnectionString = registryManager.getDeviceConnectionString(registeredDevice);\n+        registryManager.close();\n+\n+        return new DeviceClient(deviceConnectionString, protocol, options);\n+    }\n+\n+    public void closeAndDeleteDevice() {\n+        try {\n+            deviceClient.closeNow();\n+\n+            RegistryManager registryManager = RegistryManager.createFromConnectionString(IOT_HUB_CONNECTION_STRING);", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NDQ3MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496074470", "bodyText": "We should also add an assert that this test failed.", "author": "vinagesh", "createdAt": "2020-09-28T16:18:30Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/simulator/TestDigitalTwinDevice.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.simulator;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+@Slf4j\n+@Getter\n+public class TestDigitalTwinDevice {\n+    private static final String IOT_HUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+\n+    public TestDigitalTwinDevice(@NonNull String deviceId, @NonNull IotHubClientProtocol protocol) throws IotHubException, IOException, URISyntaxException {\n+        if (!protocol.equals(IotHubClientProtocol.MQTT) && !protocol.equals(IotHubClientProtocol.MQTT_WS)) {\n+            throw new IllegalArgumentException(\"Supported protocols for DigitalTwin are MQTT, MQTT_WS\");\n+        }\n+            this.deviceId = deviceId;\n+            this.deviceClient = createDeviceClient(protocol);\n+            this.deviceClient.registerConnectionStatusChangeCallback((iotHubConnectionStatus, iotHubConnectionStatusChangeReason, throwable, o) -> {\n+                TestDigitalTwinDevice testDigitalTwinDevice = (TestDigitalTwinDevice) o;\n+                log.debug(\"DeviceID={}; status={}, reason={}\", testDigitalTwinDevice.getDeviceId(), iotHubConnectionStatus, iotHubConnectionStatusChangeReason);\n+            }, this);\n+            log.debug(\"Created device: {}\", deviceId);\n+        }\n+\n+    private DeviceClient createDeviceClient(IotHubClientProtocol protocol) throws IOException, IotHubException, URISyntaxException {\n+        RegistryManager registryManager = RegistryManager.createFromConnectionString(IOT_HUB_CONNECTION_STRING);\n+        ClientOptions options = new ClientOptions();\n+        options.setModelId(E2ETestConstants.MODEL_ID);\n+        Device device = Device.createDevice(deviceId, AuthenticationType.SAS);\n+        Device registeredDevice = registryManager.addDevice(device);\n+        String deviceConnectionString = registryManager.getDeviceConnectionString(registeredDevice);\n+        registryManager.close();\n+\n+        return new DeviceClient(deviceConnectionString, protocol, options);\n+    }\n+\n+    public void closeAndDeleteDevice() {\n+        try {\n+            deviceClient.closeNow();\n+\n+            RegistryManager registryManager = RegistryManager.createFromConnectionString(IOT_HUB_CONNECTION_STRING);\n+            registryManager.removeDevice(deviceId);\n+            registryManager.close();\n+        } catch (Exception ex) {\n+            log.error(\"An exception occurred while closing/ deleting the device {}: {}\", deviceId, ex);", "originalCommit": "5c1dd786112a27a6704fb990654b19323096931c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NTA1MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496185050", "bodyText": "Test hasn't failed this is actually just deleting device as part of cleanup", "author": "bikamani", "createdAt": "2020-09-28T19:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NDQ3MA=="}], "type": "inlineReview"}, {"oid": "56c716781be7482b1008e85118ae083ba495068e", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/56c716781be7482b1008e85118ae083ba495068e", "message": "adding digital twin test rules", "committedDate": "2020-09-28T17:43:55Z", "type": "commit"}, {"oid": "16adbeaa63d65f73dd100e0afde7b8f44ea3d666", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/16adbeaa63d65f73dd100e0afde7b8f44ea3d666", "message": "refactor some code", "committedDate": "2020-09-28T19:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4ODMwNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496188305", "bodyText": "Do we need this?", "author": "vinagesh", "createdAt": "2020-09-28T19:39:54Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "diffHunk": "@@ -1,38 +1,126 @@\n package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n \n-import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n-import org.junit.Test;\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.BasicDigitalTwin;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n \n import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n \n @DigitalTwinTest\n-public class DigitalTwinServiceClientTests {\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinServiceClientTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;", "originalCommit": "16adbeaa63d65f73dd100e0afde7b8f44ea3d666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5ODMxMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496198313", "bodyText": "Good catch removed", "author": "bikamani", "createdAt": "2020-09-28T19:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4ODMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4OTc0Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496189742", "bodyText": "Remove registryManager.close(); - This should only be done in @afterclass - line 99", "author": "vinagesh", "createdAt": "2020-09-28T19:42:41Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "diffHunk": "@@ -1,38 +1,126 @@\n package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n \n-import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n-import org.junit.Test;\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.BasicDigitalTwin;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n \n import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n \n @DigitalTwinTest\n-public class DigitalTwinServiceClientTests {\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinServiceClientTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60); // 5 minutes max per method tested\n+\n+    @Parameterized.Parameter(0)\n+    public IotHubClientProtocol protocol;\n+\n+    @Parameterized.Parameters(name = \"{index}: Digital Twin Test: protocol={0}\")\n+    public static Collection<Object[]> data() {\n+        return asList(new Object[][] {\n+                {MQTT},\n+                {MQTT_WS},\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setUpBeforeClass() throws IOException {\n+        registryManager = RegistryManager.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @Before\n+    public void setUp() throws URISyntaxException, IOException, IotHubException {\n+\n+        this.deviceClient = createDeviceClient(protocol);\n+        deviceClient.open();\n+        DigitalTwinAsyncClient asyncClient = new DigitalTwinAsyncClient(IOTHUB_CONNECTION_STRING);\n+        digitalTwinClient = new DigitalTwinClient(asyncClient);\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        try {\n+            deviceClient.closeNow();\n+            registryManager.removeDevice(deviceId);\n+            registryManager.close();", "originalCommit": "16adbeaa63d65f73dd100e0afde7b8f44ea3d666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5OTcyNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496199724", "bodyText": "Totally agree. Fixed it", "author": "bikamani", "createdAt": "2020-09-28T20:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4OTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MDA4Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496190086", "bodyText": "We should add assert.False and fail the test.", "author": "vinagesh", "createdAt": "2020-09-28T19:43:19Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "diffHunk": "@@ -1,38 +1,126 @@\n package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;\n \n-import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n-import org.junit.Test;\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.DeviceClient;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinClient;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.BasicDigitalTwin;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.*;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.digitaltwin.helpers.E2ETestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.DigitalTwinTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.iothub.twin.TwinPnPTests;\n \n import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertEquals;\n \n @DigitalTwinTest\n-public class DigitalTwinServiceClientTests {\n+@Slf4j\n+@RunWith(Parameterized.class)\n+public class DigitalTwinServiceClientTests extends IntegrationTest\n+{\n+\n+    private static final String IOTHUB_CONNECTION_STRING = Tools.retrieveEnvironmentVariableValue(E2ETestConstants.IOTHUB_CONNECTION_STRING_ENV_VAR_NAME);\n+    private static RegistryManager registryManager;\n+    private String deviceId;\n+    private DeviceClient deviceClient;\n+    private DigitalTwinClient digitalTwinClient = null;\n+    private static final String DEVICE_ID_PREFIX = \"DigitalTwinServiceClientTests_\";\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60); // 5 minutes max per method tested\n+\n+    @Parameterized.Parameter(0)\n+    public IotHubClientProtocol protocol;\n+\n+    @Parameterized.Parameters(name = \"{index}: Digital Twin Test: protocol={0}\")\n+    public static Collection<Object[]> data() {\n+        return asList(new Object[][] {\n+                {MQTT},\n+                {MQTT_WS},\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void setUpBeforeClass() throws IOException {\n+        registryManager = RegistryManager.createFromConnectionString(IOTHUB_CONNECTION_STRING);\n+    }\n+\n+    @Before\n+    public void setUp() throws URISyntaxException, IOException, IotHubException {\n+\n+        this.deviceClient = createDeviceClient(protocol);\n+        deviceClient.open();\n+        DigitalTwinAsyncClient asyncClient = new DigitalTwinAsyncClient(IOTHUB_CONNECTION_STRING);\n+        digitalTwinClient = new DigitalTwinClient(asyncClient);\n+    }\n+\n+    @After\n+    public void cleanUp() {\n+        try {\n+            deviceClient.closeNow();\n+            registryManager.removeDevice(deviceId);\n+            registryManager.close();\n+        } catch (Exception ex) {\n+            log.error(\"An exception occurred while closing/ deleting the device {}: {}\", deviceId, ex);", "originalCommit": "16adbeaa63d65f73dd100e0afde7b8f44ea3d666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5ODczMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496198730", "bodyText": "This one's not really part of test. It should be fine if registrymanager could not delete one device since we are mainly testing service client", "author": "bikamani", "createdAt": "2020-09-28T19:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MDA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMjc5NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/937#discussion_r496202795", "bodyText": "Yes but we want to know that our cleanup is failing. That is the pattern we follow everywhere. Update it in another PR.", "author": "vinagesh", "createdAt": "2020-09-28T20:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MDA4Ng=="}], "type": "inlineReview"}, {"oid": "ae7e63b4bf0baef68e8102acacf5de02de9ff12d", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/ae7e63b4bf0baef68e8102acacf5de02de9ff12d", "message": "address code review comments", "committedDate": "2020-09-28T20:00:44Z", "type": "commit"}, {"oid": "e1e26a2fc8f13503b28ad62edefe5a8d51cd34f0", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e1e26a2fc8f13503b28ad62edefe5a8d51cd34f0", "message": "clean up", "committedDate": "2020-09-28T20:02:30Z", "type": "commit"}]}