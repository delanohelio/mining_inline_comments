{"pr_number": 803, "pr_title": "Fix remote oauth project sync settings", "pr_createdAt": "2020-09-15T17:38:13Z", "pr_url": "https://github.com/phac-nml/irida/pull/803", "timeline": [{"oid": "dfa5eb9b72f9eaa86543808399d04478990f3f19", "url": "https://github.com/phac-nml/irida/commit/dfa5eb9b72f9eaa86543808399d04478990f3f19", "message": "Updated remote project sync settings page to use ant design and react. Updated CHANGELOG", "committedDate": "2020-09-15T15:02:06Z", "type": "commit"}, {"oid": "26a8c51a985225f5d437842d7001c65d15ab100c", "url": "https://github.com/phac-nml/irida/commit/26a8c51a985225f5d437842d7001c65d15ab100c", "message": "Merged in create remote project branch", "committedDate": "2020-09-15T15:12:06Z", "type": "commit"}, {"oid": "54b94c5c35432332250094d188eaa406e7c1e38b", "url": "https://github.com/phac-nml/irida/commit/54b94c5c35432332250094d188eaa406e7c1e38b", "message": "Removed file no longer needed", "committedDate": "2020-09-15T17:19:35Z", "type": "commit"}, {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1", "url": "https://github.com/phac-nml/irida/commit/ce1fd0fb310580677d61cf5181f797dc265e52e1", "message": "Merge branch 'FIX-remoate-oath-CREATE_REMOTE_PROJECT' into FIX-remote-oauth-PROJECT_SYNC_SETTINGS", "committedDate": "2020-09-15T17:37:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDE1NQ==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850155", "bodyText": "Comment", "author": "joshsadam", "createdAt": "2020-09-15T17:40:39Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+", "originalCommit": "ce1fd0fb310580677d61cf5181f797dc265e52e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODA1MQ==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488868051", "bodyText": "Added in bb34052", "author": "deepsidhu85", "createdAt": "2020-09-15T18:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850573", "bodyText": "We should come up with a naming scheme for these, we have models, details, etc...", "author": "joshsadam", "createdAt": "2020-09-15T17:41:20Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+\n+public class RemoteProjectInfo {", "originalCommit": "ce1fd0fb310580677d61cf5181f797dc265e52e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NTkyOA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488855928", "bodyText": "Agreed", "author": "deepsidhu85", "createdAt": "2020-09-15T17:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NjMzMw==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488876333", "bodyText": "Let's go with *Settings as that's what this dto is and we can use this naming scheme going forward", "author": "deepsidhu85", "createdAt": "2020-09-15T18:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0NjIzOA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489446238", "bodyText": "Updated in d6e05c3", "author": "deepsidhu85", "createdAt": "2020-09-16T13:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDY5Mw==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850693", "bodyText": "Comments", "author": "joshsadam", "createdAt": "2020-09-15T17:41:34Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -132,4 +137,20 @@ public String getProjectSettingsRemotePage(@PathVariable Long projectId, final M\n \t\tprojectControllerUtils.getProjectTemplateDetails(model, principal, project);\n \t\treturn \"projects/settings/pages/remote\";\n \t}\n+\n+\n+\t@RequestMapping(\"/remote-settings\")", "originalCommit": "ce1fd0fb310580677d61cf5181f797dc265e52e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NzkzMg==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488867932", "bodyText": "Added in 68d3aca", "author": "deepsidhu85", "createdAt": "2020-09-15T18:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDY5Mw=="}], "type": "inlineReview"}, {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4", "url": "https://github.com/phac-nml/irida/commit/68d3acaeba753d0395ebb82cf7b475f5af7d89c4", "message": "Added javadoc for method", "committedDate": "2020-09-15T17:48:00Z", "type": "commit"}, {"oid": "bb34052964426a9d5f05269592dbeb56afcf1e82", "url": "https://github.com/phac-nml/irida/commit/bb34052964426a9d5f05269592dbeb56afcf1e82", "message": "Added comments, removed page variable", "committedDate": "2020-09-15T18:11:07Z", "type": "commit"}, {"oid": "444a9070624fde9eeebd2f33a1e2442564f72152", "url": "https://github.com/phac-nml/irida/commit/444a9070624fde9eeebd2f33a1e2442564f72152", "message": "Merge branch 'FIX-remoate-oath-CREATE_REMOTE_PROJECT' into FIX-remote-oauth-PROJECT_SYNC_SETTINGS", "committedDate": "2020-09-15T19:50:08Z", "type": "commit"}, {"oid": "de55c629770a6fc3924ffbd65eb135a6082c68e8", "url": "https://github.com/phac-nml/irida/commit/de55c629770a6fc3924ffbd65eb135a6082c68e8", "message": "Removed translations not needed and removed page variables for these translations. Updated ProjectSynchronizationSettings component to use SyncFrequencySelect component for selecting sync frequency", "committedDate": "2020-09-15T21:31:49Z", "type": "commit"}, {"oid": "99be6b95c6ae4c797b364ef41f1041e008012357", "url": "https://github.com/phac-nml/irida/commit/99be6b95c6ae4c797b364ef41f1041e008012357", "message": "Removed logging statement", "committedDate": "2020-09-15T21:34:12Z", "type": "commit"}, {"oid": "99b9b2d97a3014eecc0984690abfa1329d6c20b3", "url": "https://github.com/phac-nml/irida/commit/99b9b2d97a3014eecc0984690abfa1329d6c20b3", "message": "Merge branch 'FIX-remoate-oath-CREATE_REMOTE_PROJECT' into FIX-remote-oauth-PROJECT_SYNC_SETTINGS", "committedDate": "2020-09-16T13:02:53Z", "type": "commit"}, {"oid": "d6e05c3fc8762cb07c7bd654025517140657c154", "url": "https://github.com/phac-nml/irida/commit/d6e05c3fc8762cb07c7bd654025517140657c154", "message": "Renamed RemoteProjectInfo to RemoteProjectSettings. Added labelRequired to SyncFrequency which accepts true or false and will only display the label if it is set to true(default).", "committedDate": "2020-09-16T13:36:55Z", "type": "commit"}, {"oid": "613c3bdff8d57fd636f70faf98af2d158e57a3ff", "url": "https://github.com/phac-nml/irida/commit/613c3bdff8d57fd636f70faf98af2d158e57a3ff", "message": "Merge branch 'FIX-remoate-oath-CREATE_REMOTE_PROJECT' into FIX-remote-oauth-PROJECT_SYNC_SETTINGS", "committedDate": "2020-09-16T13:37:48Z", "type": "commit"}, {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de", "url": "https://github.com/phac-nml/irida/commit/12402016c95c022c3045f77f3884ff9f5a2844de", "message": "Added translation", "committedDate": "2020-09-16T13:40:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDM1NA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489534354", "bodyText": "I would update this to take an object instead of all these individual parameters.", "author": "joshsadam", "createdAt": "2020-09-16T15:36:33Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -64,23 +68,23 @@ public ProjectSettingsRemoteController(MessageSource messageSource, ProjectServi\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean forceSync,\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean changeUser, Principal principal,", "originalCommit": "12402016c95c022c3045f77f3884ff9f5a2844de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDg1Ng==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489534856", "bodyText": "This is also an asynchronous response to you should create an ajax controller for this.", "author": "joshsadam", "createdAt": "2020-09-16T15:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjM1OA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722358", "bodyText": "Updated both in 5bc543e", "author": "deepsidhu85", "createdAt": "2020-09-16T20:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNTQ4MQ==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489535481", "bodyText": "Same here, this should be in an ajax controller", "author": "joshsadam", "createdAt": "2020-09-16T15:38:09Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -132,4 +136,27 @@ public String getProjectSettingsRemotePage(@PathVariable Long projectId, final M\n \t\tprojectControllerUtils.getProjectTemplateDetails(model, principal, project);\n \t\treturn \"projects/settings/pages/remote\";\n \t}\n+\n+\t/**\n+\t * Gets the remote synchronization {@link Project} settings\n+\t *\n+\t * @param projectId the ID of the {@link Project} to read\n+\t * @return {@link RemoteProjectSettings} object which has the\n+\t * remote project synchronization settings\n+\t */\n+\t@RequestMapping(\"/remote-settings\")\n+\t@PreAuthorize(\"hasPermission(#projectId, 'canManageLocalProjectSettings')\")", "originalCommit": "12402016c95c022c3045f77f3884ff9f5a2844de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjMxMA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722310", "bodyText": "Updated in 5bc543e", "author": "deepsidhu85", "createdAt": "2020-09-16T20:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNTQ4MQ=="}], "type": "inlineReview"}, {"oid": "3a3484fc895a6fcb96b6682639f90ebd53b993b5", "url": "https://github.com/phac-nml/irida/commit/3a3484fc895a6fcb96b6682639f90ebd53b993b5", "message": "Added test for remote project synchronization settings page", "committedDate": "2020-09-16T17:44:05Z", "type": "commit"}, {"oid": "5bc543eee44a8410455f2cbe94057ef721e15826", "url": "https://github.com/phac-nml/irida/commit/5bc543eee44a8410455f2cbe94057ef721e15826", "message": "Moved ajax methods to new controller. Updated sync mapping method to accept a RemoteProjectSettingsUpdateRequest dto instead of individual params.", "committedDate": "2020-09-16T20:02:08Z", "type": "commit"}, {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5", "url": "https://github.com/phac-nml/irida/commit/cb49da0eb457ff518d28cbb65a89cbef087821f5", "message": "Removed redundant setting of base url", "committedDate": "2020-09-16T20:07:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzUzNg==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489847536", "bodyText": "Where's the UI service?  You are making this controller so messy.", "author": "joshsadam", "createdAt": "2020-09-17T01:16:14Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;", "originalCommit": "cb49da0eb457ff518d28cbb65a89cbef087821f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODE2Nw==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268167", "bodyText": "Added in 3bd9372", "author": "deepsidhu85", "createdAt": "2020-09-17T13:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0Nzg0Ng==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489847846", "bodyText": "You should return an object not a Map, This is where those AjaxSuccessResponse and AjaxErrorResponse come into play", "author": "joshsadam", "createdAt": "2020-09-17T01:16:41Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,", "originalCommit": "cb49da0eb457ff518d28cbb65a89cbef087821f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODI4NQ==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268285", "bodyText": "Updated in 3bd9372", "author": "deepsidhu85", "createdAt": "2020-09-17T13:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0Nzg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0OTY5Ng==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489849696", "bodyText": "Preface message keys returned from the server with server. that way we can keep track of where they are being used.  I also usually add the name of the component it is being used in: server.MyComponent.userchange.error for example.", "author": "joshsadam", "createdAt": "2020-09-17T01:19:39Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest,\n+\t\t\tPrincipal principal,\n+\t\t\tLocale locale) {\n+\n+\t\tProject read = projectService.read(projectId);\n+\t\tRemoteStatus remoteStatus = read.getRemoteStatus();\n+\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\tString message = null;\n+\t\tString error = null;\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.frequencychange\", new Object[] {remoteProjectSettingsUpdateRequest.getProjectSyncFrequency()}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.marked.for.sync\", new Object[] {}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t// ensure the user can read the project\n+\t\t\ttry {\n+\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.userchange\", new Object[] {},\n+\t\t\t\t\t\tlocale);\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\terror = messageSource.getMessage(\"project.settings.notifications.sync.userchange.error\",", "originalCommit": "cb49da0eb457ff518d28cbb65a89cbef087821f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODM3OA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268378", "bodyText": "Updated in 3bd9372", "author": "deepsidhu85", "createdAt": "2020-09-17T13:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0OTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MDkzNA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489850934", "bodyText": "Also it would be better to return an ResponseEntitiy so you can return a bad status so your ui can handle it properly", "author": "joshsadam", "createdAt": "2020-09-17T01:21:41Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest,\n+\t\t\tPrincipal principal,\n+\t\t\tLocale locale) {\n+\n+\t\tProject read = projectService.read(projectId);\n+\t\tRemoteStatus remoteStatus = read.getRemoteStatus();\n+\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\tString message = null;\n+\t\tString error = null;\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.frequencychange\", new Object[] {remoteProjectSettingsUpdateRequest.getProjectSyncFrequency()}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.marked.for.sync\", new Object[] {}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t// ensure the user can read the project\n+\t\t\ttry {\n+\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.userchange\", new Object[] {},\n+\t\t\t\t\t\tlocale);\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\terror = messageSource.getMessage(\"project.settings.notifications.sync.userchange.error\",\n+\t\t\t\t\t\tnew Object[] {}, locale);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprojectService.updateProjectSettings(read, updates);\n+\n+\t\tMap<String, String> response;\n+\t\tif (error == null) {\n+\t\t\tresponse = ImmutableMap.of(\"result\", message);\n+\t\t} else {", "originalCommit": "cb49da0eb457ff518d28cbb65a89cbef087821f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODQ1Mg==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268452", "bodyText": "Updated in 3bd9372", "author": "deepsidhu85", "createdAt": "2020-09-17T13:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MDkzNA=="}], "type": "inlineReview"}, {"oid": "910177cfbe369c72a9c125601432c54076e13bc2", "url": "https://github.com/phac-nml/irida/commit/910177cfbe369c72a9c125601432c54076e13bc2", "message": "Removed br tags, updated to use ant design title, removed redudnant === true when checking if forceSync is set", "committedDate": "2020-09-17T13:02:45Z", "type": "commit"}, {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "url": "https://github.com/phac-nml/irida/commit/3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "message": "Created new UIRemoteProjectService and refactored code from ProjectSettingsRemoteAjaxController into this service to clean up controller. Updated translation keys to preface with server.ProjectRemote which are returned for that component. Updated controller methods to return ResponseEntity<DTOTYYPE> and uiremoteprojectservice to return objects rather than a map", "committedDate": "2020-09-17T13:57:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzEzNA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490283134", "bodyText": "JavaDoc", "author": "joshsadam", "createdAt": "2020-09-17T14:16:55Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxUpdateItemSuccessResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+public class AjaxUpdateItemSuccessResponse extends AjaxResponse {", "originalCommit": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTI0NA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490285244", "bodyText": "Updated in a7b64f1", "author": "deepsidhu85", "createdAt": "2020-09-17T14:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzEzNA=="}], "type": "inlineReview"}, {"oid": "a7b64f193de58ec912b52536d2aaa704a43a136f", "url": "https://github.com/phac-nml/irida/commit/a7b64f193de58ec912b52536d2aaa704a43a136f", "message": "Added javadoc", "committedDate": "2020-09-17T14:19:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTk2NQ==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490285965", "bodyText": "You should handle this a little differently. \u00a0Have your service throw an error catch it here and then create your responses. \u00a0The reason is that if it fails you can return an HttpStatus. error code.", "author": "joshsadam", "createdAt": "2020-09-17T14:20:38Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Locale;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteProjectService;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate UIRemoteProjectService uiRemoteProjectService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(UIRemoteProjectService uiRemoteProjectService) {\n+\t\tthis.uiRemoteProjectService = uiRemoteProjectService;\n+\t}\n+\n+\t/**\n+\t * Update the remote project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return AjaxResponse if error return AjaxErrorResponse otherwise return AjaxUpdateItemSuccessResponse\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic ResponseEntity<AjaxResponse> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal,", "originalCommit": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyOTc0OA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490329748", "bodyText": "Updated in dc6a734", "author": "deepsidhu85", "createdAt": "2020-09-17T15:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDk2Mg==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490290962", "bodyText": "Use !Strings.isNullOrEmpty(error) for these checks", "author": "joshsadam", "createdAt": "2020-09-17T14:26:57Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+\n+\t\tif (project != null) {\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\t\tString message = null;\n+\t\t\tString error = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\terror = messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprojectService.updateProjectSettings(project, updates);\n+\n+\t\t\tif (error != null) {", "originalCommit": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyOTY2OA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490329668", "bodyText": "Removed in dc6a734 as we are catching the exception in the controller and throws the exception and returns the message", "author": "deepsidhu85", "createdAt": "2020-09-17T15:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTkxMA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490291910", "bodyText": "This is what you could catch on your controller and return a bad http status", "author": "joshsadam", "createdAt": "2020-09-17T14:28:14Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+\n+\t\tif (project != null) {\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\t\tString message = null;\n+\t\t\tString error = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\terror = messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale);", "originalCommit": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMDA5MA==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490330090", "bodyText": "Updated in dc6a734", "author": "deepsidhu85", "createdAt": "2020-09-17T15:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MzA0Ng==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490293046", "bodyText": "Does searching for an invalid project not though an EntityNotFounException?", "author": "joshsadam", "createdAt": "2020-09-17T14:29:43Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+", "originalCommit": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dc6a7340bb060bcf798d856d3e29b7da3fff9389", "url": "https://github.com/phac-nml/irida/commit/dc6a7340bb060bcf798d856d3e29b7da3fff9389", "message": "Updated to catch an exception and return bad request http status", "committedDate": "2020-09-17T15:08:25Z", "type": "commit"}, {"oid": "deadda89bc903a755b112249d583af346979c0b1", "url": "https://github.com/phac-nml/irida/commit/deadda89bc903a755b112249d583af346979c0b1", "message": "Fixed @throws", "committedDate": "2020-09-17T16:19:39Z", "type": "commit"}, {"oid": "3e5bf6b70ebe214662db5bfdb373e63ef3ce09c4", "url": "https://github.com/phac-nml/irida/commit/3e5bf6b70ebe214662db5bfdb373e63ef3ce09c4", "message": "Added tests for uiremoteprojectservice. Updated getProjectRemoteSettings method to catch an error. Updated remote-projects.js api calls to catch and throw errors that the component can catch and display", "committedDate": "2020-09-17T19:35:08Z", "type": "commit"}, {"oid": "ba7a8819c99d1ca4df9d991866f82f8ec1229d79", "url": "https://github.com/phac-nml/irida/commit/ba7a8819c99d1ca4df9d991866f82f8ec1229d79", "message": "Added missing @param to javadoc", "committedDate": "2020-09-17T19:56:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NTEwOQ==", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490345109", "bodyText": "That's a pretty generic catch, but I guess it works.", "author": "joshsadam", "createdAt": "2020-09-17T15:30:33Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link String}\n+\t * @throws {@link Exception}\n+\t */\n+\tpublic String updateProjectSyncSettings(Long projectId,\n+\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) throws Exception {\n+\n+\t\ttry {\n+\t\t\tProject project = projectService.read(projectId);\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\t\t\tString message = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\tthrow new Exception(messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale));\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprojectService.updateProjectSettings(project, updates);\n+\n+\t\t\treturn message;\n+\n+\t\t} catch(Exception ex) {", "originalCommit": "dc6a7340bb060bcf798d856d3e29b7da3fff9389", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}