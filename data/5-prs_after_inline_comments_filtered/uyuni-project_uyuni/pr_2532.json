{"pr_number": 2532, "pr_title": "Server side pagination with maintenance schedule system list page", "pr_createdAt": "2020-08-26T17:35:50Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2532", "timeline": [{"oid": "bede2040d96496875186b3a57a97612727378901", "url": "https://github.com/uyuni-project/uyuni/commit/bede2040d96496875186b3a57a97612727378901", "message": "Redesign maintenance schedule systems table to use paginated data from server", "committedDate": "2020-08-26T18:25:51Z", "type": "forcePushed"}, {"oid": "979851c98d51bc714280b61eda8b5de2d6121c4a", "url": "https://github.com/uyuni-project/uyuni/commit/979851c98d51bc714280b61eda8b5de2d6121c4a", "message": "Redesign maintenance schedule systems table to use paginated data from server", "committedDate": "2020-08-27T10:53:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxNTkxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r479015918", "bodyText": "Not sure that is of any use here, but usually REST paginated APIs embed an URL to the next and/or previous pages and the page number.", "author": "cbosdo", "createdAt": "2020-08-28T09:25:16Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/PagedDataResultJson.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.utils.gson;\n+\n+import com.redhat.rhn.common.db.datasource.DataResult;\n+\n+import java.util.List;\n+\n+/**\n+ * JSON wrapper class to hold paginated data\n+ *\n+ * @param <T> the type of the data items\n+ */\n+public class PagedDataResultJson<T> {\n+\n+    private List<T> items;\n+    private long total;", "originalCommit": "c60cc5fba0b1d2f5cc8f0b7e66b61bb544fb62a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NjUwMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r479256501", "bodyText": "We also need it to display the total number in the UI, and in this case, this is enough to calculate the next/prev pages", "author": "cbbayburt", "createdAt": "2020-08-28T12:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxNTkxOA=="}], "type": "inlineReview"}, {"oid": "703fb9b168a659d1bc16df18215282f52de67f67", "url": "https://github.com/uyuni-project/uyuni/commit/703fb9b168a659d1bc16df18215282f52de67f67", "message": "Merge table implementations using data providers", "committedDate": "2020-09-04T13:47:08Z", "type": "forcePushed"}, {"oid": "e61a30f3009a829d19e3e036d7c5cf220030dff9", "url": "https://github.com/uyuni-project/uyuni/commit/e61a30f3009a829d19e3e036d7c5cf220030dff9", "message": "Merge table implementations using data providers", "committedDate": "2020-09-04T15:18:14Z", "type": "forcePushed"}, {"oid": "2b95382e86828712ccc46d2842cab1c5f30458e2", "url": "https://github.com/uyuni-project/uyuni/commit/2b95382e86828712ccc46d2842cab1c5f30458e2", "message": "Merge table implementations using data providers", "committedDate": "2020-09-09T12:43:26Z", "type": "forcePushed"}, {"oid": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "url": "https://github.com/uyuni-project/uyuni/commit/cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "message": "Merge table implementations using data providers", "committedDate": "2020-09-09T12:45:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjE3Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r486116173", "bodyText": "Shouldn't the 2nd page only contain one item? 2 items on the 1st page, 1 item on the 2nd one.", "author": "hustodemon", "createdAt": "2020-09-10T07:14:32Z", "path": "java/code/src/com/suse/manager/webui/utils/test/PageControlHelperTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package com.suse.manager.webui.utils.test;\n+\n+import com.redhat.rhn.common.db.datasource.DataResult;\n+import com.redhat.rhn.frontend.listview.PageControl;\n+import com.suse.manager.webui.utils.PageControlHelper;\n+import com.suse.manager.webui.utils.SparkTestUtils;\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PageControlHelperTest extends TestCase {\n+\n+    private static final String REQUEST_URL = \"https://pagecontrol.test\";\n+\n+    public void testRequestWithNoParams() {\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequest(REQUEST_URL));\n+\n+        assertEquals(1, helper.getStart());\n+        assertEquals(0, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithPageParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams),\"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithFilterParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Filter string and column\n+        queryParams.put(\"q\", \"mystring\");\n+        queryParams.put(\"qc\", \"myproperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertEquals(\"mystring\", helper.getQuery());\n+        assertEquals(\"myproperty\", helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithSortParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Sort direction and column\n+        queryParams.put(\"s\", \"1\");\n+        queryParams.put(\"sc\", \"mysortproperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertEquals(\"1\", helper.getSortDirection());\n+        assertEquals(\"mysortproperty\", helper.getSortColumn());\n+        assertNull(helper.getFunction());\n+    }\n+\n+    public void testRequestWithFunctionParam() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Function\n+        queryParams.put(\"f\", \"myfunction\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(1, helper.getStart());\n+        assertEquals(0, helper.getPageSize());\n+        assertNull(helper.getQuery());\n+        assertNull(helper.getQueryColumn());\n+        assertNull(helper.getSortDirection());\n+        assertNull(helper.getSortColumn());\n+        assertEquals(\"myfunction\", helper.getFunction());\n+    }\n+\n+    public void testRequestWithDefaultFilterColumn() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Filter string\n+        queryParams.put(\"q\", \"mystring\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        assertEquals(5, helper.getStart());\n+        assertEquals(10, helper.getPageSize());\n+        assertEquals(\"mystring\", helper.getQuery());\n+        assertEquals(\"mydefaultproperty\", helper.getQueryColumn());\n+    }\n+\n+    public void testPageControlWithNoParams() {\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequest(REQUEST_URL));\n+        PageControl pc = helper.getPageControl();\n+\n+        assertEquals(1, pc.getStart());\n+        assertEquals(0, pc.getEnd());\n+        assertFalse(pc.hasFilter());\n+        assertNull(pc.getFilterData());\n+        assertNull(pc.getFilterColumn());\n+    }\n+\n+    public void testPageControlWithPageParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams),\"mydefaultproperty\");\n+        PageControl pc = helper.getPageControl();\n+\n+        assertEquals(5, pc.getStart());\n+        assertEquals(14, pc.getEnd());\n+        assertFalse(pc.hasFilter());\n+        assertNull(pc.getFilterData());\n+        assertNull(pc.getFilterColumn());\n+    }\n+\n+    public void testPageControlWithFilterParams() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+        // Filter string and column\n+        queryParams.put(\"q\", \"mystring\");\n+        queryParams.put(\"qc\", \"myproperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+        PageControl pc = helper.getPageControl();\n+\n+        assertEquals(5, pc.getStart());\n+        assertEquals(14, pc.getEnd());\n+        assertTrue(pc.hasFilter());\n+        assertEquals(\"mystring\", pc.getFilterData());\n+        assertEquals(\"myproperty\", pc.getFilterColumn());\n+    }\n+\n+    public class PagedDataItem {\n+        private int firstProperty;\n+        private String secondProperty;\n+\n+        PagedDataItem(int firstProperty, String secondProperty) {\n+            this.firstProperty = firstProperty;\n+            this.secondProperty = secondProperty;\n+        }\n+\n+        public int getFirstProperty() {\n+            return firstProperty;\n+        }\n+\n+        public String getSecondProperty() {\n+            return secondProperty;\n+        }\n+    }\n+\n+    public void testApplySort() {\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"5\");\n+        queryParams.put(\"ps\", \"10\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        List<PagedDataItem> unsortedList = Arrays.asList(\n+                new PagedDataItem(2, \"two\"),\n+                new PagedDataItem(1, \"one\"),\n+                new PagedDataItem(3, \"three\"));\n+\n+        List<PagedDataItem> listToSort = new ArrayList<>(unsortedList);\n+        helper.applySort(listToSort);\n+\n+        // No sorting should be performed unless the sort column is specified\n+        assertEquals(unsortedList, listToSort);\n+\n+        // Sort column (number)\n+        queryParams.put(\"sc\", \"firstProperty\");\n+        helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL, queryParams),\n+                \"mydefaultproperty\");\n+        helper.applySort(listToSort);\n+\n+        // Should be sorted in ascending order by default\n+        assertEquals(1, listToSort.get(0).firstProperty);\n+        assertEquals(2, listToSort.get(1).firstProperty);\n+        assertEquals(3, listToSort.get(2).firstProperty);\n+\n+        // Sort direction (descending) and column (alpha)\n+        queryParams.put(\"s\", \"-1\");\n+        queryParams.put(\"sc\", \"secondProperty\");\n+        helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL, queryParams),\n+                \"mydefaultproperty\");\n+        listToSort = new ArrayList<>(unsortedList);\n+        helper.applySort(listToSort);\n+\n+        assertEquals(\"two\", listToSort.get(0).secondProperty);\n+        assertEquals(\"three\", listToSort.get(1).secondProperty);\n+        assertEquals(\"one\", listToSort.get(2).secondProperty);\n+    }\n+\n+    public void testProcessPageControl() {\n+        DataResult<PagedDataItem> testData = new DataResult<>(Arrays.asList(\n+                new PagedDataItem(1, \"angel\"),\n+                new PagedDataItem(2, \"apple\"),\n+                new PagedDataItem(3, \"orange\"),\n+                new PagedDataItem(4, \"ranger\")\n+        ));\n+\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"2\");\n+        queryParams.put(\"ps\", \"2\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        DataResult<PagedDataItem> result = helper.processPageControl(testData);\n+\n+        assertEquals(2, result.size());\n+        assertEquals(4, result.getTotalSize());\n+        assertEquals(2, result.getStart());\n+        assertEquals(3, result.getEnd());\n+        assertEquals(\"apple\", result.get(0).secondProperty);\n+        assertEquals(\"orange\", result.get(1).secondProperty);\n+    }\n+\n+    public void testProcessPageControlFiltered() {\n+        DataResult<PagedDataItem> testData = new DataResult<>(Arrays.asList(\n+                new PagedDataItem(1, \"angel\"),\n+                new PagedDataItem(2, \"apple\"),\n+                new PagedDataItem(3, \"orange\"),\n+                new PagedDataItem(4, \"ranger\")\n+        ));\n+\n+        Map<String, String> queryParams = new HashMap<>();\n+        // Start index and page size\n+        queryParams.put(\"p\", \"2\");\n+        queryParams.put(\"ps\", \"2\");\n+        // Filter string and column\n+        queryParams.put(\"q\", \"ang\");\n+        queryParams.put(\"qc\", \"secondProperty\");\n+\n+        PageControlHelper helper = new PageControlHelper(SparkTestUtils.createMockRequestWithParams(REQUEST_URL,\n+                queryParams), \"mydefaultproperty\");\n+\n+        DataResult<PagedDataItem> result = helper.processPageControl(testData);\n+\n+        assertEquals(2, result.size());", "originalCommit": "1416a5759e326688434bc9f7b8d156ccc1a17b83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc4NjQzMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r492786433", "bodyText": "No, the parameter p is actually for the start index (counting from 1), not the actual page number.", "author": "cbbayburt", "createdAt": "2020-09-22T14:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNDY5NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r486814694", "bodyText": "Would it make sense to make the applySort part of processPageControl (and even make it private (or \"public for testing only\"))?", "author": "hustodemon", "createdAt": "2020-09-11T07:02:10Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -255,11 +266,112 @@ public static String delete(Request request, Response response, User user) {\n         return json(response, ResultJson.success());\n     }\n \n+    /**\n+     * Returns a list of system IDs assigned to a specified maintenance schedule\n+     *\n+     * @param request the Spark request\n+     * @param response the Spark response\n+     * @param user the authorized user\n+     * @return the JSON list of system IDs\n+     */\n+    public static String assignedSystems(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        List<Long> systemIds = new ArrayList<>();\n+        MM.lookupScheduleByUserAndId(user, scheduleId).ifPresentOrElse(\n+                schedule -> {\n+                    List<EssentialServerDto> systems = SystemManager.systemsInSchedule(user, schedule, null);\n+                    systemIds.addAll(systems.stream().map(EssentialServerDto::getId).collect(Collectors.toList()));\n+                },\n+                () -> Spark.halt(HttpStatus.SC_NOT_FOUND)\n+        );\n+        return json(response, systemIds);\n+    }\n+\n+    /**\n+     * Returns a paged list of systems visible to a user and their assigned schedules\n+     *\n+     * @param request the Spark request\n+     * @param response the Spark response\n+     * @param user the authorized user\n+     * @return the JSON response\n+     */\n+    public static String systemSchedules(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        PageControlHelper pageHelper = new PageControlHelper(request, \"name\");\n+\n+        DataResult<SystemScheduleDto> systems = SystemManager.systemListWithSchedules(user, null);\n+\n+        if (\"id\".equals(pageHelper.getFunction())) {\n+            // Return only IDs for \"select all\" function\n+            return json(response, systems.stream().map(SystemScheduleDto::getId).collect(Collectors.toList()));\n+        }\n+\n+        pageHelper.applySort(systems);\n+        systems = pageHelper.processPageControl(systems, new HashMap<>());", "originalCommit": "cf15ccf9ba2f7a5a9a008f149920f01a1761732d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5MjUxMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2532#discussion_r492792510", "bodyText": "Right, I guess I had a reason for this in the early implementation, but it doesn't seem to be valid anymore. Thanks!", "author": "cbbayburt", "createdAt": "2020-09-22T14:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNDY5NA=="}], "type": "inlineReview"}, {"oid": "ece622fced5ade987b5ffaaa7d4e09ee36aef755", "url": "https://github.com/uyuni-project/uyuni/commit/ece622fced5ade987b5ffaaa7d4e09ee36aef755", "message": "Reuse types from 'data-providers' module", "committedDate": "2020-09-22T14:46:23Z", "type": "forcePushed"}, {"oid": "e9fb413ba40f53475f993b0b861afc7d8c3ab2dc", "url": "https://github.com/uyuni-project/uyuni/commit/e9fb413ba40f53475f993b0b861afc7d8c3ab2dc", "message": "Reuse types from 'data-providers' module", "committedDate": "2020-09-22T15:28:24Z", "type": "forcePushed"}, {"oid": "bc0c3007846892d18495734e327ad913cf18c45f", "url": "https://github.com/uyuni-project/uyuni/commit/bc0c3007846892d18495734e327ad913cf18c45f", "message": "Implement ApiDataEndpoint JS module to make paginated data requests", "committedDate": "2020-09-22T20:42:35Z", "type": "commit"}, {"oid": "474a683052954cc6cf1a11576d9fea459a997b7b", "url": "https://github.com/uyuni-project/uyuni/commit/474a683052954cc6cf1a11576d9fea459a997b7b", "message": "Add Java backend helpers for ApiDataEndpoint module", "committedDate": "2020-09-22T20:42:39Z", "type": "commit"}, {"oid": "9856119719d25c20e2498b6629cc1f2c185763ed", "url": "https://github.com/uyuni-project/uyuni/commit/9856119719d25c20e2498b6629cc1f2c185763ed", "message": "Implement AsyncTable component using ApiDataEndpoint for server-side pagination\n\nMost logic for AsyncTable.js and AsyncDataHandler.js was duplicated from\nTable.js and TableDataHandler.js", "committedDate": "2020-09-22T20:42:39Z", "type": "commit"}, {"oid": "901b87a9213335fad4688945356eec8440265c17", "url": "https://github.com/uyuni-project/uyuni/commit/901b87a9213335fad4688945356eec8440265c17", "message": "Redesign maintenance schedule systems table to use paginated data from server", "committedDate": "2020-09-22T20:43:15Z", "type": "commit"}, {"oid": "1492cf7a17152d31941f7ce9b7c80ed17f3787ff", "url": "https://github.com/uyuni-project/uyuni/commit/1492cf7a17152d31941f7ce9b7c80ed17f3787ff", "message": "Implement 'data-providers' module", "committedDate": "2020-09-22T20:43:16Z", "type": "commit"}, {"oid": "becb0234330fa55ca2730da273e0bfa0d7d0fe9d", "url": "https://github.com/uyuni-project/uyuni/commit/becb0234330fa55ca2730da273e0bfa0d7d0fe9d", "message": "Merge table implementations using data providers", "committedDate": "2020-09-22T20:43:16Z", "type": "commit"}, {"oid": "e66b23c02e67734e0536e518d510e213abc38632", "url": "https://github.com/uyuni-project/uyuni/commit/e66b23c02e67734e0536e518d510e213abc38632", "message": "Use 'userPreferences' jade mixin for default page size in tables", "committedDate": "2020-09-22T20:43:16Z", "type": "commit"}, {"oid": "cd06fadcda0a0d8974727ee578c0bae16db60010", "url": "https://github.com/uyuni-project/uyuni/commit/cd06fadcda0a0d8974727ee578c0bae16db60010", "message": "Reuse types from 'data-providers' module", "committedDate": "2020-09-22T20:43:17Z", "type": "commit"}, {"oid": "cd06fadcda0a0d8974727ee578c0bae16db60010", "url": "https://github.com/uyuni-project/uyuni/commit/cd06fadcda0a0d8974727ee578c0bae16db60010", "message": "Reuse types from 'data-providers' module", "committedDate": "2020-09-22T20:43:17Z", "type": "forcePushed"}]}