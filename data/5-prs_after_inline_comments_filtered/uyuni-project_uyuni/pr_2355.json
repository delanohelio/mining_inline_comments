{"pr_number": 2355, "pr_title": "Improvements to Maintenance Windows frontend", "pr_createdAt": "2020-06-25T09:18:11Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2355", "timeline": [{"oid": "5bffa7fd9133220ac73d853a30c07e1c6a5d0dc3", "url": "https://github.com/uyuni-project/uyuni/commit/5bffa7fd9133220ac73d853a30c07e1c6a5d0dc3", "message": "Add loading indicator if calendar refresh in progress\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-26T09:20:45Z", "type": "forcePushed"}, {"oid": "75583fd0090a99c10b53da97ebd45f0805661a38", "url": "https://github.com/uyuni-project/uyuni/commit/75583fd0090a99c10b53da97ebd45f0805661a38", "message": "Add loading indicator if calendar refresh in progress\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-30T15:29:02Z", "type": "forcePushed"}, {"oid": "23583c70e7bd3551563b0a98949e9502420a2ff6", "url": "https://github.com/uyuni-project/uyuni/commit/23583c70e7bd3551563b0a98949e9502420a2ff6", "message": "Split edit component into schedule and calendar edit\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-03T09:32:02Z", "type": "forcePushed"}, {"oid": "dbd6ed9e41a752a391021ba6ddc28ae924f81064", "url": "https://github.com/uyuni-project/uyuni/commit/dbd6ed9e41a752a391021ba6ddc28ae924f81064", "message": "Refactor MaintenanceWindows to use react hooks\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-03T14:58:11Z", "type": "forcePushed"}, {"oid": "9df9d47ccaf0753e60d6a7d5d6f217e1573b1bcb", "url": "https://github.com/uyuni-project/uyuni/commit/9df9d47ccaf0753e60d6a7d5d6f217e1573b1bcb", "message": "Use schedule icon for maintence windows\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:32Z", "type": "commit"}, {"oid": "be1cd047f410cb16d1d8bd77c6f2de7b7059336c", "url": "https://github.com/uyuni-project/uyuni/commit/be1cd047f410cb16d1d8bd77c6f2de7b7059336c", "message": "Adapt Table component to skip rendering the header if none provided\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:32Z", "type": "commit"}, {"oid": "faf95bca825c622061fc6666a2e7f77d0da51ac5", "url": "https://github.com/uyuni-project/uyuni/commit/faf95bca825c622061fc6666a2e7f77d0da51ac5", "message": "Move MaintenanceController related code to its own package\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:33Z", "type": "commit"}, {"oid": "c69fbe33778b6fe34bcac2736fea8c8e5258066b", "url": "https://github.com/uyuni-project/uyuni/commit/c69fbe33778b6fe34bcac2736fea8c8e5258066b", "message": "Split MaintenanceController into multiple Controller classes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:34Z", "type": "commit"}, {"oid": "58f97ab5d4071234af728a44a7f7eec6c6a8a47a", "url": "https://github.com/uyuni-project/uyuni/commit/58f97ab5d4071234af728a44a7f7eec6c6a8a47a", "message": "Split MaintenanceWindowJson into multiple objects\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:34Z", "type": "commit"}, {"oid": "aefa1f2c96251f31160f2e9aa4709e7b8ce27715", "url": "https://github.com/uyuni-project/uyuni/commit/aefa1f2c96251f31160f2e9aa4709e7b8ce27715", "message": "Add loading indicator if calendar refresh in progress\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:34Z", "type": "commit"}, {"oid": "ed719a527c807f370abd810a2f89a4c5e2daf1c4", "url": "https://github.com/uyuni-project/uyuni/commit/ed719a527c807f370abd810a2f89a4c5e2daf1c4", "message": "Move handleRescheduleResult to the base controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:35Z", "type": "commit"}, {"oid": "b789bdfd826aabfb5ecf797b044158974d0dcd8f", "url": "https://github.com/uyuni-project/uyuni/commit/b789bdfd826aabfb5ecf797b044158974d0dcd8f", "message": "Split details component into schedule and calendar details\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:35Z", "type": "commit"}, {"oid": "00e7a971d8d610cf7e11df81cd79fb627b71cccd", "url": "https://github.com/uyuni-project/uyuni/commit/00e7a971d8d610cf7e11df81cd79fb627b71cccd", "message": "Split list component into schedule and calendar list\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:36Z", "type": "commit"}, {"oid": "e1671f89c4af27ba6a72215bfc64a2933067ff2d", "url": "https://github.com/uyuni-project/uyuni/commit/e1671f89c4af27ba6a72215bfc64a2933067ff2d", "message": "Split edit component into schedule and calendar edit\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:36Z", "type": "commit"}, {"oid": "8b1625476a69d8cc59cfd25befcf212fdcb1c4c5", "url": "https://github.com/uyuni-project/uyuni/commit/8b1625476a69d8cc59cfd25befcf212fdcb1c4c5", "message": "Move list, edit and details related code to their own directories\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:36Z", "type": "commit"}, {"oid": "dfd124184a2cf0b385cfa4916885e15eb10a3542", "url": "https://github.com/uyuni-project/uyuni/commit/dfd124184a2cf0b385cfa4916885e15eb10a3542", "message": "Move styling to susemanager-theme\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:37Z", "type": "commit"}, {"oid": "074cd26b2af04a12f4c6bb1e1b1fcc359e9162e0", "url": "https://github.com/uyuni-project/uyuni/commit/074cd26b2af04a12f4c6bb1e1b1fcc359e9162e0", "message": "Move api to api directory\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:38Z", "type": "commit"}, {"oid": "05101b6073b449eed9d93fd6c4389e28bf6a1213", "url": "https://github.com/uyuni-project/uyuni/commit/05101b6073b449eed9d93fd6c4389e28bf6a1213", "message": "Cleanup MaintenanceWindows component\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:38Z", "type": "commit"}, {"oid": "d39b4003700475a706547af6622fd1469b425809", "url": "https://github.com/uyuni-project/uyuni/commit/d39b4003700475a706547af6622fd1469b425809", "message": "Refactor MaintenanceWindows to use react hooks\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:40Z", "type": "commit"}, {"oid": "88b54ac6667901793c564b5fc34644f71c03f7ca", "url": "https://github.com/uyuni-project/uyuni/commit/88b54ac6667901793c564b5fc34644f71c03f7ca", "message": "Apply styling to uyuni\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:40Z", "type": "commit"}, {"oid": "88b54ac6667901793c564b5fc34644f71c03f7ca", "url": "https://github.com/uyuni-project/uyuni/commit/88b54ac6667901793c564b5fc34644f71c03f7ca", "message": "Apply styling to uyuni\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T07:37:40Z", "type": "forcePushed"}, {"oid": "43e72fa62e57c92a2a521ca95e3403c591650f56", "url": "https://github.com/uyuni-project/uyuni/commit/43e72fa62e57c92a2a521ca95e3403c591650f56", "message": "Add basic url validation to the webUI\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-07T09:36:33Z", "type": "commit"}, {"oid": "72c006132bf22ef9e6a708a08368ba1fe805f16f", "url": "https://github.com/uyuni-project/uyuni/commit/72c006132bf22ef9e6a708a08368ba1fe805f16f", "message": "Avoid n+1 queries when getting calendars", "committedDate": "2020-07-07T16:48:43Z", "type": "commit"}, {"oid": "cc4eab23ea62ae971b576420dddea70b78b7078d", "url": "https://github.com/uyuni-project/uyuni/commit/cc4eab23ea62ae971b576420dddea70b78b7078d", "message": "Use a POJO projection instead of a tuple in getting calendar assignments", "committedDate": "2020-07-07T16:49:11Z", "type": "commit"}, {"oid": "fa656ba07f164f827a5d8d7a7fd7e7d121b6566e", "url": "https://github.com/uyuni-project/uyuni/commit/fa656ba07f164f827a5d8d7a7fd7e7d121b6566e", "message": "Fix translation strings\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-08T09:27:27Z", "type": "commit"}, {"oid": "272f091ed36eaecc81370a0ac5cd3f121318d7f8", "url": "https://github.com/uyuni-project/uyuni/commit/272f091ed36eaecc81370a0ac5cd3f121318d7f8", "message": "Use model as a state\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-08T14:02:23Z", "type": "commit"}, {"oid": "3854fe00b67828c29a30a54cc55d8512b12afaac", "url": "https://github.com/uyuni-project/uyuni/commit/3854fe00b67828c29a30a54cc55d8512b12afaac", "message": "Add prop types to components\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-08T14:02:27Z", "type": "forcePushed"}, {"oid": "5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "url": "https://github.com/uyuni-project/uyuni/commit/5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "message": "Add prop types to components\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-08T14:04:03Z", "type": "commit"}, {"oid": "5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "url": "https://github.com/uyuni-project/uyuni/commit/5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "message": "Add prop types to components\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-08T14:04:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MDkzMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r450850933", "bodyText": "is this field used? Can it be removed?", "author": "hustodemon", "createdAt": "2020-07-07T13:09:43Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/MaintenanceCalendarJson.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.utils.gson;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JSON representation of the Maintenance Window scheduling\n+ */\n+public class MaintenanceCalendarJson {\n+\n+    /** schedule ID */\n+    private Long scheduleId;", "originalCommit": "58f97ab5d4071234af728a44a7f7eec6c6a8a47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MDU1Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452790556", "bodyText": "Actually you are right. it can be removed. After your rework to listCalendars we use the CalendarAssignment POJO to get the schedule id.\nGood catch \ud83d\udc4d", "author": "parlt91", "createdAt": "2020-07-10T11:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MDkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MTQ0Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r450851446", "bodyText": "maybe dropping the calendar prefixes would be nice here (the whole class deals with calendar, so why to repeat this information in the field names..)", "author": "hustodemon", "createdAt": "2020-07-07T13:10:29Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/MaintenanceCalendarJson.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.utils.gson;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JSON representation of the Maintenance Window scheduling\n+ */\n+public class MaintenanceCalendarJson {\n+\n+    /** schedule ID */\n+    private Long scheduleId;\n+\n+    /** calendar ID */\n+    private Long calendarId;", "originalCommit": "58f97ab5d4071234af728a44a7f7eec6c6a8a47a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NzI5OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452797299", "bodyText": "Since we can remove the scheduleId here the only param left that deals with schedues is `scheduleNames. I will have to adapt the names for the frontend as well, but I don't think it would cause any issues.", "author": "parlt91", "createdAt": "2020-07-10T11:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MTQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MTkzOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r450851939", "bodyText": "Similar here: would it be possible to omit the schedule prefix?", "author": "hustodemon", "createdAt": "2020-07-07T13:11:15Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/MaintenanceScheduleJson.java", "diffHunk": "@@ -20,7 +20,7 @@\n /**\n  * JSON representation of the Maintenance Window scheduling\n  */\n-public class MaintenanceWindowJson {\n+public class MaintenanceScheduleJson {\n \n     /** schedule ID */\n     private Long scheduleId;", "originalCommit": "58f97ab5d4071234af728a44a7f7eec6c6a8a47a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NzMzOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452767338", "bodyText": "Nit: This could be done easier with list() instead of stream + collect. I didn't notice that before. I'll push a patch, if github allows me to do so.", "author": "hustodemon", "createdAt": "2020-07-10T10:41:53Z", "path": "java/code/src/com/suse/manager/model/maintenance/CalendarFactory.java", "diffHunk": "@@ -99,6 +100,28 @@ public void remove(MaintenanceCalendar calendar) {\n                 .setParameter(\"id\", id).uniqueResultOptional();\n     }\n \n+    /**\n+     * Returns tuples representing calendar id, calendar label, and name of schedule assigned to the calendar.\n+     * For calendars assigned to multiple schedules there will be one item for each such assignment in the result.\n+     *\n+     * @param user the user\n+     * @return the tuples representing the assignments of calendar to schedules\n+     */\n+    public List<CalendarAssignment> listCalendarToSchedulesAssignments(User user) {\n+        return getSession()\n+                .createQuery(\n+                        \"SELECT new com.suse.manager.model.maintenance.CalendarAssignment\" +\n+                                \"(calendar.id, calendar.label, schedule.id, schedule.name) \" +\n+                                \"FROM MaintenanceCalendar calendar \" +\n+                                \"LEFT JOIN MaintenanceSchedule schedule \" +\n+                                \"ON schedule.calendar = calendar \" +\n+                                \"WHERE calendar.org = :org\",\n+                        CalendarAssignment.class)\n+                .setParameter(\"org\", user.getOrg())\n+                .stream()", "originalCommit": "5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MDI3OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452770278", "bodyText": "Suggestion: Maybe I would vote for moving these to the Router class, so that we don't have a cyclical dependency between the general MaintetanceController and the specific MaintenanceCalendar/ScheduleController. I don't think this is a big issue - these classes are still quite a lot \"together\" - they are in the same package, but in general this phenomenon (classes using one another) should be minimized.", "author": "hustodemon", "createdAt": "2020-07-10T10:48:59Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers.maintenance;\n+\n+import static com.suse.manager.maintenance.rescheduling.RescheduleStrategyType.CANCEL;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.action.ActionFactory;\n+import com.redhat.rhn.domain.action.ActionType;\n+import com.redhat.rhn.domain.user.User;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.rescheduling.RescheduleResult;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategyType;\n+import com.suse.manager.reactor.utils.LocalDateTimeISOAdapter;\n+import com.suse.manager.reactor.utils.OptionalTypeAdapterFactory;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+\n+import org.apache.http.HttpStatus;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final MaintenanceManager MM = new MaintenanceManager();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+    private static final Gson GSON = new GsonBuilder()\n+            .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeISOAdapter())\n+            .registerTypeAdapterFactory(new OptionalTypeAdapterFactory())\n+            .serializeNulls()\n+            .create();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for MaintenanceWindow Api.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        // upcoming maintenance windows for systems\n+        post(\"/manager/api/maintenance/upcoming-windows\",\n+                withUser(MaintenanceController::getUpcomingMaintenanceWindows));\n+\n+        // Init routes for MaintenanceSchedule API\n+        MaintenanceScheduleController.initRoutes(jade);\n+        // Init routes for MaintenanceCalendar API\n+        MaintenanceCalendarController.initRoutes(jade);", "originalCommit": "5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0NzY1Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452847656", "bodyText": "I get the thing with the cyclic dependency. I would prefer the way it is right now. But I guess your argument is the better one and I can't come up with another one except of keeping the Router less crowded. So I will move these to the Router.", "author": "parlt91", "createdAt": "2020-07-10T13:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MDI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MTYzMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452771632", "bodyText": "Small nitpick: not a big deal, but this could be done, so that the modifier is \"default\", which is even a bit more restrictive than protected. With the \"default\" one, only classes from the same package can use that method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static void handleRescheduleResult(List<RescheduleResult> results, RescheduleStrategyType strategy) {\n          \n          \n            \n                static void handleRescheduleResult(List<RescheduleResult> results, RescheduleStrategyType strategy) {", "author": "hustodemon", "createdAt": "2020-07-10T10:51:51Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers.maintenance;\n+\n+import static com.suse.manager.maintenance.rescheduling.RescheduleStrategyType.CANCEL;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.action.ActionFactory;\n+import com.redhat.rhn.domain.action.ActionType;\n+import com.redhat.rhn.domain.user.User;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.rescheduling.RescheduleResult;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategyType;\n+import com.suse.manager.reactor.utils.LocalDateTimeISOAdapter;\n+import com.suse.manager.reactor.utils.OptionalTypeAdapterFactory;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+\n+import org.apache.http.HttpStatus;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final MaintenanceManager MM = new MaintenanceManager();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+    private static final Gson GSON = new GsonBuilder()\n+            .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeISOAdapter())\n+            .registerTypeAdapterFactory(new OptionalTypeAdapterFactory())\n+            .serializeNulls()\n+            .create();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for MaintenanceWindow Api.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        // upcoming maintenance windows for systems\n+        post(\"/manager/api/maintenance/upcoming-windows\",\n+                withUser(MaintenanceController::getUpcomingMaintenanceWindows));\n+\n+        // Init routes for MaintenanceSchedule API\n+        MaintenanceScheduleController.initRoutes(jade);\n+        // Init routes for MaintenanceCalendar API\n+        MaintenanceCalendarController.initRoutes(jade);\n+    }\n+\n+    /**\n+     * Get all the maintenance windows for the system ids selected\n+     *\n+     * @param req the request\n+     * @param res the response\n+     * @param user the current user\n+     * @return the json response\n+     */\n+    public static String getUpcomingMaintenanceWindows(Request req, Response res, User user) {\n+        MaintenanceWindowsParams map = GSON.fromJson(req.body(), MaintenanceWindowsParams.class);\n+\n+        Set<Long> systemIds = new HashSet<>(map.getSystemIds());\n+\n+        String actionTypeLabel = map.getActionType();\n+        ActionType actionType = ActionFactory.lookupActionTypeByLabel(actionTypeLabel);\n+\n+        Map<String, Object> data = new HashMap<>();\n+\n+        if (actionType.isMaintenancemodeOnly()) {\n+            try {\n+                MM\n+                        .calculateUpcomingMaintenanceWindows(systemIds)\n+                        .ifPresent(windows -> data.put(\"maintenanceWindows\", windows));\n+            }\n+            catch (IllegalStateException e) {\n+                data.put(\"maintenanceWindowsMultiSchedules\", true);\n+            }\n+        }\n+\n+        res.type(\"application/json\");\n+        return json(res, ResultJson.success(data));\n+    }\n+\n+    protected static void handleRescheduleResult(List<RescheduleResult> results, RescheduleStrategyType strategy) {", "originalCommit": "5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3NjI4MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452776281", "bodyText": "Suggestion: one of the advantages of having separated controllers for Schedule and Calendar is, that we could omit the \"smurf\" words (point 21 in https://blog.codinghorror.com/new-programming-jargon/). So we could simplify the methods to list, getDetails/details, save, delete. Same for the MaintCalendarController.", "author": "hustodemon", "createdAt": "2020-07-10T11:03:18Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers.maintenance;\n+\n+import static com.suse.manager.webui.controllers.maintenance.MaintenanceController.handleRescheduleResult;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.IcalUtils;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.rescheduling.RescheduleResult;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategy;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategyType;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.reactor.utils.LocalDateTimeISOAdapter;\n+import com.suse.manager.reactor.utils.OptionalTypeAdapterFactory;\n+import com.suse.manager.webui.utils.gson.MaintenanceScheduleJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance schedules.\n+ */\n+public class MaintenanceScheduleController {\n+\n+    private static IcalUtils icalUtils = new IcalUtils();\n+    private static final MaintenanceManager MM = new MaintenanceManager();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+    private static final Gson GSON = new GsonBuilder()\n+            .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeISOAdapter())\n+            .registerTypeAdapterFactory(new OptionalTypeAdapterFactory())\n+            .serializeNulls()\n+            .create();\n+\n+    private MaintenanceScheduleController() { }\n+\n+    /**\n+     * Initialize routes for MaintenanceSchedule Api.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceScheduleController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\",\n+                withUser(MaintenanceScheduleController::listSchedules));", "originalCommit": "5f15fc3f1addf3fd1a2d8f8ff14801dc35611364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5ODIwMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r452798200", "bodyText": "Right I didn't think about those names after spitting the Controllers, but this makes total sense. Consider it done ;)", "author": "parlt91", "createdAt": "2020-07-10T11:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3NjI4MQ=="}], "type": "inlineReview"}, {"oid": "5238f4849f7f5539508cb8b30e68273fd67f8746", "url": "https://github.com/uyuni-project/uyuni/commit/5238f4849f7f5539508cb8b30e68273fd67f8746", "message": "Minor: Create list of calendar assignments directly, remove useless comment", "committedDate": "2020-07-10T13:40:34Z", "type": "commit"}, {"oid": "d638d52068ae33882b7d0d6badcbb7a8d14849b4", "url": "https://github.com/uyuni-project/uyuni/commit/d638d52068ae33882b7d0d6badcbb7a8d14849b4", "message": "Omit schedule/calendar prefixes in names where possible\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-10T13:40:42Z", "type": "commit"}, {"oid": "8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "url": "https://github.com/uyuni-project/uyuni/commit/8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "message": "Move route initiation of schedule/calendar controller to the Router\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-10T13:40:42Z", "type": "commit"}, {"oid": "8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "url": "https://github.com/uyuni-project/uyuni/commit/8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "message": "Move route initiation of schedule/calendar controller to the Router\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-10T13:40:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NjY3Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r454396676", "bodyText": "Can't we keep all the following routes lines into single ones each?", "author": "ncounter", "createdAt": "2020-07-14T14:26:28Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceCalendarController.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers.maintenance;\n+\n+import static com.suse.manager.maintenance.rescheduling.RescheduleStrategyType.CANCEL;\n+import static com.suse.manager.webui.controllers.maintenance.MaintenanceController.handleRescheduleResult;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.rescheduling.RescheduleResult;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategy;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategyType;\n+import com.suse.manager.model.maintenance.CalendarAssignment;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.reactor.utils.LocalDateTimeISOAdapter;\n+import com.suse.manager.reactor.utils.OptionalTypeAdapterFactory;\n+import com.suse.manager.webui.utils.gson.MaintenanceCalendarJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.http.HttpStatus;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance calendars.\n+ */\n+public class MaintenanceCalendarController {\n+\n+    private static final MaintenanceManager MM = new MaintenanceManager();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+    private static final Gson GSON = new GsonBuilder()\n+            .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeISOAdapter())\n+            .registerTypeAdapterFactory(new OptionalTypeAdapterFactory())\n+            .serializeNulls()\n+            .create();\n+\n+    private MaintenanceCalendarController() { }\n+\n+    /**\n+     * Initialize routes for MaintenanceCalendar Api.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceCalendarController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/calendar/list\",", "originalCommit": "8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMTUzOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r455131539", "bodyText": "We actually can now that I shortened the names by removing calendar/schedule. Good point", "author": "parlt91", "createdAt": "2020-07-15T15:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NjY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNDkyNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r454404927", "bodyText": "What a weird indentation/spaces!", "author": "ncounter", "createdAt": "2020-07-14T14:37:00Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers.maintenance;\n+\n+import static com.suse.manager.maintenance.rescheduling.RescheduleStrategyType.CANCEL;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.action.ActionFactory;\n+import com.redhat.rhn.domain.action.ActionType;\n+import com.redhat.rhn.domain.user.User;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.rescheduling.RescheduleResult;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategyType;\n+import com.suse.manager.reactor.utils.LocalDateTimeISOAdapter;\n+import com.suse.manager.reactor.utils.OptionalTypeAdapterFactory;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final MaintenanceManager MM = new MaintenanceManager();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+    private static final Gson GSON = new GsonBuilder()\n+            .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeISOAdapter())\n+            .registerTypeAdapterFactory(new OptionalTypeAdapterFactory())\n+            .serializeNulls()\n+            .create();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for MaintenanceWindow Api.\n+     */\n+    public static void initRoutes() {\n+        // upcoming maintenance windows for systems\n+        post(\"/manager/api/maintenance/upcoming-windows\",\n+                withUser(MaintenanceController::getUpcomingMaintenanceWindows));\n+    }\n+\n+    /**\n+     * Get all the maintenance windows for the system ids selected\n+     *\n+     * @param req the request\n+     * @param res the response\n+     * @param user the current user\n+     * @return the json response\n+     */\n+    public static String getUpcomingMaintenanceWindows(Request req, Response res, User user) {\n+        MaintenanceWindowsParams map = GSON.fromJson(req.body(), MaintenanceWindowsParams.class);\n+\n+        Set<Long> systemIds = new HashSet<>(map.getSystemIds());\n+\n+        String actionTypeLabel = map.getActionType();\n+        ActionType actionType = ActionFactory.lookupActionTypeByLabel(actionTypeLabel);\n+\n+        Map<String, Object> data = new HashMap<>();\n+\n+        if (actionType.isMaintenancemodeOnly()) {\n+            try {\n+                MM", "originalCommit": "8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMTc1OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r455131759", "bodyText": "Indeed :)", "author": "parlt91", "createdAt": "2020-07-15T15:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNDkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNjA5NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2355#discussion_r454406094", "bodyText": "One line only?", "author": "ncounter", "createdAt": "2020-07-14T14:38:34Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers.maintenance;\n+\n+import static com.suse.manager.webui.controllers.maintenance.MaintenanceController.handleRescheduleResult;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.IcalUtils;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.rescheduling.RescheduleResult;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategy;\n+import com.suse.manager.maintenance.rescheduling.RescheduleStrategyType;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.reactor.utils.LocalDateTimeISOAdapter;\n+import com.suse.manager.reactor.utils.OptionalTypeAdapterFactory;\n+import com.suse.manager.webui.utils.gson.MaintenanceScheduleJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance schedules.\n+ */\n+public class MaintenanceScheduleController {\n+\n+    private static IcalUtils icalUtils = new IcalUtils();\n+    private static final MaintenanceManager MM = new MaintenanceManager();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+    private static final Gson GSON = new GsonBuilder()\n+            .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeISOAdapter())\n+            .registerTypeAdapterFactory(new OptionalTypeAdapterFactory())\n+            .serializeNulls()\n+            .create();\n+\n+    private MaintenanceScheduleController() { }\n+\n+    /**\n+     * Initialize routes for MaintenanceSchedule Api.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceScheduleController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\",", "originalCommit": "8bc69300c9d6d9f0ddfbf3e9b422b8f16d9c542a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "128ebd45337c1b41adb73f39c6a90d3271d0609e", "url": "https://github.com/uyuni-project/uyuni/commit/128ebd45337c1b41adb73f39c6a90d3271d0609e", "message": "Make translation strings static, update code formating\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-15T15:09:51Z", "type": "commit"}, {"oid": "9f95c9141bc85ff491855764981263eea2a662c9", "url": "https://github.com/uyuni-project/uyuni/commit/9f95c9141bc85ff491855764981263eea2a662c9", "message": "Add suggested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-15T15:04:44Z", "type": "forcePushed"}, {"oid": "0e8dd02beb77f3bb4ff8557f71d264074661fb7e", "url": "https://github.com/uyuni-project/uyuni/commit/0e8dd02beb77f3bb4ff8557f71d264074661fb7e", "message": "Add suggested fixes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-15T15:08:11Z", "type": "forcePushed"}, {"oid": "128ebd45337c1b41adb73f39c6a90d3271d0609e", "url": "https://github.com/uyuni-project/uyuni/commit/128ebd45337c1b41adb73f39c6a90d3271d0609e", "message": "Make translation strings static, update code formating\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-07-15T15:09:51Z", "type": "forcePushed"}]}