{"pr_number": 2987, "pr_title": "Add API call to get all formula data", "pr_createdAt": "2020-12-08T12:25:59Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2987", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExMzA0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r539113045", "bodyText": "Would it make sense to pass a flag to this method to optionally get only the monitoring formulas?", "author": "cavalheiro", "createdAt": "2020-12-09T08:43:17Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -348,6 +348,15 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n                 .collect(Collectors.toList());\n     }\n \n+    public List<Map<String, FormulaData>> getCombinedFormulaDataForSystems(User user, List<Integer> systemIDs) {", "originalCommit": "84e519de8625eda1587e24d54e005248bda47d7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMjUxMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r539432511", "bodyText": "I also don't like the fact that we dump a lot of not needed and possibly sensitive data. In the second commit I've proposed an alternative new API method to get only relevant information about endpoints.", "author": "witekest", "createdAt": "2020-12-09T16:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExMzA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNTg3MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r539115870", "bodyText": "Is this call expected to perform well on large setups?", "author": "cavalheiro", "createdAt": "2020-12-09T08:47:34Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -348,6 +348,15 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n                 .collect(Collectors.toList());\n     }\n \n+    public List<Map<String, FormulaData>> getCombinedFormulaDataForSystems(User user, List<Integer> systemIDs) {\n+        return systemIDs.stream()\n+                .map(Integer::longValue)\n+                .map(sID -> FormulaFactory.getCombinedFormulasByServerId(sID).stream()\n+                .collect(Collectors.toMap(formula -> formula,\n+                        formula -> getCombinedFormulaDataForSystems(user, List.of(sID), formula).get(0))))", "originalCommit": "84e519de8625eda1587e24d54e005248bda47d7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzNDQzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r539434436", "bodyText": "I haven't measured performance but taking into account that all the information is available locally on the disk it should not be a problem.", "author": "witekest", "createdAt": "2020-12-09T16:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExNTg3MA=="}], "type": "inlineReview"}, {"oid": "bd85e0802d0b584e2fffd1811ed392f725774140", "url": "https://github.com/uyuni-project/uyuni/commit/bd85e0802d0b584e2fffd1811ed392f725774140", "message": "Move 'listEndpoints' API call to 'formula' namespace", "committedDate": "2021-01-08T09:39:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU1NDIyMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r559554221", "bodyText": "This doesn't seem to be used anymore, should also appear in the checkstyle results.", "author": "renner", "createdAt": "2021-01-18T13:06:56Z", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/SystemHandler.java", "diffHunk": "@@ -169,6 +170,7 @@\n \n import com.suse.manager.webui.utils.gson.BootstrapParameters;\n \n+import org.apache.commons.lang3.NotImplementedException;", "originalCommit": "832ccd68596027c13af84eecac7cc32141c37de8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU1NTQyNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r559555424", "bodyText": "This change doesn't seem to be needed as it only breaks the line earlier?", "author": "renner", "createdAt": "2021-01-18T13:08:51Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -344,13 +345,13 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n         Map<Long, Map<String, Object>> groupsFormulaData = getGroupsFormulaData(groupIDs, formulaName);\n \n         return minionIDs.stream().map(mID -> getCombinedFormulaDataForSystem(mID,\n-                Optional.ofNullable(managedGroupsPerServer.get(mID.getServerId())), groupsFormulaData, formulaName))\n-                .collect(Collectors.toList());\n+                Optional.ofNullable(managedGroupsPerServer.get(mID.getServerId())), groupsFormulaData,\n+                formulaName)).collect(Collectors.toList());", "originalCommit": "832ccd68596027c13af84eecac7cc32141c37de8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU1NjE5OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r559556198", "bodyText": "This change doesn't seem to be needed, or is there a reason for adding more indentation?", "author": "renner", "createdAt": "2021-01-18T13:10:15Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -344,13 +345,13 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n         Map<Long, Map<String, Object>> groupsFormulaData = getGroupsFormulaData(groupIDs, formulaName);\n \n         return minionIDs.stream().map(mID -> getCombinedFormulaDataForSystem(mID,\n-                Optional.ofNullable(managedGroupsPerServer.get(mID.getServerId())), groupsFormulaData, formulaName))\n-                .collect(Collectors.toList());\n+                Optional.ofNullable(managedGroupsPerServer.get(mID.getServerId())), groupsFormulaData,\n+                formulaName)).collect(Collectors.toList());\n     }\n \n     private FormulaData getCombinedFormulaDataForSystem(MinionIds minionID,\n-            Optional<List<SystemGroupID>> managedSystemGroups, Map<Long, Map<String, Object>> groupsFormulaData,\n-            String formulaName) {\n+                Optional<List<SystemGroupID>> managedSystemGroups, Map<Long, Map<String, Object>> groupsFormulaData,\n+                String formulaName) {", "originalCommit": "832ccd68596027c13af84eecac7cc32141c37de8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU1NzM5Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r559557392", "bodyText": "This class is still missing the copyright header.", "author": "renner", "createdAt": "2021-01-18T13:12:33Z", "path": "java/code/src/com/redhat/rhn/domain/formula/ExporterConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.redhat.rhn.domain.formula;", "originalCommit": "832ccd68596027c13af84eecac7cc32141c37de8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU1NzYyMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r559557622", "bodyText": "This should be changed to 2021 by now.", "author": "renner", "createdAt": "2021-01-18T13:13:03Z", "path": "java/code/src/com/redhat/rhn/domain/dto/EndpointInfo.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+  Copyright (c) 2020 SUSE LLC", "originalCommit": "832ccd68596027c13af84eecac7cc32141c37de8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4MTM1OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r572881359", "bodyText": "Did you try this endpoint (eg. from a Python script)?\nI was under the impression that in order to return a custom type one really had to add a custom Serializer class (see for example com.redhat.rhn.frontend.xmlrpc.serializer.SystemOverviewSerializer).\nIf that is wrong then I'll be happy to learn that plain beans are also completely OK to return!", "author": "moio", "createdAt": "2021-02-09T13:26:39Z", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/monitoring/SystemMonitoringHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ *\n+ * Copyright (c) 2021 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.system.monitoring;\n+\n+import com.redhat.rhn.domain.dto.EndpointInfo;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.manager.formula.FormulaManager;\n+\n+import java.util.List;\n+\n+/**\n+ * ServerMonitoringHandler\n+ * @xmlrpc.namespace system.monitoring\n+ * @xmlrpc.doc Provides methods to access information about managed systems, applications and formulas which can be\n+ * relevant for Prometheus monitoring\n+ */\n+public class SystemMonitoringHandler extends BaseHandler {\n+\n+    private final FormulaManager formulaManager;\n+\n+    /**\n+     * Instantiates a new system handler for system.monitoring namespace\n+     * @param formulaManagerIn instance of formula manager object\n+     */\n+    public SystemMonitoringHandler(FormulaManager formulaManagerIn) {\n+        this.formulaManager = formulaManagerIn;\n+    }\n+\n+    /**\n+     * Get the endpoint details for all Prometheus exporters installed on the systems whose IDs match\n+     * with the passed systems IDs and all of the groups those systems are member of.\n+     *\n+     * @param loggedInUser The current user\n+     * @param systemIDs The system IDs\n+     * @return a list containing endpoint details for all Prometheus exporters on the passed system IDs.\n+     *\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #array_single(\"int\", \"systemID\")\n+     * @xmlrpc.returntype\n+     *   #array_begin()\n+     *     $EndpointInfo\n+     *   #array_end()\n+     */\n+    public List<EndpointInfo> listEndpoints(User loggedInUser, List<Long> systemIDs) {", "originalCommit": "3793dc53469d40fbc65d17e20e22286f93f03ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTA4MjQxOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r595082419", "bodyText": "Good point. I've added custom serializer.", "author": "witekest", "createdAt": "2021-03-16T11:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4MTM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4Mjg5MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r572882891", "bodyText": "What if an endpoint is an application endpoint, ie. it does not originate from an exporter? Would the name be null in that case?", "author": "moio", "createdAt": "2021-02-09T13:28:41Z", "path": "java/code/src/com/redhat/rhn/domain/dto/EndpointInfo.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *\n+ * Copyright (c) 2021 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.dto;\n+\n+/**\n+ * Class for representing the endpoint information of applications or Prometheus exporters of a minion system\n+ */\n+public class EndpointInfo {\n+\n+    private Long systemID;\n+    private String endpointName;\n+    private Integer port;\n+    private String path;\n+    private String module;\n+    private String exporterName;\n+\n+    /**\n+     * Instantiates a new endpoint information\n+     * @param systemIDIn server ID\n+     * @param endpointNameIn endpoint name\n+     */\n+    public EndpointInfo(Long systemIDIn, String endpointNameIn) {\n+        this.systemID = systemIDIn;\n+        this.endpointName = endpointNameIn;\n+    }\n+\n+    public Long getSystemID() {\n+        return systemID;\n+    }\n+\n+    public String getEndpointName() {\n+        return endpointName;\n+    }\n+\n+    public Integer getPort() {\n+        return port;\n+    }\n+\n+    public void setPort(Integer portIn) {\n+        this.port = portIn;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(String pathIn) {\n+        this.path = pathIn;\n+    }\n+\n+    public String getModule() {\n+        return module;\n+    }\n+\n+    public void setModule(String moduleIn) {\n+        this.module = moduleIn;\n+    }\n+\n+    public String getExporterName() {\n+        return exporterName;", "originalCommit": "3793dc53469d40fbc65d17e20e22286f93f03ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTczNzc1Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r669737753", "bodyText": "Yes, it will be null in that case.", "author": "witekest", "createdAt": "2021-07-14T15:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4Mjg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkyNjg1NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672926855", "bodyText": "I understand that we would only return monitoring endpoints in the meantime.", "author": "renner", "createdAt": "2021-07-20T08:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4Mjg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk3NTEzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672975136", "bodyText": "@renner, do you mean only exporters'?\nIf so, I am fine with this. Otherwise, I might suggest wrapping this String into an Optional for added clarity.", "author": "moio", "createdAt": "2021-07-20T09:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4Mjg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4ODUwNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r678888506", "bodyText": "I plan to add general application endpoints as well. Wrapping into Optional here.", "author": "witekest", "createdAt": "2021-07-29T07:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4Mjg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg4MzkwOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r572883908", "bodyText": "I would remove this method as of today, and add it only when we will actually support application endpoints.", "author": "moio", "createdAt": "2021-02-09T13:30:06Z", "path": "java/code/src/com/redhat/rhn/domain/formula/FormulaFactory.java", "diffHunk": "@@ -1107,4 +1109,75 @@ public static String getClusterPillarDir() {\n         return dataDir + PILLAR_DIR;\n     }\n \n+    /**\n+     * Find endpoint information from given formula data\n+     * @param formulaName name of the formula to examine\n+     * @param formulaData formula data to extract information from\n+     * @return list of endpoint information objects\n+     */\n+    public static List<EndpointInfo> getEndpointsFromFormulaData(String formulaName, FormulaData formulaData) {\n+        List<EndpointInfo> endpointInfos = new ArrayList<>();\n+        endpointInfos.addAll(getExportersEndpoints(formulaData));\n+        endpointInfos.addAll(getApplicationEndpoints(formulaName, formulaData));\n+        return endpointInfos;\n+    }\n+\n+    private static List<EndpointInfo> getApplicationEndpoints(String formulaName, FormulaData formulaData) {\n+        // TODO\n+        return Collections.emptyList();\n+    }", "originalCommit": "3793dc53469d40fbc65d17e20e22286f93f03ec5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg5MTIyMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r572891222", "bodyText": "It would be cool if this algorithm could be refactored with streams, so that EndpointInfo could be turned into a read-only-after-construction class.\nIn general, we prefer creating collections via streams rather than modifying methods such as put, add and so on. Would that be possible here?", "author": "moio", "createdAt": "2021-02-09T13:40:35Z", "path": "java/code/src/com/redhat/rhn/domain/formula/FormulaFactory.java", "diffHunk": "@@ -1107,4 +1109,75 @@ public static String getClusterPillarDir() {\n         return dataDir + PILLAR_DIR;\n     }\n \n+    /**\n+     * Find endpoint information from given formula data\n+     * @param formulaName name of the formula to examine\n+     * @param formulaData formula data to extract information from\n+     * @return list of endpoint information objects\n+     */\n+    public static List<EndpointInfo> getEndpointsFromFormulaData(String formulaName, FormulaData formulaData) {\n+        List<EndpointInfo> endpointInfos = new ArrayList<>();\n+        endpointInfos.addAll(getExportersEndpoints(formulaData));\n+        endpointInfos.addAll(getApplicationEndpoints(formulaName, formulaData));\n+        return endpointInfos;\n+    }\n+\n+    private static List<EndpointInfo> getApplicationEndpoints(String formulaName, FormulaData formulaData) {\n+        // TODO\n+        return Collections.emptyList();\n+    }\n+\n+    private static List<EndpointInfo> getExportersEndpoints(FormulaData formulaData) {\n+        List<EndpointInfo> endpointInfos = new ArrayList<>();\n+        Map<String, Object> formulaValues = formulaData.getFormulaValues();\n+        if (formulaValues.containsKey(\"exporters\")) {\n+            Optional<Boolean> proxyEnabled = getValueByPath(formulaValues, \"proxy_enabled\")\n+                    .filter(Boolean.class::isInstance)\n+                    .map(Boolean.class::cast);\n+            Optional<Integer> proxyPort = Optional.empty();\n+            if (proxyEnabled.isPresent() && proxyEnabled.get()) {\n+                proxyPort = getValueByPath(formulaValues, \"proxy_port\")\n+                        .filter(Number.class::isInstance)\n+                        .map(Number.class::cast)\n+                        .map(Number::intValue);\n+            }\n+\n+            Map<String, Object> exportersMap = getValueByPath(formulaValues, \"exporters\")\n+                    .filter(Map.class::isInstance)\n+                    .map(Map.class::cast).get();\n+\n+            for (Map.Entry<String, Object> exporterEntry : exportersMap.entrySet()) {\n+                Map<String, Object> exporterConfigMap = Optional.ofNullable(exporterEntry.getValue())\n+                        .filter(Map.class::isInstance)\n+                        .map(Map.class::cast).get();\n+                Boolean exporterEnabled = Optional.ofNullable(exporterConfigMap.getOrDefault(\"enabled\", false))\n+                        .filter(Boolean.class::isInstance)\n+                        .map(Boolean.class::cast).get();\n+                if (exporterEnabled) {\n+                    ExporterConfig exporterConfig = new ExporterConfig(\n+                            exporterEntry.getKey(),\n+                            Optional.ofNullable(exporterConfigMap.getOrDefault(\"address\", null))\n+                                    .filter(String.class::isInstance).map(String.class::cast).get(),\n+                            Optional.ofNullable(exporterConfigMap.getOrDefault(\"args\", null))\n+                                    .filter(String.class::isInstance).map(String.class::cast).get());\n+                    EndpointInfo endpointInfo = new EndpointInfo(\n+                            formulaData.getSystemID(),\n+                            Optional.ofNullable(exporterConfigMap.getOrDefault(\"name\", exporterConfig.getName()))\n+                                    .filter(String.class::isInstance).map(String.class::cast).get());\n+                    endpointInfo.setExporterName(endpointInfo.getEndpointName());\n+                    endpointInfo.setPort(proxyPort.orElse(exporterConfig.getPort()));\n+                    if (proxyEnabled.isPresent() && proxyEnabled.get()) {\n+                        endpointInfo.setModule(Optional.ofNullable(\n+                                exporterConfigMap.getOrDefault(\"proxy_module\", endpointInfo.getEndpointName()))\n+                                .filter(String.class::isInstance).map(String.class::cast).get());\n+                        endpointInfo.setPath(\"/proxy\");\n+                    }\n+\n+                    endpointInfos.add(endpointInfo);", "originalCommit": "3793dc53469d40fbc65d17e20e22286f93f03ec5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bfdaba2e5a4fd41a666f17437e4eb1292e21243", "url": "https://github.com/uyuni-project/uyuni/commit/3bfdaba2e5a4fd41a666f17437e4eb1292e21243", "message": "Add EndpointInfoSerializer", "committedDate": "2021-03-16T11:27:34Z", "type": "forcePushed"}, {"oid": "4b75ea8c6356336492e1e98f7bf7585d0af21062", "url": "https://github.com/uyuni-project/uyuni/commit/4b75ea8c6356336492e1e98f7bf7585d0af21062", "message": "Add TLS support and use streams", "committedDate": "2021-07-14T15:44:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkwMjkzNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672902934", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * ServerMonitoringHandler\n          \n          \n            \n             * SystemMonitoringHandler\n          \n      \n    \n    \n  \n\nThis comment does not match the actual class name.", "author": "renner", "createdAt": "2021-07-20T08:09:22Z", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/monitoring/SystemMonitoringHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.system.monitoring;\n+\n+import com.redhat.rhn.domain.dto.EndpointInfo;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.manager.formula.FormulaManager;\n+\n+import java.util.List;\n+\n+/**\n+ * ServerMonitoringHandler", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxMDE0NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672910144", "bodyText": "This change seems unrelated to the patch and could probably be omitted (= 1 file less that is changed).", "author": "renner", "createdAt": "2021-07-20T08:19:37Z", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/SystemHandler.java", "diffHunk": "@@ -7787,5 +7787,4 @@ public TaskomaticApi getTaskomaticApi() {\n     private static List<String> maybeActivationKeys(String activationKey) {\n         return StringUtils.isEmpty(activationKey) ? Collections.emptyList() : List.of(activationKey);\n     }\n-", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTkwNzAwNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r681907007", "bodyText": "Reset to the original version.", "author": "witekest", "createdAt": "2021-08-03T16:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxMDE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxNDg2OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672914869", "bodyText": "At least for this method it would be great to implement some unit tests.", "author": "renner", "createdAt": "2021-07-20T08:26:06Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -381,6 +408,32 @@ private FormulaData getCombinedFormulaDataForSystem(MinionIds minionID,\n     public Optional<Map<String, Object>> getClusterFormulaData(Cluster cluster, String formulaKey) {\n         Optional<String> formulaName = FormulaFactory.getClusterProviderFormulaName(cluster.getProvider(), formulaKey);\n         return formulaName\n-                .flatMap(name -> getGroupFormulaValuesByNameAndGroupId(name, cluster.getGroup().getId()));\n+                .flatMap(name -> FormulaFactory.getGroupFormulaValuesByNameAndGroupId(name,\n+                        cluster.getGroup().getId()));\n+    }\n+\n+    /**\n+     * Gets all endpoints details for given systems\n+     * @param systemIDs list of system IDs\n+     * @return list of endpoint information objects\n+     */\n+    public List<EndpointInfo> listEndpoints(List<Long> systemIDs) {", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTIwNTIwNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r679205204", "bodyText": "Done.", "author": "witekest", "createdAt": "2021-07-29T14:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxNDg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxNzc5OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672917799", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * Copyright (c) 2021 SUSE LLC\n          \n          \n            \n             *\n          \n      \n    \n    \n  \n\nThe copyright header is missing for all new classes in this patch, wouldn't checkstyle usually remind us about that?", "author": "renner", "createdAt": "2021-07-20T08:30:11Z", "path": "java/code/src/com/redhat/rhn/domain/dto/EndpointInfo.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ *", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODA0MDQwNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r678040406", "bodyText": "The opposite is the case. Stylecheck complains about the copyright line.", "author": "witekest", "createdAt": "2021-07-28T07:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxNzc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzI4MTYyNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r683281624", "bodyText": "Please add the copyright line everywhere. without it we cannot let this pass. When the checkstyle failed, we need to check why. But it is not an option to remove it.", "author": "mcalmer", "createdAt": "2021-08-05T09:20:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxNzc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzMzODk3OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r683338979", "bodyText": "Done", "author": "witekest", "createdAt": "2021-08-05T10:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkxNzc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkyMDg0MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672920841", "bodyText": "Not sure how big is the risk here, but could calling get() result in a NPE here (or on the previous assignment)?", "author": "renner", "createdAt": "2021-07-20T08:34:25Z", "path": "java/code/src/com/redhat/rhn/domain/formula/FormulaFactory.java", "diffHunk": "@@ -1108,4 +1109,54 @@ public static String getClusterPillarDir() {\n         return dataDir + PILLAR_DIR;\n     }\n \n+    /**\n+     * Find endpoint information from given formula data\n+     * @param formulaName name of the formula to examine\n+     * @param formulaData formula data to extract information from\n+     * @return list of endpoint information objects\n+     */\n+    public static List<EndpointInfo> getEndpointsFromFormulaData(String formulaName, FormulaData formulaData) {\n+        return getExportersEndpoints(formulaData);\n+    }\n+\n+    private static List<EndpointInfo> getExportersEndpoints(FormulaData formulaData) {\n+        Map<String, Object> formulaValues = formulaData.getFormulaValues();\n+        if (formulaValues.containsKey(\"exporters\")) {\n+            Boolean proxyEnabled = getValueByPath(formulaValues, \"proxy_enabled\")\n+                    .filter(Boolean.class::isInstance)\n+                    .map(Boolean.class::cast)\n+                    .orElse(false);\n+            Optional<Integer> proxyPort = proxyEnabled ? getValueByPath(formulaValues, \"proxy_port\")\n+                    .filter(Number.class::isInstance)\n+                    .map(Number.class::cast)\n+                    .map(Number::intValue) : Optional.empty();\n+            String proxyPath = proxyEnabled ? \"/proxy\" : null;\n+            Boolean tlsEnabled = getValueByPath(formulaValues, \"tls:enabled\")\n+                    .filter(Boolean.class::isInstance)\n+                    .map(Boolean.class::cast)\n+                    .orElse(false);\n+\n+            Map<String, Object> exportersMap = getValueByPath(formulaValues, \"exporters\")\n+                    .filter(Map.class::isInstance)\n+                    .map(Map.class::cast).get();\n+\n+            return exportersMap.entrySet().stream()\n+                    .map(exporterEntry -> new ExporterConfig(exporterEntry.getKey(),\n+                            Optional.ofNullable(exporterEntry.getValue())\n+                                    .filter(Map.class::isInstance).map(Map.class::cast).get()))", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODkwMTc4OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r678901789", "bodyText": "Added empty map as a default value in both cases.", "author": "witekest", "createdAt": "2021-07-29T07:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjkyMDg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk3ODUwNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672978507", "bodyText": "Does it make sense at all to have a config with null name, or address, proxy_module, etc?\nIf so (which is what I think I understand from the code), I'd suggest wrapping those into an Optional - so that we make explicit what might not be there - and always assume non-null otherwise.", "author": "moio", "createdAt": "2021-07-20T09:53:12Z", "path": "java/code/src/com/redhat/rhn/domain/formula/ExporterConfig.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.formula;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class ExporterConfig {\n+\n+    private static final String PORT_ARG_REGEX = \"--(?:telemetry\\\\.address|web\\\\.listen-address)=[\\\"']?:([0-9]*)[\\\"']?\";\n+    private static final String PORT_ADDRESS_REGEX = \":([0-9]*)$\";\n+\n+    private final Boolean enabled;\n+    private final String name;\n+    private final String endpointName;\n+    private final String address;\n+    private final String args;\n+    private final String proxyModule;\n+\n+    /**\n+     * Instantiates new exporter configuration object\n+     * @param enabledIn flag enabling the exporter\n+     * @param exporterNameIn exporter name\n+     * @param endpointNameIn endpoint name\n+     * @param addressIn the address of the endpoint where metrics are exposed\n+     * @param argsIn the string with command line arguments\n+     * @param proxyModuleIn module name for exporter exporter\n+     */\n+    public ExporterConfig(String exporterNameIn, Boolean enabledIn, String endpointNameIn, String addressIn,\n+                          String argsIn, String proxyModuleIn) {\n+        this.enabled = enabledIn;\n+        this.name = exporterNameIn;\n+        this.endpointName = endpointNameIn;\n+        this.address = addressIn;\n+        this.args = argsIn;\n+        this.proxyModule = proxyModuleIn;\n+    }\n+\n+    /**\n+    * Instantiate new exporter using name and configuration map\n+    * @param exporterName exporter name\n+    * @param exporterConfigMap map with configuration values\n+    */\n+    public ExporterConfig(String exporterName, Map<String, Object> exporterConfigMap) {\n+        this(\n+                exporterName,\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"enabled\", false))\n+                        .filter(Boolean.class::isInstance).map(Boolean.class::cast).orElse(false),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"name\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"address\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"args\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"proxy_module\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null)", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4OTUzMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r678889530", "bodyText": "Yes, they are all optional. Updated the getters accordingly.", "author": "witekest", "createdAt": "2021-07-29T07:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk3ODUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk3OTgwOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672979808", "bodyText": "Similarly to the above comment - here I guess you could just return port, and have the caller decide what to do in case the Optional is empty. That way we do not risk the caller tripping on a NullPointerException inadvertently.", "author": "moio", "createdAt": "2021-07-20T09:54:59Z", "path": "java/code/src/com/redhat/rhn/domain/formula/ExporterConfig.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.formula;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class ExporterConfig {\n+\n+    private static final String PORT_ARG_REGEX = \"--(?:telemetry\\\\.address|web\\\\.listen-address)=[\\\"']?:([0-9]*)[\\\"']?\";\n+    private static final String PORT_ADDRESS_REGEX = \":([0-9]*)$\";\n+\n+    private final Boolean enabled;\n+    private final String name;\n+    private final String endpointName;\n+    private final String address;\n+    private final String args;\n+    private final String proxyModule;\n+\n+    /**\n+     * Instantiates new exporter configuration object\n+     * @param enabledIn flag enabling the exporter\n+     * @param exporterNameIn exporter name\n+     * @param endpointNameIn endpoint name\n+     * @param addressIn the address of the endpoint where metrics are exposed\n+     * @param argsIn the string with command line arguments\n+     * @param proxyModuleIn module name for exporter exporter\n+     */\n+    public ExporterConfig(String exporterNameIn, Boolean enabledIn, String endpointNameIn, String addressIn,\n+                          String argsIn, String proxyModuleIn) {\n+        this.enabled = enabledIn;\n+        this.name = exporterNameIn;\n+        this.endpointName = endpointNameIn;\n+        this.address = addressIn;\n+        this.args = argsIn;\n+        this.proxyModule = proxyModuleIn;\n+    }\n+\n+    /**\n+    * Instantiate new exporter using name and configuration map\n+    * @param exporterName exporter name\n+    * @param exporterConfigMap map with configuration values\n+    */\n+    public ExporterConfig(String exporterName, Map<String, Object> exporterConfigMap) {\n+        this(\n+                exporterName,\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"enabled\", false))\n+                        .filter(Boolean.class::isInstance).map(Boolean.class::cast).orElse(false),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"name\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"address\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"args\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null),\n+                Optional.ofNullable(exporterConfigMap.getOrDefault(\"proxy_module\", null))\n+                        .filter(String.class::isInstance).map(String.class::cast).orElse(null)\n+        );\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public String getArgs() {\n+        return args;\n+    }\n+\n+    public String getEndpointName() {\n+        return endpointName != null ? endpointName : getName();\n+    }\n+\n+    public String getProxyModule() {\n+        return proxyModule != null ? proxyModule : getEndpointName();\n+    }\n+\n+    public Boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * Get port number at which metrics are exposed\n+     * @return port number\n+     */\n+    public Integer getPort() {\n+        Optional<Integer> port = getPatternMatchGroupAsInteger(PORT_ARG_REGEX, args);\n+        if (port.isEmpty()) {\n+            port = getPatternMatchGroupAsInteger(PORT_ADDRESS_REGEX, address);\n+        }\n+        return port.orElse(null);", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg5MTU5OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r678891598", "bodyText": "Done.", "author": "witekest", "createdAt": "2021-07-29T07:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk3OTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk4MTE5OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672981199", "bodyText": "It seems like this method is exclusively called from two lines above - if it's indeed not used elsewhere, I'd suggest inlining it.", "author": "moio", "createdAt": "2021-07-20T09:57:03Z", "path": "java/code/src/com/redhat/rhn/domain/formula/FormulaFactory.java", "diffHunk": "@@ -1108,4 +1109,54 @@ public static String getClusterPillarDir() {\n         return dataDir + PILLAR_DIR;\n     }\n \n+    /**\n+     * Find endpoint information from given formula data\n+     * @param formulaName name of the formula to examine\n+     * @param formulaData formula data to extract information from\n+     * @return list of endpoint information objects\n+     */\n+    public static List<EndpointInfo> getEndpointsFromFormulaData(String formulaName, FormulaData formulaData) {\n+        return getExportersEndpoints(formulaData);\n+    }\n+\n+    private static List<EndpointInfo> getExportersEndpoints(FormulaData formulaData) {", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg5MjMxNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r678892317", "bodyText": "The plan is to add a method for retrieving application endpoints here.", "author": "witekest", "createdAt": "2021-07-29T07:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk4MTE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk4MzAzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r672983036", "bodyText": "I think at least this method deserves a jUnit test.", "author": "moio", "createdAt": "2021-07-20T09:59:46Z", "path": "java/code/src/com/redhat/rhn/frontend/xmlrpc/system/monitoring/SystemMonitoringHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.frontend.xmlrpc.system.monitoring;\n+\n+import com.redhat.rhn.domain.dto.EndpointInfo;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.frontend.xmlrpc.BaseHandler;\n+import com.redhat.rhn.manager.formula.FormulaManager;\n+\n+import java.util.List;\n+\n+/**\n+ * ServerMonitoringHandler\n+ * @xmlrpc.namespace system.monitoring\n+ * @xmlrpc.doc Provides methods to access information about managed systems, applications and formulas which can be\n+ * relevant for Prometheus monitoring\n+ */\n+public class SystemMonitoringHandler extends BaseHandler {\n+\n+    private final FormulaManager formulaManager;\n+\n+    /**\n+     * Instantiates a new system handler for system.monitoring namespace\n+     * @param formulaManagerIn instance of formula manager object\n+     */\n+    public SystemMonitoringHandler(FormulaManager formulaManagerIn) {\n+        this.formulaManager = formulaManagerIn;\n+    }\n+\n+    /**\n+     * Get the endpoint details for all Prometheus exporters installed on the systems whose IDs match\n+     * with the passed systems IDs and all of the groups those systems are member of.\n+     *\n+     * @param loggedInUser The current user\n+     * @param systemIDs The system IDs\n+     * @return a list containing endpoint details for all Prometheus exporters on the passed system IDs.\n+     *\n+     * @xmlrpc.param #session_key()\n+     * @xmlrpc.param #array_single(\"int\", \"systemID\")\n+     * @xmlrpc.returntype\n+     *   #array_begin()\n+     *     $EndpointInfo\n+     *   #array_end()\n+     */\n+    public List<EndpointInfo> listEndpoints(User loggedInUser, List<Long> systemIDs) {", "originalCommit": "5ee2b8b204005956db9272392e0808f5fe724f30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTIwNjIzOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2987#discussion_r679206239", "bodyText": "Added test for FormulaManager.listEndpoints.", "author": "witekest", "createdAt": "2021-07-29T14:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3Mjk4MzAzNg=="}], "type": "inlineReview"}, {"oid": "c09f9c57e2d412b575185986db9a270925086d17", "url": "https://github.com/uyuni-project/uyuni/commit/c09f9c57e2d412b575185986db9a270925086d17", "message": "Add changelog entry", "committedDate": "2021-07-29T14:47:34Z", "type": "forcePushed"}, {"oid": "afe333e5e4833ef38debe67e1ef8485a96bd859f", "url": "https://github.com/uyuni-project/uyuni/commit/afe333e5e4833ef38debe67e1ef8485a96bd859f", "message": "Catch empty exporters section case", "committedDate": "2021-07-30T08:49:53Z", "type": "forcePushed"}, {"oid": "9598c9dd5ff96ae6d30f34db1d89d18e3453d098", "url": "https://github.com/uyuni-project/uyuni/commit/9598c9dd5ff96ae6d30f34db1d89d18e3453d098", "message": "Catch empty exporters section case", "committedDate": "2021-07-30T09:26:55Z", "type": "forcePushed"}, {"oid": "ed0be912df1e35f7d27e2c6c7038df597b5c8d49", "url": "https://github.com/uyuni-project/uyuni/commit/ed0be912df1e35f7d27e2c6c7038df597b5c8d49", "message": "Catch empty exporters section case", "committedDate": "2021-07-30T09:29:27Z", "type": "forcePushed"}, {"oid": "17535943e3cec11f863e846b52db3899ac55f2fe", "url": "https://github.com/uyuni-project/uyuni/commit/17535943e3cec11f863e846b52db3899ac55f2fe", "message": "Catch empty exporters section case", "committedDate": "2021-07-30T09:35:10Z", "type": "forcePushed"}, {"oid": "d550cc93e70baa22fec8c07e8cad8738c09cb76e", "url": "https://github.com/uyuni-project/uyuni/commit/d550cc93e70baa22fec8c07e8cad8738c09cb76e", "message": "Catch empty exporters section case", "committedDate": "2021-07-30T12:56:13Z", "type": "forcePushed"}, {"oid": "d52825f934c2032b7043ef384c9a87b2312a3cd2", "url": "https://github.com/uyuni-project/uyuni/commit/d52825f934c2032b7043ef384c9a87b2312a3cd2", "message": "Catch empty exporters section case", "committedDate": "2021-07-30T14:22:15Z", "type": "forcePushed"}, {"oid": "40e9858b7871f40760554ca08b92890a775e9d03", "url": "https://github.com/uyuni-project/uyuni/commit/40e9858b7871f40760554ca08b92890a775e9d03", "message": "Fix FormulaManagerTest.testListEndpoints", "committedDate": "2021-08-03T15:10:01Z", "type": "forcePushed"}, {"oid": "0a159d13e8cc0a50c4733984113e84eeaca23715", "url": "https://github.com/uyuni-project/uyuni/commit/0a159d13e8cc0a50c4733984113e84eeaca23715", "message": "Reset changes in src/com/redhat/rhn/frontend/xmlrpc/system/SystemHandler.java", "committedDate": "2021-08-04T08:35:08Z", "type": "forcePushed"}, {"oid": "0b4c1eaf1bcae50998048bcda0c776d7aafeab93", "url": "https://github.com/uyuni-project/uyuni/commit/0b4c1eaf1bcae50998048bcda0c776d7aafeab93", "message": "Add changelog entry", "committedDate": "2021-08-09T07:23:00Z", "type": "forcePushed"}, {"oid": "cc70d85fbc387a9ea247e530c50e9872b0c294d7", "url": "https://github.com/uyuni-project/uyuni/commit/cc70d85fbc387a9ea247e530c50e9872b0c294d7", "message": "Add changelog entry", "committedDate": "2021-08-09T15:35:47Z", "type": "forcePushed"}, {"oid": "52c8060db727580b72163fb36ba776ca1e8bfafb", "url": "https://github.com/uyuni-project/uyuni/commit/52c8060db727580b72163fb36ba776ca1e8bfafb", "message": "Add changelog entry", "committedDate": "2021-08-16T08:24:35Z", "type": "forcePushed"}, {"oid": "1d11e026f3797357a8a184f41c383e20ccfdfd9b", "url": "https://github.com/uyuni-project/uyuni/commit/1d11e026f3797357a8a184f41c383e20ccfdfd9b", "message": "Add new API method to list all endpoints\n\nThe new method returns a list of object containing all relevant\ninformation about application or Prometheus exporters endpoints.", "committedDate": "2021-08-16T08:42:21Z", "type": "commit"}, {"oid": "3fb4dacdc96c467c2a649d1d3ddad4ba010c9c99", "url": "https://github.com/uyuni-project/uyuni/commit/3fb4dacdc96c467c2a649d1d3ddad4ba010c9c99", "message": "Add changelog entry", "committedDate": "2021-08-16T08:42:54Z", "type": "commit"}, {"oid": "3fb4dacdc96c467c2a649d1d3ddad4ba010c9c99", "url": "https://github.com/uyuni-project/uyuni/commit/3fb4dacdc96c467c2a649d1d3ddad4ba010c9c99", "message": "Add changelog entry", "committedDate": "2021-08-16T08:42:54Z", "type": "forcePushed"}]}