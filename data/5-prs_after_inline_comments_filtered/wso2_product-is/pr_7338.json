{"pr_number": 7338, "pr_title": "Created the Intergration tests for the Script Library REST API", "pr_createdAt": "2020-01-22T06:46:25Z", "pr_url": "https://github.com/wso2/product-is/pull/7338", "timeline": [{"oid": "4ac29dd31a379b47e7f4aab30120b9b0da78453c", "url": "https://github.com/wso2/product-is/commit/4ac29dd31a379b47e7f4aab30120b9b0da78453c", "message": "Created the Intergration tests for the Script Library REST API", "committedDate": "2020-01-22T06:33:08Z", "type": "commit"}, {"oid": "5a1dc8e27487b552538b22636fc15d8f4a463c67", "url": "https://github.com/wso2/product-is/commit/5a1dc8e27487b552538b22636fc15d8f4a463c67", "message": "Merge branch 'master' into master", "committedDate": "2020-01-22T06:48:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxNjg0MA==", "url": "https://github.com/wso2/product-is/pull/7338#discussion_r369416840", "bodyText": "shall we define a contant for \"application/octet-stream\"", "author": "emswbandara", "createdAt": "2020-01-22T08:12:46Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/rest/api/server/script/library/v1/ScriptLibrarySuccessTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.rest.api.server.script.library.v1;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.response.Response;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+\n+import java.io.IOException;\n+\n+import javax.xml.xpath.XPathExpressionException;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+\n+/**\n+ * Test class for script library management REST APIs success paths.\n+ */\n+public class ScriptLibrarySuccessTest extends ScriptLibraryTestBase {\n+\n+    public static final String SCRIPT_LIBRARY_NAME = \"sample.js\";\n+    public static final String SCRIPT_LIBRARY_DESCRIPTION = \"sample description\";\n+    public static final String SCRIPT_LIBRARY_UPDATED_DESCRIPTION = \"sample description updated\";\n+    public static final String SCRIPT_LIBRARY_CONTENT_PATH = \"/content\";\n+    public static String SCRIPT_LIBRARY_CONTENT_REF = null;\n+\n+    @Factory(dataProvider = \"restAPIUserConfigProvider\")\n+    public ScriptLibrarySuccessTest(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        this.context = isServer;\n+        this.authenticatingUserName = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.authenticatingCredential = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.tenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void init() throws IOException {\n+\n+        super.testInit(API_VERSION, swaggerDefinition, tenant);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testConclude() {\n+\n+        super.conclude();\n+    }\n+\n+    @BeforeMethod(alwaysRun = true)\n+    public void testInit() {\n+\n+        RestAssured.basePath = basePath;\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void testFinish() {\n+\n+        RestAssured.basePath = StringUtils.EMPTY;\n+    }\n+\n+    @DataProvider(name = \"restAPIUserConfigProvider\")\n+    public static Object[][] restAPIUserConfigProvider() {\n+\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Test\n+    public void testAddScriptLibrary() throws IOException {\n+\n+        String content = readResource(\"sample-script-library.js\");\n+        Response responseOfUpload =\n+                getResponseOfMultipartPost(SCRIPT_LIBRARY_API_BASE_PATH, content, SCRIPT_LIBRARY_NAME,\n+                        SCRIPT_LIBRARY_DESCRIPTION);\n+        responseOfUpload.then()\n+                .log().ifValidationFails()\n+                .assertThat()\n+                .statusCode(HttpStatus.SC_CREATED)\n+                .header(HttpHeaders.LOCATION, notNullValue());\n+        String location = responseOfUpload.getHeader(HttpHeaders.LOCATION);\n+        assertNotNull(location);\n+    }\n+\n+    @Test(dependsOnMethods = {\"testAddScriptLibrary\"})\n+    public void testGetScriptLibrary() throws XPathExpressionException {\n+\n+        SCRIPT_LIBRARY_CONTENT_REF = \"/t/\" + context.getContextTenant()\n+                .getDomain() + \"/api/server/v1/script-libraries/\" + SCRIPT_LIBRARY_NAME + \"/content\";\n+        Response response = getResponseOfGet(SCRIPT_LIBRARY_API_BASE_PATH + PATH_SEPARATOR + SCRIPT_LIBRARY_NAME);\n+        response.then()\n+                .log().ifValidationFails()\n+                .assertThat()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"name\", equalTo(SCRIPT_LIBRARY_NAME))\n+                .body(\"description\", equalTo(SCRIPT_LIBRARY_DESCRIPTION))\n+                .body(\"content-ref\", equalTo(SCRIPT_LIBRARY_CONTENT_REF));\n+    }\n+\n+    @Test(dependsOnMethods = {\"testAddScriptLibrary\"})\n+    public void testGetScriptLibraries() {\n+\n+        Response response = getResponseOfGet(SCRIPT_LIBRARY_API_BASE_PATH);\n+        response.then()\n+                .log().ifValidationFails()\n+                .assertThat()\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+\n+    @Test(dependsOnMethods = {\"testGetScriptLibrary\"})\n+    public void testUpdateScriptLibrary() throws IOException, XPathExpressionException {\n+\n+        SCRIPT_LIBRARY_CONTENT_REF = \"/t/\" + context.getContextTenant()\n+                .getDomain() + \"/api/server/v1/script-libraries/\" + SCRIPT_LIBRARY_NAME + \"/content\";\n+        String content = readResource(\"sample-script-library-updated.js\");\n+        String endpoint = SCRIPT_LIBRARY_API_BASE_PATH + PATH_SEPARATOR + SCRIPT_LIBRARY_NAME;\n+        Response response = getResponseOfMultipartPut(endpoint, content, SCRIPT_LIBRARY_UPDATED_DESCRIPTION);\n+        response.then()\n+                .log().ifValidationFails()\n+                .assertThat()\n+                .statusCode(HttpStatus.SC_OK)\n+                .body(\"name\", equalTo(SCRIPT_LIBRARY_NAME))\n+                .body(\"description\", equalTo(SCRIPT_LIBRARY_UPDATED_DESCRIPTION))\n+                .body(\"content-ref\", equalTo(SCRIPT_LIBRARY_CONTENT_REF));\n+    }\n+\n+    @Test(dependsOnMethods = {\"testUpdateScriptLibrary\"})\n+    public void testGetContentScriptLibrary() throws IOException {\n+\n+        String content = readResource(\"sample-script-library-updated.js\");\n+        String endpoint =\n+                SCRIPT_LIBRARY_API_BASE_PATH + PATH_SEPARATOR + SCRIPT_LIBRARY_NAME + SCRIPT_LIBRARY_CONTENT_PATH;\n+        Response response = getResponseOfGet(endpoint, \"application/octet-stream\");", "originalCommit": "5a1dc8e27487b552538b22636fc15d8f4a463c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzMDM2NA==", "url": "https://github.com/wso2/product-is/pull/7338#discussion_r369430364", "bodyText": "Fixed commit", "author": "Wathsara", "createdAt": "2020-01-22T08:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxNjg0MA=="}], "type": "inlineReview"}, {"oid": "3e4452fb2e570a8cb1dc3855e6837b7e264dfb91", "url": "https://github.com/wso2/product-is/commit/3e4452fb2e570a8cb1dc3855e6837b7e264dfb91", "message": "Modified the constant in SucessTest", "committedDate": "2020-01-22T08:42:57Z", "type": "commit"}, {"oid": "297f12a39e018a345003f845ef98c30140f61f96", "url": "https://github.com/wso2/product-is/commit/297f12a39e018a345003f845ef98c30140f61f96", "message": "Merge branch 'master' of https://github.com/Wathsara/product-is", "committedDate": "2020-01-22T08:43:36Z", "type": "commit"}, {"oid": "7ab4dd0c91a2ffae58158bef9a347922f0973b46", "url": "https://github.com/wso2/product-is/commit/7ab4dd0c91a2ffae58158bef9a347922f0973b46", "message": "Updated the intergration tests", "committedDate": "2020-01-27T05:27:54Z", "type": "commit"}, {"oid": "4c380aae8e2b65093652598af5fd562ef3512bff", "url": "https://github.com/wso2/product-is/commit/4c380aae8e2b65093652598af5fd562ef3512bff", "message": "Updated the framework version and dispatcher version", "committedDate": "2020-01-28T13:00:16Z", "type": "commit"}, {"oid": "54f1b63c5772bc782ff6a90f53a2d524dd8b3c23", "url": "https://github.com/wso2/product-is/commit/54f1b63c5772bc782ff6a90f53a2d524dd8b3c23", "message": "Merge branch 'master' of https://github.com/wso2/product-is\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2020-01-29T07:40:38Z", "type": "commit"}, {"oid": "57405ae1b5e04a00bfa257a95124d5ae70ed050f", "url": "https://github.com/wso2/product-is/commit/57405ae1b5e04a00bfa257a95124d5ae70ed050f", "message": "Merge commit", "committedDate": "2020-01-29T07:50:05Z", "type": "commit"}]}