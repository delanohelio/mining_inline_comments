{"pr_number": 1420, "pr_title": "Refactor test utils into ambry-test-utils subproj", "pr_createdAt": "2020-03-09T17:42:31Z", "pr_url": "https://github.com/linkedin/ambry/pull/1420", "timeline": [{"oid": "24ccc3021af95d593236689fbc0d4ac00fd8607e", "url": "https://github.com/linkedin/ambry/commit/24ccc3021af95d593236689fbc0d4ac00fd8607e", "message": "Refactor test utils into ambry-test-utils subproj\n\nThere are many test utilities that are shared across many subprojects\nand even dependended on when writing tests for wrappers that extend open\nsource Ambry (like AmbryLI for LinkedIn). Generally, depending on test\nartifacts across projects is not a great practice (issues handling\ntransitive dependencies with non-standard classifiers), so this project\nmoves the test utilities used across repos into an ambry-test-utils\nsubproject.\n\nFor now, this targets moving only the test dependencies that are\ndepended on by LinkedIn internal projects to ambry-test-utils. Going\nforward, we can simplify our test dependencies within the open source\nrepo by moving more classes into ambry-test-utils.\n\nFor tests that still depend on other subprojects' tests, this commit\nswitches from using source sets to a configuration based approach. This\nensures that test classes are always built after their dependencies are\ncompiled. See https://softnoise.wordpress.com/2014/09/07/gradle-sub-project-test-dependencies-in-multi-project-builds/", "committedDate": "2020-03-11T03:58:57Z", "type": "forcePushed"}, {"oid": "7f84ad21cd47f3df0877fc26046a90aa6db81c8b", "url": "https://github.com/linkedin/ambry/commit/7f84ad21cd47f3df0877fc26046a90aa6db81c8b", "message": "Refactor test utils into ambry-test-utils subproj\n\nThere are many test utilities that are shared across many subprojects\nand even dependended on when writing tests for wrappers that extend open\nsource Ambry (like AmbryLI for LinkedIn). Generally, depending on test\nartifacts across projects is not a great practice (issues handling\ntransitive dependencies with non-standard classifiers), so this project\nmoves the test utilities used across repos into an ambry-test-utils\nsubproject.\n\nFor now, this targets moving only the test dependencies that are\ndepended on by LinkedIn internal projects to ambry-test-utils. Going\nforward, we can simplify our test dependencies within the open source\nrepo by moving more classes into ambry-test-utils.\n\nFor tests that still depend on other subprojects' tests, this commit\nswitches from using source sets to a configuration based approach. This\nensures that test classes are always built after their dependencies are\ncompiled. See https://softnoise.wordpress.com/2014/09/07/gradle-sub-project-test-dependencies-in-multi-project-builds/", "committedDate": "2020-03-11T17:36:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTcxMA==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391171710", "bodyText": "The diff looks weird in the class, but the change I made is to change the package-private classes below InMemoryRouter in this file into private static inner classes, since they are not used anywhere outside of InMemoryRouter", "author": "cgtz", "createdAt": "2020-03-11T18:17:10Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/router/InMemoryRouter.java", "diffHunk": "@@ -391,195 +398,175 @@ protected static void completeOperation(FutureResult futureResult, Callback call\n       callback.onCompletion(operationResult, exception);\n     }\n   }\n-}\n-\n-/**\n- * Thread to read the post data async and store it.\n- */\n-class InMemoryBlobPoster implements Runnable {", "originalCommit": "7f84ad21cd47f3df0877fc26046a90aa6db81c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d12046925dd156ffede8b8691475064ca7330615", "url": "https://github.com/linkedin/ambry/commit/d12046925dd156ffede8b8691475064ca7330615", "message": "Refactor test utils into ambry-test-utils subproj\n\nThere are many test utilities that are shared across many subprojects\nand even dependended on when writing tests for wrappers that extend open\nsource Ambry (like AmbryLI for LinkedIn). Generally, depending on test\nartifacts across projects is not a great practice (issues handling\ntransitive dependencies with non-standard classifiers), so this project\nmoves the test utilities used across repos into an ambry-test-utils\nsubproject.\n\nFor now, this targets moving only the test dependencies that are\ndepended on by LinkedIn internal projects to ambry-test-utils. Going\nforward, we can simplify our test dependencies within the open source\nrepo by moving more classes into ambry-test-utils.\n\nFor tests that still depend on other subprojects' tests, this commit\nswitches from using source sets to a configuration based approach. This\nensures that test classes are always built after their dependencies are\ncompiled. See https://softnoise.wordpress.com/2014/09/07/gradle-sub-project-test-dependencies-in-multi-project-builds/", "committedDate": "2020-03-11T18:20:27Z", "type": "commit"}, {"oid": "d12046925dd156ffede8b8691475064ca7330615", "url": "https://github.com/linkedin/ambry/commit/d12046925dd156ffede8b8691475064ca7330615", "message": "Refactor test utils into ambry-test-utils subproj\n\nThere are many test utilities that are shared across many subprojects\nand even dependended on when writing tests for wrappers that extend open\nsource Ambry (like AmbryLI for LinkedIn). Generally, depending on test\nartifacts across projects is not a great practice (issues handling\ntransitive dependencies with non-standard classifiers), so this project\nmoves the test utilities used across repos into an ambry-test-utils\nsubproject.\n\nFor now, this targets moving only the test dependencies that are\ndepended on by LinkedIn internal projects to ambry-test-utils. Going\nforward, we can simplify our test dependencies within the open source\nrepo by moving more classes into ambry-test-utils.\n\nFor tests that still depend on other subprojects' tests, this commit\nswitches from using source sets to a configuration based approach. This\nensures that test classes are always built after their dependencies are\ncompiled. See https://softnoise.wordpress.com/2014/09/07/gradle-sub-project-test-dependencies-in-multi-project-builds/", "committedDate": "2020-03-11T18:20:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Mjk2Nw==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391272967", "bodyText": "Why static import in this class?", "author": "lightningrob", "createdAt": "2020-03-11T21:16:41Z", "path": "ambry-clustermap/src/test/java/com.github.ambry.clustermap/ClusterMapUtilsTest.java", "diffHunk": "@@ -26,6 +25,7 @@\n import org.junit.Test;\n import org.mockito.Mockito;\n \n+import static com.github.ambry.utils.TestUtils.*;", "originalCommit": "d12046925dd156ffede8b8691475064ca7330615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzgyNA==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391283824", "bodyText": "For the tests in the clustermap package, there is another class called com.github.ambry.clustermap.TestUtils. To avoid having to write out the fully qualified classname every time getRandomString is used, I did a static import. I suppose the best thing to do would be to change the other package's name to ClustermapTestUtils, but I didn't want to do that in the same PR to prevent this one from getting even bigger.", "author": "cgtz", "createdAt": "2020-03-11T21:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Mjk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3NTY0Mg==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391275642", "bodyText": "javadoc", "author": "lightningrob", "createdAt": "2020-03-11T21:22:18Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/router/InMemoryRouter.java", "diffHunk": "@@ -376,6 +375,14 @@ private boolean handlePrechecks(FutureResult futureResult, Callback callback) {\n     return continueOp;\n   }\n \n+  private void checkBlobId(String blobId) throws RouterException {", "originalCommit": "d12046925dd156ffede8b8691475064ca7330615", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Njg1NQ==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391276855", "bodyText": "Is this needed, or even correct?  Nearly all our javadocs have the two star convention.", "author": "lightningrob", "createdAt": "2020-03-11T21:24:58Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/utils/HelixControllerManager.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/**\n+/*", "originalCommit": "d12046925dd156ffede8b8691475064ca7330615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MjQzNQ==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391282435", "bodyText": "The single star is more correct according to intellij since the license comment is not a javadoc, just a block comment. When the two stars are present it gives a warning \"Dangling javadoc comment\".", "author": "cgtz", "createdAt": "2020-03-11T21:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3Njg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3NzE0Ng==", "url": "https://github.com/linkedin/ambry/pull/1420#discussion_r391277146", "bodyText": "javadoc", "author": "lightningrob", "createdAt": "2020-03-11T21:25:33Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/utils/TestUtils.java", "diffHunk": "@@ -232,6 +233,14 @@ public static String getRandomKey(int size) {\n     return sb.toString();\n   }\n \n+  public static String getRandomString(int length) {", "originalCommit": "d12046925dd156ffede8b8691475064ca7330615", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}