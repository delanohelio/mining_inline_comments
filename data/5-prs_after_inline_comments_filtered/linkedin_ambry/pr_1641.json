{"pr_number": 1641, "pr_title": "Fix a NPE in BlobStoreStats", "pr_createdAt": "2020-10-02T20:53:45Z", "pr_url": "https://github.com/linkedin/ambry/pull/1641", "timeline": [{"oid": "e8640ea9ba4cf8f98f01dc85d8799ab926d3e6ef", "url": "https://github.com/linkedin/ambry/commit/e8640ea9ba4cf8f98f01dc85d8799ab926d3e6ef", "message": "Fix a NPE in BlobStoreStats", "committedDate": "2020-10-02T20:52:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExNTQwOA==", "url": "https://github.com/linkedin/ambry/pull/1641#discussion_r499115408", "bodyText": "nit: IOException is not thrown in this method.", "author": "jsjtzyy", "createdAt": "2020-10-03T04:38:28Z", "path": "ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java", "diffHunk": "@@ -1044,6 +1044,81 @@ public void concurrentAllTest() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testBlobStoreStats() throws StoreException, InterruptedException, IOException, ExecutionException {", "originalCommit": "e8640ea9ba4cf8f98f01dc85d8799ab926d3e6ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExNTgzOQ==", "url": "https://github.com/linkedin/ambry/pull/1641#discussion_r499115839", "bodyText": "I think you were trying to reset this in finally block:\n((MockBlobStore) store).setOperationBeforeSynchronization(null);", "author": "jsjtzyy", "createdAt": "2020-10-03T04:45:35Z", "path": "ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java", "diffHunk": "@@ -1044,6 +1044,81 @@ public void concurrentAllTest() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testBlobStoreStats() throws StoreException, InterruptedException, IOException, ExecutionException {\n+    store.shutdown();\n+    ReplicaId replicaId = getMockReplicaId(tempDirStr);\n+    StoreConfig config = new StoreConfig(new VerifiableProperties(properties));\n+    MetricRegistry registry = new MetricRegistry();\n+    StoreMetrics metrics = new StoreMetrics(registry);\n+    MockBlobStoreStats mockBlobStoreStats = new MockBlobStoreStats(time);\n+    store = new MockBlobStore(replicaId, config, null, metrics, mockBlobStoreStats);\n+    store.start();\n+\n+    MockId id = put(1, PUT_RECORD_SIZE, Utils.Infinite_Time).get(0);\n+    assertNotNull(mockBlobStoreStats.currentValue);\n+    assertNull(mockBlobStoreStats.originalPutValue);\n+    assertNull(mockBlobStoreStats.previousValue);\n+    assertTrue(mockBlobStoreStats.currentValue.isPut());\n+\n+    updateTtl(id);\n+    assertNotNull(mockBlobStoreStats.currentValue);\n+    assertNotNull(mockBlobStoreStats.originalPutValue);\n+    assertNull(mockBlobStoreStats.previousValue);\n+    assertTrue(mockBlobStoreStats.currentValue.isTtlUpdate());\n+    assertTrue(mockBlobStoreStats.originalPutValue.isPut());\n+\n+    delete(id);\n+    assertNotNull(mockBlobStoreStats.currentValue);\n+    assertNotNull(mockBlobStoreStats.originalPutValue);\n+    assertNotNull(mockBlobStoreStats.previousValue);\n+    assertTrue(mockBlobStoreStats.currentValue.isDelete());\n+    assertTrue(mockBlobStoreStats.currentValue.isTtlUpdate());\n+    assertTrue(mockBlobStoreStats.previousValue.isTtlUpdate());\n+    assertTrue(mockBlobStoreStats.originalPutValue.isTtlUpdate());\n+\n+    // Delete a blob at the same time, put a new blob, make sure the blobstorestats still get everything.\n+    MockId id2 = put(1, PUT_RECORD_SIZE, expiresAtMs).get(0);\n+    final CountDownLatch synchronizationLatch = new CountDownLatch(1);\n+    final CountDownLatch putLatch = new CountDownLatch(1);\n+    ((MockBlobStore) store).setOperationBeforeSynchronization(() -> {\n+      synchronizationLatch.countDown(); // put will wait until delete reach synchronization statement\n+      putLatch.await(); // then delete will wait until put finishes\n+      return null;\n+    });\n+    ExecutorService executorService = Executors.newFixedThreadPool(2);\n+\n+    try {\n+      Future<Void> deleteFuture = executorService.submit(() -> {\n+        delete(id2);\n+        return null;\n+      });\n+      Future<Void> putFuture = executorService.submit(() -> {\n+        // Now make sure delete already gets to synchronization\n+        synchronizationLatch.await();\n+        // Disable synchronization callback so put will not be blocked by it.\n+        ((MockBlobStore) store).setOperationBeforeSynchronization(null);\n+        put(1, PUT_RECORD_SIZE, Utils.Infinite_Time);\n+        // Now make sure the put is inserted into the index before continue delete\n+        putLatch.countDown();\n+        return null;\n+      });\n+      putFuture.get();\n+      deleteFuture.get();\n+\n+      // MockBlobStoreStats should capture delete operation\n+      assertNotNull(mockBlobStoreStats.currentValue);\n+      assertNotNull(mockBlobStoreStats.originalPutValue);\n+      assertNotNull(mockBlobStoreStats.previousValue);\n+      assertTrue(mockBlobStoreStats.currentValue.isDelete());\n+      assertTrue(mockBlobStoreStats.previousValue.isPut());\n+      assertTrue(mockBlobStoreStats.originalPutValue.isPut());\n+    } finally {\n+      ((MockBlobStore) store).setInDeleteBetweenGetEndOffsetAndFindKey(null);", "originalCommit": "e8640ea9ba4cf8f98f01dc85d8799ab926d3e6ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExNTkzNQ==", "url": "https://github.com/linkedin/ambry/pull/1641#discussion_r499115935", "bodyText": "The test name is too general, maybe rename it ? (Also add some java doc)", "author": "jsjtzyy", "createdAt": "2020-10-03T04:47:15Z", "path": "ambry-store/src/test/java/com/github/ambry/store/BlobStoreTest.java", "diffHunk": "@@ -1044,6 +1044,81 @@ public void concurrentAllTest() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testBlobStoreStats() throws StoreException, InterruptedException, IOException, ExecutionException {", "originalCommit": "e8640ea9ba4cf8f98f01dc85d8799ab926d3e6ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07942f62f9d777a0dc4084bb263f9aa69c9c2b76", "url": "https://github.com/linkedin/ambry/commit/07942f62f9d777a0dc4084bb263f9aa69c9c2b76", "message": "Address comments", "committedDate": "2020-10-05T04:04:10Z", "type": "commit"}]}