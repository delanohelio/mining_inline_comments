{"pr_number": 1482, "pr_title": "Introduce helixAccountService to Ambry Server and get Containers by status", "pr_createdAt": "2020-04-21T06:08:43Z", "pr_url": "https://github.com/linkedin/ambry/pull/1482", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODExOQ==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r412288119", "bodyText": "To allow for plugable implementations of AccountService, it would be best to use reflection to instantiate the account service. Doing so will allow us to start ambry-server in environments where zookeeper is not running, such as the quickstart on the github readme. See https://github.com/linkedin/ambry/blob/master/ambry-rest/src/main/java/com/github/ambry/rest/RestServer.java#L171 for an example of how to use Utils.getObj to instantiate AccountService.", "author": "cgtz", "createdAt": "2020-04-21T15:30:23Z", "path": "ambry-server/src/main/java/com/github/ambry/server/AmbryServer.java", "diffHunk": "@@ -164,10 +166,13 @@ public void startup() throws InstantiationException {\n             + \"is not present in the clustermap. Failing to start the datanode\");\n       }\n \n+      HelixAccountServiceFactory helixAccountServiceFactory = new HelixAccountServiceFactory(properties, registry);", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0NjIxOQ==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416346219", "bodyText": "Thanks for the suggestion. Updated.", "author": "SophieGuo410", "createdAt": "2020-04-28T05:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODg4OA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r412288888", "bodyText": "This method seems like it can be generalized to all implementations of AccountService (just have to switch out accountInfoMapRef.get().getAccounts() for getAllAccounts() and implemented as a default method in the interface.\nI was also wondering if there is a reason for returning Pair<Short, Short> instead of the Container objects themselves? Container has a getParentAccountId method that can be used to get the account ID. I can understand using pair though if the user of this method needs to check for set membership a lot.", "author": "cgtz", "createdAt": "2020-04-21T15:31:29Z", "path": "ambry-account/src/main/java/com/github/ambry/account/HelixAccountService.java", "diffHunk": "@@ -392,5 +393,22 @@ AccountServiceMetrics getAccountServiceMetrics() {\n   BackupFileManager getBackupFileManager() {\n     return backupFileManager;\n   }\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by\n+   * {@link com.github.ambry.account.Container.ContainerStatus}.\n+   */\n+  @Override\n+  public Set<Pair<Short,Short>> getContainersByStatus(Container.ContainerStatus containerStatus) {", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNDI1NA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413234254", "bodyText": "+1\nI also recommend to return a set of Container rather than a set of accountId and containerId.", "author": "justinlin-linkedin", "createdAt": "2020-04-22T18:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTI3OQ==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413251279", "bodyText": "+1\nSet of Container is friendly.\nWe can convert this to Set<Pair<Short,Short>> in compaction phase to detect DELETE_IN_PROGRESS containers.", "author": "zzmao", "createdAt": "2020-04-22T19:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODk3Nw==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416348977", "bodyText": "Updated. And will convert set of containers to Set<Pair<Short,Short>> in compaction phase since we need to check for set membership a lot during compaction stage.", "author": "SophieGuo410", "createdAt": "2020-04-28T06:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTQ4NA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413235484", "bodyText": "nit: we don't have to explicitly mark it public since all methods in an interface is public.", "author": "justinlin-linkedin", "createdAt": "2020-04-22T18:52:31Z", "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -103,4 +105,10 @@\n    *          exist.\n    */\n   public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> accountUpdateConsumer);\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by\n+   * {@link com.github.ambry.account.Container.ContainerStatus}.\n+   */\n+  public Set<Pair<Short,Short>> getContainersByStatus(Container.ContainerStatus containerStatus);", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTE5Mg==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416349192", "bodyText": "Thanks for the nit. Updated.", "author": "SophieGuo410", "createdAt": "2020-04-28T06:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTM5OQ==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413245399", "bodyText": "Looks like the comment is a little off with the code.\n\nTests {@link AccountService#getContainersByStatus(ContainerStatus)} with generated containes", "author": "zzmao", "createdAt": "2020-04-22T19:05:49Z", "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -202,6 +203,51 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests generates a collection of reference {@link Account}s and {@link Container}s that can be referred", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTM1NA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416349354", "bodyText": "Updated.", "author": "SophieGuo410", "createdAt": "2020-04-28T06:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTYyNg==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413245626", "bodyText": "aslo assert containers status are expected.", "author": "zzmao", "createdAt": "2020-04-22T19:06:08Z", "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -202,6 +203,51 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests generates a collection of reference {@link Account}s and {@link Container}s that can be referred\n+   * from {@link #idToRefAccountMap} and {@link #idToRefContainerMap}. And it also generate a collection of\n+   * the {@link Container}s through {@link HelixAccountService} with selected {@link ContainerStatus}\n+   */\n+  @Test\n+  public void testGetContainerByStatus() throws Exception {\n+    // a set that records the account ids that have already been taken.\n+    Set accountIdSet = new HashSet<>();\n+    // generate a single reference account and container that can be referenced by refAccount and refContainer respectively.\n+    refAccountId = Utils.getRandomShort(random);\n+    accountIdSet.add(refAccountId);\n+    generateRefAccounts(idToRefAccountMap, idToRefContainerMap, accountIdSet, 5,\n+        2);\n+\n+    accountService = mockHelixAccountServiceFactory.getAccountService();\n+    accountService.updateAccounts(idToRefAccountMap.values());\n+    assertAccountsInAccountService(idToRefAccountMap.values(), 5, accountService);\n+\n+    List<Account> accountsToUpdate = new ArrayList<>();\n+    int cnt = 0;\n+    for (Account account : accountService.getAllAccounts()) {\n+      AccountBuilder accountBuilder = new AccountBuilder(account);\n+      for (Container container : account.getAllContainers()) {\n+        if (cnt%2 == 0) {\n+          ContainerBuilder containerBuilder = new ContainerBuilder(container);\n+          containerBuilder.setId((short) (-1 * (container.getId())));\n+          containerBuilder.setName(container.getName() + \"-extra\");\n+          containerBuilder.setStatus(ContainerStatus.DELETE_IN_PROGRESS);\n+          containerBuilder.setDescription(container.getDescription() + \"--extra\");\n+          containerBuilder.setReplicationPolicy(container.getReplicationPolicy() + \"---extra\");\n+          containerBuilder.setTtlRequired(container.isTtlRequired());\n+          accountBuilder.addOrUpdateContainer(containerBuilder.build());\n+        }\n+        cnt++;\n+      }\n+      accountsToUpdate.add(accountBuilder.build());\n+    }\n+\n+    updateAccountsAndAssertAccountExistence(accountsToUpdate, 5, true);\n+    Set<Pair<Short,Short>> containerList = accountService.getContainersByStatus(ContainerStatus.DELETE_IN_PROGRESS);\n+    assertEquals(\"Wrong number of containers in containerList\", 5,", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTg4Mw==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416349883", "bodyText": "Add containers status check.", "author": "SophieGuo410", "createdAt": "2020-04-28T06:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NTYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NjYwOQ==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413246609", "bodyText": "Start with verb?", "author": "zzmao", "createdAt": "2020-04-22T19:07:45Z", "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -103,4 +105,10 @@\n    *          exist.\n    */\n   public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> accountUpdateConsumer);\n+\n+  /**\n+   * It gets a collection of {@link Account}s' and {@link Container}s' Id pairs selected by", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTk3NA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416349974", "bodyText": "Updated.", "author": "SophieGuo410", "createdAt": "2020-04-28T06:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NjYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0Nzg0OA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r413247848", "bodyText": "Use option + command + l to format code.", "author": "zzmao", "createdAt": "2020-04-22T19:09:44Z", "path": "ambry-account/src/test/java/com/github/ambry/account/HelixAccountServiceTest.java", "diffHunk": "@@ -202,6 +203,51 @@ public void testCreateAccount() {\n     assertAccountsInAccountService(idToRefAccountMap.values(), NUM_REF_ACCOUNT, accountService);\n   }\n \n+  /**\n+   * Tests generates a collection of reference {@link Account}s and {@link Container}s that can be referred\n+   * from {@link #idToRefAccountMap} and {@link #idToRefContainerMap}. And it also generate a collection of\n+   * the {@link Container}s through {@link HelixAccountService} with selected {@link ContainerStatus}\n+   */\n+  @Test\n+  public void testGetContainerByStatus() throws Exception {\n+    // a set that records the account ids that have already been taken.\n+    Set accountIdSet = new HashSet<>();\n+    // generate a single reference account and container that can be referenced by refAccount and refContainer respectively.\n+    refAccountId = Utils.getRandomShort(random);\n+    accountIdSet.add(refAccountId);\n+    generateRefAccounts(idToRefAccountMap, idToRefContainerMap, accountIdSet, 5,\n+        2);\n+\n+    accountService = mockHelixAccountServiceFactory.getAccountService();\n+    accountService.updateAccounts(idToRefAccountMap.values());\n+    assertAccountsInAccountService(idToRefAccountMap.values(), 5, accountService);\n+\n+    List<Account> accountsToUpdate = new ArrayList<>();\n+    int cnt = 0;\n+    for (Account account : accountService.getAllAccounts()) {\n+      AccountBuilder accountBuilder = new AccountBuilder(account);\n+      for (Container container : account.getAllContainers()) {\n+        if (cnt%2 == 0) {", "originalCommit": "5f3a27e025174daf20a9143c3643e9a1a5337928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MTE1Mw==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416351153", "bodyText": "Thanks. Updated.", "author": "SophieGuo410", "createdAt": "2020-04-28T06:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0Nzg0OA=="}], "type": "inlineReview"}, {"oid": "a8df48a8154677cb0ff2005be491395a8b4473a9", "url": "https://github.com/linkedin/ambry/commit/a8df48a8154677cb0ff2005be491395a8b4473a9", "message": "Introduce helixAccountService to AmbryServer and get Containers by status", "committedDate": "2020-04-28T04:14:31Z", "type": "commit"}, {"oid": "dbc966428397c18b14222cfb85a3ece4509d3f3e", "url": "https://github.com/linkedin/ambry/commit/dbc966428397c18b14222cfb85a3ece4509d3f3e", "message": "Address review comments", "committedDate": "2020-04-28T04:16:31Z", "type": "commit"}, {"oid": "dbc966428397c18b14222cfb85a3ece4509d3f3e", "url": "https://github.com/linkedin/ambry/commit/dbc966428397c18b14222cfb85a3ece4509d3f3e", "message": "Address review comments", "committedDate": "2020-04-28T04:16:31Z", "type": "forcePushed"}, {"oid": "26cf4045ee37a2f2c3638c7dbca9d5553be12980", "url": "https://github.com/linkedin/ambry/commit/26cf4045ee37a2f2c3638c7dbca9d5553be12980", "message": "remove redundant import and methods", "committedDate": "2020-04-28T05:39:27Z", "type": "commit"}, {"oid": "9760a82f16199cacdaa7b9ef1e910c1a8d9436e0", "url": "https://github.com/linkedin/ambry/commit/9760a82f16199cacdaa7b9ef1e910c1a8d9436e0", "message": "remove unused import statement", "committedDate": "2020-04-28T05:47:38Z", "type": "commit"}, {"oid": "042330550821074c659dfd014f32e7243e107738", "url": "https://github.com/linkedin/ambry/commit/042330550821074c659dfd014f32e7243e107738", "message": "change config default", "committedDate": "2020-04-28T21:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2NTExMA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416965110", "bodyText": "Why not use the same factory as RestServer does?\ncom.github.ambry.account.InMemoryUnknownAccountServiceFactory", "author": "justinlin-linkedin", "createdAt": "2020-04-28T22:36:23Z", "path": "ambry-api/src/main/java/com/github/ambry/config/ServerConfig.java", "diffHunk": "@@ -92,14 +92,21 @@\n   @Config(\"server.validate.request.based.on.store.state\")\n   @Default(\"false\")\n   public final boolean serverValidateRequestBasedOnStoreState;\n-  \n+\n   /**\n    * True to enable ambry server handling undelete requests.\n    */\n   @Config(\"server.handle.undelete.request.enabled\")\n   @Default(\"false\")\n   public final boolean serverHandleUndeleteRequestEnabled;\n \n+  /**\n+   * Implementation class for HelixAccountServiceFactory\n+   */\n+  @Config(\"server.account.service.factory\")\n+  @Default(\"com.github.ambry.account.InMemAccountServiceFactory\")", "originalCommit": "042330550821074c659dfd014f32e7243e107738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5ODIxOA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r416998218", "bodyText": "You are right. InMemAccountServiceFactory is for testing. I've updated.", "author": "SophieGuo410", "createdAt": "2020-04-29T00:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2NTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMzA5Nw==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r419713097", "bodyText": "{@link Container}s in the given status.", "author": "zzmao", "createdAt": "2020-05-04T20:37:55Z", "path": "ambry-api/src/main/java/com/github/ambry/account/AccountService.java", "diffHunk": "@@ -103,4 +105,20 @@\n    *          exist.\n    */\n   public boolean removeAccountUpdateConsumer(Consumer<Collection<Account>> accountUpdateConsumer);\n+\n+  /**\n+   * Gets a collection of {@link Container}s' selected by", "originalCommit": "eb1149b8ebdad3fa19fe3abe0a6ad11195cd4a62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "035895b0d45a79d134b474c5a34e4f719072952e", "url": "https://github.com/linkedin/ambry/commit/035895b0d45a79d134b474c5a34e4f719072952e", "message": "change config default and update comments", "committedDate": "2020-05-04T22:14:51Z", "type": "commit"}, {"oid": "035895b0d45a79d134b474c5a34e4f719072952e", "url": "https://github.com/linkedin/ambry/commit/035895b0d45a79d134b474c5a34e4f719072952e", "message": "change config default and update comments", "committedDate": "2020-05-04T22:14:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNTcwNA==", "url": "https://github.com/linkedin/ambry/pull/1482#discussion_r421025704", "bodyText": "nit:  accountServiceFactory -> serverAccountServiceFactory", "author": "jsjtzyy", "createdAt": "2020-05-06T19:05:57Z", "path": "ambry-api/src/main/java/com/github/ambry/config/ServerConfig.java", "diffHunk": "@@ -92,14 +92,21 @@\n   @Config(\"server.validate.request.based.on.store.state\")\n   @Default(\"false\")\n   public final boolean serverValidateRequestBasedOnStoreState;\n-  \n+\n   /**\n    * True to enable ambry server handling undelete requests.\n    */\n   @Config(\"server.handle.undelete.request.enabled\")\n   @Default(\"false\")\n   public final boolean serverHandleUndeleteRequestEnabled;\n \n+  /**\n+   * Implementation class for accountServiceFactory\n+   */\n+  @Config(\"server.account.service.factory\")\n+  @Default(\"com.github.ambry.account.InMemoryUnknownAccountServiceFactory\")\n+  public final String accountServiceFactory;\n+", "originalCommit": "035895b0d45a79d134b474c5a34e4f719072952e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}