{"pr_number": 1440, "pr_title": "Integrate CompositeNetworkClient with CloudRouterFactory", "pr_createdAt": "2020-03-26T16:30:30Z", "pr_url": "https://github.com/linkedin/ambry/pull/1440", "timeline": [{"oid": "d0b3e291447df64847c21d0b3430a1700d96856a", "url": "https://github.com/linkedin/ambry/commit/d0b3e291447df64847c21d0b3430a1700d96856a", "message": "Integrate CompositeNetworkClient with CloudRouterFactory\n\nPrior to this change, CloudRouterFactory could only communicate with\ncloud services. This integrates CompositeNetworkClient which lets it\naddress both cloud service replicas and ambry-server replicas.\n\n- Fix a bug in CompositeNetworkClient. sendAndPoll on the child clients\n  needs to be called regardless of if there are new requests to send so\n  that any responses that come back are received in a timely manner.\n- Add support for the wakeup call to\n  LocalNetworkClient/LocalRequestResponseChannel. This allows a\n  sendAndPoll call to end before the timeout if the router indicates\n  that there is extra work to do (e.g. processing decrypted blobs)\n- Some MockClusterMap changes to support adding a datacenter with\n  CLOUD_BACKED replicas to the cluster. This will help test retry\n  policies with heterogenous clusters down the line and makes the\n  existing tests work with CompositeNetworkClient for now.", "committedDate": "2020-03-27T16:19:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODEzNA==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r399608134", "bodyText": "Use constant for \"replica\".  Do we want port and partition with no separator?", "author": "lightningrob", "createdAt": "2020-03-28T02:30:10Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "diffHunk": "@@ -40,18 +41,23 @@ public MockReplicaId(ReplicaType replicaType) {\n   public MockReplicaId(int port, MockPartitionId partitionId, MockDataNodeId dataNodeId, int indexOfMountPathToUse) {\n     this.partitionId = partitionId;\n     this.dataNodeId = dataNodeId;\n-    mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n-    File mountFile = new File(mountPath);\n-    File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n-    replicaFile.mkdir();\n-    replicaFile.deleteOnExit();\n-    if (mountPath.startsWith(\"/vcr\")) {\n+    if (dataNodeId.getMountPaths().isEmpty()) {\n+      // a data node with no mount paths is a virtual data node which holds cloud service replicas.\n       replicaType = ReplicaType.CLOUD_BACKED;\n     } else {\n-      replicaType = ReplicaType.DISK_BACKED;\n+      mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n+      File mountFile = new File(mountPath);\n+      File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);", "originalCommit": "d0b3e291447df64847c21d0b3430a1700d96856a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1Njk1Mw==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400556953", "bodyText": "This was from before (previously line 45). I will make the prefix a constant, but I'm not sure if anything depends on there not being a separator.", "author": "cgtz", "createdAt": "2020-03-30T23:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODE4Nw==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r399608187", "bodyText": "Would be nice to have const for this too, not sure where it's defined.", "author": "lightningrob", "createdAt": "2020-03-28T02:30:44Z", "path": "ambry-test-utils/src/main/java/com/github/ambry/clustermap/MockReplicaId.java", "diffHunk": "@@ -40,18 +41,23 @@ public MockReplicaId(ReplicaType replicaType) {\n   public MockReplicaId(int port, MockPartitionId partitionId, MockDataNodeId dataNodeId, int indexOfMountPathToUse) {\n     this.partitionId = partitionId;\n     this.dataNodeId = dataNodeId;\n-    mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n-    File mountFile = new File(mountPath);\n-    File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n-    replicaFile.mkdir();\n-    replicaFile.deleteOnExit();\n-    if (mountPath.startsWith(\"/vcr\")) {\n+    if (dataNodeId.getMountPaths().isEmpty()) {\n+      // a data node with no mount paths is a virtual data node which holds cloud service replicas.\n       replicaType = ReplicaType.CLOUD_BACKED;\n     } else {\n-      replicaType = ReplicaType.DISK_BACKED;\n+      mountPath = dataNodeId.getMountPaths().get(indexOfMountPathToUse);\n+      File mountFile = new File(mountPath);\n+      File replicaFile = new File(mountFile, \"replica\" + port + partitionId.partition);\n+      replicaFile.mkdir();\n+      replicaFile.deleteOnExit();\n+      if (mountPath.startsWith(\"/vcr\")) {", "originalCommit": "d0b3e291447df64847c21d0b3430a1700d96856a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTA3OA==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400565078", "bodyText": "Found that a constant already existed for it, so I used that one.", "author": "cgtz", "createdAt": "2020-03-31T00:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwODE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NzU2Nw==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400457567", "bodyText": "Minor: can you add a comment explaining why null is passed for notificationSystem?", "author": "lightningrob", "createdAt": "2020-03-30T19:59:42Z", "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,", "originalCommit": "d0b3e291447df64847c21d0b3430a1700d96856a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODQzNQ==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400458435", "bodyText": "Javadoc", "author": "lightningrob", "createdAt": "2020-03-30T20:01:21Z", "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,\n+            storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch, storeKeyConverterFactory);\n     return new RequestHandlerPool(serverConfig.serverRequestHandlerNumOfThreads, channel, requests);\n   }\n+\n+  private CompositeNetworkClientFactory getNetworkClientFactory(RequestHandlerPool requestHandlerPool,", "originalCommit": "d0b3e291447df64847c21d0b3430a1700d96856a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MDQ1Nw==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400460457", "bodyText": "Looks like this logic was copied from NonBlockingRouterFactory.  I'd prefer to see it reused somehow, though that can be done in a follow up.", "author": "lightningrob", "createdAt": "2020-03-30T20:04:59Z", "path": "ambry-router/src/main/java/com.github.ambry.router/CloudRouterFactory.java", "diffHunk": "@@ -168,10 +174,35 @@ static RequestHandlerPool getRequestHandlerPool(VerifiableProperties verifiableP\n     StoreKeyConverterFactory storeKeyConverterFactory =\n         Utils.getObj(serverConfig.serverStoreKeyConverterFactory, verifiableProperties, registry);\n     AmbryRequests requests =\n-        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null,\n-            notificationSystem, null, storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch,\n-            storeKeyConverterFactory);\n+        new AmbryRequests(cloudStorageManager, channel, clusterMap, nodeId, registry, serverMetrics, null, null, null,\n+            storeKeyFactory, serverConfig.serverEnableStoreDataPrefetch, storeKeyConverterFactory);\n     return new RequestHandlerPool(serverConfig.serverRequestHandlerNumOfThreads, channel, requests);\n   }\n+\n+  private CompositeNetworkClientFactory getNetworkClientFactory(RequestHandlerPool requestHandlerPool,\n+      MetricRegistry registry) {\n+    NetworkConfig networkConfig = new NetworkConfig(verifiableProperties);\n+    NetworkMetrics networkMetrics = new NetworkMetrics(registry);\n+    NetworkClientFactory cloudNetworkClientFactory =\n+        new LocalNetworkClientFactory((LocalRequestResponseChannel) requestHandlerPool.getChannel(), networkConfig,\n+            networkMetrics, time);\n+\n+    NetworkClientFactory diskNetworkClientFactory;\n+    if (new ClusterMapConfig(verifiableProperties).clusterMapHttp2NetworkClientEnabled) {\n+      Http2ClientConfig http2ClientConfig = new Http2ClientConfig(verifiableProperties);\n+      Http2ClientMetrics http2ClientMetrics = new Http2ClientMetrics(registry);\n+      diskNetworkClientFactory = new Http2NetworkClientFactory(http2ClientMetrics, http2ClientConfig, sslFactory, time);\n+    } else {\n+      diskNetworkClientFactory = new SocketNetworkClientFactory(networkMetrics, networkConfig, sslFactory,\n+          routerConfig.routerScalingUnitMaxConnectionsPerPortPlainText,\n+          routerConfig.routerScalingUnitMaxConnectionsPerPortSsl, routerConfig.routerConnectionCheckoutTimeoutMs, time);\n+    }", "originalCommit": "d0b3e291447df64847c21d0b3430a1700d96856a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NTkwOA==", "url": "https://github.com/linkedin/ambry/pull/1440#discussion_r400555908", "bodyText": "Made a static method in NonBlockingRouterFactory for this.", "author": "cgtz", "createdAt": "2020-03-30T23:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MDQ1Nw=="}], "type": "inlineReview"}, {"oid": "86fdce0db21cc61f188fd74fe242b3f575efc744", "url": "https://github.com/linkedin/ambry/commit/86fdce0db21cc61f188fd74fe242b3f575efc744", "message": "Integrate CompositeNetworkClient with CloudRouterFactory\n\nPrior to this change, CloudRouterFactory could only communicate with\ncloud services. This integrates CompositeNetworkClient which lets it\naddress both cloud service replicas and ambry-server replicas.\n\n- Fix a bug in CompositeNetworkClient. sendAndPoll on the child clients\n  needs to be called regardless of if there are new requests to send so\n  that any responses that come back are received in a timely manner.\n- Add support for the wakeup call to\n  LocalNetworkClient/LocalRequestResponseChannel. This allows a\n  sendAndPoll call to end before the timeout if the router indicates\n  that there is extra work to do (e.g. processing decrypted blobs)\n- Some MockClusterMap changes to support adding a datacenter with\n  CLOUD_BACKED replicas to the cluster. This will help test retry\n  policies with heterogenous clusters down the line and makes the\n  existing tests work with CompositeNetworkClient for now.", "committedDate": "2020-03-30T23:04:07Z", "type": "commit"}, {"oid": "03a5984cfc54dfa7651891c921f31168f9f61871", "url": "https://github.com/linkedin/ambry/commit/03a5984cfc54dfa7651891c921f31168f9f61871", "message": "Address Rob's comments", "committedDate": "2020-03-31T00:02:15Z", "type": "commit"}, {"oid": "03a5984cfc54dfa7651891c921f31168f9f61871", "url": "https://github.com/linkedin/ambry/commit/03a5984cfc54dfa7651891c921f31168f9f61871", "message": "Address Rob's comments", "committedDate": "2020-03-31T00:02:15Z", "type": "forcePushed"}]}