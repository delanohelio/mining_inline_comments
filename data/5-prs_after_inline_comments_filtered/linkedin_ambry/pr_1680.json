{"pr_number": 1680, "pr_title": "Check data integrity before loading sealed index segment to memory", "pr_createdAt": "2020-11-01T22:45:55Z", "pr_url": "https://github.com/linkedin/ambry/pull/1680", "timeline": [{"oid": "8de5a6d429f6c9c993f49a38e04ef20ad2527192", "url": "https://github.com/linkedin/ambry/commit/8de5a6d429f6c9c993f49a38e04ef20ad2527192", "message": "Check data integrity before loading sealed index segment to memory\n\nPreviously, sealed index segment is mapped to memory map/buffer without a full read.\nThis may ignore potential corrupted data. Recently, we saw corrupted index file being\nloaded to memory on production host and kept throwing exception on invalid data.\nThis PR adds an explicit full read ahead of mapping process to ensure file content and\nCRC value are correct.", "committedDate": "2020-11-03T04:50:51Z", "type": "commit"}, {"oid": "8de5a6d429f6c9c993f49a38e04ef20ad2527192", "url": "https://github.com/linkedin/ambry/commit/8de5a6d429f6c9c993f49a38e04ef20ad2527192", "message": "Check data integrity before loading sealed index segment to memory\n\nPreviously, sealed index segment is mapped to memory map/buffer without a full read.\nThis may ignore potential corrupted data. Recently, we saw corrupted index file being\nloaded to memory on production host and kept throwing exception on invalid data.\nThis PR adds an explicit full read ahead of mapping process to ensure file content and\nCRC value are correct.", "committedDate": "2020-11-03T04:50:51Z", "type": "forcePushed"}, {"oid": "1f35a6065b0c6f477ab794cb23164d90f53207d7", "url": "https://github.com/linkedin/ambry/commit/1f35a6065b0c6f477ab794cb23164d90f53207d7", "message": "minor change in unit test", "committedDate": "2020-11-03T04:57:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjE0Mg==", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516436142", "bodyText": "I would recommend to directly use serEntries initialized below to create a CrcInputStream for data integrity validation. This is good for two reasons: 1. We don't have to read the file twice(although the second read would be just a memory copy) 2. We can deal with FileNotFoundException in the same manner.", "author": "justinlin-linkedin", "createdAt": "2020-11-03T05:35:47Z", "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -823,8 +824,9 @@ IndexValue getIndexValueOfLastPut() throws StoreException {\n    * Maps the segment of index either as a memory map or a in memory buffer depending on config.\n    * @throws StoreException if there are problems with the index\n    */\n-  private void map() throws StoreException {\n+  private void map() throws StoreException, FileNotFoundException {\n     rwLock.writeLock().lock();\n+    checkDataIntegrity(indexFile);", "originalCommit": "1f35a6065b0c6f477ab794cb23164d90f53207d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MzQxNw==", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516873417", "bodyText": "Sure,  I use serEntries to check data integrity in latest commit. For non-heap buffer, I don't find a good way to avoid bytes transfer (as you can see I still transfer bytes to a heap bytes array for crc calculation). Let me know if you have better idea, thanks.", "author": "jsjtzyy", "createdAt": "2020-11-03T18:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjE0Mg=="}], "type": "inlineReview"}, {"oid": "ee433e43798bbefc1881e20cc177b70e3fbe06e3", "url": "https://github.com/linkedin/ambry/commit/ee433e43798bbefc1881e20cc177b70e3fbe06e3", "message": "address comment", "committedDate": "2020-11-03T18:26:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng==", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516897296", "bodyText": "actually you don't have to copy bytebuffer to an byte array, Crc32 has a method to update CRC with ByteBuffer directly and it doesn't matter if it's heap bytebuffer or direct bytebuffer.", "author": "justinlin-linkedin", "createdAt": "2020-11-03T19:13:05Z", "path": "ambry-store/src/main/java/com/github/ambry/store/IndexSegment.java", "diffHunk": "@@ -1010,11 +1009,37 @@ private void readFromFile(File fileToRead, Journal journal) throws StoreExceptio\n     }\n   }\n \n+  /**\n+   * Check data integrity of index file (represented by byte buffer). This methods computes crc of byte buffer and\n+   * compares it with crc value at the end of file.\n+   * @throws StoreException\n+   */\n+  private void checkDataIntegrity() throws StoreException {\n+    byte[] byteArray;\n+    if (serEntries.hasArray()) {\n+      // this is for heap buffer only\n+      byteArray = serEntries.array();\n+    } else {\n+      // this is for non-heap (direct) buffer\n+      serEntries.position(0);\n+      byteArray = new byte[serEntries.capacity()];\n+      serEntries.get(byteArray, 0, serEntries.capacity());\n+    }\n+    Crc32 crc = new Crc32();\n+    crc.update(byteArray, 0, byteArray.length - CRC_FIELD_LENGTH);", "originalCommit": "ee433e43798bbefc1881e20cc177b70e3fbe06e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMTE3Ng==", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516901176", "bodyText": "True, there is a method to update CRC with ByteBuffer. However, we should exclude the last 8 bytes in buffer to calculate CRC, right?  How can we do that with that method?", "author": "jsjtzyy", "createdAt": "2020-11-03T19:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNjIzOA==", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516906238", "bodyText": "You can do this by setting the limit on the ByteBuffer before calling the CRC method.", "author": "cgtz", "createdAt": "2020-11-03T19:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyMDYwNw==", "url": "https://github.com/linkedin/ambry/pull/1680#discussion_r516920607", "bodyText": "Thank you @justinlin-linkedin and @cgtz , the code should be more concise now.", "author": "jsjtzyy", "createdAt": "2020-11-03T19:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzI5Ng=="}], "type": "inlineReview"}, {"oid": "e6513db3add950d2496cc48b1dac647d9dfefbf2", "url": "https://github.com/linkedin/ambry/commit/e6513db3add950d2496cc48b1dac647d9dfefbf2", "message": "use slice() method to get buffer to compute crc", "committedDate": "2020-11-03T19:51:51Z", "type": "commit"}]}