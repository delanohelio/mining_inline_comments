{"pr_number": 1681, "pr_title": "Add Metrics to help with tracking availability of MySql used for AccountService.", "pr_createdAt": "2020-11-02T21:10:15Z", "pr_url": "https://github.com/linkedin/ambry/pull/1681", "timeline": [{"oid": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "url": "https://github.com/linkedin/ambry/commit/58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "message": "Metrics for tracking availability of MySqlDB and tracking difference in accounts in CompositeAccountService.", "committedDate": "2020-11-02T21:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNTM2NA==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516435364", "bodyText": "What about containers?", "author": "lightningrob", "createdAt": "2020-11-03T05:32:04Z", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "diffHunk": "@@ -163,7 +160,7 @@ public static boolean compareAccounts(Collection<Account> accountsInPrimary,\n         logger.warn(\"Accounts mismatch in primary and secondary = {}\", accountsInfo.toString());\n       }\n     }\n-    return isSame;\n+    return accountsMissingInSecondary.size() + accountsDifferentInSecondary.size();", "originalCommit": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjUwMg==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516436502", "bodyText": "It might suffice to check if e instanceof SQLTransientConnectionException as above.  Are there cases that wouldn't handle?", "author": "lightningrob", "createdAt": "2020-11-03T05:37:38Z", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlDataAccessor.java", "diffHunk": "@@ -143,11 +153,34 @@ public static boolean isCredentialError(SQLException e) {\n   /**\n    * Handle a SQL exception on a database operation.\n    * @param e the {@link SQLException} encountered.\n+   * @param operationType type of mysql operation\n    */\n-  void onException(SQLException e) {\n+  void onException(SQLException e, OperationType operationType) {\n     if (e instanceof SQLTransientConnectionException) {\n       reset();\n     }\n+    if (!(e instanceof SQLIntegrityConstraintViolationException || isCredentialError(e))) {", "originalCommit": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNjkyMA==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516436920", "bodyText": "javadoc", "author": "lightningrob", "createdAt": "2020-11-03T05:39:48Z", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStoreMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.github.ambry.account.mysql;\n+\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Histogram;\n+import com.codahale.metrics.MetricRegistry;\n+\n+\n+public class MySqlAccountStoreMetrics {", "originalCommit": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzAzMA==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516437030", "bodyText": "copyright header", "author": "lightningrob", "createdAt": "2020-11-03T05:40:17Z", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/MySqlAccountStoreMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.github.ambry.account.mysql;", "originalCommit": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzE3NQ==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516437175", "bodyText": "Minor: import static MySqlDataAccessor.OperationType", "author": "lightningrob", "createdAt": "2020-11-03T05:41:06Z", "path": "ambry-account/src/main/java/com/github/ambry/account/mysql/AccountDao.java", "diffHunk": "@@ -61,12 +61,14 @@ public AccountDao(MySqlDataAccessor dataAccessor) {\n    */\n   public void addAccount(Account account) throws SQLException {\n     try {\n+      long startTimeMs = System.currentTimeMillis();\n       PreparedStatement insertStatement = dataAccessor.getPreparedStatement(insertSql);\n       insertStatement.setString(1, AccountCollectionSerde.accountToJsonNoContainers(account).toString());\n       insertStatement.setInt(2, account.getSnapshotVersion());\n       insertStatement.executeUpdate();\n+      dataAccessor.onSuccess(MySqlDataAccessor.OperationType.Write, System.currentTimeMillis() - startTimeMs);\n     } catch (SQLException e) {\n-      dataAccessor.onException(e);\n+      dataAccessor.onException(e, MySqlDataAccessor.OperationType.Write);", "originalCommit": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzI4NQ==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r516437285", "bodyText": "Minor: can omit comment", "author": "lightningrob", "createdAt": "2020-11-03T05:41:40Z", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountServiceMetrics.java", "diffHunk": "@@ -47,10 +49,15 @@\n   public final Counter accountUpdatesToAmbryServerErrorCount;\n   public final Counter accountDeletesToAmbryServerErrorCount;\n   public final Counter accountFetchFromAmbryServerErrorCount;\n-  public final Counter accountDataInconsistencyCount;\n   public final Counter accountUpdatesToStoreErrorCount;\n \n+  //Gauge", "originalCommit": "58a23b1abfc9d9fa351c3a8a0a3502938571bb2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1cc462060dcdfa204fb43b0620915b02a07dc8cc", "url": "https://github.com/linkedin/ambry/commit/1cc462060dcdfa204fb43b0620915b02a07dc8cc", "message": "Address Rob's comments", "committedDate": "2020-11-04T03:29:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUyMTMwMA==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517521300", "bodyText": "You may need to add accountsDifferentInSecondary.size() if the difference is in account properties rather than containers, though that might be a rare case at the moment.", "author": "lightningrob", "createdAt": "2020-11-04T17:44:14Z", "path": "ambry-account/src/main/java/com/github/ambry/account/AccountUtils.java", "diffHunk": "@@ -105,6 +106,7 @@ public static int compareAccounts(Collection<Account> accountsInPrimary, Collect\n         }\n         accountsInfo.append(\"]\");\n         logger.warn(\"Accounts found in primary and absent in secondary = {}\", accountsInfo.toString());\n+        mismatchCount += accountsMissingInSecondary.size();", "originalCommit": "1cc462060dcdfa204fb43b0620915b02a07dc8cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8776a32a481dc013ecf12387ae8cb429df39da0d", "url": "https://github.com/linkedin/ambry/commit/8776a32a481dc013ecf12387ae8cb429df39da0d", "message": "Fix unit tests", "committedDate": "2020-11-04T19:38:49Z", "type": "commit"}, {"oid": "71e1b7fb9cb16c76edff8be98c15cc9104e56f62", "url": "https://github.com/linkedin/ambry/commit/71e1b7fb9cb16c76edff8be98c15cc9104e56f62", "message": "Fix compilation error in DatabaseTest and MySqlAccountsDBTool", "committedDate": "2020-11-04T20:25:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjc5Nw==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517662797", "bodyText": "Minor question: do we really need to keep track of accurate mismatch count?  I see this value increases only and never decreases (It's a Gauge type in the metrics). I think maybe an error counter is sufficient. There are some transient cases where two AS are inconsistent but they may quickly converge.", "author": "jsjtzyy", "createdAt": "2020-11-04T22:15:19Z", "path": "ambry-account/src/main/java/com/github/ambry/account/CompositeAccountService.java", "diffHunk": "@@ -40,20 +41,20 @@\n   private static final String ACCOUNT_DATA_CONSISTENCY_CHECKER_PREFIX = \"account-data-consistency-checker\";\n   private final AccountService primaryAccountService;\n   private final AccountService secondaryAccountService;\n-  private final AccountServiceMetrics accountServiceMetrics;\n   private final CompositeAccountServiceConfig config;\n   private final ScheduledExecutorService scheduler;\n   private static final Random random = new Random();\n+  private AtomicInteger accountsMismatchCount = new AtomicInteger(0);", "originalCommit": "71e1b7fb9cb16c76edff8be98c15cc9104e56f62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MDQ2MA==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517670460", "bodyText": "It should be reset to 0 before each compare is made.  If it isn't that needs to be added.", "author": "lightningrob", "createdAt": "2020-11-04T22:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MjE4NQ==", "url": "https://github.com/linkedin/ambry/pull/1681#discussion_r517672185", "bodyText": "The value is set in this line:\naccountsMismatchCount.set( AccountUtils.compareAccounts(primaryAccountService.getAllAccounts(), secondaryAccountService.getAllAccounts())); \nBut there are other places where it gets incremented that don't make sense for a guage.", "author": "lightningrob", "createdAt": "2020-11-04T22:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2Mjc5Nw=="}], "type": "inlineReview"}, {"oid": "2df43c2c945ec77ba9dfd67ae6914c91ad6b3f65", "url": "https://github.com/linkedin/ambry/commit/2df43c2c945ec77ba9dfd67ae6914c91ad6b3f65", "message": "Use separate counter for accounts mismatch during GET operations", "committedDate": "2020-11-05T00:55:32Z", "type": "commit"}]}