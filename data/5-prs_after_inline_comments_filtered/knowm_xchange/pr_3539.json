{"pr_number": 3539, "pr_title": "[Streaming] Convert Coinmate streaming service to use new Pushpin API", "pr_createdAt": "2020-05-26T09:03:41Z", "pr_url": "https://github.com/knowm/XChange/pull/3539", "timeline": [{"oid": "e61adf012a7202fa0d26fcbce7d3a6a9c5addeee", "url": "https://github.com/knowm/XChange/commit/e61adf012a7202fa0d26fcbce7d3a6a9c5addeee", "message": "Merge pull request #5 from knowm/develop\n\nupstream update", "committedDate": "2020-05-20T14:14:44Z", "type": "commit"}, {"oid": "f436deb75f92f34a8f3960417abaea321a0e659e", "url": "https://github.com/knowm/XChange/commit/f436deb75f92f34a8f3960417abaea321a0e659e", "message": "convert coimate to new pushpin websocket api", "committedDate": "2020-05-26T09:00:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1NjUzMQ==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431656531", "bodyText": "nit: can collapse all this down to an expression lambda", "author": "badgerwithagun", "createdAt": "2020-05-28T08:09:35Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingAccountService.java", "diffHunk": "@@ -67,16 +66,15 @@ public CoinmateStreamingAccountService(PusherStreamingService service, String us\n   }\n \n   private Observable<Map<String, CoinmateWebsocketBalance>> getCoinmateBalances() {\n-    String channelName = \"private-user_balances-\" + userId;\n+    String channelName = \"channel/my-balances\";\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<Map<String, CoinmateWebsocketBalance>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, true);\n \n-    return service\n-        .subscribeChannel(channelName, \"user_balances\")\n+    return service.subscribeMessages()\n         .map(\n             (message) -> {\n-              Map<String, CoinmateWebsocketBalance> balanceMap =\n-                  StreamingObjectMapperHelper.getObjectMapper()\n-                      .readValue(\n-                          message, new TypeReference<Map<String, CoinmateWebsocketBalance>>() {});\n+              Map<String, CoinmateWebsocketBalance> balanceMap = reader.readValue(message.get(\"balances\"));", "originalCommit": "f436deb75f92f34a8f3960417abaea321a0e659e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzU5OQ==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432547599", "bodyText": "Thanks, fixed", "author": "stachon", "createdAt": "2020-05-29T15:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1NjUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1OTczNw==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431659737", "bodyText": "This could also be achieved be expecting the ProductSubscriptions to be passed on connect(), in the same way as BinanceStreamingExchange.  I think this is better, since it removes the need to disconnect/reconnect to change subscriptions - something that always confuses Binance users - but we should be aware we're doing it (and probably move Binance to this approach instead and get rid of ProductSubscription)\nSomething to think about.", "author": "badgerwithagun", "createdAt": "2020-05-28T08:15:09Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,", "originalCommit": "f436deb75f92f34a8f3960417abaea321a0e659e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431663555", "bodyText": "A few problems here:\n\nSince the socket is scoped to a single subscription, there needs to be an onDispose in all these methods to close the StreamingService when the Observable is disposed\nHowever, it's not a great idea to scope a socket to a single subscription.  The pattern used elsewhere is that the Observables are share()ed, so if multiple subscriptions are made, the separate subscribers share the same socket. What I think you need to do here is maintain a ConcurrentMap of CoinmateStreamingService, re-use the existing one if it already exists and use Observable.using() to close the socket when the last subscriber disposes.", "author": "badgerwithagun", "createdAt": "2020-05-28T08:21:45Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingMarketDataService.java", "diffHunk": "@@ -51,22 +51,20 @@\n \n   @Override\n   public Observable<Trade> getTrades(CurrencyPair currencyPair, Object... args) {\n-    String channelName = \"trades-\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+    String channelName = \"channel/trades/\" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n+\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper().readerFor(new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, false);\n \n-    return service\n-        .subscribeChannel(channelName, \"new_trades\")\n+    return service.subscribeMessages()\n         .map(\n             s -> {\n-              ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n-              List<CoinmateWebSocketTrade> list =\n-                  mapper.readValue(s, new TypeReference<List<CoinmateWebSocketTrade>>() {});\n+              List<CoinmateWebSocketTrade> list = reader.readValue(s);\n               return list;\n             })\n         .flatMapIterable(coinmateWebSocketTrades -> coinmateWebSocketTrades)\n         .map(\n-            coinmateWebSocketTrade ->\n-                CoinmateAdapters.adaptTrade(\n-                    coinmateWebSocketTrade.toTransactionEntry(\n-                        CoinmateUtils.getPair(currencyPair))));\n+            coinmateWebSocketTrade -> CoinmateStreamingAdapter.adaptTrade(coinmateWebSocketTrade, currencyPair)", "originalCommit": "f436deb75f92f34a8f3960417abaea321a0e659e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MTc3NA==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432551774", "bodyText": "Thanks for the suggestions, I am not that good with RxJava, so I am struggling to implement this. I made something like this, to handle both the locking and reusing of connections, but it only works for the first subscriber. I was thinking maybe a ReplaySubject would disposing work with it?\nprivate ConcurrentMap<String, Observable<CoinmateStreamingService>> serviceMap;\n  private static Lock connectionLock = new ReentrantLock();\n  private Scheduler scheduler = Schedulers.single();\n  public Observable<CoinmateStreamingService> createConnection(String endpoint, boolean needsAuth) {\n    String url = baseUrl + \"/\" + endpoint;\n    CoinmateStreamingService service;\n\n    if (serviceMap.containsKey(url)) {\n      return serviceMap.get(url);\n    } else {\n      String authUrl = url;\n      // append auth parameters if necessary\n      if (needsAuth && authParams != null) {\n        authUrl += \"?\" + authParams.toParams();\n      }\n      service = new CoinmateStreamingService(authUrl);\n\n      Observable<CoinmateStreamingService> observable = Observable.using(\n          () -> service,\n          s -> Completable.fromAction(() -> connectionLock.lock())\n              .subscribeOn(scheduler)\n              .andThen(s.connect())\n              .observeOn(scheduler)\n              .doFinally(() -> {\n                connectionLock.unlock();\n              }).andThen(Observable.just(s)),\n          s -> s.disconnect()\n      ).share();\n\n      serviceMap.put(url, observable);\n\n      return observable;\n    }\n  }", "author": "stachon", "createdAt": "2020-05-29T15:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1ODU5NA==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432558594", "bodyText": "It's not a case for ReplaySubject.  You're almost there. I;ll try and have a look at this when I get some time.", "author": "badgerwithagun", "createdAt": "2020-05-29T15:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3MzQ3Mw==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r435373473", "bodyText": "Eventually I used a slightly different approach", "author": "stachon", "createdAt": "2020-06-04T16:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2MzU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431664208", "bodyText": "I don't think you want or need the PublishSubject here. The existing channel subscription approach should work fine. Did you hit problems with it?", "author": "badgerwithagun", "createdAt": "2020-05-28T08:22:48Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;", "originalCommit": "f436deb75f92f34a8f3960417abaea321a0e659e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MjEyOQ==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r432552129", "bodyText": "You are right, channel subscription with a fake channel name works as well.", "author": "stachon", "createdAt": "2020-05-29T15:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3Mzk0Mg==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r435373942", "bodyText": "Actually, channel subscriptions only work for the first subscriber, so I reverted to using PublishSubject", "author": "stachon", "createdAt": "2020-06-04T16:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTcxMA==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289710", "bodyText": "As long as they are created with share() they should work for multiple subscribers. I have plenty of code in my application that does this.\nI suspect the problem was something else.  Could you try putting up your code that uses normal channel subscriptions?  I may be able to help pinpoint the issue.", "author": "badgerwithagun", "createdAt": "2020-06-06T18:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NDIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NTk2MQ==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431665961", "bodyText": "Rather than blocking the calling thread, which breaks the RX guarantee, how about this:\n\nUse a static Lock to prevent concurrent connections\nReturn Completable<CoinmateStreamingService> from this method (i.e. just return the result of service.connect())\n\nThe, the parent service's connect() method will work asynchronously as expected.", "author": "badgerwithagun", "createdAt": "2020-05-28T08:25:40Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import info.bitrich.xchangestream.coinmate.CoinmateStreamingService;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+\n+public class CoinmateStreamingServiceFactory {\n+\n+  private AuthParams authParams;\n+  private String baseUrl;\n+\n+  public CoinmateStreamingServiceFactory(String baseUrl, AuthParams authParams) {\n+    this.baseUrl = baseUrl;\n+    this.authParams = authParams;\n+  }\n+\n+  public CoinmateStreamingService createAndConnect(String endpoint, boolean needsAuth) {\n+    String url = baseUrl + \"/\" + endpoint;\n+    if (needsAuth && authParams != null) {\n+      url += \"?\" + authParams.toParams();\n+    }\n+    CoinmateStreamingService service = new CoinmateStreamingService(url);\n+    // block until connected, because of nonce conflicts when connecting to multiple channels\n+    service.connect().blockingAwait();", "originalCommit": "f436deb75f92f34a8f3960417abaea321a0e659e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY2NjgzNw==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r431666837", "bodyText": "Ditto", "author": "badgerwithagun", "createdAt": "2020-05-28T08:27:07Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingTradeService.java", "diffHunk": "@@ -1,65 +1,66 @@\n package info.bitrich.xchangestream.coinmate;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectReader;\n import info.bitrich.xchangestream.coinmate.dto.CoinmateWebSocketUserTrade;\n import info.bitrich.xchangestream.coinmate.dto.CoinmateWebsocketOpenOrder;\n import info.bitrich.xchangestream.core.StreamingTradeService;\n import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper;\n-import info.bitrich.xchangestream.service.pusher.PusherStreamingService;\n import io.reactivex.Observable;\n-import java.util.List;\n import org.knowm.xchange.currency.CurrencyPair;\n import org.knowm.xchange.dto.Order;\n import org.knowm.xchange.dto.trade.OpenOrders;\n import org.knowm.xchange.dto.trade.UserTrade;\n import org.knowm.xchange.dto.trade.UserTrades;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n public class CoinmateStreamingTradeService implements StreamingTradeService {\n \n-  private final PusherStreamingService service;\n-  private final String userId;\n+  private final CoinmateStreamingServiceFactory serviceFactory;\n \n-  public CoinmateStreamingTradeService(PusherStreamingService service, String userId) {\n-    this.service = service;\n-    this.userId = userId;\n+  public CoinmateStreamingTradeService(CoinmateStreamingServiceFactory serviceFactory) {\n+    this.serviceFactory = serviceFactory;\n   }\n \n   @Override\n   public Observable<Order> getOrderChanges(CurrencyPair currencyPair, Object... args) {\n     String channelName =\n-        \"private-open_orders-\"\n-            + userId\n-            + \"-\"\n+        \"channel/my-open-orders/\"\n             + CoinmateStreamingAdapter.getChannelPostfix(currencyPair);\n \n-    return service\n-        .subscribePrivateChannel(channelName, \"open_orders\")\n+    ObjectReader reader = StreamingObjectMapperHelper.getObjectMapper()\n+        .readerFor(CoinmateWebsocketOpenOrder.class);\n+\n+    CoinmateStreamingService service = serviceFactory.createAndConnect(channelName, true);", "originalCommit": "f436deb75f92f34a8f3960417abaea321a0e659e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fabd182d110856143725934667ceeeab995adbf4", "url": "https://github.com/knowm/XChange/commit/fabd182d110856143725934667ceeeab995adbf4", "message": "collapse lambda expression", "committedDate": "2020-05-29T08:51:04Z", "type": "commit"}, {"oid": "855232d0a1af61982816f515eae6ff46ea3d105f", "url": "https://github.com/knowm/XChange/commit/855232d0a1af61982816f515eae6ff46ea3d105f", "message": "Merge branch 'develop' of https://github.com/knowm/XChange into coinmate-change-websockets", "committedDate": "2020-06-04T12:07:50Z", "type": "commit"}, {"oid": "615d045c729e66e44c56adbe569e6a0db1dc7ace", "url": "https://github.com/knowm/XChange/commit/615d045c729e66e44c56adbe569e6a0db1dc7ace", "message": "better handling of connection sharing, some cleanups", "committedDate": "2020-06-04T16:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc0Mw==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289743", "bodyText": "I think this should return whatever the channel this service represents (so pass in the channel name as a constructor argument).  That way subscribeChannel will work normally.", "author": "badgerwithagun", "createdAt": "2020-06-06T18:24:44Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;", "originalCommit": "615d045c729e66e44c56adbe569e6a0db1dc7ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNTQyMg==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436705422", "bodyText": "You are right. I changed it back to subscribeChannel and it works now.", "author": "stachon", "createdAt": "2020-06-08T13:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289763", "bodyText": "Better to throw new UnsupportedOperationException()", "author": "badgerwithagun", "createdAt": "2020-06-06T18:24:49Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;", "originalCommit": "615d045c729e66e44c56adbe569e6a0db1dc7ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDQwOQ==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436700409", "bodyText": "An exception thrown here would be sent down the Observable chain in subscribeChannel", "author": "stachon", "createdAt": "2020-06-08T13:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MTI3Ng==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r437061276", "bodyText": "It would get caught and logged, but returning null from getSubscribeMessage eventually gets handled properly in sendMessage, binance follows the same pattern.", "author": "nielsdraaisma", "createdAt": "2020-06-08T23:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NDUyNg==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r437184526", "bodyText": "https://github.com/knowm/XChange/blob/develop/xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java#L378", "author": "stachon", "createdAt": "2020-06-09T07:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2NA==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436289764", "bodyText": "Better to throw new UnsupportedOperationException()", "author": "badgerwithagun", "createdAt": "2020-06-06T18:24:53Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {\n+\n+  private PublishSubject<JsonNode> messages;\n+\n+  CoinmateStreamingService(String url) {\n+    super(url);\n+    this.messages = PublishSubject.create();\n+  }\n+\n+  @Override\n+  protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSubscribeMessage(String channelName, Object... args) throws IOException {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getUnsubscribeMessage(String channelName) throws IOException {", "originalCommit": "615d045c729e66e44c56adbe569e6a0db1dc7ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMTA3Mg==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436701072", "bodyText": "This would generate a warning log when disposing.", "author": "stachon", "createdAt": "2020-06-08T13:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDEzNg==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436290136", "bodyText": "Doesn't need to be public, I think", "author": "badgerwithagun", "createdAt": "2020-06-06T18:30:26Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingServiceFactory.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class CoinmateStreamingServiceFactory {", "originalCommit": "615d045c729e66e44c56adbe569e6a0db1dc7ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDc2Ng==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436690766", "bodyText": "Thanks", "author": "stachon", "createdAt": "2020-06-08T13:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDE0Nw==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436290147", "bodyText": "I don't think this needs to be public.", "author": "badgerwithagun", "createdAt": "2020-06-06T18:30:38Z", "path": "xchange-stream-coinmate/src/main/java/info/bitrich/xchangestream/coinmate/CoinmateStreamingService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package info.bitrich.xchangestream.coinmate;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinmate.dto.auth.AuthParams;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.PublishSubject;\n+import sun.rmi.runtime.Log;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The new API uses one WebSocket connection per channel, unlike other exchanges,\n+ * which use channels over one WebSocket. This is a hack to use JsonNettyStreamingService as\n+ * single channel source.\n+ */\n+public class CoinmateStreamingService extends JsonNettyStreamingService {", "originalCommit": "615d045c729e66e44c56adbe569e6a0db1dc7ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDg0Ng==", "url": "https://github.com/knowm/XChange/pull/3539#discussion_r436690846", "bodyText": "Thanks", "author": "stachon", "createdAt": "2020-06-08T13:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDE0Nw=="}], "type": "inlineReview"}, {"oid": "1d6b84c29baaa50c25c2ee8a6108d89a845bdd61", "url": "https://github.com/knowm/XChange/commit/1d6b84c29baaa50c25c2ee8a6108d89a845bdd61", "message": "code review suggestions", "committedDate": "2020-06-08T13:33:10Z", "type": "commit"}, {"oid": "869789429f28540f1cbf109658531758b1734665", "url": "https://github.com/knowm/XChange/commit/869789429f28540f1cbf109658531758b1734665", "message": "use endpoint as channel name", "committedDate": "2020-06-08T13:38:02Z", "type": "commit"}]}