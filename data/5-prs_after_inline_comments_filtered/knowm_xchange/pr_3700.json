{"pr_number": 3700, "pr_title": "Merge Develop", "pr_createdAt": "2020-09-10T13:36:11Z", "pr_url": "https://github.com/knowm/XChange/pull/3700", "timeline": [{"oid": "b0666575426866f30d2a0ef951380b8da385c584", "url": "https://github.com/knowm/XChange/commit/b0666575426866f30d2a0ef951380b8da385c584", "message": "Merge pull request #9 from knowm/develop\n\nmerge", "committedDate": "2020-07-29T19:18:00Z", "type": "commit"}, {"oid": "aafff91e06eec54e2c71e9c2eec2fbb562dee472", "url": "https://github.com/knowm/XChange/commit/aafff91e06eec54e2c71e9c2eec2fbb562dee472", "message": "Merge pull request #10 from mdvx/Gemini-Stream-Fix\n\nGemini stream fix", "committedDate": "2020-07-29T19:23:09Z", "type": "commit"}, {"oid": "1ec08af1b5b8cd26f064ccdc62068b503b92f6dc", "url": "https://github.com/knowm/XChange/commit/1ec08af1b5b8cd26f064ccdc62068b503b92f6dc", "message": "[Gemini] Implement getTicker using top of orderbook", "committedDate": "2020-08-02T12:32:31Z", "type": "commit"}, {"oid": "c1bfdb45b74fd83aa8f1d9dd753fe40bfefefbe3", "url": "https://github.com/knowm/XChange/commit/c1bfdb45b74fd83aa8f1d9dd753fe40bfefefbe3", "message": "[Gemini] Implement getTicker using top of orderbook - reformat", "committedDate": "2020-08-02T12:43:04Z", "type": "commit"}, {"oid": "037f6e14df24a4427a0e72c373b8fa9d4eb41194", "url": "https://github.com/knowm/XChange/commit/037f6e14df24a4427a0e72c373b8fa9d4eb41194", "message": "[Gemini] Implement getTicker using top of orderbook - cascade errors", "committedDate": "2020-08-02T12:45:43Z", "type": "commit"}, {"oid": "b272f3d240280b6a265d44b45872f03544e394a3", "url": "https://github.com/knowm/XChange/commit/b272f3d240280b6a265d44b45872f03544e394a3", "message": "[Gemini] Implement getTicker using top of orderbook - reformat - cascade errors", "committedDate": "2020-08-02T12:53:51Z", "type": "commit"}, {"oid": "66823c75b0a862f2e63e2d3b329665e5f55b2164", "url": "https://github.com/knowm/XChange/commit/66823c75b0a862f2e63e2d3b329665e5f55b2164", "message": "[Bitmex] getStreamingService public plus extra access to tables\ngetTradeHistory in reverse order", "committedDate": "2020-08-11T02:08:45Z", "type": "commit"}, {"oid": "91629d291e194bef0eddcce4a7173c1fce8bda67", "url": "https://github.com/knowm/XChange/commit/91629d291e194bef0eddcce4a7173c1fce8bda67", "message": "[BitstampTradeService] getBitstampOpenOrders fixed", "committedDate": "2020-08-11T02:09:42Z", "type": "commit"}, {"oid": "9c206d171d1d434fe6599610f8a9eba7a82db53f", "url": "https://github.com/knowm/XChange/commit/9c206d171d1d434fe6599610f8a9eba7a82db53f", "message": "Bitstamp openOrders", "committedDate": "2020-08-11T02:14:03Z", "type": "commit"}, {"oid": "2f0b84b6d79c7836ae943b8238ebf880f5151899", "url": "https://github.com/knowm/XChange/commit/2f0b84b6d79c7836ae943b8238ebf880f5151899", "message": "Merge pull request #11 from knowm/develop\n\nmerge", "committedDate": "2020-08-15T18:03:39Z", "type": "commit"}, {"oid": "cdae5130174659c9f75aee42d6fbeb0b06d9861a", "url": "https://github.com/knowm/XChange/commit/cdae5130174659c9f75aee42d6fbeb0b06d9861a", "message": "[Gemini] fix adaptCurrencyPair for LINK/USD or 4/3", "committedDate": "2020-08-31T16:40:25Z", "type": "commit"}, {"oid": "1f8781bcac3010fe05bfed5ce65316c1dfe7958b", "url": "https://github.com/knowm/XChange/commit/1f8781bcac3010fe05bfed5ce65316c1dfe7958b", "message": "[Gemini] priceScales for extra currencies", "committedDate": "2020-09-01T22:59:53Z", "type": "commit"}, {"oid": "38c7d5e9ccb4bbdf60b672651bafd89a20237ea0", "url": "https://github.com/knowm/XChange/commit/38c7d5e9ccb4bbdf60b672651bafd89a20237ea0", "message": "merge from develop", "committedDate": "2020-09-01T23:54:28Z", "type": "commit"}, {"oid": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c", "url": "https://github.com/knowm/XChange/commit/f64e5818b289b1d5b4cc2931633ac5d166f56b1c", "message": "Merge branch 'develop' into develop", "committedDate": "2020-09-10T13:37:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjUwMw==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r486396503", "bodyText": "would this make more sense as a switch, and if not at least having the constant on the left side of the equality comparison for NPE protection?", "author": "earce", "createdAt": "2020-09-10T14:37:38Z", "path": "xchange-stream-bitmex/src/main/java/info/bitrich/xchangestream/bitmex/BitmexStreamingService.java", "diffHunk": "@@ -194,7 +200,12 @@ protected DefaultHttpHeaders getCustomHeaders() {\n   @Override\n   protected String getChannelNameFromMessage(JsonNode message) throws IOException {\n     String table = message.get(\"table\").asText();\n-    if (\"order\".equals(table) || \"funding\".equals(table) || \"position\".equals(table)) {\n+    if (table.equals(\"order\")", "originalCommit": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNzUzMQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r491737531", "bodyText": "having a private static final Set<String> SIMPLE_TABLES = ImmutableSet.of(..)\nand just doing if (SIMPLE_TABLES.contains(table)) { would be better", "author": "walec51", "createdAt": "2020-09-20T21:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4MzE5OQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509783199", "bodyText": "I like ImmutableSet.of()", "author": "mdvx", "createdAt": "2020-10-21T23:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NjUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMTkyMg==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r486401922", "bodyText": "can this new ArrayList<>() be created after the getBitstampOpenOrders() and using the openOrders.length to size the array?", "author": "earce", "createdAt": "2020-09-10T14:44:38Z", "path": "xchange-bitstamp/src/main/java/org/knowm/xchange/bitstamp/service/BitstampTradeService.java", "diffHunk": "@@ -43,28 +53,28 @@ public OpenOrders getOpenOrders() throws IOException, BitstampException {\n \n   @Override\n   public OpenOrders getOpenOrders(OpenOrdersParams params) throws ExchangeException, IOException {\n-    Collection<CurrencyPair> pairs = DefaultOpenOrdersParamCurrencyPair.getPairs(params, exchange);\n+\n     List<LimitOrder> limitOrders = new ArrayList<>();\n-    for (CurrencyPair pair : pairs) {\n-      BitstampOrder[] openOrders = getBitstampOpenOrders(pair);\n-      for (BitstampOrder bitstampOrder : openOrders) {\n-        OrderType orderType = bitstampOrder.getType() == 0 ? OrderType.BID : OrderType.ASK;\n-        String id = Long.toString(bitstampOrder.getId());\n-        BigDecimal price = bitstampOrder.getPrice();\n-        limitOrders.add(\n-            new LimitOrder(\n-                orderType,\n-                bitstampOrder.getAmount(),\n-                pair,\n-                id,\n-                bitstampOrder.getDatetime(),\n-                price,\n-                null, // avgPrice\n-                null, // cumAmount\n-                null, // fee\n-                Order.OrderStatus.NEW));\n-      }\n+", "originalCommit": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4NDc2MQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509784761", "bodyText": "yeah, that works", "author": "mdvx", "createdAt": "2020-10-21T23:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwMTkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjI2OQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r486406269", "bodyText": "this could potentially break downstream users expecting the oldest rows first, does it make more sense to add a param to BitmexTradeHistoryParams which uses could explicitly toggle and have the default set to something?", "author": "earce", "createdAt": "2020-09-10T14:50:08Z", "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/service/BitmexTradeService.java", "diffHunk": "@@ -187,7 +194,7 @@ public UserTrades getTradeHistory(TradeHistoryParams params) throws IOException\n     }\n \n     List<UserTrade> userTrades =\n-        getTradeHistory(symbol, null, null, count, start, false, startTime, endTime).stream()\n+        getTradeHistory(symbol, null, null, count, start, true, startTime, endTime).stream()", "originalCommit": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4NzExOA==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509787118", "bodyText": "maintains backward compat\nboolean reverse = (params instanceof TradeHistoryParamsSorted)\n    && ((TradeHistoryParamsSorted) params).getOrder() == TradeHistoryParamsSorted.Order.desc;", "author": "mdvx", "createdAt": "2020-10-21T23:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwNjI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk3NA==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r491736974", "bodyText": "why is this not final any more?", "author": "walec51", "createdAt": "2020-09-20T21:32:59Z", "path": "xchange-bitmex/src/main/java/org/knowm/xchange/bitmex/BitmexExchange.java", "diffHunk": "@@ -27,8 +27,8 @@\n \n public class BitmexExchange extends BaseExchange implements Exchange {\n \n-  private final SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);\n   protected RateLimitUpdateListener rateLimitUpdateListener;\n+  private SynchronizedValueFactory<Long> nonceFactory = new ExpirationTimeFactory(30);", "originalCommit": "f64e5818b289b1d5b4cc2931633ac5d166f56b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MjkzMw==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r511492933", "bodyText": "It is for me, or at least in latest version", "author": "mdvx", "createdAt": "2020-10-24T17:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzE0Mw==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r511493143", "bodyText": "found it on another change list", "author": "mdvx", "createdAt": "2020-10-24T17:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNjk3NA=="}], "type": "inlineReview"}, {"oid": "46e2af812a28eafad9c6a2710234842f4c876299", "url": "https://github.com/knowm/XChange/commit/46e2af812a28eafad9c6a2710234842f4c876299", "message": "[Kraken] NPE Fix", "committedDate": "2020-10-12T02:42:42Z", "type": "commit"}, {"oid": "4a773af42851970346f516e02c3e9453673fed2c", "url": "https://github.com/knowm/XChange/commit/4a773af42851970346f516e02c3e9453673fed2c", "message": "Merge pull request #13 from knowm/develop\n\nMerge from knowm", "committedDate": "2020-10-14T01:48:02Z", "type": "commit"}, {"oid": "bf9e56b2cf3323920b5f088bebd452c3a3988669", "url": "https://github.com/knowm/XChange/commit/bf9e56b2cf3323920b5f088bebd452c3a3988669", "message": "throw NotYetImplementedForExchangeException - add some color to the exception", "committedDate": "2020-10-20T03:03:38Z", "type": "commit"}, {"oid": "44d0e9a84d085e4c0f063a6da7128c951edcf71a", "url": "https://github.com/knowm/XChange/commit/44d0e9a84d085e4c0f063a6da7128c951edcf71a", "message": "[XStream-Core] simplify connection state monitoring\nThe following can be ...\n  Observable<Throwable> subscribeReconnectFailure();\n  Observable<Object> subscribeConnectionSuccess();\n  Observable<Object> subscribeDisconnect();\n\n... replaced by\n  Observable<State> subscribeConnectionState();\n\n...for most use cases.\nThe old functionality is not removed.", "committedDate": "2020-10-20T03:27:44Z", "type": "commit"}, {"oid": "05523330ed8837a72f18a209758d0a1b0a0b3133", "url": "https://github.com/knowm/XChange/commit/05523330ed8837a72f18a209758d0a1b0a0b3133", "message": "use ImmutableSet.of() for SIMPLE_TABLES", "committedDate": "2020-10-21T23:01:46Z", "type": "commit"}, {"oid": "657c0544ae401c9354828ee7956742a8c99a0c41", "url": "https://github.com/knowm/XChange/commit/657c0544ae401c9354828ee7956742a8c99a0c41", "message": "change order of list and array creation", "committedDate": "2020-10-21T23:05:37Z", "type": "commit"}, {"oid": "67439362b094744355cb05fc5fbf294005771af9", "url": "https://github.com/knowm/XChange/commit/67439362b094744355cb05fc5fbf294005771af9", "message": "Merge branch 'develop' into develop", "committedDate": "2020-10-21T23:17:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MTkxMg==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509791912", "bodyText": "should we have NPE protection here given ConcurrentHashMap throws them on null keys and same on handleChannelError and subscribeChannel", "author": "earce", "createdAt": "2020-10-21T23:26:23Z", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {\n+      channels\n+          .forEach((k, v) ->\n+              v.emitter.onNext(message));\n+\n+    } else {\n+      NettyStreamingService<T>.Subscription subscription = channels.get(channel);", "originalCommit": "657c0544ae401c9354828ee7956742a8c99a0c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3NTMyMw==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510275323", "bodyText": "NettyStreamingService handleMessage/handleError already check before passing to handleChannelMessage/handleChannelError\nwith !StringUtil.isNullOrEmpty(channel)", "author": "mdvx", "createdAt": "2020-10-22T15:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MTkxMg=="}], "type": "inlineReview"}, {"oid": "b95d878938b729b2fc7308ad8ae113918f5bbf93", "url": "https://github.com/knowm/XChange/commit/b95d878938b729b2fc7308ad8ae113918f5bbf93", "message": "[Bitmex] backward compat of order in getTradeHistory", "committedDate": "2020-10-21T23:31:38Z", "type": "commit"}, {"oid": "aa1eeccf55605cb0c6f3b55399c09c37d2be1c41", "url": "https://github.com/knowm/XChange/commit/aa1eeccf55605cb0c6f3b55399c09c37d2be1c41", "message": "Merge remote-tracking branch 'origin/develop' into develop", "committedDate": "2020-10-21T23:33:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDQ3NQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509794475", "bodyText": "ALL seems to be a constant associated only with CoinbasePro should we either pull it out of CoinbasePro and make it a Netty constant or override in the CoinbasePro handleChannelMessage?", "author": "earce", "createdAt": "2020-10-21T23:34:49Z", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -459,18 +475,24 @@ private void onIdle(ChannelHandlerContext ctx) {\n   }\n \n   protected void handleChannelMessage(String channel, T message) {\n-    NettyStreamingService<T>.Subscription subscription = channels.get(channel);\n-    if (subscription == null) {\n-      LOG.debug(\"Channel has been closed {}.\", channel);\n-      return;\n-    }\n-    ObservableEmitter<T> emitter = subscription.emitter;\n-    if (emitter == null) {\n-      LOG.debug(\"No subscriber for channel {}.\", channel);\n-      return;\n+    if (\"ALL\".equals(channel)) {", "originalCommit": "657c0544ae401c9354828ee7956742a8c99a0c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwOTk1OQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510209959", "bodyText": "yes, this is in the wrong place, It should be specific to coinbase", "author": "mdvx", "createdAt": "2020-10-22T14:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMjc5OA==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510232798", "bodyText": "moved to CoinbaseProStreamingService", "author": "mdvx", "createdAt": "2020-10-22T14:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NDQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NTcwMQ==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509795701", "bodyText": "would this make more sense as an atomic reference? I would imagine if more states are introduced you may want updates to this to happen atomically no?", "author": "earce", "createdAt": "2020-10-21T23:38:52Z", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package info.bitrich.xchangestream.service.netty;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n+\n+/**\n+ * The simplest Connection state model possible (maybe someone wants to add authenticated,\n+ * connecting, etc...)\n+ */\n+public final class ConnectionStateModel {\n+\n+  public enum State {\n+    closed,\n+    open\n+  }\n+\n+  private volatile State state = State.closed;  // start with a closed state", "originalCommit": "657c0544ae401c9354828ee7956742a8c99a0c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIxMTY3Mg==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510211672", "bodyText": "I think volatile achieves the same thing as Atomic, in this case, but maybe i can use Atomic.getAndSet for the old value", "author": "mdvx", "createdAt": "2020-10-22T14:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NTcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NjU2Mg==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r509796562", "bodyText": "should these be concurrent?", "author": "earce", "createdAt": "2020-10-21T23:41:39Z", "path": "xchange-stream-gemini/src/main/java/info/bitrich/xchangestream/gemini/GeminiStreamingService.java", "diffHunk": "@@ -1,26 +1,33 @@\n package info.bitrich.xchangestream.gemini;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.service.netty.ConnectionStateModel.State;\n import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n import java.util.HashMap;\n import java.util.Map;\n import org.knowm.xchange.currency.CurrencyPair;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/** Created by Lukas Zaoralek on 15.11.17. */\n+/**\n+ * Created by Lukas Zaoralek on 15.11.17.\n+ */\n public class GeminiStreamingService {\n+\n   private static final Logger LOG = LoggerFactory.getLogger(GeminiStreamingService.class);\n \n   private final String baseUri;\n \n-  private Map<CurrencyPair, GeminiProductStreamingService> productStreamingServices;\n-  private Map<CurrencyPair, Observable<JsonNode>> productSubscriptions;\n+  private final Map<CurrencyPair, GeminiProductStreamingService> productStreamingServices =\n+      new HashMap<>();\n+  private final Map<CurrencyPair, Observable<JsonNode>> productSubscriptions = new HashMap<>();", "originalCommit": "657c0544ae401c9354828ee7956742a8c99a0c41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a6c9166fc8c1aa9d95c4ebcab13b66c528cb5d57", "url": "https://github.com/knowm/XChange/commit/a6c9166fc8c1aa9d95c4ebcab13b66c528cb5d57", "message": "[StreamingCore] use atomic (to replace volatile)", "committedDate": "2020-10-22T14:50:56Z", "type": "commit"}, {"oid": "4dff1b81f409afccf126b435968827eaca53811a", "url": "https://github.com/knowm/XChange/commit/4dff1b81f409afccf126b435968827eaca53811a", "message": "[Gemini] use ConcurrentHashMap", "committedDate": "2020-10-22T14:51:34Z", "type": "commit"}, {"oid": "69359db3ebeadc4623d78a996a6f03622b725bc6", "url": "https://github.com/knowm/XChange/commit/69359db3ebeadc4623d78a996a6f03622b725bc6", "message": "[Streaming-Core] move \"ALL\" channel to [Coinbase]", "committedDate": "2020-10-22T15:50:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3NDM0Nw==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510374347", "bodyText": "why are we leaving this commented out like this?", "author": "walec51", "createdAt": "2020-10-22T18:33:43Z", "path": "xchange-stream-kraken/src/test/java/info/bitrich/xchangestream/kraken/KrakenManualExample.java", "diffHunk": "@@ -24,40 +24,40 @@ public static void main(String[] args) throws InterruptedException {\n     krakenExchange.connect().blockingAwait();\n \n     CurrencyPair bchUsdt = new CurrencyPair(Currency.BCH, Currency.getInstance(\"USD\"));\n-    Disposable btcEurOrderBookDis =\n-        krakenExchange\n-            .getStreamingMarketDataService()\n-            .getOrderBook(bchUsdt, 100)\n-            .subscribe(\n-                s -> {\n-                  LOG.info(\n-                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n-                      bchUsdt,\n-                      s.getAsks().size(),\n-                      s.getBids().size(),\n-                      s.getAsks().get(0),\n-                      s.getBids().get(0));\n-                },\n-                throwable -> {\n-                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n-                });\n-    Disposable btcUsdOrderBookDis =\n-        krakenExchange\n-            .getStreamingMarketDataService()\n-            .getOrderBook(CurrencyPair.BCH_EUR, 10)\n-            .subscribe(\n-                s -> {\n-                  LOG.info(\n-                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n-                      CurrencyPair.BCH_EUR,\n-                      s.getAsks().size(),\n-                      s.getBids().size(),\n-                      s.getAsks().get(0),\n-                      s.getBids().get(0));\n-                },\n-                throwable -> {\n-                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n-                });\n+//    Disposable btcEurOrderBookDis =\n+//        krakenExchange\n+//            .getStreamingMarketDataService()\n+//            .getOrderBook(bchUsdt, 100)\n+//            .subscribe(\n+//                s -> {\n+//                  LOG.info(\n+//                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n+//                      bchUsdt,\n+//                      s.getAsks().size(),\n+//                      s.getBids().size(),\n+//                      s.getAsks().get(0),\n+//                      s.getBids().get(0));\n+//                },\n+//                throwable -> {\n+//                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n+//                });\n+//    Disposable btcUsdOrderBookDis =\n+//        krakenExchange\n+//            .getStreamingMarketDataService()\n+//            .getOrderBook(CurrencyPair.BCH_EUR, 10)\n+//            .subscribe(\n+//                s -> {\n+//                  LOG.info(\n+//                      \"Received order book {}({},{}) ask[0] = {} bid[0] = {}\",\n+//                      CurrencyPair.BCH_EUR,\n+//                      s.getAsks().size(),\n+//                      s.getBids().size(),\n+//                      s.getAsks().get(0),\n+//                      s.getBids().get(0));\n+//                },\n+//                throwable -> {\n+//                  LOG.error(\"Order book FAILED {}\", throwable.getMessage(), throwable);\n+//                });", "originalCommit": "69359db3ebeadc4623d78a996a6f03622b725bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3NTc2OA==", "url": "https://github.com/knowm/XChange/pull/3700#discussion_r510375768", "bodyText": "enum values should be uppercased", "author": "walec51", "createdAt": "2020-10-22T18:36:14Z", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/ConnectionStateModel.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package info.bitrich.xchangestream.service.netty;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.subjects.BehaviorSubject;\n+import io.reactivex.subjects.Subject;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * The simplest Connection state model possible (maybe someone wants to add authenticated,\n+ * connecting, etc...)\n+ */\n+public final class ConnectionStateModel {\n+\n+  public enum State {\n+    closed,\n+    open", "originalCommit": "69359db3ebeadc4623d78a996a6f03622b725bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac60bbd71e498dcfa52762b8225c99f7e7be7151", "url": "https://github.com/knowm/XChange/commit/ac60bbd71e498dcfa52762b8225c99f7e7be7151", "message": "[Kraken] uncomment example code (that was commented only for a test)", "committedDate": "2020-10-24T17:01:47Z", "type": "commit"}, {"oid": "8d237f7d3eb7ddb854683614a40fbe3ac2de8588", "url": "https://github.com/knowm/XChange/commit/8d237f7d3eb7ddb854683614a40fbe3ac2de8588", "message": "[Kraken] ConnectionStateModel.State to upper case for enum values", "committedDate": "2020-10-24T17:03:31Z", "type": "commit"}, {"oid": "a909c5cbb40dbec92f2dbee4eab28d7639a73455", "url": "https://github.com/knowm/XChange/commit/a909c5cbb40dbec92f2dbee4eab28d7639a73455", "message": "[BitMex] ah final was on another change list", "committedDate": "2020-10-24T17:08:44Z", "type": "commit"}]}