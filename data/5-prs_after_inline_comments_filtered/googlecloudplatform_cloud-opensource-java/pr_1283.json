{"pr_number": 1283, "pr_title": "Linkage Checker exclusion file XML structure validation using Relax NG", "pr_createdAt": "2020-03-09T21:23:12Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283", "timeline": [{"oid": "7ffcf9d0984007f5f11b7d20aa25dc7a7193e60a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7ffcf9d0984007f5f11b7d20aa25dc7a7193e60a", "message": "XML structure validation using Relax NG", "committedDate": "2020-03-09T21:20:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3MTY4Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r389971687", "bodyText": "The package name of this library is strange. This library org.relaxng:jing is from https://relaxng.org/jclark/api/jing/index.html\n\nYou can use Jing's native API.", "author": "suztomo", "createdAt": "2020-03-09T21:27:39Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -17,8 +17,14 @@\n package com.google.cloud.tools.opensource.classpath;\n \n import com.google.common.collect.ImmutableList;\n+import com.thaiopensource.util.SinglePropertyMap;", "originalCommit": "7ffcf9d0984007f5f11b7d20aa25dc7a7193e60a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3Mjc5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r389972791", "bodyText": "I'm really not convinced that we want to do this when processing the documents.", "author": "elharo", "createdAt": "2020-03-09T21:30:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -62,11 +68,25 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException {\n \n+    // DraconianErrorHandler throws SAXException upon invalid structure\n+    ValidationDriver validationDriver =", "originalCommit": "7ffcf9d0984007f5f11b7d20aa25dc7a7193e60a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2OTg5MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r390569890", "bodyText": "Memo:\nCost\n\nperformance for high qps services. (not this case)\ntoo restrictive. For example, users cannot put their exclusion files in pom.xml.\nadding dependencies. (fine)\nadding validation makes a system more fragile", "author": "suztomo", "createdAt": "2020-03-10T19:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3Mjc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNDY5OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r390934699", "bodyText": "You might want to extract all this into a helper method, just for clarity.", "author": "elharo", "createdAt": "2020-03-11T12:26:34Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -62,11 +68,25 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException {\n \n+    // DraconianErrorHandler throws SAXException upon invalid structure", "originalCommit": "7ffcf9d0984007f5f11b7d20aa25dc7a7193e60a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTIxNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391031214", "bodyText": "Nice idea. Updated.", "author": "suztomo", "createdAt": "2020-03-11T14:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNTI0OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r390935248", "bodyText": "In this pattern, we sometimes name the exception expected", "author": "elharo", "createdAt": "2020-03-11T12:27:45Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParserTest.java", "diffHunk": "@@ -192,15 +192,44 @@ public void testParse_sourceAndTarget_unmatch()\n   }\n \n   @Test\n-  public void testParse_namespaceException() throws URISyntaxException, IOException, SAXException {\n+  public void testParse_namespaceException() throws URISyntaxException, SAXException, IOException {\n     Path exclusionFile = absolutePathOfResource(\"exclusion-sample-rules/target-with-namespace.xml\");\n     try {\n       ImmutableList<LinkageErrorMatcher> matchers = ExclusionFileParser.parse(exclusionFile);\n       fail();\n-    } catch (SAXException ex) {\n+    } catch (SAXParseException ex) {", "originalCommit": "7ffcf9d0984007f5f11b7d20aa25dc7a7193e60a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMzc0OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391033748", "bodyText": "That's more explanatory. Updated.", "author": "suztomo", "createdAt": "2020-03-11T14:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzNTI0OA=="}], "type": "inlineReview"}, {"oid": "21850be3a378f3ea2880dd6136ad0f797209fb30", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/21850be3a378f3ea2880dd6136ad0f797209fb30", "message": "Applied review", "committedDate": "2020-03-11T14:58:51Z", "type": "commit"}, {"oid": "166d155651ac8e297b8a9b92cd7bd78ac318edfe", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/166d155651ac8e297b8a9b92cd7bd78ac318edfe", "message": "Assertion on line number", "committedDate": "2020-03-11T15:02:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzQ0Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391153446", "bodyText": "why convert to a File? Can we stick to Paths all the way through?", "author": "elharo", "createdAt": "2020-03-11T17:47:03Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -62,12 +68,29 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException {\n \n+    File exclusion = exclusionFile.toFile();", "originalCommit": "166d155651ac8e297b8a9b92cd7bd78ac318edfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Mjk5OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391162998", "bodyText": "Updated to use Files.newInputStream.", "author": "suztomo", "createdAt": "2020-03-11T18:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NTEzNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391155135", "bodyText": "If you call inputSource.setSystemId(path.toURI()) or some such thing here, error reporting will improve.", "author": "elharo", "createdAt": "2020-03-11T17:49:39Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -62,12 +68,29 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException {\n \n+    File exclusion = exclusionFile.toFile();\n+    validate(exclusion);\n+\n     XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n     ExclusionFileHandler handler = new ExclusionFileHandler();\n     xmlReader.setContentHandler(handler);\n \n-    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusion));\n     xmlReader.parse(inputSource);", "originalCommit": "166d155651ac8e297b8a9b92cd7bd78ac318edfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODA1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391168056", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-03-11T18:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NTEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NTUyOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391155528", "bodyText": "Files.newInputStream(path)", "author": "elharo", "createdAt": "2020-03-11T17:50:16Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -62,12 +68,29 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException {\n \n+    File exclusion = exclusionFile.toFile();\n+    validate(exclusion);\n+\n     XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n     ExclusionFileHandler handler = new ExclusionFileHandler();\n     xmlReader.setContentHandler(handler);\n \n-    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusion));", "originalCommit": "166d155651ac8e297b8a9b92cd7bd78ac318edfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2MzEwNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391163104", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-03-11T18:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NTUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NjA3NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391156075", "bodyText": "This reads the file twice: once to validate and once to parse. Can this be combined into a single pass?", "author": "elharo", "createdAt": "2020-03-11T17:51:13Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -62,12 +68,29 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException {\n \n+    File exclusion = exclusionFile.toFile();\n+    validate(exclusion);\n+\n     XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n     ExclusionFileHandler handler = new ExclusionFileHandler();\n     xmlReader.setContentHandler(handler);\n \n-    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusion));\n     xmlReader.parse(inputSource);\n     return handler.getMatchers();\n   }\n+\n+  private static void validate(File file) throws IOException, SAXException {", "originalCommit": "166d155651ac8e297b8a9b92cd7bd78ac318edfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjI4Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1283#discussion_r391172286", "bodyText": "I didn't think of a way to do that. ValidationDriver does not give a method related to XMLReader.\nI thought reusing InputSource, but it's not intended to be reused:\n\nso applications should not attempt to re-use such streams after they have been handed to a parser.\n\nhttps://docs.oracle.com/javase/7/docs/api/org/xml/sax/InputSource.html#setPublicId(java.lang.String)", "author": "suztomo", "createdAt": "2020-03-11T18:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NjA3NQ=="}], "type": "inlineReview"}, {"oid": "91572e298a10a1d1ba1febf76e26617082bc3a50", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/91572e298a10a1d1ba1febf76e26617082bc3a50", "message": "Files.newInputStream", "committedDate": "2020-03-11T18:13:07Z", "type": "commit"}, {"oid": "9b205d3563c4532ead753c2f872914bdbe8aef8a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9b205d3563c4532ead753c2f872914bdbe8aef8a", "message": "javadoc", "committedDate": "2020-03-11T18:19:59Z", "type": "commit"}, {"oid": "0d4d76789388b4d1a9038b1264591abe45e16f89", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0d4d76789388b4d1a9038b1264591abe45e16f89", "message": "Using isorelax", "committedDate": "2020-03-11T19:07:57Z", "type": "commit"}, {"oid": "c470731d76d8060a2227d78969b438c1900ce3b7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c470731d76d8060a2227d78969b438c1900ce3b7", "message": "Validate and parse in one pass", "committedDate": "2020-03-11T19:17:19Z", "type": "commit"}, {"oid": "45aa358c64d2f70bb5c4e3e8bf05ed645849b53f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/45aa358c64d2f70bb5c4e3e8bf05ed645849b53f", "message": "isorelax dependency", "committedDate": "2020-03-11T19:19:30Z", "type": "commit"}, {"oid": "94e699b7f3ca65a250faabc815db2683101bf457", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/94e699b7f3ca65a250faabc815db2683101bf457", "message": "createParser", "committedDate": "2020-03-11T19:28:07Z", "type": "commit"}, {"oid": "7524d4813a29f54ad17af09b011193e1f0f5e674", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7524d4813a29f54ad17af09b011193e1f0f5e674", "message": "createXmlReader", "committedDate": "2020-03-11T19:28:49Z", "type": "commit"}]}