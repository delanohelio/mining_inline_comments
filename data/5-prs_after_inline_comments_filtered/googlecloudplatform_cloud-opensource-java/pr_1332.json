{"pr_number": 1332, "pr_title": "Throw IOException from getClassFileNames", "pr_createdAt": "2020-04-03T15:45:42Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332", "timeline": [{"oid": "18cde4dba75c1f976b2479e0f3b959213f265f91", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/18cde4dba75c1f976b2479e0f3b959213f265f91", "message": "push class file names into ClasspathEntry", "committedDate": "2020-03-27T19:12:00Z", "type": "commit"}, {"oid": "05d4198bcf291d27014a4d078d678d9c9d72dc64", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/05d4198bcf291d27014a4d078d678d9c9d72dc64", "message": "make listClassFileNames void", "committedDate": "2020-03-27T19:21:43Z", "type": "commit"}, {"oid": "55e4bbb523d7680e3d097db18a138ae161b828f7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/55e4bbb523d7680e3d097db18a138ae161b828f7", "message": "javadoc", "committedDate": "2020-03-27T19:24:00Z", "type": "commit"}, {"oid": "cade5d2a300903d63227dcc8a8b9dd28c47862db", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cade5d2a300903d63227dcc8a8b9dd28c47862db", "message": "reuse constructor", "committedDate": "2020-03-27T19:43:40Z", "type": "commit"}, {"oid": "a253f6b96abd4e1857dc7057b7220b872335a11f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a253f6b96abd4e1857dc7057b7220b872335a11f", "message": "fix a test", "committedDate": "2020-03-27T23:08:25Z", "type": "commit"}, {"oid": "56a440fd3c6d8da7696ed998baf5caf0bcffb580", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/56a440fd3c6d8da7696ed998baf5caf0bcffb580", "message": "fix a test", "committedDate": "2020-03-27T23:22:01Z", "type": "commit"}, {"oid": "8055d3ff5d433dbe9704a7a0668e34411a25fc5e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8055d3ff5d433dbe9704a7a0668e34411a25fc5e", "message": "remove old comment", "committedDate": "2020-03-27T23:23:23Z", "type": "commit"}, {"oid": "f55d642ca7a9b66f3ff5f923207564ca62bce6ff", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f55d642ca7a9b66f3ff5f923207564ca62bce6ff", "message": "fix a test", "committedDate": "2020-03-27T23:53:43Z", "type": "commit"}, {"oid": "f3169d15bf9478b0dc0eb9b1a616eb2df9f0f81f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f3169d15bf9478b0dc0eb9b1a616eb2df9f0f81f", "message": "merge master", "committedDate": "2020-03-30T17:35:30Z", "type": "commit"}, {"oid": "459fc151d2df2ceb24008503eeaa7259e2cbaf37", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/459fc151d2df2ceb24008503eeaa7259e2cbaf37", "message": "merge master", "committedDate": "2020-04-02T13:32:42Z", "type": "commit"}, {"oid": "409432d69f8323d88fbbbf0adf13d198d9a96f8d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/409432d69f8323d88fbbbf0adf13d198d9a96f8d", "message": "load file names into classpath entry on construction", "committedDate": "2020-04-02T14:26:49Z", "type": "commit"}, {"oid": "fe992c89cfc8f37198e09a4687ffab5417c9f3f3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fe992c89cfc8f37198e09a4687ffab5417c9f3f3", "message": "getClassNames throws IOException", "committedDate": "2020-04-03T15:41:13Z", "type": "commit"}, {"oid": "d62c6d856dc27b024b6935ccbffc2455dbe284e3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d62c6d856dc27b024b6935ccbffc2455dbe284e3", "message": "merge master", "committedDate": "2020-04-03T15:44:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMTY2Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403131662", "bodyText": "ClassPathBuilder should focus on building class path. It should not read the content of JAR.", "author": "suztomo", "createdAt": "2020-04-03T16:33:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -59,8 +60,9 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    * closest' strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts Maven artifacts to check. They are treated as the root of the dependency tree.\n+   * @throws IOException if a jar file can't be read\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) {\n+  public ClassPathResult resolve(List<Artifact> artifacts) throws IOException {", "originalCommit": "d62c6d856dc27b024b6935ccbffc2455dbe284e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NDQ5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403154493", "bodyText": "fixed", "author": "elharo", "createdAt": "2020-04-03T17:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMTY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzQ1Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403133453", "bodyText": "It looks strange to throw IOException just to create instances.", "author": "suztomo", "createdAt": "2020-04-03T16:36:49Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassFileTest.java", "diffHunk": "@@ -21,27 +21,28 @@\n import com.google.common.testing.EqualsTester;\n import com.google.common.testing.NullPointerTester;\n import com.google.common.testing.NullPointerTester.Visibility;\n+import java.io.IOException;\n import java.nio.file.Paths;\n import org.junit.Test;\n \n public class ClassFileTest {\n   @Test\n-  public void testCreation() {\n+  public void testCreation() throws IOException {", "originalCommit": "d62c6d856dc27b024b6935ccbffc2455dbe284e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NTMxMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403155313", "bodyText": "fixed", "author": "elharo", "createdAt": "2020-04-03T17:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzU2MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403133561", "bodyText": "It looks strange to throw IOException just to checking equality.", "author": "suztomo", "createdAt": "2020-04-03T16:37:01Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassFileTest.java", "diffHunk": "@@ -21,27 +21,28 @@\n import com.google.common.testing.EqualsTester;\n import com.google.common.testing.NullPointerTester;\n import com.google.common.testing.NullPointerTester.Visibility;\n+import java.io.IOException;\n import java.nio.file.Paths;\n import org.junit.Test;\n \n public class ClassFileTest {\n   @Test\n-  public void testCreation() {\n+  public void testCreation() throws IOException {\n     ClassPathEntry entry = new ClassPathEntry(Paths.get(\"foo\", \"bar.jar\"));\n     ClassFile file = new ClassFile(entry, \"com.test.Foo\");\n     assertEquals(\"com.test.Foo\", file.getBinaryName());\n     assertEquals(new ClassPathEntry(Paths.get(\"foo\", \"bar.jar\")), file.getClassPathEntry());\n   }\n \n   @Test\n-  public void testNull() {\n+  public void testNull() throws IOException {\n     new NullPointerTester()\n         .setDefault(ClassPathEntry.class, new ClassPathEntry(Paths.get(\"foo\", \"bar.jar\")))\n         .testConstructors(ClassFile.class, Visibility.PACKAGE);\n   }\n \n   @Test\n-  public void testEquality() {\n+  public void testEquality() throws IOException {", "originalCommit": "d62c6d856dc27b024b6935ccbffc2455dbe284e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NTQwNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403155406", "bodyText": "fixed", "author": "elharo", "createdAt": "2020-04-03T17:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzU2MQ=="}], "type": "inlineReview"}, {"oid": "8d0b376a1425d2a26e01fc4a4f45f717a6b25107", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8d0b376a1425d2a26e01fc4a4f45f717a6b25107", "message": "remove some vestigial throws clauses", "committedDate": "2020-04-03T17:11:52Z", "type": "commit"}, {"oid": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c415c6ce5ce21ece0f94ac390b892dc87df8065a", "message": "rmeove some vestigial throws clauses", "committedDate": "2020-04-03T17:14:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5NjczOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403196738", "bodyText": "Are you trying to put more things to ClassPathEntry? I may need to listen to your direction further.", "author": "suztomo", "createdAt": "2020-04-03T17:55:55Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassFile.java", "diffHunk": "@@ -26,6 +26,7 @@\n  * A locator for a compiled class file of {@code className} in {@code classPathEntry} to uniquely\n  * locate the class implementation in a class path.\n  */\n+// TODO this should be merged into ClassPathEntry ", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1OTM4Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403259382", "bodyText": "The goal is to replace the generic, complex data structures like multiple ImmutableListMultimaps with class types that are tailored to the problem domain. ClassFile was only needed because we didn't have ClassPathEntry. It can go away now. We shouldn't have to look in four different places to figure out what's in the classpath.", "author": "elharo", "createdAt": "2020-04-03T19:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5NjczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NjE5Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404166192", "bodyText": "Let's continue in #1328", "author": "suztomo", "createdAt": "2020-04-06T15:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5NjczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1OTczNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404859734", "bodyText": "Agreed. Removed the TODO comment.", "author": "elharo", "createdAt": "2020-04-07T14:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5NjczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNDczMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403204730", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return the fully qualified names of the classes in this entry's jar file\n          \n          \n            \n               * Returns the fully qualified names of the classes in this entry's jar file", "author": "suztomo", "createdAt": "2020-04-03T18:05:05Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "diffHunk": "@@ -109,4 +109,17 @@ public String toString() {\n \n     return classPath.getAllClasses().stream().map(ClassInfo::getName).collect(toImmutableSet());\n   }\n+  \n+  /**\n+   * @return the fully qualified names of the classes in this entry's jar file", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MDQ2Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403260467", "bodyText": "done", "author": "elharo", "createdAt": "2020-04-03T19:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNDczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403207214", "bodyText": "Would you move this outside constructor?\nClassDumper's factory method keeps the constructor simple without IO.", "author": "suztomo", "createdAt": "2020-04-03T18:08:06Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -91,19 +87,25 @@ static ClassDumper create(List<ClassPathEntry> entries) throws IOException {\n             .collect(toImmutableList());\n     checkArgument(\n         unreadableFiles.isEmpty(), \"Some jar files are not readable: %s\", unreadableFiles);\n-\n-    return new ClassDumper(entries, extensionClassLoader, mapJarToClassFileNames(entries));\n+    \n+    return new ClassDumper(entries, extensionClassLoader);\n   }\n \n   private ClassDumper(\n       List<ClassPathEntry> inputClassPath,\n-      ClassLoader extensionClassLoader,\n-      ImmutableSetMultimap<ClassPathEntry, String> jarToClasses) {\n+      ClassLoader extensionClassLoader) throws IOException {\n     this.inputClassPath = ImmutableList.copyOf(inputClassPath);\n     this.classRepository = createClassRepository(inputClassPath);\n     this.extensionClassLoader = extensionClassLoader;\n-    this.classPathEntryToClassFileNames = ImmutableSetMultimap.copyOf(jarToClasses);\n-    this.classFileNameToClassPathEntry = ImmutableListMultimap.copyOf(jarToClasses.inverse());\n+    \n+    ImmutableListMultimap.Builder<String, ClassPathEntry> builder = ImmutableListMultimap.builder();\n+    for (ClassPathEntry entry : inputClassPath) {\n+      for (String className : entry.getClassNames()) {\n+        builder.put(className, entry);\n+      }\n+    }", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1ODA5Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403258096", "bodyText": "The goal is is to eventually get rid of the ImmutableListMultimap completely. However for now the create method and the private constructor are effectively part 1 and part 2 of the same code. Which one code goes into doesn't seem to make any difference.", "author": "elharo", "createdAt": "2020-04-03T19:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1NjE4Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404156186", "bodyText": "Yes, this is part 1 and part 2 to follow \"Avoid doing work in constructors\". For our case, it does not make much difference. Therefore, I don't find a special reason to defy this guide. Would you move this IO outside constructor?", "author": "suztomo", "createdAt": "2020-04-06T14:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1ODkwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404858908", "bodyText": "Then the field isn't initialized in the constructor, in which case it shouldn't be a field. I do think we should get rid of this field completely, but one thing at a time.", "author": "elharo", "createdAt": "2020-04-07T14:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NTA5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404875091", "bodyText": "In the same way before this PR, the constructor can receive a map, which is built in the static factory method. It's a field because ClassDumper's non-static methods reference it.", "author": "suztomo", "createdAt": "2020-04-07T14:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MjkxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404962910", "bodyText": "Yes, and that's a problem. This should not be a field. The class makes a hash of confusion between invocation data and object state. Invocation data like this map should be passed between methods, not stored in a field a pseudo-global state.\nBut we shouldn't fix everything in this PR. One field at a time.", "author": "elharo", "createdAt": "2020-04-07T16:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NDg2NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r405054864", "bodyText": "A ClassDumper works on a class path. I find storing the class path and symbol maps as fields concise than passing the variables among static methods. Especially, symbol maps are hidden from API (implementation details); the callers should not care about the symbol maps.\nThe map is not a pseudo-global state. For example, ClassDumper.create([JarA, JarB]).findClassLocation(ClassX) returns different result than ClassDumper([JarC, JarD]).findClassLocation(ClassX).", "author": "suztomo", "createdAt": "2020-04-07T19:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODk3NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r405718974", "bodyText": "There are several questions in play here. One is what approach is easier to follow and maintain. I find the existing code difficult to follow and understand which is why I want to refactor it into more semantic classes with fewer (ideally zero) multimaps and other more complicated data structures.\nThe more abstract question is what is a ClassDumper? I think of it as a utility that can dump classes out of a classpath. Generally a utility doesn't operate on only one instance. E.g. the ExclusionFiles utility doesn't write a single exclusion file and then get thrown away. It's unsettling to see this as  something that is created for a single Classpath and then never used again.\nIndeed, that's is not an object oriented approach. A method that operates on only one object would typically be an instance method on the object's class. We don't have a Classpath class to put this in (though perhaps we should).Hence a utility method, but that should not be limited to a single object.\nThe current design does not take full advantage of object oriented programming. Rather than modelling things--classpaths, classpath entries, linkage errors, etc.--it's connecting them in an interlocking web of maps, lists, sets, lists of maps of sets, and so forth. This works at cross purposes to Java and makes the code hard to follow. I think using domain relevant classes like ClasspathEntry instead of generic data structures will make the underlying structure more apparent.", "author": "elharo", "createdAt": "2020-04-08T18:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNTg1NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r405735855", "bodyText": "I agree that domain relevant classes make the logic easy to follow. As you pointed out, our ClassPathEntry is better representation than java.nio.file.Path.\n\n\nClassDumper used to be a utility class with static methods before #231. The static methods took classLoader and BCEL's repository to operate. These parameters were always the same for the lifetime of LinkageChecker class:\n\n\n(old code before #231)\n    Class[] parameterTypes = ClassDumper.methodDescriptorToClass(methodSignature.getDescriptor(),\n        classLoader);\n\n                ClassDumper.listExternalMethodReferences(\n                    className, jarFileToClasses, classLoaderFromJars, repository);\n\nSo it made sense to make ClassDumper non-static class. The situation has not changed; if we don't instantiate ClassDumper, there are the same set of parameters always passed to them. We may be able to abstract these parameters into a single class. Then we will want to add methods to the new class, resulting in creating another ClassDumper class with a different name.", "author": "suztomo", "createdAt": "2020-04-08T18:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTY1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406241657", "bodyText": "perhaps, but none of that changes that a single ClassDumper instance should be able to operate on multiple classpaths. Perhaps the extension class loader and some of the other parts can be configurable at an instance level, but the classpath shouldn't be. That's invocation level state.", "author": "elharo", "createdAt": "2020-04-09T14:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNjI5NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406416294", "bodyText": "What do you think are invocation level state?\n\nList<ClassPathEntry>. Class path; list of JAR files.\nFixedSizeClassPathRepository classRepository, which loads BCEL's JavaClasses from List<ClassPathEntry>. It has cache for fast loading.\nClassLoader extensionClassLoader, which loads classes from JDK, irrelevant to List<ClassPathEntry>\nMultimap<String, ClassPathEntry> classFileNameToClassPathEntry. To lookup JAR files that contains a class.\n\nI think all of them are implementation details of ClassDumper; callers of ClassDumper methods should not care how the class maintains cache or maps.", "author": "suztomo", "createdAt": "2020-04-09T19:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyMTU5Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406421596", "bodyText": "The extensionClassLoader is part of the dumper since it's not derived from the classpath.\nThe other two are invocation state: they change when the classpath changes.", "author": "elharo", "createdAt": "2020-04-09T19:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5NTcyMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406495720", "bodyText": "If I interpret your explanation naively, having the two (classFileNameToClassPathEntry and classRepository) as invocation state would incur additional JAR file reading. For example, classDumper.findClassLocation, which currently leverages  classFileNameToClassPathEntry field, would require reading JAR files  every time LinkageChecker invokes the method. Am I interpreting your suggestion correctly?", "author": "suztomo", "createdAt": "2020-04-09T21:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1ODA0Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406758042", "bodyText": "A lot of methods need to move around because they're not in the natural places now. That's probably one of them. I suspect we need a Classpath class rather than a List and findClassLocation belongs there.\nThe existing classes are an algorithm, not a model;  and that's why it's so hard to follow. I want this code to have a higher level abstraction where the algorithms can become internal, implementation details. Right now they're exposed on the surface of the API so everything is tightly coupled to everything else through shared data structures rather class types.", "author": "elharo", "createdAt": "2020-04-10T13:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTA0Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406775042", "bodyText": "Created an issue to followup #1346", "author": "suztomo", "createdAt": "2020-04-10T14:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NjA5OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406896099", "bodyText": "For this PR, would you move the IO part outside the constructor?\nDoing the IO within the constructor (or outside) does not remove classFileNameToClassPathEntry field. Therefore it's not the reason to defy \"Avoid doing work in constructors\".", "author": "suztomo", "createdAt": "2020-04-10T18:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0OTMwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406949302", "bodyText": "It's a purely formal move that adds an additional method argument so I'll do this with the expectation that the PR will then be merged without further changes.", "author": "elharo", "createdAt": "2020-04-10T21:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1NzM3OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406957378", "bodyText": "Thank you.", "author": "suztomo", "createdAt": "2020-04-10T21:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwODM4OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403208388", "bodyText": "I'm still feeling a bit itchy on holding this in ClassPathEntry. But we can think of this as an internal optimization of existing listClassFileNames  method. Good.", "author": "suztomo", "createdAt": "2020-04-03T18:09:32Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "diffHunk": "@@ -35,6 +35,7 @@\n \n   private Path jar;\n   private Artifact artifact;\n+  private ImmutableSet<String> classFileNames;", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwOTc5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403209795", "bodyText": "Description is needed. https://google.github.io/styleguide/javaguide.html#s7.1.3-javadoc-block-tags", "author": "suztomo", "createdAt": "2020-04-03T18:11:21Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -139,73 +137,79 @@ private LinkageChecker(\n   /**\n    * Returns {@link SymbolProblem}s found in the class path and referencing classes for each\n    * problem.\n+   * \n+   * @throws IOException ", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MjE2NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403262164", "bodyText": "done", "author": "elharo", "createdAt": "2020-04-03T19:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwOTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMTQ1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403211452", "bodyText": "One line with \"*\" before block tags\nhttps://google.github.io/styleguide/javaguide.html#s7.1.2-javadoc-paragraphs", "author": "suztomo", "createdAt": "2020-04-03T18:13:06Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -202,14 +203,17 @@ private static Options configureOptions() {\n   /**\n    * Returns class path entries for the absolute paths of the files specified in the JAR file\n    * option.\n+   * @throws IOException if a jar file could not be read", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2MzY5Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404863696", "bodyText": "not with a throws clause", "author": "elharo", "createdAt": "2020-04-07T14:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMzE0OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403213148", "bodyText": "getClassPath is not appropriate name. This method is for the case JAR files are specified. All three cases (bom, Maven artifacts, and JAR files) generate a class path but this method is only for when we specify JAR files.", "author": "suztomo", "createdAt": "2020-04-03T18:15:03Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -202,14 +203,17 @@ private static Options configureOptions() {\n   /**\n    * Returns class path entries for the absolute paths of the files specified in the JAR file\n    * option.\n+   * @throws IOException if a jar file could not be read\n    */\n-  ImmutableList<ClassPathEntry> getJarFiles() {\n+  // TODO rename to getClassPath", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NDg5MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403264890", "bodyText": "Separate so I'll take that out for now but this needs a rethink too.", "author": "elharo", "createdAt": "2020-04-03T19:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMzE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMzM5Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403213397", "bodyText": "?", "author": "suztomo", "createdAt": "2020-04-03T18:15:20Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -46,7 +46,6 @@\n   private Artifact barArtifact =\n       new DefaultArtifact(\"com.google\", \"bar\", null, \"jar\", \"0.0.1\", null, barJar.toFile());\n \n-  @Test", "originalCommit": "c415c6ce5ce21ece0f94ac390b892dc87df8065a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NTQ2Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r403265467", "bodyText": "merge glitch. fixed.", "author": "elharo", "createdAt": "2020-04-03T19:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMzM5Nw=="}], "type": "inlineReview"}, {"oid": "ce4290521448498098a5769374007535dae208c8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ce4290521448498098a5769374007535dae208c8", "message": "code review", "committedDate": "2020-04-03T19:31:22Z", "type": "commit"}, {"oid": "29ac16cdd21a7e77390e952fa9098696b78a24ae", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/29ac16cdd21a7e77390e952fa9098696b78a24ae", "message": "set field", "committedDate": "2020-04-06T13:18:57Z", "type": "commit"}, {"oid": "da76a5cdda54bf115007ed3e4722a7c2653807ef", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/da76a5cdda54bf115007ed3e4722a7c2653807ef", "message": "line length", "committedDate": "2020-04-06T13:20:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTM1MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404159351", "bodyText": "I believe these throws IOException is no longer needed as ClassPathEntry does not perform IO upon instance creation.", "author": "suztomo", "createdAt": "2020-04-06T14:58:32Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -151,7 +151,7 @@ private static Artifact resolveArtifact(String coordinates) throws ArtifactResol\n   }\n   \n   @Test\n-  public void testFilePresenceRequirement() {\n+  public void testFilePresenceRequirement() throws IOException {", "originalCommit": "da76a5cdda54bf115007ed3e4722a7c2653807ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NDczMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r404864733", "bodyText": "good catch. removed.", "author": "elharo", "createdAt": "2020-04-07T14:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTM1MQ=="}], "type": "inlineReview"}, {"oid": "b1f78924f40563441a1fbaa6c897e4ced823b61b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b1f78924f40563441a1fbaa6c897e4ced823b61b", "message": "Merge branch 'master' into sim2", "committedDate": "2020-04-06T15:15:12Z", "type": "commit"}, {"oid": "2d620c7028e8d1c284f91267bd28ef77ac8e15e8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2d620c7028e8d1c284f91267bd28ef77ac8e15e8", "message": "Merge branch 'master' into sim2", "committedDate": "2020-04-07T14:32:39Z", "type": "commit"}, {"oid": "dc30bdf280ff123704c4edad52d43ec449e654db", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/dc30bdf280ff123704c4edad52d43ec449e654db", "message": "merge master", "committedDate": "2020-04-07T14:40:51Z", "type": "commit"}, {"oid": "d841f5b6813933a263d95a0a4c1e69edf24d79c5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d841f5b6813933a263d95a0a4c1e69edf24d79c5", "message": "code review", "committedDate": "2020-04-08T17:40:37Z", "type": "commit"}, {"oid": "42452a122706cfd7d85e662a99cfba33390e79d5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/42452a122706cfd7d85e662a99cfba33390e79d5", "message": "@return", "committedDate": "2020-04-08T17:41:42Z", "type": "commit"}, {"oid": "38ee50eb03c6f7a9c87cb887dc76ddcffdf5d444", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/38ee50eb03c6f7a9c87cb887dc76ddcffdf5d444", "message": "mark method static", "committedDate": "2020-04-09T19:20:56Z", "type": "commit"}, {"oid": "c8af49556a8713600f25bbea0fd0bb8e3a0d5a8d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c8af49556a8713600f25bbea0fd0bb8e3a0d5a8d", "message": "Merge branch 'master' into sim2", "committedDate": "2020-04-10T16:43:42Z", "type": "commit"}, {"oid": "a1fc113334b8291a00cd53ff130386d79e22ba29", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a1fc113334b8291a00cd53ff130386d79e22ba29", "message": "remove comment", "committedDate": "2020-04-10T17:03:24Z", "type": "commit"}, {"oid": "0166cfcc1978fcda246ec07b1b14fcf93196d601", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0166cfcc1978fcda246ec07b1b14fcf93196d601", "message": "revert to fields", "committedDate": "2020-04-10T17:07:31Z", "type": "commit"}, {"oid": "19727ed84aad9e7cc8f5b9b6aa1b095f735afa36", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/19727ed84aad9e7cc8f5b9b6aa1b095f735afa36", "message": "correct typo", "committedDate": "2020-04-10T17:09:14Z", "type": "commit"}, {"oid": "405736775f2bdc01d0158711aa1509b5022566b4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/405736775f2bdc01d0158711aa1509b5022566b4", "message": "Merge branch 'master' into sim2", "committedDate": "2020-04-10T21:01:05Z", "type": "commit"}, {"oid": "9dd2200d4ba902e8a5444c59b49a9f0b4573bc22", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9dd2200d4ba902e8a5444c59b49a9f0b4573bc22", "message": "Merge branch 'master' into sim2", "committedDate": "2020-04-10T21:08:26Z", "type": "commit"}, {"oid": "d9c21f62f28a02f91eff4c3b974115d9354a94d0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d9c21f62f28a02f91eff4c3b974115d9354a94d0", "message": "Merge branch 'sim2' of github.com:GoogleCloudPlatform/cloud-opensource-java into sim2", "committedDate": "2020-04-10T21:09:18Z", "type": "commit"}, {"oid": "4911ccd85014648f523946f52592d59de5c63816", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4911ccd85014648f523946f52592d59de5c63816", "message": "move I/O out of the constructor", "committedDate": "2020-04-10T21:20:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1NjE1MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1332#discussion_r406956150", "bodyText": "This constructor does not throw IOException.", "author": "suztomo", "createdAt": "2020-04-10T21:42:30Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -91,19 +87,28 @@ static ClassDumper create(List<ClassPathEntry> entries) throws IOException {\n             .collect(toImmutableList());\n     checkArgument(\n         unreadableFiles.isEmpty(), \"Some jar files are not readable: %s\", unreadableFiles);\n-\n-    return new ClassDumper(entries, extensionClassLoader, mapJarToClassFileNames(entries));\n+    \n+    ImmutableListMultimap.Builder<String, ClassPathEntry> builder = ImmutableListMultimap.builder();\n+    for (ClassPathEntry entry : entries) {\n+      for (String className : entry.getClassNames()) {\n+        builder.put(className, entry);\n+      }\n+    }\n+    \n+    ImmutableListMultimap<String, ClassPathEntry> map = builder.build();\n+    \n+    return new ClassDumper(entries, extensionClassLoader, map);\n   }\n \n   private ClassDumper(\n       List<ClassPathEntry> inputClassPath,\n       ClassLoader extensionClassLoader,\n-      ImmutableSetMultimap<ClassPathEntry, String> jarToClasses) {\n+      ImmutableListMultimap<String, ClassPathEntry> map)\n+      throws IOException {", "originalCommit": "4911ccd85014648f523946f52592d59de5c63816", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}