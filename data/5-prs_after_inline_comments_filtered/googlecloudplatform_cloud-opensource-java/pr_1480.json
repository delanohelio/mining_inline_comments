{"pr_number": 1480, "pr_title": "Serializer for dependency graph", "pr_createdAt": "2020-06-16T20:30:37Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480", "timeline": [{"oid": "7b4560d719adb934eb5a936a47fa62ce295bcea7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7b4560d719adb934eb5a936a47fa62ce295bcea7", "message": "dependencyTree txt added to reference in chat", "committedDate": "2020-06-15T19:45:48Z", "type": "commit"}, {"oid": "cacb103e5df4c00428ab30d375d3c2808797938a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cacb103e5df4c00428ab30d375d3c2808797938a", "message": "Basic serializer", "committedDate": "2020-06-16T15:13:21Z", "type": "commit"}, {"oid": "2cec3a8aae26eabdc863e02ac0f98c50d2935354", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2cec3a8aae26eabdc863e02ac0f98c50d2935354", "message": "close to complete tree serializer but line beginnings not correct", "committedDate": "2020-06-16T15:30:12Z", "type": "commit"}, {"oid": "cbb4490628350249b197f8c7c500e2c5dc3010fc", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cbb4490628350249b197f8c7c500e2c5dc3010fc", "message": "cleaning code and adding scope to labels and tests", "committedDate": "2020-06-16T19:34:16Z", "type": "commit"}, {"oid": "0c261b1cc3e2a7bb9598376a4a0799ca13384fb4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0c261b1cc3e2a7bb9598376a4a0799ca13384fb4", "message": "scope added to tests", "committedDate": "2020-06-16T19:48:24Z", "type": "commit"}, {"oid": "cb7da5056a9b4a27c2a007ccb0c6cdc50d4a9c1f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cb7da5056a9b4a27c2a007ccb0c6cdc50d4a9c1f", "message": "clean up code", "committedDate": "2020-06-16T19:56:12Z", "type": "commit"}, {"oid": "1962a0c78427c209624febf0935179c267e1b7f7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1962a0c78427c209624febf0935179c267e1b7f7", "message": "test changes", "committedDate": "2020-06-16T20:29:27Z", "type": "commit"}, {"oid": "f5dbccaf5ea210f0cf2a0252839b50f83df463a4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f5dbccaf5ea210f0cf2a0252839b50f83df463a4", "message": "meeting changes implemented", "committedDate": "2020-06-16T21:32:23Z", "type": "commit"}, {"oid": "14d0938cff93d0692eba180624d6ea9cc52d0eb1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/14d0938cff93d0692eba180624d6ea9cc52d0eb1", "message": "added optional dependency message and test", "committedDate": "2020-06-16T21:54:56Z", "type": "commit"}, {"oid": "bbc0a3d959248d0a32cec0aaa91bc83efca87c6f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bbc0a3d959248d0a32cec0aaa91bc83efca87c6f", "message": "rename duplicateArtifact method", "committedDate": "2020-06-16T21:58:33Z", "type": "commit"}, {"oid": "1cd0919d50afc2d8416d9bcbf28af6d775848bb0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1cd0919d50afc2d8416d9bcbf28af6d775848bb0", "message": "Merge branch 'master' into SerializeDependencyGraph", "committedDate": "2020-06-16T22:56:19Z", "type": "commit"}, {"oid": "3c44e7bc698586283234487442747423f331ec7f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3c44e7bc698586283234487442747423f331ec7f", "message": "Merge branch 'master' into SerializeDependencyGraph", "committedDate": "2020-06-17T14:28:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzUxMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r442497512", "bodyText": "can these be final?", "author": "elharo", "createdAt": "2020-06-18T20:55:56Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SerializeGraph\n+{\n+    // will be injected eventually\n+    private String outputType;\n+\n+    private Map<DependencyNode, Boolean> visitedNodes;", "originalCommit": "3c44e7bc698586283234487442747423f331ec7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzkxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r442497915", "bodyText": "ArtifactString --> CoordinateString", "author": "elharo", "createdAt": "2020-06-18T20:56:46Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SerializeGraph\n+{\n+    // will be injected eventually\n+    private String outputType;\n+\n+    private Map<DependencyNode, Boolean> visitedNodes;\n+    private Set<String> artifactSet;\n+    private StringBuilder builder;\n+\n+    public SerializeGraph()\n+    {\n+        visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n+        artifactSet = new HashSet<String>();\n+        builder = new StringBuilder();\n+    }\n+\n+    public String serialize( DependencyNode root )\n+    {\n+        return dfs( root, \"\" ).toString();\n+    }\n+\n+    private static void appendDependency( StringBuilder builder, DependencyNode node )\n+    {\n+        String scope = node.getDependency().getScope();\n+        builder.append( getArtifactString( node.getArtifact() ) );\n+\n+        if ( scope != null && !scope.isEmpty() )\n+        {\n+            builder.append( \":\" ).append( scope );\n+        }\n+    }\n+\n+    private static String getArtifactString( Artifact artifact )", "originalCommit": "3c44e7bc698586283234487442747423f331ec7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5ODU0Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r442498547", "bodyText": "I would tend not to statically import this, but up to you.", "author": "elharo", "createdAt": "2020-06-18T20:58:04Z", "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/SerializeGraphTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.plugin.testing.AbstractMojoTestCase;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.graph.DefaultDependencyNode;\n+import org.eclipse.aether.graph.Dependency;\n+import org.eclipse.aether.graph.DependencyNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.apache.commons.io.FileUtils.readFileToString;", "originalCommit": "3c44e7bc698586283234487442747423f331ec7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ca26a92ea5377eb231d9736dfb8eb1a025dc2b3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4ca26a92ea5377eb231d9736dfb8eb1a025dc2b3", "message": "PR comment changes", "committedDate": "2020-06-22T15:31:41Z", "type": "commit"}, {"oid": "5f92d9e9f850687831c8004f6932a26c1140324e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5f92d9e9f850687831c8004f6932a26c1140324e", "message": "Merge branch 'master' into SerializeDependencyGraph", "committedDate": "2020-06-22T15:40:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NDYxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443654610", "bodyText": "Please add Javadoc comment explaining purpose of the overall class.", "author": "bimargulies-google", "createdAt": "2020-06-22T15:44:38Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+", "originalCommit": "5f92d9e9f850687831c8004f6932a26c1140324e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NjUxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443656510", "bodyText": "Do you need classifier in here?", "author": "bimargulies-google", "createdAt": "2020-06-22T15:47:30Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SerializeGraph\n+{\n+    // will be injected eventually\n+    private String outputType;\n+\n+    private final Map<DependencyNode, Boolean> visitedNodes;\n+    private final Set<String> artifactSet;\n+    private StringBuilder builder;\n+\n+    public SerializeGraph()\n+    {\n+        visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n+        artifactSet = new HashSet<String>();\n+        builder = new StringBuilder();\n+    }\n+\n+    public String serialize( DependencyNode root )\n+    {\n+        return dfs( root, \"\" ).toString();\n+    }\n+\n+    private static void appendDependency( StringBuilder builder, DependencyNode node )\n+    {\n+        String scope = node.getDependency().getScope();\n+        builder.append( getCoordinateString( node.getArtifact() ) );\n+\n+        if ( scope != null && !scope.isEmpty() )\n+        {\n+            builder.append( \":\" ).append( scope );\n+        }\n+    }\n+\n+    private static String getCoordinateString( Artifact artifact )\n+    {\n+        return artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" +\n+                artifact.getExtension() + \":\" + artifact.getVersion();", "originalCommit": "5f92d9e9f850687831c8004f6932a26c1140324e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTQzNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443669437", "bodyText": "Also Scope? Optional? How do you determine if this comparison logic is thorough?", "author": "stephaniewang526", "createdAt": "2020-06-22T16:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NjUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MDIzMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443680230", "bodyText": "Based on the documentation https://maven.apache.org/plugins/maven-dependency-plugin/examples/resolving-conflicts-using-the-dependency-tree.html I think they just use GroupID:ArtifactID:Extension:Version:Scope so I don't think I need classifier.", "author": "ian-lavallee", "createdAt": "2020-06-22T16:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NjUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MjcyMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443682722", "bodyText": "@stephaniewang526 thanks for pointing this out, the comparison logic needs some additions before it's ready.", "author": "ian-lavallee", "createdAt": "2020-06-22T16:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NjUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc3Mzg3NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443773874", "bodyText": "classifier should be needed. Here's an example I saw recently:\n[WARNING] Some problems were encountered while building the effective model for com.google.cloud:google-cloud-bigquerystorage:jar:0.134.0-beta\n[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: com.google.protobuf:protobuf-java:jar -> duplicate declaration of version (?) @ line 159, column 17\n\nHere is a real example where we are using test classifier dependency as a test dependency:\n      <dependency>\n        <groupId>com.google.cloud</groupId>\n        <artifactId>google-cloud-core</artifactId>\n        <version>${google.core.version}</version>\n        <classifier>tests</classifier>\n      </dependency>\n\nNote that google-cloud-core appears several times in the pom of java-shared-dependencies repo (in the BOM, as a test-jar, and as a test classified dep).\nYou may wish to figure out what Maven considers a duplicate dependency.", "author": "stephaniewang526", "createdAt": "2020-06-22T19:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NjUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1Njk3NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443656975", "bodyText": "Nit. put period after cycle and at the end of the other sentences in this section.", "author": "bimargulies-google", "createdAt": "2020-06-22T15:48:10Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SerializeGraph\n+{\n+    // will be injected eventually\n+    private String outputType;\n+\n+    private final Map<DependencyNode, Boolean> visitedNodes;\n+    private final Set<String> artifactSet;\n+    private StringBuilder builder;\n+\n+    public SerializeGraph()\n+    {\n+        visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n+        artifactSet = new HashSet<String>();\n+        builder = new StringBuilder();\n+    }\n+\n+    public String serialize( DependencyNode root )\n+    {\n+        return dfs( root, \"\" ).toString();\n+    }\n+\n+    private static void appendDependency( StringBuilder builder, DependencyNode node )\n+    {\n+        String scope = node.getDependency().getScope();\n+        builder.append( getCoordinateString( node.getArtifact() ) );\n+\n+        if ( scope != null && !scope.isEmpty() )\n+        {\n+            builder.append( \":\" ).append( scope );\n+        }\n+    }\n+\n+    private static String getCoordinateString( Artifact artifact )\n+    {\n+        return artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" +\n+                artifact.getExtension() + \":\" + artifact.getVersion();\n+    }\n+\n+    private boolean isDuplicateArtifact( Artifact artifact )\n+    {\n+        String coordinateString = getCoordinateString( artifact );\n+        return artifactSet.contains( coordinateString );\n+    }\n+\n+    public StringBuilder dfs( DependencyNode node, String start )\n+    {\n+        builder.append( start );\n+        appendDependency( builder, node );\n+\n+        if ( visitedNodes.containsKey( node ) )\n+        {\n+            builder.append( \" (Omitted due to cycle)\" ).append( System.lineSeparator() );", "originalCommit": "5f92d9e9f850687831c8004f6932a26c1140324e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15286b791be633fe49ee8d601ba2df12da5d2229", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/15286b791be633fe49ee8d601ba2df12da5d2229", "message": "more PR comment changes", "committedDate": "2020-06-22T16:25:12Z", "type": "commit"}, {"oid": "cb253dfca57a0c7812322e6d4e6eb99be86733ae", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cb253dfca57a0c7812322e6d4e6eb99be86733ae", "message": "Merge branch 'SerializeDependencyGraph' of https://github.com/GoogleCloudPlatform/cloud-opensource-java into SerializeDependencyGraph", "committedDate": "2020-06-22T16:25:23Z", "type": "commit"}, {"oid": "31b44e660c908ab720e49b2fdd21da9443073d82", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/31b44e660c908ab720e49b2fdd21da9443073d82", "message": "Scope and version conflict logic added and code cleaned up a bit", "committedDate": "2020-06-22T18:02:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNTYwNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443735606", "bodyText": "nit: Maven -Dverbose syntax looks like (com.google.auto.value:auto-value-annotations:jar:1.7.2:compile - omitted for duplicate). We probably want to be consistent?", "author": "stephaniewang526", "createdAt": "2020-06-22T18:03:22Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Class to parse dependency graph and output in text format for end user to review\n+ *\n+ */\n+public class SerializeGraph\n+{\n+    // will be injected eventually\n+    private String outputType;\n+\n+    private final Map<DependencyNode, Boolean> visitedNodes;\n+    private final Set<String> artifactSet;\n+    private StringBuilder builder;\n+\n+    public SerializeGraph()\n+    {\n+        visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n+        artifactSet = new HashSet<String>();\n+        builder = new StringBuilder();\n+    }\n+\n+    public String serialize( DependencyNode root )\n+    {\n+        return dfs( root, \"\" ).toString();\n+    }\n+\n+    private static void appendDependency( StringBuilder builder, DependencyNode node )\n+    {\n+        String scope = node.getDependency().getScope();\n+        builder.append( getCoordinateString( node.getArtifact() ) );\n+\n+        if ( scope != null && !scope.isEmpty() )\n+        {\n+            builder.append( \":\" ).append( scope );\n+        }\n+    }\n+\n+    private static String getCoordinateString( Artifact artifact )\n+    {\n+        return artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" +\n+                artifact.getExtension() + \":\" + artifact.getVersion();\n+    }\n+\n+    private boolean isDuplicateArtifact( Artifact artifact )\n+    {\n+        String coordinateString = getCoordinateString( artifact );\n+        return artifactSet.contains( coordinateString );\n+    }\n+\n+    public StringBuilder dfs( DependencyNode node, String start )\n+    {\n+        builder.append( start );\n+        appendDependency( builder, node );\n+\n+        if ( visitedNodes.containsKey( node ) )\n+        {\n+            builder.append( \" (Omitted due to cycle.)\" ).append( System.lineSeparator() );\n+        }\n+        else if ( isDuplicateArtifact( node.getArtifact() ) )\n+        {\n+            builder.append( \" (Omitted due to duplicate artifact.)\" ).append( System.lineSeparator() );", "originalCommit": "cb253dfca57a0c7812322e6d4e6eb99be86733ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjY2MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443736661", "bodyText": "Checking hardcoded string tends to be not future-proof -- as soon as those strings change, your logic will break. Is there any other way for you to tell where the dependency is? If not, can you make this logic more dynamic?", "author": "stephaniewang526", "createdAt": "2020-06-22T18:05:16Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *  Copyright 2020 Google LLC.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Class to parse dependency graph and output in text format for end user to review\n+ *\n+ */\n+public class SerializeGraph\n+{\n+    // will be injected eventually\n+    private String outputType;\n+\n+    private final Map<DependencyNode, Boolean> visitedNodes;\n+    private final Set<String> artifactSet;\n+    private StringBuilder builder;\n+\n+    public SerializeGraph()\n+    {\n+        visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n+        artifactSet = new HashSet<String>();\n+        builder = new StringBuilder();\n+    }\n+\n+    public String serialize( DependencyNode root )\n+    {\n+        return dfs( root, \"\" ).toString();\n+    }\n+\n+    private static void appendDependency( StringBuilder builder, DependencyNode node )\n+    {\n+        String scope = node.getDependency().getScope();\n+        builder.append( getCoordinateString( node.getArtifact() ) );\n+\n+        if ( scope != null && !scope.isEmpty() )\n+        {\n+            builder.append( \":\" ).append( scope );\n+        }\n+    }\n+\n+    private static String getCoordinateString( Artifact artifact )\n+    {\n+        return artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" +\n+                artifact.getExtension() + \":\" + artifact.getVersion();\n+    }\n+\n+    private boolean isDuplicateArtifact( Artifact artifact )\n+    {\n+        String coordinateString = getCoordinateString( artifact );\n+        return artifactSet.contains( coordinateString );\n+    }\n+\n+    public StringBuilder dfs( DependencyNode node, String start )\n+    {\n+        builder.append( start );\n+        appendDependency( builder, node );\n+\n+        if ( visitedNodes.containsKey( node ) )\n+        {\n+            builder.append( \" (Omitted due to cycle.)\" ).append( System.lineSeparator() );\n+        }\n+        else if ( isDuplicateArtifact( node.getArtifact() ) )\n+        {\n+            builder.append( \" (Omitted due to duplicate artifact.)\" ).append( System.lineSeparator() );\n+        }\n+        else if ( node.getDependency().isOptional() )\n+        {\n+            builder.append( \" (Omitted due to optional dependency.)\" ).append( System.lineSeparator() );\n+        }\n+        else\n+        {\n+            artifactSet.add( getCoordinateString( node.getArtifact() ) );\n+            builder.append( System.lineSeparator() );\n+            visitedNodes.put( node, true );\n+\n+            for ( int i = 0; i < node.getChildren().size(); i++ )\n+            {\n+                if ( start.endsWith( \"+- \" ) )", "originalCommit": "cb253dfca57a0c7812322e6d4e6eb99be86733ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4ODgwMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1480#discussion_r443788800", "bodyText": "Is this an issue since it's that methods responsibility to decide what strings to use anyways, they can't be changed externally? I will change the method to private to reflect that and I'll move the common strings into a variable to make maintaining it easier. Let me know if this isn't good enough because it should be fairly easy to get rid of the string comparison completely.", "author": "ian-lavallee", "createdAt": "2020-06-22T19:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNjY2MQ=="}], "type": "inlineReview"}, {"oid": "228c433a2923e7d8e654491e0ac5a4a2be8cc6b9", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/228c433a2923e7d8e654491e0ac5a4a2be8cc6b9", "message": "change formatting of output text", "committedDate": "2020-06-22T19:57:13Z", "type": "commit"}, {"oid": "974ca1604d7859a13d9fef6b9b8145511e350c36", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/974ca1604d7859a13d9fef6b9b8145511e350c36", "message": "more minor formatting changes", "committedDate": "2020-06-22T20:00:09Z", "type": "commit"}, {"oid": "d62357cf0fcf701254500af972917c603feefe96", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d62357cf0fcf701254500af972917c603feefe96", "message": "moved hardcoded strings to variable", "committedDate": "2020-06-22T20:03:33Z", "type": "commit"}, {"oid": "c1da52ab13c23b43d5ee3088eae3efe2d632be07", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c1da52ab13c23b43d5ee3088eae3efe2d632be07", "message": "Merge branch 'master' into SerializeDependencyGraph", "committedDate": "2020-06-22T20:04:24Z", "type": "commit"}, {"oid": "4bd8e09bb24d590f53131aa9b4a38d518111255d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4bd8e09bb24d590f53131aa9b4a38d518111255d", "message": "changes from meeting", "committedDate": "2020-06-22T21:32:15Z", "type": "commit"}, {"oid": "36418095b7932428c2a55b9c7e538299abcb797c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/36418095b7932428c2a55b9c7e538299abcb797c", "message": "Merge branch 'master' into SerializeDependencyGraph", "committedDate": "2020-06-22T21:32:29Z", "type": "commit"}, {"oid": "07ad7227439f7c7ce3fc73de24fe8dd3bb3e38e0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/07ad7227439f7c7ce3fc73de24fe8dd3bb3e38e0", "message": "Merge branch 'SerializeDependencyGraph' of https://github.com/GoogleCloudPlatform/cloud-opensource-java into SerializeDependencyGraph", "committedDate": "2020-06-22T21:32:54Z", "type": "commit"}]}