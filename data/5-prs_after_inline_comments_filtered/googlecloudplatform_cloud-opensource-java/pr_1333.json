{"pr_number": 1333, "pr_title": "LinkageCheckerMain to have option to write linkage errors as exclusion file.", "pr_createdAt": "2020-04-03T20:20:45Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333", "timeline": [{"oid": "a70891f219bea1b7937cfa6a07b6ea739992a164", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a70891f219bea1b7937cfa6a07b6ea739992a164", "message": "Started XmlOutputFactory", "committedDate": "2020-04-03T18:52:15Z", "type": "commit"}, {"oid": "0b9c5b4e7e7b6781c764f6fbc426328c30f06e79", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0b9c5b4e7e7b6781c764f6fbc426328c30f06e79", "message": "Merge remote-tracking branch 'origin/master' into i1276", "committedDate": "2020-04-03T19:18:46Z", "type": "commit"}, {"oid": "4b61a4b4884339b66668509643e5bc3f81887307", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4b61a4b4884339b66668509643e5bc3f81887307", "message": "Trying to use XMLEventFactory", "committedDate": "2020-04-03T20:14:21Z", "type": "commit"}, {"oid": "6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "message": "Not working", "committedDate": "2020-04-03T20:19:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxOTMxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403319310", "bodyText": "exclusion-file", "author": "elharo", "createdAt": "2020-04-03T20:41:38Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -170,6 +170,14 @@ private static Options configureOptions() {\n             .build();\n     options.addOption(exclusionFile);\n \n+    Option writeAsExclusionFile =\n+        Option.builder(\"w\")\n+            .longOpt(\"write-as-exclusion-file\")", "originalCommit": "6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzOTIyMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403339223", "bodyText": "This option is different from specifying exclusion file to filter linkage errors. Did you mean something further than that?", "author": "suztomo", "createdAt": "2020-04-03T21:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxOTMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MDI1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405660256", "bodyText": "OK. Didn't realize we were already using exclusion-file. Still write-as-exclusion-file isn't clear. Other names?", "author": "elharo", "createdAt": "2020-04-08T16:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxOTMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTM4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405671385", "bodyText": "Updated as output-linkage-errors-as-exclusion-file.", "author": "suztomo", "createdAt": "2020-04-08T16:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxOTMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMDE0Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403320146", "bodyText": "delete", "author": "elharo", "createdAt": "2020-04-03T20:42:43Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriterTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.cloud.tools.opensource.classpath.TestHelper.classPathEntryOfResource;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import javax.xml.stream.XMLStreamException;\n+import org.iso_relax.verifier.VerifierConfigurationException;\n+import org.junit.Test;\n+import org.xml.sax.SAXException;\n+\n+public class ExclusionFileWriterTest {\n+  @Test\n+  public void testExclusionFileCreation()\n+      throws IOException, XMLStreamException, VerifierConfigurationException, SAXException {\n+\n+    Path output = Files.createTempFile(\"output\", \".xml\");\n+\n+    SymbolProblem methodSymbolProblem =\n+        new SymbolProblem(\n+            new MethodSymbol(\n+                \"io.grpc.protobuf.ProtoUtils.marshaller\",\n+                \"marshaller\",\n+                \"(Lcom/google/protobuf/Message;)Lio/grpc/MethodDescriptor$Marshaller;\",\n+                false),\n+            ErrorType.SYMBOL_NOT_FOUND,\n+            new ClassFile(new ClassPathEntry(Paths.get(\"dummy.jar\")), \"java.lang.Object\"));\n+\n+    SymbolProblem classSymbolProblem =\n+        new SymbolProblem(new ClassSymbol(\"java.lang.Integer\"), ErrorType.CLASS_NOT_FOUND, null);\n+    ImmutableSetMultimap<SymbolProblem, ClassFile> linkageErrors =\n+        ImmutableSetMultimap.of(\n+            methodSymbolProblem, new ClassFile(new ClassPathEntry(Paths.get(\"source.jar\")), \"com.foo.Source1\"),\n+            classSymbolProblem,  new ClassFile(new ClassPathEntry(Paths.get(\"source.jar\")), \"com.foo.Source2\")\n+        );\n+    ExclusionFileWriter.write(output, linkageErrors);\n+\n+    System.out.println(\"Output\" + output);", "originalCommit": "6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNDM1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403334357", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-04-03T21:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMDQ1Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403320453", "bodyText": "can you use try with resources here?", "author": "elharo", "createdAt": "2020-04-03T20:43:08Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import com.thaiopensource.xml.sax.DraconianErrorHandler;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import org.iso_relax.verifier.Schema;\n+import org.iso_relax.verifier.Verifier;\n+import org.iso_relax.verifier.VerifierConfigurationException;\n+import org.iso_relax.verifier.VerifierFactory;\n+import org.iso_relax.verifier.VerifierFilter;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/** Writer for Linkage Checker exclusion files. */\n+class ExclusionFileWriter {\n+\n+  static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+  /** Writes {@code linkageErrors} as exclusion rules into to {@code outputFile}. */\n+  static void write(Path outputFile, Multimap<SymbolProblem, ClassFile> linkageErrors)\n+      throws IOException, XMLStreamException {\n+\n+    XMLEventWriter writer = null;\n+    try {", "originalCommit": "6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNDUwMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403334500", "bodyText": "It did not work. XMLEventWriter is not Autocloseable.", "author": "suztomo", "createdAt": "2020-04-03T21:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMDQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMTE0Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403321142", "bodyText": "delete \"to\"", "author": "elharo", "createdAt": "2020-04-03T20:44:02Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import com.thaiopensource.xml.sax.DraconianErrorHandler;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import org.iso_relax.verifier.Schema;\n+import org.iso_relax.verifier.Verifier;\n+import org.iso_relax.verifier.VerifierConfigurationException;\n+import org.iso_relax.verifier.VerifierFactory;\n+import org.iso_relax.verifier.VerifierFilter;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/** Writer for Linkage Checker exclusion files. */\n+class ExclusionFileWriter {\n+\n+  static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+  /** Writes {@code linkageErrors} as exclusion rules into to {@code outputFile}. */", "originalCommit": "6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNDQyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403334429", "bodyText": "Deleted.", "author": "suztomo", "createdAt": "2020-04-03T21:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMTE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMjc1MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r403322750", "bodyText": "It might be reasonable to combine the writing and the parsing into a single class.", "author": "elharo", "createdAt": "2020-04-03T20:46:16Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import com.thaiopensource.xml.sax.DraconianErrorHandler;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import org.iso_relax.verifier.Schema;\n+import org.iso_relax.verifier.Verifier;\n+import org.iso_relax.verifier.VerifierConfigurationException;\n+import org.iso_relax.verifier.VerifierFactory;\n+import org.iso_relax.verifier.VerifierFilter;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/** Writer for Linkage Checker exclusion files. */\n+class ExclusionFileWriter {", "originalCommit": "6ccb1a93031facab0c39bbaf66d2f421c422a4b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5MDI5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r404390295", "bodyText": "The writer and the parser do not share logic. But I'm also ok to combine the two into ExclusionFiles. Do you think it's good idea?", "author": "suztomo", "createdAt": "2020-04-06T21:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMjc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1MjY1MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405652651", "bodyText": "ExclusionFiles.write sounds better than ExclusionFilesWriter.write so yes.", "author": "elharo", "createdAt": "2020-04-08T16:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMjc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTcxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405671710", "bodyText": "Merged the two files into ExclusionFiles.", "author": "suztomo", "createdAt": "2020-04-08T16:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMjc1MA=="}], "type": "inlineReview"}, {"oid": "54aeedcf33593fe1189b41d93bec29a40db56bdb", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/54aeedcf33593fe1189b41d93bec29a40db56bdb", "message": "Test fixed", "committedDate": "2020-04-03T21:02:15Z", "type": "commit"}, {"oid": "afda55f1d39fae187aac00e0475c7b145d07ce28", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/afda55f1d39fae187aac00e0475c7b145d07ce28", "message": "assertion for different types", "committedDate": "2020-04-03T21:11:10Z", "type": "commit"}, {"oid": "4701cb92bbda62c94bcb11725d10e0b092095f0a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4701cb92bbda62c94bcb11725d10e0b092095f0a", "message": "format", "committedDate": "2020-04-03T21:11:24Z", "type": "commit"}, {"oid": "3ce28323fefa8122568bbc06545703a4babccac5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3ce28323fefa8122568bbc06545703a4babccac5", "message": "static variables", "committedDate": "2020-04-03T21:24:18Z", "type": "commit"}, {"oid": "c7bbcf73e44e7a40da9182fbcaa7591f43ff3c12", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c7bbcf73e44e7a40da9182fbcaa7591f43ff3c12", "message": "closing tags", "committedDate": "2020-04-03T21:25:54Z", "type": "commit"}, {"oid": "0b4ed641fe4ef01bc360585b7fabec7a7c8e2a1b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0b4ed641fe4ef01bc360585b7fabec7a7c8e2a1b", "message": "in the middle of jaxb.", "committedDate": "2020-04-03T21:59:00Z", "type": "commit"}, {"oid": "90a8152676b3b51fcacdd0e29463a0f592bbd534", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/90a8152676b3b51fcacdd0e29463a0f592bbd534", "message": "indent by transformer", "committedDate": "2020-04-03T22:14:51Z", "type": "commit"}, {"oid": "80ce12b48b19e40b9cb24d59ab91904497d5c590", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/80ce12b48b19e40b9cb24d59ab91904497d5c590", "message": "Merge remote-tracking branch 'origin/master' into i1276", "committedDate": "2020-04-06T19:28:11Z", "type": "commit"}, {"oid": "d1cf90f8fea93acdf0653fb9d6791dcff9b10aa5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d1cf90f8fea93acdf0653fb9d6791dcff9b10aa5", "message": "Test to ensure indentation", "committedDate": "2020-04-06T21:08:07Z", "type": "commit"}, {"oid": "4358d0b24f4cb46c04bca16e47372663fb14627d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4358d0b24f4cb46c04bca16e47372663fb14627d", "message": "try and autocloseable", "committedDate": "2020-04-06T21:15:01Z", "type": "commit"}, {"oid": "d7c0d03ad4ca34cf9aa482e84226c1fbedb80cbc", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d7c0d03ad4ca34cf9aa482e84226c1fbedb80cbc", "message": "integration test", "committedDate": "2020-04-07T14:27:34Z", "type": "commit"}, {"oid": "f246cab262270af461e4c4e782e40034590a434f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f246cab262270af461e4c4e782e40034590a434f", "message": "Catch throwable", "committedDate": "2020-04-07T14:35:44Z", "type": "commit"}, {"oid": "80b0102f46c47962e747a0c7b50d26d90d80114e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/80b0102f46c47962e747a0c7b50d26d90d80114e", "message": "print debug", "committedDate": "2020-04-07T14:46:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NzAxNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r404877017", "bodyText": "Got\nbytes length:0\nXML input: \nInputStream available: 0\n\nhttps://fusion.corp.google.com/invocation/88f8ef04-b8e5-447d-8ee1-c6e9f553ab7a/buildlogs?target=cloud-opensource-java%2Fgcp_windows%2Fpresubmit&drilldownTab=tests", "author": "suztomo", "createdAt": "2020-04-07T14:58:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -94,9 +94,15 @@ static void write(Path outputFile, Multimap<SymbolProblem, ClassFile> linkageErr\n       // Add new line character after doctype declaration\n       indentTransformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, \"yes\");\n \n+      byte[] bytes = buffer.toByteArray();\n+      System.out.println(\"bytes length:\" + bytes.length);\n+      System.out.println(\"XML input: \" + new String(bytes));\n+      ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n+      System.out.println(\"InputStream available: \" + inputStream.available());", "originalCommit": "80b0102f46c47962e747a0c7b50d26d90d80114e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f70c9e782d8d3a1682e00bd6a48d09f85f5d6276", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f70c9e782d8d3a1682e00bd6a48d09f85f5d6276", "message": "Close writer before reading", "committedDate": "2020-04-07T14:59:22Z", "type": "commit"}, {"oid": "881c9d1a33528e0ae9b289e36ecb539ff55a616f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/881c9d1a33528e0ae9b289e36ecb539ff55a616f", "message": "Removed debug print", "committedDate": "2020-04-07T15:09:44Z", "type": "commit"}, {"oid": "d27b8042b21307d34cf9683da4096fd8516a5319", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d27b8042b21307d34cf9683da4096fd8516a5319", "message": "Merge branch 'i1276' into exclusion_file_writer_integration_test", "committedDate": "2020-04-07T15:15:21Z", "type": "commit"}, {"oid": "34bc1445010fe626cef8a7680b88b7dcf7768e7d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/34bc1445010fe626cef8a7680b88b7dcf7768e7d", "message": "Integration test", "committedDate": "2020-04-07T15:34:13Z", "type": "commit"}, {"oid": "d85d071c3c1d33408b1c7e5fd127e0f5e2c5a4d0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d85d071c3c1d33408b1c7e5fd127e0f5e2c5a4d0", "message": "Write in main", "committedDate": "2020-04-07T15:34:27Z", "type": "commit"}, {"oid": "f50a203f40d24260494e6f2482cd660f034c966d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f50a203f40d24260494e6f2482cd660f034c966d", "message": "Merge branch 'i1276' into exclusion_file_writer_integration_test", "committedDate": "2020-04-07T15:34:48Z", "type": "commit"}, {"oid": "3515070051d52b3391482f28db80220c980928f0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3515070051d52b3391482f28db80220c980928f0", "message": "use temp file", "committedDate": "2020-04-07T15:37:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405652856", "bodyText": "private", "author": "elharo", "createdAt": "2020-04-08T16:25:43Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+/** Writer for Linkage Checker exclusion files. */\n+class ExclusionFileWriter {\n+\n+  static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();", "originalCommit": "3515070051d52b3391482f28db80220c980928f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTgwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405671802", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-04-08T16:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1Mjg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NzQyNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405657426", "bodyText": "I think we need to stop using multimaps. We need a better data type here.", "author": "elharo", "createdAt": "2020-04-08T16:32:38Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+/** Writer for Linkage Checker exclusion files. */\n+class ExclusionFileWriter {\n+\n+  static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+  private static final QName LINKAGE_CHECKER_FILTER_TAG = QName.valueOf(\"LinkageCheckerFilter\");\n+  private static final QName CLASS_TAG = QName.valueOf(\"Class\");\n+  private static final QName LINKAGE_ERROR_TAG = QName.valueOf(\"LinkageError\");\n+  private static final QName TARGET_TAG = QName.valueOf(\"Target\");\n+  private static final QName SOURCE_TAG = QName.valueOf(\"Source\");\n+  private static final QName METHOD_TAG = QName.valueOf(\"Method\");\n+  private static final QName FIELD_TAG = QName.valueOf(\"Field\");\n+\n+  /** Writes {@code linkageErrors} as exclusion rules into {@code outputFile}. */\n+  static void write(Path outputFile, Multimap<SymbolProblem, ClassFile> linkageErrors)", "originalCommit": "3515070051d52b3391482f28db80220c980928f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3NjA3Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405676076", "bodyText": "How about LinkageErrors class that has a field Multimap<SymbolProblem, ClassFile> errors? Anyway, such change is outside the scope of this PR.", "author": "suztomo", "createdAt": "2020-04-08T17:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NzQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1OTE5OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405659199", "bodyText": "You shouldn't need to do this. It should be enough to set that system property to point to the class you want.", "author": "elharo", "createdAt": "2020-04-08T16:35:21Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileWriter.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+/** Writer for Linkage Checker exclusion files. */\n+class ExclusionFileWriter {\n+\n+  static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+  private static final QName LINKAGE_CHECKER_FILTER_TAG = QName.valueOf(\"LinkageCheckerFilter\");\n+  private static final QName CLASS_TAG = QName.valueOf(\"Class\");\n+  private static final QName LINKAGE_ERROR_TAG = QName.valueOf(\"LinkageError\");\n+  private static final QName TARGET_TAG = QName.valueOf(\"Target\");\n+  private static final QName SOURCE_TAG = QName.valueOf(\"Source\");\n+  private static final QName METHOD_TAG = QName.valueOf(\"Method\");\n+  private static final QName FIELD_TAG = QName.valueOf(\"Field\");\n+\n+  /** Writes {@code linkageErrors} as exclusion rules into {@code outputFile}. */\n+  static void write(Path outputFile, Multimap<SymbolProblem, ClassFile> linkageErrors)\n+      throws IOException, XMLStreamException, TransformerException {\n+\n+    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+    XMLEventWriter writer = null;\n+    try {\n+      writer = XMLOutputFactory.newInstance().createXMLEventWriter(buffer);\n+\n+      writer.add(eventFactory.createStartDocument());\n+      writer.add(eventFactory.createStartElement(LINKAGE_CHECKER_FILTER_TAG, null, null));\n+\n+      for (SymbolProblem symbolProblem : linkageErrors.keySet()) {\n+        for (ClassFile classFile : linkageErrors.get(symbolProblem)) {\n+          writeXmlEvents(writer, symbolProblem, classFile);\n+        }\n+      }\n+\n+      writer.add(eventFactory.createEndElement(LINKAGE_CHECKER_FILTER_TAG, null));\n+      writer.add(eventFactory.createEndDocument());\n+\n+    } finally {\n+      if (writer != null) {\n+        writer.close();\n+      }\n+    }\n+\n+    try (OutputStream outputStream = Files.newOutputStream(outputFile)) {\n+      insertIndent(new ByteArrayInputStream(buffer.toByteArray()), outputStream);\n+    }\n+  }\n+\n+  private static void insertIndent(InputStream inputStream, OutputStream outputStream)\n+      throws TransformerException {\n+    if (System.getProperty(\"javax.xml.transform.TransformerFactory\") == null) {", "originalCommit": "3515070051d52b3391482f28db80220c980928f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MjExNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405682117", "bodyText": "Removed the unnecessary logic.", "author": "suztomo", "createdAt": "2020-04-08T17:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1OTE5OQ=="}], "type": "inlineReview"}, {"oid": "ed448ad55b85dbc8769fc0f829196c882f8da949", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ed448ad55b85dbc8769fc0f829196c882f8da949", "message": "Merged Parser and Writer to ExclusionFiles", "committedDate": "2020-04-08T17:02:21Z", "type": "commit"}, {"oid": "c900cbd3b6122643359c23493044fea1c2733e0b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c900cbd3b6122643359c23493044fea1c2733e0b", "message": "Simplified Xml indent logic", "committedDate": "2020-04-08T17:08:33Z", "type": "commit"}, {"oid": "3186264edc952b082771e71b41d93762f08e33de", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3186264edc952b082771e71b41d93762f08e33de", "message": "Argument option \"o\"", "committedDate": "2020-04-08T17:15:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzI4OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405703289", "bodyText": "By convention this file name would end in .rng; that is, \"linkage-checker-exclusion.rng\"\nhttps://en.wikipedia.org/wiki/RELAX_NG#Filename_extensions", "author": "elharo", "createdAt": "2020-04-08T17:46:37Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFiles.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import com.thaiopensource.xml.sax.DraconianErrorHandler;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.iso_relax.verifier.Schema;\n+import org.iso_relax.verifier.Verifier;\n+import org.iso_relax.verifier.VerifierConfigurationException;\n+import org.iso_relax.verifier.VerifierFactory;\n+import org.iso_relax.verifier.VerifierFilter;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Utility for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has a Package, Class, Method, or Field element. A Source element has an\n+ *       Artifact, Package, or Class element.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches its\n+ *       child element.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches its child element.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFiles {\n+  private static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+  private static final QName LINKAGE_CHECKER_FILTER_TAG = QName.valueOf(\"LinkageCheckerFilter\");\n+  private static final QName CLASS_TAG = QName.valueOf(\"Class\");\n+  private static final QName LINKAGE_ERROR_TAG = QName.valueOf(\"LinkageError\");\n+  private static final QName TARGET_TAG = QName.valueOf(\"Target\");\n+  private static final QName SOURCE_TAG = QName.valueOf(\"Source\");\n+  private static final QName METHOD_TAG = QName.valueOf(\"Method\");\n+  private static final QName FIELD_TAG = QName.valueOf(\"Field\");\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException, VerifierConfigurationException {\n+\n+    InputSource inputSource = new InputSource(Files.newInputStream(exclusionFile));\n+    inputSource.setSystemId(exclusionFile.toUri().toString());\n+\n+    return parse(inputSource);\n+  }\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(URL exclusionFile)\n+      throws SAXException, IOException, VerifierConfigurationException {\n+\n+    InputSource inputSource = new InputSource(exclusionFile.openStream());\n+    inputSource.setSystemId(exclusionFile.toString());\n+\n+    return parse(inputSource);\n+  }\n+\n+  private static ImmutableList<LinkageErrorMatcher> parse(InputSource inputSource)\n+      throws SAXException, IOException, VerifierConfigurationException {\n+\n+    XMLReader reader = createXmlReader();\n+\n+    ExclusionFileHandler handler = new ExclusionFileHandler();\n+    reader.setContentHandler(handler);\n+\n+    reader.parse(inputSource);\n+\n+    return handler.getMatchers();\n+  }\n+\n+  private static XMLReader createXmlReader()\n+      throws SAXException, IOException, VerifierConfigurationException {\n+    // Validate and parse XML files in one pass using Jing validator as a filter.\n+    // http://iso-relax.sourceforge.net/JARV/JARV.html#use_42\n+    VerifierFactory factory = VerifierFactory.newInstance(\"http://relaxng.org/ns/structure/1.0\");\n+    InputStream linkageCheckerSchema =\n+        ExclusionFiles.class\n+            .getClassLoader()\n+            .getResourceAsStream(\"linkage-checker-exclusion-relax-ng.xml\");", "originalCommit": "3186264edc952b082771e71b41d93762f08e33de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzk5Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405713997", "bodyText": "Thanks. Updated.", "author": "suztomo", "createdAt": "2020-04-08T18:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNTU3OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405705579", "bodyText": "Can you cut the long argument down to one or two words? Three at most.", "author": "elharo", "createdAt": "2020-04-08T17:50:29Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -170,6 +170,14 @@ private static Options configureOptions() {\n             .build();\n     options.addOption(exclusionFile);\n \n+    Option writeAsExclusionFile =\n+        Option.builder(\"o\")\n+            .longOpt(\"output-linkage-errors-as-exclusion-file\")", "originalCommit": "3186264edc952b082771e71b41d93762f08e33de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNzczOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405717738", "bodyText": "Updated this to output-exclusion-file", "author": "suztomo", "createdAt": "2020-04-08T18:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNjMzNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405706334", "bodyText": "This should be renamed similarly. Maybe we can have inputExclusionFile and outputExclusionFile? or just outputExclusions?", "author": "elharo", "createdAt": "2020-04-08T17:51:45Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -251,4 +259,15 @@ Path getExclusionFile() {\n     }\n     return null;\n   }\n+\n+  /**\n+   * Returns the path to write linkage errors as exclusion file. If the argument is not specified,\n+   * {@code null}.\n+   */\n+  Path getWriteAsExclusionFile() {", "originalCommit": "3186264edc952b082771e71b41d93762f08e33de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjMzNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405716336", "bodyText": "outputExclusionFile sounds nice. Thank you.", "author": "suztomo", "createdAt": "2020-04-08T18:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNjMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNjg3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405706873", "bodyText": "This surprises me. I thought you could do both in one run.", "author": "elharo", "createdAt": "2020-04-08T17:52:45Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -94,9 +98,14 @@ public static void main(String[] arguments) throws IOException, RepositoryExcept\n                   Multimaps.filterValues(\n                       symbolProblems, classFile -> graph.isReachable(classFile.getBinaryName())));\n         }\n-    \n-        System.out.println(SymbolProblem.formatSymbolProblems(symbolProblems));\n-    \n+\n+        Path writeAsExclusionFile = linkageCheckerArguments.getWriteAsExclusionFile();\n+        if (writeAsExclusionFile == null) {", "originalCommit": "3186264edc952b082771e71b41d93762f08e33de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNTU2NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r405715565", "bodyText": "Updated this to always output the linkage errors to stdout.\nI had thought the output is not wanted when the writeAsExclusionFile is specified.", "author": "suztomo", "createdAt": "2020-04-08T18:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNjg3Mw=="}], "type": "inlineReview"}, {"oid": "347637015bd81a5d2d7f366b5327f4abccab0c75", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/347637015bd81a5d2d7f366b5327f4abccab0c75", "message": "rng", "committedDate": "2020-04-08T18:04:18Z", "type": "commit"}, {"oid": "4b7033dc8239e1dec9cbae5b0a5e77304d0e5509", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4b7033dc8239e1dec9cbae5b0a5e77304d0e5509", "message": "output-exclusion-file", "committedDate": "2020-04-08T18:10:37Z", "type": "commit"}, {"oid": "f9a639fcbc64facc33463d280b38b1efc251db22", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f9a639fcbc64facc33463d280b38b1efc251db22", "message": "description", "committedDate": "2020-04-08T18:12:12Z", "type": "commit"}, {"oid": "d1ca6c09264f10ee2d87d812e50b244f452a6f9f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d1ca6c09264f10ee2d87d812e50b244f452a6f9f", "message": "Merge branch 'master' into i1276", "committedDate": "2020-04-10T02:21:21Z", "type": "commit"}, {"oid": "26046a3c426c29a87b9c4d32c1d7a0e496a2d6d4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/26046a3c426c29a87b9c4d32c1d7a0e496a2d6d4", "message": "Merge remote-tracking branch 'origin/master' into i1276", "committedDate": "2020-04-10T14:58:23Z", "type": "commit"}, {"oid": "9ac042a07b0e4b822682abc58bf33cee096b135f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9ac042a07b0e4b822682abc58bf33cee096b135f", "message": "Fixed test", "committedDate": "2020-04-10T15:02:00Z", "type": "commit"}, {"oid": "9e6e20295dacdd87b39db39941c812a48c28901a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9e6e20295dacdd87b39db39941c812a48c28901a", "message": "Merge remote-tracking branch 'origin/master' into i1276", "committedDate": "2020-04-13T19:00:26Z", "type": "commit"}, {"oid": "d246c88ddcf3f833efb59b05ba569cc9ce5e2523", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d246c88ddcf3f833efb59b05ba569cc9ce5e2523", "message": "Merge branch 'master' into i1276", "committedDate": "2020-04-15T14:42:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYzNDMxOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1333#discussion_r409634319", "bodyText": "This is the sort of use of multimap that confuses me. Is the classFile the source or the target? It's unclear how it's encoded or what it means. This should be a Collection and the symbol problem should know the source and the target. What we're writing into the file is a list of linkage errors. Why aren't we passing a list of linkage errors into this method?", "author": "elharo", "createdAt": "2020-04-16T15:09:52Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFiles.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multimap;\n+import com.thaiopensource.xml.sax.DraconianErrorHandler;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.StartElement;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.iso_relax.verifier.Schema;\n+import org.iso_relax.verifier.Verifier;\n+import org.iso_relax.verifier.VerifierConfigurationException;\n+import org.iso_relax.verifier.VerifierFactory;\n+import org.iso_relax.verifier.VerifierFilter;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Utility for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has a Package, Class, Method, or Field element. A Source element has an\n+ *       Artifact, Package, or Class element.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches its\n+ *       child element.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches its child element.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFiles {\n+  private static final XMLEventFactory eventFactory = XMLEventFactory.newInstance();\n+\n+  private static final QName LINKAGE_CHECKER_FILTER_TAG = QName.valueOf(\"LinkageCheckerFilter\");\n+  private static final QName CLASS_TAG = QName.valueOf(\"Class\");\n+  private static final QName LINKAGE_ERROR_TAG = QName.valueOf(\"LinkageError\");\n+  private static final QName TARGET_TAG = QName.valueOf(\"Target\");\n+  private static final QName SOURCE_TAG = QName.valueOf(\"Source\");\n+  private static final QName METHOD_TAG = QName.valueOf(\"Method\");\n+  private static final QName FIELD_TAG = QName.valueOf(\"Field\");\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException, VerifierConfigurationException {\n+\n+    InputSource inputSource = new InputSource(Files.newInputStream(exclusionFile));\n+    inputSource.setSystemId(exclusionFile.toUri().toString());\n+\n+    return parse(inputSource);\n+  }\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(URL exclusionFile)\n+      throws SAXException, IOException, VerifierConfigurationException {\n+\n+    InputSource inputSource = new InputSource(exclusionFile.openStream());\n+    inputSource.setSystemId(exclusionFile.toString());\n+\n+    return parse(inputSource);\n+  }\n+\n+  private static ImmutableList<LinkageErrorMatcher> parse(InputSource inputSource)\n+      throws SAXException, IOException, VerifierConfigurationException {\n+\n+    XMLReader reader = createXmlReader();\n+\n+    ExclusionFileHandler handler = new ExclusionFileHandler();\n+    reader.setContentHandler(handler);\n+\n+    reader.parse(inputSource);\n+\n+    return handler.getMatchers();\n+  }\n+\n+  private static XMLReader createXmlReader()\n+      throws SAXException, IOException, VerifierConfigurationException {\n+    // Validate and parse XML files in one pass using Jing validator as a filter.\n+    // http://iso-relax.sourceforge.net/JARV/JARV.html#use_42\n+    VerifierFactory factory = VerifierFactory.newInstance(\"http://relaxng.org/ns/structure/1.0\");\n+    InputStream linkageCheckerSchema =\n+        ExclusionFiles.class.getClassLoader().getResourceAsStream(\"linkage-checker-exclusion.rng\");\n+    Schema schema = factory.compileSchema(linkageCheckerSchema);\n+    Verifier verifier = schema.newVerifier();\n+\n+    // DraconianErrorHandler throws SAXException upon invalid structure\n+    verifier.setErrorHandler(new DraconianErrorHandler());\n+    VerifierFilter filter = verifier.getVerifierFilter();\n+    filter.setParent(XMLReaderFactory.createXMLReader());\n+    return filter;\n+  }\n+\n+  /** Writes {@code linkageErrors} as exclusion rules into {@code outputFile}. */\n+  static void write(Path outputFile, Multimap<SymbolProblem, ClassFile> linkageErrors)", "originalCommit": "d246c88ddcf3f833efb59b05ba569cc9ce5e2523", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "44a4f51fdd43a949f70b766c4d198f79c405a876", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/44a4f51fdd43a949f70b766c4d198f79c405a876", "message": "Merge branch 'master' into i1276", "committedDate": "2020-04-16T16:19:12Z", "type": "commit"}]}