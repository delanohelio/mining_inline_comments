{"pr_number": 1629, "pr_title": "ReturnTypeChangedProblem", "pr_createdAt": "2020-09-01T16:18:38Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629", "timeline": [{"oid": "5d36619f160a4a12acd00e96b539fce92ae59804", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5d36619f160a4a12acd00e96b539fce92ae59804", "message": "MethodWithReturnTypeNotFoundProblem", "committedDate": "2020-09-01T16:18:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MjY4MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481282680", "bodyText": "actualSignature", "author": "elharo", "createdAt": "2020-09-01T16:37:00Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String signatureInTargetClass = method.getSignature();", "originalCommit": "5d36619f160a4a12acd00e96b539fce92ae59804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NzU4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481287585", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-01T16:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MjY4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc3OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481282779", "bodyText": "expectedSignature", "author": "elharo", "createdAt": "2020-09-01T16:37:12Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String signatureInTargetClass = method.getSignature();\n+            String signatureLookingFor = symbol.getDescriptor();", "originalCommit": "5d36619f160a4a12acd00e96b539fce92ae59804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NzYxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481287615", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-01T16:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzEwMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481283100", "bodyText": "\"another supertype\" or \"other supertypes\"", "author": "elharo", "createdAt": "2020-09-01T16:37:44Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String signatureInTargetClass = method.getSignature();\n+            String signatureLookingFor = symbol.getDescriptor();\n+            if (signatureInTargetClass.equals(signatureLookingFor)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(signatureInTargetClass);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(signatureLookingFor);\n+              if (argumentTypeInTarget.equals(argumentTypeLookingFor)) {\n+                // Not returning result yet, because there can be other supertype that has the exact", "originalCommit": "5d36619f160a4a12acd00e96b539fce92ae59804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NzgxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481287816", "bodyText": "Updated to another supertype.", "author": "suztomo", "createdAt": "2020-09-01T16:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzQwOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481283409", "bodyText": "returnTypeChanged", "author": "elharo", "createdAt": "2020-09-01T16:38:12Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;", "originalCommit": "5d36619f160a4a12acd00e96b539fce92ae59804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NzM2NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481287365", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-01T16:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mzk0Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481283942", "bodyText": "ReturnTypeChangedProblem", "author": "elharo", "createdAt": "2020-09-01T16:39:07Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodWithReturnTypeNotFoundProblem.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with different return type.\n+ */\n+class MethodWithReturnTypeNotFoundProblem extends LinkageProblem {", "originalCommit": "5d36619f160a4a12acd00e96b539fce92ae59804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4ODY3OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481288678", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-01T16:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mzk0Mg=="}], "type": "inlineReview"}, {"oid": "09d50fc0ce4b04f8282c251091c85d50a95771ff", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/09d50fc0ce4b04f8282c251091c85d50a95771ff", "message": "Applied review", "committedDate": "2020-09-01T16:48:19Z", "type": "commit"}, {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bc188724b18d4a4edf3b1877f01d54217e570ee5", "message": "Format", "committedDate": "2020-09-01T16:50:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTkwMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481315903", "bodyText": "actualArgumentType", "author": "elharo", "createdAt": "2020-09-01T17:33:38Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);", "originalCommit": "bc188724b18d4a4edf3b1877f01d54217e570ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTM3NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481355375", "bodyText": "Updated", "author": "suztomo", "createdAt": "2020-09-01T18:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjAxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481316010", "bodyText": "expectedArgumentType", "author": "elharo", "createdAt": "2020-09-01T17:33:49Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(expectedSignature);", "originalCommit": "bc188724b18d4a4edf3b1877f01d54217e570ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTQxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481355416", "bodyText": "Updated", "author": "suztomo", "createdAt": "2020-09-01T18:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjE5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481316195", "bodyText": "matches", "author": "elharo", "createdAt": "2020-09-01T17:34:09Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(expectedSignature);\n+              if (argumentTypeInTarget.equals(argumentTypeLookingFor)) {\n+                // Not returning result yet, because there can be another supertype that has the\n+                // exact method that match the name, argument types, and return type.", "originalCommit": "bc188724b18d4a4edf3b1877f01d54217e570ee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTUzMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481355533", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-09-01T18:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjE5NQ=="}], "type": "inlineReview"}, {"oid": "d0dfcf44f357cee014ca75bbcf3096b320ec478f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d0dfcf44f357cee014ca75bbcf3096b320ec478f", "message": "Merge remote-tracking branch 'origin/master' into MethodWithReturnTypeNotFoundProblem", "committedDate": "2020-09-01T18:40:43Z", "type": "commit"}, {"oid": "fabd0509e55a5b75ed160b7545666c65a536ffe2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fabd0509e55a5b75ed160b7545666c65a536ffe2", "message": "ReturnTypeChangedProblem to have actual return type", "committedDate": "2020-09-01T18:46:04Z", "type": "commit"}, {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "message": "format", "committedDate": "2020-09-01T18:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzE5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481357195", "bodyText": "Now it tells the actual type.", "author": "suztomo", "createdAt": "2020-09-01T18:48:31Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {\n+    super(\n+        \"is not found. The expected return type does not match actual type \" + actualTypeName,", "originalCommit": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzQ5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481357491", "bodyText": "non-public", "author": "elharo", "createdAt": "2020-09-01T18:49:05Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(", "originalCommit": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDQzNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481360434", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-09-01T18:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzgxNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481357814", "bodyText": "match the", "author": "elharo", "createdAt": "2020-09-01T18:49:43Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {\n+    super(\n+        \"is not found. The expected return type does not match actual type \" + actualTypeName,", "originalCommit": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDY1OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481360659", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-01T18:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1ODI5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481358293", "bodyText": "{@code methodSymbol} does not exist below. {@code expectedMethodSymbol} perhaps?", "author": "elharo", "createdAt": "2020-09-01T18:50:33Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code", "originalCommit": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDM1Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481360353", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-09-01T18:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1ODI5Mw=="}], "type": "inlineReview"}, {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6f07a95784c1c46366ed2cb428cd80828d58d566", "message": "Applied review", "committedDate": "2020-09-01T18:54:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NjU1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r482486557", "bodyText": "This has been moved to line 290.", "author": "suztomo", "createdAt": "2020-09-02T21:23:58Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +275,41 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      String changedReturnTypeName = null;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String actualArgumentType = parseArgumentTypeParts(actualSignature);\n+              String expectedArgumentType = parseArgumentTypeParts(expectedSignature);\n+              if (actualArgumentType.equals(expectedArgumentType)) {\n+                // Not returning result yet, because there can be another supertype that has the\n+                // exact method that matches the name, argument types, and return type.\n+                changedReturnTypeName = Utility.methodSignatureReturnType(actualSignature);\n+              }\n             }\n-            // The method is found and accessible. Returning no error.\n-            return Optional.empty();", "originalCommit": "6f07a95784c1c46366ed2cb428cd80828d58d566", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTc2NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483001765", "bodyText": "changedReturnTypeName --> changedReturnType", "author": "elharo", "createdAt": "2020-09-03T14:02:00Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +275,41 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      String changedReturnTypeName = null;", "originalCommit": "6f07a95784c1c46366ed2cb428cd80828d58d566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjIwMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483022203", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-03T14:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMjk1NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483002954", "bodyText": "actualTypeName --> actualType", "author": "elharo", "createdAt": "2020-09-03T14:03:44Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code expectedMethodSymbol}, but the {@code\n+ * expectedMethodSymbol.getClassBinaryName} has the method with a different return type ({@code\n+ * actualTypeName}).\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {", "originalCommit": "6f07a95784c1c46366ed2cb428cd80828d58d566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMTYyNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483021625", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-03T14:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMjk1NA=="}], "type": "inlineReview"}, {"oid": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa", "message": "Applied review", "committedDate": "2020-09-03T14:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MDAzMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483070031", "bodyText": "I don't follow this comment. This is an identity transformation?", "author": "elharo", "createdAt": "2020-09-03T15:33:21Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -304,6 +326,13 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     }\n   }\n \n+  /** Returns the argument type parts from {@code methodDescriptor}. */\n+  private static String parseArgumentTypeParts(String methodDescriptor) {\n+    // E.g., '(Ljava/lang/String;)V' => '(Ljava/lang/String;)'", "originalCommit": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4OTQwNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483089406", "bodyText": "It was removing 'V' but it was just one character. Replaced V with java.lang.Integer to make give more clarity.", "author": "suztomo", "createdAt": "2020-09-03T16:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MDAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MDM5Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483070392", "bodyText": "would this somehow be different from parseArgumentTypes?", "author": "elharo", "createdAt": "2020-09-03T15:33:52Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -304,6 +326,13 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     }\n   }\n \n+  /** Returns the argument type parts from {@code methodDescriptor}. */\n+  private static String parseArgumentTypeParts(String methodDescriptor) {", "originalCommit": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODgyNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483088825", "bodyText": "That was not a good name. Updated to parseParameterDescriptors to follow JVM document: https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3.3", "author": "suztomo", "createdAt": "2020-09-03T16:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MDM5Mg=="}], "type": "inlineReview"}, {"oid": "c9f2a62f16396e2bf1ffc1392e576f49f33abfc0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c9f2a62f16396e2bf1ffc1392e576f49f33abfc0", "message": "Applied review", "committedDate": "2020-09-03T16:02:35Z", "type": "commit"}]}