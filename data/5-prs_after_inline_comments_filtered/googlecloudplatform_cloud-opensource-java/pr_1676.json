{"pr_number": 1676, "pr_title": "Suppress InaccessibleClassProblem if the class reference is unused in the code attribute", "pr_createdAt": "2020-09-23T18:36:39Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676", "timeline": [{"oid": "2fcedf2bbbfbb9ab5f48a7e9165172d8ee93aeef", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2fcedf2bbbfbb9ab5f48a7e9165172d8ee93aeef", "message": "Test that fails", "committedDate": "2020-09-23T18:08:17Z", "type": "commit"}, {"oid": "4090ba28c4d42120873427d05b2accc1399b4fda", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4090ba28c4d42120873427d05b2accc1399b4fda", "message": "Test that fails", "committedDate": "2020-09-23T18:13:52Z", "type": "commit"}, {"oid": "0b91fc5037d475e251dd559a605a2826f2b8a218", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0b91fc5037d475e251dd559a605a2826f2b8a218", "message": "Fixes #1608", "committedDate": "2020-09-23T18:35:30Z", "type": "commit"}, {"oid": "070ad5cca3521aa86cfc9c9ee25437a81b049f23", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/070ad5cca3521aa86cfc9c9ee25437a81b049f23", "message": "format", "committedDate": "2020-09-23T18:37:35Z", "type": "commit"}, {"oid": "4a592876514312e1b3cb6e970a67e11a0d73e9d7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4a592876514312e1b3cb6e970a67e11a0d73e9d7", "message": "Description in test", "committedDate": "2020-09-23T18:38:41Z", "type": "commit"}, {"oid": "71523f86d8cc73a8f5bfc16610b53475f5da4b16", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/71523f86d8cc73a8f5bfc16610b53475f5da4b16", "message": "Updating tests", "committedDate": "2020-09-24T01:32:04Z", "type": "commit"}, {"oid": "ac8666162ed8e4a74988bcd12dbc24893160a260", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ac8666162ed8e4a74988bcd12dbc24893160a260", "message": "Description in test", "committedDate": "2020-09-24T02:37:15Z", "type": "commit"}, {"oid": "5bd196d68536c1f6824236508bd458664d3a8615", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5bd196d68536c1f6824236508bd458664d3a8615", "message": "Merge branch 'master' into unused_in_bytecode", "committedDate": "2020-09-24T03:11:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDA3Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494000076", "bodyText": "They cover the ones listed in http://go/jdd-class-reference-validation", "author": "suztomo", "createdAt": "2020-09-24T02:20:05Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {\n               // Checking JVM instructions that take a symbolic reference to a class in\n-              // JVM Instruction Set\n+              // JVM Instruction Set: anewarray, checkcast, instanceof, ldc, ldc2_w, multianewarray,\n+              // and new.", "originalCommit": "71523f86d8cc73a8f5bfc16610b53475f5da4b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MjMzMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494392330", "bodyText": "I think you mean ldc_w, not ldc2_w. ldc2_w is for longs or doubles.", "author": "netdpb", "createdAt": "2020-09-24T15:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NzA4MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494397081", "bodyText": "Thanks. Updated.", "author": "suztomo", "createdAt": "2020-09-24T15:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxMzQ5Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494013497", "bodyText": "It was using a dummy pair. The dummySource jar does not contain LinkageCheckerTest class.\nWith this PR, the test cases require real class files that have constant pool section containing the target class.", "author": "suztomo", "createdAt": "2020-09-24T03:15:25Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -548,53 +551,56 @@ public void testFindClassReferences_innerClass() throws IOException {\n     Truth.assertThat(problems).isEmpty();\n   }\n \n-\n   @Test\n-  public void testFindClassReferences_privateClass() throws IOException, URISyntaxException {\n-    // The superclass of AbstractApiService$InnerService (Guava's ApiService) is not in the paths\n-    ClassPathEntry dummySource = firestoreJar;\n-    List<ClassPathEntry> paths =\n-        ImmutableList.of(classPathEntryOfResource(\"testdata/api-common-1.7.0.jar\"));\n-    LinkageChecker linkageChecker = LinkageChecker.create(paths);\n+  public void testFindClassReferences_inaccessibleClass() throws IOException, URISyntaxException {\n+    // io.grpc.grpclb.GrpclbLoadBalancer in grpc-grpclb 0.12.0 had a reference to\n+    // io.grpc.internal.SingleTransportChannel. The SingleTransportChannel became non-public in\n+    // grpc-core 0.15.0.\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+    ClassPathResult classPathResult =\n+        classPathBuilder.resolve(\n+            ImmutableList.of(\n+                new DefaultArtifact(\"io.grpc:grpc-core:0.15.0\"),\n+                new DefaultArtifact(\"io.grpc:grpc-grpclb:0.12.0\")),\n+            false);\n \n-    SymbolReferences.Builder builder = new SymbolReferences.Builder();\n-    builder.addClassReference(\n-        new ClassFile(dummySource, LinkageCheckerTest.class.getName()),", "originalCommit": "5bd196d68536c1f6824236508bd458664d3a8615", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTA5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494311091", "bodyText": "@netdpb FYI, BCEL has an abstract class \"CPInstruction\" that represents an instruction that takes a constant pool index, and we already had this function to determine whether a constant pool index is unused by JVM instructions. (Therefore this function does not list \"safe\" operations)", "author": "suztomo", "createdAt": "2020-09-24T13:21:12Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {", "originalCommit": "5bd196d68536c1f6824236508bd458664d3a8615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4ODk3OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494388978", "bodyText": "That's fine, as long as it doesn't list \"dangerous\" operations either.", "author": "netdpb", "createdAt": "2020-09-24T14:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTA5MQ=="}], "type": "inlineReview"}, {"oid": "e1e070c7b2de0bb521e6f040251a4875a039950f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e1e070c7b2de0bb521e6f040251a4875a039950f", "message": "ldc_w", "committedDate": "2020-09-24T15:08:08Z", "type": "commit"}, {"oid": "d9f333d38c337c180af2cc4530b332c1a9c7a3e4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d9f333d38c337c180af2cc4530b332c1a9c7a3e4", "message": "Merge branch 'unused_in_bytecode' of https://github.com/GoogleCloudPlatform/cloud-opensource-java into unused_in_bytecode", "committedDate": "2020-09-24T15:08:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494398615", "bodyText": "What about:\nif (!isClassAccessibleFrom(targetClass, sourceClassName)\n    && !classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {\n  return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n}\nreturn Optional.empty();", "author": "netdpb", "createdAt": "2020-09-24T15:11:08Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -512,7 +512,13 @@ private boolean isMemberAccessibleFrom(\n       }\n \n       if (!isClassAccessibleFrom(targetClass, sourceClassName)) {\n-        return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n+        if (classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {", "originalCommit": "5bd196d68536c1f6824236508bd458664d3a8615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNjk1NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494406954", "bodyText": "I tried that and I was confused. Maybe this is more clear:\nif (isClassAccessibleFrom(targetClass, sourceClassName)\n    || classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {\n  return Optional.empty();\n} else {\n  return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n}", "author": "suztomo", "createdAt": "2020-09-24T15:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMjg5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494412895", "bodyText": "Maybe, but it does seem like an inversion of the test.\nIf the class is inaccessible and it's not unused... What if you inverted isUnusedClassSymbolReference?\nif (!isClassAccessibleFrom(targetClass, sourceClassname)\n    && classDumpter.isClassSymbolReferenceUsed(sourceClassName, symbol)) {\n  return Optional.of(\u2026);\n}\nreturn Optional.empty();", "author": "netdpb", "createdAt": "2020-09-24T15:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzU4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494433585", "bodyText": "Added isClassSymbolReferenceUsed to ClassDumper.", "author": "suztomo", "createdAt": "2020-09-24T15:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMTA0Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494401046", "bodyText": "You only use this once. Inline?", "author": "netdpb", "createdAt": "2020-09-24T15:14:30Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -548,53 +551,56 @@ public void testFindClassReferences_innerClass() throws IOException {\n     Truth.assertThat(problems).isEmpty();\n   }\n \n-\n   @Test\n-  public void testFindClassReferences_privateClass() throws IOException, URISyntaxException {\n-    // The superclass of AbstractApiService$InnerService (Guava's ApiService) is not in the paths\n-    ClassPathEntry dummySource = firestoreJar;\n-    List<ClassPathEntry> paths =\n-        ImmutableList.of(classPathEntryOfResource(\"testdata/api-common-1.7.0.jar\"));\n-    LinkageChecker linkageChecker = LinkageChecker.create(paths);\n+  public void testFindClassReferences_inaccessibleClass() throws IOException, URISyntaxException {\n+    // io.grpc.grpclb.GrpclbLoadBalancer in grpc-grpclb 0.12.0 had a reference to\n+    // io.grpc.internal.SingleTransportChannel. The SingleTransportChannel became non-public in\n+    // grpc-core 0.15.0.\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder();", "originalCommit": "5bd196d68536c1f6824236508bd458664d3a8615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzc1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494433752", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-24T15:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMTA0Ng=="}], "type": "inlineReview"}, {"oid": "f0ad716833e7c416504fbc033269ae7556732ea9", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f0ad716833e7c416504fbc033269ae7556732ea9", "message": "Applied review", "committedDate": "2020-09-24T15:28:17Z", "type": "commit"}, {"oid": "c54fef08d8e675f5da905e909d488564b60c8df7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c54fef08d8e675f5da905e909d488564b60c8df7", "message": "format", "committedDate": "2020-09-24T15:28:38Z", "type": "commit"}, {"oid": "28acb807152f7ed589f098cee6cb951f268171d8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/28acb807152f7ed589f098cee6cb951f268171d8", "message": "isClassSymbolReferenceUsed", "committedDate": "2020-09-24T15:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MjQzNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494442437", "bodyText": "Oh. Do we need both? I think positive method names are usually better than negative ones. Where else is isUnusedClassSymbolReference used, and can it be switched?", "author": "netdpb", "createdAt": "2020-09-24T16:11:55Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -561,6 +561,10 @@ private static String outerClassName(JavaClass sourceJavaClass) {\n     return null;\n   }\n \n+  boolean isClassSymbolReferenceUsed(String sourceClassName, ClassSymbol classSymbol) {\n+    return !isUnusedClassSymbolReference(sourceClassName, classSymbol);", "originalCommit": "28acb807152f7ed589f098cee6cb951f268171d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0NTMwMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494545300", "bodyText": "Updated.\n\npositive method names are usually better than negative ones\n\nYes, especially when we negate the result.", "author": "suztomo", "createdAt": "2020-09-24T18:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MjQzNw=="}], "type": "inlineReview"}, {"oid": "139780c9a2596021153665ea4ac0bcc5d707a826", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/139780c9a2596021153665ea4ac0bcc5d707a826", "message": "Positive", "committedDate": "2020-09-24T17:27:35Z", "type": "commit"}, {"oid": "905cdcfdbeead4d720b1d772e0e16d2607e7ae0c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/905cdcfdbeead4d720b1d772e0e16d2607e7ae0c", "message": "Updated test", "committedDate": "2020-09-24T17:28:56Z", "type": "commit"}, {"oid": "b8a9d1a943430cd18cfa6b21cb68415ae3e4b660", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b8a9d1a943430cd18cfa6b21cb68415ae3e4b660", "message": "Merge remote-tracking branch 'origin/master' into unused_in_bytecode", "committedDate": "2020-09-24T18:03:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxODc3OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494518779", "bodyText": "checks the following", "author": "elharo", "createdAt": "2020-09-24T18:19:04Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -561,12 +561,8 @@ private static String outerClassName(JavaClass sourceJavaClass) {\n     return null;\n   }\n \n-  boolean isClassSymbolReferenceUsed(String sourceClassName, ClassSymbol classSymbol) {\n-    return !isUnusedClassSymbolReference(sourceClassName, classSymbol);\n-  }\n-\n   /**\n-   * Returns true if the class symbol reference is unused in the source class file. It checks\n+   * Returns true if the class symbol reference is used in the source class file. It checks", "originalCommit": "905cdcfdbeead4d720b1d772e0e16d2607e7ae0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyNDQ3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494524473", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-09-24T18:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxODc3OQ=="}], "type": "inlineReview"}, {"oid": "64f3455a778d4fdc09a9a1cdb79a5e52d919a7e8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/64f3455a778d4fdc09a9a1cdb79a5e52d919a7e8", "message": "Applied review", "committedDate": "2020-09-24T18:23:07Z", "type": "commit"}]}