{"pr_number": 1485, "pr_title": "Build dependency graph for verbose tree", "pr_createdAt": "2020-06-17T20:57:49Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485", "timeline": [{"oid": "7b4560d719adb934eb5a936a47fa62ce295bcea7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7b4560d719adb934eb5a936a47fa62ce295bcea7", "message": "dependencyTree txt added to reference in chat", "committedDate": "2020-06-15T19:45:48Z", "type": "commit"}, {"oid": "cacb103e5df4c00428ab30d375d3c2808797938a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cacb103e5df4c00428ab30d375d3c2808797938a", "message": "Basic serializer", "committedDate": "2020-06-16T15:13:21Z", "type": "commit"}, {"oid": "2cec3a8aae26eabdc863e02ac0f98c50d2935354", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2cec3a8aae26eabdc863e02ac0f98c50d2935354", "message": "close to complete tree serializer but line beginnings not correct", "committedDate": "2020-06-16T15:30:12Z", "type": "commit"}, {"oid": "cbb4490628350249b197f8c7c500e2c5dc3010fc", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cbb4490628350249b197f8c7c500e2c5dc3010fc", "message": "cleaning code and adding scope to labels and tests", "committedDate": "2020-06-16T19:34:16Z", "type": "commit"}, {"oid": "0c261b1cc3e2a7bb9598376a4a0799ca13384fb4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0c261b1cc3e2a7bb9598376a4a0799ca13384fb4", "message": "scope added to tests", "committedDate": "2020-06-16T19:48:24Z", "type": "commit"}, {"oid": "cb7da5056a9b4a27c2a007ccb0c6cdc50d4a9c1f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cb7da5056a9b4a27c2a007ccb0c6cdc50d4a9c1f", "message": "clean up code", "committedDate": "2020-06-16T19:56:12Z", "type": "commit"}, {"oid": "1962a0c78427c209624febf0935179c267e1b7f7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1962a0c78427c209624febf0935179c267e1b7f7", "message": "test changes", "committedDate": "2020-06-16T20:29:27Z", "type": "commit"}, {"oid": "f5dbccaf5ea210f0cf2a0252839b50f83df463a4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f5dbccaf5ea210f0cf2a0252839b50f83df463a4", "message": "meeting changes implemented", "committedDate": "2020-06-16T21:32:23Z", "type": "commit"}, {"oid": "14d0938cff93d0692eba180624d6ea9cc52d0eb1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/14d0938cff93d0692eba180624d6ea9cc52d0eb1", "message": "added optional dependency message and test", "committedDate": "2020-06-16T21:54:56Z", "type": "commit"}, {"oid": "bbc0a3d959248d0a32cec0aaa91bc83efca87c6f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bbc0a3d959248d0a32cec0aaa91bc83efca87c6f", "message": "rename duplicateArtifact method", "committedDate": "2020-06-16T21:58:33Z", "type": "commit"}, {"oid": "49674a19995d5d7317009940faca845d9a4187a7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/49674a19995d5d7317009940faca845d9a4187a7", "message": "added integration test", "committedDate": "2020-06-17T18:51:35Z", "type": "commit"}, {"oid": "92df9631752c749eae4e2a7f434cdf0cced7c487", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/92df9631752c749eae4e2a7f434cdf0cced7c487", "message": "attempting to add its profile", "committedDate": "2020-06-17T19:22:10Z", "type": "commit"}, {"oid": "da24623e42a3e757a33d0bbd590ee31622819fe6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/da24623e42a3e757a33d0bbd590ee31622819fe6", "message": "verboseTree test passing but shouldn't be", "committedDate": "2020-06-17T20:54:02Z", "type": "commit"}, {"oid": "7e115e17bdba7eba61438ec0681909cda7831c89", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7e115e17bdba7eba61438ec0681909cda7831c89", "message": "added verify goal to its", "committedDate": "2020-06-17T20:57:11Z", "type": "commit"}, {"oid": "96322fad3d710e2abe9fabe74922371741378700", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/96322fad3d710e2abe9fabe74922371741378700", "message": "Test added and running as expected", "committedDate": "2020-06-18T15:35:01Z", "type": "commit"}, {"oid": "5454768fe0d5058ea2252d15c46300cb7f1e73dc", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5454768fe0d5058ea2252d15c46300cb7f1e73dc", "message": "Merge branch 'master' into BuildDependencyGraphForVerboseTree", "committedDate": "2020-06-18T15:38:51Z", "type": "commit"}, {"oid": "14713780c99761c86134891ba0637721e4c2f3d2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/14713780c99761c86134891ba0637721e4c2f3d2", "message": "machine dependendent path removed", "committedDate": "2020-06-18T18:53:23Z", "type": "commit"}, {"oid": "7a292e60f615430a46910f8769163cf25a173d13", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7a292e60f615430a46910f8769163cf25a173d13", "message": "small change to graph builder", "committedDate": "2020-06-18T20:40:44Z", "type": "commit"}, {"oid": "221e77ce4412dfa0719859fbf588dc53800b9b45", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/221e77ce4412dfa0719859fbf588dc53800b9b45", "message": "test localrepo still null", "committedDate": "2020-06-22T15:17:36Z", "type": "commit"}, {"oid": "bfacbc1af9373d7ce6e4b730ddd6dc8a7621df63", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bfacbc1af9373d7ce6e4b730ddd6dc8a7621df63", "message": "remove dependency plugin and stub utils", "committedDate": "2020-06-22T15:53:54Z", "type": "commit"}, {"oid": "36b61681760cddcf47062d6ced4a9516230ea44d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/36b61681760cddcf47062d6ced4a9516230ea44d", "message": "removed useless test", "committedDate": "2020-06-22T15:56:04Z", "type": "commit"}, {"oid": "c517b65ba5a3b813c0d0875edee54e64e69aba24", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c517b65ba5a3b813c0d0875edee54e64e69aba24", "message": "Integration test skeleton not machine dependent", "committedDate": "2020-06-23T16:59:31Z", "type": "commit"}, {"oid": "ce2db13fd8cb81d2aae768cac483ce31a8d69a04", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ce2db13fd8cb81d2aae768cac483ce31a8d69a04", "message": "Seems to work to build graph but fails integration test when using serializer", "committedDate": "2020-06-23T18:58:27Z", "type": "commit"}, {"oid": "6140b7564e1b1eaaf6ac3ee23df3574e8e165cb9", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6140b7564e1b1eaaf6ac3ee23df3574e8e165cb9", "message": "error on getDependency of rootNode", "committedDate": "2020-06-23T20:04:15Z", "type": "commit"}, {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/481844ab2f9be8aaf8205389e430a34cf83cee30", "message": "merge master", "committedDate": "2020-06-23T20:08:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMjQ2OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444502468", "bodyText": "uncomment this", "author": "elharo", "createdAt": "2020-06-23T20:55:20Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();", "originalCommit": "481844ab2f9be8aaf8205389e430a34cf83cee30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMjkzMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444502932", "bodyText": "catch NullPointerException here too?", "author": "elharo", "createdAt": "2020-06-23T20:55:52Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );*/\n+        try\n+        {\n+            write( file, rootNode.toString() + rootNode.getChildren().get( 0 ).getDependency().getScope() );\n+            /*write( file, \"why\" + rootNode.toString() + \" \" + rootNode.getChildren().get( 0 ).toString()\n+            + \" \" + rootNode.getChildren().get( 1 ).toString() + \"\\n\" +\n+                    rootNode.getChildren().get( 2 ).toString() + \" \" + rootNode.getChildren().get( 3 ).toString()\n+            + \" \" + rootNode.getChildren().get( 0 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 1 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 2 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 3 ).getChildren().size());*/\n+            // write(file, serialized);\n+        }\n+        catch ( IOException e )", "originalCommit": "481844ab2f9be8aaf8205389e430a34cf83cee30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzQyNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444503425", "bodyText": "change this to a more specific exception", "author": "elharo", "createdAt": "2020-06-23T20:56:25Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );*/\n+        try\n+        {\n+            write( file, rootNode.toString() + rootNode.getChildren().get( 0 ).getDependency().getScope() );\n+            /*write( file, \"why\" + rootNode.toString() + \" \" + rootNode.getChildren().get( 0 ).toString()\n+            + \" \" + rootNode.getChildren().get( 1 ).toString() + \"\\n\" +\n+                    rootNode.getChildren().get( 2 ).toString() + \" \" + rootNode.getChildren().get( 3 ).toString()\n+            + \" \" + rootNode.getChildren().get( 0 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 1 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 2 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 3 ).getChildren().size());*/\n+            // write(file, serialized);\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    public DependencyNode buildDependencyGraph() throws Exception\n+    {\n+        // adapting the dependency-plugin code\n+        ProjectBuildingRequest buildingRequest =\n+                new DefaultProjectBuildingRequest( session.getProjectBuildingRequest() );\n+\n+        buildingRequest.setProject( project );\n+\n+        // need to configure the repositorySystemSession\n+\n+        // dependency plugin code that isn't needed below\n+        // dependencyGraphBuilder.buildDependencyGraph( buildingRequest, artifactFilter, reactorProjects );\n+\n+        // now adapting the dependency-tree defaultDependencyGraphBuilder and maven31Code\n+\n+        final DependencyResolutionRequest request = new DefaultDependencyResolutionRequest();\n+        request.setMavenProject( project );\n+        request.setRepositorySession( session.getRepositorySession() );\n+        // request.setRepositorySession( repositorySystemSession );\n+\n+        final DependencyResolutionResult result = resolveDependencies( request, null );\n+        DependencyNode graphRoot = result.getDependencyGraph();\n+\n+\n+        return graphRoot;\n+    }\n+\n+\n+    public DependencyNode getDependencyGraph()\n+    {\n+        return rootNode;\n+    }\n+\n+\n+    private DependencyResolutionResult resolveDependencies( DependencyResolutionRequest request,\n+                                                            Collection<MavenProject> reactorProjects )\n+            throws Exception\n+    {\n+        try\n+        {\n+            return resolver.resolve( request );\n+        }\n+        catch ( DependencyResolutionException e )\n+        {\n+            if ( reactorProjects == null )\n+            {\n+                throw new Exception( \"Could not resolve following dependencies: \"", "originalCommit": "481844ab2f9be8aaf8205389e430a34cf83cee30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMDUyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444520529", "bodyText": "Should I copy the DependencyGraphBuilderException in the maven-dependency-tree plugin and use that?", "author": "ian-lavallee", "createdAt": "2020-06-23T21:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMTI0Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444921243", "bodyText": "DependencyResolutionException is probably what you need here", "author": "elharo", "createdAt": "2020-06-24T14:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzQyNQ=="}], "type": "inlineReview"}, {"oid": "053ad97b7ca99ccbf5e4b1ccf5c864035d0f4f75", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/053ad97b7ca99ccbf5e4b1ccf5c864035d0f4f75", "message": "uncomment serialize code", "committedDate": "2020-06-23T21:28:03Z", "type": "commit"}, {"oid": "1e7035d0f4eb974230062ed634eb5e50a4268235", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1e7035d0f4eb974230062ed634eb5e50a4268235", "message": "catching null pointer exception", "committedDate": "2020-06-23T21:32:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMDQxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444920416", "bodyText": "you should almost never have to catch a generic Exception. See Chapter 10 of Effective Java.", "author": "elharo", "createdAt": "2020-06-24T14:07:52Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +58,119 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )", "originalCommit": "1e7035d0f4eb974230062ed634eb5e50a4268235", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMjU3Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444922577", "bodyText": "try not to include commented code in PRs. It all needs to be removed or uncommented before this can be merged.", "author": "elharo", "createdAt": "2020-06-24T14:11:00Z", "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/DependencyGraphBuilderTest.java", "diffHunk": "@@ -17,14 +17,23 @@\n \n package org.apache.maven.dependency.graph;\n \n-import org.apache.maven.artifact.Artifact;\n-import org.apache.maven.artifact.DefaultArtifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.DefaultArtifactHandler;\n import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n import org.apache.maven.execution.MavenSession;\n import org.apache.maven.plugin.testing.AbstractMojoTestCase;\n import org.apache.maven.project.MavenProject;\n import org.eclipse.aether.DefaultRepositorySystemSession;\n+// doesn't work with maven project import org.eclipse.aether.artifact.Artifact;", "originalCommit": "1e7035d0f4eb974230062ed634eb5e50a4268235", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a78d76e50c743927103b3c450bd9d24423bb4cfd", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a78d76e50c743927103b3c450bd9d24423bb4cfd", "message": "working debug", "committedDate": "2020-06-24T17:45:15Z", "type": "commit"}, {"oid": "0409c4f1ef1f7314af134e5376f8f1b77ad6b784", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0409c4f1ef1f7314af134e5376f8f1b77ad6b784", "message": "some PR comment changes", "committedDate": "2020-06-24T17:55:25Z", "type": "commit"}, {"oid": "59dd578165d4337f32c7447eac572899017d971f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/59dd578165d4337f32c7447eac572899017d971f", "message": "better error handling", "committedDate": "2020-06-24T18:23:51Z", "type": "commit"}, {"oid": "61470cfd7746c274b3d05f056888e8c2f2876828", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/61470cfd7746c274b3d05f056888e8c2f2876828", "message": "trying to use previous graphBuilder code", "committedDate": "2020-06-25T14:49:34Z", "type": "commit"}, {"oid": "d26b2d4cf032a5885ae7a50903ec0b2a563876d5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d26b2d4cf032a5885ae7a50903ec0b2a563876d5", "message": "Merge branch 'master' into BuildDependencyGraphForVerboseTree", "committedDate": "2020-06-25T14:49:55Z", "type": "commit"}, {"oid": "82f5f7ad972af48b58187e825b3641366a734d0d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/82f5f7ad972af48b58187e825b3641366a734d0d", "message": "No compile errors with dependencies\\graphBuilder code but classNotFoundException", "committedDate": "2020-06-25T18:38:40Z", "type": "commit"}, {"oid": "8325244f92a5b7558b6167d7d3e55862ecec67fd", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8325244f92a5b7558b6167d7d3e55862ecec67fd", "message": "test build log added for easy sharing", "committedDate": "2020-06-25T18:50:16Z", "type": "commit"}, {"oid": "baab4e86f2bce60593587ef4cd5ff5e7d5028902", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/baab4e86f2bce60593587ef4cd5ff5e7d5028902", "message": "test running with new code added but little new code execution", "committedDate": "2020-06-25T19:40:24Z", "type": "commit"}, {"oid": "f8dc900f9eef135d47c373df78ac0e5a73423bd3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f8dc900f9eef135d47c373df78ac0e5a73423bd3", "message": "Test failing because the graph is not being built properly", "committedDate": "2020-06-25T20:29:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjE3Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r445822177", "bodyText": "needs more space", "author": "elharo", "createdAt": "2020-06-25T20:34:33Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.execution.DefaultMavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectBuilder;\n+import org.apache.maven.project.ProjectBuildingException;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.project.ProjectBuildingResult;\n+import org.apache.maven.repository.internal.MavenRepositorySystemUtils;\n+import org.codehaus.plexus.ContainerConfiguration;\n+import org.codehaus.plexus.DefaultContainerConfiguration;\n+import org.codehaus.plexus.DefaultPlexusContainer;\n+import org.codehaus.plexus.PlexusConstants;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.classworlds.ClassWorld;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;\n+import org.eclipse.aether.impl.DefaultServiceLocator;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.VersionRangeRequest;\n+import org.eclipse.aether.resolution.VersionRangeResolutionException;\n+import org.eclipse.aether.resolution.VersionRangeResult;\n+import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;\n+import org.eclipse.aether.spi.connector.transport.TransporterFactory;\n+import org.eclipse.aether.transport.file.FileTransporterFactory;\n+import org.eclipse.aether.transport.http.HttpTransporterFactory;\n+import org.eclipse.aether.util.graph.selector.AndDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;\n+import org.eclipse.aether.util.graph.selector.OptionalDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.eclipse.aether.version.Version;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+\n+/**\n+ * Aether initialization. This is based on Apache Maven Resolver 1.4.2 or later.\n+ * There are many other versions of Aether from Sonatype and the Eclipse\n+ * Project, but this is the current one.\n+ */\n+public final class RepositoryUtility\n+{\n+\n+  public static final RemoteRepository CENTRAL = new RemoteRepository.Builder( \"central\", \"default\",\n+          \"https://repo1.maven.org/maven2/\" ).build();\n+\n+  // DefaultTransporterProvider.newTransporter checks these transporters\n+  private static final Set<String> ALLOWED_REPOSITORY_URL_SCHEMES = new HashSet<String>(\n+          Arrays.asList( \"file\", \"http\", \"https\" ) );\n+\n+  private RepositoryUtility() {}\n+\n+  /**\n+   * Creates a new system configured for file and HTTP repository resolution.\n+   */\n+  public static RepositorySystem newRepositorySystem() {\n+    DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n+    locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n+    locator.addService(TransporterFactory.class, FileTransporterFactory.class);\n+    locator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n+  \n+    return locator.getService(RepositorySystem.class);\n+  }\n+\n+  //@VisibleForTesting\n+  static DefaultRepositorySystemSession createDefaultRepositorySystemSession(\n+      RepositorySystem system) {\n+    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n+    LocalRepository localRepository = new LocalRepository(findLocalRepository());\n+    session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepository));\n+    return session;\n+  }\n+\n+  /**\n+   * Opens a new Maven repository session that looks for the local repository in the\n+   * customary ~/.m2 directory. If not found, it creates an initially empty repository in\n+   * a temporary location.\n+   */\n+  public static DefaultRepositorySystemSession newSession(RepositorySystem system) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    return session;\n+  }\n+\n+  /**\n+   * Open a new Maven repository session for full dependency graph resolution.\n+   *\n+   * @see {@link DependencyGraphBuilder}\n+   */\n+  static DefaultRepositorySystemSession newSessionForFullDependency(RepositorySystem system) {\n+    // This combination of DependencySelector comes from the default specified in\n+    // `MavenRepositorySystemUtils.newSession`.\n+    // LinkageChecker needs to include 'provided'-scope and optional dependencies.\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static DefaultRepositorySystemSession newSession(\n+      RepositorySystem system, DependencySelector dependencySelector) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    session.setDependencySelector(dependencySelector);\n+\n+    // By default, Maven's MavenRepositorySystemUtils.newSession() returns a session with\n+    // ChainedDependencyGraphTransformer(ConflictResolver(...), JavaDependencyContextRefiner()).\n+    // Because the full dependency graph does not resolve conflicts of versions, this session does\n+    // not use ConflictResolver.\n+    session.setDependencyGraphTransformer(\n+        new ChainedDependencyGraphTransformer(\n+            new CycleBreakerGraphTransformer(), // Avoids StackOverflowError\n+            new JavaDependencyContextRefiner()));\n+\n+    // No dependency management in the full dependency graph\n+    session.setDependencyManager(null);\n+\n+    return session;\n+  }\n+  \n+  static DefaultRepositorySystemSession newSessionForVerboseDependency(RepositorySystem system) {\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new OptionalDependencySelector(),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static String findLocalRepository() {\n+    // TODO is there Maven code for this?\n+    Path home = Paths.get(System.getProperty(\"user.home\"));\n+    Path localRepo = home.resolve(\".m2\").resolve(\"repository\");\n+    if (Files.isDirectory(localRepo)) {\n+      return localRepo.toAbsolutePath().toString();\n+    } else {\n+      return makeTemporaryLocalRepository(); \n+   }\n+  }\n+\n+  private static String makeTemporaryLocalRepository() {\n+    try {\n+      File temporaryDirectory = Files.createTempDirectory(\"m2\").toFile();\n+      temporaryDirectory.deleteOnExit();\n+      return temporaryDirectory.getAbsolutePath();\n+    } catch (IOException ex) {\n+      return null;\n+    }\n+  }\n+\n+  static MavenProject createMavenProject(Path pomFile, RepositorySystemSession session)\n+      throws MavenRepositoryException {\n+    // MavenCli's way to instantiate PlexusContainer\n+    ClassWorld classWorld =\n+        new ClassWorld(\"plexus.core\", Thread.currentThread().getContextClassLoader());\n+    ContainerConfiguration containerConfiguration =\n+        new DefaultContainerConfiguration()\n+            .setClassWorld(classWorld)\n+            .setRealm(classWorld.getClassRealm(\"plexus.core\"))\n+            .setClassPathScanning(PlexusConstants.SCANNING_INDEX)\n+            .setAutoWiring(true)\n+            .setJSR250Lifecycle(true)\n+            .setName(\"linkage-checker\");\n+    try {\n+      PlexusContainer container = new DefaultPlexusContainer(containerConfiguration);\n+\n+      MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();\n+      ProjectBuildingRequest projectBuildingRequest =\n+          mavenExecutionRequest.getProjectBuildingRequest();\n+\n+      projectBuildingRequest.setRepositorySession(session);\n+\n+      // Profile activation needs properties such as JDK version\n+      Properties properties = new Properties(); // allowing duplicate entries\n+      properties.putAll(projectBuildingRequest.getSystemProperties());\n+      properties.putAll(OsProperties.detectOsProperties());\n+      properties.putAll(System.getProperties());\n+      projectBuildingRequest.setSystemProperties(properties);\n+\n+      ProjectBuilder projectBuilder = container.lookup(ProjectBuilder.class);\n+      ProjectBuildingResult projectBuildingResult =\n+          projectBuilder.build(pomFile.toFile(), projectBuildingRequest);\n+      return projectBuildingResult.getProject();\n+    } catch (PlexusContainerException | ComponentLookupException | ProjectBuildingException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /**\n+   * Returns Maven repository specified as {@code mavenRepositoryUrl}, after validating the syntax\n+   * of the URL.\n+   *\n+   * @throws IllegalArgumentException if the URL is malformed for a Maven repository\n+   */\n+  public static RemoteRepository mavenRepositoryFromUrl(String mavenRepositoryUrl) {\n+    try {\n+      // Because the protocol is not an empty string (checked below), this URI is absolute.\n+      new URI(mavenRepositoryUrl);\n+    } catch (URISyntaxException ex) {\n+      throw new IllegalArgumentException(\"Invalid URL syntax: \" + mavenRepositoryUrl);\n+    }\n+\n+    RemoteRepository repository =\n+        new RemoteRepository.Builder(null, \"default\", mavenRepositoryUrl).build();\n+\n+    /*checkArgument(\n+        ALLOWED_REPOSITORY_URL_SCHEMES.contains(repository.getProtocol()),\n+        \"Scheme: '%s' is not in %s\",\n+        repository.getProtocol(),\n+        ALLOWED_REPOSITORY_URL_SCHEMES);*/\n+    return repository;\n+  }\n+\n+  private static VersionRangeResult findVersionRange(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+\n+    Artifact artifactWithVersionRange = new DefaultArtifact(groupId, artifactId, null, \"(0,]\");\n+    VersionRangeRequest request =\n+        new VersionRangeRequest(\n+            artifactWithVersionRange, Arrays.asList( RepositoryUtility.CENTRAL ), null);\n+\n+    try {\n+      return repositorySystem.resolveVersionRange(session, request);\n+    } catch (VersionRangeResolutionException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /** Returns the highest version for {@code groupId:artifactId} in {@code repositorySystem}. */\n+  //@VisibleForTesting\n+  static String findHighestVersion(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+    return findVersionRange(repositorySystem, session, groupId, artifactId)\n+        .getHighestVersion()\n+        .toString();\n+  }\n+\n+  /**\n+   * Returns list of versions available for {@code groupId:artifactId} in {@code repositorySystem}.\n+   * The returned list is in ascending order with regard to {@link\n+   * org.eclipse.aether.util.version.GenericVersionScheme}; the highest version comes at last.\n+   */\n+  public static List<String> findVersions(\n+      RepositorySystem repositorySystem, String groupId, String artifactId)\n+      throws MavenRepositoryException {\n+    RepositorySystemSession session = RepositoryUtility.newSession(repositorySystem);\n+    // getVersions returns a list in ascending order\n+    List<Version> versions = new ArrayList<Version>();\n+    List<String> versionStrings = new ArrayList<String>();\n+\n+    versions = findVersionRange(repositorySystem, session, groupId, artifactId).getVersions();\n+\n+    for(Version version : versions)", "originalCommit": "f8dc900f9eef135d47c373df78ac0e5a73423bd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjMwNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r445822306", "bodyText": "delete the comment", "author": "elharo", "createdAt": "2020-06-25T20:34:46Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.execution.DefaultMavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectBuilder;\n+import org.apache.maven.project.ProjectBuildingException;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.project.ProjectBuildingResult;\n+import org.apache.maven.repository.internal.MavenRepositorySystemUtils;\n+import org.codehaus.plexus.ContainerConfiguration;\n+import org.codehaus.plexus.DefaultContainerConfiguration;\n+import org.codehaus.plexus.DefaultPlexusContainer;\n+import org.codehaus.plexus.PlexusConstants;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.classworlds.ClassWorld;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;\n+import org.eclipse.aether.impl.DefaultServiceLocator;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.VersionRangeRequest;\n+import org.eclipse.aether.resolution.VersionRangeResolutionException;\n+import org.eclipse.aether.resolution.VersionRangeResult;\n+import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;\n+import org.eclipse.aether.spi.connector.transport.TransporterFactory;\n+import org.eclipse.aether.transport.file.FileTransporterFactory;\n+import org.eclipse.aether.transport.http.HttpTransporterFactory;\n+import org.eclipse.aether.util.graph.selector.AndDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;\n+import org.eclipse.aether.util.graph.selector.OptionalDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.eclipse.aether.version.Version;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+\n+/**\n+ * Aether initialization. This is based on Apache Maven Resolver 1.4.2 or later.\n+ * There are many other versions of Aether from Sonatype and the Eclipse\n+ * Project, but this is the current one.\n+ */\n+public final class RepositoryUtility\n+{\n+\n+  public static final RemoteRepository CENTRAL = new RemoteRepository.Builder( \"central\", \"default\",\n+          \"https://repo1.maven.org/maven2/\" ).build();\n+\n+  // DefaultTransporterProvider.newTransporter checks these transporters\n+  private static final Set<String> ALLOWED_REPOSITORY_URL_SCHEMES = new HashSet<String>(\n+          Arrays.asList( \"file\", \"http\", \"https\" ) );\n+\n+  private RepositoryUtility() {}\n+\n+  /**\n+   * Creates a new system configured for file and HTTP repository resolution.\n+   */\n+  public static RepositorySystem newRepositorySystem() {\n+    DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n+    locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n+    locator.addService(TransporterFactory.class, FileTransporterFactory.class);\n+    locator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n+  \n+    return locator.getService(RepositorySystem.class);\n+  }\n+\n+  //@VisibleForTesting\n+  static DefaultRepositorySystemSession createDefaultRepositorySystemSession(\n+      RepositorySystem system) {\n+    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n+    LocalRepository localRepository = new LocalRepository(findLocalRepository());\n+    session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepository));\n+    return session;\n+  }\n+\n+  /**\n+   * Opens a new Maven repository session that looks for the local repository in the\n+   * customary ~/.m2 directory. If not found, it creates an initially empty repository in\n+   * a temporary location.\n+   */\n+  public static DefaultRepositorySystemSession newSession(RepositorySystem system) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    return session;\n+  }\n+\n+  /**\n+   * Open a new Maven repository session for full dependency graph resolution.\n+   *\n+   * @see {@link DependencyGraphBuilder}\n+   */\n+  static DefaultRepositorySystemSession newSessionForFullDependency(RepositorySystem system) {\n+    // This combination of DependencySelector comes from the default specified in\n+    // `MavenRepositorySystemUtils.newSession`.\n+    // LinkageChecker needs to include 'provided'-scope and optional dependencies.\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static DefaultRepositorySystemSession newSession(\n+      RepositorySystem system, DependencySelector dependencySelector) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    session.setDependencySelector(dependencySelector);\n+\n+    // By default, Maven's MavenRepositorySystemUtils.newSession() returns a session with\n+    // ChainedDependencyGraphTransformer(ConflictResolver(...), JavaDependencyContextRefiner()).\n+    // Because the full dependency graph does not resolve conflicts of versions, this session does\n+    // not use ConflictResolver.\n+    session.setDependencyGraphTransformer(\n+        new ChainedDependencyGraphTransformer(\n+            new CycleBreakerGraphTransformer(), // Avoids StackOverflowError\n+            new JavaDependencyContextRefiner()));\n+\n+    // No dependency management in the full dependency graph\n+    session.setDependencyManager(null);\n+\n+    return session;\n+  }\n+  \n+  static DefaultRepositorySystemSession newSessionForVerboseDependency(RepositorySystem system) {\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new OptionalDependencySelector(),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static String findLocalRepository() {\n+    // TODO is there Maven code for this?\n+    Path home = Paths.get(System.getProperty(\"user.home\"));\n+    Path localRepo = home.resolve(\".m2\").resolve(\"repository\");\n+    if (Files.isDirectory(localRepo)) {\n+      return localRepo.toAbsolutePath().toString();\n+    } else {\n+      return makeTemporaryLocalRepository(); \n+   }\n+  }\n+\n+  private static String makeTemporaryLocalRepository() {\n+    try {\n+      File temporaryDirectory = Files.createTempDirectory(\"m2\").toFile();\n+      temporaryDirectory.deleteOnExit();\n+      return temporaryDirectory.getAbsolutePath();\n+    } catch (IOException ex) {\n+      return null;\n+    }\n+  }\n+\n+  static MavenProject createMavenProject(Path pomFile, RepositorySystemSession session)\n+      throws MavenRepositoryException {\n+    // MavenCli's way to instantiate PlexusContainer\n+    ClassWorld classWorld =\n+        new ClassWorld(\"plexus.core\", Thread.currentThread().getContextClassLoader());\n+    ContainerConfiguration containerConfiguration =\n+        new DefaultContainerConfiguration()\n+            .setClassWorld(classWorld)\n+            .setRealm(classWorld.getClassRealm(\"plexus.core\"))\n+            .setClassPathScanning(PlexusConstants.SCANNING_INDEX)\n+            .setAutoWiring(true)\n+            .setJSR250Lifecycle(true)\n+            .setName(\"linkage-checker\");\n+    try {\n+      PlexusContainer container = new DefaultPlexusContainer(containerConfiguration);\n+\n+      MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();\n+      ProjectBuildingRequest projectBuildingRequest =\n+          mavenExecutionRequest.getProjectBuildingRequest();\n+\n+      projectBuildingRequest.setRepositorySession(session);\n+\n+      // Profile activation needs properties such as JDK version\n+      Properties properties = new Properties(); // allowing duplicate entries\n+      properties.putAll(projectBuildingRequest.getSystemProperties());\n+      properties.putAll(OsProperties.detectOsProperties());\n+      properties.putAll(System.getProperties());\n+      projectBuildingRequest.setSystemProperties(properties);\n+\n+      ProjectBuilder projectBuilder = container.lookup(ProjectBuilder.class);\n+      ProjectBuildingResult projectBuildingResult =\n+          projectBuilder.build(pomFile.toFile(), projectBuildingRequest);\n+      return projectBuildingResult.getProject();\n+    } catch (PlexusContainerException | ComponentLookupException | ProjectBuildingException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /**\n+   * Returns Maven repository specified as {@code mavenRepositoryUrl}, after validating the syntax\n+   * of the URL.\n+   *\n+   * @throws IllegalArgumentException if the URL is malformed for a Maven repository\n+   */\n+  public static RemoteRepository mavenRepositoryFromUrl(String mavenRepositoryUrl) {\n+    try {\n+      // Because the protocol is not an empty string (checked below), this URI is absolute.\n+      new URI(mavenRepositoryUrl);\n+    } catch (URISyntaxException ex) {\n+      throw new IllegalArgumentException(\"Invalid URL syntax: \" + mavenRepositoryUrl);\n+    }\n+\n+    RemoteRepository repository =\n+        new RemoteRepository.Builder(null, \"default\", mavenRepositoryUrl).build();\n+\n+    /*checkArgument(\n+        ALLOWED_REPOSITORY_URL_SCHEMES.contains(repository.getProtocol()),\n+        \"Scheme: '%s' is not in %s\",\n+        repository.getProtocol(),\n+        ALLOWED_REPOSITORY_URL_SCHEMES);*/\n+    return repository;\n+  }\n+\n+  private static VersionRangeResult findVersionRange(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+\n+    Artifact artifactWithVersionRange = new DefaultArtifact(groupId, artifactId, null, \"(0,]\");\n+    VersionRangeRequest request =\n+        new VersionRangeRequest(\n+            artifactWithVersionRange, Arrays.asList( RepositoryUtility.CENTRAL ), null);\n+\n+    try {\n+      return repositorySystem.resolveVersionRange(session, request);\n+    } catch (VersionRangeResolutionException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /** Returns the highest version for {@code groupId:artifactId} in {@code repositorySystem}. */\n+  //@VisibleForTesting\n+  static String findHighestVersion(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+    return findVersionRange(repositorySystem, session, groupId, artifactId)\n+        .getHighestVersion()\n+        .toString();\n+  }\n+\n+  /**\n+   * Returns list of versions available for {@code groupId:artifactId} in {@code repositorySystem}.\n+   * The returned list is in ascending order with regard to {@link\n+   * org.eclipse.aether.util.version.GenericVersionScheme}; the highest version comes at last.\n+   */\n+  public static List<String> findVersions(\n+      RepositorySystem repositorySystem, String groupId, String artifactId)\n+      throws MavenRepositoryException {\n+    RepositorySystemSession session = RepositoryUtility.newSession(repositorySystem);\n+    // getVersions returns a list in ascending order\n+    List<Version> versions = new ArrayList<Version>();\n+    List<String> versionStrings = new ArrayList<String>();\n+\n+    versions = findVersionRange(repositorySystem, session, groupId, artifactId).getVersions();\n+\n+    for(Version version : versions)\n+    {\n+      versionStrings.add( version.toString() );\n+    }\n+\n+    return versionStrings;\n+\n+    /* above code replaces non Java 7 code:", "originalCommit": "f8dc900f9eef135d47c373df78ac0e5a73423bd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjQ4MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r445822480", "bodyText": "more space", "author": "elharo", "createdAt": "2020-06-25T20:35:04Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -49,6 +49,12 @@ public String serialize( DependencyNode root )\n     private static String getDependencyCoordinate( DependencyNode node )\n     {\n         Artifact artifact = node.getArtifact();\n+        if(node.getDependency() == null)", "originalCommit": "f8dc900f9eef135d47c373df78ac0e5a73423bd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5665b7c9c2ed7d8742214d23ffd33f3368eb01bc", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5665b7c9c2ed7d8742214d23ffd33f3368eb01bc", "message": "fixed several serializer bugs", "committedDate": "2020-06-26T20:30:36Z", "type": "commit"}, {"oid": "481786e0605a7e36e749405134842609253302e1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/481786e0605a7e36e749405134842609253302e1", "message": "bug with no dependencies in tree-verbose, no bug in tree-verbose2", "committedDate": "2020-06-26T21:30:56Z", "type": "commit"}, {"oid": "23299cc80d9a7e0c04f2baa2257603b331ce5d7a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/23299cc80d9a7e0c04f2baa2257603b331ce5d7a", "message": "fixed bug with null dependencyNode being returned as root", "committedDate": "2020-06-29T17:54:53Z", "type": "commit"}, {"oid": "0fe0b28fdc0356a0ea03515e612b97a8bee0701a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0fe0b28fdc0356a0ea03515e612b97a8bee0701a", "message": "PR comment changes", "committedDate": "2020-06-29T18:03:46Z", "type": "commit"}, {"oid": "aceb50fdd5035d101bd95eb753cf3ab2fbe7d485", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/aceb50fdd5035d101bd95eb753cf3ab2fbe7d485", "message": "spacing issues", "committedDate": "2020-06-29T18:05:45Z", "type": "commit"}, {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2728d1993c4f83615db9f6218a8531ae88c8b697", "message": "remove some plexus annotations", "committedDate": "2020-06-29T18:18:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzODc3Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447238772", "bodyText": "remove this line", "author": "elharo", "createdAt": "2020-06-29T20:37:29Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  private final Set<DependencyNode> visitedNodes =\n+      Collections.newSetFromMap(new IdentityHashMap<DependencyNode, Boolean>());\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<Artifact>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> ancestors) {\n+    Artifact artifact = node.getArtifact();\n+\n+    if (ancestors.contains(artifact)) { // Set (rather than List) gives O(1) lookup here\n+      // parent is not null when ancestors is not empty\n+      removeChildFromParent(node, parent);\n+      return;\n+    }\n+\n+    if (shouldVisitChildren(node)) {\n+      ancestors.add(artifact);\n+      for (DependencyNode child : node.getChildren()) {\n+        removeCycle(node, child, ancestors);\n+      }\n+      ancestors.remove(artifact);\n+    }\n+  }\n+\n+  /** Returns true if {@code node} is not visited yet and marks the node as visited. */\n+  //@VisibleForTesting", "originalCommit": "2728d1993c4f83615db9f6218a8531ae88c8b697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzODkxNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447238917", "bodyText": "will --> does (use present tense)", "author": "elharo", "createdAt": "2020-06-29T20:37:46Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.", "originalCommit": "2728d1993c4f83615db9f6218a8531ae88c8b697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTAwMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447239003", "bodyText": "space after if", "author": "elharo", "createdAt": "2020-06-29T20:37:56Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  private final Set<DependencyNode> visitedNodes =\n+      Collections.newSetFromMap(new IdentityHashMap<DependencyNode, Boolean>());\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<Artifact>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> ancestors) {\n+    Artifact artifact = node.getArtifact();\n+\n+    if (ancestors.contains(artifact)) { // Set (rather than List) gives O(1) lookup here\n+      // parent is not null when ancestors is not empty\n+      removeChildFromParent(node, parent);\n+      return;\n+    }\n+\n+    if (shouldVisitChildren(node)) {\n+      ancestors.add(artifact);\n+      for (DependencyNode child : node.getChildren()) {\n+        removeCycle(node, child, ancestors);\n+      }\n+      ancestors.remove(artifact);\n+    }\n+  }\n+\n+  /** Returns true if {@code node} is not visited yet and marks the node as visited. */\n+  //@VisibleForTesting\n+  boolean shouldVisitChildren(DependencyNode node) {\n+    return visitedNodes.add(node);\n+  }\n+\n+  private static void removeChildFromParent(DependencyNode child, DependencyNode parent) {\n+    List<DependencyNode> filteredChildren = new ArrayList<DependencyNode>();\n+\n+    for(DependencyNode node : parent.getChildren() )\n+    {\n+      if( node != child )", "originalCommit": "2728d1993c4f83615db9f6218a8531ae88c8b697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTIwNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447239207", "bodyText": "remove", "author": "elharo", "createdAt": "2020-06-29T20:38:16Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +79,220 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /** Maven repositories to use when resolving dependencies. */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder() {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+\n+    static {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for (String mavenRepositoryUrl : mavenRepositoryUrls) {\n+            RemoteRepository repository = mavenRepositoryFromUrl(mavenRepositoryUrl);\n+            repositoryList.add(repository);\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    /**\n+     * Enable temporary repositories for tests.\n+     */\n+    //@VisibleForTesting", "originalCommit": "2728d1993c4f83615db9f6218a8531ae88c8b697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTUxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447239516", "bodyText": "space before List", "author": "elharo", "createdAt": "2020-06-29T20:38:49Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +79,220 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /** Maven repositories to use when resolving dependencies. */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder() {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+\n+    static {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for (String mavenRepositoryUrl : mavenRepositoryUrls) {\n+            RemoteRepository repository = mavenRepositoryFromUrl(mavenRepositoryUrl);\n+            repositoryList.add(repository);\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    /**\n+     * Enable temporary repositories for tests.\n+     */\n+    //@VisibleForTesting\n+    void setLocalRepository(Path localRepository) {\n+        this.localRepository = localRepository;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<Artifact> artifacts = new ArrayList<Artifact>();\n+        Set<org.apache.maven.artifact.Artifact> artifactSet = session.getCurrentProject().getArtifacts() ;\n+\n+        for( org.apache.maven.artifact.Artifact artifact : artifactSet )\n+        {\n+            Artifact newArtifact = new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(),\n+                    artifact.getClassifier(), artifact.getType(), artifact.getVersion());\n+            newArtifact.setFile( artifact.getFile() );\n+            artifacts.add( newArtifact );\n+        }\n+\n+        Model model = project.getModel();\n+        Dependency rootDependency = new Dependency( new DefaultArtifact( model.getGroupId(),\n+                model.getArtifactId(), model.getPackaging(), model.getVersion()), \"\" );\n+\n+        rootNode = buildFullDependencyGraph( artifacts, rootDependency );\n+        // rootNode is given compile Scope by default but should not have a scope\n+        rootNode.setScope( null );\n+\n+        SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );\n+\n+        try\n+        {\n+            write( file, serialized );\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    private DependencyNode resolveCompileTimeDependencies(\n+            List<DependencyNode> dependencyNodes, DefaultRepositorySystemSession session, Dependency root)\n+            throws org.eclipse.aether.resolution.DependencyResolutionException\n+    {\n+        List<Dependency> dependencyList = new ArrayList<Dependency>();\n+\n+        for (DependencyNode dependencyNode : dependencyNodes) {\n+            Dependency dependency = dependencyNode.getDependency();\n+            if (dependency == null) {\n+                // Root DependencyNode has null dependency field.\n+                dependencyList.add(new Dependency(dependencyNode.getArtifact(), \"compile\"));\n+            } else {\n+                // The dependency field carries exclusions\n+                dependencyList.add(dependency.setScope(\"compile\"));\n+            }\n+        }\n+\n+        if (localRepository != null) {\n+            LocalRepository local = new LocalRepository(localRepository.toAbsolutePath().toString());\n+            session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, local));\n+        }\n+\n+        CollectRequest collectRequest = new CollectRequest();\n+\n+        collectRequest.setRoot( dependencyList.get( 0 ) );\n+        if (dependencyList.size() != 1) {\n+            // With setRoot, the result includes dependencies with `optional:true` or `provided`\n+            // collectRequest.setRoot(dependencyList.get(0));\n+            collectRequest.setDependencies(dependencyList);\n+        } else {\n+            collectRequest.setDependencies(dependencyList);\n+        }\n+        for ( RemoteRepository repository : repositories) {\n+            collectRequest.addRepository(repository);\n+        }\n+        DependencyRequest dependencyRequest = new DependencyRequest();\n+        dependencyRequest.setCollectRequest(collectRequest);\n+         // dependencyRequest.setRoot(  );\n+\n+        // resolveDependencies equals to calling both collectDependencies (build dependency tree) and\n+        // resolveArtifacts (download JAR files).\n+        DependencyResult dependencyResult = system.resolveDependencies(session, dependencyRequest);\n+        return dependencyResult.getRoot();\n+    }\n+\n+    /**\n+     * Finds the full compile time, transitive dependency graph including duplicates, conflicting\n+     * versions, and provided and optional dependencies. In the event of I/O errors, missing\n+     * artifacts, and other problems, it can return an incomplete graph. Each node's dependencies are\n+     * resolved recursively. The scope of a dependency does not affect the scope of its children's\n+     * dependencies. Provided and optional dependencies are not treated differently than any other\n+     * dependency.\n+     *\n+     * @param artifacts Maven artifacts whose dependencies to retrieve\n+     * @return dependency graph representing the tree of Maven artifacts\n+     */\n+    public DependencyNode buildFullDependencyGraph(List<Artifact> artifacts, Dependency root ) {", "originalCommit": "2728d1993c4f83615db9f6218a8531ae88c8b697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MDI1MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447240250", "bodyText": "remove this", "author": "elharo", "createdAt": "2020-06-29T20:40:08Z", "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/DependencyGraphBuilderTest.java", "diffHunk": "@@ -67,7 +71,70 @@ protected void setUp() throws Exception\n     @Test\n     public void testGetBuildingRequestTestEnvironment() throws Exception\n     {\n+        /*super.setUp();", "originalCommit": "2728d1993c4f83615db9f6218a8531ae88c8b697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "38e625fbfd53602e6dab125388fb1d1bb1e0108f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/38e625fbfd53602e6dab125388fb1d1bb1e0108f", "message": "maven style guide applied", "committedDate": "2020-06-29T21:20:16Z", "type": "commit"}, {"oid": "29715b08db950ad823d14489355722e364693406", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/29715b08db950ad823d14489355722e364693406", "message": "removed useless unit test class", "committedDate": "2020-06-29T21:25:11Z", "type": "commit"}, {"oid": "b12c3317141f0b6c5c3b69772b40008a864fad66", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b12c3317141f0b6c5c3b69772b40008a864fad66", "message": "removed random output.txt file", "committedDate": "2020-06-29T21:28:10Z", "type": "commit"}, {"oid": "94a634fa047233bde649149787c4efb4b6b19a1c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/94a634fa047233bde649149787c4efb4b6b19a1c", "message": "minor changes to classes", "committedDate": "2020-06-29T21:58:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MzQ3OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447873478", "bodyText": "remove", "author": "elharo", "createdAt": "2020-06-30T17:53:28Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +74,206 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<Artifact> artifacts = new ArrayList<Artifact>();\n+        Set<org.apache.maven.artifact.Artifact> artifactSet = session.getCurrentProject().getArtifacts();\n+\n+        for ( org.apache.maven.artifact.Artifact artifact : artifactSet )\n+        {\n+            Artifact newArtifact = new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(),\n+                    artifact.getClassifier(), artifact.getType(), artifact.getVersion() );\n+            newArtifact.setFile( artifact.getFile() );\n+            artifacts.add( newArtifact );\n+        }\n+\n+        Model model = project.getModel();\n+        Dependency rootDependency = new Dependency(\n+                new DefaultArtifact( model.getGroupId(), model.getArtifactId(), model.getPackaging(),\n+                        model.getVersion() ), \"\" );\n+\n+        rootNode = buildFullDependencyGraph( artifacts, rootDependency );\n+        // rootNode is given compile Scope by default but should not have a scope\n+        rootNode.setScope( null );\n+\n+        SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );\n+\n+        try\n+        {\n+            write( file, serialized );\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    private DependencyNode resolveCompileTimeDependencies( List<DependencyNode> dependencyNodes,\n+                                                           DefaultRepositorySystemSession session,\n+                                                           Dependency root )\n+            throws org.eclipse.aether.resolution.DependencyResolutionException\n+    {\n+        List<Dependency> dependencyList = new ArrayList<Dependency>();\n+\n+        for ( DependencyNode dependencyNode : dependencyNodes )\n+        {\n+            Dependency dependency = dependencyNode.getDependency();\n+            if ( dependency == null )\n+            {\n+                // Root DependencyNode has null dependency field.\n+                dependencyList.add( new Dependency( dependencyNode.getArtifact(), \"compile\" ) );\n+            }\n+            else\n+            {\n+                // The dependency field carries exclusions\n+                dependencyList.add( dependency.setScope( \"compile\" ) );\n+            }\n+        }\n+\n+        if ( localRepository != null )\n+        {\n+            LocalRepository local = new LocalRepository( localRepository.toAbsolutePath().toString() );\n+            session.setLocalRepositoryManager( system.newLocalRepositoryManager( session, local ) );\n+        }\n+\n+        CollectRequest collectRequest = new CollectRequest();\n+\n+        collectRequest.setRoot( dependencyList.get( 0 ) );\n+        if ( dependencyList.size() != 1 )\n+        {\n+            // With setRoot, the result includes dependencies with `optional:true` or `provided`\n+            // collectRequest.setRoot(dependencyList.get(0));\n+            collectRequest.setDependencies( dependencyList );\n+        }\n+        else\n+        {\n+            collectRequest.setDependencies( dependencyList );\n+        }\n+        for ( RemoteRepository repository : repositories )\n+        {\n+            collectRequest.addRepository( repository );\n+        }\n+        DependencyRequest dependencyRequest = new DependencyRequest();\n+        dependencyRequest.setCollectRequest( collectRequest );\n+        // dependencyRequest.setRoot(  );\n+\n+        // resolveDependencies equals to calling both collectDependencies (build dependency tree) and\n+        // resolveArtifacts (download JAR files).\n+        DependencyResult dependencyResult = system.resolveDependencies( session, dependencyRequest );\n+        return dependencyResult.getRoot();\n     }\n \n+    /**\n+     * Finds the full compile time, transitive dependency graph including duplicates, conflicting versions, and provided\n+     * and optional dependencies. In the event of I/O errors, missing artifacts, and other problems, it can return an\n+     * incomplete graph. Each node's dependencies are resolved recursively. The scope of a dependency does not affect\n+     * the scope of its children's dependencies. Provided and optional dependencies are not treated differently than any\n+     * other dependency.\n+     *\n+     * @param artifacts Maven artifacts whose dependencies to retrieve\n+     * @return dependency graph representing the tree of Maven artifacts\n+     */\n+    public DependencyNode buildFullDependencyGraph( List<Artifact> artifacts, Dependency root )\n+    {\n+        List<DependencyNode> dependencyNodes = new ArrayList<DependencyNode>();\n+        dependencyNodes.add( new DefaultDependencyNode( root ) );\n+\n+        for ( Artifact artifact : artifacts )\n+        {\n+            dependencyNodes.add( new DefaultDependencyNode( artifact ) );\n+        }\n+        DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency( system );\n+        return buildDependencyGraph( dependencyNodes, session, root );\n+    }\n+\n+    private DependencyNode buildDependencyGraph( List<DependencyNode> dependencyNodes,\n+                                                 DefaultRepositorySystemSession session, Dependency root )\n+    {\n+        try\n+        {\n+            return resolveCompileTimeDependencies( dependencyNodes, session, root );\n+        }\n+        catch ( org.eclipse.aether.resolution.DependencyResolutionException ex )\n+        {\n+            DependencyResult result = ex.getResult();\n+            DependencyNode graph = result.getRoot();\n+\n+            for ( ArtifactResult artifactResult : result.getArtifactResults() )\n+            {\n+                Artifact resolvedArtifact = artifactResult.getArtifact();\n+\n+                if ( resolvedArtifact == null )\n+                {\n+                    Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n+                    // ToDo: (may not be needed) graph.addUnresolvableArtifactProblem(requestedArtifact);", "originalCommit": "94a634fa047233bde649149787c4efb4b6b19a1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abae761ec7f5be1f0f787c80c33b7692583a1de4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/abae761ec7f5be1f0f787c80c33b7692583a1de4", "message": "remove commented code", "committedDate": "2020-07-02T17:17:50Z", "type": "commit"}, {"oid": "d017d4d57fe4fd03f894fbe49526ce7e5b9f9991", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d017d4d57fe4fd03f894fbe49526ce7e5b9f9991", "message": "Merge branch 'master' into BuildDependencyGraphForVerboseTree", "committedDate": "2020-07-02T17:46:11Z", "type": "commit"}, {"oid": "a87dbc1bc5ea5c95b2f2d443ad57c438170a568e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a87dbc1bc5ea5c95b2f2d443ad57c438170a568e", "message": "Merge branch 'master' into BuildDependencyGraphForVerboseTree", "committedDate": "2020-07-15T19:11:55Z", "type": "commit"}, {"oid": "a6cc880104957f51a579e87a5ae2d5d1f7e83aa7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a6cc880104957f51a579e87a5ae2d5d1f7e83aa7", "message": "Merge branch 'master' into BuildDependencyGraphForVerboseTree", "committedDate": "2020-07-15T20:59:09Z", "type": "commit"}, {"oid": "d955d584b5dd75c6c56ea8fdff08bc4902b17aa7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d955d584b5dd75c6c56ea8fdff08bc4902b17aa7", "message": "Ignore test dependencies that are not declared in pom.xml - serializer unit tests broken", "committedDate": "2020-07-16T18:30:21Z", "type": "commit"}, {"oid": "3deff7dcde58ba431931e978ad085dcda638d19b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3deff7dcde58ba431931e978ad085dcda638d19b", "message": "junit is shown as compile dependency even when scoped with test", "committedDate": "2020-07-16T20:29:57Z", "type": "commit"}, {"oid": "645c8a04199da118d50aa8c65c08b33a22baf08e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/645c8a04199da118d50aa8c65c08b33a22baf08e", "message": "attempting to fix issue with scopes", "committedDate": "2020-07-16T21:58:11Z", "type": "commit"}, {"oid": "79d9ccb9e3b60f4be9eb4e5dc5ed74038553b69c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/79d9ccb9e3b60f4be9eb4e5dc5ed74038553b69c", "message": "test scope issue still exists", "committedDate": "2020-07-17T01:02:13Z", "type": "commit"}, {"oid": "22e314db6acd635897439e9dae07c3a49f218007", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/22e314db6acd635897439e9dae07c3a49f218007", "message": "fixed test issue, need to add better tests", "committedDate": "2020-07-17T01:09:58Z", "type": "commit"}, {"oid": "41188727e5eada8cb099a668156c8d7e5bad6b08", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/41188727e5eada8cb099a668156c8d7e5bad6b08", "message": "scope issue fixed, need to change serializer from dfs to bfs and add management messages", "committedDate": "2020-07-17T20:15:59Z", "type": "commit"}, {"oid": "b32266ac4b445f2a4485b0c7ef51662837ebfb56", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b32266ac4b445f2a4485b0c7ef51662837ebfb56", "message": "BFS conflict logic added; tests need to be fixed and code cleaned", "committedDate": "2020-07-20T21:35:12Z", "type": "commit"}, {"oid": "daacb361143584385c4a658e50132f6b82394758", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/daacb361143584385c4a658e50132f6b82394758", "message": "serializer tests fixed", "committedDate": "2020-07-21T15:30:07Z", "type": "commit"}, {"oid": "a5ad1f2bc0caf80892fa582bbb76295c043ee991", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a5ad1f2bc0caf80892fa582bbb76295c043ee991", "message": "code cleaned up, need to add functionality for creating a cycle containing graph and dependency management support", "committedDate": "2020-07-21T16:47:04Z", "type": "commit"}, {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "message": "Merge branch 'master' into BuildDependencyGraphForVerboseTree", "committedDate": "2020-07-21T16:55:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MTExMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458361111", "bodyText": "Why is this a field? Looks like it could be a local variable.", "author": "elharo", "createdAt": "2020-07-21T20:15:27Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +75,242 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<org.apache.maven.model.Dependency> dependencies = project.getDependencies();\n+\n+        rootNode = buildFullDependencyGraph( dependencies );", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2ODQyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458368429", "bodyText": "In the maven-dependency-plugin version of this code it's a field because there's a method to return the graph so I left it like that. I can change it though.", "author": "ian-lavallee", "createdAt": "2020-07-21T20:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MTExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NTIzOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458365239", "bodyText": "This object can't be used in parallel, correct? Worth documenting.", "author": "elharo", "createdAt": "2020-07-21T20:23:14Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -36,24 +39,56 @@\n     private static final String LINE_START_LAST_CHILD = \"\\\\- \";\n     private static final String LINE_START_CHILD = \"+- \";\n \n-    private final Map<DependencyNode, Boolean> visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n-    private final Set<String> coordinateStrings =  new HashSet<String>();\n-    private final Map<String, String> coordinateVersionMap = new HashMap<String, String>();\n-    private StringBuilder builder = new StringBuilder();\n+    private Set<String> coordinateStrings;\n+    private Map<String, String> coordinateVersionMap;\n+    private Map<DependencyNode, String> nodeErrors;\n+    private StringBuilder builder;\n \n     public String serialize( DependencyNode root )\n     {\n-        return dfs( root, \"\" ).toString();\n+        coordinateStrings = new HashSet<>();", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MzQzNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458363434", "bodyText": "Get rid of the 'for now'?", "author": "bimargulies-google", "createdAt": "2020-07-21T20:19:48Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -17,19 +17,55 @@\n \n package org.apache.maven.dependency.graph;\n \n+import com.google.inject.Inject;\n import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.model.Model;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugin.MojoExecutionException;\n-import org.apache.maven.plugins.annotations.Component;\n import org.apache.maven.plugins.annotations.Mojo;\n import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DependencyResolutionException;\n+import org.apache.maven.project.DependencyResolutionRequest;\n+import org.apache.maven.project.DependencyResolutionResult;\n import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectDependenciesResolver;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.CollectRequest;\n+import org.eclipse.aether.graph.DefaultDependencyNode;\n+import org.eclipse.aether.graph.Dependency;\n+import org.eclipse.aether.graph.DependencyNode;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.ArtifactResult;\n+import org.eclipse.aether.resolution.DependencyRequest;\n+import org.eclipse.aether.resolution.DependencyResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.commons.io.FileUtils.write;\n+import static org.apache.maven.dependency.graph.RepositoryUtility.CENTRAL;\n+import static org.apache.maven.dependency.graph.RepositoryUtility.mavenRepositoryFromUrl;\n \n /**\n- * Gets the Project Building Request\n+ * Builds the DependencyGraph and for now outputs a text version of the dependency tree to a file", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2Mzg0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458363849", "bodyText": "Is the slash change enough? Do you need to use the canonicalization in Files? Drive letters?", "author": "bimargulies-google", "createdAt": "2020-07-21T20:20:34Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +75,242 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMDE2OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458430168", "bodyText": "The slash change seems to work. I think it gets the drive letters automatically from getAbsolutePath, what scenario could cause this to fail?", "author": "ian-lavallee", "createdAt": "2020-07-21T22:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2Mzg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NDI3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458364273", "bodyText": "Is zip really the only possible wrong thing?", "author": "bimargulies-google", "createdAt": "2020-07-21T20:21:25Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/FilteringZipDependencySelector.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyCollectionContext;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.graph.Dependency;\n+\n+import java.util.Map;\n+\n+/**\n+ * Excludes artifacts with {@code zip} type.\n+ */\n+public final class FilteringZipDependencySelector implements DependencySelector\n+{\n+    // To exclude log4j-api-java9:zip:2.11.1, which is not published.\n+    // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/339\n+\n+    @Override\n+    public boolean selectDependency( Dependency dependency )\n+    {\n+        Artifact artifact = dependency.getArtifact();\n+        Map<String, String> properties = artifact.getProperties();\n+        // Because LinkageChecker only checks jar file, zip files are not needed\n+        return !\"zip\".equals( properties.get( \"type\" ) );", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NDc0NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458364744", "bodyText": "I'm surprised that this isn't somewhere you could pull it in from, but I can't tell you where to get it from.", "author": "bimargulies-google", "createdAt": "2020-07-21T20:22:19Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/OsProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Platform-dependent project properties normalized from ${os.name} and ${os.arch}. Netty uses these to select\n+ * system-specific dependencies through the\n+ * <a href='https://github.com/trustin/os-maven-plugin'>os-maven-plugin</a>.\n+ */\n+public class OsProperties", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NjUzOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458366539", "bodyText": "I would expect this to return the version object and the caller to apply toString.", "author": "bimargulies-google", "createdAt": "2020-07-21T20:25:29Z", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.execution.DefaultMavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectBuilder;\n+import org.apache.maven.project.ProjectBuildingException;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.project.ProjectBuildingResult;\n+import org.apache.maven.repository.internal.MavenRepositorySystemUtils;\n+import org.codehaus.plexus.ContainerConfiguration;\n+import org.codehaus.plexus.DefaultContainerConfiguration;\n+import org.codehaus.plexus.DefaultPlexusContainer;\n+import org.codehaus.plexus.PlexusConstants;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.classworlds.ClassWorld;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;\n+import org.eclipse.aether.impl.DefaultServiceLocator;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.VersionRangeRequest;\n+import org.eclipse.aether.resolution.VersionRangeResolutionException;\n+import org.eclipse.aether.resolution.VersionRangeResult;\n+import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;\n+import org.eclipse.aether.spi.connector.transport.TransporterFactory;\n+import org.eclipse.aether.transport.file.FileTransporterFactory;\n+import org.eclipse.aether.transport.http.HttpTransporterFactory;\n+import org.eclipse.aether.util.graph.selector.AndDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;\n+import org.eclipse.aether.util.graph.selector.OptionalDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.eclipse.aether.version.Version;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+\n+/**\n+ * Aether initialization. This is based on Apache Maven Resolver 1.4.2 or later. There are many other versions of Aether\n+ * from Sonatype and the Eclipse Project, but this is the current one.\n+ */\n+public final class RepositoryUtility\n+{\n+\n+    public static final RemoteRepository CENTRAL = new RemoteRepository.Builder( \"central\", \"default\",\n+            \"https://repo1.maven.org/maven2/\" ).build();\n+\n+    // DefaultTransporterProvider.newTransporter checks these transporters\n+    private static final Set<String> ALLOWED_REPOSITORY_URL_SCHEMES = new HashSet<String>(\n+            Arrays.asList( \"file\", \"http\", \"https\" ) );\n+\n+    private RepositoryUtility()\n+    {\n+    }\n+\n+    /**\n+     * Creates a new system configured for file and HTTP repository resolution.\n+     */\n+    public static RepositorySystem newRepositorySystem()\n+    {\n+        DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n+        locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );\n+        locator.addService( TransporterFactory.class, FileTransporterFactory.class );\n+        locator.addService( TransporterFactory.class, HttpTransporterFactory.class );\n+\n+        return locator.getService( RepositorySystem.class );\n+    }\n+\n+    //@VisibleForTesting\n+    static DefaultRepositorySystemSession createDefaultRepositorySystemSession( RepositorySystem system )\n+    {\n+        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n+        LocalRepository localRepository = new LocalRepository( findLocalRepository() );\n+        session.setLocalRepositoryManager( system.newLocalRepositoryManager( session, localRepository ) );\n+        return session;\n+    }\n+\n+    /**\n+     * Opens a new Maven repository session that looks for the local repository in the customary ~/.m2 directory. If not\n+     * found, it creates an initially empty repository in a temporary location.\n+     */\n+    public static DefaultRepositorySystemSession newSession( RepositorySystem system )\n+    {\n+        DefaultRepositorySystemSession session = createDefaultRepositorySystemSession( system );\n+        return session;\n+    }\n+\n+    /**\n+     * Open a new Maven repository session for full dependency graph resolution.\n+     *\n+     * @see {@link DependencyGraphBuilder}\n+     */\n+    static DefaultRepositorySystemSession newSessionForFullDependency( RepositorySystem system )\n+    {\n+        // This combination of DependencySelector comes from the default specified in\n+        // `MavenRepositorySystemUtils.newSession`.\n+        // LinkageChecker needs to include 'provided'-scope and optional dependencies.\n+        DependencySelector dependencySelector = new AndDependencySelector(\n+                // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+                // false positive in LinkageChecker.\n+                new ScopeDependencySelector(), // removed \"test\" parameter\n+                new ExclusionDependencySelector(), new FilteringZipDependencySelector() );\n+\n+        return newSession( system, dependencySelector );\n+    }\n+\n+    private static DefaultRepositorySystemSession newSession( RepositorySystem system,\n+                                                              DependencySelector dependencySelector )\n+    {\n+        DefaultRepositorySystemSession session = createDefaultRepositorySystemSession( system );\n+        session.setDependencySelector( dependencySelector );\n+\n+        // By default, Maven's MavenRepositorySystemUtils.newSession() returns a session with\n+        // ChainedDependencyGraphTransformer(ConflictResolver(...), JavaDependencyContextRefiner()).\n+        // Because the full dependency graph does not resolve conflicts of versions, this session does\n+        // not use ConflictResolver.\n+        session.setDependencyGraphTransformer(\n+                new ChainedDependencyGraphTransformer( new CycleBreakerGraphTransformer(), // Avoids StackOverflowError\n+                        new JavaDependencyContextRefiner() ) );\n+\n+        // No dependency management in the full dependency graph\n+        session.setDependencyManager( null );\n+\n+        return session;\n+    }\n+\n+    static DefaultRepositorySystemSession newSessionForVerboseDependency( RepositorySystem system )\n+    {\n+        DependencySelector dependencySelector = new AndDependencySelector(\n+                // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+                // false positive in LinkageChecker.\n+                new ScopeDependencySelector(), // removed \"test\" parameter\n+                new OptionalDependencySelector(), new ExclusionDependencySelector(),\n+                new FilteringZipDependencySelector() );\n+\n+        return newSession( system, dependencySelector );\n+    }\n+\n+    private static String findLocalRepository()\n+    {\n+        // TODO is there Maven code for this?\n+        Path home = Paths.get( System.getProperty( \"user.home\" ) );\n+        Path localRepo = home.resolve( \".m2\" ).resolve( \"repository\" );\n+        if ( Files.isDirectory( localRepo ) )\n+        {\n+            return localRepo.toAbsolutePath().toString();\n+        }\n+        else\n+        {\n+            return makeTemporaryLocalRepository();\n+        }\n+    }\n+\n+    private static String makeTemporaryLocalRepository()\n+    {\n+        try\n+        {\n+            File temporaryDirectory = Files.createTempDirectory( \"m2\" ).toFile();\n+            temporaryDirectory.deleteOnExit();\n+            return temporaryDirectory.getAbsolutePath();\n+        }\n+        catch ( IOException ex )\n+        {\n+            return null;\n+        }\n+    }\n+\n+    static MavenProject createMavenProject( Path pomFile, RepositorySystemSession session )\n+            throws MavenRepositoryException\n+    {\n+        // MavenCli's way to instantiate PlexusContainer\n+        ClassWorld classWorld = new ClassWorld( \"plexus.core\", Thread.currentThread().getContextClassLoader() );\n+        ContainerConfiguration containerConfiguration = new DefaultContainerConfiguration().setClassWorld(\n+                classWorld ).setRealm( classWorld.getClassRealm( \"plexus.core\" ) ).setClassPathScanning(\n+                PlexusConstants.SCANNING_INDEX ).setAutoWiring( true ).setJSR250Lifecycle( true ).setName(\n+                \"linkage-checker\" );\n+        try\n+        {\n+            PlexusContainer container = new DefaultPlexusContainer( containerConfiguration );\n+\n+            MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();\n+            ProjectBuildingRequest projectBuildingRequest = mavenExecutionRequest.getProjectBuildingRequest();\n+\n+            projectBuildingRequest.setRepositorySession( session );\n+\n+            // Profile activation needs properties such as JDK version\n+            Properties properties = new Properties(); // allowing duplicate entries\n+            properties.putAll( projectBuildingRequest.getSystemProperties() );\n+            properties.putAll( OsProperties.detectOsProperties() );\n+            properties.putAll( System.getProperties() );\n+            projectBuildingRequest.setSystemProperties( properties );\n+\n+            ProjectBuilder projectBuilder = container.lookup( ProjectBuilder.class );\n+            ProjectBuildingResult projectBuildingResult = projectBuilder.build( pomFile.toFile(),\n+                    projectBuildingRequest );\n+            return projectBuildingResult.getProject();\n+        }\n+        catch ( PlexusContainerException | ComponentLookupException | ProjectBuildingException ex )\n+        {\n+            throw new MavenRepositoryException( ex );\n+        }\n+    }\n+\n+    /**\n+     * Returns Maven repository specified as {@code mavenRepositoryUrl}, after validating the syntax of the URL.\n+     *\n+     * @throws IllegalArgumentException if the URL is malformed for a Maven repository\n+     */\n+    public static RemoteRepository mavenRepositoryFromUrl( String mavenRepositoryUrl )\n+    {\n+        try\n+        {\n+            // Because the protocol is not an empty string (checked below), this URI is absolute.\n+            new URI( mavenRepositoryUrl );\n+        }\n+        catch ( URISyntaxException ex )\n+        {\n+            throw new IllegalArgumentException( \"Invalid URL syntax: \" + mavenRepositoryUrl );\n+        }\n+\n+        RemoteRepository repository = new RemoteRepository.Builder( null, \"default\", mavenRepositoryUrl ).build();\n+\n+        return repository;\n+    }\n+\n+    private static VersionRangeResult findVersionRange( RepositorySystem repositorySystem,\n+                                                        RepositorySystemSession session,\n+                                                        String groupId, String artifactId )\n+            throws MavenRepositoryException\n+    {\n+\n+        Artifact artifactWithVersionRange = new DefaultArtifact( groupId, artifactId, null, \"(0,]\" );\n+        VersionRangeRequest request = new VersionRangeRequest( artifactWithVersionRange,\n+                Arrays.asList( RepositoryUtility.CENTRAL ), null );\n+\n+        try\n+        {\n+            return repositorySystem.resolveVersionRange( session, request );\n+        }\n+        catch ( VersionRangeResolutionException ex )\n+        {\n+            throw new MavenRepositoryException( ex );\n+        }\n+    }\n+\n+    /**\n+     * Returns the highest version for {@code groupId:artifactId} in {@code repositorySystem}.\n+     */\n+    static String findHighestVersion( RepositorySystem repositorySystem, RepositorySystemSession session,", "originalCommit": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e4a4700ede1668aa4eeb060655917ee28851f42", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5e4a4700ede1668aa4eeb060655917ee28851f42", "message": "serializeGraph threadsafe", "committedDate": "2020-07-21T22:14:48Z", "type": "commit"}, {"oid": "d6086e787bee2f3eda158d904e5fd62a18654227", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d6086e787bee2f3eda158d904e5fd62a18654227", "message": "Merge branch 'BuildDependencyGraphForVerboseTree' of https://github.com/GoogleCloudPlatform/cloud-opensource-java into BuildDependencyGraphForVerboseTree", "committedDate": "2020-07-21T22:20:54Z", "type": "commit"}, {"oid": "992a54f9080262b9d36a69ca852c7adf18c3fc36", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/992a54f9080262b9d36a69ca852c7adf18c3fc36", "message": "serializeGraph methods made static and class made final", "committedDate": "2020-07-21T22:23:51Z", "type": "commit"}, {"oid": "aef1895a067e00faa7932b33d762d41ae31cae0f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/aef1895a067e00faa7932b33d762d41ae31cae0f", "message": "map changed to set in serializeGraph", "committedDate": "2020-07-21T22:29:41Z", "type": "commit"}, {"oid": "0db08b6e5cb6adaae098cb1287b8c72594fd0ef3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0db08b6e5cb6adaae098cb1287b8c72594fd0ef3", "message": "rootNode now a local variable instead of field in buildDepGraph", "committedDate": "2020-07-21T22:37:56Z", "type": "commit"}, {"oid": "920cbed4c02b760496222adeaf5f9b7d76225be3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/920cbed4c02b760496222adeaf5f9b7d76225be3", "message": "get rid of unused imports", "committedDate": "2020-07-21T22:38:39Z", "type": "commit"}, {"oid": "f308f54f52fa8ddfef969a555e2f53b212366851", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f308f54f52fa8ddfef969a555e2f53b212366851", "message": "Minor PR comments addressed", "committedDate": "2020-07-21T22:41:30Z", "type": "commit"}, {"oid": "21e626e9e3bdc3c869d8055e52e34bc32cb6be85", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/21e626e9e3bdc3c869d8055e52e34bc32cb6be85", "message": "use canonicalPath instead of absolute", "committedDate": "2020-07-22T17:54:08Z", "type": "commit"}, {"oid": "160405b590c3ac2e536232ea5366c7db23c9ce6d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/160405b590c3ac2e536232ea5366c7db23c9ce6d", "message": "Benson PR comments addressed", "committedDate": "2020-07-22T20:59:07Z", "type": "commit"}]}