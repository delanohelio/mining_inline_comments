{"pr_number": 1564, "pr_title": "JBTM-3262  improve string serialization", "pr_createdAt": "2020-03-05T10:19:34Z", "pr_url": "https://github.com/jbosstm/narayana/pull/1564", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNDQ1Mw==", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388304453", "bodyText": "What is the performance difference between packing the bytes directly versus packing the string - is it that the string copy (os.packString(StateManager.marker)) is avoided?", "author": "mmusgrov", "createdAt": "2020-03-05T13:51:03Z", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/StateManager.java", "diffHunk": "@@ -641,12 +642,12 @@ protected void packHeader (OutputObjectState os, Header hdr)\n \n         Uid txId = ((hdr == null) ? null : hdr.getTxId());\n         Uid processUid = ((hdr == null) ? null : hdr.getProcessId());\n-        \n+\n         try\n         {\n             // pack the marker first.\n \n-            os.packString(StateManager.marker);\n+            os.packStringBytes(markerBytes);", "originalCommit": "aed8dc5cf6387e6bfb3408a244d3a2a2e165eb48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMjg4Mg==", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388312882", "bodyText": "The calculation that transforms the String's internal representation (char[]) to the encoded form (byte[]) need not be repeated for every single StateManager instance (which is MANY), in addition to which you avoid the gc churn and copies to/from the short-lived byte[] that's needed by the encoder. The actual packing once you have the byte[] is then the same either way. The encoding is a trivial overhead on tx that hit the network, but worth a 1-2% on in-memory cases. May not have bothered, except it's easy to piggyback the optimization onto the bug fix.", "author": "jhalliday", "createdAt": "2020-03-05T14:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNDQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MzQ0MA==", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388453440", "bodyText": "@jhalliday  maybe a matter of taste but would not be better to use StateManager.markerBytes when the static variable is accessed here?", "author": "ochaloup", "createdAt": "2020-03-05T17:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNDQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzIxNg==", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388307216", "bodyText": "Just a question - did the original code add space for the string delimiter but not actually pack it into the output buffer? How did you uncover this bug?", "author": "mmusgrov", "createdAt": "2020-03-05T13:55:40Z", "path": "ArjunaCore/arjuna/classes/com/arjuna/ats/arjuna/state/OutputBuffer.java", "diffHunk": "@@ -358,26 +358,26 @@ public final synchronized void packString (String s) throws IOException\n         if (!_valid)\n             throw new IOException(tsLogger.i18NLogger.get_state_OutputBuffer_10());\n \n-        int sz = 0;\n-        String dummy = null;\n-\n-        if (s != null)\n-        {\n-            sz = s.length() + 1;\n-            dummy = s + '\\0';\n+        if(s == null) {\n+            packInt(0);\n+        } else {\n+            packStringBytes( s.getBytes(StandardCharsets.UTF_8) );\n+        }\n+    }\n \n+    public final synchronized void packStringBytes(byte[] bytes) throws IOException\n+    {\n+        if (!_valid || bytes == null) {\n+            throw new IOException(tsLogger.i18NLogger.get_state_OutputBuffer_10());\n         }\n \n-        packInt(sz);\n+        packInt(bytes.length+1);\n \n         _valid = false;\n \n-        if (sz > 0)\n-        {\n-            byte[] bytes = dummy.getBytes(StandardCharsets.UTF_8);\n-            _output.write(bytes, 0, bytes.length);\n-            realign(bytes.length);\n-        }\n+        _output.write(bytes, 0, bytes.length);\n+        _output.writeByte(0);", "originalCommit": "3cbe156bd6f7066d43f4b048082a569e63e78288", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNDgyMQ==", "url": "https://github.com/jbosstm/narayana/pull/1564#discussion_r388314821", "bodyText": "The original works by creating a new string with the terminator appended as a charater, then sizing/encoding that in a single step, rather than treating the string and the terminator as separate elements. The latter is more efficient, as it avoids creating an additional String object.", "author": "jhalliday", "createdAt": "2020-03-05T14:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwNzIxNg=="}], "type": "inlineReview"}, {"oid": "0fb7a387fbc426071201b28a83ee0ccd95cd90f3", "url": "https://github.com/jbosstm/narayana/commit/0fb7a387fbc426071201b28a83ee0ccd95cd90f3", "message": "JBTM-3262 improve string serialization", "committedDate": "2020-03-13T10:05:29Z", "type": "commit"}, {"oid": "0fb7a387fbc426071201b28a83ee0ccd95cd90f3", "url": "https://github.com/jbosstm/narayana/commit/0fb7a387fbc426071201b28a83ee0ccd95cd90f3", "message": "JBTM-3262 improve string serialization", "committedDate": "2020-03-13T10:05:29Z", "type": "forcePushed"}]}