{"pr_number": 1704, "pr_title": "[JBTM-3378] LRA recovery manager on top of LRA coordinator", "pr_createdAt": "2020-10-22T14:44:09Z", "pr_url": "https://github.com/jbosstm/narayana/pull/1704", "timeline": [{"oid": "ed7b0f1cd596ca0e84c040f9eb6a3a043e1b14a8", "url": "https://github.com/jbosstm/narayana/commit/ed7b0f1cd596ca0e84c040f9eb6a3a043e1b14a8", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-23T09:52:32Z", "type": "forcePushed"}, {"oid": "207f902250f4248a5684b3092dd06184d7276c38", "url": "https://github.com/jbosstm/narayana/commit/207f902250f4248a5684b3092dd06184d7276c38", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-23T10:06:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMzgyNA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r511833824", "bodyText": "Quote: \"A @path value isn\u2019t required to have leading or trailing slashes (/). The JAX-RS runtime parses URI path templates the same whether or not they have leading or trailing spaces.\"\nSo in this example you do not need the Path annotation at all.", "author": "mmusgrov", "createdAt": "2020-10-26T09:48:27Z", "path": "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java", "diffHunk": "@@ -147,7 +148,7 @@ public String replaceCompensator(\n     }\n \n     @GET\n-    @Path(\"recovery\")\n+    @Path(\"/\")", "originalCommit": "207f902250f4248a5684b3092dd06184d7276c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMjEyMw==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r512332123", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-10-26T23:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMzgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNzE5MA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r511837190", "bodyText": "What was intended? The original code with the explicit if branch was clearer.", "author": "mmusgrov", "createdAt": "2020-10-26T09:54:03Z", "path": "rts/lra/test/arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -60,48 +64,86 @@ public void waitForCallbacks(URI lraId) {\n \n     @Override\n     public boolean waitForEndPhaseReplay(URI lraId) {\n-        String host = lraId.getHost();\n-        int port = lraId.getPort();\n-        if (!recoverLRAs(host, port, lraId)) {\n+        if (!recoverLRAs(lraId)) {\n             // first recovery scan probably collided with periodic recovery which started\n             // before the test execution so try once more\n-            return recoverLRAs(host, port, lraId);\n+            return recoverLRAs(lraId);\n         }\n-\n         return true;\n     }\n \n     /**\n-     * Invokes LRA coordinator recovery REST endpoint and returns whether the recovery of intended LRAs happended\n+     * Invokes LRA coordinator recovery REST endpoint and returns whether the recovery of intended LRAs happened\n      *\n-     * @param host  the LRA coordinator host address\n-     * @param port  the LRA coordinator port\n      * @param lraId the LRA id of the LRA that is intended to be recovered\n      * @return true the intended LRA recovered, false otherwise\n      */\n-    private boolean recoverLRAs(String host, int port, URI lraId) {\n+    private boolean recoverLRAs(URI lraId) {\n         // trigger a recovery scan\n         Client recoveryCoordinatorClient = ClientBuilder.newClient();\n \n         try {\n-            String recoveryCoordinatorUrl = String.format(\"http://%s:%d/%s/recovery\",\n-                host, port, LRAConstants.RECOVERY_COORDINATOR_PATH_NAME);\n-            WebTarget recoveryTarget = recoveryCoordinatorClient.target(URI.create(recoveryCoordinatorUrl));\n+            URI lraCoordinatorUri = extractLRACoordinatorUri(lraId);\n+            URI recoveryCoordinatorUri = UriBuilder.fromUri(lraCoordinatorUri)\n+                    .path(RECOVERY_COORDINATOR_PATH_NAME).build();\n+            WebTarget recoveryTarget = recoveryCoordinatorClient.target(recoveryCoordinatorUri);\n \n             // send the request to the recovery coordinator\n             Response response = recoveryTarget.request().get();\n             String json = response.readEntity(String.class);\n             response.close();\n \n-            if (json.contains(lraId.toASCIIString())) {\n-                // intended LRA didn't recover\n-                return false;\n-            }\n-\n-            return true;\n+            // intended LRA didn't recover", "originalCommit": "207f902250f4248a5684b3092dd06184d7276c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMTgyNA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r512321824", "bodyText": "The intend is to make the path dynamic. When the coordinator is run with Quarkus the path is explicit. But in case of e.g. WildFly the path depends on the deployment name. The deployment name may differ for every test.", "author": "ochaloup", "createdAt": "2020-10-26T23:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE0ODQyOQ==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r514148429", "bodyText": "oh, I'm sorry for that. I misunderstood your point. When you consider prior code cleaner I will change it back.", "author": "ochaloup", "createdAt": "2020-10-29T10:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzODUxNA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r511838514", "bodyText": "These comments are confusing and it's not clear why they need to be included.", "author": "mmusgrov", "createdAt": "2020-10-26T09:56:09Z", "path": "rts/lra/test/arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -60,48 +64,86 @@ public void waitForCallbacks(URI lraId) {\n \n     @Override\n     public boolean waitForEndPhaseReplay(URI lraId) {\n-        String host = lraId.getHost();\n-        int port = lraId.getPort();\n-        if (!recoverLRAs(host, port, lraId)) {\n+        if (!recoverLRAs(lraId)) {\n             // first recovery scan probably collided with periodic recovery which started\n             // before the test execution so try once more\n-            return recoverLRAs(host, port, lraId);\n+            return recoverLRAs(lraId);\n         }\n-\n         return true;\n     }\n \n     /**\n-     * Invokes LRA coordinator recovery REST endpoint and returns whether the recovery of intended LRAs happended\n+     * Invokes LRA coordinator recovery REST endpoint and returns whether the recovery of intended LRAs happened\n      *\n-     * @param host  the LRA coordinator host address\n-     * @param port  the LRA coordinator port\n      * @param lraId the LRA id of the LRA that is intended to be recovered\n      * @return true the intended LRA recovered, false otherwise\n      */\n-    private boolean recoverLRAs(String host, int port, URI lraId) {\n+    private boolean recoverLRAs(URI lraId) {\n         // trigger a recovery scan\n         Client recoveryCoordinatorClient = ClientBuilder.newClient();\n \n         try {\n-            String recoveryCoordinatorUrl = String.format(\"http://%s:%d/%s/recovery\",\n-                host, port, LRAConstants.RECOVERY_COORDINATOR_PATH_NAME);\n-            WebTarget recoveryTarget = recoveryCoordinatorClient.target(URI.create(recoveryCoordinatorUrl));\n+            URI lraCoordinatorUri = extractLRACoordinatorUri(lraId);\n+            URI recoveryCoordinatorUri = UriBuilder.fromUri(lraCoordinatorUri)\n+                    .path(RECOVERY_COORDINATOR_PATH_NAME).build();\n+            WebTarget recoveryTarget = recoveryCoordinatorClient.target(recoveryCoordinatorUri);\n \n             // send the request to the recovery coordinator\n             Response response = recoveryTarget.request().get();\n             String json = response.readEntity(String.class);\n             response.close();\n \n-            if (json.contains(lraId.toASCIIString())) {\n-                // intended LRA didn't recover\n-                return false;\n-            }\n-\n-            return true;\n+            // intended LRA didn't recover\n+            return !json.contains(lraId.toASCIIString());\n         } finally {\n             recoveryCoordinatorClient.close();\n         }\n+    }\n \n+    /**\n+     * <p>\n+     * This method extracts the coordinator URI from the provided LRA id.\n+     * The Narayana LRA id consists of an URI of the LRA coordinator followed with the LRA transaction identifier.\n+     * We know the LRA coordinator API is hardcoded with path {@value io.narayana.lra.LRAConstants#COORDINATOR_PATH_NAME}\n+     * and the string will be searched in the original LRA id for.\n+     * </p>\n+     * <p>\n+     * The Narayana LRA works with HTTP requests and URL is used for identification. An example of the standard pattern\n+     * of the provided LRA id URI is:\n+     * {@code http://localhost:8080/deployment/lra-coordinator/0_ffff0a28054b_9133_5f855916_a7}.\n+     * This told us that the LRA can be accessed at the provided address by HTTP call.\n+     * The LRA coordinator API is available at {@code http://localhost:8080/deployment/lra-coordinator}\n+     * and the {@code 0_ffff0a28054b_9133_5f855916_a7} is the LRA transaction identifier used inside of the Coordinator\n+     * to differentiate the LRA instances.\n+     * </p>", "originalCommit": "207f902250f4248a5684b3092dd06184d7276c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMjA3Mg==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r512322072", "bodyText": "I rephrased the text. I hope it will be better now.", "author": "ochaloup", "createdAt": "2020-10-26T23:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzODUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MzkwNA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r511843904", "bodyText": "... and the implementation is even harder to understand.", "author": "mmusgrov", "createdAt": "2020-10-26T10:04:54Z", "path": "rts/lra/test/arquillian-extension/src/main/java/io/narayana/lra/arquillian/spi/NarayanaLRARecovery.java", "diffHunk": "@@ -60,48 +64,86 @@ public void waitForCallbacks(URI lraId) {\n \n     @Override\n     public boolean waitForEndPhaseReplay(URI lraId) {\n-        String host = lraId.getHost();\n-        int port = lraId.getPort();\n-        if (!recoverLRAs(host, port, lraId)) {\n+        if (!recoverLRAs(lraId)) {\n             // first recovery scan probably collided with periodic recovery which started\n             // before the test execution so try once more\n-            return recoverLRAs(host, port, lraId);\n+            return recoverLRAs(lraId);\n         }\n-\n         return true;\n     }\n \n     /**\n-     * Invokes LRA coordinator recovery REST endpoint and returns whether the recovery of intended LRAs happended\n+     * Invokes LRA coordinator recovery REST endpoint and returns whether the recovery of intended LRAs happened\n      *\n-     * @param host  the LRA coordinator host address\n-     * @param port  the LRA coordinator port\n      * @param lraId the LRA id of the LRA that is intended to be recovered\n      * @return true the intended LRA recovered, false otherwise\n      */\n-    private boolean recoverLRAs(String host, int port, URI lraId) {\n+    private boolean recoverLRAs(URI lraId) {\n         // trigger a recovery scan\n         Client recoveryCoordinatorClient = ClientBuilder.newClient();\n \n         try {\n-            String recoveryCoordinatorUrl = String.format(\"http://%s:%d/%s/recovery\",\n-                host, port, LRAConstants.RECOVERY_COORDINATOR_PATH_NAME);\n-            WebTarget recoveryTarget = recoveryCoordinatorClient.target(URI.create(recoveryCoordinatorUrl));\n+            URI lraCoordinatorUri = extractLRACoordinatorUri(lraId);\n+            URI recoveryCoordinatorUri = UriBuilder.fromUri(lraCoordinatorUri)\n+                    .path(RECOVERY_COORDINATOR_PATH_NAME).build();\n+            WebTarget recoveryTarget = recoveryCoordinatorClient.target(recoveryCoordinatorUri);\n \n             // send the request to the recovery coordinator\n             Response response = recoveryTarget.request().get();\n             String json = response.readEntity(String.class);\n             response.close();\n \n-            if (json.contains(lraId.toASCIIString())) {\n-                // intended LRA didn't recover\n-                return false;\n-            }\n-\n-            return true;\n+            // intended LRA didn't recover\n+            return !json.contains(lraId.toASCIIString());\n         } finally {\n             recoveryCoordinatorClient.close();\n         }\n+    }\n \n+    /**\n+     * <p>\n+     * This method extracts the coordinator URI from the provided LRA id.\n+     * The Narayana LRA id consists of an URI of the LRA coordinator followed with the LRA transaction identifier.\n+     * We know the LRA coordinator API is hardcoded with path {@value io.narayana.lra.LRAConstants#COORDINATOR_PATH_NAME}\n+     * and the string will be searched in the original LRA id for.\n+     * </p>\n+     * <p>\n+     * The Narayana LRA works with HTTP requests and URL is used for identification. An example of the standard pattern\n+     * of the provided LRA id URI is:\n+     * {@code http://localhost:8080/deployment/lra-coordinator/0_ffff0a28054b_9133_5f855916_a7}.\n+     * This told us that the LRA can be accessed at the provided address by HTTP call.\n+     * The LRA coordinator API is available at {@code http://localhost:8080/deployment/lra-coordinator}\n+     * and the {@code 0_ffff0a28054b_9133_5f855916_a7} is the LRA transaction identifier used inside of the Coordinator\n+     * to differentiate the LRA instances.\n+     * </p>\n+     *\n+     * @param lraId  LRA id URI which is used for extraction of the LRA Coordinator API address\n+     * @return LRA Coordinator API address\n+     */\n+    static URI extractLRACoordinatorUri(URI lraId) {", "originalCommit": "207f902250f4248a5684b3092dd06184d7276c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMjc1Ng==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r512322756", "bodyText": "I cleaned it as well.", "author": "ochaloup", "createdAt": "2020-10-26T23:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MzkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE0OTIwNA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r514149204", "bodyText": "And it is 35 lines long. That seems excessive since there is a simple one liner (or some variant of it):\nString getUid(URI lraId) {return lraId.getPath().substring(path.lastIndexOf('/') + 1);", "author": "mmusgrov", "createdAt": "2020-10-29T10:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MzkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2NDI1Mg==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r514164252", "bodyText": "I agree with Mike here, we could use the more efficient method and could give the explanation in java docs?", "author": "mayankkunwar", "createdAt": "2020-10-29T10:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MzkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxOTU0MA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r514219540", "bodyText": "Ok. I changed the method. It's not a one liner but it's shorter and similar.", "author": "ochaloup", "createdAt": "2020-10-29T12:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MzkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NTY0NQ==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r511845645", "bodyText": "assertNull is simpler", "author": "mmusgrov", "createdAt": "2020-10-26T10:07:45Z", "path": "rts/lra/test/arquillian-extension/src/test/java/io/narayana/lra/arquillian/spi/NarayanaLRARecoveryTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.net.URI;\n+\n+public class NarayanaLRARecoveryTest {\n+\n+    @Test\n+    public void extractCoordinatorFromUsualLRAId() {\n+        URI lraId = URI.create(\"http://localhost:8080/lra-coordinator/0_ffff0a28054b_9133_5f855916_a7?query=1#fragment\");\n+        URI coordinatorUri = NarayanaLRARecovery.extractLRACoordinatorUri(lraId);\n+        Assert.assertEquals(\"http\", coordinatorUri.getScheme());\n+        Assert.assertEquals(\"localhost\", coordinatorUri.getHost());\n+        Assert.assertEquals(8080, coordinatorUri.getPort());\n+        Assert.assertEquals(\"/lra-coordinator\", coordinatorUri.getPath());\n+        Assert.assertEquals(null, coordinatorUri.getQuery());", "originalCommit": "207f902250f4248a5684b3092dd06184d7276c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNDAwOQ==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r512324009", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-10-26T23:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NTY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NjUyNg==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r511846526", "bodyText": "Why are we testing internals.\nIf our code is constructing invalid LRA ids then a majority of tests will end up failing.\nThese tests are just adding noise to our code base.", "author": "mmusgrov", "createdAt": "2020-10-26T10:09:16Z", "path": "rts/lra/test/arquillian-extension/src/test/java/io/narayana/lra/arquillian/spi/NarayanaLRARecoveryTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package io.narayana.lra.arquillian.spi;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.net.URI;\n+\n+public class NarayanaLRARecoveryTest {\n+\n+    @Test\n+    public void extractCoordinatorFromUsualLRAId() {", "originalCommit": "207f902250f4248a5684b3092dd06184d7276c38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyMzY2OQ==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r512323669", "bodyText": "I don't think so. This is a unit test which is normal to be used to check the functionality of particular parts of a class. The tests help to do changes and refactoring and not breaking the functionality.\nThe integration tests are the next step in the testing journey that verifies how the whole machinery works together.", "author": "ochaloup", "createdAt": "2020-10-26T23:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NjUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2NjMyNQ==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r514166325", "bodyText": "Unit tests are the first step of testing, I agree.", "author": "mayankkunwar", "createdAt": "2020-10-29T10:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NjUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxOTk4MA==", "url": "https://github.com/jbosstm/narayana/pull/1704#discussion_r514219980", "bodyText": "After thinking about this I would like to preserve the unit test. I'm in agreement with Mayank here.", "author": "ochaloup", "createdAt": "2020-10-29T12:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0NjUyNg=="}], "type": "inlineReview"}, {"oid": "c6bb21f5b4aa2b487bb51ce4dee8b33e81ba1b99", "url": "https://github.com/jbosstm/narayana/commit/c6bb21f5b4aa2b487bb51ce4dee8b33e81ba1b99", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-26T23:35:16Z", "type": "forcePushed"}, {"oid": "37b0381a5228d2ca5c9319d3fa264b881e0d8e51", "url": "https://github.com/jbosstm/narayana/commit/37b0381a5228d2ca5c9319d3fa264b881e0d8e51", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-29T10:17:14Z", "type": "forcePushed"}, {"oid": "e8d9604bc58667772976615ca0de74347be117ab", "url": "https://github.com/jbosstm/narayana/commit/e8d9604bc58667772976615ca0de74347be117ab", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-29T11:52:38Z", "type": "forcePushed"}, {"oid": "1af9493a61611f26567e1d580251bc0aca8868bb", "url": "https://github.com/jbosstm/narayana/commit/1af9493a61611f26567e1d580251bc0aca8868bb", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-29T12:21:24Z", "type": "commit"}, {"oid": "1af9493a61611f26567e1d580251bc0aca8868bb", "url": "https://github.com/jbosstm/narayana/commit/1af9493a61611f26567e1d580251bc0aca8868bb", "message": "[JBTM-3378] LRA recovery manager moved on top of the lra coordinator path\n\nInstead of having two separate paths for LRA coordinator and LRA\nrecovery coordinator at  http://localhost:8080/lra-coordinator and http://localhost:8080/lra-recovery-coordinator\nthe recovery coordinator will be placed under http://localhost:8080/lra-coordinator\nas sub-path  http://localhost:8080/lra-coordinator/recovery", "committedDate": "2020-10-29T12:21:24Z", "type": "forcePushed"}]}