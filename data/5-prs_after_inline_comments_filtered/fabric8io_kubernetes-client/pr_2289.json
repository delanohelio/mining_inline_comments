{"pr_number": 2289, "pr_title": "Update createOrReplace to work more like BaseOperation", "pr_createdAt": "2020-06-15T21:11:07Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2289", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NDc1Nw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#discussion_r440884757", "bodyText": "nit, maybe use HttpUrlConnection for status codes:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                when(mockResponse.isSuccessful()).thenReturn(code < 400);\n          \n          \n            \n                when(mockResponse.isSuccessful()).thenReturn(code < HttpURLConnection.HTTP_BAD_REQUEST);", "author": "rohanKanojia", "createdAt": "2020-06-16T14:15:13Z", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/RawCustomResourceOperationsImplTest.java", "diffHunk": "@@ -75,15 +76,42 @@ void testCreateOrReplaceUrl() throws IOException {\n     String resourceAsString = \"{\\\"metadata\\\":{\\\"name\\\":\\\"myresource\\\",\\\"namespace\\\":\\\"myns\\\"}, \\\"kind\\\":\\\"raw\\\", \\\"apiVersion\\\":\\\"v1\\\"}\";\n     ArgumentCaptor<Request> captor = ArgumentCaptor.forClass(Request.class);\n \n+    Call mockCall = mock(Call.class);\n+    Response mockErrorResponse = mockResponse(500);\n+    Response mockConflictResponse = mockResponse(409);\n+    when(mockCall.execute())\n+      .thenReturn(mockErrorResponse, mockConflictResponse, mockSuccessResponse);\n+    when(mockClient.newCall(any())).thenReturn(mockCall);\n+\n     // When\n+    try {\n+      rawCustomResourceOperations.createOrReplace(resourceAsString);\n+      fail(\"expected first call to createOrReplace to throw exception due to 500 response\");\n+    } catch (KubernetesClientException e) {\n+      assertEquals(500, e.getCode());\n+    }\n     rawCustomResourceOperations.createOrReplace(resourceAsString);\n     rawCustomResourceOperations.createOrReplace(\"myns\", resourceAsString);\n \n     // Then\n-    verify(mockClient, times(2)).newCall(captor.capture());\n-    assertEquals(2, captor.getAllValues().size());\n+    verify(mockClient, times(4)).newCall(captor.capture());\n+    assertEquals(4, captor.getAllValues().size());\n     assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(0).url().encodedPath());\n-    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(0).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos\", captor.getAllValues().get(1).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(1).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/hellos/myresource\", captor.getAllValues().get(2).url().encodedPath());\n+    assertEquals(\"PUT\", captor.getAllValues().get(2).method());\n+    assertEquals(\"/apis/test.fabric8.io/v1alpha1/namespaces/myns/hellos\", captor.getAllValues().get(3).url().encodedPath());\n+    assertEquals(\"POST\", captor.getAllValues().get(3).method());\n+  }\n+\n+  private Response mockResponse(int code) {\n+    Response mockResponse = mock(Response.class);\n+    when(mockResponse.isSuccessful()).thenReturn(code < 400);", "originalCommit": "5360e896dc773a0bdcffe892e80b376c741cabe0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwODM1NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2289#discussion_r440908354", "bodyText": "Instead I updated to just build a Response object directly so we can re-use the internal isSuccessful method which does this comparison for us. I updated the other codes to use HttpURLConnection though.", "author": "bbeaudreault", "createdAt": "2020-06-16T14:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NDc1Nw=="}], "type": "inlineReview"}, {"oid": "646531ebfbbd0925fda0e0c23e87faed480e2cae", "url": "https://github.com/fabric8io/kubernetes-client/commit/646531ebfbbd0925fda0e0c23e87faed480e2cae", "message": "Update createOrReplace to properly propagate non-conflict exceptions", "committedDate": "2020-06-16T15:56:32Z", "type": "forcePushed"}, {"oid": "1fb9e2b68b7493b89d7982627cc1eebbddfbd6f4", "url": "https://github.com/fabric8io/kubernetes-client/commit/1fb9e2b68b7493b89d7982627cc1eebbddfbd6f4", "message": "Update createOrReplace to properly propagate non-conflict exceptions", "committedDate": "2020-06-17T15:46:21Z", "type": "forcePushed"}, {"oid": "38f6ec4946c639090ccd17007e461a2fdb7f7b86", "url": "https://github.com/fabric8io/kubernetes-client/commit/38f6ec4946c639090ccd17007e461a2fdb7f7b86", "message": "Update createOrReplace to properly propagate non-conflict exceptions", "committedDate": "2020-06-17T15:48:54Z", "type": "commit"}, {"oid": "38f6ec4946c639090ccd17007e461a2fdb7f7b86", "url": "https://github.com/fabric8io/kubernetes-client/commit/38f6ec4946c639090ccd17007e461a2fdb7f7b86", "message": "Update createOrReplace to properly propagate non-conflict exceptions", "committedDate": "2020-06-17T15:48:54Z", "type": "forcePushed"}]}