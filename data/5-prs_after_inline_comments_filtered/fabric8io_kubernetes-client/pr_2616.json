{"pr_number": 2616, "pr_title": "refactor: Watcher.onClose has dedicated WatcherException as parameter.", "pr_createdAt": "2020-11-20T14:05:46Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2616", "timeline": [{"oid": "23418cb065914bb981d4675813b44748d796e017", "url": "https://github.com/fabric8io/kubernetes-client/commit/23418cb065914bb981d4675813b44748d796e017", "message": "refactor: Watcher.onClose has dedicated WatcherException as parameter.", "committedDate": "2020-11-20T14:41:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxOTc3NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527719774", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getCause() instanceof KubernetesClientException ?\n          \n          \n            \n                return cause instanceof KubernetesClientException ?", "author": "metacosm", "createdAt": "2020-11-20T14:16:22Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/WatcherException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client;\n+\n+import java.net.HttpURLConnection;\n+\n+public class WatcherException extends Exception {\n+\n+  public WatcherException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public WatcherException(String message) {\n+    super(message);\n+  }\n+\n+  public KubernetesClientException asClientException() {\n+    final Throwable cause = getCause();\n+    return getCause() instanceof KubernetesClientException ?", "originalCommit": "4b1a3c2a58f014c14ca086c78955038af28225b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMzQyMA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527723420", "bodyText": "Why did you make this method final?", "author": "metacosm", "createdAt": "2020-11-20T14:21:19Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/AbstractWatchManager.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client.dsl.internal;\n+\n+import io.fabric8.kubernetes.api.model.ListOptions;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.WatcherException;\n+import okhttp3.OkHttpClient;\n+import okhttp3.WebSocket;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractWatchManager<T> implements Watch {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(AbstractWatchManager.class);\n+\n+  final Watcher<T> watcher;\n+  final int reconnectLimit;\n+  final int reconnectInterval;\n+  final int maxIntervalExponent;\n+  final ListOptions listOptions;\n+  final AtomicReference<String> resourceVersion;\n+  final OkHttpClient clonedClient;\n+\n+  private final AtomicBoolean forceClosed;\n+\n+  public AbstractWatchManager(\n+    Watcher<T> watcher, ListOptions listOptions, int reconnectLimit, int reconnectInterval, int maxIntervalExponent,\n+    OkHttpClient clonedClient\n+  ) {\n+    this.watcher = watcher;\n+    this.listOptions = listOptions;\n+    this.reconnectLimit = reconnectLimit;\n+    this.reconnectInterval = reconnectInterval;\n+    this.maxIntervalExponent = maxIntervalExponent;\n+    this.clonedClient = clonedClient;\n+    this.resourceVersion = new AtomicReference<>(listOptions.getResourceVersion());\n+    this.forceClosed = new AtomicBoolean();\n+  }\n+\n+  final void closeEvent(WatcherException cause) {", "originalCommit": "4b1a3c2a58f014c14ca086c78955038af28225b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4Mzk1NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527783955", "bodyText": "It's a helper method only used by the *Manager implementations. I'm still working on that, but this method is not supposed to be called from the outside neither improved.\nAs I said, I'm trying to move as much as possible from the vaious *Managers to this class, but it's a WIP.", "author": "manusa", "createdAt": "2020-11-20T15:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMzQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNjMxMg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527726312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(410, cause.asClientException().getCode());\n          \n          \n            \n                    assertTrue(410, cause.isHttpGone());", "author": "metacosm", "createdAt": "2020-11-20T14:25:52Z", "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/WatchTest.java", "diffHunk": "@@ -86,8 +87,8 @@ public void eventReceived(Action action, Pod resource) {\n       }\n \n       @Override\n-      public void onClose(KubernetesClientException cause) {\n-        assertEquals(410, cause.getCode());\n+      public void onClose(WatcherException cause) {\n+        assertEquals(410, cause.asClientException().getCode());", "originalCommit": "4b1a3c2a58f014c14ca086c78955038af28225b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNzUzMw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527727533", "bodyText": "I don't understand why it's Http but URL\u2026\u00a0\ud83e\udd26 \ud83d\ude00", "author": "metacosm", "createdAt": "2020-11-20T14:27:31Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/WatcherException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client;\n+\n+import java.net.HttpURLConnection;\n+\n+public class WatcherException extends Exception {\n+\n+  public WatcherException(String message, Throwable cause) {\n+    super(message, cause);\n+  }\n+\n+  public WatcherException(String message) {\n+    super(message);\n+  }\n+\n+  public KubernetesClientException asClientException() {\n+    final Throwable cause = getCause();\n+    return getCause() instanceof KubernetesClientException ?\n+      (KubernetesClientException) cause : new KubernetesClientException(getMessage(), cause);\n+  }\n+\n+  public boolean isHttpGone() {\n+    final KubernetesClientException cause = asClientException();\n+    return cause.getCode() == HttpURLConnection.HTTP_GONE", "originalCommit": "4b1a3c2a58f014c14ca086c78955038af28225b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyOTkwOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527829908", "bodyText": "I don't think that this addresses the issue because very often what triggers the call to close here is an exception, which is still not propagated in that case.", "author": "metacosm", "createdAt": "2020-11-20T16:59:59Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/WatchConnectionManager.java", "diffHunk": "@@ -331,7 +331,7 @@ public void waitUntilReady() {\n   @Override\n   public void close() {\n     logger.debug(\"Force closing the watch {}\", this);\n-    closeEvent(null);\n+    closeEvent();", "originalCommit": "779e32c6196f3faca61d37eef2a979b1053bba4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzNTIwOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r527835208", "bodyText": "I really don't see how an Exception will trigger this close since this method will most probably be called by try-with-resources Closable.\nIn the event of an Exception triggering this close, the client would also be aware of the Exception via the catch block.\nDo you have any code which shows this \"because very often what triggers the call to close here is an exception\" so I can understand better?", "author": "manusa", "createdAt": "2020-11-20T17:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyOTkwOA=="}], "type": "inlineReview"}, {"oid": "be93de81f515127cc0b57a727b20782cad50208d", "url": "https://github.com/fabric8io/kubernetes-client/commit/be93de81f515127cc0b57a727b20782cad50208d", "message": "wip: Watcher has dedicated close for exceptions and graceful close", "committedDate": "2020-11-20T17:11:56Z", "type": "forcePushed"}, {"oid": "94ad9e4a0dff5f040733925670b16e832e5d5ef1", "url": "https://github.com/fabric8io/kubernetes-client/commit/94ad9e4a0dff5f040733925670b16e832e5d5ef1", "message": "wip: Watcher has dedicated close for exceptions and graceful close", "committedDate": "2020-11-23T09:53:00Z", "type": "forcePushed"}, {"oid": "4b9c7772164a157cbd072893377a2e23294731b8", "url": "https://github.com/fabric8io/kubernetes-client/commit/4b9c7772164a157cbd072893377a2e23294731b8", "message": "wip: Watcher has dedicated close for exceptions and graceful close", "committedDate": "2020-11-23T10:22:55Z", "type": "forcePushed"}, {"oid": "accdf0b70f3631d590c550f003e4a0c587a3ddd0", "url": "https://github.com/fabric8io/kubernetes-client/commit/accdf0b70f3631d590c550f003e4a0c587a3ddd0", "message": "wip: Refactored common parts out of AbstractWatchManager implementations", "committedDate": "2020-11-23T12:44:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNjM0Ng==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2616#discussion_r528806346", "bodyText": "Output target API URL instead of rather useless manager object reference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.debug(\"Connecting websocket ... {}\", this);\n          \n          \n            \n                logger.debug(\"Connecting websocket to {}...\", requestURL);", "author": "metacosm", "createdAt": "2020-11-23T15:54:24Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/WatchConnectionManager.java", "diffHunk": "@@ -107,7 +85,7 @@ public WatchConnectionManager(final OkHttpClient client, final BaseOperation<T,\n     this(client, baseOperation, listOptions, watcher, reconnectInterval, reconnectLimit, websocketTimeout, 5);\n   }\n \n-  private final void runWatch() {\n+  private void runWatch() {\n     logger.debug(\"Connecting websocket ... {}\", this);", "originalCommit": "accdf0b70f3631d590c550f003e4a0c587a3ddd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bddc79e8c04551737dc4565d81f92e5450d15aa5", "url": "https://github.com/fabric8io/kubernetes-client/commit/bddc79e8c04551737dc4565d81f92e5450d15aa5", "message": "refactor: Watcher.onClose has dedicated WatcherException as parameter.", "committedDate": "2020-11-23T15:59:45Z", "type": "commit"}, {"oid": "1dbb5636820340c9e6417406eaba94d7c263b31e", "url": "https://github.com/fabric8io/kubernetes-client/commit/1dbb5636820340c9e6417406eaba94d7c263b31e", "message": "refactor: Watcher has dedicated close for exceptions and graceful close", "committedDate": "2020-11-23T15:59:45Z", "type": "commit"}, {"oid": "eac6826942e002a485666c12bf1d4b3d18edbd35", "url": "https://github.com/fabric8io/kubernetes-client/commit/eac6826942e002a485666c12bf1d4b3d18edbd35", "message": "refactor: Refactored common parts out of AbstractWatchManager implementations", "committedDate": "2020-11-23T15:59:45Z", "type": "commit"}, {"oid": "47439b684672ad94ce6970c00e61346428801ed1", "url": "https://github.com/fabric8io/kubernetes-client/commit/47439b684672ad94ce6970c00e61346428801ed1", "message": "refactor: PR second pass suggestions", "committedDate": "2020-11-23T15:59:45Z", "type": "commit"}, {"oid": "47439b684672ad94ce6970c00e61346428801ed1", "url": "https://github.com/fabric8io/kubernetes-client/commit/47439b684672ad94ce6970c00e61346428801ed1", "message": "refactor: PR second pass suggestions", "committedDate": "2020-11-23T15:59:45Z", "type": "forcePushed"}]}