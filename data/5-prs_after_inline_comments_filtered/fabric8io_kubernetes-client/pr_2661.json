{"pr_number": 2661, "pr_title": "Improve Custom Resource handling", "pr_createdAt": "2020-12-11T23:16:39Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2661", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0NzUyNw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r542147527", "bodyText": "I think version.value() might produce NullPointerEception here in case only ApiGroup annotation is provided.", "author": "manusa", "createdAt": "2020-12-14T06:46:46Z", "path": "kubernetes-model-generator/kubernetes-model-core/src/main/java/io/fabric8/kubernetes/api/model/HasMetadata.java", "diffHunk": "@@ -36,9 +39,21 @@\n   \n   void setMetadata(ObjectMeta metadata);\n   \n-  String getKind();\n+  default String getKind() {\n+    final Class<? extends HasMetadata> clazz = getClass();\n+    final Kind kind = clazz.getAnnotation(Kind.class);\n+    return kind != null ? kind.value() : clazz.getSimpleName();\n+  }\n   \n-  String getApiVersion();\n+  default String getApiVersion() {\n+    final Class<? extends HasMetadata> clazz = getClass();\n+    final ApiGroup group = clazz.getAnnotation(ApiGroup.class);\n+    if (group != null) {\n+      final ApiVersion version = clazz.getAnnotation(ApiVersion.class);\n+      return group.value() + \"/\" + version.value();", "originalCommit": "49bc87c9f5c8776a0e9908d9f1e24e9142d6258b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4MDI4OA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r542180288", "bodyText": "Good catch!", "author": "metacosm", "createdAt": "2020-12-14T08:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0NzUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0ODE3Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r542148173", "bodyText": "I feel this logic with side-effects in a getter method can bring serious consequences in the future.\nDoes it make sense to move the \"initialization-by-annotation\" procedures to the constructor?", "author": "manusa", "createdAt": "2020-12-14T06:48:24Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java", "diffHunk": "@@ -15,60 +15,92 @@\n  */\n package io.fabric8.kubernetes.client;\n \n+import java.util.Locale;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.Namespaced;\n import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.client.utils.ApiVersionUtil;\n+import io.fabric8.kubernetes.client.utils.Pluralize;\n+import io.fabric8.kubernetes.client.utils.Utils;\n+import io.fabric8.kubernetes.model.annotation.Plural;\n import io.sundr.builder.annotations.Buildable;\n import lombok.ToString;\n \n+import static io.fabric8.kubernetes.client.utils.Utils.isNullOrEmpty;\n+\n /**\n  * A base class for implementing a custom resource kind\n  */\n @JsonDeserialize(\n-    using = JsonDeserializer.None.class\n+  using = JsonDeserializer.None.class\n )\n @ToString\n @Buildable(builderPackage = \"io.fabric8.kubernetes.api.builder\", editableEnabled = false)\n public abstract class CustomResource implements HasMetadata {\n+  public static final String NAMESPACE_SCOPE = \"Namespaced\";\n+  public static final String CLUSTER_SCOPE = \"Cluster\";\n+  private ObjectMeta metadata = new ObjectMeta();\n+  \n+  @JsonIgnore\n+  private String plural;\n+  \n+  @JsonIgnore\n+  private String crdName;\n+  \n   private String kind;\n   private String apiVersion;\n-  private ObjectMeta metadata = new ObjectMeta();\n-\n+  private final String scope;\n+  \n   public CustomResource() {\n-    this.kind = getClass().getSimpleName();\n-  }\n-\n-  public CustomResource(String kind) {\n-    this.kind = kind;\n+    scope = this instanceof Namespaced ? NAMESPACE_SCOPE : CLUSTER_SCOPE;\n   }\n-\n+  \n   @Override\n   public String toString() {\n     return \"CustomResource{\" +\n-        \"kind='\" + kind + '\\'' +\n-        \", apiVersion='\" + apiVersion + '\\'' +\n-        \", metadata=\" + metadata +\n-        '}';\n-  }\n-\n-  @Override\n-  public String getKind() {\n-    return kind;\n-  }\n-\n-  public void setKind(String kind) {\n-    this.kind = kind;\n+      \"kind='\" + getKind() + '\\'' +\n+      \", apiVersion='\" + getApiVersion() + '\\'' +\n+      \", metadata=\" + metadata +\n+      '}';\n   }\n-\n+  \n   @Override\n   public String getApiVersion() {\n+    if (apiVersion == null) {\n+      final String apiVersion = HasMetadata.super.getApiVersion();\n+      if (isNullOrEmpty(apiVersion)) {\n+        throw new IllegalArgumentException(getClass().getName() + \" CustomResource must provide an API version using @ApiGroup and @ApiVersion annotations\");\n+      }\n+      this.apiVersion = apiVersion;", "originalCommit": "49bc87c9f5c8776a0e9908d9f1e24e9142d6258b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE4MTc5NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r542181795", "bodyText": "I originally had most of the code in the constructor but had issues with deserialization where the no-arg constructor would fail\u2026\u00a0I will double check as I might have missed things.", "author": "metacosm", "createdAt": "2020-12-14T08:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0ODE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE5MDIyNw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r542190227", "bodyText": "This is exactly the kind of problem we might face. Since this method is invoked upon serialization, it's possible that we end up with non-deterministic behaviors.\nThe empty-args constructor should be calling the all-args constructor.", "author": "manusa", "createdAt": "2020-12-14T08:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0ODE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MDYxOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r542240618", "bodyText": "Putting the code in the constructor doesn't work because when you create a CR from CustomResourceBuilder, there's no annotation. Checking for null in the getter before doing anything should ensure that if the version has already been set (i.e. in a deserialization context), we don't check the annotation.\nThe possible solution is to not throw an exception if no annotation is provided\u2026 I agree, though, that we should avoid side-effects in getters.", "author": "metacosm", "createdAt": "2020-12-14T09:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0ODE3Mw=="}], "type": "inlineReview"}, {"oid": "44bf0254661b44dc8a0a291106977f07399fb6bc", "url": "https://github.com/fabric8io/kubernetes-client/commit/44bf0254661b44dc8a0a291106977f07399fb6bc", "message": "fix: add missing annotations", "committedDate": "2020-12-14T21:51:57Z", "type": "forcePushed"}, {"oid": "652be6fbf62823bc9d5b03b75c7d45bacff068f6", "url": "https://github.com/fabric8io/kubernetes-client/commit/652be6fbf62823bc9d5b03b75c7d45bacff068f6", "message": "feat: initial stab at improving custom resource handling", "committedDate": "2020-12-15T12:24:35Z", "type": "commit"}, {"oid": "5fd2bfdd129f0938faac2084197625f5987dedd5", "url": "https://github.com/fabric8io/kubernetes-client/commit/5fd2bfdd129f0938faac2084197625f5987dedd5", "message": "fix: licenses", "committedDate": "2020-12-15T12:24:43Z", "type": "commit"}, {"oid": "28716d3d21ee17b4e9991f09af833203b9a7c08b", "url": "https://github.com/fabric8io/kubernetes-client/commit/28716d3d21ee17b4e9991f09af833203b9a7c08b", "message": "fix: set version & group in constructor, do not fail if not provided", "committedDate": "2020-12-15T12:24:43Z", "type": "commit"}, {"oid": "5520e7bf453ec7486bfd7e74f0cc2678d067a1b9", "url": "https://github.com/fabric8io/kubernetes-client/commit/5520e7bf453ec7486bfd7e74f0cc2678d067a1b9", "message": "fix: avoid NPE, check that either none or both annotations are provided", "committedDate": "2020-12-15T12:24:43Z", "type": "commit"}, {"oid": "30fb1ee3f129c0e8e47cf663fb46ece5d7fa83a4", "url": "https://github.com/fabric8io/kubernetes-client/commit/30fb1ee3f129c0e8e47cf663fb46ece5d7fa83a4", "message": "fix: set api version/kind in constructor and make final", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "59c8e93d913352a0f5b2d260532d9726941dca6f", "url": "https://github.com/fabric8io/kubernetes-client/commit/59c8e93d913352a0f5b2d260532d9726941dca6f", "message": "feat: optimize things a little", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "f5bfde58512f5cd385a99616c5e2b5b3c09bc2d2", "url": "https://github.com/fabric8io/kubernetes-client/commit/f5bfde58512f5cd385a99616c5e2b5b3c09bc2d2", "message": "fix: properly annotate CR implementations", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "776093dda96ca237abc57d7d7dd7723792b869d8", "url": "https://github.com/fabric8io/kubernetes-client/commit/776093dda96ca237abc57d7d7dd7723792b869d8", "message": "feat: generify CustomResource", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "0cf2dba145d87ab9e588ed3e8a14bcfba7ef3164", "url": "https://github.com/fabric8io/kubernetes-client/commit/0cf2dba145d87ab9e588ed3e8a14bcfba7ef3164", "message": "fix: mark non-properties getters as to be ignored by Jackson", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "c1f8cc79011be8e18718a18dceb46aa7d80ef25e", "url": "https://github.com/fabric8io/kubernetes-client/commit/c1f8cc79011be8e18718a18dceb46aa7d80ef25e", "message": "fix: use proper group and version", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "f328e2b06a2e065930adfc3c244485293763c6d0", "url": "https://github.com/fabric8io/kubernetes-client/commit/f328e2b06a2e065930adfc3c244485293763c6d0", "message": "fix: add property ordering", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "3c2c4840a1667d204cbc68f44ba91a050028625e", "url": "https://github.com/fabric8io/kubernetes-client/commit/3c2c4840a1667d204cbc68f44ba91a050028625e", "message": "fix: add missing annotations", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "eff30a339a8c2786b8cca15d0e4c10ebed46d068", "url": "https://github.com/fabric8io/kubernetes-client/commit/eff30a339a8c2786b8cca15d0e4c10ebed46d068", "message": "fix: tests and typos", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "b5bc012821e4c27c8b56cd33d93a0edf55e1f3ec", "url": "https://github.com/fabric8io/kubernetes-client/commit/b5bc012821e4c27c8b56cd33d93a0edf55e1f3ec", "message": "refactor: clean-up", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "eeea80b2086d9ee5d60984c373f1f64d6023032a", "url": "https://github.com/fabric8io/kubernetes-client/commit/eeea80b2086d9ee5d60984c373f1f64d6023032a", "message": "feat: extract static versions of property computations for reuse purpose", "committedDate": "2020-12-15T12:24:44Z", "type": "commit"}, {"oid": "ef64207f7644f212dd449191056a103a61a7be7b", "url": "https://github.com/fabric8io/kubernetes-client/commit/ef64207f7644f212dd449191056a103a61a7be7b", "message": "feat: add crdFromCustomResourceType to create a CRD builder from CR type", "committedDate": "2020-12-15T12:27:34Z", "type": "commit"}, {"oid": "0b048850768db79789bbd8ceec4f265aaea1c382", "url": "https://github.com/fabric8io/kubernetes-client/commit/0b048850768db79789bbd8ceec4f265aaea1c382", "message": "refactor: simplify CRD creation examples", "committedDate": "2020-12-15T12:27:40Z", "type": "commit"}, {"oid": "a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "url": "https://github.com/fabric8io/kubernetes-client/commit/a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "message": "fix: license", "committedDate": "2020-12-15T12:27:40Z", "type": "commit"}, {"oid": "a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "url": "https://github.com/fabric8io/kubernetes-client/commit/a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "message": "fix: license", "committedDate": "2020-12-15T12:27:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MDI5NA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543340294", "bodyText": "Would a log.warn make sense here?", "author": "manusa", "createdAt": "2020-12-15T13:28:27Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java", "diffHunk": "@@ -15,60 +15,101 @@\n  */\n package io.fabric8.kubernetes.client;\n \n+import java.util.Locale;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.Namespaced;\n import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.client.utils.ApiVersionUtil;\n+import io.fabric8.kubernetes.client.utils.Pluralize;\n+import io.fabric8.kubernetes.model.annotation.Plural;\n+import io.fabric8.kubernetes.model.annotation.Singular;\n import io.sundr.builder.annotations.Buildable;\n-import lombok.ToString;\n+\n+import static io.fabric8.kubernetes.client.utils.Utils.isNullOrEmpty;\n \n /**\n  * A base class for implementing a custom resource kind\n  */\n @JsonDeserialize(\n-    using = JsonDeserializer.None.class\n+  using = JsonDeserializer.None.class\n )\n-@ToString\n+@JsonPropertyOrder({\n+  \"apiVersion\",\n+  \"kind\",\n+  \"metadata\",\n+  \"spec\",\n+  \"status\"\n+})\n @Buildable(builderPackage = \"io.fabric8.kubernetes.api.builder\", editableEnabled = false)\n-public abstract class CustomResource implements HasMetadata {\n-  private String kind;\n-  private String apiVersion;\n+public abstract class CustomResource<Spec extends KubernetesResource, Status extends KubernetesResource> implements HasMetadata {\n+  public static final String NAMESPACE_SCOPE = \"Namespaced\";\n+  public static final String CLUSTER_SCOPE = \"Cluster\";\n   private ObjectMeta metadata = new ObjectMeta();\n \n+  @JsonProperty(\"spec\")\n+  private Spec spec;\n+  \n+  @JsonProperty(\"status\")\n+  private Status status;\n+  \n+  @JsonIgnore\n+  private String plural;\n+  \n+  @JsonIgnore\n+  private String singular;\n+  \n+  @JsonIgnore\n+  private String crdName;\n+  \n+  private final String kind;\n+  private final String apiVersion;\n+  private final String scope;\n+  \n   public CustomResource() {\n-    this.kind = getClass().getSimpleName();\n+    final String version = HasMetadata.super.getApiVersion();\n+    if (isNullOrEmpty(version)) {\n+      throw new IllegalArgumentException(getClass().getName() + \" CustomResource must provide an API version using @ApiGroup and @ApiVersion annotations\");\n+    }\n+    this.apiVersion = version;\n+    this.kind = HasMetadata.super.getKind();\n+    scope = this instanceof Namespaced ? NAMESPACE_SCOPE : CLUSTER_SCOPE;\n   }\n-\n-  public CustomResource(String kind) {\n-    this.kind = kind;\n-  }\n-\n+  \n   @Override\n   public String toString() {\n     return \"CustomResource{\" +\n-        \"kind='\" + kind + '\\'' +\n-        \", apiVersion='\" + apiVersion + '\\'' +\n-        \", metadata=\" + metadata +\n-        '}';\n-  }\n-\n-  @Override\n-  public String getKind() {\n-    return kind;\n+      \"kind='\" + getKind() + '\\'' +\n+      \", apiVersion='\" + getApiVersion() + '\\'' +\n+      \", metadata=\" + metadata +\n+      \", spec=\" + spec +\n+      \", status=\" + status +\n+      '}';\n   }\n-\n-  public void setKind(String kind) {\n-    this.kind = kind;\n-  }\n-\n+  \n   @Override\n   public String getApiVersion() {\n     return apiVersion;\n   }\n-\n+  \n   @Override\n-  public void setApiVersion(String apiVersion) {\n-    this.apiVersion = apiVersion;\n+  public void setApiVersion(String version) {\n+    // already set in constructor", "originalCommit": "a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MzcyNA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543343724", "bodyText": "This test is explicit to verify that the arbitrary dashes in the names won't break the MockServer. It shouldn't be refactored.", "author": "manusa", "createdAt": "2020-12-15T13:33:05Z", "path": "kubernetes-tests/src/test/java/io/fabric8/kubernetes/client/mock/CustomResourceCrud1109Test.java", "diffHunk": "@@ -41,7 +41,7 @@\n \n   @BeforeEach\n   void setUp() {\n-    customResourceDefinition = server.getClient().apiextensions().v1beta1().customResourceDefinitions()\n+    /*customResourceDefinition = server.getClient().apiextensions().v1beta1().customResourceDefinitions()", "originalCommit": "a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NTY3Nw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543365677", "bodyText": "OK but it should still use the dashes in the CR name. I can revert it if needed.", "author": "metacosm", "createdAt": "2020-12-15T14:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MzcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4NDE2Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543384163", "bodyText": "dashes are intended to be in the CRD (specifically in the plural names).\nThis is to verify that the crud mock server stores any created CR with a valid key.\nIt's better and clearer to keep the complete CRD definition within the test suite so that in a single view this is understood. However, I'll probably add an extra check to verify that the \"dashed\" path is preserved.", "author": "manusa", "createdAt": "2020-12-15T14:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MzcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1MjMyNQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543452325", "bodyText": "Sorry, after re-checking the code, indeed it wasn't doing what it was supposed to\u2026\u00a0\ud83d\ude04\nI've changed it using @Singular and added more checks to verify that the generated CRD has indeed the desired properties.", "author": "metacosm", "createdAt": "2020-12-15T15:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0MzcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjU4OQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543346589", "bodyText": "Please use single letters for generic types I almost went crazy trying to figure out where the Status class was.", "author": "manusa", "createdAt": "2020-12-15T13:37:20Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java", "diffHunk": "@@ -15,60 +15,101 @@\n  */\n package io.fabric8.kubernetes.client;\n \n+import java.util.Locale;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.KubernetesResource;\n+import io.fabric8.kubernetes.api.model.Namespaced;\n import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.client.utils.ApiVersionUtil;\n+import io.fabric8.kubernetes.client.utils.Pluralize;\n+import io.fabric8.kubernetes.model.annotation.Plural;\n+import io.fabric8.kubernetes.model.annotation.Singular;\n import io.sundr.builder.annotations.Buildable;\n-import lombok.ToString;\n+\n+import static io.fabric8.kubernetes.client.utils.Utils.isNullOrEmpty;\n \n /**\n  * A base class for implementing a custom resource kind\n  */\n @JsonDeserialize(\n-    using = JsonDeserializer.None.class\n+  using = JsonDeserializer.None.class\n )\n-@ToString\n+@JsonPropertyOrder({\n+  \"apiVersion\",\n+  \"kind\",\n+  \"metadata\",\n+  \"spec\",\n+  \"status\"\n+})\n @Buildable(builderPackage = \"io.fabric8.kubernetes.api.builder\", editableEnabled = false)\n-public abstract class CustomResource implements HasMetadata {\n-  private String kind;\n-  private String apiVersion;\n+public abstract class CustomResource<Spec extends KubernetesResource, Status extends KubernetesResource> implements HasMetadata {", "originalCommit": "a1766def53f1b7eb5e1f0d9d7872d61d027c2184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2Nzg1NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543367855", "bodyText": "Will do. I was a little skeptical of the Sonar rule but apparently it is indeed a problem. My IDE shows the parameters quite well\u2026", "author": "metacosm", "createdAt": "2020-12-15T14:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3MzE2MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543373161", "bodyText": "\ud83d\ude05 I literally had to checkout your branch to understand what was going on.\nI was afraid that some sort of Status class was introduced in this PR which is what triggered my alarm in the first place.\nAfter searching through the PR files several times with two browsers and going nuts while yelling at the GitHub web interface I ended up checking in my IDE and was then when I realized the problem \ud83d\ude05 \ud83d\ude05 \ud83d\ude05", "author": "manusa", "createdAt": "2020-12-15T14:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1MjgzMA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543452830", "bodyText": "\ud83d\ude30\nSorry about that. Fixed now.", "author": "metacosm", "createdAt": "2020-12-15T15:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjU4OQ=="}], "type": "inlineReview"}, {"oid": "13eec87641bdd57c80cef7ce3fa62573f5903071", "url": "https://github.com/fabric8io/kubernetes-client/commit/13eec87641bdd57c80cef7ce3fa62573f5903071", "message": "fix: change parameter type names to conform to recommendations", "committedDate": "2020-12-15T15:23:08Z", "type": "commit"}, {"oid": "64765d9a93deaf27c52fb88a1379d358055b63ab", "url": "https://github.com/fabric8io/kubernetes-client/commit/64765d9a93deaf27c52fb88a1379d358055b63ab", "message": "chore: remove unused imports", "committedDate": "2020-12-15T15:26:18Z", "type": "commit"}, {"oid": "ee9318c5e6b2ffdfbf027e4cf14cfb89f671431e", "url": "https://github.com/fabric8io/kubernetes-client/commit/ee9318c5e6b2ffdfbf027e4cf14cfb89f671431e", "message": "chore: clean-ups", "committedDate": "2020-12-15T15:32:36Z", "type": "commit"}, {"oid": "1de13d458c7c4f589a8a21e6f0403f63cc397832", "url": "https://github.com/fabric8io/kubernetes-client/commit/1de13d458c7c4f589a8a21e6f0403f63cc397832", "message": "fix: make sure CRD has a dash in name, add checks", "committedDate": "2020-12-15T15:33:29Z", "type": "commit"}, {"oid": "8267db745b0e1f35d2a4f2c10472649df75983e2", "url": "https://github.com/fabric8io/kubernetes-client/commit/8267db745b0e1f35d2a4f2c10472649df75983e2", "message": "feat: add warning when calling no-op setKind/setApiVersion", "committedDate": "2020-12-15T15:41:27Z", "type": "commit"}, {"oid": "45d65ccc959744574c54f93587c1b2881d9bbb4a", "url": "https://github.com/fabric8io/kubernetes-client/commit/45d65ccc959744574c54f93587c1b2881d9bbb4a", "message": "chore: remove unused import", "committedDate": "2020-12-15T15:47:32Z", "type": "commit"}, {"oid": "34c04087f8dfbb80d495173bd452623b34ef2421", "url": "https://github.com/fabric8io/kubernetes-client/commit/34c04087f8dfbb80d495173bd452623b34ef2421", "message": "doc: add description of changes", "committedDate": "2020-12-15T15:54:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5NzU4NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543497585", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : HasMetadata.getKind(clazz)).toLowerCase(Locale.ROOT);\n          \n          \n            \n                return (fromAnnotation != null ? fromAnnotation.value() : HasMetadata.getKind(clazz)).toLowerCase(Locale.ROOT);", "author": "manusa", "createdAt": "2020-12-15T16:32:39Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java", "diffHunk": "@@ -80,4 +127,85 @@ public ObjectMeta getMetadata() {\n   public void setMetadata(ObjectMeta metadata) {\n     this.metadata = metadata;\n   }\n+  \n+  \n+  public static String getPlural(Class<? extends CustomResource> clazz) {\n+    final Plural fromAnnotation = clazz.getAnnotation(Plural.class);\n+    return (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : Pluralize.toPlural(getSingular(clazz)));\n+  }\n+  \n+  @JsonIgnore\n+  public String getPlural() {\n+    if(plural == null) {\n+      final Plural fromAnnotation = getClass().getAnnotation(Plural.class);\n+      this.plural = (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : Pluralize.toPlural(getSingular()));\n+    }\n+    return plural;\n+  }\n+  \n+  public static String getSingular(Class<? extends CustomResource> clazz) {\n+    final Singular fromAnnotation = clazz.getAnnotation(Singular.class);\n+    return (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : HasMetadata.getKind(clazz)).toLowerCase(Locale.ROOT);", "originalCommit": "34c04087f8dfbb80d495173bd452623b34ef2421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMTc0Nw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543531747", "bodyText": "Shouldn't we make sure that the provided value is lower-cased?", "author": "metacosm", "createdAt": "2020-12-15T17:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5NzU4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU5NjI0NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543596245", "bodyText": "It's lowercased. I think that parentheses are confusing \ud83d\ude09", "author": "manusa", "createdAt": "2020-12-15T18:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5NzU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5Nzg5Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543497893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  this.singular = (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : getKind()).toLowerCase(Locale.ROOT);\n          \n          \n            \n                  this.singular = (fromAnnotation != null ? fromAnnotation.value() : getKind()).toLowerCase(Locale.ROOT);", "author": "manusa", "createdAt": "2020-12-15T16:33:01Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java", "diffHunk": "@@ -80,4 +127,85 @@ public ObjectMeta getMetadata() {\n   public void setMetadata(ObjectMeta metadata) {\n     this.metadata = metadata;\n   }\n+  \n+  \n+  public static String getPlural(Class<? extends CustomResource> clazz) {\n+    final Plural fromAnnotation = clazz.getAnnotation(Plural.class);\n+    return (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : Pluralize.toPlural(getSingular(clazz)));\n+  }\n+  \n+  @JsonIgnore\n+  public String getPlural() {\n+    if(plural == null) {\n+      final Plural fromAnnotation = getClass().getAnnotation(Plural.class);\n+      this.plural = (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : Pluralize.toPlural(getSingular()));\n+    }\n+    return plural;\n+  }\n+  \n+  public static String getSingular(Class<? extends CustomResource> clazz) {\n+    final Singular fromAnnotation = clazz.getAnnotation(Singular.class);\n+    return (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : HasMetadata.getKind(clazz)).toLowerCase(Locale.ROOT);\n+  }\n+  \n+  @JsonIgnore\n+  public String getSingular() {\n+    if(singular == null) {\n+      final Singular fromAnnotation = getClass().getAnnotation(Singular.class);\n+      this.singular = (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : getKind()).toLowerCase(Locale.ROOT);", "originalCommit": "34c04087f8dfbb80d495173bd452623b34ef2421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5OTkwNQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r543499905", "bodyText": "Please remove commented block (unless there's a reason to keep this here)", "author": "manusa", "createdAt": "2020-12-15T16:35:36Z", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/dsl/internal/CustomResourceOperationsImplTest.java", "diffHunk": "@@ -28,43 +27,51 @@\n import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n import io.fabric8.kubernetes.internal.KubernetesDeserializer;\n \n+import io.fabric8.kubernetes.model.annotation.ApiGroup;\n+import io.fabric8.kubernetes.model.annotation.ApiVersion;\n import org.junit.jupiter.api.Test;\n \n import com.fasterxml.jackson.core.JsonFactory;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.MappingJsonFactory;\n \n import static org.hamcrest.core.IsInstanceOf.instanceOf;\n-import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n \n public class CustomResourceOperationsImplTest {\n \n+  @ApiGroup(MyCustomResource.GROUP)\n+  @ApiVersion(MyCustomResource.VERSION)\n   public static class MyCustomResource extends CustomResource {\n+    public static final String GROUP = \"custom.group\";\n+    public static final String VERSION = \"v1alpha1\";\n   }\n \n   public static class MyCustomResourceList extends CustomResourceList<MyCustomResource> {\n   }\n   \n+  @ApiGroup(\"sample.fabric8.io\")\n+  @ApiVersion(\"v1\")\n   public static class Bar extends CustomResource {}\n \n-  private final CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n+  /*private final CustomResourceDefinition crd = new CustomResourceDefinitionBuilder()\n     .withNewMetadata()\n       .withName(\"custom.name\")\n     .endMetadata()\n     .withNewSpec()\n-      .withGroup(\"custom.group\")\n-      .withVersion(\"v1alpha1\")\n+      .withGroup(MyCustomResource.GROUP)\n+      .withVersion(MyCustomResource.VERSION)\n       .withNewNames()\n         .withKind(\"MyCustomResource\")\n         .withListKind(\"MyCustomResourceList\")\n         .withPlural(\"mycustomresources\")\n         .withSingular(\"mycustomresource\")\n       .endNames()\n     .endSpec()\n-  .build();\n+  .build();*/", "originalCommit": "34c04087f8dfbb80d495173bd452623b34ef2421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f7fc0808e475d2aff93a548ef7edc5b7ef26fe0", "url": "https://github.com/fabric8io/kubernetes-client/commit/9f7fc0808e475d2aff93a548ef7edc5b7ef26fe0", "message": "refactor: apply toLowerCase to both branches\n\nCo-authored-by: Marc Nuri <marc@marcnuri.com>", "committedDate": "2020-12-15T19:33:49Z", "type": "commit"}, {"oid": "469cfdc433ced3569253b4f28fb7b1b6a5d43c7a", "url": "https://github.com/fabric8io/kubernetes-client/commit/469cfdc433ced3569253b4f28fb7b1b6a5d43c7a", "message": "refactor: use static versions instead of duplicating code", "committedDate": "2020-12-15T19:36:23Z", "type": "commit"}, {"oid": "d3b4d67d0194e115bf939dc82deaee26968b9f6a", "url": "https://github.com/fabric8io/kubernetes-client/commit/d3b4d67d0194e115bf939dc82deaee26968b9f6a", "message": "fix: wrong test assumption", "committedDate": "2020-12-15T20:04:18Z", "type": "commit"}, {"oid": "e0a3871568e2a854f1610eb65ef5985826c99618", "url": "https://github.com/fabric8io/kubernetes-client/commit/e0a3871568e2a854f1610eb65ef5985826c99618", "message": "chore: clean-up", "committedDate": "2020-12-15T20:15:26Z", "type": "commit"}, {"oid": "bf6e0dece0304945e0f7d490e1f864c32ec497e9", "url": "https://github.com/fabric8io/kubernetes-client/commit/bf6e0dece0304945e0f7d490e1f864c32ec497e9", "message": "refactor: make crdFromCustomResourceType version specific, add v1 version", "committedDate": "2020-12-16T09:27:32Z", "type": "commit"}, {"oid": "8558d1c33c623d7759b0aeaf30cf5d3a9ef90784", "url": "https://github.com/fabric8io/kubernetes-client/commit/8558d1c33c623d7759b0aeaf30cf5d3a9ef90784", "message": "fix: also set version to first versions item to follow v1beta1 spec", "committedDate": "2020-12-16T09:28:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1NTQ1MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r544155451", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.Test;\n          \n          \n            \n            import org.junit.jupiter.api.Test;", "author": "rohanKanojia", "createdAt": "2020-12-16T09:46:23Z", "path": "kubernetes-client/src/test/java/io/fabric8/kubernetes/client/CustomResourceTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (C) 2015 Red Hat, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.fabric8.kubernetes.client;\n+\n+import io.fabric8.kubernetes.model.annotation.ApiGroup;\n+import io.fabric8.kubernetes.model.annotation.ApiVersion;\n+import org.junit.Test;", "originalCommit": "e0a3871568e2a854f1610eb65ef5985826c99618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b77ec84bb15867ec116ddee4e08dd94122735f03", "url": "https://github.com/fabric8io/kubernetes-client/commit/b77ec84bb15867ec116ddee4e08dd94122735f03", "message": "chore: add more tests", "committedDate": "2020-12-16T10:21:04Z", "type": "commit"}, {"oid": "f073e4449ccec6d16ebc7c2ca7a717016115ddbd", "url": "https://github.com/fabric8io/kubernetes-client/commit/f073e4449ccec6d16ebc7c2ca7a717016115ddbd", "message": "fix: use proper @Test version", "committedDate": "2020-12-16T10:34:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwMzk4OQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r544203989", "bodyText": "I think we would also need to set spec.versions[].schema.openAPIV3Schema, spec.versions[].served and spec.versions[].storage. If I don't add these fields in apiextensions.k8s.io/v1#CustomResourceDefinition I get these validation errors:\nThe CustomResourceDefinition \"crontabs.stable.example.com\" is invalid: spec.versions[0].schema.openAPIV3Schema: Required value: schemas are required\n\nerror: error validating \"crontab-crd.yml\": error validating data: [ValidationError(CustomResourceDefinition.spec.versions[0]): missing required field \"served\" in io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion, ValidationError(CustomResourceDefinition.spec.versions[0]): missing required field \"storage\" in io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion]; if you choose to ignore these errors, turn validation off with --validate=false", "author": "rohanKanojia", "createdAt": "2020-12-16T10:58:48Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/base/CustomResourceDefinitionContext.java", "diffHunk": "@@ -59,40 +58,86 @@ public String getVersion() {\n   public String getKind() {\n     return kind;\n   }\n-\n-  public static CustomResourceDefinitionContext fromCustomResourceType(Class<? extends HasMetadata> customResource) {\n-    HasMetadata instance;\n+  \n+  public static CustomResourceDefinitionBuilder v1beta1CRDFromCustomResourceType(Class<? extends CustomResource> customResource) {\n+    try {\n+      final CustomResource instance = customResource.getDeclaredConstructor().newInstance();\n+    \n+      final String kind = instance.getKind();\n+      final String version = instance.getVersion();\n+  \n+      return new CustomResourceDefinitionBuilder()\n+        .withKind(kind)\n+        .withNewMetadata()\n+        .withName(instance.getCRDName())\n+        .endMetadata()\n+        .withNewSpec()\n+        .withGroup(instance.getGroup())\n+        .withVersion(version) // also set version to the first (and only) versions item\n+        .addNewVersion().withName(version).endVersion()\n+        .withScope(instance.getScope())\n+        .withNewNames()\n+        .withKind(kind)\n+        .withPlural(instance.getPlural())\n+        .withSingular(instance.getSingular())\n+        .endNames()\n+        .endSpec();\n+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n+      throw KubernetesClientException.launderThrowable(e);\n+    }\n+  }\n+  \n+  public static io.fabric8.kubernetes.api.model.apiextensions.v1.CustomResourceDefinitionBuilder v1CRDFromCustomResourceType(Class<? extends CustomResource> customResource) {\n     try {\n-      instance = customResource.newInstance();\n-\n-      String kind = Utils.isNullOrEmpty(instance.getKind()) ? customResource.getSimpleName() : instance.getKind();\n-      String name = kind.toLowerCase();\n-      String plural = Pluralize.toPlural(name);\n-      String group = ApiVersionUtil.apiGroup(instance, null);\n-      String version = ApiVersionUtil.apiVersion(instance, \"v1\");\n-      String scope = instance instanceof Namespaced ? \"Namespaced\" : \"Cluster\";\n-\n-      return new CustomResourceDefinitionContext.Builder()\n-        .withGroup(group)\n-        .withVersion(version)\n-        .withScope(scope)\n-        .withName(name)\n-        .withPlural(plural)\n+      final CustomResource instance = customResource.getDeclaredConstructor().newInstance();\n+    \n+      String kind = instance.getKind();\n+  \n+      return new io.fabric8.kubernetes.api.model.apiextensions.v1.CustomResourceDefinitionBuilder()\n         .withKind(kind)\n+        .withNewMetadata()\n+        .withName(instance.getCRDName())\n+        .endMetadata()\n+        .withNewSpec()\n+        .withGroup(instance.getGroup())\n+        .addNewVersion().withName(instance.getVersion()).endVersion()", "originalCommit": "f073e4449ccec6d16ebc7c2ca7a717016115ddbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwNTEwNA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r544205104", "bodyText": "Those will need to be added by the user always.\nThe idea is to work on the inference of this spec from the POJO, but I would delay this to a future PR.\n#2611 (comment)", "author": "manusa", "createdAt": "2020-12-16T11:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwMzk4OQ=="}], "type": "inlineReview"}, {"oid": "ff33f03fbcca84729cac5d6609921775cce839c7", "url": "https://github.com/fabric8io/kubernetes-client/commit/ff33f03fbcca84729cac5d6609921775cce839c7", "message": "refactor: rename @ApiVersion/@ApiGroup to @Version/@Group respectively", "committedDate": "2020-12-16T11:15:15Z", "type": "commit"}, {"oid": "c2990c7cae0a21c0d8367de50de8e35bc04f99d9", "url": "https://github.com/fabric8io/kubernetes-client/commit/c2990c7cae0a21c0d8367de50de8e35bc04f99d9", "message": "fix: license", "committedDate": "2020-12-16T11:20:28Z", "type": "commit"}, {"oid": "03c3e6deab9d63a25ce188626b6d19f2c4a20944", "url": "https://github.com/fabric8io/kubernetes-client/commit/03c3e6deab9d63a25ce188626b6d19f2c4a20944", "message": "fix: make test class package-scoped", "committedDate": "2020-12-16T11:22:33Z", "type": "commit"}, {"oid": "ba04163f906dd0dce8a34985e8f42e3b806116b7", "url": "https://github.com/fabric8io/kubernetes-client/commit/ba04163f906dd0dce8a34985e8f42e3b806116b7", "message": "fix: adapt matching to Version annotation now being fully-qualified", "committedDate": "2020-12-16T13:25:24Z", "type": "commit"}, {"oid": "541ee7164f26b625b4e263ebc311f3a662b0429d", "url": "https://github.com/fabric8io/kubernetes-client/commit/541ee7164f26b625b4e263ebc311f3a662b0429d", "message": "fix: adapt matching to Group annotation possibly being fully-qualified", "committedDate": "2020-12-16T14:31:28Z", "type": "commit"}, {"oid": "7ad6a11642cbf238ed1e62c30c4b06a31bd2c60d", "url": "https://github.com/fabric8io/kubernetes-client/commit/7ad6a11642cbf238ed1e62c30c4b06a31bd2c60d", "message": "refactor: move getGroup/getVersion to HasMetadata", "committedDate": "2020-12-16T14:44:42Z", "type": "commit"}, {"oid": "bd9b2b4fd49371cc528959b81dd6b36ae5396832", "url": "https://github.com/fabric8io/kubernetes-client/commit/bd9b2b4fd49371cc528959b81dd6b36ae5396832", "message": "doc: add javadoc", "committedDate": "2020-12-16T14:55:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNTgxNQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r544425815", "bodyText": "I would rather see this if being part of the constructor and not the getter.", "author": "iocanel", "createdAt": "2020-12-16T16:10:15Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/CustomResource.java", "diffHunk": "@@ -80,4 +129,120 @@ public ObjectMeta getMetadata() {\n   public void setMetadata(ObjectMeta metadata) {\n     this.metadata = metadata;\n   }\n+  \n+  /**\n+   * Retrieves the plural form associated with the specified CustomResource if annotated with {@link Plural} or computes a default value\n+   * using the value returned by {@link #getSingular(Class)} as input to {@link Pluralize#toPlural(String)}.\n+   *\n+   * @param clazz the CustomResource whose plural form we want to retrieve\n+   * @return the plural form defined by the {@link Plural} annotation or a computed default value\n+   */\n+  public static String getPlural(Class<? extends CustomResource> clazz) {\n+    final Plural fromAnnotation = clazz.getAnnotation(Plural.class);\n+    return (fromAnnotation != null ? fromAnnotation.value().toLowerCase(Locale.ROOT) : Pluralize.toPlural(getSingular(clazz)));\n+  }\n+  \n+  @JsonIgnore\n+  public String getPlural() {\n+    if (plural == null) {\n+      this.plural = getPlural(getClass());\n+    }\n+    return plural;\n+  }", "originalCommit": "bd9b2b4fd49371cc528959b81dd6b36ae5396832", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MjQ4NQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r544462485", "bodyText": "I tried that but that broke deserialization, iirc. Then again, some other things have changed in the mean time so let me try that change again to see if it works now.", "author": "metacosm", "createdAt": "2020-12-16T16:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU1MDM1Nw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2661#discussion_r544550357", "bodyText": "Done.", "author": "metacosm", "createdAt": "2020-12-16T19:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNTgxNQ=="}], "type": "inlineReview"}, {"oid": "92e689f5ae947210874b7d24d6b90bae28be6247", "url": "https://github.com/fabric8io/kubernetes-client/commit/92e689f5ae947210874b7d24d6b90bae28be6247", "message": "fix: use proper annotation names", "committedDate": "2020-12-16T17:14:58Z", "type": "commit"}, {"oid": "6fcd1b451637cba1e2bd6e285c077b8f9e04b74f", "url": "https://github.com/fabric8io/kubernetes-client/commit/6fcd1b451637cba1e2bd6e285c077b8f9e04b74f", "message": "fix: set computed properties in constructor", "committedDate": "2020-12-16T17:24:34Z", "type": "commit"}]}