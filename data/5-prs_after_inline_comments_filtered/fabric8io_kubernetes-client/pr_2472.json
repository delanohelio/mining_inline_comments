{"pr_number": 2472, "pr_title": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName", "pr_createdAt": "2020-09-09T11:44:34Z", "pr_url": "https://github.com/fabric8io/kubernetes-client/pull/2472", "timeline": [{"oid": "87d288aae4f24418fa9596931a1ffacf93be6d27", "url": "https://github.com/fabric8io/kubernetes-client/commit/87d288aae4f24418fa9596931a1ffacf93be6d27", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName", "committedDate": "2020-09-09T15:21:11Z", "type": "forcePushed"}, {"oid": "03f942aef3b40f6c70746906f65cbff8a3f26f41", "url": "https://github.com/fabric8io/kubernetes-client/commit/03f942aef3b40f6c70746906f65cbff8a3f26f41", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName", "committedDate": "2020-09-16T04:28:10Z", "type": "forcePushed"}, {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343", "url": "https://github.com/fabric8io/kubernetes-client/commit/44ee47c201c0080d16377d6608d85faeac2aa343", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName", "committedDate": "2020-09-16T07:30:49Z", "type": "commit"}, {"oid": "44ee47c201c0080d16377d6608d85faeac2aa343", "url": "https://github.com/fabric8io/kubernetes-client/commit/44ee47c201c0080d16377d6608d85faeac2aa343", "message": "Fix #2399: Cannot change the type of the Service from ClusterIP to ExternalName", "committedDate": "2020-09-16T07:30:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjIwNA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489276204", "bodyText": "No assertion for ClusterIP ?", "author": "dev-gaur", "createdAt": "2020-09-16T08:55:52Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMzQ2Mw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489303463", "bodyText": "Services of type ExternalName don't need ClusterIP, API Servers enforces the ClusterIP field to be empty when editing the 'type' field from ClusterIP to ExternalName", "author": "rohanKanojia", "createdAt": "2020-09-16T09:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzMwNg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489277306", "bodyText": "The name is a bit misleading.. can we change it to testClusterIpServiceCreateOrReplace ?", "author": "dev-gaur", "createdAt": "2020-09-16T08:57:36Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwNDQ2MA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489304460", "bodyText": "Yes, I'll create a follow up PR with your suggested changes", "author": "rohanKanojia", "createdAt": "2020-09-16T09:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzYwNg==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489277606", "bodyText": "same thing with the name", "author": "dev-gaur", "createdAt": "2020-09-16T08:58:05Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIwMw==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278203", "bodyText": "We should also check for the NodePort value created.", "author": "dev-gaur", "createdAt": "2020-09-16T08:59:04Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwNTA5MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489305091", "bodyText": "I added this assertion to check whether what I modified in When phase is actually reflected or not. But yes, I can try doing something with NodePort too", "author": "rohanKanojia", "createdAt": "2020-09-16T09:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODM4OQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278389", "bodyText": "name", "author": "dev-gaur", "createdAt": "2020-09-16T08:59:25Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testLoadBalancerCreateOrReplace() {", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODU3MQ==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r489278571", "bodyText": "name", "author": "dev-gaur", "createdAt": "2020-09-16T08:59:41Z", "path": "kubernetes-itests/src/test/java/io/fabric8/kubernetes/ServiceIT.java", "diffHunk": "@@ -94,6 +96,135 @@ public void delete() {\n     assertTrue(bDeleted);\n   }\n \n+  @Test\n+  public void testChangeServiceType() {\n+    // Given\n+    Service svc = client.services().inNamespace(session.getNamespace()).withName(\"service-change-service-type\").get();\n+\n+    // When\n+    svc.getSpec().setType(\"ExternalName\");\n+    svc.getSpec().setExternalName(\"my.database.example.com\");\n+    svc.getSpec().setClusterIP(\"\");\n+    svc = client.services().inNamespace(session.getNamespace()).createOrReplace(svc);\n+\n+    // Then\n+    assertNotNull(svc);\n+    assertEquals(\"ExternalName\", svc.getSpec().getType());\n+    assertEquals(\"my.database.example.com\", svc.getSpec().getExternalName());\n+  }\n+\n+  @Test\n+  public void testClusterIPCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-clusterip-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withName(\"http\")\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"ClusterIP\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testNodePortCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-nodeport-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"NodePort\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(80))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(81));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"NodePort\", clusterIPSvc.getSpec().getType());\n+    assertEquals(81, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testLoadBalancerCreateOrReplace() {\n+    // Given\n+    Service clusterIPSvc = new ServiceBuilder()\n+      .withNewMetadata().withName(\"serviceit-loadbalancer-createorreplace\").endMetadata()\n+      .withNewSpec()\n+      .withType(\"LoadBalancer\")\n+      .addToSelector(\"app\", \"myapp\")\n+      .addNewPort()\n+      .withProtocol(\"TCP\")\n+      .withPort(80)\n+      .withTargetPort(new IntOrString(9376))\n+      .endPort()\n+      .endSpec()\n+      .build();\n+\n+    // When\n+    // Create resource\n+    client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+    // Modify resource\n+    clusterIPSvc.getSpec().getPorts().get(0).setTargetPort(new IntOrString(9380));\n+    // Do createOrReplace again; resource should get updated\n+    clusterIPSvc = client.services().inNamespace(session.getNamespace()).createOrReplace(clusterIPSvc);\n+\n+    // Then\n+    assertNotNull(clusterIPSvc);\n+    assertEquals(\"LoadBalancer\", clusterIPSvc.getSpec().getType());\n+    assertEquals(9380, clusterIPSvc.getSpec().getPorts().get(0).getTargetPort().getIntVal().intValue());\n+  }\n+\n+  @Test\n+  public void testExternalNameCreateOrReplace() {", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNDcxMA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r585014710", "bodyText": "Shouldn't the patch also work with ExternalName?", "author": "jorsol", "createdAt": "2021-03-01T20:07:47Z", "path": "kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/internal/core/v1/ServiceOperationsImpl.java", "diffHunk": "@@ -58,30 +60,21 @@ public ServiceOperationsImpl newInstance(OperationContext context) {\n \n   @Override\n   public Service replace(Service item) {\n-      try {\n-        Service old = fromServer().get();\n-        return super.replace(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"replace\"), e);\n-      }\n+    return super.replace(patchClusterIpIntoServiceAndReplace(item));\n   }\n \n   @Override\n   public Service patch(Service item) {\n-      try {\n-        Service old = getMandatory();\n-        return super.patch(new ServiceBuilder(item)\n-          .editSpec()\n-          .withClusterIP(old.getSpec().getClusterIP())\n-          .endSpec()\n-          .build());\n-      } catch (Exception e) {\n-        throw KubernetesClientException.launderThrowable(forOperationType(\"patch\"), e);\n-      }\n+    try {", "originalCommit": "44ee47c201c0080d16377d6608d85faeac2aa343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTI5NzMzOA==", "url": "https://github.com/fabric8io/kubernetes-client/pull/2472#discussion_r585297338", "bodyText": "I think you're right. Could you please create an issue for this?", "author": "rohanKanojia", "createdAt": "2021-03-02T06:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNDcxMA=="}], "type": "inlineReview"}]}