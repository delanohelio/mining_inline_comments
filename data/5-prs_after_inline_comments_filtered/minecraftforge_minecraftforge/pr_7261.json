{"pr_number": 7261, "pr_title": "Movement Handles for Custom Scaffolding", "pr_createdAt": "2020-08-20T18:17:06Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261", "timeline": [{"oid": "c900752ff78ac6b8b6ebe1430e414a5abb6994d7", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/c900752ff78ac6b8b6ebe1430e414a5abb6994d7", "message": "Custom Scaffolding Implementation\n\nHandle movement in certain blocks as scaffolding\nAdd test mod to verify", "committedDate": "2020-08-20T17:59:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzAzMw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r474773033", "bodyText": "Why pass all these additional paramteres in when they can be (and are in fact) accessed from LivingEntity?", "author": "ichttt", "createdAt": "2020-08-21T15:32:37Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -911,4 +911,18 @@ default BlockState getToolModifiedState(BlockState state, World world, BlockPos\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)", "originalCommit": "c900752ff78ac6b8b6ebe1430e414a5abb6994d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNDIyMA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r474804220", "bodyText": "I did this mainly to mimic IForgeBlock::isLadder. It's implementation is pretty much similar where everything could be passed in through the LivingEntity. I figured since the idea is to mimic the ladder usage with scaffolding (as the ladder method determines if the thing is climable), it would be reasonable to keep the same parameters. Of course, if this is a bad judgement, I shall adjust.", "author": "ChampionAsh5357", "createdAt": "2020-08-21T16:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3MzAzMw=="}], "type": "inlineReview"}, {"oid": "bb7d03f7de464245d418189c37b756c5b74f8e8b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/bb7d03f7de464245d418189c37b756c5b74f8e8b", "message": "Data Gen Test", "committedDate": "2020-08-21T16:43:43Z", "type": "commit"}, {"oid": "e67ad1cbf836ffee395f0deebeff6d9bf14ecaf5", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e67ad1cbf836ffee395f0deebeff6d9bf14ecaf5", "message": "Fix formatting", "committedDate": "2020-08-21T17:18:44Z", "type": "commit"}, {"oid": "2fba40d475f233b940beee6af6a1945014b5dde8", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/2fba40d475f233b940beee6af6a1945014b5dde8", "message": "Removed nongenerated files\n\nAdd block state provider for model gen\nRemove from test/resources", "committedDate": "2020-08-26T22:17:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMzE5Mg==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r478323192", "bodyText": "wrong indentation", "author": "ichttt", "createdAt": "2020-08-27T10:40:21Z", "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package net.minecraftforge.debug.block;\n+\n+import net.minecraft.block.AbstractBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.ScaffoldingBlock;\n+import net.minecraft.block.SoundType;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.block.material.MaterialColor;\n+import net.minecraft.data.BlockTagsProvider;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorldReader;\n+import net.minecraftforge.client.model.generators.BlockStateProvider;\n+import net.minecraftforge.client.model.generators.ConfiguredModel;\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.client.model.generators.ModelFile;\n+import net.minecraftforge.common.Tags;\n+import net.minecraftforge.eventbus.api.IEventBus;\n+import net.minecraftforge.fml.RegistryObject;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.event.lifecycle.GatherDataEvent;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.DeferredRegister;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+/**\n+ * This test mod allows a custom scaffolding to move down\n+ * while sneaking through a tag and method.\n+ */\n+@Mod(ScaffoldingTest.MODID)\n+public class ScaffoldingTest\n+{\n+    static final String MODID = \"scaffolding_test\";\n+    static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_METHOD_TEST = BLOCKS.register(\"scaffolding_method_test\", () -> new ScaffoldingMethodTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+\n+    public ScaffoldingTest()\n+    {\n+        IEventBus modBus = FMLJavaModLoadingContext.get().getModEventBus();\n+        BLOCKS.register(modBus);\n+        modBus.addListener(this::gatherData);\n+    }\n+\n+    private void gatherData(final GatherDataEvent event)\n+    {\n+        DataGenerator gen = event.getGenerator();\n+    \tif(event.includeClient()) gen.addProvider(new ScaffoldingBlockState(gen, MODID, event.getExistingFileHelper()));", "originalCommit": "2fba40d475f233b940beee6af6a1945014b5dde8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyMzMzMQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r478323331", "bodyText": "tabs", "author": "ichttt", "createdAt": "2020-08-27T10:40:40Z", "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package net.minecraftforge.debug.block;\n+\n+import net.minecraft.block.AbstractBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.ScaffoldingBlock;\n+import net.minecraft.block.SoundType;\n+import net.minecraft.block.material.Material;\n+import net.minecraft.block.material.MaterialColor;\n+import net.minecraft.data.BlockTagsProvider;\n+import net.minecraft.data.DataGenerator;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorldReader;\n+import net.minecraftforge.client.model.generators.BlockStateProvider;\n+import net.minecraftforge.client.model.generators.ConfiguredModel;\n+import net.minecraftforge.client.model.generators.ExistingFileHelper;\n+import net.minecraftforge.client.model.generators.ModelFile;\n+import net.minecraftforge.common.Tags;\n+import net.minecraftforge.eventbus.api.IEventBus;\n+import net.minecraftforge.fml.RegistryObject;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.fml.event.lifecycle.GatherDataEvent;\n+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\n+import net.minecraftforge.registries.DeferredRegister;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+/**\n+ * This test mod allows a custom scaffolding to move down\n+ * while sneaking through a tag and method.\n+ */\n+@Mod(ScaffoldingTest.MODID)\n+public class ScaffoldingTest\n+{\n+    static final String MODID = \"scaffolding_test\";\n+    static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_METHOD_TEST = BLOCKS.register(\"scaffolding_method_test\", () -> new ScaffoldingMethodTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+\n+    public ScaffoldingTest()\n+    {\n+        IEventBus modBus = FMLJavaModLoadingContext.get().getModEventBus();\n+        BLOCKS.register(modBus);\n+        modBus.addListener(this::gatherData);\n+    }\n+\n+    private void gatherData(final GatherDataEvent event)\n+    {\n+        DataGenerator gen = event.getGenerator();\n+    \tif(event.includeClient()) gen.addProvider(new ScaffoldingBlockState(gen, MODID, event.getExistingFileHelper()));\n+    \tif(event.includeServer()) gen.addProvider(new ScaffoldingTagsProvider(gen));\n+    }\n+\n+    static class ScaffoldingTagsProvider extends BlockTagsProvider\n+    {\n+        public ScaffoldingTagsProvider(DataGenerator generatorIn)\n+        {\n+\t\t    super(generatorIn);", "originalCommit": "2fba40d475f233b940beee6af6a1945014b5dde8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "76fe78df4e3e438710e70d32a4a77fc61c9bb8cf", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/76fe78df4e3e438710e70d32a4a77fc61c9bb8cf", "message": "Format Fixes", "committedDate": "2020-08-27T16:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjY0Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485166643", "bodyText": "We DO NOT add tags for game logic.", "author": "LexManos", "createdAt": "2020-09-08T20:06:08Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -911,4 +911,18 @@ default BlockState getToolModifiedState(BlockState state, World world, BlockPos\n         else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n         else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n+    \n+    /**\n+     * Checks if a player or entity handles movement on this block like scaffolding.\n+     *\n+     * @param state The current state\n+     * @param world The current world\n+     * @param pos The block position in world\n+     * @param entity The entity on the scaffolding\n+     * @return True if the block should act like scaffolding\n+     */\n+    default boolean isScaffolding(BlockState state, IWorldReader world, BlockPos pos, LivingEntity entity)\n+    {\n+        return state.isIn(Blocks.SCAFFOLDING) || state.getBlock().isIn(Tags.Blocks.SCAFFOLDING);", "originalCommit": "76fe78df4e3e438710e70d32a4a77fc61c9bb8cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4MjM0Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485182343", "bodyText": "Apologies, Lex. Removed the in-game tag logic directly and moved it to the specific test.", "author": "ChampionAsh5357", "createdAt": "2020-09-08T20:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjY0Mw=="}], "type": "inlineReview"}, {"oid": "3df702795d8b3227a3ba113bfb2453c2536ed6ad", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3df702795d8b3227a3ba113bfb2453c2536ed6ad", "message": "Remove direct tag implementation\n\nMove scaffolding tag to test to verify it still works.", "committedDate": "2020-09-08T20:37:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4NDU3MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485184570", "bodyText": "Remove all of this entirely. We do not support or encourage people using custom tags for game logic. So there is no need for this 'test'", "author": "LexManos", "createdAt": "2020-09-08T20:42:33Z", "path": "src/test/java/net/minecraftforge/debug/block/ScaffoldingTest.java", "diffHunk": "@@ -35,8 +36,9 @@\n {\n     static final String MODID = \"scaffolding_test\";\n     static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n+    static final IOptionalNamedTag<Block> SCAFFOLDING = BlockTags.createOptional(new ResourceLocation(\"forge\", \"scaffolding\"));\n \n-    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));\n+    static final RegistryObject<Block> SCAFFOLDING_TAG_TEST = BLOCKS.register(\"scaffolding_tag_test\", () -> new ScaffoldingTagTestBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS, MaterialColor.SAND).doesNotBlockMovement().sound(SoundType.SCAFFOLDING).variableOpacity()));", "originalCommit": "3df702795d8b3227a3ba113bfb2453c2536ed6ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4ODE1MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7261#discussion_r485188151", "bodyText": "Ok, should be done now.", "author": "ChampionAsh5357", "createdAt": "2020-09-08T20:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4NDU3MA=="}], "type": "inlineReview"}, {"oid": "c328aa8ec825dad3ea434827f8ad38a161244aa6", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/c328aa8ec825dad3ea434827f8ad38a161244aa6", "message": "Merge remote-tracking branch 'upstream/1.16.x' into scaffolding", "committedDate": "2020-09-08T20:43:28Z", "type": "commit"}, {"oid": "432177809978af7ab8aefd3dc69e323b53c65c3a", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/432177809978af7ab8aefd3dc69e323b53c65c3a", "message": "Remove all references to tags\n\nAll tag references have been remove since forge does not support it.", "committedDate": "2020-09-08T20:49:26Z", "type": "commit"}, {"oid": "3b9d24f63d59308914fb88c71301939209fd76dd", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3b9d24f63d59308914fb88c71301939209fd76dd", "message": "Fix import\n\nExistingFileHelper for some reason didn't import correctly", "committedDate": "2020-09-08T20:50:28Z", "type": "commit"}]}