{"pr_number": 446, "pr_title": "Modify NodeConfigCollector to include more heap stats", "pr_createdAt": "2020-10-02T07:03:01Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/446", "timeline": [{"oid": "d326b58ad09e9c46fbc9c38dfa377a08202c3d2c", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d326b58ad09e9c46fbc9c38dfa377a08202c3d2c", "message": "Modify NodeConfigCollector to include more heap stats\n\n- NodeConfigCollector now reports the maximum amount of memory avaiable\nin the old generation and the young generation in bytes", "committedDate": "2020-10-02T07:11:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTQxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/446#discussion_r499761411", "bodyText": "The whole idea of throwing an exception from nodeConfigCache.get was to make callers aware of a missing value and letting them decide how to handle it. By masking it and returning null in a reader util, we are exposing ourselves to future bugs.\nI don't understand how this is useful or better, the caller still needs to check for null values - only now the compiler will not ensure that these values are checked. So we run a greater risk of missing these values. That is the whole point of checked exceptions.\nThis reader util class is good in that you don't have to remember the actual Resource values to pass, but it should follow the same API signature. We should not silently eat these exceptions here and make callers handle a different unchecked code path.\nPS: I know this is not a new artifact in this PR, it is simply extending existing code faults. I think we should fix it, if the change is big, we can create separate PRs. Either way, at least the new methods can follow the right signature.", "author": "vigyasharma", "createdAt": "2020-10-05T17:33:25Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/util/NodeConfigCacheReaderUtil.java", "diffHunk": "@@ -64,4 +64,24 @@ public static Long readHeapMaxSizeInBytes(\n     }\n     return null;\n   }\n+\n+  public static Double readOldGenMaxSizeInBytes(\n+      final NodeConfigCache nodeConfigCache, final NodeKey esNode) {\n+    try {\n+      return nodeConfigCache.get(esNode, ResourceUtil.OLD_GEN_MAX_SIZE);\n+    } catch (final IllegalArgumentException e) {\n+      LOG.error(\"Exception while reading heap max size from Node Config Cache\", e);\n+    }\n+    return null;\n+  }\n+\n+  public static Double readYoungGenMaxSizeInBytes(\n+      final NodeConfigCache nodeConfigCache, final NodeKey esNode) {\n+    try {\n+      return nodeConfigCache.get(esNode, ResourceUtil.YOUNG_GEN_MAX_SIZE);\n+    } catch (final IllegalArgumentException e) {", "originalCommit": "d326b58ad09e9c46fbc9c38dfa377a08202c3d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjU4MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/446#discussion_r499762580", "bodyText": "Also nodeConfigCache.get should throw a checked exception, not a RuntimeException (which are for critical/unrecoverable failures)", "author": "vigyasharma", "createdAt": "2020-10-05T17:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5NTcwNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/446#discussion_r499895704", "bodyText": "I disagree with your comment on 2 levels\n\n\nThe purpose of NodeConfigCacheReaderUtil is to eat the exceptions and let consumers gracefully handle nulls as you can see is being done today. This is a valid decision and seems unlikely to lead to future bugs because all consumers today are using this the same way and future consumers are likely to copy the same mechanism.\n\n\nWe don't allow storing null values in the NodeConfigCache even if the signature technically allows it. Look at the signature of put(), we can only store actual double values in the cache. We have to use a boxed type for the cache because Java. Since it isn't possible to have null values in the cache, a ReaderUtil returning null will not miss any values and will signal what we want it to signal.\n\n\nLet me know if you see an issue with my reasoning.", "author": "sidheart", "createdAt": "2020-10-05T21:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyNTI5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/446#discussion_r499925299", "bodyText": "I removed the functions I added to this class, my consumers down the line will use the NodeConfigCache directly", "author": "sidheart", "createdAt": "2020-10-05T23:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTQxMQ=="}], "type": "inlineReview"}, {"oid": "e38d5b08f956eefa98d7cf16481401b291b53dc5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e38d5b08f956eefa98d7cf16481401b291b53dc5", "message": "Modify NodeConfigCollector to include more heap stats\n\n- NodeConfigCollector now reports the maximum amount of memory avaiable\nin the old generation and the young generation in bytes", "committedDate": "2020-10-05T22:06:55Z", "type": "forcePushed"}, {"oid": "4e0de32b5ee54c77a97de67cc801a4ca3dc95e5b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4e0de32b5ee54c77a97de67cc801a4ca3dc95e5b", "message": "Modify NodeConfigCollector to include more heap stats\n\n- NodeConfigCollector now reports the maximum amount of memory avaiable\nin the old generation and the young generation in bytes", "committedDate": "2020-10-05T23:26:16Z", "type": "commit"}, {"oid": "4e0de32b5ee54c77a97de67cc801a4ca3dc95e5b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4e0de32b5ee54c77a97de67cc801a4ca3dc95e5b", "message": "Modify NodeConfigCollector to include more heap stats\n\n- NodeConfigCollector now reports the maximum amount of memory avaiable\nin the old generation and the young generation in bytes", "committedDate": "2020-10-05T23:26:16Z", "type": "forcePushed"}]}