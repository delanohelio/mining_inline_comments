{"pr_number": 133, "pr_title": "Add unit tests to the rca.framework.api.persist package", "pr_createdAt": "2020-04-07T04:12:16Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133", "timeline": [{"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cb6ec0648f2a56dc82d08f810587fc75584ed995", "message": "Add unit tests to the rca.framework.api.persist package", "committedDate": "2020-04-07T04:20:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzE3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r406477176", "bodyText": "getRecordByName() is marked VisibleForTesting but this caller is not. When the application (and not the tests) calls it, it will result in error, right ?", "author": "yojs", "createdAt": "2020-04-09T21:05:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -68,11 +75,11 @@ private static Record getRecordByName(Result<Record> result, Field<String> field\n    * @param dataField The field to retrieve data from\n    * @return the data read from SQL result\n    */\n-  public static double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n+  public double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n     double ret = Double.NaN;\n     if (result != null) {\n       try {\n-        Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n+        Record record = getRecordByName(result, matchedField, matchedFieldName);", "originalCommit": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4MTY3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412481673", "bodyText": "The @VisibleForTesting annotation just indicates that an element is only used for testing or has wider scope than is strictly necessary to allow for testing. I changed the method signature to be package private so that it could be tested, which is why I included the annotation. The annotation doesn't actually do anything at runtime.", "author": "sidheart", "createdAt": "2020-04-21T20:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNTkwNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412525906", "bodyText": "Removed the annotation, returned to static, non-singleton", "author": "sidheart", "createdAt": "2020-04-21T22:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5ODQzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412498431", "bodyText": "do we really need singleton pattern here ? I assume those are just some static utility functions which can be tested directly without singleton.", "author": "rguo-aws", "createdAt": "2020-04-21T21:18:10Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -27,6 +28,10 @@\n public class SQLParsingUtil {\n   private static final Logger LOG = LogManager.getLogger(SQLParsingUtil.class);\n \n+  public static final SQLParsingUtil API = new SQLParsingUtil();", "originalCommit": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjAxMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412526013", "bodyText": "Removed, now tested directly", "author": "sidheart", "createdAt": "2020-04-21T22:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5ODQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwNTEwNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412505104", "bodyText": "I would suggest to create a dummy SQL context instead of mocking the Result object. You can use the jooq DSLcontext to create whatever Result you want and use that as input for this test.", "author": "rguo-aws", "createdAt": "2020-04-21T21:29:48Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtilTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.Lists;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.exception.DataTypeException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+public class SQLParsingUtilTest {\n+    private static final String FIELD_NAME = \"FIELD_NAME\";\n+    private static final String DATA_FIELD = \"DATA_FIELD\";\n+\n+    private SQLParsingUtil uut;\n+\n+    @Mock\n+    private Result<Record> result;\n+\n+    @Mock\n+    private Field<String> field;\n+\n+    @Mock\n+    private Record record;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        uut = SQLParsingUtil.API;\n+    }\n+\n+    @Test\n+    public void testGetRecordByName() {\n+        when(result.getValues(field)).thenReturn(Lists.newArrayList(\"no\", FIELD_NAME, \"nope\"));\n+        uut.getRecordByName(result, field, FIELD_NAME);\n+        verify(result, times(1)).get(1);\n+\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetRecordByNameWithNullResult() {\n+        uut.getRecordByName(null, field, FIELD_NAME);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetRecordByNameWithNoMatch() {\n+        when(result.getValues(field)).thenReturn(Lists.newArrayList(\"no\", \"matches\", \"here\"));\n+        uut.getRecordByName(result, field, FIELD_NAME);\n+    }\n+\n+    @Test\n+    public void testReadDataFromSqlResult() {\n+        // method should return Double.NaN when result is null\n+        assertEquals(Double.NaN, uut.readDataFromSqlResult(null, field, FIELD_NAME, DATA_FIELD), 0);\n+        // method should return Double.NaN when it encounters an IllegalArgumentException\n+        when(result.getValues(field)).thenReturn(Lists.newArrayList(\"no\", \"matches\", \"here\"));", "originalCommit": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjk1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412526953", "bodyText": "I disagree that this would be better than my current method of testing with mocks. I also think using the jooq DSL context would increase the overall line count of this test. Is there a strong reason to not use Mockito here?", "author": "sidheart", "createdAt": "2020-04-21T22:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwNTEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY0OTM5MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412649390", "bodyText": "if we use mockito it would be hard to tell whether the exception \"DataTypeException\" can be emitted properly if we try to parse the result with wrong field name / data type. Anyway. I think it is a good to have and we can skip it for now.  :)", "author": "rguo-aws", "createdAt": "2020-04-22T03:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwNTEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwODYyMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412508622", "bodyText": "not sure if we really need to change the signature of this function from private to public. I assume we can still call the public API readDataFromSqlResult to test this function ?", "author": "rguo-aws", "createdAt": "2020-04-21T21:36:21Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -36,15 +41,17 @@\n    * @return The record that contain the name string in field\n    * @throws IllegalArgumentException throws an exception if we can't find the name in the field\n    */\n-  private static Record getRecordByName(Result<Record> result, Field<String> field, String name) throws IllegalArgumentException {\n+  @VisibleForTesting\n+  Record getRecordByName(Result<Record> result, Field<String> field, String name) throws IllegalArgumentException {", "originalCommit": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNzA2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412527062", "bodyText": "Changed it back, you're absolutely correct", "author": "sidheart", "createdAt": "2020-04-21T22:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwODYyMg=="}], "type": "inlineReview"}, {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/44aaed27b3b8ed19078841dc4d63ff76801c3e85", "message": "Add unit tests to the rca.framework.api.persist package", "committedDate": "2020-04-21T22:08:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyODE0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413328141", "bodyText": "Can we move the text in line 82 to line 81 ?", "author": "yojs", "createdAt": "2020-04-22T20:58:31Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -70,18 +71,16 @@ private static Record getRecordByName(Result<Record> result, Field<String> field\n    */\n   public static double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n     double ret = Double.NaN;\n-    if (result != null) {\n-      try {\n-        Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n-        ret = record.getValue(MetricsDB.MAX, Double.class);\n-      }\n-      catch (IllegalArgumentException ie) {\n-        LOG.error(\"{} fails to match any row in field {}.\", matchedFieldName, matchedField.getName());\n-      }\n-      catch (\n-          DataTypeException de) {\n-        LOG.error(\"Fail to read {} field from SQL result\", dataField);\n-      }\n+    try {\n+      Record record = getRecordByName(result, matchedField, matchedFieldName);\n+      ret = record.getValue(MetricsDB.MAX, Double.class);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"{} fails to match any row in field {}.\", matchedFieldName, matchedField.getName());\n+    }\n+    catch (\n+            DataTypeException de) {", "originalCommit": "44aaed27b3b8ed19078841dc4d63ff76801c3e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1OTcxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413359716", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-04-22T21:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyODE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMTU3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413331573", "bodyText": "If we don't expect result to be null, we should add the notnull annotation for that argument.", "author": "yojs", "createdAt": "2020-04-22T21:04:13Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -37,14 +37,15 @@\n    * @throws IllegalArgumentException throws an exception if we can't find the name in the field\n    */\n   private static Record getRecordByName(Result<Record> result, Field<String> field, String name) throws IllegalArgumentException {", "originalCommit": "44aaed27b3b8ed19078841dc4d63ff76801c3e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MDY2OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413360668", "bodyText": "Disagree, we explicitly included logic dealing with null results which results in a logging statement and a particular double.NaN return statement from the public caller. Adding the annotation to this private method would only shift the (result == null) logic to the public function and slightly increase the overall line count.", "author": "sidheart", "createdAt": "2020-04-22T21:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MzEzNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413363134", "bodyText": "Throwing an exception is a runtime validation but I think we should try and prefer static checks over them as this way the static analysis tools can do the work for you before the code goes to prod. Anyways, the @nonnull is not enforced by the compiler. So, we can ignore it.", "author": "yojs", "createdAt": "2020-04-22T22:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMTU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0OTU2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413349566", "bodyText": "Can we add a test to check Illegal Argument Exception and DataTypeException is thrown ?", "author": "yojs", "createdAt": "2020-04-22T21:35:07Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -70,18 +71,16 @@ private static Record getRecordByName(Result<Record> result, Field<String> field\n    */\n   public static double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n     double ret = Double.NaN;\n-    if (result != null) {\n-      try {\n-        Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n-        ret = record.getValue(MetricsDB.MAX, Double.class);\n-      }\n-      catch (IllegalArgumentException ie) {\n-        LOG.error(\"{} fails to match any row in field {}.\", matchedFieldName, matchedField.getName());\n-      }\n-      catch (\n-          DataTypeException de) {\n-        LOG.error(\"Fail to read {} field from SQL result\", dataField);\n-      }\n+    try {\n+      Record record = getRecordByName(result, matchedField, matchedFieldName);\n+      ret = record.getValue(MetricsDB.MAX, Double.class);\n+    }\n+    catch (IllegalArgumentException ie) {", "originalCommit": "44aaed27b3b8ed19078841dc4d63ff76801c3e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1OTY2OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413359668", "bodyText": "Discussed how this is covered", "author": "sidheart", "createdAt": "2020-04-22T21:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0OTU2Ng=="}], "type": "inlineReview"}, {"oid": "f472df21f483c236d03b32ed9fa32cf709a32130", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f472df21f483c236d03b32ed9fa32cf709a32130", "message": "Add unit tests to the rca.framework.api.persist package", "committedDate": "2020-04-22T21:54:22Z", "type": "commit"}, {"oid": "f472df21f483c236d03b32ed9fa32cf709a32130", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f472df21f483c236d03b32ed9fa32cf709a32130", "message": "Add unit tests to the rca.framework.api.persist package", "committedDate": "2020-04-22T21:54:22Z", "type": "forcePushed"}]}