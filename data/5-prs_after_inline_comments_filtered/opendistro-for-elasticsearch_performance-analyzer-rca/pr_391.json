{"pr_number": 391, "pr_title": "Add the BucketCalculator class and a few basic impls", "pr_createdAt": "2020-08-21T04:55:55Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391", "timeline": [{"oid": "76b6ea2fbfe12660e7ca5fd67ec696f04718de17", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/76b6ea2fbfe12660e7ca5fd67ec696f04718de17", "message": "Add the BucketCalculator class and a few basic impls\n\n- The BucketCalculator class can be used to compute a \"UsageBucket\" for\na particular resource. E.g. if CPU utilization is at 99% utilization\na BucketCalculator may say that CPU is unhealthy. At the other extreme,\nif CPU utilization is at 1%, a BucketCalculator may say that CPU is\nunderutilized (which means that we may be able to remove a node from our\ncluster, for example).", "committedDate": "2020-08-21T04:50:11Z", "type": "commit"}, {"oid": "a3404217734d98c0e6b2beeab83e23375973c2c5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a3404217734d98c0e6b2beeab83e23375973c2c5", "message": "Fixup unit tests", "committedDate": "2020-08-21T06:13:48Z", "type": "commit"}, {"oid": "431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "message": "Change SubscribeResponseHandler#onError to log a warning", "committedDate": "2020-08-21T07:00:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxNDQyNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r476914426", "bodyText": "why do we need to override equals and hasCode here in this class ?", "author": "rguo-aws", "createdAt": "2020-08-26T00:33:14Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/JvmBucketCalculator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import java.util.Objects;\n+\n+/**\n+ * JvmBucketCalculator is a {@link BucketCalculator} that contains special logic for\n+ * identifying which buckets the {@link ResourceUtil#YOUNG_GEN_PROMOTION_RATE} and\n+ * {@link ResourceUtil#OLD_GEN_HEAP_USAGE} resources should be placed into. It returns\n+ * {@link UsageBucket#UNKNOWN} for all other {@link Resource}s.\n+ */\n+public class JvmBucketCalculator implements BucketCalculator {\n+  private BucketCalculator youngGenCalculator;\n+  private BucketCalculator oldGenCalculator;\n+\n+  public JvmBucketCalculator(BucketCalculator youngGenCalculator,\n+      BucketCalculator oldGenCalculator) {\n+    this.youngGenCalculator = youngGenCalculator;\n+    this.oldGenCalculator = oldGenCalculator;\n+  }\n+\n+  /**\n+   * Identifies which buckets a {@link ResourceEnum#YOUNG_GEN} or {@link ResourceEnum#OLD_GEN}\n+   * resource should be placed into. It returns {@link UsageBucket#UNKNOWN} for all other {@link Resource}s.\n+   *\n+   * @param resource Either a {@link ResourceEnum#YOUNG_GEN} or\n+   *                 {@link ResourceEnum#OLD_GEN}\n+   * @param value The metric value of the {@link ResourceEnum}\n+   * @return Which bucket a {@link ResourceEnum#YOUNG_GEN} or {@link ResourceEnum#OLD_GEN} resource\n+   *         should be placed into or {@link UsageBucket#UNKNOWN} for all other {@link ResourceEnum}s\n+   */\n+  @Override\n+  public UsageBucket compute(ResourceEnum resource, double value) {\n+    if (resource.equals(ResourceEnum.YOUNG_GEN)) {\n+      return youngGenCalculator.compute(resource, value);\n+    } else if (resource.equals(ResourceEnum.OLD_GEN)) {\n+      return oldGenCalculator.compute(resource, value);\n+    }\n+    return UsageBucket.UNKNOWN;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MDc2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477060763", "bodyText": "This is part of breaking up my original PR into smaller pieces. This will be used in an upcoming diff to verify that when we generate thresholds from a config, it yields the BucketCalculators we expect.", "author": "sidheart", "createdAt": "2020-08-26T06:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxNDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3OTM2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477479363", "bodyText": "We should try to avoid the equals and hashcode if we can. Seems to me that they are used for testing purposes, in which case, we can add the helpers in the test folders for this.", "author": "yojs", "createdAt": "2020-08-26T17:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxNDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0ODU3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r482248575", "bodyText": "Deleted the entire class", "author": "sidheart", "createdAt": "2020-09-02T17:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxNDQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTU5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477011593", "bodyText": "We might also want to check with @vigyasharma on this. looks like right now we only support 4 buckets.\n\nwill those buckets fit for both young gen / old gen ?\ndo we want to bucketize output from other type of RCAs ? If yes, do we want to make this extendable so that other RCA can defines more buckets ?", "author": "rguo-aws", "createdAt": "2020-08-26T03:30:10Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/UsageBucket.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket;\n+\n+/**\n+ * A UsageBucket is associated with a {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource}\n+ * and identifies the state of that Resource. We use these buckets to identify when we have the\n+ * bandwidth to scale a particular resource out or in.\n+ *\n+ * <p>{@link UsageBucket#HEALTHY_WITH_BUFFER} means that the\n+ * {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource} is healthy and\n+ * potentially under utilized. Resources in this state are good candidates for scaling in\n+ *\n+ * <p>{@link UsageBucket#HEALTHY} means that the\n+ * {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource} is in a healthy\n+ * state. Resources in this bucket should probably be left alone.\n+ *\n+ * <p>{@link UsageBucket#UNDER_UTILIZED} means that the\n+ * {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource} is on the verge of\n+ * being unhealthy. The utilization is high, but not quite high enough to be called unhealthy yet.\n+ * Resources in this bucket are good candidates for scaling out.\n+ *\n+ * <p>{@link UsageBucket#UNHEALTHY} means that the\n+ * {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource} is under high\n+ * pressure. Actions should be taken to help reduce the pressure.\n+ *\n+ */\n+public enum UsageBucket {", "originalCommit": "431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA1OTY4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477059689", "bodyText": "These are the buckets that Vigya wanted initially. This is also extensible since the bucketization logic is implemented in each BucketCalculator.", "author": "sidheart", "createdAt": "2020-08-26T06:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3ODgwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477478801", "bodyText": "Is there any reason we need to wrap the Young and Old in this ? I am thinking why can't the callers of this work with the generation specific bucket directly ?", "author": "yojs", "createdAt": "2020-08-26T17:46:26Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/JvmBucketCalculator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import java.util.Objects;\n+\n+/**\n+ * JvmBucketCalculator is a {@link BucketCalculator} that contains special logic for\n+ * identifying which buckets the {@link ResourceUtil#YOUNG_GEN_PROMOTION_RATE} and\n+ * {@link ResourceUtil#OLD_GEN_HEAP_USAGE} resources should be placed into. It returns\n+ * {@link UsageBucket#UNKNOWN} for all other {@link Resource}s.\n+ */\n+public class JvmBucketCalculator implements BucketCalculator {\n+  private BucketCalculator youngGenCalculator;\n+  private BucketCalculator oldGenCalculator;\n+\n+  public JvmBucketCalculator(BucketCalculator youngGenCalculator,", "originalCommit": "431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0ODQ2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r482248467", "bodyText": "I've deleted this class", "author": "sidheart", "createdAt": "2020-09-02T17:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3ODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MDcxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477480719", "bodyText": "The thresholds we are using are not static, they are determined at the object creation time. Maybe we can use helper or something to be explicit.", "author": "yojs", "createdAt": "2020-08-26T17:49:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/StaticBucketCalculator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import java.util.Objects;\n+\n+/**\n+ * StaticBucketCalculator is a {@link BucketCalculator} which places {@link Resource}s into", "originalCommit": "431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0ODM1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r482248351", "bodyText": "I renamed this to BasicBucketCalculator", "author": "sidheart", "createdAt": "2020-09-02T17:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MDcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4OTk5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r477489997", "bodyText": "the enum is named UNDER_UTILIZED in description we mention - The utilization is high, but not quite high enough. This can be confusing.\nIt might make sense to have it in 4 levels such as hot, warm, luke-warm, cold and unknown or just level1, level2 etc. What do you think ?", "author": "yojs", "createdAt": "2020-08-26T18:05:52Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/UsageBucket.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket;\n+\n+/**\n+ * A UsageBucket is associated with a {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource}\n+ * and identifies the state of that Resource. We use these buckets to identify when we have the\n+ * bandwidth to scale a particular resource out or in.\n+ *\n+ * <p>{@link UsageBucket#HEALTHY_WITH_BUFFER} means that the\n+ * {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource} is healthy and\n+ * potentially under utilized. Resources in this state are good candidates for scaling in\n+ *\n+ * <p>{@link UsageBucket#HEALTHY} means that the\n+ * {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource} is in a healthy\n+ * state. Resources in this bucket should probably be left alone.\n+ *\n+ * <p>{@link UsageBucket#UNDER_UTILIZED} means that the", "originalCommit": "431a92a0f81e9999deb532fafb9fd1ce6ece19b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0ODIzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r482248231", "bodyText": "I hadn't properly updated my comments. I have done so, so that now things should be less confusing. I think the current bucket names are more descriptive of what we're trying to do. @vigyasharma or @rguo-aws can be a tie-breaking vote here.", "author": "sidheart", "createdAt": "2020-09-02T17:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4OTk5Nw=="}], "type": "inlineReview"}, {"oid": "1678eccc1469ed8bf24117075e05a4f568993c51", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1678eccc1469ed8bf24117075e05a4f568993c51", "message": "Address PR Comments\n\n- Remove JvmBucketCalculator\n- Rename StaticBucketCalculator to BasicBucketCalculator\n- Update UsageBucket enum comments", "committedDate": "2020-09-02T17:33:23Z", "type": "commit"}, {"oid": "e387a85ad243e01af44a94cdc0d1d507ce60fe8d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e387a85ad243e01af44a94cdc0d1d507ce60fe8d", "message": "Clean up PR", "committedDate": "2020-09-03T17:09:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2OTExOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r483769118", "bodyText": "Should we check here that  underUtilized < healthyWithBuffer < healthy ?", "author": "yojs", "createdAt": "2020-09-04T17:48:53Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/BasicBucketCalculator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import java.util.Objects;\n+\n+/**\n+ * BasicBucketCalculator is a {@link BucketCalculator} which places {@link Resource}s into\n+ * {@link UsageBucket}s based on defined ranges.\n+ */\n+public class BasicBucketCalculator implements BucketCalculator {\n+\n+  // a value in (-inf, underUtilized] is considered underutilized and signals that additional\n+  // resources may be removed for the sake of frugality\n+  double underUtilized;\n+  // a value in (underutilized, healthyWithBuffer] is considered healthy, which means that we may\n+  // be able to increase the pressure on this resource\n+  double healthyWithBuffer;\n+  // a value in (healthyWithBuffer, healthy] is considered healthy and we probably shouldn't mess\n+  // with the resource\n+  // a value in (healthy, inf] is considered unhealthy and we should find ways to decrease the pressure\n+  double healthy;\n+\n+  public BasicBucketCalculator(double underUtilized, double healthyWithBuffer, double healthy) {\n+    this.underUtilized = underUtilized;\n+    this.healthyWithBuffer = healthyWithBuffer;\n+    this.healthy = healthy;", "originalCommit": "e387a85ad243e01af44a94cdc0d1d507ce60fe8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MzA1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/391#discussion_r485083051", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-09-08T17:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc2OTExOA=="}], "type": "inlineReview"}, {"oid": "bcdad35e6f0f5f938bda0657a34936137f9c3b38", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/bcdad35e6f0f5f938bda0657a34936137f9c3b38", "message": "Update logic to validate bucket ranges", "committedDate": "2020-09-08T17:26:23Z", "type": "commit"}, {"oid": "165f378851dd6f35209bdd2f66c2b3c37a93dfdc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/165f378851dd6f35209bdd2f66c2b3c37a93dfdc", "message": "Fix checkstyle issues", "committedDate": "2020-09-08T17:30:09Z", "type": "commit"}]}