{"pr_number": 192, "pr_title": "Change the static summary table mapping to support 1 to n mapping", "pr_createdAt": "2020-05-14T00:59:34Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192", "timeline": [{"oid": "9d4f4ce22fa7b3422f9fb2e158c9dbfb4f0b2ee0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9d4f4ce22fa7b3422f9fb2e158c9dbfb4f0b2ee0", "message": "Change the static summary table mapping to support 1 to n mapping", "committedDate": "2020-05-14T00:56:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMTAyMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r424821023", "bodyText": "(GenericSummary) method.invoke(null, record);, is the null required here?", "author": "khushbr", "createdAt": "2020-05-14T01:29:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -218,42 +215,39 @@ public synchronized RcaResponse readRca(String rca) {\n \n   private void readSummary(GenericSummary upperLevelSummary, int upperLevelPrimaryKey) {\n     String upperLevelTable = upperLevelSummary.getTableName();\n+    List<Class<? extends GenericSummary>> clazzList = SQLiteQueryUtils.getNestedTableMap().getOrDefault(upperLevelSummary.getClass(), null);\n+\n     // stop the recursion here if the table does not have any nested summary.\n-    if (!SQLiteQueryUtils.getNestedTableMap().containsKey(upperLevelTable)) {\n+    if (clazzList == null) {\n       return;\n     }\n-    String currLevelTable = SQLiteQueryUtils.getNestedTableMap().get(upperLevelTable);\n-    Field<Integer> foreignKeyField = DSL.field(\n-        SQLiteQueryUtils.getPrimaryKeyColumnName(upperLevelTable), Integer.class);\n-    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n-        .buildSummaryQuery(create, currLevelTable, upperLevelPrimaryKey, foreignKeyField);\n-    try {\n-      Result<Record> recordList = rcaQuery.fetch();\n-      for (Record record : recordList) {\n-        GenericSummary summary = null;\n-        if (upperLevelSummary instanceof RcaResponse) {\n-          summary = HotClusterSummary.buildSummary(record);\n-        }\n-        else if (upperLevelSummary instanceof HotClusterSummary) {\n-          summary = HotNodeSummary.buildSummary(record);\n-        }\n-        else if (upperLevelSummary instanceof HotNodeSummary) {\n-          summary = HotResourceSummary.buildSummary(record);\n-        }\n-        else if (upperLevelSummary instanceof HotResourceSummary) {\n-          summary = TopConsumerSummary.buildSummary(record);\n-        }\n-        if (summary != null) {\n-          Field<Integer> primaryKeyField = DSL.field(\n-              SQLiteQueryUtils.getPrimaryKeyColumnName(summary.getTableName()), Integer.class);\n-          readSummary(summary, record.get(primaryKeyField));\n-          upperLevelSummary.addNestedSummaryList(summary);\n+    for (Class<? extends GenericSummary> clazz : clazzList) {\n+      Field<Integer> foreignKeyField = DSL.field(\n+          SQLiteQueryUtils.getPrimaryKeyColumnName(upperLevelTable), Integer.class);\n+      SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n+          .buildSummaryQuery(create, clazz.getSimpleName(), upperLevelPrimaryKey, foreignKeyField);\n+      try {\n+        Result<Record> recordList = rcaQuery.fetch();\n+        for (Record record : recordList) {\n+          Method method = clazz.getMethod(\"buildSummary\", Record.class);\n+          GenericSummary summary = (GenericSummary) method.invoke(null, record);", "originalCommit": "9d4f4ce22fa7b3422f9fb2e158c9dbfb4f0b2ee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDQwOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r425380408", "bodyText": "yes. because buildSummary is a static method", "author": "rguo-aws", "createdAt": "2020-05-14T19:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMTM4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r424821381", "bodyText": "Consider adding a metric here.", "author": "khushbr", "createdAt": "2020-05-14T01:31:16Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -218,42 +215,39 @@ public synchronized RcaResponse readRca(String rca) {\n \n   private void readSummary(GenericSummary upperLevelSummary, int upperLevelPrimaryKey) {\n     String upperLevelTable = upperLevelSummary.getTableName();\n+    List<Class<? extends GenericSummary>> clazzList = SQLiteQueryUtils.getNestedTableMap().getOrDefault(upperLevelSummary.getClass(), null);\n+\n     // stop the recursion here if the table does not have any nested summary.\n-    if (!SQLiteQueryUtils.getNestedTableMap().containsKey(upperLevelTable)) {\n+    if (clazzList == null) {\n       return;\n     }\n-    String currLevelTable = SQLiteQueryUtils.getNestedTableMap().get(upperLevelTable);\n-    Field<Integer> foreignKeyField = DSL.field(\n-        SQLiteQueryUtils.getPrimaryKeyColumnName(upperLevelTable), Integer.class);\n-    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n-        .buildSummaryQuery(create, currLevelTable, upperLevelPrimaryKey, foreignKeyField);\n-    try {\n-      Result<Record> recordList = rcaQuery.fetch();\n-      for (Record record : recordList) {\n-        GenericSummary summary = null;\n-        if (upperLevelSummary instanceof RcaResponse) {\n-          summary = HotClusterSummary.buildSummary(record);\n-        }\n-        else if (upperLevelSummary instanceof HotClusterSummary) {\n-          summary = HotNodeSummary.buildSummary(record);\n-        }\n-        else if (upperLevelSummary instanceof HotNodeSummary) {\n-          summary = HotResourceSummary.buildSummary(record);\n-        }\n-        else if (upperLevelSummary instanceof HotResourceSummary) {\n-          summary = TopConsumerSummary.buildSummary(record);\n-        }\n-        if (summary != null) {\n-          Field<Integer> primaryKeyField = DSL.field(\n-              SQLiteQueryUtils.getPrimaryKeyColumnName(summary.getTableName()), Integer.class);\n-          readSummary(summary, record.get(primaryKeyField));\n-          upperLevelSummary.addNestedSummaryList(summary);\n+    for (Class<? extends GenericSummary> clazz : clazzList) {\n+      Field<Integer> foreignKeyField = DSL.field(\n+          SQLiteQueryUtils.getPrimaryKeyColumnName(upperLevelTable), Integer.class);\n+      SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n+          .buildSummaryQuery(create, clazz.getSimpleName(), upperLevelPrimaryKey, foreignKeyField);\n+      try {\n+        Result<Record> recordList = rcaQuery.fetch();\n+        for (Record record : recordList) {\n+          Method method = clazz.getMethod(\"buildSummary\", Record.class);\n+          GenericSummary summary = (GenericSummary) method.invoke(null, record);\n+          if (summary != null) {\n+            Field<Integer> primaryKeyField = DSL.field(\n+                SQLiteQueryUtils.getPrimaryKeyColumnName(summary.getTableName()), Integer.class);\n+            readSummary(summary, record.get(primaryKeyField));\n+            upperLevelSummary.addNestedSummaryList(summary);\n+          }\n         }\n       }\n-    }\n-    catch (DataAccessException de) {\n-      // it is totally fine if we fail to read some certain tables as some types of summaries might be missing\n-      LOG.warn(\"Fail to read Summary table : {}, query = {},  exceptions : {}\", currLevelTable, rcaQuery.toString(), de.getStackTrace());\n+      catch (DataAccessException de) {\n+        // it is totally fine if we fail to read some certain tables as some types of summaries might be missing\n+        LOG.warn(\"Fail to read Summary table : {}, query = {},  exceptions : {}\",\n+            clazz.getSimpleName(), rcaQuery.toString(), de.getStackTrace());\n+      } catch (Exception e) {\n+        // we might got a reflection issue if running into this. Check the NestedTableMap and make sure\n+        // the summary class has been added.\n+        LOG.error(\"Fail to use reflection to build GenericSummary, trace = {}\", e.getStackTrace());", "originalCommit": "9d4f4ce22fa7b3422f9fb2e158c9dbfb4f0b2ee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDgyNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r425380827", "bodyText": "I don't think we need to add a metric here. we will only run into this if there is a bug in this code which doesn't needs to be shown up in the metric.", "author": "rguo-aws", "createdAt": "2020-05-14T19:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgyMTM4MQ=="}], "type": "inlineReview"}, {"oid": "6c2cc593ee20a5063fa2adc79435f562415f8087", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6c2cc593ee20a5063fa2adc79435f562415f8087", "message": "Merge remote-tracking branch 'origin' into rguo-1-to-n-summary", "committedDate": "2020-05-14T19:48:32Z", "type": "commit"}, {"oid": "04992c9045828493da6bf1771f15f43b96923f2a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/04992c9045828493da6bf1771f15f43b96923f2a", "message": "fix conflict", "committedDate": "2020-05-14T19:54:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTE2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r425451165", "bodyText": "I think the nesting should be internal to each top level summary rather than in the util class.", "author": "yojs", "createdAt": "2020-05-14T21:50:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -48,24 +48,36 @@\n  * A utility class to query cluster, node and resource level summary for a rca\n  */\n public class SQLiteQueryUtils {\n-  private static final Map<String, String> nestedTableMap;\n+  private static final Map<Class<? extends GenericSummary>, List<Class<? extends GenericSummary>>> nestedTableMap;\n   private static final Map<String, String> temperatureProfileNestedSummaryMap;\n   private static final Set<String> clusterLevelRCA;\n   private static final Set<String> temperatureProfileRCASet;\n \n-  // to map table => its nested table\n-  // e.g. HotClusterSummary => HotNodeSummary\n-  static {\n-    Map<String, String> tableMap = new HashMap<>();\n-    tableMap.put(ClusterTemperatureSummary.TABLE_NAME, ClusterDimensionalSummary.TABLE_NAME);\n \n-    tableMap.put(ResourceFlowUnit.RCA_TABLE_NAME, HOT_CLUSTER_SUMMARY_TABLE);\n-    tableMap.put(HOT_CLUSTER_SUMMARY_TABLE, HOT_NODE_SUMMARY_TABLE);\n-    tableMap.put(HOT_NODE_SUMMARY_TABLE, HOT_RESOURCE_SUMMARY_TABLE);\n-    tableMap.put(HOT_RESOURCE_SUMMARY_TABLE, TOP_CONSUMER_SUMMARY_TABLE);\n+  // mapping between table => its nested table\n+  // RCA API query\n+  // |\n+  // RcaResponse -- HotClusterSummary -- HotNodeSummary -- HotResourceSummary -- TopConsumerSummary\n+  //                                                   |\n+  //                                                    -- HotShardSummary\n+  static {\n+    Map<Class<? extends GenericSummary>, List<Class<? extends GenericSummary>>> tableMap = new HashMap<>();\n+    tableMap.put(RcaResponse.class, Collections.unmodifiableList(Collections.singletonList(\n+        HotClusterSummary.class)));\n+    tableMap.put(HotClusterSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        HotNodeSummary.class)));\n+    tableMap.put(HotNodeSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        HotResourceSummary.class)));\n+    tableMap.put(HotResourceSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        TopConsumerSummary.class)));", "originalCommit": "04992c9045828493da6bf1771f15f43b96923f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTM1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r425495354", "bodyText": "thanks for pointing this out. yeah this is indeed a much cleaner implementation. I have added the list to each summary class", "author": "rguo-aws", "createdAt": "2020-05-15T00:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r425451249", "bodyText": "remove ?", "author": "yojs", "createdAt": "2020-05-14T21:50:32Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -48,24 +48,36 @@\n  * A utility class to query cluster, node and resource level summary for a rca\n  */\n public class SQLiteQueryUtils {\n-  private static final Map<String, String> nestedTableMap;\n+  private static final Map<Class<? extends GenericSummary>, List<Class<? extends GenericSummary>>> nestedTableMap;\n   private static final Map<String, String> temperatureProfileNestedSummaryMap;\n   private static final Set<String> clusterLevelRCA;\n   private static final Set<String> temperatureProfileRCASet;\n \n-  // to map table => its nested table\n-  // e.g. HotClusterSummary => HotNodeSummary\n-  static {\n-    Map<String, String> tableMap = new HashMap<>();\n-    tableMap.put(ClusterTemperatureSummary.TABLE_NAME, ClusterDimensionalSummary.TABLE_NAME);\n \n-    tableMap.put(ResourceFlowUnit.RCA_TABLE_NAME, HOT_CLUSTER_SUMMARY_TABLE);\n-    tableMap.put(HOT_CLUSTER_SUMMARY_TABLE, HOT_NODE_SUMMARY_TABLE);\n-    tableMap.put(HOT_NODE_SUMMARY_TABLE, HOT_RESOURCE_SUMMARY_TABLE);\n-    tableMap.put(HOT_RESOURCE_SUMMARY_TABLE, TOP_CONSUMER_SUMMARY_TABLE);\n+  // mapping between table => its nested table\n+  // RCA API query\n+  // |\n+  // RcaResponse -- HotClusterSummary -- HotNodeSummary -- HotResourceSummary -- TopConsumerSummary\n+  //                                                   |\n+  //                                                    -- HotShardSummary\n+  static {\n+    Map<Class<? extends GenericSummary>, List<Class<? extends GenericSummary>>> tableMap = new HashMap<>();\n+    tableMap.put(RcaResponse.class, Collections.unmodifiableList(Collections.singletonList(\n+        HotClusterSummary.class)));\n+    tableMap.put(HotClusterSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        HotNodeSummary.class)));\n+    tableMap.put(HotNodeSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        HotResourceSummary.class)));\n+    tableMap.put(HotResourceSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        TopConsumerSummary.class)));\n+\n+    //temperature profiling mapping\n+    tableMap.put(ClusterTemperatureSummary.class, Collections.unmodifiableList(Collections.singletonList(\n+        ClusterDimensionalSummary.class)));\n     nestedTableMap = Collections.unmodifiableMap(tableMap);\n   }\n \n+", "originalCommit": "04992c9045828493da6bf1771f15f43b96923f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTM5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/192#discussion_r425495392", "bodyText": "removed", "author": "rguo-aws", "createdAt": "2020-05-15T00:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1MTI0OQ=="}], "type": "inlineReview"}, {"oid": "52a5fccd0c143eca324648ed6ffdff1924ea1c9d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/52a5fccd0c143eca324648ed6ffdff1924ea1c9d", "message": "address PR comments", "committedDate": "2020-05-15T00:05:01Z", "type": "commit"}, {"oid": "3043d06a23420cafce4e868929464ab722f375cc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3043d06a23420cafce4e868929464ab722f375cc", "message": "Remove reflection", "committedDate": "2020-05-20T20:34:18Z", "type": "commit"}]}