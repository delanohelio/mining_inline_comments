{"pr_number": 59, "pr_title": "Refactor networking layer", "pr_createdAt": "2020-01-15T00:02:44Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59", "timeline": [{"oid": "e622e1ff258562b18220f6d971aef158e83c1567", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e622e1ff258562b18220f6d971aef158e83c1567", "message": "Make node class generic", "committedDate": "2019-12-19T22:01:07Z", "type": "commit"}, {"oid": "1d3cde28ff1fe6ce6d5bbd93ee1cfa04532c0c1f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1d3cde28ff1fe6ce6d5bbd93ee1cfa04532c0c1f", "message": "Remove duplicated task", "committedDate": "2019-12-19T23:54:55Z", "type": "commit"}, {"oid": "530596e16d7b6668a5c9f2f151e5abca36d77f51", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/530596e16d7b6668a5c9f2f151e5abca36d77f51", "message": "Change graph nodes in the graph to use typed version of the Rca class.", "committedDate": "2019-12-20T00:09:14Z", "type": "commit"}, {"oid": "60bf5e1e7f6ec6ca52ec58a27d2156fdacb1c6e2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/60bf5e1e7f6ec6ca52ec58a27d2156fdacb1c6e2", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/performance-analyzer-rca into generic-node-type", "committedDate": "2020-01-06T18:34:37Z", "type": "commit"}, {"oid": "35f21ea841f2e4a2f0f1c24ab5e8f633c70ddabb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/35f21ea841f2e4a2f0f1c24ab5e8f633c70ddabb", "message": "Added documentation and split the generateFlowUnitsFromLocal method", "committedDate": "2020-01-06T19:28:36Z", "type": "commit"}, {"oid": "f186c4051880551cf050da28adf71021fba376fe", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f186c4051880551cf050da28adf71021fba376fe", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/performance-analyzer-rca into thr_safe", "committedDate": "2020-01-10T04:13:57Z", "type": "commit"}, {"oid": "924fe7eee86de69415e65f028a764d4e3e0f9add", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/924fe7eee86de69415e65f028a764d4e3e0f9add", "message": "Change execution model of the networking layer", "committedDate": "2020-01-14T02:34:30Z", "type": "commit"}, {"oid": "5c0d1a0ff6db05315fc7d7c82b7a2d1e2c9f9fc6", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5c0d1a0ff6db05315fc7d7c82b7a2d1e2c9f9fc6", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/performance-analyzer-rca into thr_safe", "committedDate": "2020-01-14T03:18:55Z", "type": "commit"}, {"oid": "0331de6ff3434cd8b4e04b3171f391be3abad5c1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0331de6ff3434cd8b4e04b3171f391be3abad5c1", "message": "Refactor networking code", "committedDate": "2020-01-14T19:01:18Z", "type": "commit"}, {"oid": "f661ef63756ae55282de4cb5c14f2a6c2ee2dd61", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f661ef63756ae55282de4cb5c14f2a6c2ee2dd61", "message": "Handle stop gracefully for the network activities", "committedDate": "2020-01-14T22:47:16Z", "type": "commit"}, {"oid": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "message": "Fix unit test and undo date format change", "committedDate": "2020-01-14T22:56:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzA3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r366643076", "bodyText": "Let's add a line of comment for public method", "author": "yojs", "createdAt": "2020-01-15T00:28:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -43,24 +47,37 @@\n   private static final Logger LOG = LogManager.getLogger(GRPCConnectionManager.class);\n   private static final String EMPTY_STRING = \"\";\n \n-  private Map<String, ManagedChannel> perHostChannelMap = new HashMap<>();\n-  private Map<String, InterNodeRpcServiceGrpc.InterNodeRpcServiceStub> perHostClientStubMap =\n-      new HashMap<>();\n+  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n+      new ConcurrentHashMap<>();\n+  private ConcurrentMap<String, AtomicReference<InterNodeRpcServiceStub>> perHostClientStubMap =\n+      new ConcurrentHashMap<>();\n \n   private final boolean shouldUseHttps;\n \n   public GRPCConnectionManager(final boolean shouldUseHttps) {\n     this.shouldUseHttps = shouldUseHttps;\n   }\n \n-  public InterNodeRpcServiceGrpc.InterNodeRpcServiceStub getClientStubForHost(\n+  public InterNodeRpcServiceStub getClientStubForHost(", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjA0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072042", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-01-17T18:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzQ4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r366643482", "bodyText": "For a synchronized method, can we add the callers/threads ?", "author": "yojs", "createdAt": "2020-01-15T00:30:03Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -43,24 +47,37 @@\n   private static final Logger LOG = LogManager.getLogger(GRPCConnectionManager.class);\n   private static final String EMPTY_STRING = \"\";\n \n-  private Map<String, ManagedChannel> perHostChannelMap = new HashMap<>();\n-  private Map<String, InterNodeRpcServiceGrpc.InterNodeRpcServiceStub> perHostClientStubMap =\n-      new HashMap<>();\n+  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n+      new ConcurrentHashMap<>();\n+  private ConcurrentMap<String, AtomicReference<InterNodeRpcServiceStub>> perHostClientStubMap =\n+      new ConcurrentHashMap<>();\n \n   private final boolean shouldUseHttps;\n \n   public GRPCConnectionManager(final boolean shouldUseHttps) {\n     this.shouldUseHttps = shouldUseHttps;\n   }\n \n-  public InterNodeRpcServiceGrpc.InterNodeRpcServiceStub getClientStubForHost(\n+  public InterNodeRpcServiceStub getClientStubForHost(\n       final String remoteHost) {\n     if (perHostClientStubMap.containsKey(remoteHost)) {\n-      return perHostClientStubMap.get(remoteHost);\n+      return perHostClientStubMap.get(remoteHost).get();\n     }\n+    return addOrUpdateClientStubForHost(remoteHost);\n+  }\n \n-    final InterNodeRpcServiceGrpc.InterNodeRpcServiceStub stub = buildStubForHost(remoteHost);\n-    perHostClientStubMap.put(remoteHost, stub);\n+  private synchronized InterNodeRpcServiceStub addOrUpdateClientStubForHost(final String remoteHost) {", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjA4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072085", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-01-17T18:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NTkyMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r366645922", "bodyText": "Is this comment relevant ?", "author": "yojs", "createdAt": "2020-01-15T00:40:06Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/NetClient.java", "diffHunk": "@@ -83,27 +103,36 @@ public void flushStream(final String remoteHost) {\n   }\n \n   private void closeAllDataStreams() {\n-    for (Map.Entry<String, StreamObserver<FlowUnitMessage>> entry :\n+    for (Map.Entry<String, AtomicReference<StreamObserver<FlowUnitMessage>>> entry :\n         perHostOpenDataStreamMap.entrySet()) {\n       LOG.debug(\"Closing stream for host: {}\", entry.getKey());\n       // Sending an onCompleted should trigger the subscriber's node state manager\n       // and cause this host to be put under observation.f\n-      entry.getValue().onCompleted();\n+      entry.getValue().get().onCompleted();\n       perHostOpenDataStreamMap.remove(entry.getKey());\n     }\n   }\n \n   private StreamObserver<FlowUnitMessage> getDataStreamForHost(\n       final String remoteHost, final StreamObserver<PublishResponse> serverResponseStream) {\n     if (perHostOpenDataStreamMap.containsKey(remoteHost)) {\n-      return perHostOpenDataStreamMap.get(remoteHost);\n+      return perHostOpenDataStreamMap.get(remoteHost).get();\n     }\n+    return addOrUpdateDataStreamForHost(remoteHost, serverResponseStream);\n+  }\n \n+  private synchronized StreamObserver<FlowUnitMessage> addOrUpdateDataStreamForHost(\n+      final String remoteHost, final StreamObserver<PublishResponse> serverResponseStream) {\n     InterNodeRpcServiceGrpc.InterNodeRpcServiceStub stub =\n         connectionManager.getClientStubForHost(remoteHost);\n     final StreamObserver<FlowUnitMessage> dataStream = stub.publish(serverResponseStream);\n-\n-    perHostOpenDataStreamMap.put(remoteHost, dataStream);\n+    if (perHostOpenDataStreamMap.get(remoteHost) == null) {\n+      // happens-before: updating AtomicReference.", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1MjYzNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367152636", "bodyText": "I can remove it after code review. I thought it will help in making clear how visibility is updated during the review.", "author": "ktkrg", "createdAt": "2020-01-15T23:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NTkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0OTI1OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r366649259", "bodyText": "can we use perHostOpenDataStreamMap.getOrDefault(remoteHost, new AtomicReference<>(dataStream)).set(dataStream) ?", "author": "yojs", "createdAt": "2020-01-15T00:53:35Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/NetClient.java", "diffHunk": "@@ -83,27 +103,36 @@ public void flushStream(final String remoteHost) {\n   }\n \n   private void closeAllDataStreams() {\n-    for (Map.Entry<String, StreamObserver<FlowUnitMessage>> entry :\n+    for (Map.Entry<String, AtomicReference<StreamObserver<FlowUnitMessage>>> entry :\n         perHostOpenDataStreamMap.entrySet()) {\n       LOG.debug(\"Closing stream for host: {}\", entry.getKey());\n       // Sending an onCompleted should trigger the subscriber's node state manager\n       // and cause this host to be put under observation.f\n-      entry.getValue().onCompleted();\n+      entry.getValue().get().onCompleted();\n       perHostOpenDataStreamMap.remove(entry.getKey());\n     }\n   }\n \n   private StreamObserver<FlowUnitMessage> getDataStreamForHost(\n       final String remoteHost, final StreamObserver<PublishResponse> serverResponseStream) {\n     if (perHostOpenDataStreamMap.containsKey(remoteHost)) {\n-      return perHostOpenDataStreamMap.get(remoteHost);\n+      return perHostOpenDataStreamMap.get(remoteHost).get();\n     }\n+    return addOrUpdateDataStreamForHost(remoteHost, serverResponseStream);\n+  }\n \n+  private synchronized StreamObserver<FlowUnitMessage> addOrUpdateDataStreamForHost(\n+      final String remoteHost, final StreamObserver<PublishResponse> serverResponseStream) {\n     InterNodeRpcServiceGrpc.InterNodeRpcServiceStub stub =\n         connectionManager.getClientStubForHost(remoteHost);\n     final StreamObserver<FlowUnitMessage> dataStream = stub.publish(serverResponseStream);\n-\n-    perHostOpenDataStreamMap.put(remoteHost, dataStream);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjExMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072111", "bodyText": "Fixed.", "author": "ktkrg", "createdAt": "2020-01-17T18:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0OTI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExOTcxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367119711", "bodyText": "Should we be more specific and say Network buffers ?", "author": "yojs", "createdAt": "2020-01-15T21:36:18Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/StatExceptionCode.java", "diffHunk": "@@ -33,6 +33,8 @@\n   READER_PARSER_ERROR(\"ReaderParserError\"),\n   READER_RESTART_PROCESSING(\"ReaderRestartProcessing\"),\n   RCA_SCHEDULER_RESTART_PROCESSING(\"RCASchedulerRestartProcessing\"),\n+  RCA_NETWORK_ERROR(\"RcaNetworkError\"),\n+  RCA_BUFFER_FULL_ERROR(\"RcaBufferFullError\"),", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjE0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072149", "bodyText": "Changed.", "author": "ktkrg", "createdAt": "2020-01-17T18:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExOTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDI0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367120241", "bodyText": "I know we haven't been doing it, but we should add a comment for what the members are used for ?", "author": "yojs", "createdAt": "2020-01-15T21:37:39Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -43,24 +47,37 @@\n   private static final Logger LOG = LogManager.getLogger(GRPCConnectionManager.class);\n   private static final String EMPTY_STRING = \"\";\n \n-  private Map<String, ManagedChannel> perHostChannelMap = new HashMap<>();\n-  private Map<String, InterNodeRpcServiceGrpc.InterNodeRpcServiceStub> perHostClientStubMap =\n-      new HashMap<>();\n+  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTY0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369825642", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-01-22T21:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMTk3NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367121974", "bodyText": "If we throw an exception here and don't send the subscription, will we retry later. Can we add a comment to that effect ?", "author": "yojs", "createdAt": "2020-01-15T21:41:47Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/NetClient.java", "diffHunk": "@@ -41,26 +48,39 @@ public NetClient(final GRPCConnectionManager connectionManager) {\n     this.connectionManager = connectionManager;\n   }\n \n-  private Map<String, StreamObserver<FlowUnitMessage>> perHostOpenDataStreamMap = new HashMap<>();\n+  private ConcurrentMap<String, AtomicReference<StreamObserver<FlowUnitMessage>>> perHostOpenDataStreamMap =\n+      new ConcurrentHashMap<>();\n \n   public void subscribe(\n       final String remoteHost,\n       final SubscribeMessage subscribeMessage,\n       StreamObserver<SubscribeResponse> serverResponseStream) {\n     LOG.debug(\"Trying to send intent message to {}\", remoteHost);\n-    connectionManager\n-        .getClientStubForHost(remoteHost)\n-        .subscribe(subscribeMessage, serverResponseStream);\n+    try {\n+      connectionManager\n+          .getClientStubForHost(remoteHost)\n+          .subscribe(subscribeMessage, serverResponseStream);\n+    } catch (StatusRuntimeException sre) {\n+      LOG.error(\"Encountered an error trying to subscribe. Status: {}\",", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyNjI2NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369326264", "bodyText": "Added the ability to retry subscriptions for all nodes that we don't have a valid subscription state for. Noted it in the javadoc for the method.", "author": "ktkrg", "createdAt": "2020-01-22T01:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMTk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNTUxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367125519", "bodyText": "Lets add the constant to RcaConsts class", "author": "yojs", "createdAt": "2020-01-15T21:49:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -313,16 +342,35 @@ private void start() {\n       Queryable db = new MetricsDBProvider();\n       ThresholdMain thresholdMain = new ThresholdMain(RcaConsts.THRESHOLDS_PATH, rcaConf);\n       Persistable persistable = PersistenceFactory.create(rcaConf);\n+      ThreadFactory networkThreadFactory =\n+          new ThreadFactoryBuilder().setNameFormat(\"rca-net-%d\").setDaemon(true).build();\n+      networkActivitiesThreadPool = new ScheduledThreadPoolExecutor(\n+          3, networkThreadFactory);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjE4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072189", "bodyText": "done", "author": "ktkrg", "createdAt": "2020-01-17T18:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzIxMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367127213", "bodyText": "It might make sense to increase that timeout ?", "author": "yojs", "createdAt": "2020-01-15T21:53:59Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -338,16 +386,60 @@ private void start() {\n     }\n   }\n \n+  private SubscriptionReceiver buildSubscriptionReceiver(\n+      final ScheduledExecutorService subscriptionReceiverThreadPool) {\n+    NetworkRequestQueue<CompositeSubscribeRequest> rxQ = new NetworkRequestQueue<>();\n+    SubscriptionReceiverTask subscriptionReceiverTask =\n+        new SubscriptionReceiverTask(subscriptionManager, rxQ);\n+    return new SubscriptionReceiver(rxQ, subscriptionReceiverThreadPool, subscriptionReceiverTask);\n+  }\n+\n+  private SubscriptionSender buildSubscriptionSender(\n+      final ScheduledExecutorService subscriptionSendThreadPool) {\n+    NetworkRequestQueue<IntentMsg> txBroadcastQ = new NetworkRequestQueue<>();\n+    NetworkRequestQueue<UnicastIntentMsg> txUnicastQ = new NetworkRequestQueue<>();\n+    SubscriptionSendTask subscriptionSendTask = new SubscriptionSendTask(subscriptionManager,\n+        txBroadcastQ, txUnicastQ, rcaNetClient);\n+    return new SubscriptionSender(txBroadcastQ, txUnicastQ,\n+        subscriptionSendTask, subscriptionSendThreadPool);\n+  }\n+\n+  private Sender buildSender(final ScheduledExecutorService sendThreadPool) {\n+    NetworkRequestQueue<DataMsg> txQ = new NetworkRequestQueue<>();\n+    SendTask sendTask = new SendTask(subscriptionManager, txQ, rcaNetClient);\n+    return new Sender(txQ, sendTask, sendThreadPool);\n+  }\n+\n+  private Receiver buildReceiver(final ScheduledExecutorService recvThreadPool) {\n+    NetworkRequestQueue<FlowUnitMessage> rxQ = new NetworkRequestQueue<>();\n+    ReceivedFlowUnitStore receivedFlowUnitStore = new ReceivedFlowUnitStore();\n+    ReceiveTask receiveTask = new ReceiveTask(rxQ, receivedFlowUnitStore, nodeStateManager);\n+\n+    return new Receiver(rxQ, recvThreadPool, receivedFlowUnitStore, receiveTask);\n+  }\n+\n   private void stop() {\n     rcaScheduler.shutdown();\n     rcaNetClient.shutdown();\n     rcaNetServer.shutdown();\n+    networkActivitiesThreadPool.shutdown();\n+    try {\n+      networkActivitiesThreadPool.awaitTermination(1, TimeUnit.SECONDS);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjIyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072225", "bodyText": "Increased to a minute.", "author": "ktkrg", "createdAt": "2020-01-17T18:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzg1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367127856", "bodyText": "Is this really an exception ?", "author": "yojs", "createdAt": "2020-01-15T21:55:37Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -338,16 +386,60 @@ private void start() {\n     }\n   }\n \n+  private SubscriptionReceiver buildSubscriptionReceiver(\n+      final ScheduledExecutorService subscriptionReceiverThreadPool) {\n+    NetworkRequestQueue<CompositeSubscribeRequest> rxQ = new NetworkRequestQueue<>();\n+    SubscriptionReceiverTask subscriptionReceiverTask =\n+        new SubscriptionReceiverTask(subscriptionManager, rxQ);\n+    return new SubscriptionReceiver(rxQ, subscriptionReceiverThreadPool, subscriptionReceiverTask);\n+  }\n+\n+  private SubscriptionSender buildSubscriptionSender(\n+      final ScheduledExecutorService subscriptionSendThreadPool) {\n+    NetworkRequestQueue<IntentMsg> txBroadcastQ = new NetworkRequestQueue<>();\n+    NetworkRequestQueue<UnicastIntentMsg> txUnicastQ = new NetworkRequestQueue<>();\n+    SubscriptionSendTask subscriptionSendTask = new SubscriptionSendTask(subscriptionManager,\n+        txBroadcastQ, txUnicastQ, rcaNetClient);\n+    return new SubscriptionSender(txBroadcastQ, txUnicastQ,\n+        subscriptionSendTask, subscriptionSendThreadPool);\n+  }\n+\n+  private Sender buildSender(final ScheduledExecutorService sendThreadPool) {\n+    NetworkRequestQueue<DataMsg> txQ = new NetworkRequestQueue<>();\n+    SendTask sendTask = new SendTask(subscriptionManager, txQ, rcaNetClient);\n+    return new Sender(txQ, sendTask, sendThreadPool);\n+  }\n+\n+  private Receiver buildReceiver(final ScheduledExecutorService recvThreadPool) {\n+    NetworkRequestQueue<FlowUnitMessage> rxQ = new NetworkRequestQueue<>();\n+    ReceivedFlowUnitStore receivedFlowUnitStore = new ReceivedFlowUnitStore();\n+    ReceiveTask receiveTask = new ReceiveTask(rxQ, receivedFlowUnitStore, nodeStateManager);\n+\n+    return new Receiver(rxQ, recvThreadPool, receivedFlowUnitStore, receiveTask);\n+  }\n+\n   private void stop() {\n     rcaScheduler.shutdown();\n     rcaNetClient.shutdown();\n     rcaNetServer.shutdown();\n+    networkActivitiesThreadPool.shutdown();\n+    try {\n+      networkActivitiesThreadPool.awaitTermination(1, TimeUnit.SECONDS);\n+    } catch (InterruptedException e) {\n+      LOG.warn(\"Awaiting termination interrupted. {}\", e.getCause(), e);\n+      networkActivitiesThreadPool.shutdownNow();\n+    }\n+    flowUnitSender.stop();\n+    flowUnitReceiver.stop();\n+    subscriptionSender.stop();\n+    subscriptionReceiver.stop();\n     removeRcaRequestHandler();\n   }\n \n   private void restart() {\n     stop();\n     start();\n+    StatsCollector.instance().logException(StatExceptionCode.RCA_SCHEDULER_RESTART_PROCESSING);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3Mjk2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072961", "bodyText": "It's more of a metric than an exception, and I changed it to a metric and added  a new exception metric when the scheduler stops due to an exception.", "author": "ktkrg", "createdAt": "2020-01-17T18:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODAyOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367128028", "bodyText": "Can we add doc comments for the class ?", "author": "yojs", "createdAt": "2020-01-15T21:55:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/UnicastIntentMsg.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.messages;\n+\n+import java.util.Map;\n+\n+public class UnicastIntentMsg extends IntentMsg {", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3Mjk3OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368072978", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-01-17T18:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjUxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367136516", "bodyText": "Do you think instead of making it a program constant, we make it part of rca.conf ? So that changing this does not require a code deployment just a PA restart", "author": "yojs", "createdAt": "2020-01-15T22:16:56Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/NetworkRequestQueue.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+\n+/**\n+ * Class that represents a custom bounded and concurrent queue.\n+ */\n+public class NetworkRequestQueue<T> {\n+\n+  private static final int DEFAULT_MAX_Q_SIZE = 200;", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzE1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368073155", "bodyText": "Made the queue size for the threadpool executor configurable now.", "author": "ktkrg", "createdAt": "2020-01-17T18:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjgzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367136831", "bodyText": "Do we want to remove all the happens-before comments ?", "author": "yojs", "createdAt": "2020-01-15T22:17:39Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/NetworkRequestQueue.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+\n+/**\n+ * Class that represents a custom bounded and concurrent queue.\n+ */\n+public class NetworkRequestQueue<T> {\n+\n+  private static final int DEFAULT_MAX_Q_SIZE = 200;\n+\n+  private final BlockingQueue<T> messageQueue;\n+\n+  public NetworkRequestQueue() {\n+    this(DEFAULT_MAX_Q_SIZE);\n+  }\n+\n+  public NetworkRequestQueue(final int queueSize) {\n+    this.messageQueue = new ArrayBlockingQueue<>(queueSize);\n+  }\n+\n+  /**\n+   * Adds a message to the queue if not full.\n+   *\n+   * @param message The message that needs to be enqueued..\n+   * @return true if successfully enqueued, false otherwise.\n+   */\n+  public boolean offer(final T message) {\n+    // happens-before (java.util.concurrent collection)", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4ODU3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367188577", "bodyText": "I will get rid of it after the review.", "author": "ktkrg", "createdAt": "2020-01-16T01:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNzY5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367137697", "bodyText": "Shouldn't we drain out all the queues, otherwise at restart we will send a bunch of stale messages in the send queue", "author": "yojs", "createdAt": "2020-01-15T22:19:45Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/Receiver.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.google.common.collect.ImmutableList;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Networking component that handles receiving of flow units.\n+ */\n+public class Receiver {\n+\n+  private static final Logger LOG = LogManager.getLogger(Receiver.class);\n+  private final NetworkRequestQueue<FlowUnitMessage> rxQ;\n+  private final ScheduledExecutorService threadPool;\n+  private final ReceivedFlowUnitStore receivedFlowUnitStore;\n+  private final ReceiveTask recvTask;\n+\n+  public Receiver(\n+      final NetworkRequestQueue<FlowUnitMessage> rxQ,\n+      final ScheduledExecutorService threadPool,\n+      final ReceivedFlowUnitStore receivedFlowUnitStore,\n+      final ReceiveTask recvTask) {\n+    this.rxQ = rxQ;\n+    this.threadPool = threadPool;\n+    this.receivedFlowUnitStore = receivedFlowUnitStore;\n+    this.recvTask = recvTask;\n+  }\n+\n+  public void start() {\n+    threadPool.scheduleAtFixedRate(recvTask, 0, 250, TimeUnit.MILLISECONDS);\n+  }\n+\n+  public void stop() {\n+    // drain out the queue to stop processing.\n+    rxQ.drain();", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzIxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368073219", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-01-17T18:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNzY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MTM3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367141377", "bodyText": "doc comment for the class", "author": "yojs", "createdAt": "2020-01-15T22:28:58Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManager.java", "diffHunk": "@@ -15,64 +15,36 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n \n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeMessage;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeResponse;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeResponse.SubscriptionStatus;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.GRPCConnectionManager;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.NetClient;\n-import io.grpc.stub.StreamObserver;\n-import java.util.HashMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class SubscriptionManager {", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzI1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368073253", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-01-17T18:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MTM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MTgwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367141805", "bodyText": "For dumpStats, should we also say the amount of payload each queue has ?", "author": "yojs", "createdAt": "2020-01-15T22:30:07Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManager.java", "diffHunk": "@@ -110,30 +70,36 @@ public SubscriptionStatus addSubscriber(\n \n     Set<String> currentSubscribers = subscriberMap.getOrDefault(graphNode, new HashSet<>());\n     currentSubscribers.add(subscriberHostAddress);\n+    // happens-before: update to a java.util.concurrent collection. Updated value will be visible\n+    // to subsequent reads.\n     subscriberMap.put(graphNode, currentSubscribers);\n \n     LOG.debug(\"locus matched. Added subscriber {} for {}\", subscriberHostAddress, graphNode);\n     return SubscriptionStatus.SUCCESS;\n   }\n \n   public boolean isNodeSubscribed(final String graphNode) {\n+    // happens-before: reading from a java.util.concurrent collection which guarantees read\n+    // reflects most recent completed update.\n     return subscriberMap.containsKey(graphNode);\n   }\n \n-  public Set<String> getSubscribersFor(final String graphNode) {\n-    return subscriberMap.getOrDefault(graphNode, new HashSet<>());\n+  public ImmutableSet<String> getSubscribersFor(final String graphNode) {\n+    // happens-before: ImmutableSet - final field semantics. Reading from java.util.concurrent\n+    // collection.\n+    return ImmutableSet.copyOf(subscriberMap.getOrDefault(graphNode, new HashSet<>()));\n   }\n \n-  private void addPublisher(final String graphNode, final String publisherHostAddress) {\n-    LOG.debug(\"Added publisher: {} for graphNode: {}\", publisherHostAddress, graphNode);\n+  public synchronized void addPublisher(final String graphNode, final String publisherHostAddress) {\n+    LOG.info(\"Added publisher: {} for graphNode: {}\", publisherHostAddress, graphNode);\n \n     final Set<String> currentPublishers = publisherMap.getOrDefault(graphNode, new HashSet<>());\n     currentPublishers.add(publisherHostAddress);\n     publisherMap.put(graphNode, currentPublishers);\n   }\n \n   public void dumpStats() {\n-    LOG.debug(\"Subbscribers: {}\", subscriberMap);\n+    LOG.debug(\"Subscribers: {}\", subscriberMap);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzI5MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368073290", "bodyText": "Removed dumpstats. Was debug code.", "author": "ktkrg", "createdAt": "2020-01-17T18:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjIxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367142216", "bodyText": "How did we arrive at this number ? Can we move this to RcaConst class ?", "author": "yojs", "createdAt": "2020-01-15T22:31:14Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionReceiver.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Networking component that handles receiving subscriptions.\n+ */\n+public class SubscriptionReceiver {\n+\n+  private static final Logger LOG = LogManager.getLogger(SubscriptionReceiver.class);\n+  private final NetworkRequestQueue<CompositeSubscribeRequest> rxQ;\n+  private final ScheduledExecutorService threadPool;\n+  private final SubscriptionReceiverTask subscriptionReceiverTask;\n+\n+  public SubscriptionReceiver(\n+      NetworkRequestQueue<CompositeSubscribeRequest> rxQ,\n+      ScheduledExecutorService threadPool,\n+      SubscriptionReceiverTask subscriptionReceiverTask) {\n+    this.rxQ = rxQ;\n+    this.threadPool = threadPool;\n+    this.subscriptionReceiverTask = subscriptionReceiverTask;\n+  }\n+\n+  public boolean enqueue(final CompositeSubscribeRequest compositeSubscribeRequest) {\n+    return rxQ.offer(compositeSubscribeRequest);\n+  }\n+\n+  public void start() {\n+    threadPool.scheduleAtFixedRate(subscriptionReceiverTask, 0, 250, TimeUnit.MILLISECONDS);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTM2OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075368", "bodyText": "The scheduler's periodicity is 1s, so if we wanted to receive and send in that 1s, setting send and receive periodicity to 250ms will give us two chances(but I guess that explanation doesn't hold water because there is no synchronization across schedulers, now that I think about it), but the higher the frequency, the more chances you get to send/receive - was my thinking. I've changed it from being a poll based model to push based where we queue the message up by calling execute on a threadpoolexecutor as soon as we can so it's not needed anymore.", "author": "ktkrg", "createdAt": "2020-01-17T18:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjQyNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367142424", "bodyText": "Probably we should drain all queues ?", "author": "yojs", "createdAt": "2020-01-15T22:31:47Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionReceiver.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Networking component that handles receiving subscriptions.\n+ */\n+public class SubscriptionReceiver {\n+\n+  private static final Logger LOG = LogManager.getLogger(SubscriptionReceiver.class);\n+  private final NetworkRequestQueue<CompositeSubscribeRequest> rxQ;\n+  private final ScheduledExecutorService threadPool;\n+  private final SubscriptionReceiverTask subscriptionReceiverTask;\n+\n+  public SubscriptionReceiver(\n+      NetworkRequestQueue<CompositeSubscribeRequest> rxQ,\n+      ScheduledExecutorService threadPool,\n+      SubscriptionReceiverTask subscriptionReceiverTask) {\n+    this.rxQ = rxQ;\n+    this.threadPool = threadPool;\n+    this.subscriptionReceiverTask = subscriptionReceiverTask;\n+  }\n+\n+  public boolean enqueue(final CompositeSubscribeRequest compositeSubscribeRequest) {\n+    return rxQ.offer(compositeSubscribeRequest);\n+  }\n+\n+  public void start() {\n+    threadPool.scheduleAtFixedRate(subscriptionReceiverTask, 0, 250, TimeUnit.MILLISECONDS);\n+  }\n+\n+  public void stop() {\n+    // drain out the queue to stop processing.\n+    rxQ.drain();", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTQwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075401", "bodyText": "Removed file.", "author": "ktkrg", "createdAt": "2020-01-17T18:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0Mjg3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367142875", "bodyText": "change the log message ? kk", "author": "yojs", "createdAt": "2020-01-15T22:32:59Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionSendTask.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.NetClient;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.messages.IntentMsg;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.messages.UnicastIntentMsg;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor.NodeDetails;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class that handles sending of subscription requests from the queue.\n+ */\n+public class SubscriptionSendTask implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger(SubscriptionSendTask.class);\n+  private final SubscriptionManager subscriptionManager;\n+  private final NetworkRequestQueue<IntentMsg> txBroadcastQ;\n+  private final NetworkRequestQueue<UnicastIntentMsg> txUnicastQ;\n+  private final NetClient netClient;\n+\n+  public SubscriptionSendTask(final SubscriptionManager subscriptionManager,\n+      final NetworkRequestQueue<IntentMsg> txBroadcastQ, final NetworkRequestQueue<UnicastIntentMsg> txUnicastQ,\n+      final NetClient netClient) {\n+    this.subscriptionManager = subscriptionManager;\n+    this.txBroadcastQ = txBroadcastQ;\n+    this.txUnicastQ = txUnicastQ;\n+    this.netClient = netClient;\n+  }\n+\n+  /**\n+   * When an object implementing interface <code>Runnable</code> is used to create a thread,\n+   * starting the thread causes the object's\n+   * <code>run</code> method to be called in that separately executing\n+   * thread.\n+   *\n+   * <p>The general contract of the method <code>run</code> is that it may take any action whatsoever.\n+   *\n+   * @see Thread#run()\n+   */\n+  @Override\n+  public void run() {\n+    // Handle broadcasting subscription.\n+    for (final IntentMsg intentMsg : txBroadcastQ.drain()) {\n+      LOG.info(\"kk: Draining subscribe-broadcast TxQ\");\n+      final String requesterGraphNode = intentMsg.getRequesterNode();\n+      final String destinationGraphNode = intentMsg.getDestinationNode();\n+      final Map<String, String> tags = intentMsg.getRcaConfTags();\n+\n+      for (final String remoteHost : getAllRemoteHosts()) {\n+        sendSubscribeRequest(remoteHost, requesterGraphNode, destinationGraphNode, tags);\n+      }\n+    }\n+\n+    // Handle unicasting\n+    for (final UnicastIntentMsg intentMsg : txUnicastQ.drain()) {\n+      LOG.info(\"kk: Draining subscribe-unicast TxQ\");", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTQ0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075442", "bodyText": "Removed file.", "author": "ktkrg", "createdAt": "2020-01-17T18:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0Mjg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjkyNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367142924", "bodyText": "same", "author": "yojs", "createdAt": "2020-01-15T22:33:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionSendTask.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.NetClient;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.messages.IntentMsg;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.messages.UnicastIntentMsg;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor.NodeDetails;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class that handles sending of subscription requests from the queue.\n+ */\n+public class SubscriptionSendTask implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger(SubscriptionSendTask.class);\n+  private final SubscriptionManager subscriptionManager;\n+  private final NetworkRequestQueue<IntentMsg> txBroadcastQ;\n+  private final NetworkRequestQueue<UnicastIntentMsg> txUnicastQ;\n+  private final NetClient netClient;\n+\n+  public SubscriptionSendTask(final SubscriptionManager subscriptionManager,\n+      final NetworkRequestQueue<IntentMsg> txBroadcastQ, final NetworkRequestQueue<UnicastIntentMsg> txUnicastQ,\n+      final NetClient netClient) {\n+    this.subscriptionManager = subscriptionManager;\n+    this.txBroadcastQ = txBroadcastQ;\n+    this.txUnicastQ = txUnicastQ;\n+    this.netClient = netClient;\n+  }\n+\n+  /**\n+   * When an object implementing interface <code>Runnable</code> is used to create a thread,\n+   * starting the thread causes the object's\n+   * <code>run</code> method to be called in that separately executing\n+   * thread.\n+   *\n+   * <p>The general contract of the method <code>run</code> is that it may take any action whatsoever.\n+   *\n+   * @see Thread#run()\n+   */\n+  @Override\n+  public void run() {\n+    // Handle broadcasting subscription.\n+    for (final IntentMsg intentMsg : txBroadcastQ.drain()) {\n+      LOG.info(\"kk: Draining subscribe-broadcast TxQ\");", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTQ2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075461", "bodyText": "Removed file.", "author": "ktkrg", "createdAt": "2020-01-17T18:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzIzOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367127238", "bodyText": "Change to log.debug", "author": "ditac", "createdAt": "2020-01-15T21:54:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/NetServer.java", "diffHunk": "@@ -138,12 +138,13 @@ private Server buildHttpsServer() {\n   @Override\n   public void subscribe(\n       final SubscribeMessage request, final StreamObserver<SubscribeResponse> responseObserver) {\n-    LOG.debug(\"subscribe received\");\n+    LOG.info(\"kk: subscribe received\");", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTQ3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075479", "bodyText": "removed.", "author": "ktkrg", "createdAt": "2020-01-17T18:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODI1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367128254", "bodyText": "Why do we need 3 threads here?", "author": "ditac", "createdAt": "2020-01-15T21:56:25Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -313,16 +342,35 @@ private void start() {\n       Queryable db = new MetricsDBProvider();\n       ThresholdMain thresholdMain = new ThresholdMain(RcaConsts.THRESHOLDS_PATH, rcaConf);\n       Persistable persistable = PersistenceFactory.create(rcaConf);\n+      ThreadFactory networkThreadFactory =\n+          new ThreadFactoryBuilder().setNameFormat(\"rca-net-%d\").setDaemon(true).build();\n+      networkActivitiesThreadPool = new ScheduledThreadPoolExecutor(", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTUyNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075524", "bodyText": "My bad, I had set it to 3 for testing, changed it to be just 1.", "author": "ktkrg", "createdAt": "2020-01-17T18:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODk0MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367128940", "bodyText": "Can you add some documentation or an interface around start and stop functions. What is supposed to happen when these functions are called?", "author": "ditac", "createdAt": "2020-01-15T21:58:01Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -313,16 +342,35 @@ private void start() {\n       Queryable db = new MetricsDBProvider();\n       ThresholdMain thresholdMain = new ThresholdMain(RcaConsts.THRESHOLDS_PATH, rcaConf);\n       Persistable persistable = PersistenceFactory.create(rcaConf);\n+      ThreadFactory networkThreadFactory =\n+          new ThreadFactoryBuilder().setNameFormat(\"rca-net-%d\").setDaemon(true).build();\n+      networkActivitiesThreadPool = new ScheduledThreadPoolExecutor(\n+          3, networkThreadFactory);\n+      flowUnitSender = buildSender(networkActivitiesThreadPool);\n+      flowUnitSender.start();\n+\n+      flowUnitReceiver = buildReceiver(networkActivitiesThreadPool);\n+      flowUnitReceiver.start();", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTU5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075596", "bodyText": "Got rid of the wrappers.", "author": "ktkrg", "createdAt": "2020-01-17T18:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMTQxNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367131414", "bodyText": "Why 200?", "author": "ditac", "createdAt": "2020-01-15T22:04:13Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/NetworkRequestQueue.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+\n+/**\n+ * Class that represents a custom bounded and concurrent queue.\n+ */\n+public class NetworkRequestQueue<T> {\n+\n+  private static final int DEFAULT_MAX_Q_SIZE = 200;", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MTEyNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368081124", "bodyText": "Just carried over the same number that was being used previously. On a 200 node cluster, it can buffer one flow unit from all nodes. I have made it configurable now though.", "author": "ktkrg", "createdAt": "2020-01-17T18:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMTQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNTEyOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367135128", "bodyText": "We can use a long here instead of AtomicLong as that will simplify the code.", "author": "ditac", "createdAt": "2020-01-15T22:13:34Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/NodeStateManager.java", "diffHunk": "@@ -21,24 +21,45 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.concurrent.ThreadSafe;\n \n+/**\n+ * Manages the subscription state for the nodes in the graph.\n+ */\n public class NodeStateManager {\n   private static final long MS_IN_S = 1000;\n   private static final long MS_IN_FIVE_SECONDS = 5 * MS_IN_S;\n   private static final String SEPARATOR = \".\";\n \n-  private Map<String, Long> lastReceivedTimestampMap = new HashMap<>();\n+  private ConcurrentMap<String, AtomicLong> lastReceivedTimestampMap = new ConcurrentHashMap<>();", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTU1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369825554", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-01-22T21:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNTEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjA2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367142063", "bodyText": "Instead of polling for tasks we should directly post the task into the threadpool using the execute function.", "author": "ditac", "createdAt": "2020-01-15T22:30:50Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -313,16 +342,35 @@ private void start() {\n       Queryable db = new MetricsDBProvider();\n       ThresholdMain thresholdMain = new ThresholdMain(RcaConsts.THRESHOLDS_PATH, rcaConf);\n       Persistable persistable = PersistenceFactory.create(rcaConf);\n+      ThreadFactory networkThreadFactory =\n+          new ThreadFactoryBuilder().setNameFormat(\"rca-net-%d\").setDaemon(true).build();\n+      networkActivitiesThreadPool = new ScheduledThreadPoolExecutor(\n+          3, networkThreadFactory);\n+      flowUnitSender = buildSender(networkActivitiesThreadPool);\n+      flowUnitSender.start();\n+\n+      flowUnitReceiver = buildReceiver(networkActivitiesThreadPool);\n+      flowUnitReceiver.start();\n+\n+      subscriptionSender = buildSubscriptionSender(networkActivitiesThreadPool);\n+      subscriptionSender.start();", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NjY2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368076666", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-01-17T18:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NTI4Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367145283", "bodyText": "We dont need to update map on each enqueue. We can use a putifAbsent.", "author": "ditac", "createdAt": "2020-01-15T22:39:43Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/ReceivedFlowUnitStore.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * An intermediate buffer that holds flow units received for different vertices from across the\n+ * cluster.\n+ */\n+public class ReceivedFlowUnitStore {\n+\n+  private static final int DEFAULT_PER_NODE_FLOWUNIT_Q_SIZE = 200;\n+  private ConcurrentMap<String, BlockingQueue<FlowUnitMessage>> flowUnitMap =\n+      new ConcurrentHashMap<>();\n+  private final int perNodeFlowUnitQSize;\n+\n+  public ReceivedFlowUnitStore() {\n+    this(DEFAULT_PER_NODE_FLOWUNIT_Q_SIZE);\n+  }\n+\n+  public ReceivedFlowUnitStore(final int perNodeFlowUnitQSize) {\n+    this.perNodeFlowUnitQSize = perNodeFlowUnitQSize;\n+  }\n+\n+  public boolean enqueue(final String graphNode, final FlowUnitMessage flowUnitMessage) {\n+    BlockingQueue<FlowUnitMessage> existingQueue = flowUnitMap.get(graphNode);\n+    if (existingQueue == null) {\n+      existingQueue = new ArrayBlockingQueue<>(perNodeFlowUnitQSize);\n+    }\n+\n+    boolean retValue = existingQueue.offer(flowUnitMessage);\n+    flowUnitMap.put(graphNode, existingQueue);", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTY5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075691", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-01-17T18:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NTI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1NzU1OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367157559", "bodyText": "What change did we make here?", "author": "ditac", "createdAt": "2020-01-15T23:16:30Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "diffHunk": "@@ -344,10 +344,35 @@ private void emitMasterMetrics(long prevWindowStartTime, MetricsDB metricsDB) {\n           masterEventMetricsMap.get(prevWindowStartTime);\n       MetricsEmitter.emitMasterEventMetrics(metricsDB, preMasterEventSnapshot);\n     } else {\n-      LOG.info(\"Master snapshot for the previous window does not exist. Not emitting metrics.\");\n+      LOG.debug(\"Master snapshot for the previous window does not exist. Not emitting metrics.\");\n     }\n   }\n \n+  void parseMasterEventMetrics(", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NTc2MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r368075760", "bodyText": "Missed rebase artifact.", "author": "ktkrg", "createdAt": "2020-01-17T18:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1NzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1OTIzNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367159236", "bodyText": "How do we handle publish failure?", "author": "ditac", "createdAt": "2020-01-15T23:22:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SendTask.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.PublishResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.PublishResponse.PublishResponseStatus;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.NetClient;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.messages.DataMsg;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor.NodeDetails;\n+import io.grpc.stub.StreamObserver;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class that processes flow units that need to be sent from the queue.\n+ */\n+public class SendTask implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger(SendTask.class);\n+  private final SubscriptionManager subscriptionManager;\n+  private final NetworkRequestQueue<DataMsg> txQ;\n+  private final NetClient netClient;\n+\n+  public SendTask(final SubscriptionManager subscriptionManager, final NetworkRequestQueue<DataMsg> txQ,\n+      final NetClient netClient) {\n+    this.subscriptionManager = subscriptionManager;\n+    this.txQ = txQ;\n+    this.netClient = netClient;\n+  }\n+\n+  /**\n+   * When an object implementing interface <code>Runnable</code> is used to create a thread,\n+   * starting the thread causes the object's\n+   * <code>run</code> method to be called in that separately executing\n+   * thread.\n+   * The general contract of the method <code>run</code> is that it may take any action whatsoever.\n+   *\n+   * @see Thread#run()\n+   */\n+  @Override\n+  public void run() {\n+    for (final DataMsg dataMsg : txQ.drain()) {\n+      final String sourceNode = dataMsg.getSourceNode();\n+      final String esNode;\n+      final NodeDetails currentNode = ClusterDetailsEventProcessor.getCurrentNodeDetails();\n+      if (currentNode != null) {\n+        esNode = currentNode.getHostAddress();\n+      } else {\n+        LOG.error(\"Could not get current host address from cluster level metrics reader.\");\n+        esNode = \"\";\n+      }\n+      if (subscriptionManager.isNodeSubscribed(sourceNode)) {\n+        final Set<String> downstreamHostAddresses = subscriptionManager\n+            .getSubscribersFor(sourceNode);\n+        LOG.debug(\"{} has downstream subscribers: {}\", sourceNode, downstreamHostAddresses);\n+        for (final String downstreamHostAddress : downstreamHostAddresses) {\n+          for (final GenericFlowUnit flowUnit : dataMsg.getFlowUnits()) {\n+            netClient.publish(", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyMjQ0MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369322440", "bodyText": "Publish failures will cause the subscribers to re-send a subscribe if the subscribers don't get flow units from that particular host. This will trigger a re-establishment of the stream.", "author": "ktkrg", "createdAt": "2020-01-22T00:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1OTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MDIzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367160235", "bodyText": "What happens to stale connections? When do we throw them away? Can we have connection failures where we re-establish a connection?\nThe case we need to test is -\n\nNode joins cluster.\nYou are streaming metrics.\nNode leaves cluster temporarily and then joins back.\nWill we create a new connection and stream data?", "author": "ditac", "createdAt": "2020-01-15T23:26:00Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/NetClient.java", "diffHunk": "@@ -41,26 +48,39 @@ public NetClient(final GRPCConnectionManager connectionManager) {\n     this.connectionManager = connectionManager;\n   }\n \n-  private Map<String, StreamObserver<FlowUnitMessage>> perHostOpenDataStreamMap = new HashMap<>();\n+  private ConcurrentMap<String, AtomicReference<StreamObserver<FlowUnitMessage>>> perHostOpenDataStreamMap =\n+      new ConcurrentHashMap<>();\n \n   public void subscribe(\n       final String remoteHost,\n       final SubscribeMessage subscribeMessage,\n       StreamObserver<SubscribeResponse> serverResponseStream) {\n     LOG.debug(\"Trying to send intent message to {}\", remoteHost);\n-    connectionManager\n-        .getClientStubForHost(remoteHost)\n-        .subscribe(subscribeMessage, serverResponseStream);\n+    try {\n+      connectionManager\n+          .getClientStubForHost(remoteHost)\n+          .subscribe(subscribeMessage, serverResponseStream);\n+    } catch (StatusRuntimeException sre) {\n+      LOG.error(\"Encountered an error trying to subscribe. Status: {}\",\n+          sre.getStatus(), sre);\n+      StatsCollector.instance().logException(StatExceptionCode.RCA_NETWORK_ERROR);\n+    }\n   }\n \n   public void publish(\n       final String remoteHost,\n       final FlowUnitMessage flowUnitMessage,\n       final StreamObserver<PublishResponse> serverResponseStream) {\n     LOG.debug(\"Publishing {} data to {}\", flowUnitMessage.getGraphNode(), remoteHost);\n-    final StreamObserver<FlowUnitMessage> stream =\n-        getDataStreamForHost(remoteHost, serverResponseStream);\n-    stream.onNext(flowUnitMessage);\n+    try {\n+      final StreamObserver<FlowUnitMessage> stream =\n+          getDataStreamForHost(remoteHost, serverResponseStream);\n+      stream.onNext(flowUnitMessage);\n+    } catch (StatusRuntimeException sre) {\n+      LOG.error(\"Encountered an error trying to publish a flow unit. Status: {}\",", "originalCommit": "b5e87a91406d1baf35ee8a76c8dedae9c9f86081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MTAxMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r367161012", "bodyText": "We should also track cluster membership changes to add/remove nodes.", "author": "ditac", "createdAt": "2020-01-15T23:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyMTUzMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369321530", "bodyText": "Stale connections will result in subscribers resending a single subscribe request and re-establishing the stream.\nAdded mechanism to check and trigger subscription if the cluster membership reports nodes that the network layer has not seen. And unsubscribe/terminate connection if cluster membership says a node is not part of the cluster.", "author": "ktkrg", "createdAt": "2020-01-22T00:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MDIzNQ=="}], "type": "inlineReview"}, {"oid": "cc3f519a0b0694eef0545cd3eee6c191e3a9f8dd", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cc3f519a0b0694eef0545cd3eee6c191e3a9f8dd", "message": "1. Replace multiple queues with one task queue.\n2. Added more documentation around the classes added.\n3. Other PR comment suggestions.", "committedDate": "2020-01-17T18:09:34Z", "type": "commit"}, {"oid": "e6d7e201a2d5415bdac61cabcf8c72c063cd330a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e6d7e201a2d5415bdac61cabcf8c72c063cd330a", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/performance-analyzer-rca into thr_safe", "committedDate": "2020-01-17T18:20:00Z", "type": "commit"}, {"oid": "7800b9adb306aee3d81742234d0cca4d00fd8706", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7800b9adb306aee3d81742234d0cca4d00fd8706", "message": "Add support to handle more error cases", "committedDate": "2020-01-21T23:37:26Z", "type": "commit"}, {"oid": "37bf890a5fa0e5ba5a703a600fa88798e6355615", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/37bf890a5fa0e5ba5a703a600fa88798e6355615", "message": "Merge branch 'master' of github.com:opendistro-for-elasticsearch/performance-analyzer-rca into thr_safe", "committedDate": "2020-01-21T23:37:37Z", "type": "commit"}, {"oid": "6b23ddcb429e1935d81515299eaeb8a9cefb703e", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6b23ddcb429e1935d81515299eaeb8a9cefb703e", "message": "Added more documentation", "committedDate": "2020-01-22T01:04:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODE1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369378153", "bodyText": "separate these with a newline ?", "author": "yojs", "createdAt": "2020-01-22T05:41:13Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/StatExceptionCode.java", "diffHunk": "@@ -33,7 +33,10 @@\n   READER_PARSER_ERROR(\"ReaderParserError\"),\n   READER_RESTART_PROCESSING(\"ReaderRestartProcessing\"),\n   RCA_SCHEDULER_RESTART_PROCESSING(\"RCASchedulerRestartProcessing\"),\n-  OTHER(\"Other\");\n+  RCA_NETWORK_ERROR(\"RcaNetworkError\"),\n+  RCA_VERTEX_RX_BUFFER_FULL_ERROR(\"RcaVertexRxBufferFullError\"),\n+  RCA_NETWORK_THREADPOOL_QUEUE_FULL_ERROR(\"RcaNetworkThreadpoolQueueFullError\"),\n+  OTHER(\"Other\"), RCA_SCHEDULER_STOPPED_ERROR(\"RcaSchedulerStoppedError\");", "originalCommit": "6b23ddcb429e1935d81515299eaeb8a9cefb703e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTQ2NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369825464", "bodyText": "done.", "author": "ktkrg", "createdAt": "2020-01-22T21:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3OTMxMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369379310", "bodyText": "Are these lines well formatted ? Maybe this change is not intended  ?", "author": "yojs", "createdAt": "2020-01-22T05:46:45Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -114,11 +128,12 @@ private ManagedChannel buildInsecureChannel(final String remoteHost) {\n   private ManagedChannel buildSecureChannel(final String remoteHost) {\n     try {\n       return NettyChannelBuilder.forAddress(remoteHost, Util.RPC_PORT)\n-          .sslContext(\n-              GrpcSslContexts.forClient()\n-                  .trustManager(InsecureTrustManagerFactory.INSTANCE)\n-                  .build())\n-          .build();\n+                                .sslContext(", "originalCommit": "6b23ddcb429e1935d81515299eaeb8a9cefb703e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0Njc0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369746743", "bodyText": "That is how intellij formatted. I think in the previous iteration the '.'s were not aligned, and when it aligns the '.'s one of the lines grows more than 100 character line limit and gets bumped down to the next line.", "author": "ktkrg", "createdAt": "2020-01-22T19:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3OTMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MzQxMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369783412", "bodyText": "Looks like when we align the '.'s the line length goes over the limit and it bumps a chunk down to the next line.", "author": "ktkrg", "createdAt": "2020-01-22T20:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3OTMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MDUzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369380531", "bodyText": "I am thinking, if it would be a better idea to buffer this request until we are ready and then heed to it. Given than every node can start and die on their own, we might want to minimize packet transfers if we can. what do you think ? We should definitely add a comment saying that this is safe  and the node that sent it will re-send it again in future and we will act on it then or something along those lines", "author": "yojs", "createdAt": "2020-01-22T05:52:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/NetServer.java", "diffHunk": "@@ -138,12 +138,13 @@ private Server buildHttpsServer() {\n   @Override\n   public void subscribe(\n       final SubscribeMessage request, final StreamObserver<SubscribeResponse> responseObserver) {\n-    LOG.debug(\"subscribe received\");\n     if (subscribeHandler != null) {\n       subscribeHandler.handleSubscriptionRequest(request, responseObserver);\n+    } else {\n+      LOG.error(\"Subscribe request received before handler is set.\");", "originalCommit": "6b23ddcb429e1935d81515299eaeb8a9cefb703e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDQ5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369824495", "bodyText": "This will only happen during initial switch on phase of RCA where the framework comes up on master first before being turned on in the data nodes. After that we should not be seeing this. However, I can add buffering as an improvement - will create an issue around it.", "author": "ktkrg", "createdAt": "2020-01-22T21:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1ODY4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369858686", "bodyText": "cool.", "author": "yojs", "createdAt": "2020-01-22T23:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MDUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MTMxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369381316", "bodyText": "A comment maybe ? :)", "author": "yojs", "createdAt": "2020-01-22T05:56:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -109,6 +119,9 @@\n   private TimeUnit timeUnit;\n   private List<Thread> exceptionHandlerThreads;\n   private List<ScheduledFuture<?>> pollingExecutors;\n+  private boolean shutdownRequested;\n+  private AtomicReference<ExecutorService> networkThreadPoolReference = new AtomicReference<>();", "originalCommit": "6b23ddcb429e1935d81515299eaeb8a9cefb703e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNTM4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369825387", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-01-22T21:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MTMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MTc5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369381799", "bodyText": "Do we really need this added complexity to set the queue size dynamically ? we can make it require a restart ?\nWhat happens when the old executor was executing and this thread sees a configuration change and tries to update the pool, will we ever be running the same code across two threads ?", "author": "yojs", "createdAt": "2020-01-22T05:58:31Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -316,16 +334,21 @@ private void start() {\n       Queryable db = new MetricsDBProvider();\n       ThresholdMain thresholdMain = new ThresholdMain(RcaConsts.THRESHOLDS_PATH, rcaConf);\n       Persistable persistable = PersistenceFactory.create(rcaConf);\n+      networkThreadPoolReference.set(buildNetworkThreadPool(rcaConf.getNetworkQueueLength()));", "originalCommit": "6b23ddcb429e1935d81515299eaeb8a9cefb703e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc1NDQ2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/59#discussion_r369754467", "bodyText": "It will still need a restart of some sort. The queue length is only read when starting/restarting the controller. Essentially, this lets us change queue size without needing a JAR replacement, just modifying the RCA conf file and restarting should suffice.\n\nWhat happens when the old executor was executing and this thread sees a configuration change and tries to update the pool, will we ever be running the same code across two threads ?\n\nwhen we restart, we stop the old threadpool executor. This scenario should not happen.", "author": "ktkrg", "createdAt": "2020-01-22T19:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4MTc5OQ=="}], "type": "inlineReview"}, {"oid": "3d3b4e338918fdc3f7bb86ea60a256b3c5571637", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3d3b4e338918fdc3f7bb86ea60a256b3c5571637", "message": "Added copyright and documented fields", "committedDate": "2020-01-22T20:05:33Z", "type": "commit"}, {"oid": "24e1ecbf5b4659f576855ac61e466b7c43270d31", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/24e1ecbf5b4659f576855ac61e466b7c43270d31", "message": "Added comments in the conf files", "committedDate": "2020-01-22T21:53:52Z", "type": "commit"}]}