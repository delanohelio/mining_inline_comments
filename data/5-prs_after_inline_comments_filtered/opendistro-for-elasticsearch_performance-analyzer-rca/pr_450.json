{"pr_number": 450, "pr_title": "Add bucketization for usage", "pr_createdAt": "2020-10-02T17:26:04Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450", "timeline": [{"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/067e99c1446ce1f2faa91cb1351838e0b5dd441a", "message": "Add bucketization for usage", "committedDate": "2020-10-02T17:17:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjE3NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500026174", "bodyText": "nit: new line", "author": "sruti1312", "createdAt": "2020-10-06T06:09:24Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.neo;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BucketAssignerTest {\n+  @Test\n+  public void testCreateBucketAssigner() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize.json\").toString());\n+\n+    BucketCalculator bucketCalculatorForBase1 = rcaConf.getBucketizationSettings(\"base1\");\n+\n+    Assert.assertEquals(UsageBucket.UNDER_UTILIZED, bucketCalculatorForBase1.compute(19));\n+    Assert.assertEquals(UsageBucket.HEALTHY_WITH_BUFFER, bucketCalculatorForBase1.compute(40));\n+    Assert.assertEquals(UsageBucket.HEALTHY, bucketCalculatorForBase1.compute(80));\n+    Assert.assertEquals(UsageBucket.UNHEALTHY, bucketCalculatorForBase1.compute(81));\n+\n+    BucketCalculator bucketCalculatorForBase3 = rcaConf.getBucketizationSettings(\"base3\");\n+\n+    Assert.assertEquals(UsageBucket.UNDER_UTILIZED, bucketCalculatorForBase3.compute(30));\n+    Assert.assertEquals(UsageBucket.HEALTHY_WITH_BUFFER, bucketCalculatorForBase3.compute(40.1));\n+    Assert.assertEquals(UsageBucket.HEALTHY, bucketCalculatorForBase3.compute(75));\n+    Assert.assertEquals(UsageBucket.UNHEALTHY, bucketCalculatorForBase3.compute(76));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testMisSpelledTunableName() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize.json\").toString());\n+    rcaConf.getBucketizationSettings(\"basa3\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNoBucketizationSettings() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca.conf\").toString());\n+    rcaConf.getBucketizationSettings(\"base1\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNoThresholds() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize_no_thresholds.json\").toString());\n+    rcaConf.getBucketizationSettings(\"base1\");\n+  }\n+}", "originalCommit": "067e99c1446ce1f2faa91cb1351838e0b5dd441a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MTg3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500481875", "bodyText": "done !", "author": "yojs", "createdAt": "2020-10-06T17:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzkwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500027901", "bodyText": "What are you thoughts on adding these to RcaConfTest.java", "author": "sruti1312", "createdAt": "2020-10-06T06:14:33Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.neo;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BucketAssignerTest {", "originalCommit": "067e99c1446ce1f2faa91cb1351838e0b5dd441a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MDM2MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500480360", "bodyText": "This is definitely a part of Rca.conf as you pointed out. But because this is a small feature on its own, I wrapped it in a test class of its own. As we expand on this, create higher level buckets based on bucketization of lower level resources, we would add more to this class.", "author": "yojs", "createdAt": "2020-10-06T17:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyODMwNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500028307", "bodyText": "Can we use a ImmutableMap here?", "author": "sruti1312", "createdAt": "2020-10-06T06:15:39Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -306,4 +313,69 @@ private boolean updateRcaConf(String originalFilePath, final Set<String> mutedRc\n   public Map<String, Object> getDeciderConfigSettings() {\n     return conf.getDeciderConfigSettings();\n   }\n+\n+  /**\n+   * Given the name of the tunable, it returns the BucketCalculator. The BucketCalculator is constructed\n+   * from the thresholds provided as the rca.conf settings. An example will look like this:\n+   * \"bucketization\": {\n+   *     \"base1\": {\n+   *       \"UNDER_UTILIZED\": 20.0,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.0,\n+   *       \"HEALTHY\": 80.0\n+   *     },\n+   *     \"base2\": {\n+   *       \"UNDER_UTILIZED\": 30.0,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.0,\n+   *       \"HEALTHY\": 75.0\n+   *     },\n+   *     \"base3\": {\n+   *       \"UNDER_UTILIZED\": 30.1,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.23456,\n+   *       \"HEALTHY\": 75.0\n+   *     }\n+   *   }\n+   * @param tunableName The name of the tunable. In the above example, base1, base2, base3 are names of tunables.\n+   * @return The BucketCalculator that can be used to bucketize values.\n+   */\n+  public BucketCalculator getBucketizationSettings(String tunableName) {\n+    if (tunableResourceToUsageBucket.isEmpty()) {\n+      constructTunableResourceToUsageBucket();\n+    }\n+    BucketCalculator bucketCalculator = tunableResourceToUsageBucket.get(tunableName);\n+    if (bucketCalculator == null) {\n+      throw new IllegalArgumentException(\"No such tunable exists with name \" + tunableName\n+          + \". Available ones: \" + tunableResourceToUsageBucket.keySet());\n+    }\n+    return bucketCalculator;\n+  }\n+\n+  private void constructTunableResourceToUsageBucket() {\n+    Map<String, Object> tunableSettingsMap = conf.getBucketizationTunings();\n+    if (tunableSettingsMap == null) {\n+      // The bucketization key does not exist in the rca.conf. So we cannot construct BucketCalculators.\n+      return;\n+    }\n+    for (Map.Entry<String, Object> entry : tunableSettingsMap.entrySet()) {\n+      String currentTunable = entry.getKey();\n+      if (entry.getValue() instanceof Map) {\n+        Map<UsageBucket, Double> usageBucketLimitMap = new HashMap<>();", "originalCommit": "067e99c1446ce1f2faa91cb1351838e0b5dd441a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3ODU5NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500478594", "bodyText": "Good point !", "author": "yojs", "createdAt": "2020-10-06T17:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyODMwNw=="}], "type": "inlineReview"}, {"oid": "1c17d912454e6ac668d80738144600c1523ebb4b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1c17d912454e6ac668d80738144600c1523ebb4b", "message": "Addresed the PR review comments", "committedDate": "2020-10-06T18:38:16Z", "type": "commit"}]}