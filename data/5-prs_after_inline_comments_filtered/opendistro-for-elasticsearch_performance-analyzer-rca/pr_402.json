{"pr_number": 402, "pr_title": "Add support for action configs", "pr_createdAt": "2020-08-31T08:49:05Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODY5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480268691", "bodyText": "maybe it would be better to pass CacheActionConfig in builder ?", "author": "rguo-aws", "createdAt": "2020-08-31T17:10:25Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyCacheMaxSizeAction.java", "diffHunk": "@@ -153,34 +158,46 @@ public ResourceEnum getCacheType() {\n     private Long currentCacheMaxSizeInBytes;\n     private Long desiredCacheMaxSizeInBytes;\n     private Long heapMaxSizeInBytes;\n+    private final long upperBoundInBytes;\n+    private final long lowerBoundInBytes;\n \n     private Builder(\n         final NodeKey esNode,\n         final ResourceEnum cacheType,\n         final AppContext appContext,\n-        double upperBoundThreshold) {\n+        final RcaConf conf) {", "originalCommit": "d72d38819d0d5883b74b3d50b48c32bdb328dcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5ODI1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480398255", "bodyText": "That was the original thought. But I went with this approach for the following reasons -\n\nConsumers should not have to handle which config to pass to which object. The object should be able to self extract its own relevant config.\nWanted to keep doors open for the action to consume configs outside of CacheActionConfig if needed in future.\n\nPassing a subset config only makes it harder to do things with the config going forward (including refactoring). e.g. deciders holding only DeciderConfig made it impossible to pass action specific config to actions. Just passing the parent everywhere and letting consumers extract what they need made sense to me.", "author": "vigyasharma", "createdAt": "2020-08-31T21:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTgzNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480269836", "bodyText": "I think we will still need those two methods. The JVM decider will try to override upperbound for caches / queues", "author": "rguo-aws", "createdAt": "2020-08-31T17:12:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -193,33 +180,21 @@ public Builder stepSize(int stepSize) {\n       return this;\n     }\n \n-    public Builder upperBound(int upperBound) {", "originalCommit": "d72d38819d0d5883b74b3d50b48c32bdb328dcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5ODkxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480398916", "bodyText": "I have a fn to override to max and min bounds, and another to increase/decrease. I think it is too much for the decider to calculate and come up with exact values in between that it must override to. Let me know why you think otherwise.", "author": "vigyasharma", "createdAt": "2020-08-31T21:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxMTAzNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480411034", "bodyText": "the benefit of exposing upper/lower bound to decider is it allows decider to tune some certain action within a sub range of the entire {lower, upper} range. Let me use JVM decider as an example.\nSo the fielddata cache has a range of 0.02 - 0.4 but in JVM decider, if we only want to tune the fielddata cache within 0.2 - 0.4, the decider can override the builder to do so.", "author": "rguo-aws", "createdAt": "2020-08-31T21:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NzY4NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480467684", "bodyText": "We decided to expose this setter, I'll make the required changes. Documenting our reasoning here:\nThere can be several reasons for high old heap usage, cache and queues cover only a subset of them. Currently however, these are the only ones we are looking at. The heap health decider bucketizes an unhealthy heap into 3 levels: level-1 unhealthy, level-2 unhealthy, and level-3 unhealthy; with level-3 being where heap is worst hit.\nAt level-1 unhealthy (heap usage ~60-70%), we want to downsize queues and caches, but to a soft lower bound, not to the absolute hard lower bound. This is so that we don't over-penalize the only resources we are able to tune.\nAt level-3 unhealthy (heap usage >~90%), the same argument can hold, but now we know for sure that there are several other objects contesting for heap space, which is causing the 90% heap usage. So we tune down caches and queues to as much as possible, which is the hard lower bound provided by setDesiredCacheMaxSizeToMin().\nAs a side note, we should separately see if these soft level based lower bounds should be present within deciders or within the *ActionConfig objects.", "author": "vigyasharma", "createdAt": "2020-08-31T23:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjA0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480476042", "bodyText": "We should pick this up as a separate PR. The soft and hard bounds should be attributes of action config objects itself, so that they can have corresponding overrides in rca.conf, and we don't maintain and pass separate bound values from deciders.\nInstead of exposing the lowerBound() setter, we should expose a useSoftLowerBound() setter, with soft lower bound being read from rca.conf. Created #406", "author": "vigyasharma", "createdAt": "2020-08-31T23:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3Mzg5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480273891", "bodyText": "Add nullable annotation to this function ?", "author": "rguo-aws", "createdAt": "2020-08-31T17:20:52Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/NestedConfig.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core;\n+\n+import java.util.Map;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NestedConfig {\n+\n+  private static final Logger LOG = LogManager.getLogger(NestedConfig.class);\n+\n+  private String key;\n+  private Map<String, Object> value;\n+\n+  public NestedConfig(String key, Map<String, Object> parentConfig) {\n+    this.key = key;\n+    this.value = null;\n+    if (parentConfig != null) {\n+      try {\n+        //noinspection unchecked\n+        value = (Map<String, Object>) parentConfig.get(key);\n+      } catch (ClassCastException e) {\n+        LOG.error(\"rca.conf contains invalid value for key: [{}], trace : [{}]\", key, e.getMessage());\n+      }\n+    }\n+  }\n+\n+  public String getKey() {\n+    return key;\n+  }\n+\n+  public Map<String, Object> getValue() {", "originalCommit": "d72d38819d0d5883b74b3d50b48c32bdb328dcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwOTg5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480409897", "bodyText": "Done", "author": "vigyasharma", "createdAt": "2020-08-31T21:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3Mzg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NTI0OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480275248", "bodyText": "we should define the default value as a static variable ?", "author": "rguo-aws", "createdAt": "2020-08-31T17:23:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/configs/CacheActionConfig.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.Config;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NestedConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Defines config for cache related actions.\n+ *\n+ * <p>Configs are expected in the following json format:\n+ * {\n+ *   \"action-config-settings\": {\n+ *     // Cache Max Size bounds are expressed as %age of JVM heap size\n+ *     \"cache-settings\": {\n+ *       \"fielddata\": {\n+ *         \"upper-bound\": 0.4,\n+ *         \"lower-bound\": 0.1\n+ *       },\n+ *       \"shard-request\": {\n+ *         \"upper-bound\": 0.05,\n+ *         \"lower-bound\": 0.01\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ */\n+public class CacheActionConfig {\n+\n+  private static final Logger LOG = LogManager.getLogger(CacheActionConfig.class);\n+\n+  private NestedConfig cacheSettingsConfig;\n+  private FieldDataCacheConfig fieldDataCacheConfig;\n+  private ShardRequestCacheConfig shardRequestCacheConfig;\n+  private Map<ResourceEnum, ThresholdConfig<Double>> thresholdConfigMap;\n+\n+  public CacheActionConfig(RcaConf conf) {\n+    Map<String, Object> actionConfig = conf.getActionConfigSettings();\n+    cacheSettingsConfig = new NestedConfig(\"cache-settings\", actionConfig);\n+    fieldDataCacheConfig = new FieldDataCacheConfig(cacheSettingsConfig);\n+    shardRequestCacheConfig = new ShardRequestCacheConfig(cacheSettingsConfig);\n+    createThresholdConfigMap();\n+  }\n+\n+  public ThresholdConfig<Double> getThresholdConfig(ResourceEnum cacheType) {\n+    if (!thresholdConfigMap.containsKey(cacheType)) {\n+      String msg = \"Threshold config requested for unknown cache type: \" + cacheType.toString();\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+    return thresholdConfigMap.get(cacheType);\n+  }\n+\n+  private void createThresholdConfigMap() {\n+    Map<ResourceEnum, ThresholdConfig<Double>> configMap = new HashMap<>();\n+    configMap.put(ResourceEnum.FIELD_DATA_CACHE, fieldDataCacheConfig);\n+    configMap.put(ResourceEnum.SHARD_REQUEST_CACHE, shardRequestCacheConfig);\n+    thresholdConfigMap = Collections.unmodifiableMap(configMap);\n+  }\n+\n+  private static class FieldDataCacheConfig implements ThresholdConfig<Double> {\n+\n+    private Config<Double> fieldDataCacheUpperBound;\n+    private Config<Double> fieldDataCacheLowerBound;\n+\n+    public FieldDataCacheConfig(NestedConfig cacheSettingsConfig) {\n+      NestedConfig fieldDataCacheConfig = new NestedConfig(\"fielddata\", cacheSettingsConfig.getValue());\n+      fieldDataCacheUpperBound = new Config<>(\"upper-bound\", fieldDataCacheConfig.getValue(),\n+          0.4, (s) -> (s > 0), Double.class);", "originalCommit": "d72d38819d0d5883b74b3d50b48c32bdb328dcfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NTUyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/402#discussion_r480275521", "bodyText": "same as above", "author": "rguo-aws", "createdAt": "2020-08-31T17:24:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/configs/QueueActionConfig.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.Config;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NestedConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Defines config for threadpool queue related actions\n+ *\n+ * <p>Configs are expected in the following json format:\n+ * {\n+ *   \"action-config-settings\": {\n+ *     // Queue Capacity bounds are expressed as absolute queue size\n+ *     \"queue-settings\": {\n+ *       \"search\": {\n+ *         \"upper-bound\": 3000,\n+ *         \"lower-bound\": 1000\n+ *       },\n+ *       \"write\": {\n+ *         \"upper-bound\": 1000,\n+ *         \"lower-bound\": 50\n+ *       }\n+ *     }\n+ * }\n+ */\n+public class QueueActionConfig {\n+\n+  private static final Logger LOG = LogManager.getLogger(QueueActionConfig.class);\n+\n+  private NestedConfig queueSettingsConfig;\n+  private SearchQueueConfig searchQueueConfig;\n+  private WriteQueueConfig writeQueueConfig;\n+  private Map<ResourceEnum, ThresholdConfig<Integer>> thresholdConfigMap;\n+\n+  public QueueActionConfig(RcaConf conf) {\n+    Map<String, Object> actionConfig = conf.getActionConfigSettings();\n+    queueSettingsConfig = new NestedConfig(\"queue-settings\", actionConfig);\n+    searchQueueConfig = new SearchQueueConfig(queueSettingsConfig);\n+    writeQueueConfig = new WriteQueueConfig(queueSettingsConfig);\n+    createThresholdConfigMap();\n+  }\n+\n+  public ThresholdConfig<Integer> getThresholdConfig(ResourceEnum threadPool) {\n+    if (!thresholdConfigMap.containsKey(threadPool)) {\n+      String msg = \"Threshold config requested for unknown threadpool queue: \" + threadPool.toString();\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+    return thresholdConfigMap.get(threadPool);\n+  }\n+\n+  private void createThresholdConfigMap() {\n+    Map<ResourceEnum, ThresholdConfig<Integer>> configMap = new HashMap<>();\n+    configMap.put(ResourceEnum.SEARCH_THREADPOOL, searchQueueConfig);\n+    configMap.put(ResourceEnum.WRITE_THREADPOOL, writeQueueConfig);\n+    thresholdConfigMap = Collections.unmodifiableMap(configMap);\n+  }\n+\n+  private static class SearchQueueConfig implements ThresholdConfig<Integer> {\n+\n+    private Config<Integer> searchQueueUpperBound;\n+    private Config<Integer> searchQueueLowerBound;\n+\n+    public SearchQueueConfig(NestedConfig queueSettingsConfig) {\n+      NestedConfig searchQueueConfig = new NestedConfig(\"search\", queueSettingsConfig.getValue());\n+      searchQueueUpperBound = new Config<>(\"upper-bound\", searchQueueConfig.getValue(),\n+          3000, (s) -> (s >= 0), Integer.class);", "originalCommit": "d72d38819d0d5883b74b3d50b48c32bdb328dcfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "331d710e6868f79caae51d75226b4047ed764bac", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/331d710e6868f79caae51d75226b4047ed764bac", "message": "Create cache action config - initial code", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "558710ce44fec8df9160df0bdb18d3b6d10019a3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/558710ce44fec8df9160df0bdb18d3b6d10019a3", "message": "Code builds and existing UTs pass", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "54a6c612d384b096a3f6b1514140fde463774e51", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/54a6c612d384b096a3f6b1514140fde463774e51", "message": "Unit tests for NestedConfig", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "7627e6e28ce9c53d431be833ae4cfb434984dd05", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7627e6e28ce9c53d431be833ae4cfb434984dd05", "message": "Tests for Config. Resolve to defaults during type mismatch", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "abe8ca7067e02479ae629bf4431db806b81b4132", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/abe8ca7067e02479ae629bf4431db806b81b4132", "message": "Queue and Cache config tests with config validator support", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "9cc9cf5b8b60200576adae6bf6536bb0df953e37", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9cc9cf5b8b60200576adae6bf6536bb0df953e37", "message": "Tests for queue and cache modify actions", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "4cb932bf53f665214833e03e72a06e1705bb4e37", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4cb932bf53f665214833e03e72a06e1705bb4e37", "message": "Remove comments and config overrides. Added docstrings", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "93a35ac0587ac660c2364ab0a1579366adcc691a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/93a35ac0587ac660c2364ab0a1579366adcc691a", "message": "Remove cache bound configs from decider config", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "eed2d054dbd4ff8e15cb83e5a3763d3a5c74520f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/eed2d054dbd4ff8e15cb83e5a3763d3a5c74520f", "message": "Doc string checkstyle changes", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "b62e36bdb6065f76826670803f8f0053c2b82ce3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b62e36bdb6065f76826670803f8f0053c2b82ce3", "message": "Ignoring flaky test", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "ba79b4ac59077431ef8605833da0e5a8e47f9bc4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ba79b4ac59077431ef8605833da0e5a8e47f9bc4", "message": "Update rca.conf to remove threshold config from decider settings", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "c820fb7f26f1cd2f4c3fba7f05258c0318e16188", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c820fb7f26f1cd2f4c3fba7f05258c0318e16188", "message": "remove typo", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "981a51903b20bb50b7dc0c5914436c02cd1141fe", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/981a51903b20bb50b7dc0c5914436c02cd1141fe", "message": "PR comments addressed\n\n - Add nullable annotations\n - Move default values to static final variables", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "f8ddb98af9e9b1d64cbd8cf34dcd92ab61d26964", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f8ddb98af9e9b1d64cbd8cf34dcd92ab61d26964", "message": "Remove unused method desiredCacheMaxSize", "committedDate": "2020-09-01T16:31:16Z", "type": "commit"}, {"oid": "f8ddb98af9e9b1d64cbd8cf34dcd92ab61d26964", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f8ddb98af9e9b1d64cbd8cf34dcd92ab61d26964", "message": "Remove unused method desiredCacheMaxSize", "committedDate": "2020-09-01T16:31:16Z", "type": "forcePushed"}]}