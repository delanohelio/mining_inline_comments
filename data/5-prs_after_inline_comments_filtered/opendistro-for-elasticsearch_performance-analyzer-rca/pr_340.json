{"pr_number": 340, "pr_title": "Populate default workload type and cache priority for the decider to base default actions", "pr_createdAt": "2020-08-05T08:29:32Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNjg3MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465906870", "bodyText": "Needs null checks", "author": "sidheart", "createdAt": "2020-08-05T18:01:20Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decider.java", "diffHunk": "@@ -90,4 +95,31 @@ public void handleNodeMuted() {\n \n   @Override\n   public abstract Decision operate();\n+\n+  /**\n+   * read threshold values from rca.conf\n+   *\n+   * @param conf RcaConf object\n+   */\n+  @Override\n+  public void readRcaConf(RcaConf conf) {\n+    configObj = conf.getDeciderConfig();\n+  }\n+\n+  public double getFieldDataCacheUpperBound() {", "originalCommit": "b5166ee66e58f4e75aa2f029f9e04ee38089bdf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMDkxOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465910918", "bodyText": "(on configObj)", "author": "sidheart", "createdAt": "2020-08-05T18:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNjg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1MjkxMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r466652910", "bodyText": "Right! Added.", "author": "aditjind", "createdAt": "2020-08-06T19:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNjg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwOTk5OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465909998", "bodyText": "It seems like these are written and then never read. Are we doing this on purpose? Will this only be configurable in the future?", "author": "sidheart", "createdAt": "2020-08-05T18:07:31Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/DeciderConfig.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class DeciderConfig {\n+\n+    public static final String CACHE_BOUNDS_CONFIG_NAME = \"cache-bounds\";\n+    public static final String CACHE_CONFIG_NAME = \"cache-type\";\n+    public static final String WORKLOAD_CONFIG_NAME = \"workload-type\";\n+    public static final String PRIORITY_ORDER_CONFIG_NAME = \"priority-order\";\n+    public static final String FIELD_DATA_CACHE_UPPER_BOUND = \"field-data-cache-upper-bound\";\n+    public static final String SHARD_REQUEST_CACHE_UPPER_BOUND = \"shard-request-cache-upper-bound\";\n+    private static final double DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND = 0.4;\n+    private static final double DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND = 0.05;\n+    // Defaults based on prioritising Stability over performance.\n+    private static final List<String> DEFAULT_WORKLOAD_PRIORITY = Arrays.asList(\"ingest\", \"search\");\n+    private static final List<String> DEFAULT_CACHE_PRIORITY = Arrays.asList(\"read-heavy\", \"write-heavy\");\n+\n+    public Double fieldDataCacheUpperBound;", "originalCommit": "b5166ee66e58f4e75aa2f029f9e04ee38089bdf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMDc2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465910762", "bodyText": "Nvm, I see what's happening here. Can you follow the Java standard practice and make these private and add getters for them?", "author": "sidheart", "createdAt": "2020-08-05T18:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwOTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzYxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r466657616", "bodyText": "Have added for the ones which are not being used currently as well.", "author": "aditjind", "createdAt": "2020-08-06T20:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwOTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMTQ3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465911475", "bodyText": "Left a comment on DeciderConfig as well. Please use private members + getters for this", "author": "sidheart", "createdAt": "2020-08-05T18:10:20Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decider.java", "diffHunk": "@@ -90,4 +95,31 @@ public void handleNodeMuted() {\n \n   @Override\n   public abstract Decision operate();\n+\n+  /**\n+   * read threshold values from rca.conf\n+   *\n+   * @param conf RcaConf object\n+   */\n+  @Override\n+  public void readRcaConf(RcaConf conf) {\n+    configObj = conf.getDeciderConfig();\n+  }\n+\n+  public double getFieldDataCacheUpperBound() {\n+    return configObj.fieldDataCacheUpperBound;\n+  }\n+\n+  public double getShardRequestCacheUpperBound() {\n+    return configObj.shardRequestCacheUpperBound;\n+  }\n+\n+  public List<String> getWorkLoadPriority() {\n+    return configObj.workloadPriorityOrder;\n+  }\n+\n+  public List<String> getCachePriority() {\n+    return configObj.cachePriorityOrder;\n+  }", "originalCommit": "b5166ee66e58f4e75aa2f029f9e04ee38089bdf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTE3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r466661177", "bodyText": "Done", "author": "aditjind", "createdAt": "2020-08-06T20:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMTQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMjQ3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465912471", "bodyText": "Add a comment on why we're always going with the default here instead of allowing overrides.", "author": "sidheart", "createdAt": "2020-08-05T18:12:07Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/CacheHealthDecider.java", "diffHunk": "@@ -69,8 +70,8 @@ public CacheHealthDecider(\n             .put(ResourceEnum.FIELD_DATA_CACHE, fieldDataCacheClusterRca)\n             .build();\n \n-    this.fieldDataCacheSizeUpperBound = CacheDeciderConfig.DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND;\n-    this.shardRequestCacheSizeUpperBound = CacheDeciderConfig.DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND;\n+    this.fieldDataCacheSizeUpperBound = getDefaultShardRequestCacheUpperBound();\n+    this.shardRequestCacheSizeUpperBound = getDefaultFieldDataCacheUpperBound();", "originalCommit": "b5166ee66e58f4e75aa2f029f9e04ee38089bdf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxNTQzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r465915431", "bodyText": "These fields also make certain calls in this class super misleading. e.g. line 167 on this file has a call to getFieldDataCacheUpperBound(), but that calls Decider#getFieldDataCacheUpperBound which reads the value from a configObj and not this field right? What's the purpose of these fields?", "author": "sidheart", "createdAt": "2020-08-05T18:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMjQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTIwNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r466665207", "bodyText": "I am not sure on the purpose of these fields. I have removed these fields as the the default value would be added in case the config is not read from the file.", "author": "aditjind", "createdAt": "2020-08-06T20:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMjQ3MQ=="}], "type": "inlineReview"}, {"oid": "d1834c078e1d604d7fcdc9241c3adc3cb11abcf4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d1834c078e1d604d7fcdc9241c3adc3cb11abcf4", "message": "Initial Commit\n\nRemoving SpotBugs Warnings\n\nFixing Import Errors\n\nFixing Import Order x2\n\nFixing UT\n\nAddressing PR Comments\n\nAdding Comments\n\nInitial Commit\n\nRemoving SpotBugs Warnings\n\nFixing Import Errors\n\nFixing Import Order x2\n\nFixing UT\n\nAddressing PR Comments\n\nAdding Comments", "committedDate": "2020-08-06T22:20:03Z", "type": "commit"}, {"oid": "75b62e36596d199d2878955fd6a1430a46b32a1b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/75b62e36596d199d2878955fd6a1430a46b32a1b", "message": "Adding Comments", "committedDate": "2020-08-06T22:31:11Z", "type": "commit"}, {"oid": "75b62e36596d199d2878955fd6a1430a46b32a1b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/75b62e36596d199d2878955fd6a1430a46b32a1b", "message": "Adding Comments", "committedDate": "2020-08-06T22:31:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMjI4NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r467332284", "bodyText": "Any reason to create getter for the json field name defined in rca.conf ?", "author": "rguo-aws", "createdAt": "2020-08-07T23:59:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/DeciderConfig.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class DeciderConfig {\n+\n+    private static final String CACHE_BOUNDS_CONFIG_NAME = \"cache-bounds\";\n+    private static final String CACHE_CONFIG_NAME = \"cache-type\";\n+    private static final String WORKLOAD_CONFIG_NAME = \"workload-type\";\n+    private static final String PRIORITY_ORDER_CONFIG_NAME = \"priority-order\";\n+    private static final String FIELD_DATA_CACHE_UPPER_BOUND_NAME = \"field-data-cache-upper-bound\";\n+    private static final String SHARD_REQUEST_CACHE_UPPER_BOUND_NAME = \"shard-request-cache-upper-bound\";\n+    private static final double DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND = 0.4;\n+    private static final double DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND = 0.05;\n+    // Defaults based on prioritising Stability over performance.\n+    private static final List<String> DEFAULT_WORKLOAD_PRIORITY = Arrays.asList(\"ingest\", \"search\");\n+    private static final List<String> DEFAULT_CACHE_PRIORITY = Arrays.asList(\"read-heavy\", \"write-heavy\");\n+\n+    private Double fieldDataCacheUpperBound;\n+    private Double shardRequestCacheUpperBound;\n+    private List<String> cachePriorityOrder;\n+    private List<String> workloadPriorityOrder;\n+\n+    public DeciderConfig(final RcaConf rcaConf) {\n+        fieldDataCacheUpperBound = rcaConf.readDeciderConfig(CACHE_BOUNDS_CONFIG_NAME,\n+                FIELD_DATA_CACHE_UPPER_BOUND_NAME, Double.class);\n+        shardRequestCacheUpperBound = rcaConf.readDeciderConfig(CACHE_BOUNDS_CONFIG_NAME,\n+                SHARD_REQUEST_CACHE_UPPER_BOUND_NAME, Double.class);\n+        cachePriorityOrder = rcaConf.readDeciderConfig(CACHE_CONFIG_NAME,\n+                PRIORITY_ORDER_CONFIG_NAME, List.class);\n+        workloadPriorityOrder = rcaConf.readDeciderConfig(WORKLOAD_CONFIG_NAME,\n+                PRIORITY_ORDER_CONFIG_NAME, List.class);\n+        if (fieldDataCacheUpperBound == null) {\n+            fieldDataCacheUpperBound = DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND;\n+        }\n+        if (shardRequestCacheUpperBound == null) {\n+            shardRequestCacheUpperBound = DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND;\n+        }\n+        if (cachePriorityOrder == null) {\n+            cachePriorityOrder = DEFAULT_CACHE_PRIORITY;\n+        }\n+        if (workloadPriorityOrder == null) {\n+            workloadPriorityOrder = DEFAULT_WORKLOAD_PRIORITY;\n+        }\n+    }\n+\n+    public Double getFieldDataCacheUpperBound() {\n+        return fieldDataCacheUpperBound;\n+    }\n+\n+    public Double getShardRequestCacheUpperBound() {\n+        return shardRequestCacheUpperBound;\n+    }\n+\n+    public List<String> getCachePriorityOrder() {\n+        return cachePriorityOrder;\n+    }\n+\n+    public List<String> getWorkloadPriorityOrder() {\n+        return workloadPriorityOrder;\n+    }\n+\n+    public static List<String> getDefaultWorkloadPriority() {\n+        return DEFAULT_WORKLOAD_PRIORITY;\n+    }\n+\n+    public static List<String> getDefaultCachePriority() {\n+        return DEFAULT_CACHE_PRIORITY;\n+    }\n+\n+    public static Double getDefaultShardRequestCacheUpperBound() {\n+        return DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND;\n+    }\n+\n+    public static Double getDefaultFieldDataCacheUpperBound() {\n+        return DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND;\n+    }\n+\n+    public static String getCacheBoundsConfigName() {\n+        return CACHE_BOUNDS_CONFIG_NAME;\n+    }\n+\n+    public static String getCacheConfigName() {\n+        return CACHE_CONFIG_NAME;\n+    }\n+\n+    public static String getWorkloadConfigName() {\n+        return WORKLOAD_CONFIG_NAME;\n+    }\n+\n+    public static String getPriorityOrderConfigName() {\n+        return PRIORITY_ORDER_CONFIG_NAME;\n+    }\n+\n+    public static String getFieldDataCacheUpperBoundName() {", "originalCommit": "75b62e36596d199d2878955fd6a1430a46b32a1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMzUxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r469033511", "bodyText": "I have created getters for all the private fields. We don't need them now but maybe if want to re-use the variables in some other module, it would be nice to keep it here.", "author": "aditjind", "createdAt": "2020-08-12T06:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMjI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyNTIxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r468825215", "bodyText": "0.4 and 0.05? Any reason why we are using 10.4 and 10.05?", "author": "sruti1312", "createdAt": "2020-08-11T19:49:15Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConfTest.java", "diffHunk": "@@ -63,20 +64,14 @@ public void testReadRcaConfig() {\n \n   @Test\n   public void testReadDeciderConfig() {\n-    final Double fieldDataCacheUpperBound =\n-        rcaConf.readDeciderConfig(\n-            CacheDeciderConfig.CONFIG_NAME,\n-            CacheDeciderConfig.RCA_CONF_KEY_CONSTANTS.FIELD_DATA_CACHE_UPPER_BOUND,\n-            Double.class);\n-    Assert.assertNotNull(fieldDataCacheUpperBound);\n-    Assert.assertEquals(CacheDeciderConfig.DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND, fieldDataCacheUpperBound, 0.01);\n-\n-    final Double shardRequestCacheUpperBound =\n-        rcaConf.readDeciderConfig(\n-            CacheDeciderConfig.CONFIG_NAME,\n-            CacheDeciderConfig.RCA_CONF_KEY_CONSTANTS.SHARD_REQUEST_CACHE_UPPER_BOUND,\n-            Double.class);\n-    Assert.assertNotNull(shardRequestCacheUpperBound);\n-    Assert.assertEquals(CacheDeciderConfig.DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND, shardRequestCacheUpperBound, 0.01);\n+    DeciderConfig configObj = new DeciderConfig(rcaConf);\n+    Assert.assertNotNull(configObj.getCachePriorityOrder());\n+    Assert.assertNotNull(configObj.getWorkloadPriorityOrder());\n+    Assert.assertNotNull(configObj.getFieldDataCacheUpperBound());\n+    Assert.assertNotNull(configObj.getShardRequestCacheUpperBound());\n+    Assert.assertEquals(Arrays.asList(\"test-read-heavy\", \"test-write-heavy\"), configObj.getCachePriorityOrder());\n+    Assert.assertEquals(10.4, configObj.getFieldDataCacheUpperBound(), 0.01);\n+    Assert.assertEquals(10.05, configObj.getShardRequestCacheUpperBound(), 0.01);", "originalCommit": "75b62e36596d199d2878955fd6a1430a46b32a1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMjcxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r469032715", "bodyText": "I have updated the values in the tmp config files so as to assert the reading from the config is working as expected.", "author": "aditjind", "createdAt": "2020-08-12T06:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyNTIxNQ=="}], "type": "inlineReview"}, {"oid": "6bfd92bdad33ee1fa9038e515442b2ef222eee53", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6bfd92bdad33ee1fa9038e515442b2ef222eee53", "message": "Changing Default Variables in PA Config", "committedDate": "2020-08-12T06:41:26Z", "type": "commit"}, {"oid": "d5266ffd04b1700c0acbda2d3338419517a2dfc2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d5266ffd04b1700c0acbda2d3338419517a2dfc2", "message": "Merge branch 'master' into decider-config", "committedDate": "2020-08-12T06:46:38Z", "type": "commit"}, {"oid": "c2acda9b074f7750e2b3f4490959f7c35d0b1a1b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c2acda9b074f7750e2b3f4490959f7c35d0b1a1b", "message": "Fixing Typos", "committedDate": "2020-08-12T07:12:55Z", "type": "commit"}, {"oid": "b881aa46e3fd53eef9141bf1e16890c58874adcc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b881aa46e3fd53eef9141bf1e16890c58874adcc", "message": "Fixing Build Errors", "committedDate": "2020-08-12T08:28:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDc0NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r469454744", "bodyText": "We can split cache bounds and queue bounds into their respective config objects. They will still get read from the decider base class so all deciders have it. But this will help organize the overall structure. (QueueConfig will get passed to ModifyQueueAction etc. )\nWe can do this as a separate PR.", "author": "vigyasharma", "createdAt": "2020-08-12T18:23:06Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/DeciderConfig.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class DeciderConfig {\n+\n+    private static final String CACHE_BOUNDS_CONFIG_NAME = \"cache-bounds\";\n+    private static final String CACHE_CONFIG_NAME = \"cache-type\";\n+    private static final String WORKLOAD_CONFIG_NAME = \"workload-type\";\n+    private static final String PRIORITY_ORDER_CONFIG_NAME = \"priority-order\";\n+    private static final String FIELD_DATA_CACHE_UPPER_BOUND_NAME = \"field-data-cache-upper-bound\";\n+    private static final String SHARD_REQUEST_CACHE_UPPER_BOUND_NAME = \"shard-request-cache-upper-bound\";\n+    private static final double DEFAULT_FIELD_DATA_CACHE_UPPER_BOUND = 0.4;\n+    private static final double DEFAULT_SHARD_REQUEST_CACHE_UPPER_BOUND = 0.05;", "originalCommit": "b881aa46e3fd53eef9141bf1e16890c58874adcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NDgwMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r469574802", "bodyText": "So as suggested cache bounds / queue bounds etc. should be read as a single object from the config file? This can be done when the queue related configs are added in the config file.", "author": "aditjind", "createdAt": "2020-08-12T22:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NDc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODc4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/340#discussion_r469458785", "bodyText": "Good decision keeping them in base class. These will be required by multiple deciders.", "author": "vigyasharma", "createdAt": "2020-08-12T18:30:14Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decider.java", "diffHunk": "@@ -91,4 +101,31 @@ public void handleNodeMuted() {\n \n   @Override\n   public abstract Decision operate();\n+\n+  /**\n+   * read threshold values from rca.conf\n+   *\n+   * @param conf RcaConf object\n+   */\n+  @Override\n+  public void readRcaConf(RcaConf conf) {\n+    configObj = conf.getDeciderConfig();\n+  }\n+\n+  public double getFieldDataCacheUpperBound() {\n+    return configObj != null ? configObj.getFieldDataCacheUpperBound() : getDefaultFieldDataCacheUpperBound();\n+  }\n+\n+  public double getShardRequestCacheUpperBound() {\n+    return configObj != null ? configObj.getShardRequestCacheUpperBound() : getDefaultShardRequestCacheUpperBound();\n+  }\n+\n+  public List<String> getWorkLoadPriority() {", "originalCommit": "b881aa46e3fd53eef9141bf1e16890c58874adcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf850729d09a2697ad2c273e187035347346af84", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cf850729d09a2697ad2c273e187035347346af84", "message": "Adding Verbose Comments", "committedDate": "2020-08-12T22:14:04Z", "type": "commit"}, {"oid": "49821d3c6b1c255aedafa755e7d154ca2058e9dc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/49821d3c6b1c255aedafa755e7d154ca2058e9dc", "message": "Changing Default Values of Cache priority Order", "committedDate": "2020-08-17T16:00:15Z", "type": "commit"}]}