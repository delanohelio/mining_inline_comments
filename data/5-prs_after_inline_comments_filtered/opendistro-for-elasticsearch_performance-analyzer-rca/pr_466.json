{"pr_number": 466, "pr_title": "Add Master Throttling Metric", "pr_createdAt": "2020-10-13T19:47:22Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466", "timeline": [{"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "message": "Add Master Throttling Metric", "committedDate": "2020-10-13T19:39:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MjUyMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r506682523", "bodyText": "Can we add a javadoc as what this metric means (for both of them).", "author": "yojs", "createdAt": "2020-10-16T19:33:59Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -821,6 +821,27 @@ public String toString() {\n     }\n   }\n \n+  public enum MasterThrottlingValue implements MetricValue {\n+    MASTER_THROTTLED_PENDING_TASK_COUNT(MasterThrottlingValue.Constants.THROTTLED_PENDING_TASK_COUNT),", "originalCommit": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzQ0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927441", "bodyText": "Added Javadoc.", "author": "dhwanilpatel", "createdAt": "2020-10-19T17:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MjUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDMzOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r506684338", "bodyText": "Should we put this inside try/catch ?", "author": "yojs", "createdAt": "2020-10-16T19:38:09Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));", "originalCommit": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzU2MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927560", "bodyText": "Added try/catch.", "author": "dhwanilpatel", "createdAt": "2020-10-19T17:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTA2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507415069", "bodyText": "masterThrottlingMetricsSnapshot as final?", "author": "aditjind", "createdAt": "2020-10-19T03:37:53Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;", "originalCommit": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzY1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927653", "bodyText": "Corrected.", "author": "dhwanilpatel", "createdAt": "2020-10-19T17:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTgzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507415839", "bodyText": "return  MAPPER.readValue(line, TYPE_REF); ?", "author": "aditjind", "createdAt": "2020-10-19T03:38:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldProcessEvent(Event event) {\n+        return event.key.contains(PerformanceAnalyzerMetrics.sMasterThrottledTasksPath);\n+    }\n+\n+    @Override\n+    public void commitBatchIfRequired() {\n+        if (handle.size() > BATCH_LIMIT) {\n+            handle.execute();\n+            handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+        }\n+    }\n+\n+    static Map<String, String> extractEntryData(String line) {\n+        try {\n+            Map<String, String> map = MAPPER.readValue(line, TYPE_REF);", "originalCommit": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzc0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927743", "bodyText": "Corrected.", "author": "dhwanilpatel", "createdAt": "2020-10-19T17:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMTMxOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507421318", "bodyText": "Lets remove this unused variable.", "author": "aditjind", "createdAt": "2020-10-19T03:50:49Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class MasterThrottlingMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsSnapshot.class);\n+\n+    private final DSLContext create;\n+    private final Long windowStartTime;", "originalCommit": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzkzMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927933", "bodyText": "LOG was unused here, removed it.", "author": "dhwanilpatel", "createdAt": "2020-10-19T17:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMTMxOA=="}], "type": "inlineReview"}, {"oid": "39aa80961057324e3700f383f03993dce395aa73", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/39aa80961057324e3700f383f03993dce395aa73", "message": "Merge pull request #1 from opendistro-for-elasticsearch/master\n\nSyncing my fork with ODFE master.", "committedDate": "2020-10-19T13:12:42Z", "type": "commit"}, {"oid": "1794a18afeacad9cb8060f9b2efd609701c2aaea", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1794a18afeacad9cb8060f9b2efd609701c2aaea", "message": "Incorporated PR comments for MasterThrottling Metric", "committedDate": "2020-10-19T17:36:35Z", "type": "commit"}, {"oid": "cbdbf616416e81e9f030905db9f2234fa9e68d11", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cbdbf616416e81e9f030905db9f2234fa9e68d11", "message": "Merge remote-tracking branch 'upstream/master' into masterThrottlingMetric", "committedDate": "2020-10-20T20:21:41Z", "type": "commit"}, {"oid": "16e48f593f708ff2236caa8751a72239f8a6be5b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/16e48f593f708ff2236caa8751a72239f8a6be5b", "message": "Added reader/writer execution metrics for Masther throttling", "committedDate": "2020-10-20T20:45:51Z", "type": "commit"}]}