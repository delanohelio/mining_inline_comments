{"pr_number": 401, "pr_title": "Add collector time period to rca.conf", "pr_createdAt": "2020-08-28T21:59:29Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401", "timeline": [{"oid": "657e054a52f779816d8586c4c87682817fb92cb2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/657e054a52f779816d8586c4c87682817fb92cb2", "message": "Add collector time period to rca.conf", "committedDate": "2020-08-28T21:57:58Z", "type": "commit"}, {"oid": "ce867f80101cd4d0b3980f243a1ec036ccd3c058", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ce867f80101cd4d0b3980f243a1ec036ccd3c058", "message": "Resolve format changes", "committedDate": "2020-08-28T22:18:00Z", "type": "commit"}, {"oid": "ba2712bd97bbd4457465cc2944c427797d072849", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ba2712bd97bbd4457465cc2944c427797d072849", "message": "Resolve format changes", "committedDate": "2020-08-28T22:30:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2NDQ1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r479564456", "bodyText": "can we add a java doc here to explain the meaning of each config setting ?", "author": "rguo-aws", "createdAt": "2020-08-28T22:46:51Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/CacheConfig.java", "diffHunk": "@@ -22,21 +22,41 @@\n \n     private Double fieldDataCacheSizeThreshold;\n     private Double shardRequestCacheSizeThreshold;\n+    private Integer fieldDataCollectorTimePeriodInSec;\n+    private Integer shardRequestCollectorTimePeriodInSec;\n \n     public static final double DEFAULT_FIELD_DATA_CACHE_SIZE_THRESHOLD = 0.8;\n     public static final double DEFAULT_SHARD_REQUEST_CACHE_SIZE_THRESHOLD = 0.9;\n+    public static final int DEFAULT_FIELD_DATA_COLLECTOR_TIME_PERIOD_IN_SEC = 300;\n+    public static final int DEFAULT_SHARD_REQUEST_COLLECTOR_TIME_PERIOD_IN_SEC = 300;\n \n     public CacheConfig(final RcaConf rcaConf) {", "originalCommit": "ba2712bd97bbd4457465cc2944c427797d072849", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MTQ5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481351496", "bodyText": "Added", "author": "sruti1312", "createdAt": "2020-09-01T18:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2NDQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2OTc4Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r480269783", "bodyText": "We should have some validation logic in these configs (beyond type checks), like not allowing negative values. I added this support with the Config object in PR #402 , it takes a validator predicate function. Pls consider leveraging it if relevant.", "author": "vigyasharma", "createdAt": "2020-08-31T17:12:36Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/CacheConfig.java", "diffHunk": "@@ -22,21 +22,41 @@\n \n     private Double fieldDataCacheSizeThreshold;\n     private Double shardRequestCacheSizeThreshold;\n+    private Integer fieldDataCollectorTimePeriodInSec;\n+    private Integer shardRequestCollectorTimePeriodInSec;\n \n     public static final double DEFAULT_FIELD_DATA_CACHE_SIZE_THRESHOLD = 0.8;\n     public static final double DEFAULT_SHARD_REQUEST_CACHE_SIZE_THRESHOLD = 0.9;\n+    public static final int DEFAULT_FIELD_DATA_COLLECTOR_TIME_PERIOD_IN_SEC = 300;\n+    public static final int DEFAULT_SHARD_REQUEST_COLLECTOR_TIME_PERIOD_IN_SEC = 300;\n \n     public CacheConfig(final RcaConf rcaConf) {\n         fieldDataCacheSizeThreshold = rcaConf.readRcaConfig(CONFIG_NAME,\n                 RCA_CONF_KEY_CONSTANTS.FIELD_DATA_CACHE_SIZE_THRESHOLD, Double.class);\n         shardRequestCacheSizeThreshold = rcaConf.readRcaConfig(CONFIG_NAME,\n                 RCA_CONF_KEY_CONSTANTS.SHARD_REQUEST_CACHE_SIZE_THRESHOLD, Double.class);\n+        fieldDataCollectorTimePeriodInSec =", "originalCommit": "ba2712bd97bbd4457465cc2944c427797d072849", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15016e151e5a46e6af644cc4b25386ddb49373d8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/15016e151e5a46e6af644cc4b25386ddb49373d8", "message": "Split config per rca and ability to add predicate for rcaConf", "committedDate": "2020-09-01T19:37:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTkxMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481391913", "bodyText": "Did you completely remove public <T> T readRcaConfig(String rcaName, String key, Class<? extends T> clazz) ? No more consumers for it?", "author": "vigyasharma", "createdAt": "2020-09-01T19:49:43Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -186,21 +193,29 @@ public DeciderConfig getDeciderConfig() {\n     return ImmutableMap.copyOf(conf.getRcaConfigSettings());\n   }\n \n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Class<? extends T> clazz) {\n+    return readRcaConfig(rcaName, key, defaultValue, (s) -> true, clazz);\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n-  public <T> T readRcaConfig(String rcaName, String key, Class<? extends T> clazz) {\n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Predicate<T> validator, Class<? extends T> clazz) {", "originalCommit": "15016e151e5a46e6af644cc4b25386ddb49373d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NDU1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481584557", "bodyText": "I have removed the method without predicate and default value. I have refactored consumers using this method. It does not have any more consumers.", "author": "sruti1312", "createdAt": "2020-09-02T02:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NDkxOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481584918", "bodyText": "Do you see a case where we might need that method?", "author": "sruti1312", "createdAt": "2020-09-02T02:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MzI0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481393245", "bodyText": "This should be\nT setting = defaultValue;", "author": "vigyasharma", "createdAt": "2020-09-01T19:52:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -186,21 +193,29 @@ public DeciderConfig getDeciderConfig() {\n     return ImmutableMap.copyOf(conf.getRcaConfigSettings());\n   }\n \n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Class<? extends T> clazz) {\n+    return readRcaConfig(rcaName, key, defaultValue, (s) -> true, clazz);\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n-  public <T> T readRcaConfig(String rcaName, String key, Class<? extends T> clazz) {\n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Predicate<T> validator, Class<? extends T> clazz) {\n     T setting = null;", "originalCommit": "15016e151e5a46e6af644cc4b25386ddb49373d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU1NzU5NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481557594", "bodyText": "Modified", "author": "sruti1312", "createdAt": "2020-09-02T02:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MzI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5NTM0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r481395343", "bodyText": "These can be handled within readRcaConfig itself using default value field.", "author": "vigyasharma", "createdAt": "2020-09-01T19:56:26Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/ShardRequestCacheRcaConfig.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+\n+/**\n+ * config object to store rca config settings for ShardRequestCacheRca\n+ */\n+public class ShardRequestCacheRcaConfig {\n+    public static final String CONFIG_NAME = \"shard-request-cache-rca-config\";\n+\n+    private Double shardRequestCacheSizeThreshold;\n+    private Integer shardRequestCollectorTimePeriodInSec;\n+\n+    // Shard request cache size threshold is 90%\n+    public static final double DEFAULT_SHARD_REQUEST_CACHE_SIZE_THRESHOLD = 0.9;\n+    // Metrics like eviction, hits are collected every 300 sec in shard request cache rca\n+    public static final int DEFAULT_SHARD_REQUEST_COLLECTOR_TIME_PERIOD_IN_SEC = 300;\n+\n+    public ShardRequestCacheRcaConfig(final RcaConf rcaConf) {\n+        shardRequestCacheSizeThreshold =\n+                rcaConf.readRcaConfig(\n+                        CONFIG_NAME,\n+                        RCA_CONF_KEY_CONSTANTS.SHARD_REQUEST_CACHE_SIZE_THRESHOLD,\n+                        DEFAULT_SHARD_REQUEST_CACHE_SIZE_THRESHOLD,\n+                        (s) -> (s > 0),\n+                        Double.class);\n+        shardRequestCollectorTimePeriodInSec =\n+                rcaConf.readRcaConfig(\n+                        CONFIG_NAME,\n+                        RCA_CONF_KEY_CONSTANTS.SHARD_REQUEST_COLLECTOR_TIME_PERIOD_IN_SEC,\n+                        DEFAULT_SHARD_REQUEST_COLLECTOR_TIME_PERIOD_IN_SEC,\n+                        (s) -> (s > 0),\n+                        Integer.class);\n+        if (shardRequestCacheSizeThreshold == null) {\n+            shardRequestCacheSizeThreshold = DEFAULT_SHARD_REQUEST_CACHE_SIZE_THRESHOLD;\n+        }\n+        if (shardRequestCollectorTimePeriodInSec == null) {\n+            shardRequestCollectorTimePeriodInSec = DEFAULT_SHARD_REQUEST_COLLECTOR_TIME_PERIOD_IN_SEC;\n+        }", "originalCommit": "15016e151e5a46e6af644cc4b25386ddb49373d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIzNjc3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r482236771", "bodyText": "Right. Removed it", "author": "sruti1312", "createdAt": "2020-09-02T17:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5NTM0Mw=="}], "type": "inlineReview"}, {"oid": "2150f3a76e3412f262772cd504cf55cc5e13b2e4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2150f3a76e3412f262772cd504cf55cc5e13b2e4", "message": "Merge remote-tracking branch 'origin/master'", "committedDate": "2020-09-01T23:09:56Z", "type": "commit"}, {"oid": "be5e23407f91139027d30f4924aeb5a7ab638b1d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/be5e23407f91139027d30f4924aeb5a7ab638b1d", "message": "Address PR comments", "committedDate": "2020-09-02T17:16:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczMTgxNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r482731817", "bodyText": "Looks like a test for this is missing?", "author": "vigyasharma", "createdAt": "2020-09-03T06:26:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -197,21 +204,29 @@ public DeciderConfig getDeciderConfig() {\n     return ImmutableMap.copyOf(conf.getRcaConfigSettings());\n   }\n \n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Class<? extends T> clazz) {\n+    return readRcaConfig(rcaName, key, defaultValue, (s) -> true, clazz);\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n-  public <T> T readRcaConfig(String rcaName, String key, Class<? extends T> clazz) {\n-    T setting = null;\n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Predicate<T> validator, Class<? extends T> clazz) {\n+    T setting = defaultValue;\n     try {\n       Map<String, Object> rcaObj = null;\n       if (conf.getRcaConfigSettings() != null\n-          && conf.getRcaConfigSettings().containsKey(rcaName)\n-          && conf.getRcaConfigSettings().get(rcaName) != null) {\n+              && conf.getRcaConfigSettings().containsKey(rcaName)\n+              && conf.getRcaConfigSettings().get(rcaName) != null) {\n         rcaObj = (Map<String, Object>) conf.getRcaConfigSettings().get(rcaName);\n       }\n \n       if (rcaObj != null\n-          && rcaObj.containsKey(key)\n-          && rcaObj.get(key) != null) {\n+              && rcaObj.containsKey(key)\n+              && rcaObj.get(key) != null) {\n         setting = clazz.cast(rcaObj.get(key));\n+        if (!validator.test(setting)) {", "originalCommit": "be5e23407f91139027d30f4924aeb5a7ab638b1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyMTA0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r483121049", "bodyText": "Added test", "author": "sruti1312", "createdAt": "2020-09-03T16:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczMTgxNw=="}], "type": "inlineReview"}, {"oid": "3f96127de1a52c0633eb1d3e2513f4a9b18ebddb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3f96127de1a52c0633eb1d3e2513f4a9b18ebddb", "message": "Add test for rca validation", "committedDate": "2020-09-03T16:49:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2OTcwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r483269701", "bodyText": "Can we reuse the Config class to read config settings here ?", "author": "rguo-aws", "createdAt": "2020-09-03T21:42:18Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -197,21 +204,29 @@ public DeciderConfig getDeciderConfig() {\n     return ImmutableMap.copyOf(conf.getRcaConfigSettings());\n   }\n \n+  public <T> T readRcaConfig(String rcaName, String key, T defaultValue, Class<? extends T> clazz) {", "originalCommit": "3f96127de1a52c0633eb1d3e2513f4a9b18ebddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc4MTQwMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/401#discussion_r483781403", "bodyText": "#411\nAdded an issue to track this.", "author": "sruti1312", "createdAt": "2020-09-04T18:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2OTcwMQ=="}], "type": "inlineReview"}, {"oid": "2521ff94cd0bb39d5a4bf2722cbd78311fb2cf90", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2521ff94cd0bb39d5a4bf2722cbd78311fb2cf90", "message": "Merge branch 'master' into partsrut-collector-config", "committedDate": "2020-09-04T18:22:24Z", "type": "commit"}]}