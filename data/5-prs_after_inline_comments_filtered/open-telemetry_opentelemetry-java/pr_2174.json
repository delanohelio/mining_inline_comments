{"pr_number": 2174, "pr_title": "Replace AttributeConsumer with BiConsumer", "pr_createdAt": "2020-12-02T03:05:48Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2174", "timeline": [{"oid": "f9ad30e37c5856da97f0e9975fab4a14e2e39851", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f9ad30e37c5856da97f0e9975fab4a14e2e39851", "message": "Replace AttributeConsumer with BiConsumer", "committedDate": "2020-12-02T03:04:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2NTk5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2174#discussion_r533865998", "bodyText": "Populating another attributes is basically the only time <T> helped - but we can manage that ourselves without sacrificing the ability to lambda", "author": "anuraaga", "createdAt": "2020-12-02T03:07:20Z", "path": "api/src/main/java/io/opentelemetry/api/common/ArrayBackedAttributesBuilder.java", "diffHunk": "@@ -90,8 +90,11 @@ public AttributesBuilder put(String key, boolean... value) {\n   }\n \n   @Override\n-  public AttributesBuilder putAll(Attributes attributes) {\n-    attributes.forEach(this::put);\n+  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  public AttributesBuilder putAll(ReadableAttributes attributes) {\n+    // Attributes must iterate over their entries with matching types for key / value, so this\n+    // downcast to the raw type is safe.\n+    attributes.forEach((key, value) -> put((AttributeKey) key, value));", "originalCommit": "f9ad30e37c5856da97f0e9975fab4a14e2e39851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3190ce13f622b1a6a11f68299da6fdce861b06f4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3190ce13f622b1a6a11f68299da6fdce861b06f4", "message": "Forgot to delete", "committedDate": "2020-12-02T04:03:51Z", "type": "commit"}]}