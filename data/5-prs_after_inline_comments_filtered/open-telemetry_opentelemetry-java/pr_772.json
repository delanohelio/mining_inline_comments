{"pr_number": 772, "pr_title": "Add Measure metrics", "pr_createdAt": "2020-01-17T22:00:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/772", "timeline": [{"oid": "f16a7610aab2d4712172edea12690c4c18078b5a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f16a7610aab2d4712172edea12690c4c18078b5a", "message": "Add Long and Double Measure", "committedDate": "2020-01-17T21:55:16Z", "type": "commit"}, {"oid": "5c14b2627729af0d7092b45e84dc217d7e1d0aa6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c14b2627729af0d7092b45e84dc217d7e1d0aa6", "message": "Add builders to MeterSdk", "committedDate": "2020-01-17T22:02:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1NTkxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368155916", "bodyText": "oh good. I had missed this in my version. you win!", "author": "jkwatson", "createdAt": "2020-01-17T22:06:19Z", "path": "api/src/main/java/io/opentelemetry/metrics/DefaultMeter.java", "diffHunk": "@@ -368,6 +368,11 @@ protected Builder getThis() {\n       public DoubleMeasure build() {\n         return new NoopDoubleMeasure();\n       }\n+\n+      @Override\n+      public Builder setAbsolute(boolean absolute) {", "originalCommit": "f16a7610aab2d4712172edea12690c4c18078b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1NjI4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368156289", "bodyText": "increase isn't the right word here. I would say \"absolute measures can only record positive values\"", "author": "jkwatson", "createdAt": "2020-01-17T22:07:45Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/SdkDoubleMeasure.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleMeasure;\n+import io.opentelemetry.metrics.DoubleMeasure.BoundDoubleMeasure;\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+class SdkDoubleMeasure extends BaseInstrument<BoundDoubleMeasure> implements DoubleMeasure {\n+\n+  private final boolean absolute;\n+\n+  private SdkDoubleMeasure(\n+      String name,\n+      String description,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys,\n+      boolean absolute) {\n+    super(name, description, constantLabels, labelKeys);\n+    this.absolute = absolute;\n+  }\n+\n+  @Override\n+  public void record(double value, LabelSet labelSet) {\n+    createBoundInstrument(labelSet).record(value);\n+  }\n+\n+  @Override\n+  BoundDoubleMeasure createBoundInstrument(LabelSet labelSet) {\n+    return new SdkBoundDoubleMeasure(labelSet, this.absolute);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SdkDoubleMeasure)) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+\n+    SdkDoubleMeasure that = (SdkDoubleMeasure) o;\n+\n+    return absolute == that.absolute;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = super.hashCode();\n+    result = 31 * result + (absolute ? 1 : 0);\n+    return result;\n+  }\n+\n+  private static class SdkBoundDoubleMeasure extends BaseBoundInstrument\n+      implements BoundDoubleMeasure {\n+\n+    private final boolean absolute;\n+\n+    SdkBoundDoubleMeasure(LabelSet labels, boolean absolute) {\n+      super(labels);\n+      this.absolute = absolute;\n+    }\n+\n+    @Override\n+    public void record(double value) {\n+      if (this.absolute && value < 0) {\n+        throw new IllegalArgumentException(\"absolute measure can only increase\");", "originalCommit": "f16a7610aab2d4712172edea12690c4c18078b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1NjY4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368156687", "bodyText": "monotonicity isn't the right word. should be \"absolute\"", "author": "jkwatson", "createdAt": "2020-01-17T22:09:03Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/SdkLongMeasureTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.metrics.LongMeasure;\n+import io.opentelemetry.metrics.LongMeasure.BoundLongMeasure;\n+import java.util.Collections;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link SdkLongMeasure}. */\n+@RunWith(JUnit4.class)\n+public class SdkLongMeasureTest {\n+\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  @Test\n+  public void testLongMeasure() {\n+    MeterSdk testSdk = new MeterSdk();\n+    LabelSet labelSet = testSdk.createLabelSet(\"K\", \"v\");\n+\n+    LongMeasure longMeasure =\n+        SdkLongMeasure.Builder.builder(\"testMeasure\")\n+            .setConstantLabels(ImmutableMap.of(\"sk1\", \"sv1\"))\n+            .setLabelKeys(Collections.singletonList(\"sk1\"))\n+            .setDescription(\"My very own measure\")\n+            .setUnit(\"metric tonnes\")\n+            .setAbsolute(true)\n+            .build();\n+\n+    longMeasure.record(45, testSdk.createLabelSet());\n+\n+    BoundLongMeasure boundLongMeasure = longMeasure.bind(labelSet);\n+    boundLongMeasure.record(334);\n+    BoundLongMeasure duplicateBoundMeasure = longMeasure.bind(testSdk.createLabelSet(\"K\", \"v\"));\n+    assertThat(duplicateBoundMeasure).isEqualTo(boundLongMeasure);\n+\n+    // todo: verify that this has done something, when it has been done.\n+    longMeasure.unbind(boundLongMeasure);\n+  }\n+\n+  @Test\n+  public void testLongMeasure_monotonicity() {", "originalCommit": "f16a7610aab2d4712172edea12690c4c18078b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODQ4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368158485", "bodyText": "Agree!", "author": "thisthat", "createdAt": "2020-01-17T22:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1NjY4Nw=="}], "type": "inlineReview"}, {"oid": "94cfa181ec9cf2770dccf4b56dbf202169253f4f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/94cfa181ec9cf2770dccf4b56dbf202169253f4f", "message": "Fix * import. Address feedback of @jkwatson", "committedDate": "2020-01-17T22:14:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368163865", "bodyText": "since this is a little-b boolean, let's rename this to isAbsolute()", "author": "jkwatson", "createdAt": "2020-01-17T22:33:43Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractMeasureBuilder.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.Measure;\n+\n+abstract class AbstractMeasureBuilder<B extends Measure.Builder<B, V>, V>\n+    extends AbstractInstrumentBuilder<B, V> implements Measure.Builder<B, V> {\n+  private boolean absolute = true;\n+\n+  protected AbstractMeasureBuilder(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public final B setAbsolute(boolean absolute) {\n+    this.absolute = absolute;\n+    return getThis();\n+  }\n+\n+  final boolean getAbsolute() {", "originalCommit": "94cfa181ec9cf2770dccf4b56dbf202169253f4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NTU1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368165551", "bodyText": "I thought about that, but then I decided to be consistent with the other Abstract*Builder classes.\nE.g.:\n\n  \n    \n      opentelemetry-java/sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractCounterBuilder.java\n    \n    \n        Lines 34 to 37\n      in\n      7b601b1\n    \n    \n    \n    \n\n        \n          \n            \n        \n\n        \n          \n           final boolean getMonotonic() { \n        \n\n        \n          \n             return this.monotonic; \n        \n\n        \n          \n           }", "author": "thisthat", "createdAt": "2020-01-17T22:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NjI2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368166263", "bodyText": "ugh. they should both be changed. :)", "author": "jkwatson", "createdAt": "2020-01-17T22:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Njk1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368166954", "bodyText": "I would keep the renaming out of this PR and open an issue to do not forget it ;)", "author": "thisthat", "createdAt": "2020-01-17T22:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NzMwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368167303", "bodyText": "I'm fine with that, as well.", "author": "jkwatson", "createdAt": "2020-01-17T22:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MDQ4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368170486", "bodyText": "ok, create this issue, and this PR should be good to merge, IMO", "author": "jkwatson", "createdAt": "2020-01-17T22:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE3MDc2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368170767", "bodyText": "Done #773", "author": "thisthat", "createdAt": "2020-01-17T22:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2Mzg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDU4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/772#discussion_r368164586", "bodyText": "let's call this TestBoundMeasure", "author": "jkwatson", "createdAt": "2020-01-17T22:36:33Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/AbstractMeasureBuilderTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.metrics.LabelSet;\n+import io.opentelemetry.metrics.Measure;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link AbstractMeasureBuilder}. */\n+@RunWith(JUnit4.class)\n+public class AbstractMeasureBuilderTest {\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  private static final String NAME = \"name\";\n+\n+  @Test\n+  public void defaultValue() {\n+    TestInstrumentBuilder testMetricBuilder = TestInstrumentBuilder.newBuilder(NAME);\n+    assertThat(testMetricBuilder.getName()).isEqualTo(NAME);\n+    assertThat(testMetricBuilder.getDescription()).isEmpty();\n+    assertThat(testMetricBuilder.getUnit()).isEqualTo(\"1\");\n+    assertThat(testMetricBuilder.getLabelKeys()).isEmpty();\n+    assertThat(testMetricBuilder.getConstantLabels()).isEmpty();\n+    assertThat(testMetricBuilder.getAbsolute()).isTrue();\n+    assertThat(testMetricBuilder.build()).isInstanceOf(TestInstrument.class);\n+  }\n+\n+  @Test\n+  public void setAndGetValues() {\n+    TestInstrumentBuilder testMetricBuilder =\n+        TestInstrumentBuilder.newBuilder(NAME).setAbsolute(false);\n+    assertThat(testMetricBuilder.getName()).isEqualTo(NAME);\n+    assertThat(testMetricBuilder.getAbsolute()).isFalse();\n+    assertThat(testMetricBuilder.build()).isInstanceOf(TestInstrument.class);\n+  }\n+\n+  private static final class TestInstrumentBuilder\n+      extends AbstractMeasureBuilder<TestInstrumentBuilder, TestInstrument> {\n+    static TestInstrumentBuilder newBuilder(String name) {\n+      return new TestInstrumentBuilder(name);\n+    }\n+\n+    TestInstrumentBuilder(String name) {\n+      super(name);\n+    }\n+\n+    @Override\n+    TestInstrumentBuilder getThis() {\n+      return this;\n+    }\n+\n+    @Override\n+    public TestInstrument build() {\n+      return new TestInstrument();\n+    }\n+  }\n+\n+  private static final class TestInstrument implements Measure<TestBound> {\n+    private static final TestBound HANDLE = new TestBound();\n+\n+    @Override\n+    public TestBound bind(LabelSet labelSet) {\n+      return HANDLE;\n+    }\n+\n+    @Override\n+    public void unbind(TestBound boundInstrument) {}\n+  }\n+\n+  private static final class TestBound {}", "originalCommit": "94cfa181ec9cf2770dccf4b56dbf202169253f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f917486ed3196385d8f311417c786a2196f9b10", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0f917486ed3196385d8f311417c786a2196f9b10", "message": "Rename TestBound->TestBoundMeasure", "committedDate": "2020-01-17T22:46:34Z", "type": "commit"}]}