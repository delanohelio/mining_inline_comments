{"pr_number": 1891, "pr_title": "Add JMH benchmark for context.", "pr_createdAt": "2020-10-27T08:38:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891", "timeline": [{"oid": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c7fbf21a95b53906830c15f337c3a5b5e7efd74e", "message": "Add JMH benchmark for context.", "committedDate": "2020-10-27T08:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDU3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#discussion_r512590571", "bodyText": "Would it a get to the middle element make sense?", "author": "thisthat", "createdAt": "2020-10-27T10:53:30Z", "path": "context/src/jmh/java/io/opentelemetry/context/ContextBenchmark.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark for Context. */\n+@Threads(value = 1)\n+@Fork(3)\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class ContextBenchmark {\n+\n+  @Param({\"2\", \"3\", \"4\", \"5\", \"10\", \"20\", \"40\"})\n+  private int size;\n+\n+  private List<ContextKey<String>> keys;\n+  private Context context = Context.root();\n+\n+  @Setup\n+  public void setup() {\n+    keys = new ArrayList<>();\n+    for (int i = 0; i < size; i++) {\n+      ContextKey<String> key = ContextKey.named(Integer.toString(i));\n+      context = context.with(key, \"value\");\n+      keys.add(key);\n+    }\n+  }\n+\n+  /** Read value for first key. */\n+  @Benchmark\n+  public String readFirst() {\n+    return context.get(keys.get(0));\n+  }\n+", "originalCommit": "c7fbf21a95b53906830c15f337c3a5b5e7efd74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MDQzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#discussion_r512760437", "bodyText": "For trie getting any element should have almost the same impact.", "author": "bogdandrutu", "createdAt": "2020-10-27T14:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MDc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#discussion_r512760758", "bodyText": "So yes a test for the middle should be acceptable", "author": "bogdandrutu", "createdAt": "2020-10-27T14:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMzQyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1891#discussion_r513103426", "bodyText": "Seems interesting to have, will try to run it later. Thanks for the suggestion!", "author": "anuraaga", "createdAt": "2020-10-28T00:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDU3MQ=="}], "type": "inlineReview"}, {"oid": "f5b1b32666fe938bb165c9b4acbf2fe56c09eeb6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f5b1b32666fe938bb165c9b4acbf2fe56c09eeb6", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into context-benchmark", "committedDate": "2020-10-28T00:03:50Z", "type": "commit"}, {"oid": "8058a3b2b8294fdd63f8a3214ef1400ade1ade0a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8058a3b2b8294fdd63f8a3214ef1400ade1ade0a", "message": "readMiddle", "committedDate": "2020-10-28T00:06:44Z", "type": "commit"}]}