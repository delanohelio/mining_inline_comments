{"pr_number": 1535, "pr_title": "Fix for Issue with bound instruments generating datapoints from no recordings.", "pr_createdAt": "2020-08-12T22:56:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535", "timeline": [{"oid": "45915b6d87436a71c1c752a03090ef85827c649c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/45915b6d87436a71c1c752a03090ef85827c649c", "message": "write a test that demonstrates a bound counter reporting zeros with no observations.", "committedDate": "2020-08-12T15:50:01Z", "type": "commit"}, {"oid": "1ee2fc7d72334078e4e1afc56b9bd03a861737b7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ee2fc7d72334078e4e1afc56b9bd03a861737b7", "message": "Have the metric Aggregator keep track of if there have been recordings since a reset has been done.\nHave the batcher skip batching if no recordings have been made.", "committedDate": "2020-08-12T22:47:22Z", "type": "commit"}, {"oid": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "message": "Add a test to assert the NoopAggregator has no recordings.", "committedDate": "2020-08-12T23:13:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDA4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470380083", "bodyText": "Since we're not using CAS, this can just be volatile boolean.", "author": "anuraaga", "createdAt": "2020-08-14T02:47:22Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -16,14 +16,22 @@\n \n package io.opentelemetry.sdk.metrics.aggregator;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n abstract class AbstractAggregator implements Aggregator {\n+  // Note: This is not 100% thread-safe. There is a race condition where recordings can\n+  // be made in the moment between the reset and the setting of this field's value. In those\n+  // cases, it is possible that a recording could be missed in a given recording interval, but\n+  // it should be picked up in the next, assuming that more recordings are being made.\n+  private final AtomicBoolean hasRecordings = new AtomicBoolean(false);", "originalCommit": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NTYzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470795631", "bodyText": "true enough. I tend to usually not use volatile, rather than the Atomics, but I don't have a really strong feeling either way. I think the performance is pretty much equal, IIRC. Although I have this feeling that that changed with java 14 and Atomics got much worse (/me goes to read his Java Specialists newsletters).", "author": "jkwatson", "createdAt": "2020-08-14T18:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwMzA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470803060", "bodyText": "updated.", "author": "jkwatson", "createdAt": "2020-08-14T18:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDE0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470380146", "bodyText": "Isn't it better to set after recording since that's when it actually \"has recordings\"?", "author": "anuraaga", "createdAt": "2020-08-14T02:47:36Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/AbstractAggregator.java", "diffHunk": "@@ -38,12 +46,37 @@ public void mergeToAndReset(Aggregator other) {\n   abstract void doMergeAndReset(Aggregator aggregator);\n \n   @Override\n-  public void recordLong(long value) {\n-    throw new UnsupportedOperationException(\"This Aggregator does not support long values\");\n+  public final void recordLong(long value) {\n+    hasRecordings.set(true);", "originalCommit": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5MTg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470791852", "bodyText": "I've gone back and forth several times on this, trying to figure out which leads to the least-bad race condition when it happens. I think you're right, though; I'll swap it around.", "author": "jkwatson", "createdAt": "2020-08-14T18:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwMjg4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470802884", "bodyText": "done. thanks for the close look!", "author": "jkwatson", "createdAt": "2020-08-14T18:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDUxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470380517", "bodyText": "No particular preference but wondered if isEmpty is more idiomatic", "author": "anuraaga", "createdAt": "2020-08-14T02:49:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregator/Aggregator.java", "diffHunk": "@@ -57,4 +57,7 @@\n    * @param value the new {@code double} value to be added.\n    */\n   void recordDouble(double value);\n+\n+  /** Whether there have been any recordings since this aggregator has been reset. */\n+  boolean hasRecordings();", "originalCommit": "915b9d8d8809401bf2b92919f8171fe4d56bf8a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NzQwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1535#discussion_r470797409", "bodyText": "In this case, I don't know that aggregators necessarily have a universal concept of \"emptiness\", so I went with something very semantically clear and domain-specific.", "author": "jkwatson", "createdAt": "2020-08-14T18:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDUxNw=="}], "type": "inlineReview"}, {"oid": "108537dbd9b7acaa4373ef9c0b0d5e7b7135a988", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/108537dbd9b7acaa4373ef9c0b0d5e7b7135a988", "message": "Tweaks from PR review", "committedDate": "2020-08-14T18:40:03Z", "type": "commit"}]}