{"pr_number": 961, "pr_title": "Plugin default aggregation for measure, add tests, stresstests", "pr_createdAt": "2020-03-04T19:53:28Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/961", "timeline": [{"oid": "f0fe4dc45d4c8906e54ccf18f640baf033ceb7da", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f0fe4dc45d4c8906e54ccf18f640baf033ceb7da", "message": "Plugin default aggregation for measure, add tests, stresstests", "committedDate": "2020-03-04T19:53:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNjQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/961#discussion_r387926471", "bodyText": "How about TimeUnit.SECONDS.toNanos(1) ?", "author": "jkwatson", "createdAt": "2020-03-04T20:50:54Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/DoubleMeasureSdkTest.java", "diffHunk": "@@ -36,6 +45,7 @@\n public class DoubleMeasureSdkTest {\n \n   @Rule public ExpectedException thrown = ExpectedException.none();\n+  private static final long SECOND_NANOS = 1_000_000_000;", "originalCommit": "f0fe4dc45d4c8906e54ccf18f640baf033ceb7da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNzk2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/961#discussion_r387927961", "bodyText": "this method signature is getting a bit hairy. After this lands, let's think about if there might be a way to bundle some of these things together.", "author": "jkwatson", "createdAt": "2020-03-04T20:53:43Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractInstrument.java", "diffHunk": "@@ -156,4 +160,33 @@ final InstrumentDescriptor getInstrumentDescriptor() {\n       return getMeterSharedState().getInstrumentRegistry().register(instrument);\n     }\n   }\n+\n+  static Descriptor getDefaultMetricDescriptor(\n+      InstrumentDescriptor descriptor,\n+      InstrumentType instrumentType,\n+      InstrumentValueType instrumentValueType,\n+      Aggregation aggregation) {\n+    return Descriptor.create(\n+        descriptor.getName(),\n+        descriptor.getDescription(),\n+        aggregation.getUnit(descriptor.getUnit()),\n+        aggregation.getDescriptorType(instrumentType, instrumentValueType),\n+        descriptor.getConstantLabels());\n+  }\n+\n+  static Batcher getDefaultBatcher(\n+      InstrumentDescriptor descriptor,\n+      InstrumentType instrumentType,\n+      InstrumentValueType instrumentValueType,\n+      MeterProviderSharedState meterProviderSharedState,\n+      MeterSharedState meterSharedState,\n+      Aggregation defaultAggregation) {", "originalCommit": "f0fe4dc45d4c8906e54ccf18f640baf033ceb7da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}