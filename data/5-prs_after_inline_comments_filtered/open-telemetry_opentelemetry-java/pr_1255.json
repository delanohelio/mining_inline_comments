{"pr_number": 1255, "pr_title": "Support env vars for TraceConfig initialization", "pr_createdAt": "2020-05-20T08:42:07Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1OTQ5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427859496", "bodyText": "Please, keep the AutoValue so we don't need to write and maintain trivial code", "author": "thisthat", "createdAt": "2020-05-20T09:11:59Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -35,17 +38,16 @@\n  * io.opentelemetry.sdk.trace.TracerSdkProvider#updateActiveTraceConfig(TraceConfig)} with the\n  * resulting TraceConfig instance.\n  */\n-@AutoValue", "originalCommit": "a5f23fe49998611fb89a8a37d717ed1155659b51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MDQxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427860418", "bodyText": "Please, document the behavior env < sys prop in the getDefualt() method", "author": "thisthat", "createdAt": "2020-05-20T09:13:31Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -58,76 +60,255 @@ public static TraceConfig getDefault() {\n   }\n \n   private static final TraceConfig DEFAULT =\n-      TraceConfig.newBuilder()\n-          .setSampler(DEFAULT_SAMPLER)\n-          .setMaxNumberOfAttributes(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES)\n-          .setMaxNumberOfEvents(DEFAULT_SPAN_MAX_NUM_EVENTS)\n-          .setMaxNumberOfLinks(DEFAULT_SPAN_MAX_NUM_LINKS)\n-          .setMaxNumberOfAttributesPerEvent(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT)\n-          .setMaxNumberOfAttributesPerLink(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK)\n-          .build();\n+      TraceConfig.newBuilder().readEnvironmentVariables().readSystemProperties().build();", "originalCommit": "a5f23fe49998611fb89a8a37d717ed1155659b51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MjU1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427862558", "bodyText": "Also here, please use AutoValue. A reference of how using AutoValue with ConfigBuilder is available here", "author": "thisthat", "createdAt": "2020-05-20T09:16:47Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -58,76 +60,255 @@ public static TraceConfig getDefault() {\n   }\n \n   private static final TraceConfig DEFAULT =\n-      TraceConfig.newBuilder()\n-          .setSampler(DEFAULT_SAMPLER)\n-          .setMaxNumberOfAttributes(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES)\n-          .setMaxNumberOfEvents(DEFAULT_SPAN_MAX_NUM_EVENTS)\n-          .setMaxNumberOfLinks(DEFAULT_SPAN_MAX_NUM_LINKS)\n-          .setMaxNumberOfAttributesPerEvent(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT)\n-          .setMaxNumberOfAttributesPerLink(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK)\n-          .build();\n+      TraceConfig.newBuilder().readEnvironmentVariables().readSystemProperties().build();\n+\n+  private TraceConfig(\n+      Sampler sampler,\n+      int maxNumberOfAttributes,\n+      int maxNumberOfEvents,\n+      int maxNumberOfLinks,\n+      int maxNumberOfAttributesPerEvent,\n+      int maxNumberOfAttributesPerLink) {\n+    this.sampler = sampler;\n+    this.maxNumberOfAttributes = maxNumberOfAttributes;\n+    this.maxNumberOfEvents = maxNumberOfEvents;\n+    this.maxNumberOfLinks = maxNumberOfLinks;\n+    this.maxNumberOfAttributesPerEvent = maxNumberOfAttributesPerEvent;\n+    this.maxNumberOfAttributesPerLink = maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns the global default {@code Sampler} which is used when constructing a new {@code Span}.\n    *\n    * @return the global default {@code Sampler}.\n    */\n-  public abstract Sampler getSampler();\n+  public Sampler getSampler() {\n+    return sampler;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Span}.\n    *\n    * @return the global default max number of attributes per {@link Span}.\n    */\n-  public abstract int getMaxNumberOfAttributes();\n+  public int getMaxNumberOfAttributes() {\n+    return maxNumberOfAttributes;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Event}s per {@link Span}.\n    *\n    * @return the global default max number of {@code Event}s per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfEvents();\n+  public int getMaxNumberOfEvents() {\n+    return maxNumberOfEvents;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Link} entries per {@link Span}.\n    *\n    * @return the global default max number of {@code Link} entries per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfLinks();\n+  public int getMaxNumberOfLinks() {\n+    return maxNumberOfLinks;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Event}.\n    *\n    * @return the global default max number of attributes per {@link Event}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerEvent();\n+  public int getMaxNumberOfAttributesPerEvent() {\n+    return maxNumberOfAttributesPerEvent;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Link}.\n    *\n    * @return the global default max number of attributes per {@link Link}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerLink();\n+  public int getMaxNumberOfAttributesPerLink() {\n+    return maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns a new {@link Builder}.\n    *\n    * @return a new {@link Builder}.\n    */\n-  private static Builder newBuilder() {\n-    return new AutoValue_TraceConfig.Builder();\n+  public static Builder newBuilder() {\n+    return new Builder();\n   }\n \n   /**\n    * Returns a {@link Builder} initialized to the same property values as the current instance.\n    *\n    * @return a {@link Builder} initialized to the same property values as the current instance.\n    */\n-  public abstract Builder toBuilder();\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static final class Builder extends ConfigBuilder<Builder> {", "originalCommit": "a5f23fe49998611fb89a8a37d717ed1155659b51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2MzUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427863521", "bodyText": "In #1181, we decided to get rid of this documentation from the methods and push it to the class and package-info javadoc", "author": "thisthat", "createdAt": "2020-05-20T09:18:16Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -58,76 +60,255 @@ public static TraceConfig getDefault() {\n   }\n \n   private static final TraceConfig DEFAULT =\n-      TraceConfig.newBuilder()\n-          .setSampler(DEFAULT_SAMPLER)\n-          .setMaxNumberOfAttributes(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES)\n-          .setMaxNumberOfEvents(DEFAULT_SPAN_MAX_NUM_EVENTS)\n-          .setMaxNumberOfLinks(DEFAULT_SPAN_MAX_NUM_LINKS)\n-          .setMaxNumberOfAttributesPerEvent(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT)\n-          .setMaxNumberOfAttributesPerLink(DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK)\n-          .build();\n+      TraceConfig.newBuilder().readEnvironmentVariables().readSystemProperties().build();\n+\n+  private TraceConfig(\n+      Sampler sampler,\n+      int maxNumberOfAttributes,\n+      int maxNumberOfEvents,\n+      int maxNumberOfLinks,\n+      int maxNumberOfAttributesPerEvent,\n+      int maxNumberOfAttributesPerLink) {\n+    this.sampler = sampler;\n+    this.maxNumberOfAttributes = maxNumberOfAttributes;\n+    this.maxNumberOfEvents = maxNumberOfEvents;\n+    this.maxNumberOfLinks = maxNumberOfLinks;\n+    this.maxNumberOfAttributesPerEvent = maxNumberOfAttributesPerEvent;\n+    this.maxNumberOfAttributesPerLink = maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns the global default {@code Sampler} which is used when constructing a new {@code Span}.\n    *\n    * @return the global default {@code Sampler}.\n    */\n-  public abstract Sampler getSampler();\n+  public Sampler getSampler() {\n+    return sampler;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Span}.\n    *\n    * @return the global default max number of attributes per {@link Span}.\n    */\n-  public abstract int getMaxNumberOfAttributes();\n+  public int getMaxNumberOfAttributes() {\n+    return maxNumberOfAttributes;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Event}s per {@link Span}.\n    *\n    * @return the global default max number of {@code Event}s per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfEvents();\n+  public int getMaxNumberOfEvents() {\n+    return maxNumberOfEvents;\n+  }\n \n   /**\n    * Returns the global default max number of {@link Link} entries per {@link Span}.\n    *\n    * @return the global default max number of {@code Link} entries per {@code Span}.\n    */\n-  public abstract int getMaxNumberOfLinks();\n+  public int getMaxNumberOfLinks() {\n+    return maxNumberOfLinks;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Event}.\n    *\n    * @return the global default max number of attributes per {@link Event}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerEvent();\n+  public int getMaxNumberOfAttributesPerEvent() {\n+    return maxNumberOfAttributesPerEvent;\n+  }\n \n   /**\n    * Returns the global default max number of attributes per {@link Link}.\n    *\n    * @return the global default max number of attributes per {@link Link}.\n    */\n-  public abstract int getMaxNumberOfAttributesPerLink();\n+  public int getMaxNumberOfAttributesPerLink() {\n+    return maxNumberOfAttributesPerLink;\n+  }\n \n   /**\n    * Returns a new {@link Builder}.\n    *\n    * @return a new {@link Builder}.\n    */\n-  private static Builder newBuilder() {\n-    return new AutoValue_TraceConfig.Builder();\n+  public static Builder newBuilder() {\n+    return new Builder();\n   }\n \n   /**\n    * Returns a {@link Builder} initialized to the same property values as the current instance.\n    *\n    * @return a {@link Builder} initialized to the same property values as the current instance.\n    */\n-  public abstract Builder toBuilder();\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static final class Builder extends ConfigBuilder<Builder> {\n+    private static final String KEY_SAMPLER_PROBABILITY = \"otel.config.sampler.probability\";\n+    private static final String KEY_SPAN_MAX_NUM_ATTRIBUTES = \"otel.config.max.attrs\";\n+    private static final String KEY_SPAN_MAX_NUM_EVENTS = \"otel.config.max.events\";\n+    private static final String KEY_SPAN_MAX_NUM_LINKS = \"otel.config.max.links\";\n+    private static final String KEY_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT =\n+        \"otel.config.max.event.attrs\";\n+    private static final String KEY_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = \"otel.config.max.link.attrs\";\n \n-  /** A {@code Builder} class for {@link TraceConfig}. */\n-  @AutoValue.Builder\n-  public abstract static class Builder {\n+    private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES = 32;\n+    private static final int DEFAULT_SPAN_MAX_NUM_EVENTS = 128;\n+    private static final int DEFAULT_SPAN_MAX_NUM_LINKS = 32;\n+    private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT = 32;\n+    private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n+\n+    private Sampler sampler = Samplers.alwaysOn();\n+    private int maxNumberOfAttributes = DEFAULT_SPAN_MAX_NUM_ATTRIBUTES;\n+    private int maxNumberOfEvents = DEFAULT_SPAN_MAX_NUM_EVENTS;\n+    private int maxNumberOfLinks = DEFAULT_SPAN_MAX_NUM_LINKS;\n+    private int maxNumberOfAttributesPerEvent = DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT;\n+    private int maxNumberOfAttributesPerLink = DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK;\n+\n+    private Builder(TraceConfig traceConfig) {\n+      this.sampler = traceConfig.sampler;\n+      this.maxNumberOfEvents = traceConfig.maxNumberOfEvents;\n+      this.maxNumberOfLinks = traceConfig.maxNumberOfLinks;\n+      this.maxNumberOfAttributesPerLink = traceConfig.maxNumberOfAttributesPerLink;\n+      this.maxNumberOfAttributesPerEvent = traceConfig.maxNumberOfAttributesPerEvent;\n+    }\n+\n+    private Builder() {}\n+\n+    /**", "originalCommit": "a5f23fe49998611fb89a8a37d717ed1155659b51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkyODI3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427928271", "bodyText": "Please, open an issue or leave it in otherwise, we will forget of this detail ;)", "author": "thisthat", "createdAt": "2020-05-20T11:13:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -34,39 +39,66 @@\n  * Builder} instance, then use the {@link\n  * io.opentelemetry.sdk.trace.TracerSdkProvider#updateActiveTraceConfig(TraceConfig)} with the\n  * resulting TraceConfig instance.\n+ *\n+ * <p>Configuration options for {@link TraceConfig} can be read from system properties, environment\n+ * variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For system properties and {@link java.util.Properties} objects, {@link TraceConfig} will look\n+ * for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.sampler.probability}: to set the global default sampler for traces.\n+ *   <li>{@code otel.config.max.attrs}: to set the global default max number of attributes per\n+ *       {@link Span}.\n+ *   <li>{@code otel.config.max.events}: to set the global default max number of {@link Event}s per\n+ *       {@link Span}.\n+ *   <li>{@code otel.config.max.links}: to set the global default max number of {@link Link} entries\n+ *       per {@link Span}.\n+ *   <li>{@code otel.config.max.event.attrs}: to set the global default max number of attributes per\n+ *       {@link Event}.\n+ *   <li>{@code otel.config.max.link.attrs}: to set the global default max number of attributes per\n+ *       {@link Link}.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link TraceConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_CONFIG_SAMPLER_PROBABILITY}: to set the global default sampler for traces.\n+ *   <li>{@code OTEL_CONFIG_MAX_ATTRS}: to set the global default max number of attributes per\n+ *       {@link Span}.\n+ *   <li>{@code OTEL_CONFIG_MAX_EVENTS}: to set the global default max number of {@link Event}s per\n+ *       {@link Span}.\n+ *   <li>{@code OTEL_CONFIG_MAX_LINKS}: to set the global default max number of {@link Link} entries\n+ *       per {@link Span}.\n+ *   <li>{@code OTEL_CONFIG_MAX_EVENT_ATTRS}: to set the global default max number of attributes per\n+ *       {@link Event}.\n+ *   <li>{@code OTEL_CONFIG_MAX_LINK_ATTRS}: to set the global default max number of attributes per\n+ *       {@link Link}.\n+ * </ul>\n  */\n @AutoValue\n @Immutable\n public abstract class TraceConfig {\n-  // These values are the default values for all the global parameters.\n-  // TODO: decide which default sampler to use", "originalCommit": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMDAwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427930000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For System Properties and {@link java.util.Properties} objects, {@link\n          \n          \n            \n             * <p>For system properties and {@link java.util.Properties} objects, {@link", "author": "thisthat", "createdAt": "2020-05-20T11:16:24Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/package-info.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Classes that holds global trace parameters\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.config.TraceConfig}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.config.TraceConfig}</h2>\n+ *\n+ * <ul>\n+ *   <li>{@code SAMPLER: Samplers.alwaysOn()}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES: 32}\n+ *   <li>{@code SPAN_MAX_NUM_EVENTS: 128}\n+ *   <li>{@code SPAN_MAX_NUM_LINKS: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_LINK: 32}\n+ * </ul>\n+ *\n+ * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system\n+ * properties, environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link", "originalCommit": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMDIwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427930202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system\n          \n          \n            \n             * <p>Configuration options for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system", "author": "thisthat", "createdAt": "2020-05-20T11:16:48Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/package-info.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Classes that holds global trace parameters\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.config.TraceConfig}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.config.TraceConfig}</h2>\n+ *\n+ * <ul>\n+ *   <li>{@code SAMPLER: Samplers.alwaysOn()}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES: 32}\n+ *   <li>{@code SPAN_MAX_NUM_EVENTS: 128}\n+ *   <li>{@code SPAN_MAX_NUM_LINKS: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_LINK: 32}\n+ * </ul>\n+ *\n+ * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system", "originalCommit": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMDg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r427930840", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>For Environment Variable, {@link io.opentelemetry.sdk.trace.config.TraceConfig} will look for\n          \n          \n            \n             * <p>For environment variable, {@link io.opentelemetry.sdk.trace.config.TraceConfig} will look for", "author": "thisthat", "createdAt": "2020-05-20T11:18:00Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/package-info.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Classes that holds global trace parameters\n+ *\n+ * <h2>Contents</h2>\n+ *\n+ * <ul>\n+ *   <li>{@link io.opentelemetry.sdk.trace.config.TraceConfig}\n+ * </ul>\n+ *\n+ * <h2>Default values for {@link io.opentelemetry.sdk.trace.config.TraceConfig}</h2>\n+ *\n+ * <ul>\n+ *   <li>{@code SAMPLER: Samplers.alwaysOn()}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES: 32}\n+ *   <li>{@code SPAN_MAX_NUM_EVENTS: 128}\n+ *   <li>{@code SPAN_MAX_NUM_LINKS: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_EVENT: 32}\n+ *   <li>{@code SPAN_MAX_NUM_ATTRIBUTES_PER_LINK: 32}\n+ * </ul>\n+ *\n+ * <p>Values for {@link io.opentelemetry.sdk.trace.config.TraceConfig} can be read from system\n+ * properties, environment variables, or {@link java.util.Properties} objects.\n+ *\n+ * <p>For System Properties and {@link java.util.Properties} objects, {@link\n+ * io.opentelemetry.sdk.trace.config.TraceConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.sampler.probability}: to set the global default sampler for traces.\n+ *   <li>{@code otel.config.max.attrs}: to set the global default max number of attributes per\n+ *       {@link io.opentelemetry.trace.Span}.\n+ *   <li>{@code otel.config.max.events}: to set the global default max number of {@link\n+ *       io.opentelemetry.trace.Event}s per {@link io.opentelemetry.trace.Span}.\n+ *   <li>{@code otel.config.max.links}: to set the global default max number of {@link\n+ *       io.opentelemetry.trace.Link} entries per {@link io.opentelemetry.trace.Span}.\n+ *   <li>{@code otel.config.max.event.attrs}: to set the global default max number of attributes per\n+ *       {@link io.opentelemetry.trace.Event}.\n+ *   <li>{@code otel.config.max.link.attrs}: to set the global default max number of attributes per\n+ *       {@link io.opentelemetry.trace.Link}.\n+ * </ul>\n+ *\n+ * <p>For Environment Variable, {@link io.opentelemetry.sdk.trace.config.TraceConfig} will look for", "originalCommit": "87ba8bf7e84a6db74d65dc72e49783cfb89142f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNDI4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428224289", "bodyText": "We should have a unit test for this method (and for this whole class).", "author": "jkwatson", "createdAt": "2020-05-20T18:33:19Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/common/export/ConfigBuilder.java", "diffHunk": "@@ -139,4 +139,21 @@ protected static Long getLongProperty(String name, Map<String, String> map) {\n       return null;\n     }\n   }\n+\n+  /**\n+   * Get a double property from the map, {@code null} if it cannot be found or it has a wrong type.\n+   *\n+   * @param name The property name\n+   * @param map The map where to look for the property\n+   * @return the {@link Double} value of the property, {@code null} in case of error or if the\n+   *     property cannot be found.\n+   */\n+  @Nullable\n+  protected static Double getDoubleProperty(String name, Map<String, String> map) {", "originalCommit": "244c0ca17df5cbe6d679de01669814ab46cfa252", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2Mzk1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r429063953", "bodyText": "Done", "author": "RashmiRam", "createdAt": "2020-05-22T06:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNDI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428265579", "bodyText": "Usually getDefault() methods return a a static, read-only value. I wonder if we should have the same here, or else have this method use a different name.", "author": "carlosalberto", "createdAt": "2020-05-20T19:44:36Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -48,25 +89,17 @@\n   private static final int DEFAULT_SPAN_MAX_NUM_ATTRIBUTES_PER_LINK = 32;\n \n   /**\n-   * Returns the default {@code TraceConfig}.\n+   * Returns a new {@link TraceConfig} reading the configuration values from the environment and\n+   * from system properties. System properties override values defined in the environment. If a\n+   * configuration value is missing, it uses the default value.\n    *\n    * @return the default {@code TraceConfig}.\n    * @since 0.1.0\n    */\n   public static TraceConfig getDefault() {\n-    return DEFAULT;\n+    return newBuilder().readEnvironmentVariables().readSystemProperties().build();", "originalCommit": "244c0ca17df5cbe6d679de01669814ab46cfa252", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NjYzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428266634", "bodyText": "Also: do we really want to use env values as default here? I know that for Resources we do environment-variables fetching by default, and I'm wondering if we should do it here as well.", "author": "carlosalberto", "createdAt": "2020-05-20T19:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3MDA3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428270071", "bodyText": "Agreed. A method called 'getDefault' should be returning a trace config with the default settings, not returning one that has been configured by the user.", "author": "jkwatson", "createdAt": "2020-05-20T19:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MTUxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428481516", "bodyText": "Yes. Agreed. getDefault is less intuitive. If getDefault returns trace config with the default settings, anybody who requires the config to be read from either env vars or sys props should again use updateActiveTraceConfig as default TraceConfig instance is assigned here. https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSharedState.java#L35\nMy proposal is to keep the getDefault similar to how we do for Resources where we fetch env vars by default and if getDefault is less intuitive, we can rename it as simply getInstance. what do you think?", "author": "RashmiRam", "createdAt": "2020-05-21T07:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5Nzg4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428797889", "bodyText": "I would argue the other way. I think we should change the method on Resources to make it clear it's being loaded from the environment, rather than perpetuate the confusing naming to more places.", "author": "jkwatson", "createdAt": "2020-05-21T17:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwMTcxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428801712", "bodyText": "+1 on changing Resources to make it clear we are loading stuff from the environment.", "author": "carlosalberto", "createdAt": "2020-05-21T17:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0NTMxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r429045310", "bodyText": "Thanks for the reply. There are 2 things to work on.\n\nShall we have one more method getInstance to fetch settings from env vars/sys props to use it across resources?\nIs getDefault still required? shall we remove/deprecate this? Because, getInstance will anyways provide trace config with default settings in the absence of env vars and sys props.\n\nPlease let me know how to proceed further.", "author": "RashmiRam", "createdAt": "2020-05-22T05:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4MDM3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r430580372", "bodyText": "For the moment, revert the implementation of getDefault to what it was before. If we want to provide additional methods that bypass the builder, we can make that decision separately, and apply it across the board to all the configurable items in the SDK.", "author": "jkwatson", "createdAt": "2020-05-26T17:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTUyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r430861523", "bodyText": "Done.", "author": "RashmiRam", "createdAt": "2020-05-27T05:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI2NTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5OTI2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r428799265", "bodyText": "this javadoc is wrong.", "author": "jkwatson", "createdAt": "2020-05-21T17:24:03Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/config/TraceConfig.java", "diffHunk": "@@ -138,6 +255,28 @@ private static Builder newBuilder() {\n      */\n     public abstract Builder setSampler(Sampler sampler);\n \n+    /**\n+     * Sets the global default {@code Sampler}. It must be not {@code null} otherwise {@link\n+     * #build()} will throw an exception.\n+     *\n+     * @param samplerProbability the global default {@code Sampler}.", "originalCommit": "38dd99ffa517937c3eb23cb627df7dfc46915a95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NDAxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1255#discussion_r429064011", "bodyText": "Done", "author": "RashmiRam", "createdAt": "2020-05-22T06:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5OTI2NQ=="}], "type": "inlineReview"}, {"oid": "531357dad842a5fa6bfad6cb140c0faf5b2c4f4b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/531357dad842a5fa6bfad6cb140c0faf5b2c4f4b", "message": "Added ConfigBuilder for TraceConfig class to support config from env vars\n\nFixes #1239", "committedDate": "2020-05-29T06:18:07Z", "type": "commit"}, {"oid": "1dfbcbac210d3d725b304e2ee40d2acc0319f1e2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1dfbcbac210d3d725b304e2ee40d2acc0319f1e2", "message": "Updated doc", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "9ed18dc07c62af160329ef9d440457bfbf60fc42", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ed18dc07c62af160329ef9d440457bfbf60fc42", "message": "Addressed review comments\n\n1. Brought back the AutoValue\n2. Added AutoValue.Builder for ConfigBuilder\n3. Added javaDoc as per the decisions taken in #1181\n4. Added tests to read from system properties", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "e8161deecd210c26c58b0de73876e00bdf57bd67", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e8161deecd210c26c58b0de73876e00bdf57bd67", "message": "Fixed javadoc + brought back old comments", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "0ce3e57cf38964b4461d5865fbdaaa3535bc9ad9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ce3e57cf38964b4461d5865fbdaaa3535bc9ad9", "message": "Fixed formatting issue", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "37e31d04aaaa718e08fcb0425da155f9479bf0e0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/37e31d04aaaa718e08fcb0425da155f9479bf0e0", "message": "Added tests for configbuilder class", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "15eef91d6e059980f2b42fe74ca09c193d7a01ac", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15eef91d6e059980f2b42fe74ca09c193d7a01ac", "message": "Added more tests", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "42c80fcbe6e419cc205d7ac8ab3b660d159a715b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/42c80fcbe6e419cc205d7ac8ab3b660d159a715b", "message": "Fixed javadoc", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "message": "TraceConfig.getDefault() to return default settings", "committedDate": "2020-05-29T06:18:25Z", "type": "commit"}, {"oid": "d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9bf9befd0b0042fde5b60ed187ee891a91a63e6", "message": "TraceConfig.getDefault() to return default settings", "committedDate": "2020-05-29T06:18:25Z", "type": "forcePushed"}, {"oid": "90c94ffd0e5ece1f81782471fcb8630e19c49474", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/90c94ffd0e5ece1f81782471fcb8630e19c49474", "message": "Removed setup from systemprop traceconfig test", "committedDate": "2020-06-01T08:15:43Z", "type": "commit"}, {"oid": "9ddcb32a59db8f03742fbd957e1df84b720547b2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ddcb32a59db8f03742fbd957e1df84b720547b2", "message": "test commit", "committedDate": "2020-06-01T18:30:58Z", "type": "commit"}]}