{"pr_number": 1682, "pr_title": "Make the getKey method on AttributeKey non-nullable", "pr_createdAt": "2020-09-22T21:56:25Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1682", "timeline": [{"oid": "14c8e3c18c2df719b6e40e24324070232753ff9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/14c8e3c18c2df719b6e40e24324070232753ff9b", "message": "Make the getKey method non-nullable\nThis was done by tricking AutoValue with a separate field for the storage.", "committedDate": "2020-09-22T21:55:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMzkxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1682#discussion_r493113917", "bodyText": "But can't key() return null?", "author": "anuraaga", "createdAt": "2020-09-23T00:57:29Z", "path": "api/src/main/java/io/opentelemetry/common/AttributeKeyImpl.java", "diffHunk": "@@ -17,15 +17,24 @@\n package io.opentelemetry.common;\n \n import com.google.auto.value.AutoValue;\n+import javax.annotation.Nullable;\n \n @SuppressWarnings(\"rawtypes\")\n @AutoValue\n abstract class AttributeKeyImpl<T> implements AttributeKey<T> {\n \n   static <T> AttributeKeyImpl<T> create(String key, AttributeType type) {\n-    return new AutoValue_AttributeKeyImpl<>(key, type);\n+    return new AutoValue_AttributeKeyImpl<>(type, key);\n   }\n \n+  @Override\n+  public String getKey() {", "originalCommit": "14c8e3c18c2df719b6e40e24324070232753ff9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MzA5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1682#discussion_r493163096", "bodyText": "It can, but I really want the public API to have the getKey() be non-nullable. We can't have the API blow up with null keys, but we really want the API to signal that it should never be null. I'm open to other suggestions to solve this one.", "author": "jkwatson", "createdAt": "2020-09-23T02:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMzkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3OTY1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1682#discussion_r493179657", "bodyText": "Got it - yeah that's a corner case I've ran into before too. I wasn't sure that was the intention but makes sense to me. If we ever add nullness checking (want to!) we'll need some \"nullness casts\" for these cases, just as a future food for thought.", "author": "anuraaga", "createdAt": "2020-09-23T03:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMzkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MDMxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1682#discussion_r493190319", "bodyText": "Right now, we drop null keys, I believe, so this seems like a decent compromise. You can put null in there, but you'll never actually see a null-keyed attribute anywhere, since we throw them away.", "author": "jkwatson", "createdAt": "2020-09-23T04:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMzkxNw=="}], "type": "inlineReview"}]}