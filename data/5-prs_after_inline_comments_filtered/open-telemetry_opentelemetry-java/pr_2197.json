{"pr_number": 2197, "pr_title": "add some basic benchmarks for various baggage operations", "pr_createdAt": "2020-12-04T16:42:54Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNDQ4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537314489", "bodyText": "Nit we use singular BaggageBenchmark for all our others I think", "author": "anuraaga", "createdAt": "2020-12-07T08:27:38Z", "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {", "originalCommit": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MjUxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537672514", "bodyText": "I'll rename it as a part of the rebase process where i need to relocate it anyway.", "author": "jkwatson", "createdAt": "2020-12-07T17:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNDQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTE1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537315154", "bodyText": "Can you preallocate the key / value strings in a Setup? No idea how significant the string allocation here is without trying that, it may not be though. Though it would definitely skew the GC numbers", "author": "anuraaga", "createdAt": "2020-12-07T08:28:46Z", "path": "api/src/jmh/java/io/opentelemetry/api/trace/BaggageBenchmarks.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.api.trace;\n+\n+import io.opentelemetry.api.baggage.Baggage;\n+import io.opentelemetry.api.baggage.BaggageBuilder;\n+import io.opentelemetry.context.Context;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@SuppressWarnings(\"JavadocMethod\")\n+@State(Scope.Thread)\n+public class BaggageBenchmarks {\n+\n+  @Param({\"0\", \"1\", \"10\", \"100\"})\n+  public int itemsToAdd;\n+\n+  @Benchmark\n+  @BenchmarkMode({Mode.AverageTime})\n+  @Fork(1)\n+  @Measurement(iterations = 15, time = 1)\n+  @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+  @Warmup(iterations = 5, time = 1)\n+  public Baggage baggageItemBenchmark() {\n+    BaggageBuilder builder = Baggage.builder();\n+    for (int i = 0; i < itemsToAdd; i++) {\n+      builder.put(\"key\" + i, \"value\" + i);", "originalCommit": "8496be1a53d50fa964f1cd9e8a1a9578c6987b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MjE5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537672197", "bodyText": "sure thing. will do so!", "author": "jkwatson", "createdAt": "2020-12-07T17:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczNzAxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2197#discussion_r537737018", "bodyText": "updated...it didn't materially change the benchmarks much.", "author": "jkwatson", "createdAt": "2020-12-07T18:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNTE1NA=="}], "type": "inlineReview"}, {"oid": "ac4d94932336f468689733c541190d2081b0ce03", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ac4d94932336f468689733c541190d2081b0ce03", "message": "add some basic benchmarks for various baggage operations", "committedDate": "2020-12-07T16:34:43Z", "type": "commit"}, {"oid": "d9e387c0774b7d1a06a4fa4db4b709c0eb72f015", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9e387c0774b7d1a06a4fa4db4b709c0eb72f015", "message": "update for changes from upstream; pre-allocate the strings in the benchmark.", "committedDate": "2020-12-07T18:38:33Z", "type": "commit"}, {"oid": "d9e387c0774b7d1a06a4fa4db4b709c0eb72f015", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d9e387c0774b7d1a06a4fa4db4b709c0eb72f015", "message": "update for changes from upstream; pre-allocate the strings in the benchmark.", "committedDate": "2020-12-07T18:38:33Z", "type": "forcePushed"}, {"oid": "5f8dc00cbbe7323ed405f73e0e49e2c0f3ff3999", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5f8dc00cbbe7323ed405f73e0e49e2c0f3ff3999", "message": "allocate the strings statically because we can", "committedDate": "2020-12-07T18:54:09Z", "type": "commit"}]}