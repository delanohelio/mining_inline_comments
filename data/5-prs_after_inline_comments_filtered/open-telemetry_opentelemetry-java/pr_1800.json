{"pr_number": 1800, "pr_title": "Update Jaeger exporter to map Resources to process tags", "pr_createdAt": "2020-10-14T15:31:08Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800", "timeline": [{"oid": "8cdbcfe0eb8ea9397fdf186c7130b088e1527a22", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8cdbcfe0eb8ea9397fdf186c7130b088e1527a22", "message": "#1609 Update Jaeger exporter to map Resources to process tags\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-14T15:30:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTY3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r504845670", "bodyText": "Why is this needed?", "author": "bogdandrutu", "createdAt": "2020-10-14T17:20:46Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -192,7 +196,10 @@ private Adapter() {}\n   @VisibleForTesting\n   static <T> Model.KeyValue toKeyValue(AttributeKey<T> key, T value) {\n     Model.KeyValue.Builder builder = Model.KeyValue.newBuilder();\n-    builder.setKey(key.getKey());\n+    builder.setKey(\n+        key.getKey()\n+            .replace(\"InstrumentationLibrary.name\", \"otel.library.name\")\n+            .replace(\"InstrumentationLibrary.version\", \"otel.library.version\"));", "originalCommit": "8cdbcfe0eb8ea9397fdf186c7130b088e1527a22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4ODk3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r505088974", "bodyText": "Thanks @malafeev - looks like there was some confusion on the issue, yeah you shouldn't need to do any sort of name translation logic.", "author": "anuraaga", "createdAt": "2020-10-15T00:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NzI4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506567286", "bodyText": "removed", "author": "malafeev", "createdAt": "2020-10-16T15:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2ODQxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506568418", "bodyText": "I was confused by https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk_exporters/jaeger.md#resource\nI decided that InstrumentationLibrary.name should be translated into otel.library.name etc", "author": "malafeev", "createdAt": "2020-10-16T15:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTE3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r505089170", "bodyText": "Resource corresponds to process, so we want to add these to the process's tags. Can you move this logic to the process here?\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java#L89", "author": "anuraaga", "createdAt": "2020-10-15T00:05:20Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -75,6 +75,10 @@ private Adapter() {}\n     target.addAllLogs(toJaegerLogs(span.getEvents()));\n     target.addAllReferences(toSpanRefs(span.getLinks()));\n \n+    if (span.getResource() != null && span.getResource().getAttributes() != null) {\n+      target.addAllTags(toKeyValues(span.getResource().getAttributes()));", "originalCommit": "8cdbcfe0eb8ea9397fdf186c7130b088e1527a22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r505148574", "bodyText": "@anuraaga there I don't have SpanData to get span.getResource().getAttributes().\nshould I get resource attributes using Resource.getDefault().getAttributes() ?", "author": "malafeev", "createdAt": "2020-10-15T03:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2MjI5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r505162291", "bodyText": "Oh interesting - in that case I think this does need to be a bigger refactoring to move the process struct construction into the export flow. We should be able to follow a logic flow very similar to OTLP which starts by grouping by resource\nhttps://www.github.com/open-telemetry/opentelemetry-java/tree/master/exporters%2Fotlp%2Fsrc%2Fmain%2Fjava%2Fio%2Fopentelemetry%2Fexporters%2Fotlp%2FSpanAdapter.java", "author": "anuraaga", "createdAt": "2020-10-15T04:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1Nzc5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r505257795", "bodyText": "Collector.PostSpansRequest accepts only one Model.Batch. But Model.Batch is per Model.Process.\nhttps://github.com/open-telemetry/opentelemetry-java/blob/master/exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java#L107\nIf there are several different Resources then I need to create several batches and send several requests.\nShould I change collector.proto to accept multiple batches?\nMy concern is that jaeger backend will not accept such payload.", "author": "malafeev", "createdAt": "2020-10-15T07:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MDYzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r505890633", "bodyText": "Not an expert in this, but my guess is that we'll need to change the exporter to potentially send more than one batch, one per Resource on the span data. The case where you get multiple Resources per batch of spans should be very rare, so I wouldn't worry about the fact that we're sending multiple requests per export too much.", "author": "jkwatson", "createdAt": "2020-10-15T22:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2Njk3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506566975", "bodyText": "refactored to group spans by resource and then set process tags per resource", "author": "malafeev", "createdAt": "2020-10-16T15:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4OTE3MA=="}], "type": "inlineReview"}, {"oid": "7c00c19f61cb43618f89b6db6e90ba9cc7eb49b2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7c00c19f61cb43618f89b6db6e90ba9cc7eb49b2", "message": "add resource attributes to process tags\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-16T15:25:19Z", "type": "commit"}, {"oid": "b13536fee97013122f5d06de6565c68530846031", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b13536fee97013122f5d06de6565c68530846031", "message": "fix checkstyle error\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-16T15:49:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMjM3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506602377", "bodyText": "Did you consider using a java 8 Stream with a groupingBy collector to do this work? It might read a little more clearly. It's a one-liner in this case:\n    return spans.stream().collect(Collectors.groupingBy(SpanData::getResource));", "author": "jkwatson", "createdAt": "2020-10-16T16:56:19Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -39,6 +42,22 @@\n \n   private Adapter() {}\n \n+  /**\n+   * Groups {@link SpanData}'s by {@link Resource}.\n+   *\n+   * @param spans the list of spans to be grouped\n+   * @return the map of grouped spans\n+   */\n+  static Map<Resource, List<SpanData>> groupByResource(Collection<SpanData> spans) {\n+    Map<Resource, List<SpanData>> result = new HashMap<>();\n+    for (SpanData spanData : spans) {\n+      Resource resource = spanData.getResource();\n+      List<SpanData> spanDataList = result.computeIfAbsent(resource, k -> new ArrayList<>());\n+      spanDataList.add(spanData);\n+    }\n+    return result;", "originalCommit": "b13536fee97013122f5d06de6565c68530846031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMzM5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506603394", "bodyText": "(and, given that it's a one-liner...you can probably just one-liner it in the calling code, rather than adding a function here.)", "author": "jkwatson", "createdAt": "2020-10-16T16:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMjM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5OTc1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r507799750", "bodyText": "done", "author": "malafeev", "createdAt": "2020-10-19T14:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMjM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506604956", "bodyText": "I'd extract lines 120-132 into a separate method, and then you could use a java 8 Stream/map to collapse this logic significantly.", "author": "jkwatson", "createdAt": "2020-10-16T17:01:06Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java", "diffHunk": "@@ -104,26 +109,42 @@ private JaegerGrpcSpanExporter(String serviceName, ManagedChannel channel, long\n    */\n   @Override\n   public CompletableResultCode export(Collection<SpanData> spans) {\n-    Collector.PostSpansRequest request =\n-        Collector.PostSpansRequest.newBuilder()\n-            .setBatch(\n-                Model.Batch.newBuilder()\n-                    .addAllSpans(Adapter.toJaeger(spans))\n-                    .setProcess(this.process)\n-                    .build())\n-            .build();\n-\n     CollectorServiceGrpc.CollectorServiceFutureStub stub = this.stub;\n     if (deadlineMs > 0) {\n       stub = stub.withDeadlineAfter(deadlineMs, TimeUnit.MILLISECONDS);\n     }\n \n+    Map<Resource, List<SpanData>> resourceAndSpanData = Adapter.groupByResource(spans);\n+    List<Collector.PostSpansRequest> requests = new ArrayList<>();\n+    for (Map.Entry<Resource, List<SpanData>> entry : resourceAndSpanData.entrySet()) {\n+      Process.Builder builder = this.processBuilder.clone();\n+      if (entry.getKey().getAttributes() != null) {\n+        builder.addAllTags(Adapter.toKeyValues(entry.getKey().getAttributes()));\n+      }\n+\n+      Collector.PostSpansRequest request =\n+          Collector.PostSpansRequest.newBuilder()\n+              .setBatch(\n+                  Model.Batch.newBuilder()\n+                      .addAllSpans(Adapter.toJaeger(entry.getValue()))\n+                      .setProcess(builder.build())\n+                      .build())\n+              .build();", "originalCommit": "b13536fee97013122f5d06de6565c68530846031", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNTk4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r506605987", "bodyText": "Also, please add a unit test to the JaegerGrpcSpanExporterTest to cover this change.", "author": "jkwatson", "createdAt": "2020-10-16T17:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5OTY0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r507799644", "bodyText": "done", "author": "malafeev", "createdAt": "2020-10-19T14:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNDEyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r508024126", "bodyText": "I think it would be good to have a test that uses multiple resources, so we can verify that multiple batches are sent, and we don't just use the first Resource we find. I didn't see this case in the test code. did I miss it?", "author": "jkwatson", "createdAt": "2020-10-19T19:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5MTM5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r508191394", "bodyText": "added test", "author": "malafeev", "createdAt": "2020-10-20T03:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwNDk1Ng=="}], "type": "inlineReview"}, {"oid": "76aaf3a956526f1326b718eeaf735b7877d667b4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76aaf3a956526f1326b718eeaf735b7877d667b4", "message": "refactored according to review comments\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-19T14:31:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyOTA5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r508129095", "bodyText": "We can remove this code now right?", "author": "anuraaga", "createdAt": "2020-10-19T23:57:53Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/Adapter.java", "diffHunk": "@@ -75,6 +75,10 @@ private Adapter() {}\n     target.addAllLogs(toJaegerLogs(span.getEvents()));\n     target.addAllReferences(toSpanRefs(span.getLinks()));\n \n+    if (span.getResource() != null && span.getResource().getAttributes() != null) {", "originalCommit": "76aaf3a956526f1326b718eeaf735b7877d667b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5MTI5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r508191292", "bodyText": "removed", "author": "malafeev", "createdAt": "2020-10-20T03:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyOTA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMDY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r508130694", "bodyText": "Don't need null check for attributes", "author": "anuraaga", "createdAt": "2020-10-20T00:03:17Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java", "diffHunk": "@@ -137,6 +144,21 @@ public void onFailure(Throwable t) {\n     return result;\n   }\n \n+  private Collector.PostSpansRequest buildRequest(Resource resource, List<SpanData> spans) {\n+    Process.Builder builder = this.processBuilder.clone();\n+    if (resource.getAttributes() != null) {", "originalCommit": "76aaf3a956526f1326b718eeaf735b7877d667b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5MTMzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1800#discussion_r508191334", "bodyText": "removed", "author": "malafeev", "createdAt": "2020-10-20T03:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzMDY5NA=="}], "type": "inlineReview"}, {"oid": "2f76addffad8f119131ecbd27a21487743b812ee", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2f76addffad8f119131ecbd27a21487743b812ee", "message": "implement comments\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-10-20T03:44:04Z", "type": "commit"}]}