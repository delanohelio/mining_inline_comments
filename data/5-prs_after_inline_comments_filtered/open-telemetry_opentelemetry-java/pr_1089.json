{"pr_number": 1089, "pr_title": "Add Jaeger remote sampler", "pr_createdAt": "2020-04-08T09:50:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMTgyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405401820", "bodyText": "The initial sampler is used before the configuration is obtained from the server.\nI am not sure whether we should use this default from Jaeger clients or use default sampling probability from OTEL.", "author": "pavolloffay", "createdAt": "2020-04-08T09:53:00Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.PerOperationSamplingStrategies;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyParameters;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyResponse;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc.SamplingManagerBlockingStub;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Remote sampler that gets sampling configuration from remote Jaeger server. */\n+public class JaegerRemoteSampler implements Sampler {\n+  private static final Logger logger = Logger.getLogger(JaegerRemoteSampler.class.getName());\n+\n+  private static final int DEFAULT_POLLING_INTERVAL_MS = 60000;\n+  private static final Sampler INITIAL_SAMPLER = Samplers.probability(0.001);", "originalCommit": "266cd76f5559cf98f7842021c56a3a197657b6e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NjAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405656030", "bodyText": "s/2019/2020/", "author": "jkwatson", "createdAt": "2020-04-08T16:30:24Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "266cd76f5559cf98f7842021c56a3a197657b6e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MTA2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405681064", "bodyText": "why isn't this private?", "author": "jkwatson", "createdAt": "2020-04-08T17:09:15Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.PerOperationSamplingStrategies;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyParameters;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyResponse;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc.SamplingManagerBlockingStub;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Remote sampler that gets sampling configuration from remote Jaeger server. */\n+public class JaegerRemoteSampler implements Sampler {\n+  private static final Logger logger = Logger.getLogger(JaegerRemoteSampler.class.getName());\n+\n+  private static final int DEFAULT_POLLING_INTERVAL_MS = 60000;\n+  private static final Sampler INITIAL_SAMPLER = Samplers.probability(0.001);\n+\n+  private final String serviceName;\n+  private final SamplingManagerBlockingStub stub;\n+  Sampler sampler;", "originalCommit": "266cd76f5559cf98f7842021c56a3a197657b6e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2MzU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r406063593", "bodyText": "for tests", "author": "pavolloffay", "createdAt": "2020-04-09T09:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MTA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwNjkxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r406306910", "bodyText": "You should add a package-access getter, instead, and add a @VisibleForTesting annotation to it.", "author": "jkwatson", "createdAt": "2020-04-09T15:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTAwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405685006", "bodyText": "Is there a unit test suite to go along with this? If we're pulling this in, we need to make sure we have the test coverage on it.", "author": "jkwatson", "createdAt": "2020-04-08T17:15:45Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/RateLimiter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.opentelemetry.sdk.common.Clock;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * This class was taken from Jaeger java client.", "originalCommit": "266cd76f5559cf98f7842021c56a3a197657b6e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzODQwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r411438409", "bodyText": "I have moved here also the tests.", "author": "pavolloffay", "createdAt": "2020-04-20T14:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTQyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r405685421", "bodyText": "unit tests for this class?", "author": "jkwatson", "createdAt": "2020-04-08T17:16:32Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/RateLimitingSampler.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.jaeger;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.internal.MillisClock;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * {@link RateLimitingSampler} sampler uses a leaky bucket rate limiter to ensure that traces are\n+ * sampled with a certain constant rate.\n+ */\n+class RateLimitingSampler implements Sampler {", "originalCommit": "266cd76f5559cf98f7842021c56a3a197657b6e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzODIyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r411438227", "bodyText": "Added", "author": "pavolloffay", "createdAt": "2020-04-20T14:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTQyMQ=="}], "type": "inlineReview"}, {"oid": "e1198129992ff7f3b8d20496ccec383d2d7406ad", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e1198129992ff7f3b8d20496ccec383d2d7406ad", "message": "Add tests\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-20T14:45:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3NzYxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r411677614", "bodyText": "In general, we should prefer using the more robust ScheduledExecutorService, rather than a Timer, which can get impacted by changes to the system clock.", "author": "jkwatson", "createdAt": "2020-04-20T20:41:39Z", "path": "sdk_contrib/jaeger_remote_sampler/src/main/java/io/opentelemetry/sdk/contrib/trace/jaeger/sampler/JaegerRemoteSampler.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.jaeger.sampler;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.ManagedChannel;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.PerOperationSamplingStrategies;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyParameters;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.Sampling.SamplingStrategyResponse;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc;\n+import io.opentelemetry.exporters.jaeger.proto.api_v2.SamplingManagerGrpc.SamplingManagerBlockingStub;\n+import io.opentelemetry.sdk.trace.Sampler;\n+import io.opentelemetry.sdk.trace.Samplers;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Remote sampler that gets sampling configuration from remote Jaeger server. */\n+public class JaegerRemoteSampler implements Sampler {\n+  private static final Logger logger = Logger.getLogger(JaegerRemoteSampler.class.getName());\n+\n+  private static final int DEFAULT_POLLING_INTERVAL_MS = 60000;\n+  private static final Sampler INITIAL_SAMPLER = Samplers.probability(0.001);\n+\n+  private final String serviceName;\n+  private final SamplingManagerBlockingStub stub;\n+  private Sampler sampler;\n+  private final Timer pollTimer;\n+\n+  private JaegerRemoteSampler(\n+      String serviceName, ManagedChannel channel, int pollingIntervalMs, Sampler initialSampler) {\n+    this.serviceName = serviceName;\n+    this.stub = SamplingManagerGrpc.newBlockingStub(channel);\n+    this.sampler = initialSampler;\n+\n+    pollTimer = new Timer(true); // true makes this a daemon thread", "originalCommit": "909f16db6cbc7fbaa60702583f9f0984c75e57a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODcwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1089#discussion_r411968705", "bodyText": "Good point, I have fixed that", "author": "pavolloffay", "createdAt": "2020-04-21T08:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3NzYxNA=="}], "type": "inlineReview"}, {"oid": "9e51b9cad09497ce41c2f0e323724bb880a20400", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e51b9cad09497ce41c2f0e323724bb880a20400", "message": "Add Jaeger remote sampler\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:06:50Z", "type": "commit"}, {"oid": "78ab19bfb48452a0678654a0d379248a500dbd7d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/78ab19bfb48452a0678654a0d379248a500dbd7d", "message": "Add tests\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:06:50Z", "type": "commit"}, {"oid": "be468cbad8aa5cb314e7b26b01e6ddc7ca9059b5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/be468cbad8aa5cb314e7b26b01e6ddc7ca9059b5", "message": "Add remote sampler to all BOM\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:06:50Z", "type": "commit"}, {"oid": "b5becfa22a5fc846ee5a243e962dc24ecf25701a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5becfa22a5fc846ee5a243e962dc24ecf25701a", "message": "Make docker test optional\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:06:50Z", "type": "commit"}, {"oid": "ed7d62682f87ce81fc0ccf154496330f05792eed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed7d62682f87ce81fc0ccf154496330f05792eed", "message": "Use scheduled thread pool", "committedDate": "2020-04-21T08:06:50Z", "type": "commit"}, {"oid": "0ad014b41efadd84753413b75b2fca7fe59c24f8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ad014b41efadd84753413b75b2fca7fe59c24f8", "message": "Use daemon thread factory\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:10:07Z", "type": "commit"}, {"oid": "0ad014b41efadd84753413b75b2fca7fe59c24f8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0ad014b41efadd84753413b75b2fca7fe59c24f8", "message": "Use daemon thread factory\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:10:07Z", "type": "forcePushed"}, {"oid": "db628ee7469b5a0cb3cba84f1d1a5f58699cf505", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/db628ee7469b5a0cb3cba84f1d1a5f58699cf505", "message": "Cosmetic changes\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T08:14:21Z", "type": "commit"}, {"oid": "755ce912570f663f607d5f3940f52b98438cf9f2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/755ce912570f663f607d5f3940f52b98438cf9f2", "message": "Add readme\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-04-21T09:54:01Z", "type": "commit"}]}