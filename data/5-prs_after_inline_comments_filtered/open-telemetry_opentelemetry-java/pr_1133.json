{"pr_number": 1133, "pr_title": "Extracted Extractor and Injector code from B3Propagator", "pr_createdAt": "2020-04-24T12:54:22Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133", "timeline": [{"oid": "4a28c6655e5cee092ade9220f6bd9753e960cc53", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a28c6655e5cee092ade9220f6bd9753e960cc53", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector", "committedDate": "2020-04-24T12:55:58Z", "type": "forcePushed"}, {"oid": "9be782d67ac89e4a2891b3e0802e118e43b3a2ac", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9be782d67ac89e4a2891b3e0802e118e43b3a2ac", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector", "committedDate": "2020-04-24T13:09:21Z", "type": "forcePushed"}, {"oid": "fa31ae1a3c4c35bf7c625ab77663b756b86d6fdb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fa31ae1a3c4c35bf7c625ab77663b756b86d6fdb", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector", "committedDate": "2020-04-24T13:15:19Z", "type": "forcePushed"}, {"oid": "0e03553b554a64a07c47fe841c6fd1d30fc960c2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e03553b554a64a07c47fe841c6fd1d30fc960c2", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector", "committedDate": "2020-04-24T14:09:38Z", "type": "forcePushed"}, {"oid": "f1c78e5f63a695bec082885bb2e38e4e118989c8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f1c78e5f63a695bec082885bb2e38e4e118989c8", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector", "committedDate": "2020-04-24T14:19:21Z", "type": "forcePushed"}, {"oid": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "message": "Fix copyright header 2019 -> 2020", "committedDate": "2020-04-24T20:37:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NDk2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416064969", "bodyText": "final?", "author": "bogdandrutu", "createdAt": "2020-04-27T18:50:49Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorInjector {", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTA2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065067", "bodyText": "remove public?", "author": "bogdandrutu", "createdAt": "2020-04-27T18:50:59Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorInjector {\n+  private static final int SAMPLED_FLAG_SIZE = 1;\n+  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n+  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n+  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n+  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int SAMPLED_FLAG_OFFSET =\n+      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n+\n+  private final boolean singleHeader;\n+\n+  public B3PropagatorInjector(boolean singleHeader) {", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTM0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065345", "bodyText": "same, class is package protected, no need to be public.", "author": "bogdandrutu", "createdAt": "2020-04-27T18:51:17Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorInjector {\n+  private static final int SAMPLED_FLAG_SIZE = 1;\n+  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n+  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n+  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n+  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int SAMPLED_FLAG_OFFSET =\n+      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n+\n+  private final boolean singleHeader;\n+\n+  public B3PropagatorInjector(boolean singleHeader) {\n+    this.singleHeader = singleHeader;\n+  }\n+\n+  public <C> void inject(Context context, C carrier, HttpTextFormat.Setter<C> setter) {", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTU1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065556", "bodyText": "final?", "author": "bogdandrutu", "createdAt": "2020-04-27T18:51:32Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.NOT_SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorExtractor {", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTY4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065680", "bodyText": "No public, class is package protected.", "author": "bogdandrutu", "createdAt": "2020-04-27T18:51:43Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.NOT_SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorExtractor {\n+  private static final Logger logger = Logger.getLogger(B3PropagatorExtractor.class.getName());\n+\n+  private final boolean isSingleHeader;\n+\n+  public B3PropagatorExtractor(boolean isSingleHeader) {", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTczNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416065736", "bodyText": "same.", "author": "bogdandrutu", "createdAt": "2020-04-27T18:51:47Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.COMBINED_HEADER_DELIMITER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_SPAN_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.MAX_TRACE_ID_LENGTH;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.NOT_SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_FLAGS;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SAMPLED_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.SPAN_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRACE_ID_HEADER;\n+import static io.opentelemetry.contrib.trace.propagation.B3Propagator.TRUE_INT;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.StringUtils;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+class B3PropagatorExtractor {\n+  private static final Logger logger = Logger.getLogger(B3PropagatorExtractor.class.getName());\n+\n+  private final boolean isSingleHeader;\n+\n+  public B3PropagatorExtractor(boolean isSingleHeader) {\n+    this.isSingleHeader = isSingleHeader;\n+  }\n+\n+  public <C> Context extract(Context context, C carrier, HttpTextFormat.Getter<C> getter) {", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NjU2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416066565", "bodyText": "Can be moved to extract and private static.", "author": "bogdandrutu", "createdAt": "2020-04-27T18:52:58Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3Propagator.java", "diffHunk": "@@ -42,40 +32,27 @@\n  */\n @Immutable\n public class B3Propagator implements HttpTextFormat {\n-  private static final Logger logger = Logger.getLogger(B3Propagator.class.getName());\n-\n   static final String TRACE_ID_HEADER = \"X-B3-TraceId\";\n   static final String SPAN_ID_HEADER = \"X-B3-SpanId\";\n   static final String SAMPLED_HEADER = \"X-B3-Sampled\";\n   static final String TRUE_INT = \"1\";\n   static final String FALSE_INT = \"0\";\n   static final String COMBINED_HEADER = \"b3\";\n   static final String COMBINED_HEADER_DELIMITER = \"-\";\n+  static final int MAX_TRACE_ID_LENGTH = 2 * TraceId.getSize();\n+  static final int MAX_SPAN_ID_LENGTH = 2 * SpanId.getSize();\n+  static final TraceFlags SAMPLED_FLAGS = TraceFlags.builder().setIsSampled(true).build();\n+  static final TraceFlags NOT_SAMPLED_FLAGS = TraceFlags.builder().setIsSampled(false).build();", "originalCommit": "0a0c0149da67dfc65ee5e0a67910c3f53c70b91c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e606f9d4819bedfedff0ce4fe82a52edf2b54b4c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e606f9d4819bedfedff0ce4fe82a52edf2b54b4c", "message": "Split B3Propagator functionality to two helper classes B3PropagatorExtractor & B3PropagatorInjector", "committedDate": "2020-04-28T12:10:30Z", "type": "commit"}, {"oid": "f964a952e47c3559b43b41f6c05cf268b9503f08", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f964a952e47c3559b43b41f6c05cf268b9503f08", "message": "Fix copyright header 2019 -> 2020", "committedDate": "2020-04-28T12:10:30Z", "type": "commit"}, {"oid": "82c2e088c0324260f876a46823242bcb7e56458f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/82c2e088c0324260f876a46823242bcb7e56458f", "message": "Changed some classes/methods modifiers", "committedDate": "2020-04-28T12:19:35Z", "type": "commit"}, {"oid": "82c2e088c0324260f876a46823242bcb7e56458f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/82c2e088c0324260f876a46823242bcb7e56458f", "message": "Changed some classes/methods modifiers", "committedDate": "2020-04-28T12:19:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3NTcxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r416675716", "bodyText": "Objects.requireNotNull() and everywhere.", "author": "bogdandrutu", "createdAt": "2020-04-28T14:48:21Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjector.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.contrib.trace.propagation;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.internal.Utils;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class B3PropagatorInjector {\n+  private static final int SAMPLED_FLAG_SIZE = 1;\n+  private static final int TRACE_ID_HEX_SIZE = 2 * TraceId.getSize();\n+  private static final int SPAN_ID_HEX_SIZE = 2 * SpanId.getSize();\n+  private static final int COMBINED_HEADER_DELIMITER_SIZE = 1;\n+  private static final int SPAN_ID_OFFSET = TRACE_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int SAMPLED_FLAG_OFFSET =\n+      SPAN_ID_OFFSET + SPAN_ID_HEX_SIZE + COMBINED_HEADER_DELIMITER_SIZE;\n+  private static final int COMBINED_HEADER_SIZE = SAMPLED_FLAG_OFFSET + SAMPLED_FLAG_SIZE;\n+\n+  private final boolean singleHeader;\n+\n+  B3PropagatorInjector(boolean singleHeader) {\n+    this.singleHeader = singleHeader;\n+  }\n+\n+  <C> void inject(Context context, C carrier, HttpTextFormat.Setter<C> setter) {\n+    Utils.checkNotNull(context, \"context\");\n+    Utils.checkNotNull(setter, \"setter\");\n+", "originalCommit": "82c2e088c0324260f876a46823242bcb7e56458f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5MDE4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1133#discussion_r417290185", "bodyText": "Done", "author": "davebarda", "createdAt": "2020-04-29T12:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3NTcxNg=="}], "type": "inlineReview"}, {"oid": "5c230bcaf7478a85f3f2ce3145a2686106dc9cdd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5c230bcaf7478a85f3f2ce3145a2686106dc9cdd", "message": "Using Objects.requireNonNull instead of using Utils", "committedDate": "2020-04-29T12:56:37Z", "type": "forcePushed"}, {"oid": "bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "message": "Changed some classes/methods modifiers", "committedDate": "2020-05-02T18:40:23Z", "type": "commit"}, {"oid": "bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bbf014fb3e55780b37b58e9821ab46e143bd2bc4", "message": "Changed some classes/methods modifiers", "committedDate": "2020-05-02T18:40:23Z", "type": "forcePushed"}]}