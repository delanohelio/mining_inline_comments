{"pr_number": 1827, "pr_title": "Add a ContextValue interface to allow Context.withValue(value) withou\u2026", "pr_createdAt": "2020-10-19T05:34:52Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827", "timeline": [{"oid": "acbf1c81194c9daf3932758ac2fd764ba2c80e9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/acbf1c81194c9daf3932758ac2fd764ba2c80e9b", "message": "Add a ContextValue interface to allow Context.withValue(value) without a key.", "committedDate": "2020-10-19T05:31:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MDMyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r507540320", "bodyText": "I think in this case we should use verifyNoFurtherInteractions and assert on the call to storeInContext to not lose the original assertion's intent.", "author": "Oberon00", "createdAt": "2020-10-19T07:49:51Z", "path": "extensions/trace_utils/src/test/java/io/opentelemetry/extensions/trace/CurrentSpanUtilsTest.java", "diffHunk": "@@ -60,7 +61,6 @@ void withSpanRunnable() {\n           assertThat(getCurrentSpan()).isSameAs(span);\n         };\n     CurrentSpanUtils.withSpan(span, false, runnable).run();\n-    verifyNoInteractions(span);", "originalCommit": "acbf1c81194c9daf3932758ac2fd764ba2c80e9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2MzcyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r507563721", "bodyText": "Thanks - I was actually a bit confused on the original intent but took another look. I went with explicitly checking end isn't called (as specified by the false above) which is symmetric with the other tests, I think this would have been clearer to me from the start. Hope this looks OK.", "author": "anuraaga", "createdAt": "2020-10-19T08:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MDMyMA=="}], "type": "inlineReview"}, {"oid": "a1515c47bb43ea3a28663148f450b98692826638", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a1515c47bb43ea3a28663148f450b98692826638", "message": "Assertions", "committedDate": "2020-10-19T08:28:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MzI5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r507943292", "bodyText": "Just thinking out loud about naming.\nWhat about\n\"Propagatable\"\n\"ContextAware\"\n\"ContextPropagatable\"\n\"Contextual\"\n\"PropagationAware\"\n\"PropagationSupport\"\n\"ContextSupport\"", "author": "jkwatson", "createdAt": "2020-10-19T17:48:20Z", "path": "context/src/main/java/io/opentelemetry/context/ContextValue.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+/**\n+ * A value that can be stored inside {@link Context}. Types will generally use this interface to\n+ * allow storing themselves in {@link Context} without exposing a {@link ContextKey}.\n+ */\n+public interface ContextValue {", "originalCommit": "a1515c47bb43ea3a28663148f450b98692826638", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwMDAxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r508000019", "bodyText": "AutoContextStorable\nContextKeyAssociated\nImplicitlyContextKeyed\nWithImplicitContextKey", "author": "Oberon00", "createdAt": "2020-10-19T19:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMzY0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r508123640", "bodyText": "I like ContextStorable, not auto since a user still has to call withValue so not so automatic, and store is similar naming to the method name. ImplicitContextKeyed seems nice too for explaining the why if not necessarily the how. I don't know how to pick among any of the names here, what should I do? :)", "author": "anuraaga", "createdAt": "2020-10-19T23:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MzA4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r508143089", "bodyText": "+1 for ImplicitContextKeyed", "author": "trask", "createdAt": "2020-10-20T00:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2NzM4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1827#discussion_r508667387", "bodyText": "How about just ContextKeyed ?", "author": "jkwatson", "createdAt": "2020-10-20T16:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MzI5Mg=="}], "type": "inlineReview"}, {"oid": "7c3770d670ae84d786580d91dc8aaec7b7b4be98", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7c3770d670ae84d786580d91dc8aaec7b7b4be98", "message": "Renames", "committedDate": "2020-10-20T04:00:30Z", "type": "commit"}, {"oid": "0af3da16f2bbb5e31ad555b7cdfdcc0567aacd1e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0af3da16f2bbb5e31ad555b7cdfdcc0567aacd1e", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into contextvalue", "committedDate": "2020-10-20T04:01:29Z", "type": "commit"}]}