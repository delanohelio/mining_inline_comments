{"pr_number": 805, "pr_title": "Simplify the concurrency in the ComponentRegistry", "pr_createdAt": "2020-01-28T19:38:39Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/805", "timeline": [{"oid": "573890ad12dd2e1679ced3569465cd1ef842e32c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/573890ad12dd2e1679ced3569465cd1ef842e32c", "message": "remove the explicit lock and delegate the thread-safety to the ConcurrentMap implementation.", "committedDate": "2020-01-28T19:37:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372062375", "bodyText": "Should we add a test for this? (Since the previous line returned the wrong value, etc) ;)", "author": "carlosalberto", "createdAt": "2020-01-28T21:17:10Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -53,22 +53,14 @@ public V get(String instrumentationName) {\n   public V get(String instrumentationName, @Nullable String instrumentationVersion) {\n     InstrumentationLibraryInfo instrumentationLibraryInfo =\n         InstrumentationLibraryInfo.create(instrumentationName, instrumentationVersion);\n-    V tracer = registry.get(instrumentationLibraryInfo);\n-    if (tracer == null) {\n-      synchronized (lock) {\n-        // Re-check if the value was added since the previous check, this can happen if multiple\n-        // threads try to access the same named tracer during the same time. This way we ensure that\n-        // we create only one TracerSdk per name.\n-        tracer = registry.get(instrumentationLibraryInfo);\n-        if (tracer != null) {\n-          // A different thread already added the named Tracer, just reuse.\n-          return tracer;\n-        }\n-        tracer = newComponent(instrumentationLibraryInfo);\n-        registry.put(instrumentationLibraryInfo, tracer);\n-      }\n+\n+    V component = registry.get(instrumentationLibraryInfo);\n+    if (component != null) {\n+      return component;\n     }\n-    return tracer;\n+\n+    registry.putIfAbsent(instrumentationLibraryInfo, newComponent(instrumentationLibraryInfo));\n+    return registry.get(instrumentationLibraryInfo);", "originalCommit": "573890ad12dd2e1679ced3569465cd1ef842e32c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2NTEwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372065100", "bodyText": "Not sure what you want, the correct return value is tested, if you want to test that putIfAbsent is called twice we need a newComponent implementation that blocks first time then second time is ok, then check that returns the same instance in the end. We still create 2 instances but one we drop immediately which may be something worth documented.", "author": "bogdandrutu", "createdAt": "2020-01-28T21:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2ODUyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372068528", "bodyText": "Oh, never mind, I thought the return registry.put(instrumentationLibraryInfo, tracer); line had been kept.", "author": "carlosalberto", "createdAt": "2020-01-28T21:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MTMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/805#discussion_r372071322", "bodyText": "yeah, testing this would be extraordinarily tricky, since it would depend on very finicky timing, and I'm not even sure how you would assert anything useful out of it. :)", "author": "jkwatson", "createdAt": "2020-01-28T21:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjM3NQ=="}], "type": "inlineReview"}]}