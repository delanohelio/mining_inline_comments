{"pr_number": 807, "pr_title": "Array values for span attributes", "pr_createdAt": "2020-01-30T07:26:51Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/807", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTU1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r372875555", "bodyText": "This will throw if null is passed, same for double and long below.\nAttempts to set null (array) attributes should be silently ignored as decided in #765.", "author": "arminru", "createdAt": "2020-01-30T10:41:42Z", "path": "api/src/main/java/io/opentelemetry/trace/AttributeValue.java", "diffHunk": "@@ -221,4 +320,92 @@ public final Type getType() {\n     @Override\n     public abstract double getDoubleValue();\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  abstract static class AttributeValueStringArray extends AttributeValue {\n+\n+    AttributeValueStringArray() {}\n+\n+    static AttributeValue create(String... stringValues) {\n+      return new AutoValue_AttributeValue_AttributeValueStringArray(Arrays.asList(stringValues));\n+    }\n+\n+    @Override\n+    public final Type getType() {\n+      return Type.STRING_ARRAY;\n+    }\n+\n+    @Override\n+    public abstract List<String> getStringArrayValue();\n+  }\n+\n+  @Immutable\n+  @AutoValue\n+  abstract static class AttributeValueBooleanArray extends AttributeValue {\n+\n+    AttributeValueBooleanArray() {}\n+\n+    static AttributeValue create(boolean... booleanValues) {\n+      List<Boolean> values = new ArrayList<>(booleanValues.length);", "originalCommit": "f38eb5779769ec9afbe42d42b2a819357c5944f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwMTU1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373001550", "bodyText": "Thanks for fixing the calls coming from RecordEventsReadableSpan in the SDK!\nSince this is in the API, I'd add that null must not be passed to AttributeValue's apidoc and probably annotate the params with @NotNull.\nHere in this code you should still handle it gracefully in order to not crash if it's misused by returning an AttributeValueBooleanArray holding a value of null like AttributeValueString.create(null) does.", "author": "arminru", "createdAt": "2020-01-30T15:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAwODI1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373008259", "bodyText": "I would argue to annotate the Javadoc with @throws NullPointerException as it is currently for the AttributeValue.stringAttributeValue(String) method. WDYT?", "author": "thisthat", "createdAt": "2020-01-30T15:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyNjQyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373026420", "bodyText": "Oh, that annotation is actually wrong since it doesn't throw --> #808\nRegarding error handling, the spec defines:\n\nAPI methods MUST NOT throw unhandled exceptions when used incorrectly by end users. The API and SDK SHOULD provide safe defaults for missing or invalid arguments. For instance, a name like empty may be used if the user passes in null as the span name argument during Span construction.", "author": "arminru", "createdAt": "2020-01-30T15:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA1Nzc4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373057784", "bodyText": "Ugh. I don't think the SDK should be doing anything like that. That's definitely an exporter responsibility, not the SDK itself.", "author": "jkwatson", "createdAt": "2020-01-30T16:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2MzU3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373063576", "bodyText": "Well, the exporter could also drop null-strings \ud83d\ude09", "author": "Oberon00", "createdAt": "2020-01-30T16:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NjkwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r372876909", "bodyText": "Please add tests in DefaultSpanTest.doNotCrash for passing (String[]) null and so on.", "author": "arminru", "createdAt": "2020-01-30T10:44:34Z", "path": "api/src/main/java/io/opentelemetry/trace/DefaultSpan.java", "diffHunk": "@@ -91,6 +91,26 @@ public void setAttribute(String key, boolean value) {\n     Utils.checkNotNull(key, \"key\");\n   }\n \n+  @Override\n+  public void setAttribute(String key, String... values) {", "originalCommit": "f38eb5779769ec9afbe42d42b2a819357c5944f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4MTQ5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r372881497", "bodyText": "Please add tests in RecordEventsReadableSpanTest.setAttribute.", "author": "arminru", "createdAt": "2020-01-30T10:54:09Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -314,6 +314,26 @@ public void setAttribute(String key, boolean value) {\n     setAttribute(key, AttributeValue.booleanAttributeValue(value));\n   }\n \n+  @Override\n+  public void setAttribute(String key, String... values) {", "originalCommit": "f38eb5779769ec9afbe42d42b2a819357c5944f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r372902894", "bodyText": "Also, what should happen if null or empty strings are passed inside the array? I'm strongly against dropping them silently as done with #771 for single strings, as this would preclude use cases such as having corresponding key and value arrays where value_array[i] is the value for key_array[i].", "author": "Oberon00", "createdAt": "2020-01-30T11:44:23Z", "path": "api/src/main/java/io/opentelemetry/trace/AttributeValue.java", "diffHunk": "@@ -221,4 +320,92 @@ public final Type getType() {\n     @Override\n     public abstract double getDoubleValue();\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  abstract static class AttributeValueStringArray extends AttributeValue {\n+\n+    AttributeValueStringArray() {}\n+\n+    static AttributeValue create(String... stringValues) {", "originalCommit": "f38eb5779769ec9afbe42d42b2a819357c5944f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MjMyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r372952324", "bodyText": "The current implementation does not ignore null or empty strings inside the array and inserts them into the list of values for the given key.", "author": "thisthat", "createdAt": "2020-01-30T13:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMzM2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373133365", "bodyText": "I'd be up with @Oberon00's suggestion on at least not allowing null values pass through (this check would also have to apply to the other array values).", "author": "carlosalberto", "createdAt": "2020-01-30T18:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3NTUzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373375531", "bodyText": "@carlosalberto I'm not sure that's the same thing I meant. What do you mean by not letting them pass through? I don't think that is necessarily the best idea but I'd still prefer it over dropping them. Maybe we should make them into empty strings?", "author": "Oberon00", "createdAt": "2020-01-31T09:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxNDkzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373414930", "bodyText": "@Oberon00  Either way, I want us to be clear on the expectations, one way or another. I personally think it would be very dirty/lazy to let go through null values in the arrays - but if we decide another way, I'm fine as long as we document it.", "author": "carlosalberto", "createdAt": "2020-01-31T10:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxNzUzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373417532", "bodyText": "So what is the alternative if we don't let them go through, what do we do if we encounter one?", "author": "Oberon00", "createdAt": "2020-01-31T10:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNjQ4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373436480", "bodyText": "I put this topic in the SIG notes for today, so we can have the feedback of the others", "author": "thisthat", "createdAt": "2020-01-31T11:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyOTA4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r386529082", "bodyText": "@thisthat Maybe resolve this comment? IIRC this was resolved in a previous SIG call.", "author": "carlosalberto", "createdAt": "2020-03-02T17:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEwODY0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373108649", "bodyText": "Make them immutable?", "author": "bogdandrutu", "createdAt": "2020-01-30T18:10:01Z", "path": "api/src/main/java/io/opentelemetry/trace/AttributeValue.java", "diffHunk": "@@ -221,4 +321,107 @@ public final Type getType() {\n     @Override\n     public abstract double getDoubleValue();\n   }\n+\n+  @Immutable\n+  @AutoValue\n+  abstract static class AttributeValueStringArray extends AttributeValue {\n+\n+    AttributeValueStringArray() {}\n+\n+    static AttributeValue create(String... stringValues) {\n+      if (stringValues == null) {\n+        return new AutoValue_AttributeValue_AttributeValueStringArray(\n+            Collections.<String>emptyList());\n+      }\n+      return new AutoValue_AttributeValue_AttributeValueStringArray(Arrays.asList(stringValues));", "originalCommit": "95ab9a0bf80518bfd709e10a4fc0c5ff26b4e9eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMDExOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373110119", "bodyText": "I wouldn't add this to the Span Api to keep the surface low. I would rely on the version with AttributeValue for this usecase.", "author": "bogdandrutu", "createdAt": "2020-01-30T18:13:09Z", "path": "api/src/main/java/io/opentelemetry/trace/Span.java", "diffHunk": "@@ -122,6 +122,49 @@\n    */\n   void setAttribute(String key, boolean value);\n \n+  /**\n+   * Sets an attribute to the {@code Span}. If the {@code Span} previously contained a mapping for\n+   * the key, the old value is replaced by the specified value.\n+   *\n+   * <p>If a null or empty String {@code value} is passed in, the attribute will be silently\n+   * dropped. Note: this behavior could change in the future.\n+   *\n+   * @param key the key for this attribute.\n+   * @param values the value for this attribute.\n+   * @since 0.1.0\n+   */\n+  void setAttribute(String key, String... values);", "originalCommit": "95ab9a0bf80518bfd709e10a4fc0c5ff26b4e9eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNjQ1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r373136453", "bodyText": "I agree with this. Let's try to keep the Span surface whenever possible.", "author": "carlosalberto", "createdAt": "2020-01-30T19:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMDExOQ=="}], "type": "inlineReview"}, {"oid": "4dfd8b2768c072c91a2a6f2a0566e4d3c9a9161d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4dfd8b2768c072c91a2a6f2a0566e4d3c9a9161d", "message": "Merge branch 'master' into array-span-attributes", "committedDate": "2020-01-31T12:41:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1ODQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r385658471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (value.getStringArrayValue().size() == 0) {\n          \n          \n            \n                    if (value.getStringArrayValue().isEmpty()) {\n          \n      \n    \n    \n  \n\nSubject to #948.", "author": "Oberon00", "createdAt": "2020-02-28T12:00:55Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -318,8 +317,34 @@ public void setAttribute(String key, boolean value) {\n   public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     Preconditions.checkNotNull(value, \"value\");\n-    if (value.getType() == Type.STRING && StringUtils.isNullOrEmpty(value.getStringValue())) {\n-      return;\n+    switch (value.getType()) {\n+      case STRING:\n+        if (StringUtils.isNullOrEmpty(value.getStringValue())) {\n+          return;\n+        }\n+        break;\n+      case STRING_ARRAY:\n+        if (value.getStringArrayValue().size() == 0) {", "originalCommit": "4dfd8b2768c072c91a2a6f2a0566e4d3c9a9161d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1ODc3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r385658774", "bodyText": "Is this required?", "author": "Oberon00", "createdAt": "2020-02-28T12:01:45Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RecordEventsReadableSpan.java", "diffHunk": "@@ -318,8 +317,34 @@ public void setAttribute(String key, boolean value) {\n   public void setAttribute(String key, AttributeValue value) {\n     Preconditions.checkNotNull(key, \"key\");\n     Preconditions.checkNotNull(value, \"value\");\n-    if (value.getType() == Type.STRING && StringUtils.isNullOrEmpty(value.getStringValue())) {\n-      return;\n+    switch (value.getType()) {\n+      case STRING:\n+        if (StringUtils.isNullOrEmpty(value.getStringValue())) {\n+          return;\n+        }\n+        break;\n+      case STRING_ARRAY:\n+        if (value.getStringArrayValue().size() == 0) {\n+          return;\n+        }\n+        break;\n+      case BOOLEAN_ARRAY:\n+        if (value.getBooleanArrayValue().size() == 0) {\n+          return;\n+        }\n+        break;\n+      case LONG_ARRAY:\n+        if (value.getLongArrayValue().size() == 0) {\n+          return;\n+        }\n+        break;\n+      case DOUBLE_ARRAY:\n+        if (value.getDoubleArrayValue().size() == 0) {\n+          return;\n+        }\n+        break;\n+      default:", "originalCommit": "4dfd8b2768c072c91a2a6f2a0566e4d3c9a9161d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5ODk1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r386298957", "bodyText": "Yes, otherwise the checkstyle plugin will fail the build", "author": "thisthat", "createdAt": "2020-03-02T10:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1ODc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MTkzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r385861937", "bodyText": "Since API calls are not supposed to throw exceptions, should we instead just return an empty List for these cases? I'm not sure of what the right behavior is.", "author": "jkwatson", "createdAt": "2020-02-28T18:48:11Z", "path": "api/src/main/java/io/opentelemetry/trace/AttributeValue.java", "diffHunk": "@@ -136,6 +188,54 @@ public double getDoubleValue() {\n         String.format(\"This type can only return %s data\", getType().name()));\n   }\n \n+  /**\n+   * Returns the String array value of this {@code AttributeValue}. An UnsupportedOperationException\n+   * will be thrown if getType() is not {@link Type#STRING_ARRAY}.\n+   *\n+   * @return the array values of this {@code AttributeValue}.\n+   * @since 0.3.0\n+   */\n+  public List<String> getStringArrayValue() {\n+    throw new UnsupportedOperationException(", "originalCommit": "4dfd8b2768c072c91a2a6f2a0566e4d3c9a9161d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NjEzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r386276134", "bodyText": "Also basic types return an exception...\nMy proposal is to left as is. In a further follow up PR that addresses the renaming of the AttributeValue class (context), we should rethink the APIs.\nWDYT?", "author": "thisthat", "createdAt": "2020-03-02T09:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMTMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r386431329", "bodyText": "Btw, these ones are meant to throw exceptions, by design - user is expected, upon getting an attr, to do a check like this:\nswitch (attr.getType()) {\n  case STRING:\n    return attr.getStringValue();\n  case LONG:\n    return attr.getLongValue();\n}", "author": "carlosalberto", "createdAt": "2020-03-02T14:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzNTY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r386535694", "bodyText": "as long as we're consistent, then \ud83d\udc4d", "author": "jkwatson", "createdAt": "2020-03-02T17:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MTkzNw=="}], "type": "inlineReview"}, {"oid": "e85d4278b10c740a4f57795f5be58b56a9a98a60", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e85d4278b10c740a4f57795f5be58b56a9a98a60", "message": "./gradlew goJF", "committedDate": "2020-02-28T10:59:09Z", "type": "forcePushed"}, {"oid": "a9ff82c107d3903828f601abad71df34b3b95405", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a9ff82c107d3903828f601abad71df34b3b95405", "message": "Implement ArrayAttribute", "committedDate": "2020-03-16T13:24:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyODU4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/807#discussion_r393028581", "bodyText": "#1020", "author": "thisthat", "createdAt": "2020-03-16T13:39:23Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/CommonAdapter.java", "diffHunk": "@@ -43,6 +43,11 @@ static AttributeKeyValue toProtoAttribute(String key, AttributeValue attributeVa\n             .setType(ValueType.DOUBLE)\n             .setDoubleValue(attributeValue.getDoubleValue())\n             .build();\n+      case BOOLEAN_ARRAY:\n+      case LONG_ARRAY:\n+      case DOUBLE_ARRAY:\n+      case STRING_ARRAY:\n+        return builder.setType(ValueType.UNRECOGNIZED).build();", "originalCommit": "a9ff82c107d3903828f601abad71df34b3b95405", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7c61ae7dbef40ed153ab30ac7e3a5bf1ae7945f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a7c61ae7dbef40ed153ab30ac7e3a5bf1ae7945f", "message": "Rebase and add tests", "committedDate": "2020-03-20T17:28:52Z", "type": "forcePushed"}, {"oid": "1be48155f20707b41f98c3d0015fa120c3175cc4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1be48155f20707b41f98c3d0015fa120c3175cc4", "message": "Adapt RecordEventsReadableSpan", "committedDate": "2020-03-24T06:05:09Z", "type": "forcePushed"}, {"oid": "cb831daf49b826ba5ae31638e8404a8e816bada6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cb831daf49b826ba5ae31638e8404a8e816bada6", "message": "[API] - Add Arrays for span attributes", "committedDate": "2020-04-01T11:24:47Z", "type": "commit"}, {"oid": "7e0c4e2803f7c5c04a12d74b18f34b4033122a9c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7e0c4e2803f7c5c04a12d74b18f34b4033122a9c", "message": "[SDK] - Add Arrays for span attributes", "committedDate": "2020-04-01T11:24:48Z", "type": "commit"}, {"oid": "721f255372aa6f822113c599bf73d7afd91b8aa2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/721f255372aa6f822113c599bf73d7afd91b8aa2", "message": "[Exporters/Shim] - Add Arrays for span attributes", "committedDate": "2020-04-01T11:24:48Z", "type": "commit"}, {"oid": "95b2b8d1e2a51ac26200bd5a412c66bd3de685b4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95b2b8d1e2a51ac26200bd5a412c66bd3de685b4", "message": "add tests", "committedDate": "2020-04-01T11:24:48Z", "type": "commit"}, {"oid": "aa68a8f3d665d90ec51153e22dc592ff5b943d96", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aa68a8f3d665d90ec51153e22dc592ff5b943d96", "message": "Adjust jaeger exporter to specification. Add tests.", "committedDate": "2020-04-01T11:24:49Z", "type": "commit"}, {"oid": "fac7d6510584e69494b58019333711f294f41fd4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fac7d6510584e69494b58019333711f294f41fd4", "message": "Fix checkstyle naming issue", "committedDate": "2020-04-01T11:24:49Z", "type": "commit"}, {"oid": "b50ed2655f3bc023886f1854cf00640f28951be8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b50ed2655f3bc023886f1854cf00640f28951be8", "message": "Add further tests.", "committedDate": "2020-04-01T11:24:49Z", "type": "commit"}, {"oid": "23a1637620c7095641409a38b56fd8d9a8a08798", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/23a1637620c7095641409a38b56fd8d9a8a08798", "message": "Align null value behavior of attributes with spec", "committedDate": "2020-04-01T11:24:50Z", "type": "commit"}, {"oid": "ae03f6f8e20150e44c2c5d992c99b7606106c15d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ae03f6f8e20150e44c2c5d992c99b7606106c15d", "message": "fix javadoc @since", "committedDate": "2020-04-01T11:24:50Z", "type": "commit"}, {"oid": "9ffba0c75b6bb5f3c7a8f7061cbde586c40c6178", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9ffba0c75b6bb5f3c7a8f7061cbde586c40c6178", "message": "API must not crash on misusage of AttributeValue", "committedDate": "2020-04-01T11:24:50Z", "type": "commit"}, {"oid": "9b6cc070ca2de512e29e0b91d0c638452f207ac4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9b6cc070ca2de512e29e0b91d0c638452f207ac4", "message": "API - Remove Attribute ArrayValues from Span surface", "committedDate": "2020-04-01T11:24:51Z", "type": "commit"}, {"oid": "1e394b29bf537e59253da00a9fb3e3357a167ea5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e394b29bf537e59253da00a9fb3e3357a167ea5", "message": "Immutable String array values for AttributeValue", "committedDate": "2020-04-01T11:24:51Z", "type": "commit"}, {"oid": "e3d04a2fac18cb3bc7454f5f7cf13596425e5e8e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e3d04a2fac18cb3bc7454f5f7cf13596425e5e8e", "message": "Immutable values for AttributeValue arrays", "committedDate": "2020-04-01T11:24:51Z", "type": "commit"}, {"oid": "036487928fd4accbcac8ff023eb4de2d30285058", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/036487928fd4accbcac8ff023eb4de2d30285058", "message": "./gradlew goJF", "committedDate": "2020-04-01T11:24:52Z", "type": "commit"}, {"oid": "331e27584197ea4fb42b4eb485109a26d414b744", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/331e27584197ea4fb42b4eb485109a26d414b744", "message": "Implement ArrayAttribute", "committedDate": "2020-04-01T11:24:52Z", "type": "commit"}, {"oid": "8ca0412fc822b0d73eb580ffb1515e7c6c32a897", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8ca0412fc822b0d73eb580ffb1515e7c6c32a897", "message": "Rebase and add tests", "committedDate": "2020-04-01T11:24:52Z", "type": "commit"}, {"oid": "84c0eb35c6a1f231301b11fdfa9780f041382ee5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84c0eb35c6a1f231301b11fdfa9780f041382ee5", "message": "Adapt RecordEventsReadableSpan", "committedDate": "2020-04-01T11:24:53Z", "type": "commit"}, {"oid": "84c0eb35c6a1f231301b11fdfa9780f041382ee5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/84c0eb35c6a1f231301b11fdfa9780f041382ee5", "message": "Adapt RecordEventsReadableSpan", "committedDate": "2020-04-01T11:24:53Z", "type": "forcePushed"}]}