{"pr_number": 2295, "pr_title": "Add a OTLP JSON span exporter to logs.", "pr_createdAt": "2020-12-14T09:08:34Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295", "timeline": [{"oid": "414a00b320267d851a6aa0df0f65b99ebe7a1731", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/414a00b320267d851a6aa0df0f65b99ebe7a1731", "message": "Add a OTLP logging span exporter.", "committedDate": "2020-12-14T09:01:54Z", "type": "commit"}, {"oid": "89149cea09d31ba851bb78e0cc5a6894b809ad19", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89149cea09d31ba851bb78e0cc5a6894b809ad19", "message": "Add file to git", "committedDate": "2020-12-14T09:11:25Z", "type": "commit"}, {"oid": "bb5742e3decd8d7b5009229c75c17d251d034052", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb5742e3decd8d7b5009229c75c17d251d034052", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into otlp-logging", "committedDate": "2020-12-16T04:56:32Z", "type": "commit"}, {"oid": "a34d0ede913dd689e85e350b17d538458db14aff", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a34d0ede913dd689e85e350b17d538458db14aff", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into otlp-logging", "committedDate": "2020-12-18T06:00:07Z", "type": "commit"}, {"oid": "b701e00a23099362af1b3daa853e74a54a504238", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b701e00a23099362af1b3daa853e74a54a504238", "message": "Move", "committedDate": "2020-12-18T06:10:06Z", "type": "commit"}, {"oid": "973f5411d823e9f2471a0fde35c70319f6be5d28", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/973f5411d823e9f2471a0fde35c70319f6be5d28", "message": "OTLPJSON", "committedDate": "2020-12-21T04:35:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzEzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546793132", "bodyText": "If I read this right...the log message will be split across multiple lines? Don't we want to make sure that every log message is only a single line, so it can work with normal logging systems?", "author": "jkwatson", "createdAt": "2020-12-21T16:10:09Z", "path": "exporters/otlpjson/src/test/java/io/opentelemetry/exporter/otlpjson/OtlpJsonLoggingMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.otlpjson;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+class OtlpJsonLoggingMetricExporterTest {\n+\n+  private static final Resource RESOURCE =\n+      Resource.create(Attributes.builder().put(\"key\", \"value\").build());\n+\n+  private static final MetricData METRIC1 =\n+      MetricData.createDoubleSum(\n+          RESOURCE,\n+          InstrumentationLibraryInfo.create(\"instrumentation\", \"1\"),\n+          \"metric1\",\n+          \"metric1 description\",\n+          \"m\",\n+          MetricData.DoubleSumData.create(\n+              true,\n+              MetricData.AggregationTemporality.CUMULATIVE,\n+              Arrays.asList(MetricData.DoublePoint.create(1, 2, Labels.of(\"cat\", \"meow\"), 4))));\n+\n+  private static final MetricData METRIC2 =\n+      MetricData.createDoubleSum(\n+          RESOURCE,\n+          InstrumentationLibraryInfo.create(\"instrumentation2\", \"2\"),\n+          \"metric2\",\n+          \"metric2 description\",\n+          \"s\",\n+          MetricData.DoubleSumData.create(\n+              true,\n+              MetricData.AggregationTemporality.CUMULATIVE,\n+              Arrays.asList(MetricData.DoublePoint.create(1, 2, Labels.of(\"cat\", \"meow\"), 4))));\n+\n+  private MetricExporter exporter;\n+\n+  @BeforeEach\n+  void setUp() {\n+    exporter = OtlpJsonLoggingMetricExporter.create();\n+  }\n+\n+  @Test\n+  void log() throws Exception {\n+    Logger logger = OtlpJsonLoggingMetricExporter.logger;\n+    List<LogRecord> logged = new ArrayList<>();\n+    Handler handler =\n+        new Handler() {\n+          @Override\n+          public void publish(LogRecord record) {\n+            logged.add(record);\n+          }\n+\n+          @Override\n+          public void flush() {}\n+\n+          @Override\n+          public void close() {}\n+        };\n+    logger.addHandler(handler);\n+    logger.setUseParentHandlers(false);\n+    try {\n+      exporter.export(Arrays.asList(METRIC1, METRIC2));\n+\n+      assertThat(logged)\n+          .hasSize(1)\n+          .allSatisfy(log -> assertThat(log.getLevel()).isEqualTo(Level.INFO));\n+      JSONAssert.assertEquals(\n+          \"{\\n\"\n+              + \"  \\\"resource\\\": {\\n\"\n+              + \"    \\\"attributes\\\": [{\\n\"\n+              + \"      \\\"key\\\": \\\"key\\\",\\n\"\n+              + \"      \\\"value\\\": {\\n\"\n+              + \"        \\\"stringValue\\\": \\\"value\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  },\\n\"\n+              + \"  \\\"instrumentationLibraryMetrics\\\": [{\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation2\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"2\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"metrics\\\": [{\\n\"\n+              + \"      \\\"name\\\": \\\"metric2\\\",\\n\"\n+              + \"      \\\"description\\\": \\\"metric2 description\\\",\\n\"\n+              + \"      \\\"unit\\\": \\\"s\\\",\\n\"\n+              + \"      \\\"doubleSum\\\": {\\n\"\n+              + \"        \\\"dataPoints\\\": [{\\n\"\n+              + \"          \\\"labels\\\": [{\\n\"\n+              + \"            \\\"key\\\": \\\"cat\\\",\\n\"\n+              + \"            \\\"value\\\": \\\"meow\\\"\\n\"\n+              + \"          }],\\n\"\n+              + \"          \\\"startTimeUnixNano\\\": \\\"1\\\",\\n\"\n+              + \"          \\\"timeUnixNano\\\": \\\"2\\\",\\n\"\n+              + \"          \\\"value\\\": 4.0\\n\"\n+              + \"        }],\\n\"\n+              + \"        \\\"aggregationTemporality\\\": \\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\\",\\n\"\n+              + \"        \\\"isMonotonic\\\": true\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }, {\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"1\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"metrics\\\": [{\\n\"\n+              + \"      \\\"name\\\": \\\"metric1\\\",\\n\"\n+              + \"      \\\"description\\\": \\\"metric1 description\\\",\\n\"\n+              + \"      \\\"unit\\\": \\\"m\\\",\\n\"\n+              + \"      \\\"doubleSum\\\": {\\n\"\n+              + \"        \\\"dataPoints\\\": [{\\n\"\n+              + \"          \\\"labels\\\": [{\\n\"\n+              + \"            \\\"key\\\": \\\"cat\\\",\\n\"\n+              + \"            \\\"value\\\": \\\"meow\\\"\\n\"\n+              + \"          }],\\n\"\n+              + \"          \\\"startTimeUnixNano\\\": \\\"1\\\",\\n\"\n+              + \"          \\\"timeUnixNano\\\": \\\"2\\\",\\n\"\n+              + \"          \\\"value\\\": 4.0\\n\"\n+              + \"        }],\\n\"\n+              + \"        \\\"aggregationTemporality\\\": \\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\\",\\n\"\n+              + \"        \\\"isMonotonic\\\": true\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }]\\n\"\n+              + \"}\",\n+          logged.get(0).getMessage(),", "originalCommit": "973f5411d823e9f2471a0fde35c70319f6be5d28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3Mzg5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r547073897", "bodyText": "Thanks for noticing! This is a JSON assert so whitespace is ignored. I added additional checks that the message has no newlines and realized I needed to set that.", "author": "anuraaga", "createdAt": "2020-12-22T05:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MzM3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2295#discussion_r546793376", "bodyText": "same question about multi-line log message", "author": "jkwatson", "createdAt": "2020-12-21T16:10:36Z", "path": "exporters/otlpjson/src/test/java/io/opentelemetry/exporter/otlpjson/OtlpJsonLoggingSpanExporterTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.exporter.otlpjson;\n+\n+import static io.opentelemetry.api.common.AttributeKey.booleanKey;\n+import static io.opentelemetry.api.common.AttributeKey.longKey;\n+import static io.opentelemetry.api.common.AttributeKey.stringKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.testing.trace.TestSpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+class OtlpJsonLoggingSpanExporterTest {\n+\n+  private static final Resource RESOURCE =\n+      Resource.create(Attributes.builder().put(\"key\", \"value\").build());\n+\n+  private static final SpanData SPAN1 =\n+      TestSpanData.builder()\n+          .setHasEnded(true)\n+          .setTraceId(TraceId.fromLongs(1234L, 6789L))\n+          .setSpanId(SpanId.fromLong(9876L))\n+          .setStartEpochNanos(100)\n+          .setEndEpochNanos(100 + 1000)\n+          .setStatus(SpanData.Status.ok())\n+          .setName(\"testSpan1\")\n+          .setKind(Span.Kind.INTERNAL)\n+          .setAttributes(Attributes.of(stringKey(\"animal\"), \"cat\", longKey(\"lives\"), 9L))\n+          .setEvents(\n+              Collections.singletonList(\n+                  SpanData.Event.create(\n+                      100 + 500,\n+                      \"somethingHappenedHere\",\n+                      Attributes.of(booleanKey(\"important\"), true))))\n+          .setTotalAttributeCount(2)\n+          .setTotalRecordedEvents(1)\n+          .setTotalRecordedLinks(0)\n+          .setInstrumentationLibraryInfo(InstrumentationLibraryInfo.create(\"instrumentation\", \"1\"))\n+          .setResource(RESOURCE)\n+          .build();\n+\n+  private static final SpanData SPAN2 =\n+      TestSpanData.builder()\n+          .setHasEnded(false)\n+          .setTraceId(TraceId.fromLongs(20L, 30L))\n+          .setSpanId(SpanId.fromLong(15L))\n+          .setStartEpochNanos(500)\n+          .setEndEpochNanos(500 + 1001)\n+          .setStatus(SpanData.Status.error())\n+          .setName(\"testSpan2\")\n+          .setKind(Span.Kind.CLIENT)\n+          .setResource(RESOURCE)\n+          .setInstrumentationLibraryInfo(InstrumentationLibraryInfo.create(\"instrumentation2\", \"2\"))\n+          .build();\n+\n+  SpanExporter exporter;\n+\n+  @BeforeEach\n+  void setUp() {\n+    exporter = OtlpJsonLoggingSpanExporter.create();\n+  }\n+\n+  @Test\n+  void log() throws Exception {\n+    Logger logger = OtlpJsonLoggingSpanExporter.logger;\n+    List<LogRecord> logged = new ArrayList<>();\n+    Handler handler =\n+        new Handler() {\n+          @Override\n+          public void publish(LogRecord record) {\n+            logged.add(record);\n+          }\n+\n+          @Override\n+          public void flush() {}\n+\n+          @Override\n+          public void close() {}\n+        };\n+    logger.addHandler(handler);\n+    logger.setUseParentHandlers(false);\n+    try {\n+      exporter.export(Arrays.asList(SPAN1, SPAN2));\n+\n+      assertThat(logged)\n+          .hasSize(1)\n+          .allSatisfy(log -> assertThat(log.getLevel()).isEqualTo(Level.INFO));\n+      JSONAssert.assertEquals(\n+          \"{\\n\"\n+              + \"  \\\"resource\\\": {\\n\"\n+              + \"    \\\"attributes\\\": [{\\n\"\n+              + \"      \\\"key\\\": \\\"key\\\",\\n\"\n+              + \"      \\\"value\\\": {\\n\"\n+              + \"        \\\"stringValue\\\": \\\"value\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  },\\n\"\n+              + \"  \\\"instrumentationLibrarySpans\\\": [{\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation2\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"2\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"spans\\\": [{\\n\"\n+              + \"      \\\"traceId\\\": \\\"0000000000000014000000000000001e\\\",\\n\"\n+              + \"      \\\"spanId\\\": \\\"000000000000000f\\\",\\n\"\n+              + \"      \\\"name\\\": \\\"testSpan2\\\",\\n\"\n+              + \"      \\\"kind\\\": \\\"SPAN_KIND_CLIENT\\\",\\n\"\n+              + \"      \\\"startTimeUnixNano\\\": \\\"500\\\",\\n\"\n+              + \"      \\\"endTimeUnixNano\\\": \\\"1501\\\",\\n\"\n+              + \"      \\\"status\\\": {\\n\"\n+              + \"        \\\"deprecatedCode\\\": \\\"DEPRECATED_STATUS_CODE_UNKNOWN_ERROR\\\",\\n\"\n+              + \"        \\\"code\\\": \\\"STATUS_CODE_ERROR\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }, {\\n\"\n+              + \"    \\\"instrumentationLibrary\\\": {\\n\"\n+              + \"      \\\"name\\\": \\\"instrumentation\\\",\\n\"\n+              + \"      \\\"version\\\": \\\"1\\\"\\n\"\n+              + \"    },\\n\"\n+              + \"    \\\"spans\\\": [{\\n\"\n+              + \"      \\\"traceId\\\": \\\"00000000000004d20000000000001a85\\\",\\n\"\n+              + \"      \\\"spanId\\\": \\\"0000000000002694\\\",\\n\"\n+              + \"      \\\"name\\\": \\\"testSpan1\\\",\\n\"\n+              + \"      \\\"kind\\\": \\\"SPAN_KIND_INTERNAL\\\",\\n\"\n+              + \"      \\\"startTimeUnixNano\\\": \\\"100\\\",\\n\"\n+              + \"      \\\"endTimeUnixNano\\\": \\\"1100\\\",\\n\"\n+              + \"      \\\"attributes\\\": [{\\n\"\n+              + \"        \\\"key\\\": \\\"animal\\\",\\n\"\n+              + \"        \\\"value\\\": {\\n\"\n+              + \"          \\\"stringValue\\\": \\\"cat\\\"\\n\"\n+              + \"        }\\n\"\n+              + \"      }, {\\n\"\n+              + \"        \\\"key\\\": \\\"lives\\\",\\n\"\n+              + \"        \\\"value\\\": {\\n\"\n+              + \"          \\\"intValue\\\": \\\"9\\\"\\n\"\n+              + \"        }\\n\"\n+              + \"      }],\\n\"\n+              + \"      \\\"events\\\": [{\\n\"\n+              + \"        \\\"timeUnixNano\\\": \\\"600\\\",\\n\"\n+              + \"        \\\"name\\\": \\\"somethingHappenedHere\\\",\\n\"\n+              + \"        \\\"attributes\\\": [{\\n\"\n+              + \"          \\\"key\\\": \\\"important\\\",\\n\"\n+              + \"          \\\"value\\\": {\\n\"\n+              + \"            \\\"boolValue\\\": true\\n\"\n+              + \"          }\\n\"\n+              + \"        }]\\n\"\n+              + \"      }],\\n\"\n+              + \"      \\\"status\\\": {\\n\"\n+              + \"        \\\"code\\\": \\\"STATUS_CODE_OK\\\"\\n\"\n+              + \"      }\\n\"\n+              + \"    }]\\n\"\n+              + \"  }]\\n\"\n+              + \"}\",", "originalCommit": "973f5411d823e9f2471a0fde35c70319f6be5d28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec65fe4d038c57dd76f0793aabc89d244d0cc6a8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec65fe4d038c57dd76f0793aabc89d244d0cc6a8", "message": "Cleanups", "committedDate": "2020-12-22T05:21:07Z", "type": "commit"}]}