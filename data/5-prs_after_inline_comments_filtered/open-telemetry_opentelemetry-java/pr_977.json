{"pr_number": 977, "pr_title": "Add create Jaeger exporter with default settings and from environment settings", "pr_createdAt": "2020-03-09T13:58:04Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/977", "timeline": [{"oid": "153e22855bde6a238b243a772203dc5920be10c6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/153e22855bde6a238b243a772203dc5920be10c6", "message": "Add utility function to create Jaeger exporter\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-09T13:59:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r389748486", "bodyText": "I don't think this is the expected returned type.", "author": "thisthat", "createdAt": "2020-03-09T15:01:56Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/spi/TraceProviderSdk.java", "diffHunk": "@@ -17,13 +17,12 @@\n package io.opentelemetry.sdk.trace.spi;\n \n import io.opentelemetry.sdk.trace.TracerSdkProvider;\n-import io.opentelemetry.trace.TracerProvider;\n import io.opentelemetry.trace.spi.TraceProvider;\n \n /** SDK implementation of the TracerProviderFactory for SPI. */\n public final class TraceProviderSdk implements TraceProvider {\n   @Override\n-  public TracerProvider create() {\n+  public TracerSdkProvider create() {", "originalCommit": "7e2e197bba9bbff042a8dfb15fd246671a3d8e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MDcxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r389780715", "bodyText": "Can you be more specific why? Instead of returning the interface it returns the concrete type (covariant return type). This is a common practice.", "author": "pavolloffay", "createdAt": "2020-03-09T15:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTk1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r390319951", "bodyText": "@pavolloffay Please move this in a different PR and we can discuss there. We should recommend users to call with OpenTelemetrySdk.getTracerProvider", "author": "bogdandrutu", "createdAt": "2020-03-10T13:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NDM4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r390344385", "bodyText": "I will revert it and cast the object in the builder instead. Are there any other comments for this PR?", "author": "pavolloffay", "createdAt": "2020-03-10T14:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODQ4Ng=="}], "type": "inlineReview"}, {"oid": "544693f09e8821fe34f9d47f770519123dbc68d7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/544693f09e8821fe34f9d47f770519123dbc68d7", "message": "Add utility function to create Jaeger exporter\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-10T08:14:57Z", "type": "commit"}, {"oid": "528ef70101900ed90400bbc4212578e7a7b3123f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/528ef70101900ed90400bbc4212578e7a7b3123f", "message": "use constant\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-10T08:14:57Z", "type": "commit"}, {"oid": "ff59c2f8e6e8beaf8e0c910943b6e48d9d7ec462", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ff59c2f8e6e8beaf8e0c910943b6e48d9d7ec462", "message": "Add example to readme\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-10T08:17:43Z", "type": "commit"}, {"oid": "ff59c2f8e6e8beaf8e0c910943b6e48d9d7ec462", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ff59c2f8e6e8beaf8e0c910943b6e48d9d7ec462", "message": "Add example to readme\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-10T08:17:43Z", "type": "forcePushed"}, {"oid": "1e3c1fe685d35488a6f7a69918a576983722cac6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1e3c1fe685d35488a6f7a69918a576983722cac6", "message": "Move the code to builder\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-10T09:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3MTMxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/977#discussion_r390171311", "bodyText": "Support ENV vars has been asked here #797 (comment).\nGiven the main functionality is supporting env vars the name of the method should reflect that. Also I do not like the static method as there is a builder. So I have moved the code into the builder, basically the same design is in core Jaeger client, where builders can be constructed from env properties", "author": "pavolloffay", "createdAt": "2020-03-10T09:01:50Z", "path": "exporters/jaeger/src/main/java/io/opentelemetry/exporters/jaeger/JaegerGrpcSpanExporter.java", "diffHunk": "@@ -205,4 +211,35 @@ public JaegerGrpcSpanExporter build() {\n       return new JaegerGrpcSpanExporter(serviceName, channel, deadline);\n     }\n   }\n+\n+  /**\n+   * Configure and install Jaeger exporter with default settings. Configuration can be provided via\n+   * system properties and environmental variables: {@code JAEGER_ENDPOINT} e.g. {@code\n+   * localhost:14250} and {@code JAEGER_SERVICE_NAME} e.g. {@code my-deployment}.\n+   *\n+   * @param tracerProvider tracer provider\n+   */\n+  public static void installDefault(TracerSdkProvider tracerProvider) {", "originalCommit": "ff59c2f8e6e8beaf8e0c910943b6e48d9d7ec462", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e81839ce5b1c93a84c1a93e8c633d64ddc06aa1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3e81839ce5b1c93a84c1a93e8c633d64ddc06aa1", "message": "Revert type covariant\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>", "committedDate": "2020-03-10T17:18:07Z", "type": "commit"}]}