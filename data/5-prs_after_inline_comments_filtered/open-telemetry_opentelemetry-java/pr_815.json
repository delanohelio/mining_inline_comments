{"pr_number": 815, "pr_title": "Http trace context benchmark", "pr_createdAt": "2020-02-04T12:11:26Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/815", "timeline": [{"oid": "91237542975b19a8eaed2dc4ea56b56a41949b1c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/91237542975b19a8eaed2dc4ea56b56a41949b1c", "message": "Merge pull request #1 from open-telemetry/master\n\nmerge", "committedDate": "2020-02-02T14:36:24Z", "type": "commit"}, {"oid": "9a712829fa8853c9d09370ca209436084295b73b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9a712829fa8853c9d09370ca209436084295b73b", "message": "test: add benchmarks for http trace context extract and inject", "committedDate": "2020-02-04T11:56:39Z", "type": "commit"}, {"oid": "fd256fded0a934912dc00654a1752589737a2e84", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fd256fded0a934912dc00654a1752589737a2e84", "message": "test: add benchmarks for http trace context extract and inject", "committedDate": "2020-02-04T12:08:51Z", "type": "commit"}, {"oid": "22d1601be038e1269d4fb015df999269e5a051ae", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/22d1601be038e1269d4fb015df999269e5a051ae", "message": "docs: add docs", "committedDate": "2020-02-04T12:33:39Z", "type": "commit"}, {"oid": "ad5de141cba53cb97161c1fa7e5573d165cc12ef", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ad5de141cba53cb97161c1fa7e5573d165cc12ef", "message": "style: apply google code style", "committedDate": "2020-02-04T12:37:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDk0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r374944940", "bodyText": "Wondering if it would be useful to use more 'complex' ids.", "author": "carlosalberto", "createdAt": "2020-02-04T21:54:51Z", "path": "api/src/jmh/java/io/opentelemetry/trace/propagation/HttpTraceContextExtractBenchmark.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+public class HttpTraceContextExtractBenchmark {\n+\n+  private String traceIdBase16 = \"ff000000000000000000000000000041\";", "originalCommit": "ad5de141cba53cb97161c1fa7e5573d165cc12ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5MTI0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r375091242", "bodyText": "@carlosalberto it depend what do u mean by more 'complex', if u can provide me some examples i can include them", "author": "DotSpy", "createdAt": "2020-02-05T07:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNTc1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r375505752", "bodyText": "we could pre-generate a bunch of random trace/span ids and use them for the benchmarks.", "author": "jkwatson", "createdAt": "2020-02-05T21:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDk0MA=="}], "type": "inlineReview"}, {"oid": "47da1efd8546d8032b0ff1fd1f24726939afe8a3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/47da1efd8546d8032b0ff1fd1f24726939afe8a3", "message": "style: format jmh.gradle, use not deprecated archiveFileName", "committedDate": "2020-02-05T19:27:11Z", "type": "commit"}, {"oid": "3a6b82104ca39e34eed9da7384f3a2c83acb2e58", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3a6b82104ca39e34eed9da7384f3a2c83acb2e58", "message": "Merge branch 'master' into spancontext_benchmark", "committedDate": "2020-02-07T20:06:06Z", "type": "commit"}, {"oid": "f1177d260b884bfe229400ad3ff136c73bd885a0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f1177d260b884bfe229400ad3ff136c73bd885a0", "message": "test: add params for trace id and span id", "committedDate": "2020-02-07T20:07:16Z", "type": "commit"}, {"oid": "dc5cfb7cbc473986f1be680c4c0bb653dfd3a41f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dc5cfb7cbc473986f1be680c4c0bb653dfd3a41f", "message": "Merge remote-tracking branch 'upstream/master'\nMerge upstream", "committedDate": "2020-02-07T20:38:14Z", "type": "commit"}, {"oid": "55ae4d291b39be5265ccfef57a839e468efc9393", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/55ae4d291b39be5265ccfef57a839e468efc9393", "message": "Merge branch 'master' into spancontext_benchmark", "committedDate": "2020-02-07T20:41:12Z", "type": "commit"}, {"oid": "fb518d0f5bb285fcd4bc185cd9f2d14b60c4afd9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fb518d0f5bb285fcd4bc185cd9f2d14b60c4afd9", "message": "fix: fix merge conflicts", "committedDate": "2020-02-07T20:42:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTQ2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r376611465", "bodyText": "Curious about the usage of a Linked hashmap here. Why not just a plain HashMap?", "author": "jkwatson", "createdAt": "2020-02-07T21:16:44Z", "path": "api/src/jmh/java/io/opentelemetry/trace/propagation/HttpTraceContextInjectBenchmark.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.trace.propagation;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+public class HttpTraceContextInjectBenchmark {\n+\n+  @Param({\n+    \"905734c59b913b4a905734c59b913b4a\",\n+    \"21196a77f299580e21196a77f299580e\",\n+    \"2e7d0ad2390617702e7d0ad239061770\",\n+    \"905734c59b913b4a905734c59b913b4a\",\n+    \"68ec932c33b3f2ee68ec932c33b3f2ee\"\n+  })\n+  public static String traceIdBase16;\n+\n+  @Param({\n+    \"9909983295041501\",\n+    \"993a97ee3691eb26\",\n+    \"d49582a2de984b86\",\n+    \"776ff807b787538a\",\n+    \"68ec932c33b3f2ee\"\n+  })\n+  public static String spanIdBase16;\n+\n+  private byte sampledTraceOptionsBytes = 1;\n+  private TraceFlags sampledTraceOptions = TraceFlags.fromByte(sampledTraceOptionsBytes);\n+  private TraceState traceStateDefault = TraceState.builder().build();\n+\n+  private HttpTraceContext httpTraceContext;\n+  private Map<String, String> carrier;\n+  private Setter<Map<String, String>> setter =\n+      new Setter<Map<String, String>>() {\n+        @Override\n+        public void set(Map<String, String> carrier, String key, String value) {\n+          carrier.put(key, value);\n+        }\n+      };\n+\n+  @State(Scope.Thread)\n+  public static class HttpTraceContextInjectState {\n+\n+    public TraceId traceId;\n+    public SpanId spanId;\n+\n+    @Setup\n+    public void setup() {\n+      this.traceId = TraceId.fromLowerBase16(traceIdBase16, 0);\n+      this.spanId = SpanId.fromLowerBase16(spanIdBase16, 0);\n+    }\n+  }\n+\n+  @Setup\n+  public void setup() {\n+    this.httpTraceContext = new HttpTraceContext();\n+    this.carrier = new LinkedHashMap<>();", "originalCommit": "fb518d0f5bb285fcd4bc185cd9f2d14b60c4afd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMzgwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r376613804", "bodyText": "Since we adding\\removing only one value i don't think it have any difference at all with usual HashMap, i used linked because saw it here HttpTraceContextTest", "author": "DotSpy", "createdAt": "2020-02-07T21:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNTE4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r376615188", "bodyText": "I believe that the Linked version has slightly higher overhead than the plain HashMap, so for benchmarks, I think we should prefer a HashMap over a LinkedHashMap, unless we have a need to preserve order (which it sounds like we don't).", "author": "jkwatson", "createdAt": "2020-02-07T21:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMzMyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/815#discussion_r376623328", "bodyText": "agree", "author": "DotSpy", "createdAt": "2020-02-07T21:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTQ2NQ=="}], "type": "inlineReview"}, {"oid": "fbeb6bfbcc2f15d7f952159dcb090582713c1962", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fbeb6bfbcc2f15d7f952159dcb090582713c1962", "message": "feat: use HashMap move params to inner state", "committedDate": "2020-02-07T21:47:55Z", "type": "commit"}, {"oid": "4ace58035ae8cc784ea6034346e2986d27d2d2d2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4ace58035ae8cc784ea6034346e2986d27d2d2d2", "message": "feat: use same measurement params", "committedDate": "2020-02-07T21:56:24Z", "type": "commit"}, {"oid": "76b3f5d65eba6e1ec66dfa3eb591d8e3aa192b23", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76b3f5d65eba6e1ec66dfa3eb591d8e3aa192b23", "message": "fix: apply google code style", "committedDate": "2020-02-07T22:01:48Z", "type": "commit"}, {"oid": "6294048e91653ee5df33d470e4c63a447c90b3d0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6294048e91653ee5df33d470e4c63a447c90b3d0", "message": "fix: extract span creation for more clear benchmark", "committedDate": "2020-02-08T18:49:29Z", "type": "commit"}, {"oid": "74b1734d356267eb2e6137086499531aa7704fc1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/74b1734d356267eb2e6137086499531aa7704fc1", "message": "test: use vector of traceparents, increase iterations to 50k", "committedDate": "2020-02-14T16:20:52Z", "type": "commit"}, {"oid": "c9f61a674642e2a140e049e23052e1908d120b9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c9f61a674642e2a140e049e23052e1908d120b9b", "message": "style: apply google code style", "committedDate": "2020-02-14T16:23:34Z", "type": "commit"}, {"oid": "7c984f505652d8ca789794a5bf17677739eb9978", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7c984f505652d8ca789794a5bf17677739eb9978", "message": "Merge remote-tracking branch 'upstream/master' into spancontext_benchmark", "committedDate": "2020-02-14T17:29:26Z", "type": "commit"}, {"oid": "da76a061df6bc2de15c4524af89b3daa11cb2e3c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/da76a061df6bc2de15c4524af89b3daa11cb2e3c", "message": "feat: use vector of traceparents in inject benchmark", "committedDate": "2020-02-14T17:50:10Z", "type": "commit"}, {"oid": "d7ed32dfb18f4b1d7e54f6b78bc8fa776a74105c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d7ed32dfb18f4b1d7e54f6b78bc8fa776a74105c", "message": "Merge remote-tracking branch 'upstream/master' into spancontext_benchmark", "committedDate": "2020-02-16T13:20:50Z", "type": "commit"}, {"oid": "c9d35bba2c61694b696f3652ee6a2fb50c6f814a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c9d35bba2c61694b696f3652ee6a2fb50c6f814a", "message": "Merge remote-tracking branch 'upstream/master' into spancontext_benchmark", "committedDate": "2020-02-17T17:22:40Z", "type": "commit"}, {"oid": "76c2a54ae41f682ea77929eab6ded6dddfb9c7c2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76c2a54ae41f682ea77929eab6ded6dddfb9c7c2", "message": "Merge remote-tracking branch 'upstream/master' into spancontext_benchmark", "committedDate": "2020-02-18T21:30:39Z", "type": "commit"}]}