{"pr_number": 1538, "pr_title": "Add convenience methods for when empty labels are used.", "pr_createdAt": "2020-08-13T18:09:00Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538", "timeline": [{"oid": "d61cb79cdda520fc88e802920dfc0586c2cd33d1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d61cb79cdda520fc88e802920dfc0586c2cd33d1", "message": "Add convenience methods for when empty labels are used.", "committedDate": "2020-08-13T18:07:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NjAyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538#discussion_r470186021", "bodyText": "these methods all need javadoc, please", "author": "jkwatson", "createdAt": "2020-08-13T19:10:54Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleUpDownCounter.java", "diffHunk": "@@ -67,6 +67,8 @@\n    */\n   void add(double increment, Labels labels);\n \n+  void add(double increment);", "originalCommit": "d61cb79cdda520fc88e802920dfc0586c2cd33d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNDQwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538#discussion_r470624408", "bodyText": "fixed at lastest commit.", "author": "dengliming", "createdAt": "2020-08-14T13:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NjAyMQ=="}], "type": "inlineReview"}, {"oid": "0c50a0ef1d1b935b11166247ebbb61b76143d98b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0c50a0ef1d1b935b11166247ebbb61b76143d98b", "message": "Fix review", "committedDate": "2020-08-14T13:20:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjQzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538#discussion_r470716434", "bodyText": "Not related to this PR at all - @jkwatson I was surprised to see here that we don't allow negative additions", "author": "anuraaga", "createdAt": "2020-08-14T16:04:59Z", "path": "api/src/main/java/io/opentelemetry/metrics/DoubleCounter.java", "diffHunk": "@@ -64,6 +64,16 @@\n    */\n   void add(double increment, Labels labels);\n \n+  /**\n+   * Adds the given {@code increment} to the current value. The values cannot be negative.\n+   *\n+   * <p>The value added is associated with the current {@code Context} and with empty labels.\n+   *\n+   * @param increment the value to add.\n+   * @since 0.8.0\n+   */\n+  void add(double increment);", "originalCommit": "0c50a0ef1d1b935b11166247ebbb61b76143d98b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNDc0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538#discussion_r470724749", "bodyText": "The UpDownCounters are the ones that allow negative increments.", "author": "jkwatson", "createdAt": "2020-08-14T16:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyODUyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538#discussion_r470728524", "bodyText": "Ah got it! I think... do we need two types of counters? Just food for thought no strong opinion, mostly just used to things like AtomicInteger in terms of API.", "author": "anuraaga", "createdAt": "2020-08-14T16:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5MDg1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1538#discussion_r470790856", "bodyText": "There was intense debate in the metric specs about this. The rationale (for good or ill) was that having different instruments that reflect the different semantics of the counting was valuable for instrumentation, to make it very clear what sort of counting you were doing. We went the opposite way from OpenCensus, which (I think?) has one instrument for everything, and lots of options.", "author": "jkwatson", "createdAt": "2020-08-14T18:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxNjQzNA=="}], "type": "inlineReview"}]}