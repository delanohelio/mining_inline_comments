{"pr_number": 1285, "pr_title": "Do not inject invalid SpanContext instances.", "pr_createdAt": "2020-05-28T23:17:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285", "timeline": [{"oid": "3fa76fbb873204b2c068a6900c7fda05073c6e16", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3fa76fbb873204b2c068a6900c7fda05073c6e16", "message": "Do not inject invalid SpanContext instances.", "committedDate": "2020-05-28T23:11:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDU4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285#discussion_r432294583", "bodyText": "Wouldn't the code be easier if you replace TracingContextUtils.getSpanWithoutDefault with TracingContextUtils.getSpan and then drop null check and use only isValid?", "author": "iNikem", "createdAt": "2020-05-29T07:07:47Z", "path": "contrib/trace_propagators/src/main/java/io/opentelemetry/contrib/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -32,7 +32,7 @@\n     Objects.requireNonNull(setter, \"setter\");\n \n     Span span = TracingContextUtils.getSpanWithoutDefault(context);\n-    if (span == null) {\n+    if (span == null || !span.getContext().isValid()) {", "originalCommit": "3fa76fbb873204b2c068a6900c7fda05073c6e16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNzQwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285#discussion_r432437408", "bodyText": "Yeah, I was thinking about it too. I guess I prefer to do a simple null check before doing a full check, i.e. getContext() + isValid() ;)\nFWIW though, I'm thinking, after cases like these, to remove the getSpanWithoutDefault() overload (which I might end up doing after doing some context-prop updates).", "author": "carlosalberto", "createdAt": "2020-05-29T12:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzODk4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285#discussion_r432438980", "bodyText": "There might be propagators that will be able to meaningfully inject something only based on TraceState, even for invalid trace and span IDs. So while an utility function would be good, I think the final decision should be left to the propagator.", "author": "Oberon00", "createdAt": "2020-05-29T12:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MDExNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285#discussion_r432440116", "bodyText": "There might be propagators that will be able to meaningfully inject something only based on TraceState\n\nRight, exactly, I had totally forgotten about this case :)", "author": "carlosalberto", "createdAt": "2020-05-29T12:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0MjE3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285#discussion_r432542176", "bodyText": "The w3c standard says that traceparent must be present so I am worried that if that can be the case to only propagate tracestate", "author": "bogdandrutu", "createdAt": "2020-05-29T14:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1MTY5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1285#discussion_r432551693", "bodyText": "Sure, this does not apply to W3C but maybe other propagators (vendor ones for example).", "author": "Oberon00", "createdAt": "2020-05-29T15:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDU4Mw=="}], "type": "inlineReview"}]}