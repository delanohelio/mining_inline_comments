{"pr_number": 755, "pr_title": "The basics for a double counter", "pr_createdAt": "2020-01-14T15:35:39Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/755", "timeline": [{"oid": "be0d98605f663e03dec65d6752caee18d9505909", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/be0d98605f663e03dec65d6752caee18d9505909", "message": "WIP on a double counter shell", "committedDate": "2020-01-14T15:31:28Z", "type": "commit"}, {"oid": "9eacea3726d34e18115fa34059b459ac6f269998", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9eacea3726d34e18115fa34059b459ac6f269998", "message": "tests for the double counter", "committedDate": "2020-01-14T15:31:28Z", "type": "commit"}, {"oid": "8ccaa9e3656466236c65dea850b3a87a763a128b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8ccaa9e3656466236c65dea850b3a87a763a128b", "message": "actually add the double counter code", "committedDate": "2020-01-14T15:42:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMjYzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755#discussion_r366422630", "bodyText": "just Builder? We will use this as SdkDoubleCounter.Builder", "author": "bogdandrutu", "createdAt": "2020-01-14T15:58:54Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/SdkDoubleCounter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import io.opentelemetry.metrics.DoubleCounter;\n+import io.opentelemetry.metrics.DoubleCounter.BoundDoubleCounter;\n+import io.opentelemetry.metrics.LabelSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+class SdkDoubleCounter extends BaseInstrument<BoundDoubleCounter> implements DoubleCounter {\n+\n+  private final boolean monotonic;\n+\n+  private SdkDoubleCounter(\n+      String name,\n+      String description,\n+      Map<String, String> constantLabels,\n+      List<String> labelKeys,\n+      boolean monotonic) {\n+    super(name, description, constantLabels, labelKeys);\n+    this.monotonic = monotonic;\n+  }\n+\n+  @Override\n+  public void add(double delta, LabelSet labelSet) {\n+    createBoundInstrument(labelSet).add(delta);\n+  }\n+\n+  @Override\n+  BoundDoubleCounter createBoundInstrument(LabelSet labelSet) {\n+    return new SdkBoundDoubleCounter(labelSet, monotonic);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof SdkDoubleCounter)) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+\n+    SdkDoubleCounter that = (SdkDoubleCounter) o;\n+\n+    return monotonic == that.monotonic;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = super.hashCode();\n+    result = 31 * result + (monotonic ? 1 : 0);\n+    return result;\n+  }\n+\n+  private static class SdkBoundDoubleCounter extends BaseBoundInstrument\n+      implements BoundDoubleCounter {\n+\n+    private final boolean monotonic;\n+\n+    SdkBoundDoubleCounter(LabelSet labels, boolean monotonic) {\n+      super(labels);\n+      this.monotonic = monotonic;\n+    }\n+\n+    @Override\n+    public void add(double delta) {\n+      if (monotonic && delta < 0) {\n+        throw new IllegalArgumentException(\"monotonic counters can only increase\");\n+      }\n+      // todo: pass through to an aggregator/accumulator\n+    }\n+  }\n+\n+  static class SdkDoubleCounterBuilder", "originalCommit": "8ccaa9e3656466236c65dea850b3a87a763a128b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNDQyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755#discussion_r366424423", "bodyText": "good call. will fix.", "author": "jkwatson", "createdAt": "2020-01-14T16:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwOTA5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/755#discussion_r366509093", "bodyText": "done, and for the Long one as well.", "author": "jkwatson", "createdAt": "2020-01-14T18:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMjYzMA=="}], "type": "inlineReview"}, {"oid": "358cf727e7cc331f553dacd5ddcb79c25b990761", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/358cf727e7cc331f553dacd5ddcb79c25b990761", "message": "rename to just `Builder` for the two counter builders", "committedDate": "2020-01-14T18:42:46Z", "type": "commit"}]}