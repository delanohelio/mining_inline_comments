{"pr_number": 1207, "pr_title": "Ensure the total number of attributes is counted correctly", "pr_createdAt": "2020-05-12T22:27:25Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1207", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3MDA3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1207#discussion_r424070076", "bodyText": "Added as public to override the newly added methods in java8, so when we do the switch and start using them we remember to fix them and count the number of attributes added.", "author": "bogdandrutu", "createdAt": "2020-05-12T22:28:34Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/AttributesMap.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A map implementation with a fixed capacity that drops attributes when the map gets full.\n+ *\n+ * <p>Some APIs may have slightly different behaviors, like `put` which returns null if out of\n+ * capacity.\n+ */\n+final class AttributesMap extends HashMap<String, AttributeValue> {\n+\n+  private final long capacity;\n+  private int totalAddedValues = 0;\n+  // Here because -Werror complains about this: [serial] serializable class AttributesWithCapacity\n+  // has no definition of serialVersionUID. This class shouldn't be serialized.\n+  private static final long serialVersionUID = 42L;\n+\n+  AttributesMap(long capacity) {\n+    this.capacity = capacity;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public AttributeValue put(String key, AttributeValue value) {\n+    totalAddedValues++;\n+    if (size() >= capacity && !containsKey(key)) {\n+      return null;\n+    }\n+    return super.put(key, value);\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends String, ? extends AttributeValue> values) {\n+    for (Map.Entry<? extends String, ? extends AttributeValue> entry : values.entrySet()) {\n+      put(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  @Nullable\n+  @Override\n+  public AttributeValue remove(Object key) {\n+    return super.remove(key);\n+  }\n+\n+  public AttributeValue putIfAbsent(String key, AttributeValue value) {\n+    throw new RuntimeException(\"Do not call methods on the map\");\n+  }\n+\n+  public AttributeValue replace(String key, AttributeValue value) {\n+    throw new RuntimeException(\"Do not call methods on the map\");\n+  }\n+\n+  public boolean replace(String key, AttributeValue oldValue, AttributeValue newValue) {\n+    throw new RuntimeException(\"Do not call methods on the map\");\n+  }", "originalCommit": "49b005d0db4a85619631772a158bb25eeb6c6188", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1632f379e79a7eaf67cccfa4143a94a2d3a5e771", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1632f379e79a7eaf67cccfa4143a94a2d3a5e771", "message": "Ensure the total number of attributes is counted correctly\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-12T22:34:06Z", "type": "commit"}, {"oid": "1632f379e79a7eaf67cccfa4143a94a2d3a5e771", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1632f379e79a7eaf67cccfa4143a94a2d3a5e771", "message": "Ensure the total number of attributes is counted correctly\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-05-12T22:34:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTM0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1207#discussion_r424085349", "bodyText": "We should revisit this. Extending HashMap is a pretty bad antipattern in the Java world. I'd rather eat an allocation to wrap a Map and only provide the functionality that we want to expose, rather than having to deal with any arbitrary calls to our Map extension. But, that's beyond the scope of this PR.", "author": "jkwatson", "createdAt": "2020-05-12T23:11:45Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/AttributesMap.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A map implementation with a fixed capacity that drops attributes when the map gets full.\n+ *\n+ * <p>Some APIs may have slightly different behaviors, like `put` which returns null if out of\n+ * capacity.\n+ */\n+final class AttributesMap extends HashMap<String, AttributeValue> {\n+\n+  private final long capacity;\n+  private int totalAddedValues = 0;\n+  // Here because -Werror complains about this: [serial] serializable class AttributesWithCapacity\n+  // has no definition of serialVersionUID. This class shouldn't be serialized.\n+  private static final long serialVersionUID = 42L;\n+\n+  AttributesMap(long capacity) {\n+    this.capacity = capacity;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public AttributeValue put(String key, AttributeValue value) {\n+    totalAddedValues++;\n+    if (size() >= capacity && !containsKey(key)) {\n+      return null;\n+    }\n+    return super.put(key, value);\n+  }\n+\n+  @Override\n+  public void putAll(Map<? extends String, ? extends AttributeValue> values) {\n+    for (Map.Entry<? extends String, ? extends AttributeValue> entry : values.entrySet()) {\n+      put(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  @Nullable\n+  @Override\n+  public AttributeValue remove(Object key) {\n+    return super.remove(key);\n+  }\n+\n+  // Added as public to override the newly added methods in java8, so when we do the switch and\n+  // start using them we remember to fix them and count the number of attributes added.", "originalCommit": "1632f379e79a7eaf67cccfa4143a94a2d3a5e771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTYzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1207#discussion_r424085639", "bodyText": "I would file an issue and we can address later. Also this is internal data structure, so may not be that bad.", "author": "bogdandrutu", "createdAt": "2020-05-12T23:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NjU4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1207#discussion_r424086584", "bodyText": "#1209", "author": "bogdandrutu", "createdAt": "2020-05-12T23:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4ODAwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1207#discussion_r424088005", "bodyText": "yeah, if it were public, I would be much much more adamant about it being fixed ASAP.  :)", "author": "jkwatson", "createdAt": "2020-05-12T23:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTM0OQ=="}], "type": "inlineReview"}]}