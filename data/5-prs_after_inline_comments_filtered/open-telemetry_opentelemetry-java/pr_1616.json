{"pr_number": 1616, "pr_title": "Create a simple example of using the OTLP exporters", "pr_createdAt": "2020-09-01T20:25:12Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616", "timeline": [{"oid": "93acdcaa2881e4e781c16843f0614aa99cca4f86", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/93acdcaa2881e4e781c16843f0614aa99cca4f86", "message": "Create a simple otlp example, with a docker-compose collector setup.", "committedDate": "2020-09-01T20:22:50Z", "type": "commit"}, {"oid": "1ce6ea8235e29215d8fe3a3be692c3d458910e9b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ce6ea8235e29215d8fe3a3be692c3d458910e9b", "message": "Add metrics into the example", "committedDate": "2020-09-01T20:22:50Z", "type": "commit"}, {"oid": "9e972445c74e2bd89ec612b2eda3ff24d331c3bb", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e972445c74e2bd89ec612b2eda3ff24d331c3bb", "message": "formatting", "committedDate": "2020-09-01T20:24:00Z", "type": "commit"}, {"oid": "849112a1c4d9112faf95cbeaf4a1496baf68f72e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/849112a1c4d9112faf95cbeaf4a1496baf68f72e", "message": "remove the go metrics load generator", "committedDate": "2020-09-01T22:46:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4NjYyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481686622", "bodyText": "If I'm not mistaken, it's a must for this to be called before anything under io.observability since resource is immutable. Let's add a comment with that warning.", "author": "anuraaga", "createdAt": "2020-09-02T04:51:27Z", "path": "examples/otlp/src/main/java/io/opentelemetry/example/OtlpExporterExample.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.example;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.Collections;\n+\n+/**\n+ * Example code for setting up the OTLP exporters.\n+ *\n+ * <p>If you wish to use this code, you'll need to run a copy of the collector locally, on the\n+ * default port. There is a docker-compose configuration for doing this in the docker subdirectory\n+ * of this module.\n+ */\n+public class OtlpExporterExample {\n+  public static void main(String[] args) throws InterruptedException {\n+    // this will make sure that a proper service.name attribute is set on all the spans/metrics.", "originalCommit": "849112a1c4d9112faf95cbeaf4a1496baf68f72e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyNzE3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481727175", "bodyText": "Yeah, it's a terrible hack to even have to do this. I'll add some comments.", "author": "jkwatson", "createdAt": "2020-09-02T05:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4NjYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Mzc3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r482253772", "bodyText": "done", "author": "jkwatson", "createdAt": "2020-09-02T17:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4NjYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5MzI0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r481893248", "bodyText": "Are you afraid that people will copy-paste this into their production code? May be use BSP?", "author": "iNikem", "createdAt": "2020-09-02T08:39:30Z", "path": "examples/otlp/src/main/java/io/opentelemetry/example/OtlpExporterExample.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.example;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.Collections;\n+\n+/**\n+ * Example code for setting up the OTLP exporters.\n+ *\n+ * <p>If you wish to use this code, you'll need to run a copy of the collector locally, on the\n+ * default port. There is a docker-compose configuration for doing this in the docker subdirectory\n+ * of this module.\n+ */\n+public class OtlpExporterExample {\n+  public static void main(String[] args) throws InterruptedException {\n+    // this will make sure that a proper service.name attribute is set on all the spans/metrics.\n+    System.setProperty(\"otel.resource.attributes\", \"service.name=OtlpExporterExample\");\n+\n+    // set up the span exporter and wire it into the SDK\n+    OtlpGrpcSpanExporter spanExporter = OtlpGrpcSpanExporter.getDefault();\n+    SimpleSpanProcessor spanProcessor = SimpleSpanProcessor.newBuilder(spanExporter).build();", "originalCommit": "849112a1c4d9112faf95cbeaf4a1496baf68f72e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NzgyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r482167821", "bodyText": "\ud83e\udd37  There are use-cases for both kinds of span processors. If you think it's a worry, I can change it to a BSP.", "author": "jkwatson", "createdAt": "2020-09-02T15:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5MzI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2ODQ2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1616#discussion_r482268467", "bodyText": "switched to BSP. we'll see if this encourages people to use it. :)", "author": "jkwatson", "createdAt": "2020-09-02T18:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5MzI0OA=="}], "type": "inlineReview"}, {"oid": "36c1699d4590eb60e86eff4ef2f00502d19f4d9a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/36c1699d4590eb60e86eff4ef2f00502d19f4d9a", "message": "remove unneeded pieces of the docker config; switch to using the BSP in the example code.", "committedDate": "2020-09-02T17:24:26Z", "type": "commit"}, {"oid": "18c3bd333e771b6d543f52d8fef2f1ba4a30bc61", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/18c3bd333e771b6d543f52d8fef2f1ba4a30bc61", "message": "Update examples/otlp/docker/otel-collector-config-demo.yaml\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-09-03T02:36:41Z", "type": "commit"}]}