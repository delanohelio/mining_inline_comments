{"pr_number": 2144, "pr_title": "fix #2143 Use ZoneId.of(String) to avoid blocking disk load", "pr_createdAt": "2020-05-05T12:53:01Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2144", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NDI1OQ==", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420094259", "bodyText": "FYI you can achieve the same with less code by submitting FutureTask (will re-throw from .get)", "author": "bsideup", "createdAt": "2020-05-05T13:08:19Z", "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.Test;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\t//see https://github.com/reactor/reactor-core/issues/2143\n+\t@Test\n+\tpublic void shouldNotReportBlockingCallWithZoneIdUsage() throws Throwable {\n+\t\tAtomicReference<Throwable> errorRef = new AtomicReference<>(null);\n+\t\tCountDownLatch latch = new CountDownLatch(1);\n+\t\tSchedulers.single().schedule(() -> {", "originalCommit": "f3ef3c89db99e9a5ed5102f25f71080d614a5a19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3ODQzOQ==", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420178439", "bodyText": "good thing you made me rewrite the test, because I initially had it in the existing ReactorBlockHoundIntegrationTest class, which installs BlockHound, but I omitted that install part when splitting it out in its own testcase... so the test was a false positive!\nfixed that and swithed to FutureTask", "author": "simonbasle", "createdAt": "2020-05-05T15:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NDI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTI3NA==", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420181274", "bodyText": "BlockHound.install() would be fine here", "author": "bsideup", "createdAt": "2020-05-05T15:04:43Z", "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.FutureTask;\n+\n+import org.junit.Test;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\tstatic {\n+\t\t// Use the builder to load only our integration to avoid false positives\n+\t\tBlockHound.builder()", "originalCommit": "a703e483e81d63c5fcd3541957618dc8d952ea80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4OTExMQ==", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420189111", "bodyText": "it would be at odds with ReactorBlockHoundIntegrationTest's own usage of the Builder, wouldn't it?", "author": "simonbasle", "createdAt": "2020-05-05T15:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5NzMwNg==", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420197306", "bodyText": "you can (and should) configure it to isolate test runs by setting forkEvery = maxParallelForks = 1 on blockHoundTest task, similar to how we do it in BlockHound:\nhttps://github.com/reactor/BlockHound/blob/b9c60096113bba2448fe00d90eff791de14495a2/example/build.gradle#L17", "author": "bsideup", "createdAt": "2020-05-05T15:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTk4Ng==", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420181986", "bodyText": "If you change it to FutureTask<Disposable>, it will be a one liner :)", "author": "bsideup", "createdAt": "2020-05-05T15:05:41Z", "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.FutureTask;\n+\n+import org.junit.Test;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\tstatic {\n+\t\t// Use the builder to load only our integration to avoid false positives\n+\t\tBlockHound.builder()\n+\t\t          .with(new ReactorBlockHoundIntegration())\n+\t\t          .install();\n+\t}\n+\n+\t//see https://github.com/reactor/reactor-core/issues/2143\n+\t@Test\n+\tpublic void shouldNotReportBlockingCallWithZoneIdUsage() throws Throwable {\n+\t\tFutureTask<Void> testTask = new FutureTask<>(() -> {", "originalCommit": "a703e483e81d63c5fcd3541957618dc8d952ea80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64a8d21b2045fdbcbfc5e93a85da93e0f4cf34d3", "url": "https://github.com/reactor/reactor-core/commit/64a8d21b2045fdbcbfc5e93a85da93e0f4cf34d3", "message": "[build] Have blockHoundTest fork JVM on every case (see #2144)\n\nForking JVMs is useful for Blockhound-related tests as the installation\nis JVM-wide and non-reversible.", "committedDate": "2020-05-06T09:23:43Z", "type": "commit"}, {"oid": "d4aacdf5081493f7dcd89911f1363e8f0796777c", "url": "https://github.com/reactor/reactor-core/commit/d4aacdf5081493f7dcd89911f1363e8f0796777c", "message": "fix #2143 Use ZoneId.of(String) to avoid blocking disk load\n\nThe former use of ZoneId.systemDefault() would trigger a file read from\ndisk (configuration read for the sytem's default timezone), despite the\ntimezone not being that important for the Scheduler. Using of(String)\nfactory method avoids that disk read. The ZoneId is frontloaded as a\nconstant anyway, since it is used by the SHUTDOWN constant as well.", "committedDate": "2020-05-06T09:24:20Z", "type": "commit"}, {"oid": "d4aacdf5081493f7dcd89911f1363e8f0796777c", "url": "https://github.com/reactor/reactor-core/commit/d4aacdf5081493f7dcd89911f1363e8f0796777c", "message": "fix #2143 Use ZoneId.of(String) to avoid blocking disk load\n\nThe former use of ZoneId.systemDefault() would trigger a file read from\ndisk (configuration read for the sytem's default timezone), despite the\ntimezone not being that important for the Scheduler. Using of(String)\nfactory method avoids that disk read. The ZoneId is frontloaded as a\nconstant anyway, since it is used by the SHUTDOWN constant as well.", "committedDate": "2020-05-06T09:24:20Z", "type": "forcePushed"}]}