{"pr_number": 2453, "pr_title": "fix #2442 assertj migration", "pr_createdAt": "2020-10-22T10:13:30Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2453", "timeline": [{"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "url": "https://github.com/reactor/reactor-core/commit/f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "message": "Additional polish", "committedDate": "2020-10-29T08:38:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NTcxMA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514155710", "bodyText": ".isTrue() shouldn't be part of the description here, probably a false positive during search-replace", "author": "simonbasle", "createdAt": "2020-10-29T10:30:54Z", "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -163,9 +163,8 @@ public void onComplete() {\n \t\tlatch.await(8, TimeUnit.SECONDS);\n \n \t\tlong count = latch.getCount();\n-\t\torg.junit.Assert.assertTrue(\"Count > 0 : \" + count + \" (\" + list + \")  , Running on \" +\n-\t\t\t\t\t\tSchedulers.DEFAULT_POOL_SIZE + \" CPU\",\n-\t\t\t\tlatch.getCount() == 0);\n+\t\tassertThat(latch.getCount()).as(\"Count > 0 : \" + count + \" (\" + list + \").isTrue()  , Running on \" +", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5ODYzOA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514198638", "bodyText": "still not fixed", "author": "simonbasle", "createdAt": "2020-10-29T11:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NTcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NjI3OQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514156279", "bodyText": "can be containsExactly(1, 2, ...) (applies to all assertThat(list).isEqualTo(Arrays.asList(...)) occurrences)", "author": "simonbasle", "createdAt": "2020-10-29T10:31:54Z", "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingIterableTest.java", "diffHunk": "@@ -51,7 +50,7 @@ public void normal() {\n \t\t\tvalues.add(i);\n \t\t}\n \n-\t\tAssert.assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), values);\n+\t\tassertThat(values).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODQyMA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514158420", "bodyText": "can be assertThat(threadHash).hasValue(null)", "author": "simonbasle", "createdAt": "2020-10-29T10:35:35Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxCancelOnTest.java", "diffHunk": "@@ -52,7 +51,7 @@ public void cancelOnDedicatedScheduler() throws Exception {\n \t\t    .cancel();\n \n \t\tlatch.await();\n-\t\tAssert.assertNull(threadHash.get());\n+\t\tassertThat(threadHash.get()).isNull();", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5OTUwNg==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514199506", "bodyText": "still not fixed", "author": "simonbasle", "createdAt": "2020-10-29T11:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODcxNw==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514158717", "bodyText": "can be fluently chained", "author": "simonbasle", "createdAt": "2020-10-29T10:36:05Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxConcatArrayTest.java", "diffHunk": "@@ -174,10 +173,10 @@ public void pairWise() {\n \t\tFlux<String> f = Flux.concat(Flux.just(\"test\"), Flux.just(\"test2\"))\n \t\t                     .concatWith(Flux.just(\"test3\"));\n \n-\t\tAssert.assertTrue(f instanceof FluxConcatArray);\n+\t\tassertThat(f).isInstanceOf(FluxConcatArray.class);\n \t\tFluxConcatArray<String> s = (FluxConcatArray<String>) f;\n-\t\tAssert.assertTrue(s.array != null);\n-\t\tAssert.assertTrue(s.array.length == 3);\n+\t\tassertThat(s.array).isNotNull();", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODgwMQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514158801", "bodyText": "can be fluently chained", "author": "simonbasle", "createdAt": "2020-10-29T10:36:16Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxConcatArrayTest.java", "diffHunk": "@@ -190,10 +189,10 @@ public void pairWise2() {\n \t\tFlux<String> f = Mono.just(\"test\")\n \t\t                     .concatWith(Flux.just(\"test2\"));\n \n-\t\tAssert.assertTrue(f instanceof FluxConcatArray);\n+\t\tassertThat(f).isInstanceOf(FluxConcatArray.class);\n \t\tFluxConcatArray<String> s = (FluxConcatArray<String>) f;\n-\t\tAssert.assertTrue(s.array != null);\n-\t\tAssert.assertTrue(s.array.length == 2);\n+\t\tassertThat(s.array).isNotNull();", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2MDE1OA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514160158", "bodyText": "reverse the logic, always put the value under test in the assertThat", "author": "simonbasle", "createdAt": "2020-10-29T10:38:29Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxDeferTest.java", "diffHunk": "@@ -78,9 +78,9 @@ public void deferStream(){\n \t\tFlux<Integer> source =\n \t\t\t\tFlux.defer(() -> Flux.just(i.incrementAndGet()));\n \n-\t\tAssert.assertEquals(source.blockLast().intValue(), 1);\n-\t\tAssert.assertEquals(source.blockLast().intValue(), 2);\n-\t\tAssert.assertEquals(source.blockLast().intValue(), 3);\n+\t\tassertThat(1).isEqualTo(source.blockLast().intValue());", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2NzMyMA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514167320", "bodyText": "can be assertThat(e).hasCause(err)", "author": "simonbasle", "createdAt": "2020-10-29T10:51:07Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "diffHunk": "@@ -444,8 +442,8 @@ public void afterTerminateCallbackErrorAndErrorCallbackError() {\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\te.printStackTrace();\n-\t\t\tassertSame(e.toString(), err, e.getCause());\n-\t\t\tassertEquals(0, err2.getSuppressed().length);\n+\t\t\tassertThat(e.getCause()).as(e.toString()).isSameAs(err);", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2Nzc0Mg==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514167742", "bodyText": "can be assertThat(d).hasMessage(exception().getMessage())", "author": "simonbasle", "createdAt": "2020-10-29T10:51:55Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -143,9 +140,7 @@\n \t\t\t\t})).producerNever()\n \t\t\t\t   .verifier(step -> {\n \t\t\t\t\t   //fixme Support bubbled error verification in reactor-test\n-\t\t\t\t\t   Hooks.onErrorDropped(d -> assertTrue(d.getMessage(),\n-\t\t\t\t\t\t\t   d.getMessage()\n-\t\t\t\t\t\t\t    .equals(exception().getMessage())));\n+\t\t\t\t\t   Hooks.onErrorDropped(d -> assertThat(d.getMessage()).isEqualTo(exception().getMessage()));", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2ODYyNA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514168624", "bodyText": "nitpick: can be assertThat(e).hasCause(err)", "author": "simonbasle", "createdAt": "2020-10-29T10:53:37Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -682,8 +665,8 @@ public void afterTerminateCallbackErrorAndErrorCallbackError() {\n \t\t\tfail(\"expected thrown exception\");\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tassertSame(err, e.getCause());\n-\t\t\tassertEquals(0, err2.getSuppressed().length);\n+\t\t\tassertThat(e.getCause()).isSameAs(err);", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2OTA0OQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514169049", "bodyText": "all these can use hasCause(...) and hasSuppressedException(...)", "author": "simonbasle", "createdAt": "2020-10-29T10:54:26Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -710,13 +693,13 @@ public void afterTerminateCallbackErrorAndErrorCallbackError2() {\n \t\t\tfail(\"expected thrown exception\");\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tassertSame(afterTerminate, e.getCause());\n+\t\t\tassertThat(e.getCause()).isSameAs(afterTerminate);", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4NDI1NA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514184254", "bodyText": "should be isGreaterThanOrEqualTo", "author": "simonbasle", "createdAt": "2020-10-29T11:21:59Z", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -562,7 +561,7 @@ public void analyticsTest() throws Exception {\n \t\t}\n \t\tsource.onComplete();\n \n-\t\tAssert.assertTrue(result.block(Duration.ofSeconds(5)) >= avgTime * 0.6);\n+\t\tassertThat(result.block(Duration.ofSeconds(5))).isGreaterThan((long)(avgTime * 0.6));", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4NDgyOA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514184828", "bodyText": "invert expected and asserted values", "author": "simonbasle", "createdAt": "2020-10-29T11:23:07Z", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -1099,7 +1097,7 @@ public void shouldCorrectlyDispatchBatchedTimeout() throws InterruptedException\n \t\t\tthrow new RuntimeException(latch.getCount()+\"\");\n \t\t}\n \t\telse {\n-\t\t\tassertEquals(\"Must have correct latch number : \" + latch.getCount(), latch.getCount(), 0);\n+\t\t\tassertThat(0).as(\"Must have correct latch number : \" + latch.getCount()).isEqualTo(latch.getCount());", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4NjIxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514186215", "bodyText": "could assert before + 20_000_000 isGreaterThan(after)", "author": "simonbasle", "createdAt": "2020-10-29T11:25:48Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/SingleSchedulerTest.java", "diffHunk": "@@ -113,14 +114,14 @@ public void lotsOfTasks() throws Exception {\n     \t            w.schedule(r);\n     \t        }\n     \t        \n-    \t        Assert.assertTrue(cdl.await(5, TimeUnit.SECONDS));\n+    \t        assertThat(cdl.await(5, TimeUnit.SECONDS)).isTrue();\n \n     \t        System.gc();\n     \t        Thread.sleep(200);\n \n                 long after = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n \n-    \t        Assert.assertTrue(String.format(\"%,d -> %,d\", before, after), before + 20_000_000 > after);\n+    \t        assertThat(before + 20_000_000 > after).as(format(\"%,d -> %,d\", before, after)).isTrue();", "originalCommit": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MTg1Mw==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514191853", "bodyText": "missing the values for the placeholders", "author": "simonbasle", "createdAt": "2020-10-29T11:36:41Z", "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -217,7 +217,7 @@ public void onComplete() {\n \t\tlatch.await(8, TimeUnit.SECONDS);\n \n \t\tlong count = latch.getCount();\n-\t\tassertThat(latch.getCount() == 0).as(\"Count > 0 : \" + count + \"  , Running on \" + DEFAULT_POOL_SIZE + \" CPU\").isTrue();\n+\t\tassertThat(latch.getCount()).as(\"Count > 0 : %d, Running on %s CPU\").isEqualTo(0);", "originalCommit": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MjA0Mg==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514192042", "bodyText": "missing the values for the placeholders", "author": "simonbasle", "createdAt": "2020-10-29T11:37:05Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxBufferPredicateTest.java", "diffHunk": "@@ -1186,7 +1186,7 @@ public void discardRaceWithOnNext_bufferWhileWithNoMatch() {\n \t\t\tAssertions.assertThat(value2).as(\"trigger value not discarded\").hasValue(-2);\n \n \t\t\tAssertions.assertThat(received.get() + (value1.get() + 1))\n-\t\t\t\t\t.as(\"received \" + received.get() + \", val1 state \" + value1.get())\n+\t\t\t\t\t.as(\"received %d, val1 state %d\")", "originalCommit": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQzOQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514193439", "bodyText": "wondering about the removal of s here. can we make sure the message displays the toString of  s anyway?", "author": "simonbasle", "createdAt": "2020-10-29T11:39:45Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "diffHunk": "@@ -493,7 +493,7 @@ public void syncFusionAvailable() {\n \t\t    .subscribe(ts);\n \n \t\tSubscription s = ts.upstream();\n-\t\tassertThat(s).as(\"Non-fuseable upstream: \" + s).isInstanceOf(QueueSubscription.class);\n+\t\tassertThat(s).as(\"Non-fuseable upstream\").isInstanceOf(QueueSubscription.class);", "originalCommit": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMzUwOQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514233509", "bodyText": "It does, but there is actually another problem: assertJ tries to be smart when printing s and tries to call iterator() on it. And so we get\nAlthough QueueSubscription extends Queue it is purely internal and only guarantees support for poll/clear/size/isEmpty. Instances shouldn't be used/exposed as Queue outside of Reactor operators.\n\nwhich is a design problem in the first place IMHO (Liskov substitution principle violation)", "author": "ericbottard", "createdAt": "2020-10-29T12:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI1MzE0OA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514253148", "bodyText": "withFailMessage should fix that I think", "author": "simonbasle", "createdAt": "2020-10-29T13:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Mzg3NA==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514193874", "bodyText": "missing the values for the placeholders", "author": "simonbasle", "createdAt": "2020-10-29T11:40:38Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxSubscribeOnValueTest.java", "diffHunk": "@@ -54,7 +54,7 @@ public void testSubscribeOnValueFusion() {\n \t\tint minExec = 2;\n \n \t\tfor (Integer counted : execs.values()) {\n-\t\t\tassertThat(counted).as(\"Thread used less than \" + minExec + \" \" + \"times\").isGreaterThanOrEqualTo(minExec);\n+\t\t\tassertThat(counted).as(\"Thread used less than %d times\").isGreaterThanOrEqualTo(minExec);", "originalCommit": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5NDUxNQ==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514194515", "bodyText": "missing the values for the placeholders", "author": "simonbasle", "createdAt": "2020-10-29T11:41:54Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -484,7 +484,7 @@ public void lifoEvictionNoThreadRegrowth() throws InterruptedException {\n \t\t\t\t\t.withFailMessage(\"worker thread count after shutdown is not zero. threads: %s\", Thread.getAllStackTraces().keySet())\n \t\t\t\t\t.isNotPositive();\n \t\t\tassertThat(dumpThreadNames())\n-\t\t\t\t\t.as(\"current evictor \" + newEvictor + \" shutdown\")\n+\t\t\t\t\t.as(\"current evictor %s shutdown\")", "originalCommit": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5NzQ3Nw==", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514197477", "bodyText": "same as in previous file with the removal of s from message", "author": "simonbasle", "createdAt": "2020-10-29T11:47:35Z", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -716,7 +716,7 @@ public void syncFusionAvailable() {\n \t\t    .subscribe(ts);\n \n \t\tSubscription s = ts.upstream();\n-\t\tassertThat(s instanceof QueueSubscription).as(\"Non-fuseable upstream: \" + s).isTrue();\n+\t\tassertThat(s).as(\"Non-fuseable upstream\").isInstanceOf(QueueSubscription.class);", "originalCommit": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b6fa3266b8864da0fa410e059b73d4a8aeceaa5e", "url": "https://github.com/reactor/reactor-core/commit/b6fa3266b8864da0fa410e059b73d4a8aeceaa5e", "message": "Replace instanceof.isTrue() to isInstanceOf()\n\nAlso fix QueueSubscription string representation", "committedDate": "2020-10-29T13:48:12Z", "type": "forcePushed"}, {"oid": "c1767fd63aaeabf0145a323d6b3350dce82ecc71", "url": "https://github.com/reactor/reactor-core/commit/c1767fd63aaeabf0145a323d6b3350dce82ecc71", "message": "fix #2442 Migrate all assertions to assert4j, remove junit4\n\nReviewed-in: #2453", "committedDate": "2020-10-29T13:52:24Z", "type": "commit"}, {"oid": "c1767fd63aaeabf0145a323d6b3350dce82ecc71", "url": "https://github.com/reactor/reactor-core/commit/c1767fd63aaeabf0145a323d6b3350dce82ecc71", "message": "fix #2442 Migrate all assertions to assert4j, remove junit4\n\nReviewed-in: #2453", "committedDate": "2020-10-29T13:52:24Z", "type": "forcePushed"}]}