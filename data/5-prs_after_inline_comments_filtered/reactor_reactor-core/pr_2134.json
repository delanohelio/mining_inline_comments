{"pr_number": 2134, "pr_title": "Fix onDiscard leaks in fused operators with queue", "pr_createdAt": "2020-04-23T22:05:25Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2134", "timeline": [{"oid": "e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "url": "https://github.com/reactor/reactor-core/commit/e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "message": "fixes leaks on the fused operators with queue\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T07:52:08Z", "type": "commit"}, {"oid": "e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "url": "https://github.com/reactor/reactor-core/commit/e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "message": "fixes leaks on the fused operators with queue\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T07:52:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MjYxMA==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414372610", "bodyText": "formatting: there shouldn't be spaces in this file if you use the official Reactor intellij format", "author": "simonbasle", "createdAt": "2020-04-24T07:55:11Z", "path": "reactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java", "diffHunk": "@@ -45,24 +45,50 @@\n @RunWith(Parameterized.class)\n public class OnDiscardShouldNotLeakTest {\n \n-\t//add DiscardScenarios here to test more operators\n-\tprivate static DiscardScenario[] SCENARIOS = new DiscardScenario[] {\n-\t\t\tDiscardScenario.allFluxSourceArray(\"merge\", 4, Flux::merge),\n-\t\t\tDiscardScenario.fluxSource(\"onBackpressureBuffer\", 1, Flux::onBackpressureBuffer),\n-\t\t\tDiscardScenario.rawSource(\"flatMapInner\", 1, raw -> Flux.just(1).flatMap(f -> raw)),\n-\t\t\tDiscardScenario.fluxSource(\"flatMap\", 1, main -> main.flatMap(f -> Mono.just(f).hide().flux())),\n-\t\t\tDiscardScenario.fluxSource(\"flatMapIterable\", 1, f -> f.flatMapIterable(Arrays::asList)),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnDelayErrors\", 1, f -> f.publishOn(Schedulers.immediate())),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnImmediateErrors\", 1, f -> f.publishOn(Schedulers.immediate(), false, Queues.SMALL_BUFFER_SIZE)),\n-\t\t\tDiscardScenario.fluxSource(\"unicastProcessor\", 1, f -> f.subscribeWith(UnicastProcessor.create()))\n-\t};\n-\n-\tprivate static boolean[][] CONDITIONAL_AND_FUSED = new boolean[][] {\n-\t\t\t{ false, false },\n-\t\t\t{ true, false },\n-\t\t\t{ false, true },\n-\t\t\t{ true, true }\n-\t};\n+    //add DiscardScenarios here to test more operators", "originalCommit": "e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MzMwOA==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414373308", "bodyText": "\ud83d\ude43fixed", "author": "OlegDokuka", "createdAt": "2020-04-24T07:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MjYxMA=="}], "type": "inlineReview"}, {"oid": "d06eda341294d4e0b959284ed72c453c59a1bee1", "url": "https://github.com/reactor/reactor-core/commit/d06eda341294d4e0b959284ed72c453c59a1bee1", "message": "adding space\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T07:56:31Z", "type": "commit"}, {"oid": "8d2c9b7bf84dfefb2f889d4296c3a7049a9741b1", "url": "https://github.com/reactor/reactor-core/commit/8d2c9b7bf84dfefb2f889d4296c3a7049a9741b1", "message": "fixes to use common method which protects from NPE\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T08:05:27Z", "type": "commit"}, {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c", "url": "https://github.com/reactor/reactor-core/commit/21ea73e22f70520f2b03da0176ae38aac419321c", "message": "eliminates synchronization if favor of non-blocking guard\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T08:49:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyODc1OQ==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414528759", "bodyText": "nitpick: can you rename the variable to at least stick to the convention that local copies in drain loops are named after the initial of their corresponding field? it. w becomes dg", "author": "simonbasle", "createdAt": "2020-04-24T12:14:17Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBuffer.java", "diffHunk": "@@ -349,7 +364,29 @@ public boolean isEmpty() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\t\t\t// use guard on the queue instance as the best way to ensure there is no racing on draining\n+\t\t\t// the call to this method must be done only during the ASYNC fusion so all the callers will be waiting\n+\t\t\t// this should not ber performance costly with the assumption the cancel is rare operation\n+\t\t\tif (DISCARD_GUARD.getAndIncrement(this) != 0) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tint missed = 1;\n+\n+\t\t\tfor (;;) {\n+\t\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\n+\t\t\t\tint w = discardGuard;", "originalCommit": "21ea73e22f70520f2b03da0176ae38aac419321c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDg2MQ==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414530861", "bodyText": "applies to all occurrences below as well", "author": "simonbasle", "createdAt": "2020-04-24T12:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyODc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNzc3NA==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414537774", "bodyText": "fixed", "author": "OlegDokuka", "createdAt": "2020-04-24T12:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyODc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTg0Ng==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414529846", "bodyText": "typo not ber -> not be", "author": "simonbasle", "createdAt": "2020-04-24T12:16:05Z", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBuffer.java", "diffHunk": "@@ -349,7 +364,29 @@ public boolean isEmpty() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\t\t\t// use guard on the queue instance as the best way to ensure there is no racing on draining\n+\t\t\t// the call to this method must be done only during the ASYNC fusion so all the callers will be waiting\n+\t\t\t// this should not ber performance costly with the assumption the cancel is rare operation", "originalCommit": "21ea73e22f70520f2b03da0176ae38aac419321c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDc5OQ==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414530799", "bodyText": "applies to all occurrences below as well", "author": "simonbasle", "createdAt": "2020-04-24T12:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNzc0Nw==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414537747", "bodyText": "fixed", "author": "OlegDokuka", "createdAt": "2020-04-24T12:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDYyOQ==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414530629", "bodyText": "still whitespace formatting issue", "author": "simonbasle", "createdAt": "2020-04-24T12:17:23Z", "path": "reactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java", "diffHunk": "@@ -45,24 +45,50 @@\n @RunWith(Parameterized.class)\n public class OnDiscardShouldNotLeakTest {\n \n-\t//add DiscardScenarios here to test more operators\n-\tprivate static DiscardScenario[] SCENARIOS = new DiscardScenario[] {\n-\t\t\tDiscardScenario.allFluxSourceArray(\"merge\", 4, Flux::merge),\n-\t\t\tDiscardScenario.fluxSource(\"onBackpressureBuffer\", 1, Flux::onBackpressureBuffer),\n-\t\t\tDiscardScenario.rawSource(\"flatMapInner\", 1, raw -> Flux.just(1).flatMap(f -> raw)),\n-\t\t\tDiscardScenario.fluxSource(\"flatMap\", 1, main -> main.flatMap(f -> Mono.just(f).hide().flux())),\n-\t\t\tDiscardScenario.fluxSource(\"flatMapIterable\", 1, f -> f.flatMapIterable(Arrays::asList)),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnDelayErrors\", 1, f -> f.publishOn(Schedulers.immediate())),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnImmediateErrors\", 1, f -> f.publishOn(Schedulers.immediate(), false, Queues.SMALL_BUFFER_SIZE)),\n-\t\t\tDiscardScenario.fluxSource(\"unicastProcessor\", 1, f -> f.subscribeWith(UnicastProcessor.create()))\n-\t};\n-\n-\tprivate static boolean[][] CONDITIONAL_AND_FUSED = new boolean[][] {\n-\t\t\t{ false, false },\n-\t\t\t{ true, false },\n-\t\t\t{ false, true },\n-\t\t\t{ true, true }\n-\t};\n+    // add DiscardScenarios here to test more operators", "originalCommit": "21ea73e22f70520f2b03da0176ae38aac419321c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNzcxMg==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414537712", "bodyText": "fixed", "author": "OlegDokuka", "createdAt": "2020-04-24T12:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDYyOQ=="}], "type": "inlineReview"}, {"oid": "20bf3e64415848d3ebe07039449693e58052d302", "url": "https://github.com/reactor/reactor-core/commit/20bf3e64415848d3ebe07039449693e58052d302", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T12:30:50Z", "type": "commit"}, {"oid": "20bf3e64415848d3ebe07039449693e58052d302", "url": "https://github.com/reactor/reactor-core/commit/20bf3e64415848d3ebe07039449693e58052d302", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T12:30:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0OTYyNQ==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414549625", "bodyText": "haha nice try, I meant on the whole file \ud83d\ude1b", "author": "simonbasle", "createdAt": "2020-04-24T12:48:49Z", "path": "reactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java", "diffHunk": "@@ -45,7 +45,7 @@\n @RunWith(Parameterized.class)\n public class OnDiscardShouldNotLeakTest {\n \n-    // add DiscardScenarios here to test more operators\n+\t// add DiscardScenarios here to test more operators", "originalCommit": "20bf3e64415848d3ebe07039449693e58052d302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MTI3Mw==", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414561273", "bodyText": "formated the whole file :D", "author": "OlegDokuka", "createdAt": "2020-04-24T13:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0OTYyNQ=="}], "type": "inlineReview"}, {"oid": "7922ce127ce77fdc141559e9ed98a3a82a17d3a2", "url": "https://github.com/reactor/reactor-core/commit/7922ce127ce77fdc141559e9ed98a3a82a17d3a2", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>", "committedDate": "2020-04-24T13:07:11Z", "type": "commit"}, {"oid": "024d08b1fd8b4b62f9a4d032a942b609d65e68a5", "url": "https://github.com/reactor/reactor-core/commit/024d08b1fd8b4b62f9a4d032a942b609d65e68a5", "message": "Adjust polish on top of polish", "committedDate": "2020-04-24T13:54:28Z", "type": "commit"}]}