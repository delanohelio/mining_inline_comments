{"pr_number": 2045, "pr_title": "fix #1973 Resolve a race that prevent decrement of REMAINING_TASK", "pr_createdAt": "2020-02-12T18:08:37Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2045", "timeline": [{"oid": "1fb434f73abb6cd8a10170775a745a0b24c13475", "url": "https://github.com/reactor/reactor-core/commit/1fb434f73abb6cd8a10170775a745a0b24c13475", "message": "fix #1973 Resolve a race that prevent decrement of REMAINING_TASK", "committedDate": "2020-02-12T18:04:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3ODUyMA==", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378778520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);\n          \n          \n            \n            \t\t\t\t1, 2, r -> new Thread(r, \"raceActiveDeferredDirectDispose\"), 3);", "author": "bsideup", "createdAt": "2020-02-13T10:37:35Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);", "originalCommit": "1fb434f73abb6cd8a10170775a745a0b24c13475", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTA2Mw==", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378779063", "bodyText": "schedule always happens before the race starts due to the method ref on dispose. Is it intentionally?", "author": "bsideup", "createdAt": "2020-02-13T10:38:38Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);\n+\n+\t\tBoundedElasticScheduler.ActiveWorker activeWorker =\n+\t\t\t\t(BoundedElasticScheduler.ActiveWorker) boundedElasticScheduler.createWorker();\n+\n+\t\tint maxRounds = 1_000_000;\n+\t\tAtomicInteger incrementWon = new AtomicInteger();\n+\t\tAtomicInteger rejected = new AtomicInteger();\n+\t\tint rounds = 0;\n+\t\twhile(rounds++ < maxRounds) {\n+\t\t\ttry {\n+\t\t\t\tif (rounds % 10 == 0) { //from time to time reverse the race\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tactiveWorker::dispose,\n+\t\t\t\t\t\t\tboundedElasticScheduler.schedule(incrementWon::incrementAndGet)::dispose", "originalCommit": "1fb434f73abb6cd8a10170775a745a0b24c13475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NTc4NQ==", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378965785", "bodyText": "good catch, that was at first glance not that bad but in fact we'd better wrap it in a Runnable. updated!", "author": "simonbasle", "createdAt": "2020-02-13T16:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTA2Mw=="}], "type": "inlineReview"}, {"oid": "3484b889fdac8cc79b7984a89dc186f2a3886b17", "url": "https://github.com/reactor/reactor-core/commit/3484b889fdac8cc79b7984a89dc186f2a3886b17", "message": "fix review issues: race test didn't use runnable", "committedDate": "2020-02-13T16:17:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3OTU5NA==", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378979594", "bodyText": "Missing lambda too", "author": "bsideup", "createdAt": "2020-02-13T16:39:39Z", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r, \"raceActiveDeferredDirectDispose\"), 3);\n+\n+\t\tBoundedElasticScheduler.ActiveWorker activeWorker =\n+\t\t\t\t(BoundedElasticScheduler.ActiveWorker) boundedElasticScheduler.createWorker();\n+\n+\t\tint maxRounds = 1_000_000;\n+\t\tAtomicInteger incrementWon = new AtomicInteger();\n+\t\tAtomicInteger rejected = new AtomicInteger();\n+\t\tint rounds = 0;\n+\t\twhile(rounds++ < maxRounds) {\n+\t\t\ttry {\n+\t\t\t\tif (rounds % 10 == 0) { //from time to time reverse the race\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tactiveWorker::dispose,\n+\t\t\t\t\t\t\t() -> boundedElasticScheduler.schedule(incrementWon::incrementAndGet).dispose()\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tboundedElasticScheduler.schedule(incrementWon::incrementAndGet)::dispose,", "originalCommit": "3484b889fdac8cc79b7984a89dc186f2a3886b17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4ODkzMw==", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378988933", "bodyText": "\ud83e\udd26\u200d\u2642 fixing...", "author": "simonbasle", "createdAt": "2020-02-13T16:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3OTU5NA=="}], "type": "inlineReview"}, {"oid": "0e5ff6fce778d411a8bff4c84239f785fe54fdc7", "url": "https://github.com/reactor/reactor-core/commit/0e5ff6fce778d411a8bff4c84239f785fe54fdc7", "message": "fix second half of the test", "committedDate": "2020-02-13T16:57:14Z", "type": "commit"}]}