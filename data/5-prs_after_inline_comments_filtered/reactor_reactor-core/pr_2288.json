{"pr_number": 2288, "pr_title": "Adapt `ContextTrackingFunctionWrapper` in transformDeferred(BiFunction)", "pr_createdAt": "2020-07-24T11:35:10Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2288", "timeline": [{"oid": "5c9895cec2e37566e34a2b0b1bd397571223689e", "url": "https://github.com/reactor/reactor-core/commit/5c9895cec2e37566e34a2b0b1bd397571223689e", "message": "Reuse `ContextTrackingFunctionWrapper` in transformDeferred(BiFunction)", "committedDate": "2020-07-24T11:34:37Z", "type": "commit"}, {"oid": "5c9895cec2e37566e34a2b0b1bd397571223689e", "url": "https://github.com/reactor/reactor-core/commit/5c9895cec2e37566e34a2b0b1bd397571223689e", "message": "Reuse `ContextTrackingFunctionWrapper` in transformDeferred(BiFunction)", "committedDate": "2020-07-24T11:34:37Z", "type": "forcePushed"}, {"oid": "f2bf494e4e747e73bcb008348d9093989bd7cde1", "url": "https://github.com/reactor/reactor-core/commit/f2bf494e4e747e73bcb008348d9093989bd7cde1", "message": "avoid double `onAssembly`, remove `toString` override", "committedDate": "2020-07-24T12:59:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNjcyMQ==", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460036721", "bodyText": "the reactor-tools mention is outdated and should be removed", "author": "simonbasle", "createdAt": "2020-07-24T12:59:55Z", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.", "originalCommit": "5c9895cec2e37566e34a2b0b1bd397571223689e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzkyOQ==", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460037929", "bodyText": "NB: while reviewing the implementation and trying to apply a similar pattern for the BiFunction, I found the andThen a bit harder to follow vs explicit composition by splitting in multiple steps with intermediate variables (that would probably be optimized away by the compiler anyway?)", "author": "simonbasle", "createdAt": "2020-07-24T13:02:19Z", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.\n+ *\n+ */\n+class ContextTrackingFunctionWrapper<T, V> implements Function<CorePublisher<T>, CorePublisher<V>> {\n+\n+\tstatic final String CONTEXT_MARKER_PREFIX = \"reactor.core.context.marker.\";\n+\n+\tfinal Function<? super Publisher<T>, ? extends Publisher<V>> transformer;\n+\n+\tContextTrackingFunctionWrapper(Function<? super Publisher<T>, ? extends Publisher<V>> transformer) {\n+\t\tthis.transformer = transformer;\n+\t}\n+\n+\t@Override\n+\tpublic CorePublisher<V> apply(CorePublisher<T> self) {\n+\t\tString key = CONTEXT_MARKER_PREFIX + System.identityHashCode(self);\n+\n+\t\tPublisher<V> newSource = Operators.<T, T>liftPublisher((p, actual) -> {\n+\t\t\tContext ctx = actual.currentContext();\n+\n+\t\t\tif (!ctx.hasKey(key)) {\n+\t\t\t\tthrow new IllegalStateException(\"Context loss after applying \" + transformer);\n+\t\t\t}\n+\n+\t\t\tContext newContext = ctx.delete(key);\n+\t\t\treturn new ContextStartSubscriber<>(actual, newContext);\n+\t\t}).andThen(transformer).apply(self);", "originalCommit": "5c9895cec2e37566e34a2b0b1bd397571223689e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzOTUwNA==", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460039504", "bodyText": "so what do you think about splitting into more explicit steps?", "author": "simonbasle", "createdAt": "2020-07-24T13:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODcwOA==", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460038708", "bodyText": "\ud83d\udc4d", "author": "simonbasle", "createdAt": "2020-07-24T13:03:59Z", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.\n+ *\n+ */\n+class ContextTrackingFunctionWrapper<T, V> implements Function<CorePublisher<T>, CorePublisher<V>> {\n+\n+\tstatic final String CONTEXT_MARKER_PREFIX = \"reactor.core.context.marker.\";\n+\n+\tfinal Function<? super Publisher<T>, ? extends Publisher<V>> transformer;\n+\n+\tfinal String marker;\n+\n+\tContextTrackingFunctionWrapper(Function<? super Publisher<T>, ? extends Publisher<V>> transformer) {\n+\t\tthis(transformer, transformer.toString());\n+\t}\n+\n+\tContextTrackingFunctionWrapper(", "originalCommit": "f2bf494e4e747e73bcb008348d9093989bd7cde1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8650eecf6fa1f721a8be2da2966d884688ff20d0", "url": "https://github.com/reactor/reactor-core/commit/8650eecf6fa1f721a8be2da2966d884688ff20d0", "message": "fix Javadoc, simplify code", "committedDate": "2020-07-24T13:21:30Z", "type": "commit"}]}