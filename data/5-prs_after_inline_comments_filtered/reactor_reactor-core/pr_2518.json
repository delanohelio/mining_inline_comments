{"pr_number": 2518, "pr_title": "Say from which operator the asserted Context was taken", "pr_createdAt": "2020-11-30T14:35:10Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2518", "timeline": [{"oid": "405cca0b130dee5a1f2974b67f564b2c3df9b73e", "url": "https://github.com/reactor/reactor-core/commit/405cca0b130dee5a1f2974b67f564b2c3df9b73e", "message": "Add captured operator to the Context assertion message", "committedDate": "2020-11-30T14:34:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0Nzk3MQ==", "url": "https://github.com/reactor/reactor-core/pull/2518#discussion_r532647971", "bodyText": "would it make sense / demonstrate additional value to make the transformation / tested chain the same in both capturedOperator and capturedOperatorWithDebug?", "author": "simonbasle", "createdAt": "2020-11-30T14:44:05Z", "path": "reactor-test/src/test/java/reactor/test/DefaultContextExpectationsTest.java", "diffHunk": "@@ -292,7 +321,27 @@ public void notMatchesWithDescriptionAndScenarioName() {\n \t\t\t\t\t\tbase.matches(Objects::isNull, \"someDescription\")\n \t\t\t\t\t\t    .then()\n \t\t\t\t\t\t    .expectNextCount(10)::verifyComplete)\n-\t\t\t\t.withMessage(\"[scenario] Context Context1{foo=bar} doesn't match predicate someDescription\");\n+\t\t\t\t.withMessageStartingWith(\"\" +\n+\t\t\t\t\t\t\"[scenario] Context doesn't match predicate someDescription\\n\" +\n+\t\t\t\t\t\t\"Context: Context1{foo=bar}\"\n+\t\t\t\t);\n+\t}\n+\n+\t@Test\n+\tpublic void capturedOperator() {\n+\t\tassertContextExpectationFails(\n+\t\t\t\ts -> s.doOnEach(__ -> {}),", "originalCommit": "405cca0b130dee5a1f2974b67f564b2c3df9b73e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "236bf3bf49b3f4dc78c31636ee8190e789ed729f", "url": "https://github.com/reactor/reactor-core/commit/236bf3bf49b3f4dc78c31636ee8190e789ed729f", "message": "make \"context at\" consistent with the debug mode", "committedDate": "2020-12-03T14:34:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNzIxNw==", "url": "https://github.com/reactor/reactor-core/pull/2518#discussion_r535317217", "bodyText": "wait, do we still need that? now the subscriber could be null and none of the Consumer<CoreSubscriber> have been amended to fix that :(", "author": "simonbasle", "createdAt": "2020-12-03T15:12:04Z", "path": "reactor-test/src/main/java/reactor/test/DefaultStepVerifierBuilder.java", "diffHunk": "@@ -2525,7 +2525,7 @@ static String formatFusionMode(int m) {\n \t\t\t\tScannable lowest = Scannable.from(s);\n \n \t\t\t\t//attempt to go back to the leftmost parent to check the Context from its perspective\n-\t\t\t\tContext c = Flux.<Scannable>\n+\t\t\t\tCoreSubscriber<?> subscriber = Flux.<Scannable>", "originalCommit": "236bf3bf49b3f4dc78c31636ee8190e789ed729f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxODYyMg==", "url": "https://github.com/reactor/reactor-core/pull/2518#discussion_r535318622", "bodyText": "We do. Also, there is a check that verifies that the context is present before running any of the context assertions", "author": "bsideup", "createdAt": "2020-12-03T15:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyMDI4Nw==", "url": "https://github.com/reactor/reactor-core/pull/2518#discussion_r535320287", "bodyText": "yeah just re-checked the code and tests, this should be equivalent, as previously this resulting in a Context variable that was also null. My bad.", "author": "simonbasle", "createdAt": "2020-12-03T15:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMxNzIxNw=="}], "type": "inlineReview"}]}