{"pr_number": 2296, "pr_title": "fix #1053 MonoProcessor rework", "pr_createdAt": "2020-08-01T00:19:58Z", "pr_url": "https://github.com/reactor/reactor-core/pull/2296", "timeline": [{"oid": "3543e8878618d0aed594ace28fae7e82ae14746b", "url": "https://github.com/reactor/reactor-core/commit/3543e8878618d0aed594ace28fae7e82ae14746b", "message": "Split MonoProcessor to void and next implementations\nadd consistent Mono.shareNext() and Mono.share()", "committedDate": "2020-08-01T00:24:56Z", "type": "forcePushed"}, {"oid": "3e74e376e574aa5bb0c298619f825b073339afc1", "url": "https://github.com/reactor/reactor-core/commit/3e74e376e574aa5bb0c298619f825b073339afc1", "message": "Test fixes and doc tweak", "committedDate": "2020-08-01T14:21:53Z", "type": "forcePushed"}, {"oid": "0bf3a50174ead6785b2fc1406f4edf6738455ec7", "url": "https://github.com/reactor/reactor-core/commit/0bf3a50174ead6785b2fc1406f4edf6738455ec7", "message": "Rework PR to avoid breaking change\n\nThe MonoProcessor is reintroduced as deprecated public API.\nCurrent PR's \"MonoProcessor\" is turned into a package\nprivate AbstractMonoProcessor.\n\nThe nice thing about package-private classes with public\nmethods is that extending that class with a public class\nmakes the methods reachable. That's what we do with\nMonoProcessor (which is \"publicizing\" NextProcessor).", "committedDate": "2020-08-04T14:15:53Z", "type": "forcePushed"}, {"oid": "f28187f80ccd2d0a699a0742590ff92e4e22edac", "url": "https://github.com/reactor/reactor-core/commit/f28187f80ccd2d0a699a0742590ff92e4e22edac", "message": "Rework PR to avoid breaking change\n\nThe MonoProcessor is reintroduced as deprecated public API.\nCurrent PR's \"MonoProcessor\" is turned into a package\nprivate AbstractMonoProcessor.\n\nThe nice thing about package-private classes with public\nmethods is that extending that class with a public class\nmakes the methods reachable. That's what we do with\nMonoProcessor (which is \"publicizing\" NextProcessor).\n\nAlso takes the latest processor changes (Sinks.One|Empty) into account.", "committedDate": "2020-08-04T15:17:36Z", "type": "forcePushed"}, {"oid": "99ee19bb192ec9fc0182b4447249729e15bec5bf", "url": "https://github.com/reactor/reactor-core/commit/99ee19bb192ec9fc0182b4447249729e15bec5bf", "message": "Rework PR to avoid breaking change\n\nThe MonoProcessor is reintroduced as deprecated public API.\nCurrent PR's \"MonoProcessor\" is turned into a package\nprivate AbstractMonoProcessor.\n\nThe nice thing about package-private classes with public\nmethods is that extending that class with a public class\nmakes the methods reachable. That's what we do with\nMonoProcessor (which is \"publicizing\" NextProcessor).\n\nAlso takes the latest processor changes (Sinks.One|Empty) into account.", "committedDate": "2020-08-04T15:42:40Z", "type": "forcePushed"}, {"oid": "28158614ba0b3605a6e2618f1e9fb5a57e108baa", "url": "https://github.com/reactor/reactor-core/commit/28158614ba0b3605a6e2618f1e9fb5a57e108baa", "message": "Remove most usage of MonoProcessor in tests", "committedDate": "2020-08-04T17:07:46Z", "type": "forcePushed"}, {"oid": "7cdf1e85f65f3771311174cc80c050064b2e8750", "url": "https://github.com/reactor/reactor-core/commit/7cdf1e85f65f3771311174cc80c050064b2e8750", "message": "Remove most usage of MonoProcessor in tests", "committedDate": "2020-08-05T08:48:11Z", "type": "forcePushed"}, {"oid": "be77bbe2d0dffa426f704b89965c669c53cc76a0", "url": "https://github.com/reactor/reactor-core/commit/be77bbe2d0dffa426f704b89965c669c53cc76a0", "message": "Remove most usage of MonoProcessor in tests", "committedDate": "2020-08-05T10:32:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2NDk4MQ==", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r466464981", "bodyText": "Could we add a TODO and open an issue to not forget about this?", "author": "aneveu", "createdAt": "2020-08-06T14:44:01Z", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6737,7 +6737,8 @@ public int getPrefetch() {\n \t * @return a new {@link Mono}\n \t */\n \tpublic final Mono<T> publishNext() {\n-\t\treturn Mono.onAssembly(new MonoProcessor<>(this));\n+\t\t//Should add a ConnectableMono to align with #publish()", "originalCommit": "be77bbe2d0dffa426f704b89965c669c53cc76a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MDM1MA==", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r467070350", "bodyText": "I think it will be hard to repurpose this method for a ConnectableMono if we introduce one. Since we now have shareNext(), I'd say that we deprecate this method entirely. Later on, if we introduce Mono.publish() returning a ConnectableMono, we can advise people to use Flux.next().publish() instead. wdyt @smaldini ?", "author": "simonbasle", "createdAt": "2020-08-07T14:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2NDk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5Nzg3OA==", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r466897878", "bodyText": "Sink instead of Upstream into the error message", "author": "aneveu", "createdAt": "2020-08-07T08:26:38Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkOneMonoProcessor.java", "diffHunk": "@@ -28,37 +28,38 @@\n /**\n  * @author Stephane Maldini\n  */\n-final class DelegateSinkMonoProcessor<IN> extends AbstractMonoProcessor<IN> {\n+final class DelegateSinkOneMonoProcessor<IN> extends MonoProcessor<IN> {\n \n \tfinal Mono<IN>      downstream;\n-\tfinal Sinks.One<IN> upstream;\n+\tfinal Sinks.One<IN> sink;\n \n-\tDelegateSinkMonoProcessor(Mono<IN> downstream, Sinks.One<IN> upstream) {\n-\t\tthis.downstream = Objects.requireNonNull(downstream, \"Downstream must not be null\");\n-\t\tthis.upstream = Objects.requireNonNull(upstream, \"Upstream must not be null\");\n+\tDelegateSinkOneMonoProcessor(Sinks.One<IN> sink) {\n+\t\tthis.sink = Objects.requireNonNull(sink, \"Upstream must not be null\");", "originalCommit": "6367b06c672c7fe04d78d42c98cbc0e81a8c1327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5ODEzMA==", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r466898130", "bodyText": "Sink instead of Upstream into the error message", "author": "aneveu", "createdAt": "2020-08-07T08:27:10Z", "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -32,10 +32,9 @@\n \tfinal Flux<IN>       flux;\n \tfinal Sinks.Many<IN> sink;\n \n-\tDelegateSinkFluxProcessor(Flux<IN> flux,\n-\t\t\t\t\t\t\t  Sinks.Many<IN> sink) {\n-\t\tthis.flux = Objects.requireNonNull(flux, \"Downstream must not be null\");\n+\tDelegateSinkFluxProcessor(Sinks.Many<IN> sink) {\n \t\tthis.sink = Objects.requireNonNull(sink, \"Upstream must not be null\");", "originalCommit": "6367b06c672c7fe04d78d42c98cbc0e81a8c1327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "38231e1fe1d6948fbf5928bacb0a4e5d2185b096", "url": "https://github.com/reactor/reactor-core/commit/38231e1fe1d6948fbf5928bacb0a4e5d2185b096", "message": "polish per review, deprecate Flux.publishNext", "committedDate": "2020-08-07T14:24:33Z", "type": "forcePushed"}, {"oid": "87b3db91ac0c0d2e17b2f77f436597bf88e4fb92", "url": "https://github.com/reactor/reactor-core/commit/87b3db91ac0c0d2e17b2f77f436597bf88e4fb92", "message": "fix #1053 Make MonoProcessor abstract and add two implementations\n\n - Make `MonoProcessor` an abstract class much like FluxProcessor\n - add `NextProcessor` as the equivalent of former MonoProcessor\n - add `VoidProcessor` as a low-overhead way to get a complete/error\n only processor\n - add `Flux.shareNext()` as a better named alternative to `publishNext`\n which is deprecated\n - add `Mono.share()`", "committedDate": "2020-08-07T14:44:28Z", "type": "commit"}, {"oid": "17752253fefe7b139d0dba3d9d0133555da25429", "url": "https://github.com/reactor/reactor-core/commit/17752253fefe7b139d0dba3d9d0133555da25429", "message": "[build] Add a 3rd way to add japicmp exclusions\n\nThis commit uses the richReport and ViolationRule approach to add\na third type of exclusions. Namely, we don't want to entirely exclude\nviolations from MonoProcessor, just the fact that the class is now\nabstract.", "committedDate": "2020-08-07T14:45:12Z", "type": "commit"}, {"oid": "17752253fefe7b139d0dba3d9d0133555da25429", "url": "https://github.com/reactor/reactor-core/commit/17752253fefe7b139d0dba3d9d0133555da25429", "message": "[build] Add a 3rd way to add japicmp exclusions\n\nThis commit uses the richReport and ViolationRule approach to add\na third type of exclusions. Namely, we don't want to entirely exclude\nviolations from MonoProcessor, just the fact that the class is now\nabstract.", "committedDate": "2020-08-07T14:45:12Z", "type": "forcePushed"}]}