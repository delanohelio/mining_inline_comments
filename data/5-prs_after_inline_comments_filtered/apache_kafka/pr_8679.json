{"pr_number": 8679, "pr_title": "KAFKA-10003: Mark KStream.through() as deprecated", "pr_createdAt": "2020-05-17T02:49:10Z", "pr_url": "https://github.com/apache/kafka/pull/8679", "timeline": [{"oid": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "url": "https://github.com/apache/kafka/commit/29eda14b76987c32411cec2aaaed9ca1f34b5e97", "message": "KAFKA-10003: Mark KStream.through() as deprecated\n - part of KIP-221", "committedDate": "2020-05-17T02:46:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQwOA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211408", "bodyText": "Not sure if this update is necessary. This method is deprecated itself.", "author": "mjsax", "createdAt": "2020-05-17T02:57:38Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1082,7 +1081,7 @@ public void cleanUp() {\n      * This will use the default Kafka Streams partitioner to locate the partition.\n      * If a {@link StreamPartitioner custom partitioner} has been\n      * {@link ProducerConfig#PARTITIONER_CLASS_CONFIG configured} via {@link StreamsConfig} or\n-     * {@link KStream#through(String, Produced)}, or if the original {@link KTable}'s input\n+     * {@link KStream#repartition(Repartitioned)}, or if the original {@link KTable}'s input", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzOTA4MA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427539080", "bodyText": "Might as well make this update, since we may remove the methods at different times.", "author": "vvcephei", "createdAt": "2020-05-19T19:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQyNQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211425", "bodyText": "Not 100% sure if we should remove this now, or when we remove through()?", "author": "mjsax", "createdAt": "2020-05-17T02:58:08Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -846,16 +847,13 @@\n      * from the auto-generated topic using default serializers, deserializers, and producer's {@link DefaultPartitioner}.\n      * The number of partitions is determined based on the upstream topics partition numbers.\n      * <p>\n-     * This operation is similar to {@link #through(String)}, however, Kafka Streams manages the used topic automatically.", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzM3Ng==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426337376", "bodyText": "I'd agree with removing it. I guess if you want to preserve it in some fashion, you could add the opposite statement to the through() documentation.", "author": "vvcephei", "createdAt": "2020-05-18T02:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTQ1Nw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211457", "bodyText": "Just simplifying this one.", "author": "mjsax", "createdAt": "2020-05-17T02:59:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -925,9 +920,8 @@ void to(final TopicNameExtractor<K, V> topicExtractor,\n      * Convert this stream to a {@link KTable}.\n      * <p>\n      * If a key changing operator was used before this operation (e.g., {@link #selectKey(KeyValueMapper)},\n-     * {@link #map(KeyValueMapper)}, {@link #flatMap(KeyValueMapper)}, or\n-     * {@link #transform(TransformerSupplier, String...)}), and no data redistribution happened afterwards (e.g., via\n-     * {@link #through(String)}) an internal repartitioning topic will be created in Kafka.\n+     * {@link #map(KeyValueMapper)}, {@link #flatMap(KeyValueMapper)} or\n+     * {@link #transform(TransformerSupplier, String...)}) an internal repartitioning topic will be created in Kafka.", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTUyNg==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211526", "bodyText": "Must be public to be visible in Scala", "author": "mjsax", "createdAt": "2020-05-17T03:00:17Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/RepartitionedInternal.java", "diffHunk": "@@ -21,33 +21,33 @@\n import org.apache.kafka.streams.processor.StreamPartitioner;\n import org.apache.kafka.streams.processor.internals.InternalTopicProperties;\n \n-class RepartitionedInternal<K, V> extends Repartitioned<K, V> {\n+public class RepartitionedInternal<K, V> extends Repartitioned<K, V> {", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MjM4OA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427542388", "bodyText": "It's worth noting that it only needs to be visible for the scala tests that verify the scala Repartitioned builder results in a correctly configured object. For the public API, we only convert a scala Repartitioned to a java Repartitioned.", "author": "vvcephei", "createdAt": "2020-05-19T19:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTU1NQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211555", "bodyText": "Replicated the test for through() for repartition().", "author": "mjsax", "createdAt": "2020-05-17T03:00:44Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -285,7 +286,28 @@ public void shouldProcessViaThroughTopic() {\n         assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n         assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n     }\n-    \n+\n+    @Test\n+    public void shouldProcessViaRepartitionTopic() {", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzQwMw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427543403", "bodyText": "Thanks!", "author": "vvcephei", "createdAt": "2020-05-19T19:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTYyNA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211624", "bodyText": "We still need to test this, because topics using this pattern are still consider intermediate topics and the --intermediat-topic flag in StreamsResetter is still useful and not changed.", "author": "mjsax", "createdAt": "2020-05-17T03:02:21Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/AbstractResetIntegrationTest.java", "diffHunk": "@@ -484,8 +493,14 @@ private Topology setupTopologyWithIntermediateUserTopic(final String outputTopic\n             .toStream()\n             .to(OUTPUT_TOPIC, Produced.with(Serdes.Long(), Serdes.Long()));\n \n-        input.through(INTERMEDIATE_USER_TOPIC)\n-            .groupByKey()\n+        final KStream<Long, String> stream;\n+        if (useRepartitioned) {\n+            stream = input.repartition();\n+        } else {\n+            input.to(INTERMEDIATE_USER_TOPIC);\n+            stream = builder.stream(INTERMEDIATE_USER_TOPIC);", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDg3OA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427544878", "bodyText": "I'm wondering if we should continue testing with through, to ensure it continues to work. WDYT?", "author": "vvcephei", "createdAt": "2020-05-19T19:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3ODMxMQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427578311", "bodyText": "Well, through() is literally implemented as to() + stream()... But I can revert and add a suppress annotation, too.", "author": "mjsax", "createdAt": "2020-05-19T20:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNzc4OA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427617788", "bodyText": "On re-reading, I realize I misunderstood the situation. I revert my comment \ud83d\ude2c .", "author": "vvcephei", "createdAt": "2020-05-19T21:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTY4NQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211685", "bodyText": "Using to() and steam() is \"simpler\" as we cleanup topics in-between (and thus avoid internal topics).\nWe could of course also use repartition().", "author": "mjsax", "createdAt": "2020-05-17T03:03:47Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java", "diffHunk": "@@ -213,7 +213,8 @@ private void runSimpleCopyTest(final int numberOfRestarts,\n         final KStream<Long, Long> input = builder.stream(inputTopic);\n         KStream<Long, Long> output = input;\n         if (throughTopic != null) {\n-            output = input.through(throughTopic);\n+            input.to(throughTopic);\n+            output = builder.stream(throughTopic);", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTY4OA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211688", "bodyText": "side cleanup", "author": "mjsax", "createdAt": "2020-05-17T03:04:04Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationWithSslTest.java", "diffHunk": "@@ -42,7 +42,7 @@\n \n     private static final String TEST_ID = \"reset-with-ssl-integration-test\";\n \n-    private static Map<String, Object> sslConfig;\n+    private static final Map<String, Object> SSL_CONFIG;", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTY5NA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211694", "bodyText": "replicating test", "author": "mjsax", "createdAt": "2020-05-17T03:04:17Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -588,6 +592,14 @@ public void shouldNotAllowNullTopicOnTo() {\n         assertThat(exception.getMessage(), equalTo(\"topic can't be null\"));\n     }\n \n+    @Test\n+    public void shouldNotAllowNullRepartitionedOnRepartition() {", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTcxOQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211719", "bodyText": "replicating test cases", "author": "mjsax", "createdAt": "2020-05-17T03:04:49Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1393,6 +1409,11 @@ public void shouldPreserveSerdesForOperators() {\n         assertEquals(((AbstractStream) stream1.through(\"topic-3\", Produced.with(mySerde, mySerde))).keySerde(), mySerde);\n         assertEquals(((AbstractStream) stream1.through(\"topic-3\", Produced.with(mySerde, mySerde))).valueSerde(), mySerde);\n \n+        assertEquals(((AbstractStream) stream1.repartition()).keySerde(), consumedInternal.keySerde());\n+        assertEquals(((AbstractStream) stream1.repartition()).valueSerde(), consumedInternal.valueSerde());\n+        assertEquals(((AbstractStream) stream1.repartition(Repartitioned.with(mySerde, mySerde))).keySerde(), mySerde);\n+        assertEquals(((AbstractStream) stream1.repartition(Repartitioned.with(mySerde, mySerde))).valueSerde(), mySerde);", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTczNw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211737", "bodyText": "replicating test", "author": "mjsax", "createdAt": "2020-05-17T03:05:00Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1452,6 +1474,24 @@ public void shouldUseRecordMetadataTimestampExtractorWithThrough() {\n         assertNull(processorTopology.source(\"topic-1\").getTimestampExtractor());\n     }\n \n+    @Test\n+    public void shouldUseRecordMetadataTimestampExtractorWithRepartition() {", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTc2MQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211761", "bodyText": "replicating test", "author": "mjsax", "createdAt": "2020-05-17T03:05:08Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1467,6 +1507,21 @@ public void shouldSendDataThroughTopicUsingProduced() {\n         assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n     }\n \n+    @Test\n+    public void shouldSendDataThroughRepartitionTopicUsingRepartitioned() {", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMTc4Nw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426211787", "bodyText": "As above. Avoid internal topics.", "author": "mjsax", "createdAt": "2020-05-17T03:05:44Z", "path": "streams/src/test/java/org/apache/kafka/streams/tests/EosTestClient.java", "diffHunk": "@@ -132,7 +132,8 @@ private KafkaStreams createKafkaStreams(final Properties props) {\n             .to(\"sum\", Produced.with(stringSerde, longSerde));\n \n         if (withRepartitioning) {\n-            final KStream<String, Integer> repartitionedData = data.through(\"repartition\");\n+            data.to(\"repartition\");\n+            final KStream<String, Integer> repartitionedData = builder.stream(\"repartition\");", "originalCommit": "29eda14b76987c32411cec2aaaed9ca1f34b5e97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ea08b5d04f2a11e2e48ed29c4e08f71320714da", "url": "https://github.com/apache/kafka/commit/5ea08b5d04f2a11e2e48ed29c4e08f71320714da", "message": "Missed some stuff", "committedDate": "2020-05-17T03:44:03Z", "type": "commit"}, {"oid": "7a5e26cd861c2f238ae4d2277c5471be0f886fdf", "url": "https://github.com/apache/kafka/commit/7a5e26cd861c2f238ae4d2277c5471be0f886fdf", "message": "Fix imports", "committedDate": "2020-05-17T03:51:02Z", "type": "commit"}, {"oid": "7f0399526ca6cc65a87a168f6ba96eb5faad905e", "url": "https://github.com/apache/kafka/commit/7f0399526ca6cc65a87a168f6ba96eb5faad905e", "message": "fix", "committedDate": "2020-05-18T19:38:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzE2Nw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r426337167", "bodyText": "It's a little nice for future reference when we also say when it became deprecated, such as \"since 2.6\".", "author": "vvcephei", "createdAt": "2020-05-18T02:03:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -815,9 +815,10 @@\n      *\n      * @param topic the topic name\n      * @return a {@code KStream} that contains the exact same (and potentially repartitioned) records as this {@code KStream}\n-     * @see #repartition()\n-     * @see #repartition(Repartitioned)\n+     * @deprecated used {@link #repartition()} instead", "originalCommit": "7a5e26cd861c2f238ae4d2277c5471be0f886fdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3OTQ3NA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427579474", "bodyText": "Not sure why? If I use 2.6 why do I can if it was deprecated in 2.4 or 2.2 or 2.6? It's deprecated in the version I use now. Why would I care about older versions?", "author": "mjsax", "createdAt": "2020-05-19T20:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMTE3Nw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427621177", "bodyText": "For one thing, it's nice for us, so we can easily tell when it's been deprecated \"long enough\" to remove. I can recall trudging through git history in the past to figure this out.\nFor users, maybe you don't care, but I personally find it nice when my libraries do this for me. It's just good bookkeeping, and it gives me some confidence that the maintainers are doing proper, tidy maintenance.\nIf it provides a \"third party\" supporting opinion, the Scala language designers thought this was important enough to build it in as a separate field of the \"deprecated\" annotation: https://docs.scala-lang.org/tour/annotations.html", "author": "vvcephei", "createdAt": "2020-05-19T21:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNzE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MzI1NQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427543255", "bodyText": "My opinion is that it's generally better not to suppress but instead just deprecate this method as well. It's not really that important for tests, since no one else is going to call the method, so feel free to take or leave the advice.", "author": "vvcephei", "createdAt": "2020-05-19T19:21:00Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -265,6 +265,7 @@ public void shouldProcessingFromSinkTopic() {\n                  processorSupplier.theCapturedProcessor().processed);\n     }\n \n+    @SuppressWarnings(\"deprecation\")", "originalCommit": "7f0399526ca6cc65a87a168f6ba96eb5faad905e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTI4NQ==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427549285", "bodyText": "This would be a case where I would advocate more strongly to deprecate this method, to avoid accidentally \"hiding\" the deprecation from callers.", "author": "vvcephei", "createdAt": "2020-05-19T19:31:42Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java", "diffHunk": "@@ -254,6 +253,7 @@ private Topology getTopologyWithChangingValuesAfterChangingKey(final String opti\n \n     }\n \n+    @SuppressWarnings(\"deprecation\") // specifically testing the deprecated variant", "originalCommit": "7f0399526ca6cc65a87a168f6ba96eb5faad905e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MTU2Mw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427581563", "bodyText": "Well, but then we need to add more suppression or deprecation upstream. Does not seem worth for testing code", "author": "mjsax", "createdAt": "2020-05-19T20:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMTcxMw==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427621713", "bodyText": "This is exactly the point!", "author": "vvcephei", "createdAt": "2020-05-19T21:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjMyOA==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r427752328", "bodyText": "Updated", "author": "mjsax", "createdAt": "2020-05-20T05:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0OTI4NQ=="}], "type": "inlineReview"}, {"oid": "542340d4f6c7e969cacb75e3215bfb9d6bef53c2", "url": "https://github.com/apache/kafka/commit/542340d4f6c7e969cacb75e3215bfb9d6bef53c2", "message": "Update docs/streams/developer-guide/dsl-api.html\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-05-19T20:28:35Z", "type": "commit"}, {"oid": "1786a0ab8f5663182205f47f17e511e7caa7d66c", "url": "https://github.com/apache/kafka/commit/1786a0ab8f5663182205f47f17e511e7caa7d66c", "message": "Update docs/streams/upgrade-guide.html\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-05-19T20:29:08Z", "type": "commit"}, {"oid": "7cf29ab80880cb9244fb40353d59581bcc84b652", "url": "https://github.com/apache/kafka/commit/7cf29ab80880cb9244fb40353d59581bcc84b652", "message": "Update docs/streams/upgrade-guide.html\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-05-19T20:29:24Z", "type": "commit"}, {"oid": "8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b", "url": "https://github.com/apache/kafka/commit/8333e47cfe9e1a025f9d254d2cbd19c0ca2f6d7b", "message": "Update streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-05-19T20:32:07Z", "type": "commit"}, {"oid": "5b5ef0b6da5eff4edcbd42495ad44b0eb69e9a4a", "url": "https://github.com/apache/kafka/commit/5b5ef0b6da5eff4edcbd42495ad44b0eb69e9a4a", "message": "Update streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-05-20T00:16:52Z", "type": "commit"}, {"oid": "28bc2784008665032b515cc06ef9d93c61e1fcc8", "url": "https://github.com/apache/kafka/commit/28bc2784008665032b515cc06ef9d93c61e1fcc8", "message": "Github comments", "committedDate": "2020-05-20T00:28:03Z", "type": "commit"}, {"oid": "647b367ced388657f4735313ce1ff0313d429a2e", "url": "https://github.com/apache/kafka/commit/647b367ced388657f4735313ce1ff0313d429a2e", "message": "Add test", "committedDate": "2020-05-21T00:33:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5OTY5Ng==", "url": "https://github.com/apache/kafka/pull/8679#discussion_r428499696", "bodyText": "Could we use {@link #repartition(Repartitioned)} ?", "author": "chia7712", "createdAt": "2020-05-21T07:49:38Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -835,9 +836,9 @@\n      * @param topic     the topic name\n      * @param produced  the options to use when producing to the topic\n      * @return a {@code KStream} that contains the exact same (and potentially repartitioned) records as this {@code KStream}\n-     * @see #repartition()\n-     * @see #repartition(Repartitioned)\n+     * @deprecated since 2.6; use #repartition(Repartitioned) instead", "originalCommit": "647b367ced388657f4735313ce1ff0313d429a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dfcb6a3dce9ea006c43ddc1d502eccb07f879c10", "url": "https://github.com/apache/kafka/commit/dfcb6a3dce9ea006c43ddc1d502eccb07f879c10", "message": "Github comments", "committedDate": "2020-05-21T21:48:32Z", "type": "commit"}]}