{"pr_number": 9609, "pr_title": "KAFKA-6687: restrict DSL to allow only Streams from the same source topics", "pr_createdAt": "2020-11-18T04:57:40Z", "pr_url": "https://github.com/apache/kafka/pull/9609", "timeline": [{"oid": "0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "url": "https://github.com/apache/kafka/commit/0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "message": "refactor nodes, fix up tests", "committedDate": "2020-11-18T04:54:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1MDUyOQ==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r528250529", "bodyText": "nit: fix indention (same below in other constructor)", "author": "mjsax", "createdAt": "2020-11-21T22:28:59Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/SourceGraphNode.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals.graph;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.kstream.internals.ConsumedInternal;\n+\n+abstract public class SourceGraphNode<K, V> extends StreamsGraphNode {\n+\n+    private Collection<String> topicNames;\n+    private Pattern topicPattern;\n+    private final ConsumedInternal<K, V> consumedInternal;\n+\n+    public SourceGraphNode(final String nodeName,\n+                            final Collection<String> topicNames,", "originalCommit": "0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1MDU3OQ==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r528250579", "bodyText": "Can me make those field final?", "author": "mjsax", "createdAt": "2020-11-21T22:29:33Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/SourceGraphNode.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals.graph;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.kstream.internals.ConsumedInternal;\n+\n+abstract public class SourceGraphNode<K, V> extends StreamsGraphNode {\n+\n+    private Collection<String> topicNames;", "originalCommit": "0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1MDYwNg==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r528250606", "bodyText": "final?", "author": "mjsax", "createdAt": "2020-11-21T22:29:39Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/SourceGraphNode.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals.graph;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.kstream.internals.ConsumedInternal;\n+\n+abstract public class SourceGraphNode<K, V> extends StreamsGraphNode {\n+\n+    private Collection<String> topicNames;\n+    private Pattern topicPattern;", "originalCommit": "0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTYyMg==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r528845622", "bodyText": "Should we already demand a set of topics in the constructors of  SourceGraphNode() and its children?", "author": "cadonna", "createdAt": "2020-11-23T16:43:16Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/SourceGraphNode.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals.graph;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.kstream.internals.ConsumedInternal;\n+\n+abstract public class SourceGraphNode<K, V> extends StreamsGraphNode {\n+\n+    private Collection<String> topicNames;\n+    private Pattern topicPattern;\n+    private final ConsumedInternal<K, V> consumedInternal;\n+\n+    public SourceGraphNode(final String nodeName,\n+                            final Collection<String> topicNames,\n+                            final ConsumedInternal<K, V> consumedInternal) {\n+        super(nodeName);\n+\n+        this.topicNames = topicNames;\n+        this.consumedInternal = consumedInternal;\n+    }\n+\n+    public SourceGraphNode(final String nodeName,\n+                            final Pattern topicPattern,\n+                            final ConsumedInternal<K, V> consumedInternal) {\n+\n+        super(nodeName);\n+\n+        this.topicPattern = topicPattern;\n+        this.consumedInternal = consumedInternal;\n+    }\n+\n+    public Set<String> topicNames() {\n+        return new HashSet<>(topicNames);", "originalCommit": "0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MTEwMw==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r529971103", "bodyText": "I'm not sure I understand exactly what you're asking, but I made a few changes to this topic collection/method. Please lmk if it hasn't addressed your question", "author": "ableegoldman", "createdAt": "2020-11-24T22:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NjYyOQ==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r530196629", "bodyText": "I like your changes. What I meant is that we could change the constructor of SourceGraphNode to:\npublic SourceGraphNode(final String nodeName,\n                       final Set<String> topicNames,\n                       final ConsumedInternal<K, V> consumedInternal)\n\nand the one of StreamSourceNode to:\npublic StreamSourceNode(final String nodeName,\n                        final Set<String> topicNames,\n                        final ConsumedInternal<K, V> consumedInternal)\n\nIn this way, we have a set of topics as soon as possible in the code path from the public API. I think this makes it clearer that it is not possible to have duplicates of topics internally.\nTo keep this PR small, I would propose to just do the changes for SourceGraphNode, and do the other changes in a separate PR.", "author": "cadonna", "createdAt": "2020-11-25T08:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjI4MA==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r533876280", "bodyText": "Ah ok you meant making it a Set vs a Collection -- I do agree with the principle, and I did push the Set-ification of the topics up one level so that the actual class field is a Set. But I don't think it's really worth it to push it up another layer and Set-ify the constructor argument. For one thing we would just have to do the same conversion to a Set but in more places, and more importantly, the actual callers of the constructor don't care at all whether it's a Set or any other Collection. So I think it actually does make sense to convert to a Set inside the constructor body", "author": "ableegoldman", "createdAt": "2020-12-02T03:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5MDMzMA==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r533990330", "bodyText": "Fair enough and I think that this is nothing urgent or absolute necessary. However, I would like to explain my line of thoughts. I think an interface of a class should also describe the constraints on the the object and as far as I see it does not make any sense to pass the same topic name multiple times to a source node.\nI do not see an issue with making the same conversion in more places and actually this is even not true because the only place we would do a conversion is in StreamsBuilder#stream(). All other dependent calls create a singleton collection which can be easily replaced with a singleton set. Actually, I do not understand why StreamsBuilder#stream() takes a collection instead of a set.\nI am not sure I can follow your other argument\n\nthe actual callers of the constructor don't care at all whether it's a Set or any other Collection\n\nDo you refer to the creation of the singleton collection in the callers?\nAs I said, I do not say we need to follow my proposal. I just wanted to argue in favor of a cleaner and more descriptive interface.", "author": "cadonna", "createdAt": "2020-12-02T08:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyNDYyMQ==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r534424621", "bodyText": "All other dependent calls create a singleton collection which can be easily replaced with a singleton set\n\nAh ok, I didn't notice that. I guess I only looked at StreamsBuilder#stream\n\nActually, I do not understand why StreamsBuilder#stream() takes a collection instead of a set.\n\nThis I totally agree with. I suspect the intention was just for convenience, so users don't have to do a list->set conversion themselves, but I personally don't find that to be a very strong argument. It doesn't seem worth doing a KIP over, but maybe if we rewrite some large parts of the DSL in the future, we can fix this as well\nBy \"callers\" I meant the method body of StreamsBuilder#stream, which doesn't really care whether there are duplicates in the collection because its only job is to pass the topics straight from the user to this source node.\nBut I see your point. If I touch on some related code in a future PR I can fix this on the side, or I'd be happy to review a PR if you want to submit one. Thanks for the discussion", "author": "ableegoldman", "createdAt": "2020-12-02T19:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NzM5Mw==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r528847393", "bodyText": "Can we also rename StreamsGraphNode to GraphNode? The Streams prefix is a bit confusing, IMO, because StreamSourceNode and StreamsGraphNode seem really similar although they are quite different.", "author": "cadonna", "createdAt": "2020-11-23T16:45:47Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/SourceGraphNode.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals.graph;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.kstream.internals.ConsumedInternal;\n+\n+abstract public class SourceGraphNode<K, V> extends StreamsGraphNode {", "originalCommit": "0b52cc30793fd12a76d60a4214bddd26fcc34e1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NDA5MA==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r529974090", "bodyText": "Ok, but don't come crying when the PR blows up in length \ud83d\ude09 (but yeah that makes sense to me)", "author": "ableegoldman", "createdAt": "2020-11-24T22:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4NzM3OQ==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r530187379", "bodyText": "I have never said you need to do it in this PR \ud83d\ude09 . Jokes apart, I think in general it would be better to do such things in a separate PR, but when I wrote my comment, I completely forgot about it. Sorry about that!", "author": "cadonna", "createdAt": "2020-11-25T08:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg0NzM5Mw=="}], "type": "inlineReview"}, {"oid": "d4a31473b896337d7dca3b9012f892150cd37a9c", "url": "https://github.com/apache/kafka/commit/d4a31473b896337d7dca3b9012f892150cd37a9c", "message": "review feedback", "committedDate": "2020-11-24T22:56:32Z", "type": "commit"}, {"oid": "93518cd976bb9d35dc5ea92c5a2d2b98123dc0a0", "url": "https://github.com/apache/kafka/commit/93518cd976bb9d35dc5ea92c5a2d2b98123dc0a0", "message": "rename StreamsGraphNode to GraphNode", "committedDate": "2020-11-24T22:57:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyODYxNw==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r530028617", "bodyText": "nit: indention", "author": "mjsax", "createdAt": "2020-11-25T00:22:24Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/CogroupedKStreamImpl.java", "diffHunk": "@@ -129,7 +129,7 @@\n             subTopologySourceNodes,\n             name,\n             aggregateBuilder,\n-            streamsGraphNode,\n+                                                         graphNode,", "originalCommit": "93518cd976bb9d35dc5ea92c5a2d2b98123dc0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1MzM2NQ==", "url": "https://github.com/apache/kafka/pull/9609#discussion_r530053365", "bodyText": "wth happened here \ud83e\udd14", "author": "ableegoldman", "createdAt": "2020-11-25T01:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyODYxNw=="}], "type": "inlineReview"}, {"oid": "b1d995aff2eac1f9a689ff3bc091570d3b5e7d18", "url": "https://github.com/apache/kafka/commit/b1d995aff2eac1f9a689ff3bc091570d3b5e7d18", "message": "fix indentation and Set-ify", "committedDate": "2020-11-25T01:51:34Z", "type": "commit"}]}