{"pr_number": 9626, "pr_title": "KAFKA-10545: Create topic IDs and propagate to brokers", "pr_createdAt": "2020-11-19T23:48:46Z", "pr_url": "https://github.com/apache/kafka/pull/9626", "timeline": [{"oid": "ef2c75b123de53fe64a8fac43a22565824320c92", "url": "https://github.com/apache/kafka/commit/ef2c75b123de53fe64a8fac43a22565824320c92", "message": "First implementation", "committedDate": "2020-11-20T16:39:20Z", "type": "commit"}, {"oid": "0e0a304f464146f2197b91a83cce37bfb3ae7d16", "url": "https://github.com/apache/kafka/commit/0e0a304f464146f2197b91a83cce37bfb3ae7d16", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516", "committedDate": "2020-11-20T16:39:38Z", "type": "commit"}, {"oid": "12e440b89f4939af6c54fd82fdf1e28db1feeee6", "url": "https://github.com/apache/kafka/commit/12e440b89f4939af6c54fd82fdf1e28db1feeee6", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516", "committedDate": "2020-11-20T16:40:19Z", "type": "commit"}, {"oid": "b6b0796b0539549b2ed20d44d319bb56b777ac8d", "url": "https://github.com/apache/kafka/commit/b6b0796b0539549b2ed20d44d319bb56b777ac8d", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516", "committedDate": "2020-11-20T16:40:31Z", "type": "commit"}, {"oid": "0279e2c1d2fd7a2aca494c710f41621b12db2057", "url": "https://github.com/apache/kafka/commit/0279e2c1d2fd7a2aca494c710f41621b12db2057", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516", "committedDate": "2020-11-20T16:40:38Z", "type": "commit"}, {"oid": "0f0e3272266ccee981e73c7a654677a24fe6ec2f", "url": "https://github.com/apache/kafka/commit/0f0e3272266ccee981e73c7a654677a24fe6ec2f", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516", "committedDate": "2020-11-20T16:40:44Z", "type": "commit"}, {"oid": "7fa1e332e3a983ed96331f75963368aa8199a5d3", "url": "https://github.com/apache/kafka/commit/7fa1e332e3a983ed96331f75963368aa8199a5d3", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516LeaderAndIsr", "committedDate": "2020-11-20T16:40:54Z", "type": "commit"}, {"oid": "37cdd626a41f92725e18098c286735d839e442e6", "url": "https://github.com/apache/kafka/commit/37cdd626a41f92725e18098c286735d839e442e6", "message": "Fixes", "committedDate": "2020-11-20T16:40:55Z", "type": "commit"}, {"oid": "1926bf43e6c1b2f293fa6401847794edde5396b8", "url": "https://github.com/apache/kafka/commit/1926bf43e6c1b2f293fa6401847794edde5396b8", "message": "Cleaned up Uuid, merge processes", "committedDate": "2020-11-20T19:08:49Z", "type": "commit"}, {"oid": "1926bf43e6c1b2f293fa6401847794edde5396b8", "url": "https://github.com/apache/kafka/commit/1926bf43e6c1b2f293fa6401847794edde5396b8", "message": "Cleaned up Uuid, merge processes", "committedDate": "2020-11-20T19:08:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkwMDAyNA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r539900024", "bodyText": "nit: is the else statement needed all it has is return?", "author": "rite2nikhil", "createdAt": "2020-12-10T06:41:23Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrResponse.java", "diffHunk": "@@ -58,8 +68,17 @@ public Errors error() {\n         Errors error = error();\n         if (error != Errors.NONE)\n             // Minor optimization since the top-level error applies to all partitions\n-            return Collections.singletonMap(error, data.partitionErrors().size());\n-        return errorCounts(data.partitionErrors().stream().map(l -> Errors.forCode(l.errorCode())));\n+            if (data.topics().isEmpty()) {\n+                return Collections.singletonMap(error, data.partitionErrors().size());\n+            } else {", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkwMzcyMQ==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r539903721", "bodyText": "may be i missed is there a test checking correctness of versioning ?", "author": "rite2nikhil", "createdAt": "2020-12-10T06:45:59Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrRequest.java", "diffHunk": "@@ -138,14 +145,32 @@ public LeaderAndIsrResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         Errors error = Errors.forException(e);\n         responseData.setErrorCode(error.code());\n \n-        List<LeaderAndIsrPartitionError> partitions = new ArrayList<>();\n-        for (LeaderAndIsrPartitionState partition : partitionStates()) {\n-            partitions.add(new LeaderAndIsrPartitionError()\n-                .setTopicName(partition.topicName())\n-                .setPartitionIndex(partition.partitionIndex())\n-                .setErrorCode(error.code()));\n+        if (version() < 5) {", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxNjUzNQ==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540516535", "bodyText": "There is LeaderAndIsrResponseTest.java (which doesn't try all versions) and testGetErrorResponse() in LeaderAndIsrRequestTest.java that does test all versions. I will add version tests to the former.", "author": "jolshan", "createdAt": "2020-12-10T21:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkwMzcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNDY5MA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540224690", "bodyText": "topicIds() recomputes the Map so it would be better to keep a local reference to it.", "author": "dajac", "createdAt": "2020-12-10T14:44:27Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrRequest.java", "diffHunk": "@@ -138,14 +145,32 @@ public LeaderAndIsrResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         Errors error = Errors.forException(e);\n         responseData.setErrorCode(error.code());\n \n-        List<LeaderAndIsrPartitionError> partitions = new ArrayList<>();\n-        for (LeaderAndIsrPartitionState partition : partitionStates()) {\n-            partitions.add(new LeaderAndIsrPartitionError()\n-                .setTopicName(partition.topicName())\n-                .setPartitionIndex(partition.partitionIndex())\n-                .setErrorCode(error.code()));\n+        if (version() < 5) {\n+            List<LeaderAndIsrPartitionError> partitions = new ArrayList<>();\n+            for (LeaderAndIsrPartitionState partition : partitionStates()) {\n+                partitions.add(new LeaderAndIsrPartitionError()\n+                        .setTopicName(partition.topicName())\n+                        .setPartitionIndex(partition.partitionIndex())\n+                        .setErrorCode(error.code()));\n+            }\n+            responseData.setPartitionErrors(partitions);\n+            return new LeaderAndIsrResponse(responseData);\n+        }\n+\n+        List<LeaderAndIsrTopicError> topics = new ArrayList<>();\n+        for (LeaderAndIsrTopicState topicState : data.topicStates()) {\n+            LeaderAndIsrTopicError topicError = new LeaderAndIsrTopicError();\n+            topicError.setTopicId(topicIds().get(topicState.topicName()));", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNjAyNQ==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540226025", "bodyText": "nit: Could we directly allocate the ArrayList with the correct capacity? The same for partitions above and below.", "author": "dajac", "createdAt": "2020-12-10T14:46:04Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrRequest.java", "diffHunk": "@@ -138,14 +145,32 @@ public LeaderAndIsrResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         Errors error = Errors.forException(e);\n         responseData.setErrorCode(error.code());\n \n-        List<LeaderAndIsrPartitionError> partitions = new ArrayList<>();\n-        for (LeaderAndIsrPartitionState partition : partitionStates()) {\n-            partitions.add(new LeaderAndIsrPartitionError()\n-                .setTopicName(partition.topicName())\n-                .setPartitionIndex(partition.partitionIndex())\n-                .setErrorCode(error.code()));\n+        if (version() < 5) {\n+            List<LeaderAndIsrPartitionError> partitions = new ArrayList<>();\n+            for (LeaderAndIsrPartitionState partition : partitionStates()) {\n+                partitions.add(new LeaderAndIsrPartitionError()\n+                        .setTopicName(partition.topicName())\n+                        .setPartitionIndex(partition.partitionIndex())\n+                        .setErrorCode(error.code()));\n+            }\n+            responseData.setPartitionErrors(partitions);\n+            return new LeaderAndIsrResponse(responseData);\n+        }\n+\n+        List<LeaderAndIsrTopicError> topics = new ArrayList<>();", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3Nzc5Mg==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540577792", "bodyText": "So the partition above uses an iterable, and I'm not sure if there is a way to grab the size without iterating through. Let me know if I'm forgetting something.", "author": "jolshan", "createdAt": "2020-12-10T23:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNjAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMDEzMQ==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540230131", "bodyText": "It would be better to explicitly handle the version here instead of relying on topics() to be empty or not. It is easier to reason about for the reader and it also makes the handling very explicit instead of being implicit.", "author": "dajac", "createdAt": "2020-12-10T14:51:02Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrResponse.java", "diffHunk": "@@ -45,8 +47,16 @@ public LeaderAndIsrResponse(Struct struct, short version) {\n         this.data = new LeaderAndIsrResponseData(struct, version);\n     }\n \n-    public List<LeaderAndIsrPartitionError> partitions() {\n-        return data.partitionErrors();\n+    public List<LeaderAndIsrTopicError> topics() {\n+        return this.data.topics();\n+    }\n+\n+    public Iterable<LeaderAndIsrPartitionError> partitions() {\n+        if (data.topics().isEmpty()) {\n+            return data.partitionErrors();\n+        }\n+        return () -> new FlattenedIterator<>(data.topics().iterator(),\n+            topic -> topic.partitionErrors().iterator());", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwOTc0MA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540309740", "bodyText": "I agree. I think I had some problems with defining the version when the constructor only provides the data. Is there a way to get the version with just the data?", "author": "jolshan", "createdAt": "2020-12-10T16:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMDEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxMDMwMQ==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540510301", "bodyText": "I'm thinking that it most cases where I create a LeaderAndIsrResponse with the data object, I have access to the request and can grab the version there. Then I can add it to the constructor.", "author": "jolshan", "createdAt": "2020-12-10T21:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMDEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMzU5MA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540233590", "bodyText": "ditto here. It would be better to be explicit wrt. the handling of the version.", "author": "dajac", "createdAt": "2020-12-10T14:55:05Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrResponse.java", "diffHunk": "@@ -58,8 +68,17 @@ public Errors error() {\n         Errors error = error();\n         if (error != Errors.NONE)\n             // Minor optimization since the top-level error applies to all partitions\n-            return Collections.singletonMap(error, data.partitionErrors().size());\n-        return errorCounts(data.partitionErrors().stream().map(l -> Errors.forCode(l.errorCode())));\n+            if (data.topics().isEmpty()) {\n+                return Collections.singletonMap(error, data.partitionErrors().size());\n+            } else {\n+                return Collections.singletonMap(error,\n+                        data.topics().stream().mapToInt(t -> t.partitionErrors().size()).sum());\n+            }\n+        if (data.topics().isEmpty()) {\n+            return errorCounts(data.partitionErrors().stream().map(l -> Errors.forCode(l.errorCode())));\n+        }\n+        return errorCounts(data.topics().stream().flatMap(t -> t.partitionErrors().stream()).map(l ->\n+                Errors.forCode(l.errorCode())));", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzNzA0Mg==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540237042", "bodyText": "Shouldn't we verify that topic ids are correctly set in the generated response as well?", "author": "dajac", "createdAt": "2020-12-10T14:59:15Z", "path": "clients/src/test/java/org/apache/kafka/common/requests/LeaderAndIsrRequestTest.java", "diffHunk": "@@ -51,15 +53,15 @@\n     public void testUnsupportedVersion() {\n         LeaderAndIsrRequest.Builder builder = new LeaderAndIsrRequest.Builder(\n                 (short) (LEADER_AND_ISR.latestVersion() + 1), 0, 0, 0,\n-                Collections.emptyList(), Collections.emptySet());\n+                Collections.emptyList(), Collections.emptyMap(), Collections.emptySet());\n         assertThrows(UnsupportedVersionException.class, builder::build);\n     }\n \n     @Test\n     public void testGetErrorResponse() {\n         for (short version = LEADER_AND_ISR.oldestVersion(); version < LEADER_AND_ISR.latestVersion(); version++) {\n             LeaderAndIsrRequest.Builder builder = new LeaderAndIsrRequest.Builder(version, 0, 0, 0,\n-                    Collections.emptyList(), Collections.emptySet());\n+                    Collections.emptyList(), Collections.emptyMap(), Collections.emptySet());", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzNzc2OA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540237768", "bodyText": "nit: HashMap<String, Uuid> to Map<String, Uuid>. I have seen this in a couple of places.", "author": "dajac", "createdAt": "2020-12-10T15:00:05Z", "path": "clients/src/test/java/org/apache/kafka/common/requests/LeaderAndIsrRequestTest.java", "diffHunk": "@@ -116,8 +118,13 @@ public void testVersionLogic() {\n                 new Node(0, \"host0\", 9090),\n                 new Node(1, \"host1\", 9091)\n             );\n+\n+            HashMap<String, Uuid> topicIds = new HashMap<>();", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0Mzk0MA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540243940", "bodyText": "nit: You could use Collections.singletonMap here.", "author": "dajac", "createdAt": "2020-12-10T15:07:33Z", "path": "clients/src/test/java/org/apache/kafka/common/requests/LeaderAndIsrResponseTest.java", "diffHunk": "@@ -57,29 +60,32 @@ public void testErrorCountsFromGetErrorResponse() {\n             .setZkVersion(20)\n             .setReplicas(Collections.singletonList(10))\n             .setIsNew(false));\n+        HashMap<String, Uuid> topicIds = new HashMap<>();\n+        topicIds.put(\"foo\", Uuid.randomUuid());", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0NjQ0MA==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540246440", "bodyText": "Should we keep testing the older version as well? Tests assume the newest version only now.", "author": "dajac", "createdAt": "2020-12-10T15:10:46Z", "path": "clients/src/test/java/org/apache/kafka/common/requests/LeaderAndIsrResponseTest.java", "diffHunk": "@@ -57,29 +60,32 @@ public void testErrorCountsFromGetErrorResponse() {\n             .setZkVersion(20)\n             .setReplicas(Collections.singletonList(10))\n             .setIsNew(false));\n+        HashMap<String, Uuid> topicIds = new HashMap<>();\n+        topicIds.put(\"foo\", Uuid.randomUuid());\n+\n         LeaderAndIsrRequest request = new LeaderAndIsrRequest.Builder(ApiKeys.LEADER_AND_ISR.latestVersion(),\n-                15, 20, 0, partitionStates, Collections.emptySet()).build();\n+                15, 20, 0, partitionStates, topicIds, Collections.emptySet()).build();\n         LeaderAndIsrResponse response = request.getErrorResponse(0, Errors.CLUSTER_AUTHORIZATION_FAILED.exception());\n         assertEquals(Collections.singletonMap(Errors.CLUSTER_AUTHORIZATION_FAILED, 2), response.errorCounts());\n     }\n \n     @Test\n     public void testErrorCountsWithTopLevelError() {\n-        List<LeaderAndIsrPartitionError> partitions = createPartitions(\"foo\",\n-            asList(Errors.NONE, Errors.NOT_LEADER_OR_FOLLOWER));\n+        Uuid id = Uuid.randomUuid();\n+        List<LeaderAndIsrTopicError> topics = createTopic(id, asList(Errors.NONE, Errors.NOT_LEADER_OR_FOLLOWER));\n         LeaderAndIsrResponse response = new LeaderAndIsrResponse(new LeaderAndIsrResponseData()\n             .setErrorCode(Errors.UNKNOWN_SERVER_ERROR.code())\n-            .setPartitionErrors(partitions));\n+            .setTopics(topics));\n         assertEquals(Collections.singletonMap(Errors.UNKNOWN_SERVER_ERROR, 2), response.errorCounts());", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI0NzY2Mg==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r540247662", "bodyText": "It would be good to verify that all versions are tested in testSerialization.", "author": "dajac", "createdAt": "2020-12-10T15:12:09Z", "path": "clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.apache.kafka.common.IsolationLevel;", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0MzkxNg==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r543243916", "bodyText": "Should be able to replace this with something like:\nreturn data.topicStates().stream()\n  .collect(Collectors.toMap(LeaderAndIsrTopicState::topicName, LeaderAndIsrTopicState::topicId));", "author": "rajinisivaram", "createdAt": "2020-12-15T10:55:47Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrRequest.java", "diffHunk": "@@ -171,6 +196,14 @@ public long brokerEpoch() {\n         return data.ungroupedPartitionStates();\n     }\n \n+    public Map<String, Uuid> topicIds() {\n+        Map<String, Uuid> topicIds = new HashMap<>();\n+        for (LeaderAndIsrTopicState ts : data.topicStates()) {\n+            topicIds.put(ts.topicName(), ts.topicId());\n+        }\n+        return topicIds;", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0NzMzNQ==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r543247335", "bodyText": "nit: We should add braces here since there are multiple lines inside the if statement", "author": "rajinisivaram", "createdAt": "2020-12-15T11:01:05Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrResponse.java", "diffHunk": "@@ -58,8 +68,17 @@ public Errors error() {\n         Errors error = error();\n         if (error != Errors.NONE)", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0NzM0Ng==", "url": "https://github.com/apache/kafka/pull/9626#discussion_r543247346", "bodyText": "nit: We should add braces here since there are multiple lines inside the if statement", "author": "rajinisivaram", "createdAt": "2020-12-15T11:01:06Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/LeaderAndIsrResponse.java", "diffHunk": "@@ -58,8 +68,17 @@ public Errors error() {\n         Errors error = error();\n         if (error != Errors.NONE)", "originalCommit": "1926bf43e6c1b2f293fa6401847794edde5396b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5424a1a026649a5270d4593fb2ba920e8abc091a", "url": "https://github.com/apache/kafka/commit/5424a1a026649a5270d4593fb2ba920e8abc091a", "message": "Addressed comments", "committedDate": "2020-12-16T00:57:57Z", "type": "commit"}, {"oid": "6dbdbb80b3c6774e9dc3870976d709d7fe3c217b", "url": "https://github.com/apache/kafka/commit/6dbdbb80b3c6774e9dc3870976d709d7fe3c217b", "message": "Made replicaManager code less complicated.", "committedDate": "2020-12-17T01:20:24Z", "type": "commit"}, {"oid": "53ea8430a75b6e8e81f216ebae1ba27b32ca44b2", "url": "https://github.com/apache/kafka/commit/53ea8430a75b6e8e81f216ebae1ba27b32ca44b2", "message": "Merge branch 'trunk' of github.com:apache/kafka into KIP516LeaderAndIsr", "committedDate": "2020-12-17T03:49:41Z", "type": "commit"}, {"oid": "919f0ed74008a43deeb39b088d7c63ee56ae6d44", "url": "https://github.com/apache/kafka/commit/919f0ed74008a43deeb39b088d7c63ee56ae6d44", "message": "Fix some issues with propagating partition state", "committedDate": "2020-12-17T23:00:00Z", "type": "commit"}, {"oid": "fcd80938b9c17b46d2395623cca80e12d2b4f6c9", "url": "https://github.com/apache/kafka/commit/fcd80938b9c17b46d2395623cca80e12d2b4f6c9", "message": "Remove extra code", "committedDate": "2020-12-18T15:56:40Z", "type": "commit"}, {"oid": "213143d98480f92cc308e7c082b1a123ff03e821", "url": "https://github.com/apache/kafka/commit/213143d98480f92cc308e7c082b1a123ff03e821", "message": "Merge branch 'trunk' into KIP516LeaderAndIsr", "committedDate": "2020-12-18T18:55:32Z", "type": "commit"}, {"oid": "5ff7840a592464cb18931b27d4ff1d6157a86b93", "url": "https://github.com/apache/kafka/commit/5ff7840a592464cb18931b27d4ff1d6157a86b93", "message": "Merge branch 'trunk' into KIP516LeaderAndIsr", "committedDate": "2020-12-18T21:37:00Z", "type": "commit"}]}