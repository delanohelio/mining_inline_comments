{"pr_number": 7897, "pr_title": "KAFKA-9365: Add server side change  to include consumer group information within transaction commit", "pr_createdAt": "2020-01-05T05:58:01Z", "pr_url": "https://github.com/apache/kafka/pull/7897", "timeline": [{"oid": "dc0e77f6488028214fa1242869005f618c20d395", "url": "https://github.com/apache/kafka/commit/dc0e77f6488028214fa1242869005f618c20d395", "message": "add fencing", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "1624afa9d42316240d02521aa43cb3a057888015", "url": "https://github.com/apache/kafka/commit/1624afa9d42316240d02521aa43cb3a057888015", "message": "enforce on consumer commit generation", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "a0bdca618ccb5488ee6b543255a2f5e0a3efcf09", "url": "https://github.com/apache/kafka/commit/a0bdca618ccb5488ee6b543255a2f5e0a3efcf09", "message": "consolidate constants and put unknown.member.id as fatal exception", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "04e4d269eb9b50c3352ea40be017795e98ec79e2", "url": "https://github.com/apache/kafka/commit/04e4d269eb9b50c3352ea40be017795e98ec79e2", "message": "fencing fix", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "a3ec3429abbff25111d74d03250296b43e61dca0", "url": "https://github.com/apache/kafka/commit/a3ec3429abbff25111d74d03250296b43e61dca0", "message": "address Guozhang's comment on simplifying the commit logic", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "6c001dd81a295dd3eb649c191c87ae3f7db017e3", "url": "https://github.com/apache/kafka/commit/6c001dd81a295dd3eb649c191c87ae3f7db017e3", "message": "bump flexible versions for txn commit", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "2017357b974b1e12dca6a9ea4c822c6aa8380756", "url": "https://github.com/apache/kafka/commit/2017357b974b1e12dca6a9ea4c822c6aa8380756", "message": "convert to abortable error", "committedDate": "2020-01-14T17:39:48Z", "type": "commit"}, {"oid": "2017357b974b1e12dca6a9ea4c822c6aa8380756", "url": "https://github.com/apache/kafka/commit/2017357b974b1e12dca6a9ea4c822c6aa8380756", "message": "convert to abortable error", "committedDate": "2020-01-14T17:39:48Z", "type": "forcePushed"}, {"oid": "9fbb4528f1f1b71649df4a60751d03271aa03ec3", "url": "https://github.com/apache/kafka/commit/9fbb4528f1f1b71649df4a60751d03271aa03ec3", "message": "minor clean", "committedDate": "2020-01-14T17:59:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMTY2NA==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366501664", "bodyText": "These test cases are a bit odd. Why would we get a FENCED_INSTANCE_ID if we have not provided an instance id? I think it would make sense to do all of the client changes in a single PR and all the server changes in a separate PR. I'm ok doing them all at once also since this PR is not that big.", "author": "hachikuji", "createdAt": "2020-01-14T18:29:43Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -940,6 +943,99 @@ public void testUnsupportedForMessageFormatInTxnOffsetCommit() {\n         assertFatalError(UnsupportedForMessageFormatException.class);\n     }\n \n+    @Test\n+    public void testFencedInstanceIdInTxnOffsetCommit() {", "originalCommit": "9fbb4528f1f1b71649df4a60751d03271aa03ec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNDE0MA==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366524140", "bodyText": "Cool, I will separate the PR to leave only server side changes", "author": "abbccdda", "createdAt": "2020-01-14T19:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMTY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMjM2Mw==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366502363", "bodyText": "nit: I think it would be a little cleaner to rely on the defaults from the schema. So if we don't have a GroupMetadata object, then we don't set anything.", "author": "hachikuji", "createdAt": "2020-01-14T18:31:11Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/JoinGroupRequest.java", "diffHunk": "@@ -120,10 +122,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return new JoinGroupResponse(new JoinGroupResponseData()\n                 .setThrottleTimeMs(throttleTimeMs)\n                 .setErrorCode(Errors.forException(e).code())\n-                .setGenerationId(JoinGroupResponse.UNKNOWN_GENERATION_ID)\n-                .setProtocolName(JoinGroupResponse.UNKNOWN_PROTOCOL)\n-                .setLeader(JoinGroupResponse.UNKNOWN_MEMBER_ID)\n-                .setMemberId(JoinGroupResponse.UNKNOWN_MEMBER_ID)\n+                .setGenerationId(UNKNOWN_GENERATION_ID)", "originalCommit": "9fbb4528f1f1b71649df4a60751d03271aa03ec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzYxMw==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366513613", "bodyText": "Sorry, wrong request type here. Please ignore.", "author": "hachikuji", "createdAt": "2020-01-14T18:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwMjM2Mw=="}], "type": "inlineReview"}, {"oid": "57b278e7c538a2810e0d4da36a364d31d5319ce1", "url": "https://github.com/apache/kafka/commit/57b278e7c538a2810e0d4da36a364d31d5319ce1", "message": "Some comments from Jason", "committedDate": "2020-01-14T19:29:21Z", "type": "commit"}, {"oid": "437f8456983ba6234644c62a5cbfee5e77814cfb", "url": "https://github.com/apache/kafka/commit/437f8456983ba6234644c62a5cbfee5e77814cfb", "message": "revert client side changes", "committedDate": "2020-01-14T19:34:25Z", "type": "commit"}, {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8", "url": "https://github.com/apache/kafka/commit/943bdf3604b662dfd20e7cfd586ada10e3412bc8", "message": "checkstyle fix", "committedDate": "2020-01-14T20:19:53Z", "type": "commit"}, {"oid": "943bdf3604b662dfd20e7cfd586ada10e3412bc8", "url": "https://github.com/apache/kafka/commit/943bdf3604b662dfd20e7cfd586ada10e3412bc8", "message": "checkstyle fix", "committedDate": "2020-01-14T20:19:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjU4Mg==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366606582", "bodyText": "It's confusing that we call testAllMessageRoundTripsFromVersion here, because it will fail for the first version we pass in (ie, the internal for loop is not required. It would be easier to understand the test if we call testEquivalentMessageRoundTrip instead.\nApplies to there places too -- also to PR you do in parallel IIRC.", "author": "mjsax", "createdAt": "2020-01-14T22:28:31Z", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,20 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                final short finalVersion = version;\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));", "originalCommit": "943bdf3604b662dfd20e7cfd586ada10e3412bc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwODYxOQ==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366608619", "bodyText": "Also, we actually want to test that, if any of the three new fields is set on a lower version we get UnsupportedVersionException -- hence, for each case, we should set two fields to null IMHO. Atm, the test logic is somewhat confusing.", "author": "mjsax", "createdAt": "2020-01-14T22:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2NTU2OQ==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366665569", "bodyText": "Yep, this is correct observation!", "author": "abbccdda", "createdAt": "2020-01-15T02:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNjU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNzc2MQ==", "url": "https://github.com/apache/kafka/pull/7897#discussion_r366607761", "bodyText": "Same here -- we actually loop through the version in the outer loop, so why do we need to loop through them again? Effectively, we run tests for smaller versions multiple times?", "author": "mjsax", "createdAt": "2020-01-14T22:31:51Z", "path": "clients/src/test/java/org/apache/kafka/common/message/MessageTest.java", "diffHunk": "@@ -419,10 +425,20 @@ public void testTxnOffsetCommitRequestVersions() throws Exception {\n \n         for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n             TxnOffsetCommitRequestData requestData = request.get();\n-            if (version < 6) {\n+            if (version < 2) {\n                 requestData.topics().get(0).partitions().get(0).setCommittedLeaderEpoch(-1);\n             }\n \n+            if (version < 3) {\n+                final short finalVersion = version;\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n+                requestData.setGroupInstanceId(null);\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n+                requestData.setMemberId(\"\");\n+                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n+                requestData.setGenerationId(-1);\n+            }\n+\n             testAllMessageRoundTripsFromVersion(version, requestData);", "originalCommit": "943bdf3604b662dfd20e7cfd586ada10e3412bc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}