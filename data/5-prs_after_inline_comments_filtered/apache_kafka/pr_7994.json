{"pr_number": 7994, "pr_title": "KAFKA-9437: KIP-559: Make the Kafka Protocol Friendlier with L7 Proxies", "pr_createdAt": "2020-01-21T19:30:49Z", "pr_url": "https://github.com/apache/kafka/pull/7994", "timeline": [{"oid": "effa65da5c10d837c60532730a9d9b5726b2087e", "url": "https://github.com/apache/kafka/commit/effa65da5c10d837c60532730a9d9b5726b2087e", "message": "KIP-559: Make the Kafka Protocol Friendlier with L7 Proxies", "committedDate": "2020-01-23T13:10:45Z", "type": "commit"}, {"oid": "effa65da5c10d837c60532730a9d9b5726b2087e", "url": "https://github.com/apache/kafka/commit/effa65da5c10d837c60532730a9d9b5726b2087e", "message": "KIP-559: Make the Kafka Protocol Friendlier with L7 Proxies", "committedDate": "2020-01-23T13:10:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzNTY0OA==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r370235648", "bodyText": "Actually, it should be areProtocolTypeAndNameMissing.", "author": "dajac", "createdAt": "2020-01-23T16:50:52Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/SyncGroupRequest.java", "diffHunk": "@@ -81,6 +81,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return groupAssignments;\n     }\n \n+    public boolean areProtocolTypeAndNamePresent() {", "originalCommit": "effa65da5c10d837c60532730a9d9b5726b2087e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6988e54801d8894520bc0e6c123f7a19b08e7a62", "url": "https://github.com/apache/kafka/commit/6988e54801d8894520bc0e6c123f7a19b08e7a62", "message": "fixup", "committedDate": "2020-01-26T04:39:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NjY3NA==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r371966674", "bodyText": "The version check is probably not necessary. Also, shouldn't we be checking for non-null entries?", "author": "hachikuji", "createdAt": "2020-01-28T18:03:29Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/SyncGroupRequest.java", "diffHunk": "@@ -81,6 +81,10 @@ public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n         return groupAssignments;\n     }\n \n+    public boolean areProtocolTypeAndNamePresent() {\n+        return version() >= 5 && (data.protocolType() == null || data.protocolName() == null);", "originalCommit": "effa65da5c10d837c60532730a9d9b5726b2087e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzNTc2MA==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r372035760", "bodyText": "I think that we need the version check. ProtocolType and ProtocolName are null by default thus they will be null here for all the versions oldest than version 5 and we must accept them, right? However, for newer version, we want to ensure that both fields are provided.\nRegarding the non-null entries, the verification (== provided values match the group's ones) is done in the GroupCoordinator when the fields are provided. Does it answer your question?", "author": "dajac", "createdAt": "2020-01-28T20:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0NjYxNQ==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r372146615", "bodyText": "Maybe I'm missing something, but the function name suggests that it should return true if both the protocol type and name are non-null. The current logic returns true if either field is null. Are we missing a !?", "author": "hachikuji", "createdAt": "2020-01-29T01:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MjQwMA==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r372162400", "bodyText": "Oh... The name is indeed misleading. I have reworked this part a bit. Now, the function is called areMandatoryProtocolTypeAndNamePresent. It returns true for any version above 5, and verifies that both fields are non-null for versions from 5 and above. The call is the Api layer has been updated accordingly. Apparently, my unit tests were broken as well as I was not calling the right function. Good catch!", "author": "dajac", "createdAt": "2020-01-29T02:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NjY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjczMw==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r371976733", "bodyText": "Should we change Generation.protocol to protocolName as well?", "author": "hachikuji", "createdAt": "2020-01-28T18:23:36Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -887,6 +900,14 @@ protected synchronized void requestRejoin() {\n         this.rejoinNeeded = true;\n     }\n \n+    private boolean isProtocolTypeInconsistent(String protocolType) {\n+        return protocolType != null && !protocolType.equals(protocolType());\n+    }\n+\n+    private boolean isProtocolNameInconsistent(String protocolName) {\n+        return protocolName != null && !protocolName.equals(generation().protocol);", "originalCommit": "effa65da5c10d837c60532730a9d9b5726b2087e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMTkxNw==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r372031917", "bodyText": "Definitely. Good catch!", "author": "dajac", "createdAt": "2020-01-28T20:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjczMw=="}], "type": "inlineReview"}, {"oid": "525e84d283eac94fca1ef0ffa069d35fd63ed172", "url": "https://github.com/apache/kafka/commit/525e84d283eac94fca1ef0ffa069d35fd63ed172", "message": "Address Jason's reviews", "committedDate": "2020-01-28T21:24:06Z", "type": "commit"}, {"oid": "aa1008664116a7bc4c3084811982913e1e928482", "url": "https://github.com/apache/kafka/commit/aa1008664116a7bc4c3084811982913e1e928482", "message": "Address reviews", "committedDate": "2020-01-29T02:27:28Z", "type": "commit"}, {"oid": "832a6dbb2e0bd31de4045370e862ad9cd37db219", "url": "https://github.com/apache/kafka/commit/832a6dbb2e0bd31de4045370e862ad9cd37db219", "message": "typo", "committedDate": "2020-01-29T02:52:17Z", "type": "commit"}, {"oid": "f3457905bf31539a59db5888b912aa812880b1fa", "url": "https://github.com/apache/kafka/commit/f3457905bf31539a59db5888b912aa812880b1fa", "message": "fixup", "committedDate": "2020-01-29T13:16:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MjUwNQ==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373352505", "bodyText": "nit: I'd suggest breaking this into two separate cases so that the user doesn't have to guess what was inconsistent. Also, can we include the expected value?", "author": "hachikuji", "createdAt": "2020-01-31T07:54:01Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -704,7 +712,12 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n         public void handle(SyncGroupResponse syncResponse,\n                            RequestFuture<ByteBuffer> future) {\n             Errors error = syncResponse.error();\n-            if (error == Errors.NONE) {\n+            if (isProtocolTypeInconsistent(syncResponse.data.protocolType())\n+                || isProtocolNameInconsistent(syncResponse.data.protocolName())) {\n+                log.debug(\"SyngGroup failed: Received inconsistent ProtocolType ({}) and/or ProtocolName ({})\",", "originalCommit": "f3457905bf31539a59db5888b912aa812880b1fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMjkxOQ==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373512919", "bodyText": "That makes sense. I will also include the expected value.", "author": "dajac", "createdAt": "2020-01-31T14:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MjUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1NDczOQ==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373354739", "bodyText": "I think the error code should take precedence over this validation. Perhaps we do this only when the error is NONE? Similarly for the JoinGroup response.", "author": "hachikuji", "createdAt": "2020-01-31T08:01:43Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -704,7 +712,12 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n         public void handle(SyncGroupResponse syncResponse,\n                            RequestFuture<ByteBuffer> future) {\n             Errors error = syncResponse.error();\n-            if (error == Errors.NONE) {\n+            if (isProtocolTypeInconsistent(syncResponse.data.protocolType())", "originalCommit": "f3457905bf31539a59db5888b912aa812880b1fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMzMzNw==", "url": "https://github.com/apache/kafka/pull/7994#discussion_r373513337", "bodyText": "You're right. Let me do this.", "author": "dajac", "createdAt": "2020-01-31T14:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1NDczOQ=="}], "type": "inlineReview"}, {"oid": "8c160c96a266767182baaf3885770be9fbce16d9", "url": "https://github.com/apache/kafka/commit/8c160c96a266767182baaf3885770be9fbce16d9", "message": "Address Jason's comments", "committedDate": "2020-01-31T14:51:00Z", "type": "commit"}, {"oid": "6b7813176ef50d117a6f6107f75f989b23fdb7d7", "url": "https://github.com/apache/kafka/commit/6b7813176ef50d117a6f6107f75f989b23fdb7d7", "message": "Make ProtocolType nullable in the JoinGroupResponse", "committedDate": "2020-01-31T16:37:33Z", "type": "commit"}]}