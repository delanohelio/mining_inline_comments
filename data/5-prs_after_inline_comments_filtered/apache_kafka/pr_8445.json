{"pr_number": 8445, "pr_title": "KAFKA-9823: Remember the sent generation for the coordinator request", "pr_createdAt": "2020-04-08T05:39:56Z", "pr_url": "https://github.com/apache/kafka/pull/8445", "timeline": [{"oid": "5e404e2fcdd947a4087d1a5991f95957b3bddfdc", "url": "https://github.com/apache/kafka/commit/5e404e2fcdd947a4087d1a5991f95957b3bddfdc", "message": "first pass", "committedDate": "2020-04-06T23:46:53Z", "type": "commit"}, {"oid": "c5cf2e6e4fa7c4d0921df132c703ba68c84f7cef", "url": "https://github.com/apache/kafka/commit/c5cf2e6e4fa7c4d0921df132c703ba68c84f7cef", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K8405-trigger-rebalance-with-static-member-after-sync", "committedDate": "2020-04-07T17:56:27Z", "type": "commit"}, {"oid": "0df8dc91fa550a5bc22978678431528c7011df35", "url": "https://github.com/apache/kafka/commit/0df8dc91fa550a5bc22978678431528c7011df35", "message": "copy-past all changes", "committedDate": "2020-04-07T18:57:17Z", "type": "commit"}, {"oid": "f40decd96995bd0e6fb86f50cf984beca5cf9ae4", "url": "https://github.com/apache/kafka/commit/f40decd96995bd0e6fb86f50cf984beca5cf9ae4", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K8405-trigger-rebalance-with-static-member-after-sync", "committedDate": "2020-04-07T18:57:31Z", "type": "commit"}, {"oid": "1e1ffb000c3108bed4af134edd14dc34e8e51874", "url": "https://github.com/apache/kafka/commit/1e1ffb000c3108bed4af134edd14dc34e8e51874", "message": "remember generation", "committedDate": "2020-04-07T20:49:44Z", "type": "commit"}, {"oid": "29570b2e79e0ffc021f545974f3f29d39a948163", "url": "https://github.com/apache/kafka/commit/29570b2e79e0ffc021f545974f3f29d39a948163", "message": "rebase from trunk", "committedDate": "2020-04-08T03:54:56Z", "type": "commit"}, {"oid": "ea6dbfc3e026f2ebcd9e1708c6133f1b26dc70e7", "url": "https://github.com/apache/kafka/commit/ea6dbfc3e026f2ebcd9e1708c6133f1b26dc70e7", "message": "add unit tests", "committedDate": "2020-04-08T05:25:58Z", "type": "commit"}, {"oid": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "url": "https://github.com/apache/kafka/commit/69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "message": "checkstyle fixes", "committedDate": "2020-04-08T05:31:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNjk3OA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405806978", "bodyText": "Why could we still survive from a fenced instance id in commit request?", "author": "abbccdda", "createdAt": "2020-04-08T20:51:16Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1190,8 +1200,16 @@ public void handle(OffsetCommitResponse commitResponse, RequestFuture<Void> futu\n                             future.raise(error);\n                             return;\n                         } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                            log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                            future.raise(error);\n+                            log.info(\"OffsetCommit failed with {} due to group instance id {} fenced\", sentGeneration, rebalanceConfig.groupInstanceId);\n+\n+                            // if the generation has changed, do not raise the fatal error but rebalance-in-progress\n+                            if (generationUnchanged()) {", "originalCommit": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NjIxNg==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409046216", "bodyText": "No we could not \"survive\", the point of throwing RebalanceInProgress is not to survive, but to give a different error case to the caller that it do not necessarily have to exit as zombie but could retry.", "author": "guozhangwang", "createdAt": "2020-04-15T18:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNjk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzY0OA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405807648", "bodyText": "In other response handlers, we combine UNKNOWN_MEMBER_ID and ILLEGAL_GENERATION cases. Do you think we could also consolidate here as well?", "author": "abbccdda", "createdAt": "2020-04-08T20:52:31Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1061,16 +1082,36 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 requestRejoin();\n                 future.raise(error);\n             } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} is not valid, resetting generation\", sentGeneration);\n+                    resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} is not valid, ignoring the error\", sentGeneration);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} gets fenced with group instance id {}\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} gets fenced with group instance id {}, \" +\n+                        \"ignoring the error\", sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {", "originalCommit": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MjkxMw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408382913", "bodyText": "Yes, I agree we should try to consolidate. Looking at this handler alone, we have basically the same code for ILLEGAL_GENERATION, UNKNOWN_MEMBER_ID, and FENCED_INSTANCE_ID.", "author": "hachikuji", "createdAt": "2020-04-14T19:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTQ5OQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409045499", "bodyText": "SG, let me try it out.", "author": "guozhangwang", "createdAt": "2020-04-15T18:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTI2MA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405809260", "bodyText": "Could we extract the group setup logics until the coordinator.ensureActiveGroup();, they seem to be redundant to repeat a couple of times.", "author": "abbccdda", "createdAt": "2020-04-08T20:55:31Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -465,6 +465,188 @@ public void testSyncGroupRequestWithFencedInstanceIdException() {\n         assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n     }\n \n+    @Test\n+    public void testJoinGroupUnknownMemberResponseWithOldGeneration() {", "originalCommit": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0ODgyMg==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409048822", "bodyText": "Good point, will try it out.", "author": "guozhangwang", "createdAt": "2020-04-15T18:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTgwNA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r405811804", "bodyText": "I don't think this generation object is protected by synchronized block.", "author": "abbccdda", "createdAt": "2020-04-08T21:00:02Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1135,14 +1145,14 @@ public void onComplete(Map<TopicPartition, OffsetAndMetadata> offsets, Exception\n         log.trace(\"Sending OffsetCommit request with {} to coordinator {}\", offsets, coordinator);\n \n         return client.send(coordinator, builder)\n-                .compose(new OffsetCommitResponseHandler(offsets));\n+                .compose(new OffsetCommitResponseHandler(offsets, generation));", "originalCommit": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4NjUyMQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408386521", "bodyText": "Since we're accessing a local variable, I don't think we need synchronization. Note generationIfStable is synchronized though.", "author": "hachikuji", "createdAt": "2020-04-14T19:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0MTQ0Mg==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409041442", "bodyText": "The generation object is immutable, so as long as we get a reference of it we do not need synchronization anymore.", "author": "guozhangwang", "createdAt": "2020-04-15T18:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MjcyNw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408382727", "bodyText": "Not sure why we ignore fenced errors here but not in the JoinGroup/SyncGroup handlers.", "author": "hachikuji", "createdAt": "2020-04-14T19:29:41Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1061,16 +1082,36 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 requestRejoin();\n                 future.raise(error);\n             } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} is not valid, resetting generation\", sentGeneration);\n+                    resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error\n+                    log.info(\"Attempt to heartbeat failed since old {} is not valid, ignoring the error\", sentGeneration);\n+                    future.complete(null);\n+                }\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed since current {} gets fenced with group instance id {}\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n+                    future.raise(error);\n+                } else {\n+                    // if the generation has changed, then ignore this error", "originalCommit": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NDYxMg==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409044612", "bodyText": "As explained in the PR description, I intentionally make the logic differently: the rationale is that for join / sync we should only have one request in-flight at a given time, and at that time if the generation has changed it should be from the heartbeat error handling that resets it; for this case this client should have not re-joined and replaced its member.id, so if the error returns it still indicates another member with the same instance.id has replaced the member.id.\nFor heartbeat though, we've observed it is possible that, 1) heartbeat sent, 2) the same member rejoins group, gets a new member.id, 3) the previous heartbeat is handled and the error set. In this case we should not treat it as fatal.", "author": "guozhangwang", "createdAt": "2020-04-15T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MjcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MzE3Mw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r408383173", "bodyText": "Should we make these methods synchronized?", "author": "hachikuji", "createdAt": "2020-04-14T19:30:31Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1449,4 +1500,12 @@ final boolean hasUnknownGeneration() {\n     final boolean hasValidMemberId() {\n         return generation != Generation.NO_GENERATION && generation.hasMemberId();\n     }\n+\n+    final void setNewGeneration(final Generation generation) {", "originalCommit": "69de4bd2ebf46ce9d60eee7c56dc6345ebf8ebff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0NTMwMw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409045303", "bodyText": "These functions are only used in non-integration unit tests so I think it is not necessary. LMK if you have a strong motivation?", "author": "guozhangwang", "createdAt": "2020-04-15T18:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NTM5NA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409145394", "bodyText": "Just because they are exposed. If they ultimately got used in unit tests involving concurrent threads, we would need them to be synchronized. Seems there's no downside to being on the safe side?", "author": "hachikuji", "createdAt": "2020-04-15T21:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0Njg3Mg==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409146872", "bodyText": "Yup I think so, let me synchronize this then :)", "author": "guozhangwang", "createdAt": "2020-04-15T21:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MzE3Mw=="}], "type": "inlineReview"}, {"oid": "a431d3cd775cd1e627c0f75aa0558a20c79c8b3d", "url": "https://github.com/apache/kafka/commit/a431d3cd775cd1e627c0f75aa0558a20c79c8b3d", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K9823-check-generation", "committedDate": "2020-04-15T18:13:47Z", "type": "commit"}, {"oid": "c37e9f7aebc655350052ec1e1ac940e6ec018d12", "url": "https://github.com/apache/kafka/commit/c37e9f7aebc655350052ec1e1ac940e6ec018d12", "message": "github comments", "committedDate": "2020-04-15T19:03:05Z", "type": "commit"}, {"oid": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "url": "https://github.com/apache/kafka/commit/d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "message": "minor refacotring on unit tests and github comments", "committedDate": "2020-04-15T22:29:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzODA0NA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409238044", "bodyText": "Hey @guozhangwang.\nTrying to understand if any of these changes have implications for the WorkerCoordinator too.\nWhat I've observed is that if the WorkerCoordinator fails to receive a valid SyncGroup request, it may miss several generations until it succeeds again. Is the branch here safe? resetGenerationOnResponseError will be called (and therefore rejoin will be requested) only if generationUnchanged returns true. Is there any risk that we suppress any useful retries to rejoin?", "author": "kkonstantine", "createdAt": "2020-04-16T02:07:20Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -737,16 +751,21 @@ public void handle(SyncGroupResponse syncResponse,\n                     log.debug(\"SyncGroup failed because the group began another rebalance\");\n                     future.raise(error);\n                 } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                    log.error(\"Received fatal exception: group.instance.id gets fenced\");\n+                    // for sync-group request, even if the generation has changed we would not expect the instance id\n+                    // gets fenced, and hence we always treat this as a fatal error\n+                    log.error(\"SyncGroup failed with {} due to group.instance.id {} gets fenced\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n                     future.raise(error);\n                 } else if (error == Errors.UNKNOWN_MEMBER_ID\n                         || error == Errors.ILLEGAL_GENERATION) {\n-                    log.debug(\"SyncGroup failed: {}\", error.message());\n-                    resetGenerationOnResponseError(ApiKeys.SYNC_GROUP, error);\n+                    log.info(\"SyncGroup failed with {}: {}, would request re-join\", sentGeneration, error.message());\n+                    if (generationUnchanged())", "originalCommit": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MTUwNQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409851505", "bodyText": "The rationale is that if the generation has changed, it is either reset by the heartbeat thread in which case the generation is reset and rejoin is already requested, or it is changed by another join-group request; but since inside AbstractCoordinator we will only have one in-flight request at a given time the second scenario should not happen. So the only possibility is the heartbeat resetting.", "author": "guozhangwang", "createdAt": "2020-04-16T21:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzODA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzMyNA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r411123324", "bodyText": "Makes sense. Thanks", "author": "kkonstantine", "createdAt": "2020-04-20T06:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzODA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzOTY2OQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409239669", "bodyText": "nit: would request re-join or will request re-join?\nMore importantly the log message is outside of the if branch below. But if generationUnchanged() is false, then re-join won't be requested, at least not by calling resetGenerationOnResponseError -> resetGeneration -> rejoinNeeded = true;. a) is that safe (as I ask below) b) is the log message printed accurate if there's a chance that re-join is not requested (accuracy of log messages is very crucial here, because usually that's all we have when troubleshooting rebalances).", "author": "kkonstantine", "createdAt": "2020-04-16T02:13:10Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -737,16 +751,21 @@ public void handle(SyncGroupResponse syncResponse,\n                     log.debug(\"SyncGroup failed because the group began another rebalance\");\n                     future.raise(error);\n                 } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                    log.error(\"Received fatal exception: group.instance.id gets fenced\");\n+                    // for sync-group request, even if the generation has changed we would not expect the instance id\n+                    // gets fenced, and hence we always treat this as a fatal error\n+                    log.error(\"SyncGroup failed with {} due to group.instance.id {} gets fenced\",\n+                        sentGeneration, rebalanceConfig.groupInstanceId);\n                     future.raise(error);\n                 } else if (error == Errors.UNKNOWN_MEMBER_ID\n                         || error == Errors.ILLEGAL_GENERATION) {\n-                    log.debug(\"SyncGroup failed: {}\", error.message());\n-                    resetGenerationOnResponseError(ApiKeys.SYNC_GROUP, error);\n+                    log.info(\"SyncGroup failed with {}: {}, would request re-join\", sentGeneration, error.message());", "originalCommit": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MjY2NQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409852665", "bodyText": "Note on the caller joinGroupIfNeeded, when the future fails (here, with either illegal generation and unknown member) then the the join-group would be resent. The only thing we skip is the resetting of the generation since it has already changed.", "author": "guozhangwang", "createdAt": "2020-04-16T21:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzOTY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTQ4MQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r411125481", "bodyText": "Not sure how this comment was changed, but this still doesn't read well for me.\nStill seems that the message should say ... will request re-join\"", "author": "kkonstantine", "createdAt": "2020-04-20T06:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIzOTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTA0Ng==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409885046", "bodyText": "If the consumer has been legitimately fenced, is it safe to rejoin the group after resetting the member id? Would that not lead to a ping-pong scenario?", "author": "hachikuji", "createdAt": "2020-04-16T22:28:19Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1060,17 +1081,20 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 log.info(\"Attempt to heartbeat failed since group is rebalancing\");\n                 requestRejoin();\n                 future.raise(error);\n-            } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n-            } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n-            } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+            } else if (error == Errors.ILLEGAL_GENERATION ||\n+                       error == Errors.UNKNOWN_MEMBER_ID ||\n+                       error == Errors.FENCED_INSTANCE_ID) {", "originalCommit": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NjcyNw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409896727", "bodyText": "Note since we set the InstanceFenced error in future, and hence in the caller:\nfinal RuntimeException exception = future.exception();\n                log.info(\"Join group failed with {}\", exception.toString());\n                resetJoinGroupFuture();\n                if (exception instanceof UnknownMemberIdException ||\n                    exception instanceof RebalanceInProgressException ||\n                    exception instanceof IllegalGenerationException ||\n                    exception instanceof MemberIdRequiredException)\n                    continue;\n                else if (!future.isRetriable())\n                    throw exception;\n\nWe would throw that retriable exception still.", "author": "guozhangwang", "createdAt": "2020-04-16T22:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODA0NQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409888045", "bodyText": "nit: can fix the grammar a little\n\nAttempt to join group with generation {} failed because the group instance id {} has been fenced by another instance.\n\nSimilarly for a couple below", "author": "hachikuji", "createdAt": "2020-04-16T22:36:16Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -617,7 +624,10 @@ public void handle(JoinGroupResponse joinResponse, RequestFuture<ByteBuffer> fut\n                 log.debug(\"Attempt to join group failed due to obsolete coordinator information: {}\", error.message());\n                 future.raise(error);\n             } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n+                // for join-group request, even if the generation has changed we would not expect the instance id\n+                // gets fenced, and hence we always treat this as a fatal error\n+                log.error(\"Attempt to join group failed due to group instance id {} gets fenced with {}\",", "originalCommit": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODkyNw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409888927", "bodyText": "nit: seems the original was a little more accurate? The response did not fail; it just contained an error indicating the request had failed.", "author": "hachikuji", "createdAt": "2020-04-16T22:38:43Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1013,10 +1036,10 @@ public void handle(LeaveGroupResponse leaveResponse, RequestFuture<Void> future)\n \n             final Errors error = leaveResponse.error();\n             if (error == Errors.NONE) {\n-                log.debug(\"LeaveGroup request returned successfully\");\n+                log.debug(\"LeaveGroup response with {} returned successfully: {}\", sentGeneration, response);\n                 future.complete(null);\n             } else {\n-                log.error(\"LeaveGroup request failed with error: {}\", error.message());\n+                log.error(\"LeaveGroup response with {} failed with error: {}\", sentGeneration, error.message());", "originalCommit": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTkzNA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r409889934", "bodyText": "nit: Could we just use the error code in this message? Otherwise we get weird messages like this\n\nAttempt to heartbeat failed with generation .. due to The coordinator is not aware of this member, resetting generation.", "author": "hachikuji", "createdAt": "2020-04-16T22:41:22Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.java", "diffHunk": "@@ -1060,17 +1081,20 @@ public void handle(HeartbeatResponse heartbeatResponse, RequestFuture<Void> futu\n                 log.info(\"Attempt to heartbeat failed since group is rebalancing\");\n                 requestRejoin();\n                 future.raise(error);\n-            } else if (error == Errors.ILLEGAL_GENERATION) {\n-                log.info(\"Attempt to heartbeat failed since generation {} is not current\", sentGeneration.generationId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n-            } else if (error == Errors.FENCED_INSTANCE_ID) {\n-                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n-                future.raise(error);\n-            } else if (error == Errors.UNKNOWN_MEMBER_ID) {\n-                log.info(\"Attempt to heartbeat failed since member id {} is not valid.\", sentGeneration.memberId);\n-                resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);\n-                future.raise(error);\n+            } else if (error == Errors.ILLEGAL_GENERATION ||\n+                       error == Errors.UNKNOWN_MEMBER_ID ||\n+                       error == Errors.FENCED_INSTANCE_ID) {\n+                if (generationUnchanged()) {\n+                    log.info(\"Attempt to heartbeat failed with generation {} and group instance id {} due to {}, resetting generation\",", "originalCommit": "d04ae3b1a5fa2a7f53f5b888b7e6f33e57237617", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e32dc60147706ec00e1e07f5853f8d49120d3b00", "url": "https://github.com/apache/kafka/commit/e32dc60147706ec00e1e07f5853f8d49120d3b00", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K9823-check-generation", "committedDate": "2020-04-16T22:57:50Z", "type": "commit"}, {"oid": "2793e1eee6d0018ed9858aa20094783456844a17", "url": "https://github.com/apache/kafka/commit/2793e1eee6d0018ed9858aa20094783456844a17", "message": "github comments", "committedDate": "2020-04-17T18:11:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MDc3MA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r413250770", "bodyText": "nit: after.. what? I think you can drop \"in time after.\" Here is the assertion that is used:\n            assertThat(\"Condition not met within timeout \" + maxWaitMs + \". \" + conditionDetails,\n                testCondition.conditionMet());", "author": "hachikuji", "createdAt": "2020-04-22T19:14:30Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java", "diffHunk": "@@ -466,24 +477,193 @@ public void testSyncGroupRequestWithFencedInstanceIdException() {\n     }\n \n     @Test\n-    public void testHeartbeatUnknownMemberResponseDuringRebalancing() throws InterruptedException {\n+    public void testJoinGroupUnknownMemberResponseWithOldGeneration() throws InterruptedException {\n         setupCoordinator();\n-        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n+        joinGroup();\n \n-        final int generation = 1;\n+        final AbstractCoordinator.Generation currGen = coordinator.generation();\n \n-        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupRequest.UNKNOWN_MEMBER_ID, Errors.NONE));\n-        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n+        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n \n-        coordinator.ensureActiveGroup();\n+        TestUtils.waitForCondition(() -> !mockClient.requests().isEmpty(), 2000,\n+            \"The join-group request was not sent in time after\");", "originalCommit": "2793e1eee6d0018ed9858aa20094783456844a17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyNzg4Mw==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414027883", "bodyText": "Ack.", "author": "guozhangwang", "createdAt": "2020-04-23T18:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MDc3MA=="}], "type": "inlineReview"}, {"oid": "c6240896f7a1691b882d6de1d9d9821bdadc6806", "url": "https://github.com/apache/kafka/commit/c6240896f7a1691b882d6de1d9d9821bdadc6806", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K9823-check-generation", "committedDate": "2020-04-23T18:30:14Z", "type": "commit"}, {"oid": "fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c", "url": "https://github.com/apache/kafka/commit/fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c", "message": "github comments", "committedDate": "2020-04-23T18:32:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODc3Ng==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414898776", "bodyText": "This seems a bit misleading, because the consumer is not actually participating in an ongoing rebalance (yet)", "author": "ableegoldman", "createdAt": "2020-04-24T22:31:04Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.java", "diffHunk": "@@ -1209,9 +1227,18 @@ public void handle(OffsetCommitResponse commitResponse, RequestFuture<Void> futu\n                             return;\n                         } else if (error == Errors.UNKNOWN_MEMBER_ID\n                                 || error == Errors.ILLEGAL_GENERATION) {\n-                            // need to reset generation and re-join group\n-                            resetGenerationOnResponseError(ApiKeys.OFFSET_COMMIT, error);\n-                            future.raise(new CommitFailedException());\n+                            log.info(\"OffsetCommit failed with {}: {}\", sentGeneration, error.message());\n+\n+                            // only need to reset generation and re-join group if generation has not changed;\n+                            // otherwise only raise rebalance-in-progress error\n+                            if (generationUnchanged()) {\n+                                resetGenerationOnResponseError(ApiKeys.OFFSET_COMMIT, error);\n+                                future.raise(new CommitFailedException());\n+                            } else {\n+                                future.raise(new RebalanceInProgressException(\"Offset commit cannot be completed since the \" +", "originalCommit": "fc4c6888df3cc6dcfe6e88bb35bd9bb13f0cda0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMDA3MA==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414900070", "bodyText": "@guozhangwang can you elaborate on why we don't just throw CommitFailedException here? It seems like it must be the case that the caller is a zombie and should get that exception to alert it, not the RebalanceInProgressException which seems to indicate it might be recoverable", "author": "ableegoldman", "createdAt": "2020-04-24T22:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMjI3NQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414912275", "bodyText": "If the generation has changed since the commit request is sent, then it is likely that it has participated in a new rebalance (and hence get a new generation), or it has reset its generation due to the heartbeat failure. So this commit failure is recoverable.", "author": "guozhangwang", "createdAt": "2020-04-24T23:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxOTI4NQ==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414919285", "bodyText": "Chatted about this offline, will just leave the concrete proposal here:\n...\n} else {\n    if (state == MemberState.REBALANCING) {\n        future.raise(new RebalanceInProgressException(...)\n    } else {\n        future.raise(new CommitFailedException(...)\n    }\n}", "author": "ableegoldman", "createdAt": "2020-04-24T23:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMTc0Ng==", "url": "https://github.com/apache/kafka/pull/8445#discussion_r414921746", "bodyText": "The reasoning being that we use CommitFailedException to signal we have dropped out of the group, and RebalanceInProgressException to signal that a rebalance is in progress. There are two cases to consider (within the general case of the generation having changed):\n\nIf the generation is unknown and the state is STABLE this means we have dropped out of the group, but haven't yet rejoined and haven't invoked onPartitionsLost --> should throw CommitFailed\nIf the generation is unknown and the state is REBALANCING this means we dropped out of the group, but have already noticed and rejoined, and already invoked onPartitionsLost --> should throw RebalanceInProgress\n\nNote that if we dropped out of the group and already completed the rejoin, the state will be STABLE again but the generation will also have been set so this case does not apply. Basically, we want to keep CommitFailedException to indicate that the consumer definitely dropped out and will have to rejoin, which is the case in 1. above", "author": "ableegoldman", "createdAt": "2020-04-24T23:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODc3Ng=="}], "type": "inlineReview"}]}