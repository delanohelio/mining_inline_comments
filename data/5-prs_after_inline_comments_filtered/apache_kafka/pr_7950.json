{"pr_number": 7950, "pr_title": "KAFKA-9419: Integer Overflow Possible with CircularIterator", "pr_createdAt": "2020-01-13T21:16:38Z", "pr_url": "https://github.com/apache/kafka/pull/7950", "timeline": [{"oid": "bf49fbbd6067d233fe84ef7574efe5b6dc6fcd64", "url": "https://github.com/apache/kafka/commit/bf49fbbd6067d233fe84ef7574efe5b6dc6fcd64", "message": "KAFKA-9419: Integer Overflow Possible with CircularIterator", "committedDate": "2020-03-02T16:02:29Z", "type": "commit"}, {"oid": "417ea8b6bb93d4e908200d9cd8fea40b99b765b5", "url": "https://github.com/apache/kafka/commit/417ea8b6bb93d4e908200d9cd8fea40b99b765b5", "message": "Added JavaDoc. Support null values in the underlying collection", "committedDate": "2020-03-02T16:02:29Z", "type": "commit"}, {"oid": "f8998d2c3b03fab3dbc8cd19b579d1bcdb6dc5d6", "url": "https://github.com/apache/kafka/commit/f8998d2c3b03fab3dbc8cd19b579d1bcdb6dc5d6", "message": "Always return true for hasNext(). Add more JavaDoc", "committedDate": "2020-03-02T16:02:29Z", "type": "commit"}, {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75", "url": "https://github.com/apache/kafka/commit/b2a23493bc3205d13035704bbb7edcdb020d9f75", "message": "Use an advance method to load next value and always return true in hasNext()", "committedDate": "2020-03-02T16:37:43Z", "type": "commit"}, {"oid": "b2a23493bc3205d13035704bbb7edcdb020d9f75", "url": "https://github.com/apache/kafka/commit/b2a23493bc3205d13035704bbb7edcdb020d9f75", "message": "Use an advance method to load next value and always return true in hasNext()", "committedDate": "2020-03-02T16:37:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MzQ3OQ==", "url": "https://github.com/apache/kafka/pull/7950#discussion_r386593479", "bodyText": "Could combine these into a single testCycleCollection() method if you put a null value in the list (e.g. \"A\", null, \"C\") and for every one of the 4 positions (0-2 and cycling back to 0) you also check the peek() value.  I think it would be clearer compared to what you have currently since the last 2 methods you have now are a bit haphazard.", "author": "rondagostino", "createdAt": "2020-03-02T19:13:09Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.Test;\n+\n+public class CircularIteratorTest {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testNullCollection() {\n+        new CircularIterator<>(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testEmptyCollection() {\n+        new CircularIterator<>(Collections.emptyList());\n+    }\n+\n+    @Test()\n+    public void testCycleCollection() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", \"B\", \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"B\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+    }\n+\n+    @Test()\n+    public void testPeekCollection() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", \"B\", \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+\n+        assertEquals(\"B\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertTrue(it.hasNext());\n+    }\n+\n+    @Test()\n+    public void testPeekCollectionNullValue() {\n+        final CircularIterator<String> it = new CircularIterator<>(Arrays.asList(\"A\", null, \"C\"));\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"A\", it.next());\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.peek());\n+        assertTrue(it.hasNext());\n+        assertEquals(null, it.next());\n+\n+        assertTrue(it.hasNext());\n+        assertEquals(\"C\", it.next());\n+    }", "originalCommit": "b2a23493bc3205d13035704bbb7edcdb020d9f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4520f19ad54d9a792aa904edd67c7690c685bacf", "url": "https://github.com/apache/kafka/commit/4520f19ad54d9a792aa904edd67c7690c685bacf", "message": "Simplify test suite", "committedDate": "2020-03-03T19:00:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNzY2MA==", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417807660", "bodyText": "no need to use this. outside the constructor.\nHere and below", "author": "kkonstantine", "createdAt": "2020-04-30T07:25:19Z", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,89 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T nextValue;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n+        this.nextValue = advance();\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n         return true;\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n+        final T next = this.nextValue;", "originalCommit": "4520f19ad54d9a792aa904edd67c7690c685bacf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwNzkxOA==", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417807918", "bodyText": "same comment on this. as above.", "author": "kkonstantine", "createdAt": "2020-04-30T07:25:48Z", "path": "clients/src/main/java/org/apache/kafka/common/utils/CircularIterator.java", "diffHunk": "@@ -14,36 +14,89 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.kafka.common.utils;\n \n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n-import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * An iterator that cycles through the {@code Iterator} of a {@code Collection}\n+ * indefinitely. Useful for tasks such as round-robin load balancing. This class\n+ * does not provide thread-safe access. This {@code Iterator} supports\n+ * {@code null} elements in the underlying {@code Collection}. This\n+ * {@code Iterator} does not support any modification to the underlying\n+ * {@code Collection} after it has been wrapped by this class. Changing the\n+ * underlying {@code Collection} may cause a\n+ * {@link ConcurrentModificationException} or some other undefined behavior.\n+ */\n public class CircularIterator<T> implements Iterator<T> {\n-    int i = 0;\n-    private List<T> list;\n \n-    public CircularIterator(List<T> list) {\n-        if (list.isEmpty()) {\n+    private final Iterable<T> iterable;\n+    private Iterator<T> iterator;\n+    private T nextValue;\n+\n+    /**\n+     * Create a new instance of a CircularIterator. The ordering of this\n+     * Iterator will be dictated by the Iterator returned by Collection itself.\n+     *\n+     * @param col The collection to iterate indefinitely\n+     *\n+     * @throws NullPointerException if col is {@code null}\n+     * @throws IllegalArgumentException if col is empty.\n+     */\n+    public CircularIterator(final Collection<T> col) {\n+        this.iterable = Objects.requireNonNull(col);\n+        this.iterator = col.iterator();\n+        if (col.isEmpty()) {\n             throw new IllegalArgumentException(\"CircularIterator can only be used on non-empty lists\");\n         }\n-        this.list = list;\n+        this.nextValue = advance();\n     }\n \n+    /**\n+     * Returns true since the iteration will forever cycle through the provided\n+     * {@code Collection}.\n+     *\n+     * @return Always true\n+     */\n     @Override\n     public boolean hasNext() {\n         return true;\n     }\n \n     @Override\n     public T next() {\n-        T next = list.get(i);\n-        i = (i + 1) % list.size();\n+        final T next = this.nextValue;\n+        this.nextValue = advance();\n         return next;\n     }\n \n+    /**\n+     * Return the next value in the {@code Iterator}, restarting the\n+     * {@code Iterator} if necessary.\n+     *\n+     * @return The next value in the iterator\n+     */\n+    private T advance() {\n+        if (!this.iterator.hasNext()) {", "originalCommit": "4520f19ad54d9a792aa904edd67c7690c685bacf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwOTc3Mw==", "url": "https://github.com/apache/kafka/pull/7950#discussion_r417809773", "bodyText": "assertThrows is what we use for some time now, and it's available to the branches that this PR will be backported. (same below)", "author": "kkonstantine", "createdAt": "2020-04-30T07:29:09Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/CircularIteratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.common.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.Test;\n+\n+public class CircularIteratorTest {\n+\n+    @Test(expected = NullPointerException.class)", "originalCommit": "4520f19ad54d9a792aa904edd67c7690c685bacf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "01eb7d185f13e143f27a3265b8a59d326c38ee75", "url": "https://github.com/apache/kafka/commit/01eb7d185f13e143f27a3265b8a59d326c38ee75", "message": "Use assertThrows in tests and remove redundant 'this' identifier", "committedDate": "2020-05-06T18:00:07Z", "type": "commit"}]}