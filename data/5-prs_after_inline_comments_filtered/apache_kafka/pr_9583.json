{"pr_number": 9583, "pr_title": "[KAFKA-10705]: Make state stores not readable by others", "pr_createdAt": "2020-11-10T16:26:57Z", "pr_url": "https://github.com/apache/kafka/pull/9583", "timeline": [{"oid": "79f387cc7f3307d621a38bf139b32a8593a43814", "url": "https://github.com/apache/kafka/commit/79f387cc7f3307d621a38bf139b32a8593a43814", "message": "make state store more secure", "committedDate": "2020-11-10T17:15:32Z", "type": "commit"}, {"oid": "79f387cc7f3307d621a38bf139b32a8593a43814", "url": "https://github.com/apache/kafka/commit/79f387cc7f3307d621a38bf139b32a8593a43814", "message": "make state store more secure", "committedDate": "2020-11-10T17:15:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDAzMw==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520860033", "bodyText": "Recently, we prefer to use assertThat() instead of assertEquals().", "author": "cadonna", "createdAt": "2020-11-10T20:40:20Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "diffHunk": "@@ -106,6 +110,27 @@ public void shouldCreateBaseDirectory() {\n         assertTrue(appDir.isDirectory());\n     }\n \n+    @Test\n+    public void shouldHaveSecurePermissions() {\n+        final Set<PosixFilePermission> expectedPermissions = EnumSet.of(\n+            PosixFilePermission.OWNER_EXECUTE,\n+            PosixFilePermission.GROUP_READ,\n+            PosixFilePermission.OWNER_WRITE,\n+            PosixFilePermission.GROUP_EXECUTE,\n+            PosixFilePermission.OWNER_READ);\n+\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Path basePath = Paths.get(appDir.getPath());\n+        try {\n+            final Set<PosixFilePermission> baseFilePermissions = Files.getPosixFilePermissions(statePath);\n+            final Set<PosixFilePermission> appFilePermissions = Files.getPosixFilePermissions(basePath);\n+            assertEquals(expectedPermissions, baseFilePermissions);\n+            assertEquals(expectedPermissions, appFilePermissions);", "originalCommit": "79f387cc7f3307d621a38bf139b32a8593a43814", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MjYxMg==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r520862612", "bodyText": "If we swallow the exception here, and the test always throws an IO exception, we will never notice. I guess it would be better to use fail() with a message.", "author": "cadonna", "createdAt": "2020-11-10T20:45:03Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java", "diffHunk": "@@ -106,6 +110,27 @@ public void shouldCreateBaseDirectory() {\n         assertTrue(appDir.isDirectory());\n     }\n \n+    @Test\n+    public void shouldHaveSecurePermissions() {\n+        final Set<PosixFilePermission> expectedPermissions = EnumSet.of(\n+            PosixFilePermission.OWNER_EXECUTE,\n+            PosixFilePermission.GROUP_READ,\n+            PosixFilePermission.OWNER_WRITE,\n+            PosixFilePermission.GROUP_EXECUTE,\n+            PosixFilePermission.OWNER_READ);\n+\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Path basePath = Paths.get(appDir.getPath());\n+        try {\n+            final Set<PosixFilePermission> baseFilePermissions = Files.getPosixFilePermissions(statePath);\n+            final Set<PosixFilePermission> appFilePermissions = Files.getPosixFilePermissions(basePath);\n+            assertEquals(expectedPermissions, baseFilePermissions);\n+            assertEquals(expectedPermissions, appFilePermissions);\n+        } catch (final IOException e) {\n+            // okay", "originalCommit": "79f387cc7f3307d621a38bf139b32a8593a43814", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d0909d8a23bfc259b6b91568f444f93db9c82261", "url": "https://github.com/apache/kafka/commit/d0909d8a23bfc259b6b91568f444f93db9c82261", "message": "clean up testing language", "committedDate": "2020-11-10T21:42:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r522514992", "bodyText": "Just wondering, why \"read\" and \"execute\" permissions for the group?", "author": "ableegoldman", "createdAt": "2020-11-12T23:53:18Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java", "diffHunk": "@@ -102,6 +107,15 @@ public StateDirectory(final StreamsConfig config, final Time time, final boolean\n             log.warn(\"Using /tmp directory in the state.dir property can cause failures with writing the checkpoint file\" +\n                 \" due to the fact that this directory can be cleared by the OS\");\n         }\n+        final Path basePath = Paths.get(baseDir.getPath());\n+        final Path statePath = Paths.get(stateDir.getPath());\n+        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");", "originalCommit": "d0909d8a23bfc259b6b91568f444f93db9c82261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3MDYwOA==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r522770608", "bodyText": "I thought it would be handy to be able to log into a node to debug state store issues, e.g., with some RocksDB command line tools, with a user that is able to read not able to write, i.e., is in the group but it is not the owner.", "author": "cadonna", "createdAt": "2020-11-13T08:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NTIyMQ==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523055221", "bodyText": "I agree with what Bruno said for the reading. I think allowing execute for group members isn't a security risk, since it's still somewhat contained. I ran the streams test without having execute for group and I got an exception in StreamTableJoinTopologyOptimizationIntegrationTest test shouldDoStreamTableJoinWithDifferentNumberOfPartitions. It looks like the integration test utils weren't able to clear the directory because groups didn't have execute authorization. Since it doesn't seem like allowing groups to execute would constitute a security risk, it seems like this is a good thing to keep for testing capabilities", "author": "lct45", "createdAt": "2020-11-13T16:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzMDEzNg==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523130136", "bodyText": "I ran the streams test without having execute for group and I got an exception in StreamTableJoinTopologyOptimizationIntegrationTest test\n\nI've noticed that test is actually pretty flaky at the moment, IIRC it's been due to a Directory not empty exception). So the failure you saw might not be related to this PR. I'm pretty sure it's write permissions, not execute, that let you delete files within a directory. Execute just lets you cd in and traverse the directory. So I guess read+execute does make sense here, and probably we wouldn't want anyone other than the owner to be able to clear the directory anyway", "author": "ableegoldman", "createdAt": "2020-11-13T18:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzNzg3Nw==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523137877", "bodyText": "Hmm yeah that was the exception so it probably wasn't related to this PR. I would err on the side of leaving those permissions but can take them out if you think that's better", "author": "lct45", "createdAt": "2020-11-13T18:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0MjYwMA==", "url": "https://github.com/apache/kafka/pull/9583#discussion_r523142600", "bodyText": "No I think this looks ok, just wanted to ask", "author": "ableegoldman", "createdAt": "2020-11-13T18:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNDk5Mg=="}], "type": "inlineReview"}]}