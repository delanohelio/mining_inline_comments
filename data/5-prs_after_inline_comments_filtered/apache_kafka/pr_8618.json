{"pr_number": 8618, "pr_title": "KAFKA-9955: Prevent SinkTask::close from shadowing other exceptions", "pr_createdAt": "2020-05-05T03:58:33Z", "pr_url": "https://github.com/apache/kafka/pull/8618", "timeline": [{"oid": "1a2cdbb3a7783aed97683dbbe4b855562f18fd9e", "url": "https://github.com/apache/kafka/commit/1a2cdbb3a7783aed97683dbbe4b855562f18fd9e", "message": "KAFKA-9955: Prevent SinkTask::close from shadowing other exceptions\n\n* Catches exceptions from SinkTask::close call in WorkerSinkTask\n* Logs exception at ERROR level but does not propagate exception upward\n* Add unit test that throws exceptions in put and close to verify that\n  the exception from put is propagated out of WorkerSinkTask::execute\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T04:00:51Z", "type": "commit"}, {"oid": "1a2cdbb3a7783aed97683dbbe4b855562f18fd9e", "url": "https://github.com/apache/kafka/commit/1a2cdbb3a7783aed97683dbbe4b855562f18fd9e", "message": "KAFKA-9955: Prevent SinkTask::close from shadowing other exceptions\n\n* Catches exceptions from SinkTask::close call in WorkerSinkTask\n* Logs exception at ERROR level but does not propagate exception upward\n* Add unit test that throws exceptions in put and close to verify that\n  the exception from put is propagated out of WorkerSinkTask::execute\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T04:00:51Z", "type": "forcePushed"}, {"oid": "f78e306b8020588f1bb70cd090f7bd4fe475d5fb", "url": "https://github.com/apache/kafka/commit/f78e306b8020588f1bb70cd090f7bd4fe475d5fb", "message": "Move error handling for close exceptions up to WorkerSinkTask::execute\n\nThis avoids swallowing exceptions that would have stopped the task in absence of an exception from start or put.\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T05:16:21Z", "type": "commit"}, {"oid": "8a614c197a98744d40274d0e4a2b1f15c4db5523", "url": "https://github.com/apache/kafka/commit/8a614c197a98744d40274d0e4a2b1f15c4db5523", "message": "Remove unnecessary checkstyle suppression\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T05:21:22Z", "type": "commit"}, {"oid": "709b49364676cb21dd64a0a3e45febdbf5b3fcbd", "url": "https://github.com/apache/kafka/commit/709b49364676cb21dd64a0a3e45febdbf5b3fcbd", "message": "Move test from ErrorHandlingTaskTest to WorkerSinkTaskTest\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T06:06:57Z", "type": "commit"}, {"oid": "b12f65a3c929207ca61deca4946fe9fbd942f7e1", "url": "https://github.com/apache/kafka/commit/b12f65a3c929207ca61deca4946fe9fbd942f7e1", "message": "Format whitespace and add comments\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T06:14:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0ODIwNQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420248205", "bodyText": "If we're going to refer to this later while making assertions, a more descriptive name might help readability. Something like putFailure here and closeFailure below, maybe?", "author": "C0urante", "createdAt": "2020-05-05T16:36:55Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java", "diffHunk": "@@ -856,6 +857,49 @@ public void run() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testSinkTasksHandleCloseErrors() throws Exception {\n+        createTask(initialState);\n+        expectInitializeTask();\n+        expectTaskGetTopic(true);\n+\n+        // Put one message through the task to get some offsets to commit\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        sinkTask.put(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andVoid();\n+\n+        // Throw an exception on the next put to trigger shutdown behavior\n+        // This exception is the true \"cause\" of the failure\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        Throwable a = new RuntimeException();", "originalCommit": "b12f65a3c929207ca61deca4946fe9fbd942f7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzMyOA==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420253328", "bodyText": "The call to fail() above is going to get caught here, isn't it? Think that might make this difficult to debug if a future change causes this to fail for some reason.\nBased on the deliverMessages method where SinkTask::put is invoked, it looks like we might be able to narrow this down to a ConnectException.", "author": "C0urante", "createdAt": "2020-05-05T16:44:53Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java", "diffHunk": "@@ -856,6 +857,49 @@ public void run() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testSinkTasksHandleCloseErrors() throws Exception {\n+        createTask(initialState);\n+        expectInitializeTask();\n+        expectTaskGetTopic(true);\n+\n+        // Put one message through the task to get some offsets to commit\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        sinkTask.put(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andVoid();\n+\n+        // Throw an exception on the next put to trigger shutdown behavior\n+        // This exception is the true \"cause\" of the failure\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        Throwable a = new RuntimeException();\n+        sinkTask.put(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andThrow(a);\n+\n+        // Throw another exception while closing the task's assignment\n+        EasyMock.expect(sinkTask.preCommit(EasyMock.anyObject()))\n+            .andStubReturn(Collections.emptyMap());\n+        Throwable b = new RuntimeException();\n+        sinkTask.close(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andThrow(b);\n+\n+        PowerMock.replayAll();\n+\n+        workerTask.initialize(TASK_CONFIG);\n+        try {\n+            workerTask.execute();\n+            fail();\n+        } catch (Throwable t) {", "originalCommit": "b12f65a3c929207ca61deca4946fe9fbd942f7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1NTE5MQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420255191", "bodyText": "Might be better to use this text as the message for the assertions instead of putting it here as a comment?", "author": "C0urante", "createdAt": "2020-05-05T16:47:57Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java", "diffHunk": "@@ -856,6 +857,49 @@ public void run() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testSinkTasksHandleCloseErrors() throws Exception {\n+        createTask(initialState);\n+        expectInitializeTask();\n+        expectTaskGetTopic(true);\n+\n+        // Put one message through the task to get some offsets to commit\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        sinkTask.put(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andVoid();\n+\n+        // Throw an exception on the next put to trigger shutdown behavior\n+        // This exception is the true \"cause\" of the failure\n+        expectConsumerPoll(1);\n+        expectConversionAndTransformation(1);\n+        Throwable a = new RuntimeException();\n+        sinkTask.put(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andThrow(a);\n+\n+        // Throw another exception while closing the task's assignment\n+        EasyMock.expect(sinkTask.preCommit(EasyMock.anyObject()))\n+            .andStubReturn(Collections.emptyMap());\n+        Throwable b = new RuntimeException();\n+        sinkTask.close(EasyMock.anyObject());\n+        PowerMock.expectLastCall().andThrow(b);\n+\n+        PowerMock.replayAll();\n+\n+        workerTask.initialize(TASK_CONFIG);\n+        try {\n+            workerTask.execute();\n+            fail();\n+        } catch (Throwable t) {\n+            PowerMock.verifyAll();\n+            // The exception from close should not shadow the exception from put.", "originalCommit": "b12f65a3c929207ca61deca4946fe9fbd942f7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5231460f7e457a7af733e770df9af7c60ae9c7db", "url": "https://github.com/apache/kafka/commit/5231460f7e457a7af733e770df9af7c60ae9c7db", "message": "Catch only ConnectException and improve assertions on thrown exceptions\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T17:12:30Z", "type": "commit"}, {"oid": "c7f293aa2b9e3a56a4a0ff9020759f891a7b174c", "url": "https://github.com/apache/kafka/commit/c7f293aa2b9e3a56a4a0ff9020759f891a7b174c", "message": "Move verifyAll back to catch statement to avoid shadowing test exceptions\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T17:22:14Z", "type": "commit"}, {"oid": "a4deafc55e3ba2330690949e8ed78c7cdc1f0ef6", "url": "https://github.com/apache/kafka/commit/a4deafc55e3ba2330690949e8ed78c7cdc1f0ef6", "message": "Add message to fail call\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-05T17:24:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4ODg1Mw==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420288853", "bodyText": "I am not sure I understand how the suppressed exception is logged and not just silently swallowed? Do we need to call  getSuppressed and log those somewhere or use one of those closeQuietly methods on Utils?", "author": "ncliang", "createdAt": "2020-05-05T17:38:25Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -193,13 +194,11 @@ public void transitionTo(TargetState state) {\n     @Override\n     public void execute() {\n         initializeAndStart();\n-        try {\n+        // Make sure any uncommitted data has been committed and the task has\n+        // a chance to clean up its state\n+        try (QuietClosable ignored = this::closePartitions) {", "originalCommit": "a4deafc55e3ba2330690949e8ed78c7cdc1f0ef6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5ODA4MQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420298081", "bodyText": "This PR is not changing any of the printing logic, and that's still handled by the caller, WorkerTask::doRun. This is roughly what a suppressed exception looks like when it gets logged (from the test setup, not a live connector):\norg.apache.kafka.connect.errors.ConnectException: Exiting WorkerSinkTask due to unrecoverable exception.\n\tat org.apache.kafka.connect.runtime.WorkerSinkTask.deliverMessages(WorkerSinkTask.java:569)\n\tat org.apache.kafka.connect.runtime.WorkerSinkTask.poll(WorkerSinkTask.java:327)\n\tat org.apache.kafka.connect.runtime.WorkerSinkTask.iteration(WorkerSinkTask.java:229)\n\tat org.apache.kafka.connect.runtime.WorkerSinkTask.execute(WorkerSinkTask.java:201)\n\t<snipped>\n\tSuppressed: java.lang.RuntimeException\n\t\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:46)\n\t\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:101)\n\t\tat org.easymock.internal.ClassProxyFactory$MockMethodInterceptor.intercept(ClassProxyFactory.java:97)\n\t\tat org.apache.kafka.connect.sink.SinkTask$$EnhancerByCGLIB$$713f645b.close(&lt;generated&gt;)\n\t\tat org.apache.kafka.connect.runtime.WorkerSinkTask.commitOffsets(WorkerSinkTask.java:402)\n\t\tat org.apache.kafka.connect.runtime.WorkerSinkTask.closePartitions(WorkerSinkTask.java:599)\n\t\tat org.apache.kafka.connect.runtime.WorkerSinkTask.execute(WorkerSinkTask.java:202)\n\t\t... 57 more\nCaused by: java.lang.RuntimeException\n\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:46)\n\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:101)\n\tat org.easymock.internal.ClassProxyFactory$MockMethodInterceptor.intercept(ClassProxyFactory.java:68)\n\tat org.apache.kafka.connect.sink.SinkTask$$EnhancerByCGLIB$$713f645b.put(&lt;generated&gt;)\n\tat org.apache.kafka.connect.runtime.WorkerSinkTask.deliverMessages(WorkerSinkTask.java:547)\n\t... 60 more\n\nSuppressed exceptions are a native Java feature, and log4j supports printing their stacktraces.", "author": "gharris1727", "createdAt": "2020-05-05T17:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4ODg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NTc0Mg==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420895742", "bodyText": "Again naming here can be misleading. ignored is more like unused in the try block.\nBut also that's not the point of this idiom. It's about suppressing exceptions from finally instead of the originator.\nHow about suppressible? Also, unused might be even better, because ignored is untrue especially if closePartitions is the only method that throws. But I think suppressible highlights the intentions here specifically.", "author": "kkonstantine", "createdAt": "2020-05-06T15:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4ODg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1MDY0Nw==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420950647", "bodyText": "I used ignored as a way to trigger the IDE to avoid highlighting the unused variable.\nI can change this to suppressible since the behavior is better described (suppressible \"if another exception occurs first\").", "author": "gharris1727", "createdAt": "2020-05-06T17:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4ODg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4OTY0NQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420889645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public interface QuietClosable extends AutoCloseable {\n          \n          \n            \n                public interface QuietClosable extends AutoCloseable {\n          \n      \n    \n    \n  \n\nI don't think the name is very accurate. The interface does not prevent implementation of close from throwing (as opposed to the methods below) and its demonstrated use does not either. (there's also a typo, if typos in non-words matter).\nHow about UncheckedCloseable?", "author": "kkonstantine", "createdAt": "2020-05-06T15:36:46Z", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -885,6 +885,18 @@ public static void closeAll(Closeable... closeables) throws IOException {\n             throw exception;\n     }\n \n+    /**\n+     * An {@link AutoCloseable} interface without a throws clause in the signature\n+     *\n+     * This is used with lambda expressions in try-with-resources clauses\n+     * to avoid casting un-checked exceptions to checked exceptions unnecessarily.\n+     */\n+    @FunctionalInterface\n+    public interface QuietClosable extends AutoCloseable {", "originalCommit": "a4deafc55e3ba2330690949e8ed78c7cdc1f0ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5OTM5Mw==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420899393", "bodyText": "Can you also write a test where an exception is thrown only by sinkTask.close? Actually, we could keep the name for this new test here as is, and the new test could be named in a way that tells us that the exceptions on close are suppressed in the presence of exceptions in the main try block.", "author": "kkonstantine", "createdAt": "2020-05-06T15:50:29Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java", "diffHunk": "@@ -856,6 +858,47 @@ public void run() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testSinkTasksHandleCloseErrors() throws Exception {", "originalCommit": "a4deafc55e3ba2330690949e8ed78c7cdc1f0ef6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5ODM2OQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r420998369", "bodyText": "Ive written the test as described, and verified that the exception from close is caught by WorkerTask::doRun.\nHowever, it never gets wrapped in a ConnectException like exceptions from the other connector methods, but i'm not sure that it's in-scope to change this in this PR.", "author": "gharris1727", "createdAt": "2020-05-06T18:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5OTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNTE1Ng==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r421005156", "bodyText": "Let me see if I understand what you are describing as wrapped.\nMy use case is as follows:\nSinkTask#close attempts to release resources and if it fails it throws a ConnectException as we'd expect from connector developers to do (currently it throws a RuntimeException which might be less representative).\nWith your fix this exception can appear as suppressed when an exception happens in SinkTask#put and that's what your test is guarding against.\nMy point is to add the missing test case for when the exception on close is the only exception that is thrown. There is a variety of ways to do that, but I agree with you, this test is not there now. However, I don't think this necessarily makes it out of scope.", "author": "kkonstantine", "createdAt": "2020-05-06T18:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5OTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTQ5MQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r421009491", "bodyText": "I added that test, so please look at the diff.\nBy wrapping, i'm completely disregarding the behavior from the connector, I'm only discussing the additional layers of exceptions added by the framework before printing.\nAt the moment, the RuntimeException from put is wrapped by a ConnectException, but the RuntimeException from close is never wrapped in a ConnectException. I'm questioning whether this is the ideal behavior, and whether we should add that wrapping layer, or consider it out-of-scope for this PR.", "author": "gharris1727", "createdAt": "2020-05-06T18:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5OTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4ODE1OQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r421188159", "bodyText": "That's the testing I had in mind. That's great.\nNo need to change the exception type right now.", "author": "kkonstantine", "createdAt": "2020-05-07T01:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5OTM5Mw=="}], "type": "inlineReview"}, {"oid": "0fb51bb40693eac39f296a47192177cacc7da58c", "url": "https://github.com/apache/kafka/commit/0fb51bb40693eac39f296a47192177cacc7da58c", "message": "Rename QuietClosable to UncheckedCloseable\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-06T17:29:45Z", "type": "commit"}, {"oid": "26237f8d6c9067e488b63f48337b957b108c1838", "url": "https://github.com/apache/kafka/commit/26237f8d6c9067e488b63f48337b957b108c1838", "message": "Rename ignored to suppressible\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-06T17:30:31Z", "type": "commit"}, {"oid": "e41bc8f889505c3275f9036d2570c4ae19d8408d", "url": "https://github.com/apache/kafka/commit/e41bc8f889505c3275f9036d2570c4ae19d8408d", "message": "Add test for exceptions thrown only from close\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-05-06T17:30:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4OTEyMg==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r421189122", "bodyText": "Although I dig supressible with 1 p, like \"sup? exception what are you up to?\"\nI'm afraid I'll have to abide by the usual rules and recommend: suppressible here \ud83d\ude04\n(probably the IDE will complain about a typo too).", "author": "kkonstantine", "createdAt": "2020-05-07T01:38:37Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -193,13 +194,11 @@ public void transitionTo(TargetState state) {\n     @Override\n     public void execute() {\n         initializeAndStart();\n-        try {\n+        // Make sure any uncommitted data has been committed and the task has\n+        // a chance to clean up its state\n+        try (UncheckedCloseable supressible = this::closePartitions) {", "originalCommit": "e41bc8f889505c3275f9036d2570c4ae19d8408d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODg2MQ==", "url": "https://github.com/apache/kafka/pull/8618#discussion_r421798861", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try (UncheckedCloseable supressible = this::closePartitions) {\n          \n          \n            \n                    try (UncheckedCloseable suppressible = this::closePartitions) {", "author": "gharris1727", "createdAt": "2020-05-07T21:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4OTEyMg=="}], "type": "inlineReview"}, {"oid": "44de87f505e42fadf7d5ed548d2f43a21cb8e4c5", "url": "https://github.com/apache/kafka/commit/44de87f505e42fadf7d5ed548d2f43a21cb8e4c5", "message": "Fix typo", "committedDate": "2020-05-07T21:15:36Z", "type": "commit"}]}