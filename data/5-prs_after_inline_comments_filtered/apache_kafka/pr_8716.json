{"pr_number": 8716, "pr_title": "KAFKA-6145: KIP-441: Fix assignor config passthough", "pr_createdAt": "2020-05-22T16:47:44Z", "pr_url": "https://github.com/apache/kafka/pull/8716", "timeline": [{"oid": "3c8426c3678dfff53a49327bc7a98be5dff90da5", "url": "https://github.com/apache/kafka/commit/3c8426c3678dfff53a49327bc7a98be5dff90da5", "message": "KAFKA-6145: KIP-441: Fix assignor config passthough", "committedDate": "2020-05-27T14:33:35Z", "type": "commit"}, {"oid": "94194f2f6cc87a202266fbabfe426f8bc4fb09aa", "url": "https://github.com/apache/kafka/commit/94194f2f6cc87a202266fbabfe426f8bc4fb09aa", "message": "fix test", "committedDate": "2020-05-27T14:44:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNjM5MA==", "url": "https://github.com/apache/kafka/pull/8716#discussion_r431326390", "bodyText": "\ud83e\udd26\u200d\u2640\ufe0f", "author": "ableegoldman", "createdAt": "2020-05-27T17:43:43Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java", "diffHunk": "@@ -874,7 +874,7 @@\n         public static final String TIME = \"__time__\";\n \n         // This is settable in the main Streams config, but it's a private API for testing\n-        public static final String ASSIGNMENT_LISTENER = \"__asignment.listener__\";", "originalCommit": "94194f2f6cc87a202266fbabfe426f8bc4fb09aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMjM4Ng==", "url": "https://github.com/apache/kafka/pull/8716#discussion_r431332386", "bodyText": "Should we also validate that the task assignor gets passed through? We could even pass in a custom assignor and use that to verify the correct assignor configs got passed through.\nOf course, reflection black magic-ry is just more fun \ud83d\ude42", "author": "ableegoldman", "createdAt": "2020-05-27T17:51:43Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/TaskAssignorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.integration;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.consumer.ConsumerPartitionAssignor;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.StreamsBuilder;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.integration.utils.EmbeddedKafkaCluster;\n+import org.apache.kafka.streams.integration.utils.IntegrationTestUtils;\n+import org.apache.kafka.streams.processor.internals.StreamThread;\n+import org.apache.kafka.streams.processor.internals.StreamsPartitionAssignor;\n+import org.apache.kafka.streams.processor.internals.assignment.AssignorConfiguration;\n+import org.apache.kafka.test.IntegrationTest;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import java.lang.reflect.Field;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n+import static org.apache.kafka.common.utils.Utils.mkObjectProperties;\n+import static org.apache.kafka.streams.integration.utils.IntegrationTestUtils.safeUniqueTestName;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.sameInstance;\n+\n+@Category(IntegrationTest.class)\n+public class TaskAssignorIntegrationTest {\n+    @ClassRule\n+    public static final EmbeddedKafkaCluster CLUSTER = new EmbeddedKafkaCluster(1);\n+\n+    @Rule\n+    public TestName testName = new TestName();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void shouldProperlyConfigureTheAssignor() throws NoSuchFieldException, IllegalAccessException {\n+        // This test uses reflection to check and make sure that all the expected configurations really\n+        // make it all the way to configure the task assignor. There's no other use case for being able\n+        // to extract all these fields, so reflection is a good choice until we find that the maintenance\n+        // burden is too high.\n+        //\n+        // Also note that this is an integration test because so many components have to come together to\n+        // ensure these configurations wind up where they belong, and any number of future code changes\n+        // could break this change.\n+\n+        final String testId = safeUniqueTestName(getClass(), testName);\n+        final String appId = \"appId_\" + testId;\n+\n+        IntegrationTestUtils.cleanStateBeforeTest(CLUSTER, \"input\");\n+\n+        // Maybe I'm paranoid, but I don't want the compiler deciding that my lambdas are equal to the identity\n+        // function and defeating my identity check\n+        final AtomicInteger compilerDefeatingReference = new AtomicInteger(0);\n+\n+        // the implementation doesn't matter, we're just going to verify the reference.\n+        final AssignorConfiguration.AssignmentListener configuredAssignmentListener =\n+            stable -> compilerDefeatingReference.incrementAndGet();\n+\n+        final Properties properties = mkObjectProperties(\n+            mkMap(\n+                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers()),\n+                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, appId),\n+                mkEntry(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"5\"),\n+                mkEntry(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, \"6\"),\n+                mkEntry(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG, \"7\"),\n+                mkEntry(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG, \"480000\"),\n+                mkEntry(StreamsConfig.InternalConfig.ASSIGNMENT_LISTENER, configuredAssignmentListener),", "originalCommit": "94194f2f6cc87a202266fbabfe426f8bc4fb09aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MjAxMQ==", "url": "https://github.com/apache/kafka/pull/8716#discussion_r431342011", "bodyText": "Good idea; I'm not sure why I didn't think to do this already. With my newfound understanding of this config translation logic, I'm confident that it gets copied over right now, because it's not a registered config, but a regression test would be nice.\nI'll quickly follow up with a separate PR so that I can merge this one.", "author": "vvcephei", "createdAt": "2020-05-27T18:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMjM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0OTkwNQ==", "url": "https://github.com/apache/kafka/pull/8716#discussion_r431349905", "bodyText": "Sounds good. Thanks for the fix!", "author": "ableegoldman", "createdAt": "2020-05-27T18:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzMjM4Ng=="}], "type": "inlineReview"}]}