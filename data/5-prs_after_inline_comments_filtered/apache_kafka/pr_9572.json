{"pr_number": 9572, "pr_title": "KAFKA-10500: Thread Cache Resizes", "pr_createdAt": "2020-11-06T18:48:33Z", "pr_url": "https://github.com/apache/kafka/pull/9572", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTMxNw==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r519049317", "bodyText": "I am not sure if I should just expose cache or pass it along. It is about 4 levels deep", "author": "wcarlson5", "createdAt": "2020-11-06T23:09:50Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -589,6 +589,10 @@ private void subscribeConsumer() {\n         }\n     }\n \n+    public void resizeCache(final long size) {\n+        taskManager.resizeCache(size);", "originalCommit": "68113b842861d85bda4616ad3d5c2f3a5e4adab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ5ODU2NA==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520498564", "bodyText": "I am in favour of keeping a reference to the thread cache in the StreamThread and do the re-sizing here. I think it makes the code a bit easier to follow.\nYou will need synchronization, because the thread that will add the new stream thread will also resize the thread caches.", "author": "cadonna", "createdAt": "2020-11-10T11:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5OTc5Mw==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520699793", "bodyText": "Are the thread caches not independent of each other? Also I was not planning on having the new thread resize the cache but the calling thread do so", "author": "wcarlson5", "createdAt": "2020-11-10T16:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1MTMwNA==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r521251304", "bodyText": "I was not planning on having the new thread resize the cache but the calling thread do so\n\nThat is what I am saying \"the thread that will add the new stream thread\" is the calling thread. The new stream thread cannot resize the caches of the other stream threads because it is not aware of the other stream threads. Still we need synchronization because the calling thread will access and modify the thread caches of all stream threads and all stream threads will access and modify their own thread cache during normal processing.", "author": "cadonna", "createdAt": "2020-11-11T10:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0OTQxOQ==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r521449419", "bodyText": "I'm not sure I follow. If we make it so that each thread is responsible for resizing their own independent cache then why would the method need to synchronized as each call should not affect the others. And if one thread does all the work there should only be one call. Unless you are thinking about multiple threads adding threads at the same time?\nMaybe I don't understand how the cache is set up well enough?", "author": "wcarlson5", "createdAt": "2020-11-11T15:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5MjI5NQ==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r523292295", "bodyText": "Talked about off line. The named cache is already synchronized. Also made max cache size volatile", "author": "wcarlson5", "createdAt": "2020-11-13T23:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NDQyMA==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520444420", "bodyText": "I see that this check was there before, but I actually think it is not needed because the configs are validated and there CACHE_MAX_BYTES_BUFFERING_CONFIG is specified as at least 0.", "author": "cadonna", "createdAt": "2020-11-10T10:14:03Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -806,6 +803,21 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,\n         rocksDBMetricsRecordingService = maybeCreateRocksDBMetricsRecordingService(clientId, config);\n     }\n \n+    private long getCacheSizePerThread(final int numStreamThreads) {\n+        if (totalCacheSize < 0) {\n+            totalCacheSize = 0L;\n+            log.warn(\"Negative cache size passed in. Reverting to cache size of 0 bytes.\");\n+        }", "originalCommit": "68113b842861d85bda4616ad3d5c2f3a5e4adab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4NjMwNw==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520686307", "bodyText": "good to know", "author": "wcarlson5", "createdAt": "2020-11-10T16:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NDQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NTc4Nw==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520445787", "bodyText": "I think this can be a final long if we remove the check as I proposed below.", "author": "cadonna", "createdAt": "2020-11-10T10:16:03Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -155,6 +155,7 @@\n     private final StreamsMetricsImpl streamsMetrics;\n     private final ProcessorTopology taskTopology;\n     private final ProcessorTopology globalTaskTopology;\n+    private Long totalCacheSize;", "originalCommit": "68113b842861d85bda4616ad3d5c2f3a5e4adab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4NjQ5NQ==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520686495", "bodyText": "yes it can", "author": "wcarlson5", "createdAt": "2020-11-10T16:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNDcyOQ==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520504729", "bodyText": "This loop has the disadvantage that it first evict entries of one named cache, if all entries are evicted and we still need to free space, it starts to evict entries of the next named cache etc. I guess it would be better to avoid such a skewed emission of records to downstream by continuously iterating over the named caches and evict one entry at a time from each named cache until enough space is freed.", "author": "cadonna", "createdAt": "2020-11-10T11:52:37Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/ThreadCache.java", "diffHunk": "@@ -71,6 +71,16 @@ public long flushes() {\n         return numFlushes;\n     }\n \n+    public void resize(final long maxCacheSizeBytes) {\n+        final boolean shrink = maxCacheSizeBytes < this.maxCacheSizeBytes;\n+        this.maxCacheSizeBytes = maxCacheSizeBytes;\n+        if (shrink) {\n+            for (final NamedCache cache : caches.values()) {\n+                maybeEvict(cache.name());\n+            }", "originalCommit": "68113b842861d85bda4616ad3d5c2f3a5e4adab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5MzEzMg==", "url": "https://github.com/apache/kafka/pull/9572#discussion_r520693132", "bodyText": "I would expect it to take a bit to repopulate the cache to be balanced but you are right it probably better to do so evenly", "author": "wcarlson5", "createdAt": "2020-11-10T16:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNDcyOQ=="}], "type": "inlineReview"}, {"oid": "ecb17f434fc6c08e5810e14ff668d9ef0c67f9f5", "url": "https://github.com/apache/kafka/commit/ecb17f434fc6c08e5810e14ff668d9ef0c67f9f5", "message": "ThreadCache Resizes", "committedDate": "2020-11-18T17:12:30Z", "type": "commit"}, {"oid": "41c9dca704b5541b267692dac07c033ba119dfa4", "url": "https://github.com/apache/kafka/commit/41c9dca704b5541b267692dac07c033ba119dfa4", "message": "fix typo", "committedDate": "2020-11-18T17:12:30Z", "type": "commit"}, {"oid": "a2d3b0fb2f30ba66b13955c80bbc83ce255336bc", "url": "https://github.com/apache/kafka/commit/a2d3b0fb2f30ba66b13955c80bbc83ce255336bc", "message": "address comments and evenly clear cache", "committedDate": "2020-11-18T17:12:30Z", "type": "commit"}, {"oid": "eade1c7ece7a7cc92349a95d69e90ad56696402d", "url": "https://github.com/apache/kafka/commit/eade1c7ece7a7cc92349a95d69e90ad56696402d", "message": "make final", "committedDate": "2020-11-18T17:12:30Z", "type": "commit"}, {"oid": "cb8078f5a018d0d2b49b7282afea9c508f72ae94", "url": "https://github.com/apache/kafka/commit/cb8078f5a018d0d2b49b7282afea9c508f72ae94", "message": "comments", "committedDate": "2020-11-18T17:12:30Z", "type": "commit"}, {"oid": "1ed3914fc618d769fd01d4996b2c2af5e915ca55", "url": "https://github.com/apache/kafka/commit/1ed3914fc618d769fd01d4996b2c2af5e915ca55", "message": "make maxCacheSize volatile and wrapped thread cache", "committedDate": "2020-11-18T17:27:57Z", "type": "commit"}, {"oid": "d7a3edb35789bcd28867a3312bbd2e3656d9a175", "url": "https://github.com/apache/kafka/commit/d7a3edb35789bcd28867a3312bbd2e3656d9a175", "message": "change to consumer", "committedDate": "2020-11-18T17:27:57Z", "type": "commit"}, {"oid": "53d92c5a7faed35d9771434d8d71777a3ceccf31", "url": "https://github.com/apache/kafka/commit/53d92c5a7faed35d9771434d8d71777a3ceccf31", "message": "improved names and checks", "committedDate": "2020-11-18T17:27:57Z", "type": "commit"}, {"oid": "c4b78e59ba44c1f0f84ffa4d5f484e8a07cf4081", "url": "https://github.com/apache/kafka/commit/c4b78e59ba44c1f0f84ffa4d5f484e8a07cf4081", "message": "couple of comments", "committedDate": "2020-11-18T17:29:47Z", "type": "commit"}, {"oid": "2698000507c8e675b247dc7dbbd3a60cbe39bbdf", "url": "https://github.com/apache/kafka/commit/2698000507c8e675b247dc7dbbd3a60cbe39bbdf", "message": "make helper for cache size", "committedDate": "2020-11-18T17:29:47Z", "type": "commit"}, {"oid": "26fb2a9c206178db3a248807c5f8fb114deb844f", "url": "https://github.com/apache/kafka/commit/26fb2a9c206178db3a248807c5f8fb114deb844f", "message": "remove this", "committedDate": "2020-11-18T17:29:47Z", "type": "commit"}, {"oid": "b69b6b256f77448097a144f5f9ef0e14fed1445f", "url": "https://github.com/apache/kafka/commit/b69b6b256f77448097a144f5f9ef0e14fed1445f", "message": "remove redundant check", "committedDate": "2020-11-18T17:29:48Z", "type": "commit"}]}