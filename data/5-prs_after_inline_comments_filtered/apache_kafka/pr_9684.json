{"pr_number": 9684, "pr_title": "KAFKA-10764: Add support for returning topic IDs on create, supplying topic IDs for delete", "pr_createdAt": "2020-12-04T00:19:12Z", "pr_url": "https://github.com/apache/kafka/pull/9684", "timeline": [{"oid": "f983256d5bae1c354bfb0fb84ee8f08ff4989896", "url": "https://github.com/apache/kafka/commit/f983256d5bae1c354bfb0fb84ee8f08ff4989896", "message": "Returns topic ID in CreateTopicsResponse", "committedDate": "2020-12-01T17:38:45Z", "type": "commit"}, {"oid": "8b14ab47fe4ef3b7b0418ab125eda17ebc96e506", "url": "https://github.com/apache/kafka/commit/8b14ab47fe4ef3b7b0418ab125eda17ebc96e506", "message": "DeleteTopicsRequest allows for specifying topic IDs", "committedDate": "2020-12-03T22:31:10Z", "type": "commit"}, {"oid": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e", "url": "https://github.com/apache/kafka/commit/b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e", "message": "Fix some typos, correctly add/remove topic Ids in MockAdminClient, fix comments", "committedDate": "2020-12-04T00:11:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r546852777", "bodyText": "I noticed all these comments say \"If broker version doesn't support replication factor in the response...\" should each actually say whatever the method is returning (numPartitions, topicId, etc.)", "author": "jolshan", "createdAt": "2020-12-21T18:08:04Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/CreateTopicsResult.java", "diffHunk": "@@ -68,6 +69,19 @@ protected CreateTopicsResult(Map<String, KafkaFuture<TopicMetadataAndConfig>> fu\n         return futures.get(topic).thenApply(TopicMetadataAndConfig::config);\n     }\n \n+    /**\n+     * Returns a future that provides topic ID for the topic when the request completes.\n+     * <p>\n+     * If broker version doesn't support replication factor in the response, throw\n+     * {@link org.apache.kafka.common.errors.UnsupportedVersionException}.\n+     * If broker returned an error for topic configs, throw appropriate exception. For example,\n+     * {@link org.apache.kafka.common.errors.TopicAuthorizationException} is thrown if user does not\n+     * have permission to describe topic configs.\n+     */\n+    public KafkaFuture<Uuid> topicId(String topic) {\n+        return futures.get(topic).thenApply(TopicMetadataAndConfig::topicId);\n+    }\n+    \n     /**\n      * Returns a future that provides number of partitions in the topic when the request completes.", "originalCommit": "b8c1a0a8c8c7e33e7d260835c11b0590384c8e3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2NjUzMA==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564866530", "bodyText": "In the create result, we wouldn't see UnsupportedVersionException for topicId() just because topic ids are not enabled, would we?", "author": "rajinisivaram", "createdAt": "2021-01-26T22:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkwODQ4Ng==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564908486", "bodyText": "I think we could either do that or just return Uuid.ZERO_UUID", "author": "jolshan", "createdAt": "2021-01-26T23:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTE5MDU3Nw==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r565190577", "bodyText": "Returning Uuid.ZERO_UUID should be fine. The comment just seems odd, I am not sure why we have it that way in the other methods.", "author": "rajinisivaram", "createdAt": "2021-01-27T10:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0ODUxNA==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r565448514", "bodyText": "I thought it was odd too.", "author": "jolshan", "createdAt": "2021-01-27T16:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1Mjc3Nw=="}], "type": "inlineReview"}, {"oid": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "url": "https://github.com/apache/kafka/commit/bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "message": "Fixes to json files and handling in KafkaApis", "committedDate": "2020-12-22T19:29:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzE0Ng==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550837146", "bodyText": "Should this be UnknownTopicIdException?", "author": "dengziming", "createdAt": "2021-01-02T03:24:08Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1623,6 +1625,32 @@ public DeleteTopicsResult deleteTopics(final Collection<String> topicNames,\n         return new DeleteTopicsResult(new HashMap<>(topicFutures));\n     }\n \n+    @Override\n+    public DeleteTopicsWithIdsResult deleteTopicsWithIds(final Collection<Uuid> topicIds,\n+                                           final DeleteTopicsOptions options) {\n+        final Map<Uuid, KafkaFutureImpl<Void>> topicFutures = new HashMap<>(topicIds.size());\n+        final List<Uuid> validTopicIds = new ArrayList<>(topicIds.size());\n+        for (Uuid topicId : topicIds) {\n+            if (topicId.equals(Uuid.ZERO_UUID)) {\n+                KafkaFutureImpl<Void> future = new KafkaFutureImpl<>();\n+                future.completeExceptionally(new InvalidTopicException(\"The given topic ID '\" +", "originalCommit": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwNTEwNg==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550905106", "bodyText": "That makes sense.", "author": "jolshan", "createdAt": "2021-01-02T17:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzI3OA==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550837278", "bodyText": "here we'd better use result.topicId() since we are using topicId.", "author": "dengziming", "createdAt": "2021-01-02T03:25:53Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1694,6 +1722,79 @@ void handleFailure(Throwable throwable) {\n             }\n         };\n     }\n+   \n+    private Call getDeleteTopicsWithIdsCall(final DeleteTopicsOptions options,\n+                                     final Map<Uuid, KafkaFutureImpl<Void>> futures,\n+                                     final List<Uuid> topicIds,\n+                                     final Map<Uuid, ThrottlingQuotaExceededException> quotaExceededExceptions,\n+                                     final long now,\n+                                     final long deadline) {\n+        return new Call(\"deleteTopics\", deadline, new ControllerNodeProvider()) {\n+            @Override\n+            DeleteTopicsRequest.Builder createRequest(int timeoutMs) {\n+                return new DeleteTopicsRequest.Builder(\n+                        new DeleteTopicsRequestData()\n+                                .setTopics(topicIds.stream().map(\n+                                    topic -> new DeleteTopicState().setTopicId(topic)).collect(Collectors.toList()))\n+                                .setTimeoutMs(timeoutMs));\n+            }\n+\n+            @Override\n+            void handleResponse(AbstractResponse abstractResponse) {\n+                // Check for controller change\n+                handleNotControllerError(abstractResponse);\n+                // Handle server responses for particular topics.\n+                final DeleteTopicsResponse response = (DeleteTopicsResponse) abstractResponse;\n+                final List<Uuid> retryTopics = new ArrayList<>();\n+                final Map<Uuid, ThrottlingQuotaExceededException> retryTopicQuotaExceededExceptions = new HashMap<>();\n+                for (DeletableTopicResult result : response.data().responses()) {\n+                    KafkaFutureImpl<Void> future = futures.get(result.topicId());\n+                    if (future == null) {\n+                        log.warn(\"Server response mentioned unknown topic {}\", result.name());", "originalCommit": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzc2OA==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550837768", "bodyText": "if topic.name() == null, a NEP will throw here.", "author": "dengziming", "createdAt": "2021-01-02T03:33:30Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/DeleteTopicsRequest.java", "diffHunk": "@@ -39,8 +45,25 @@ public Builder(DeleteTopicsRequestData data) {\n \n         @Override\n         public DeleteTopicsRequest build(short version) {\n+            if (version >= 6 && data.topicNames().size() != 0) {\n+                data.setTopics(groupByTopic(data.topicNames()));\n+            } else if (version >= 6) {\n+                for (DeleteTopicState topic : data.topics()) {\n+                    if (topic.name().equals(\"\")) {", "originalCommit": "bd593cf7dbd2e230fbc8d2adea2dc6adc354b8fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwNTI3OA==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r550905278", "bodyText": "Good point. I think I was assuming the default is the empty string, but someone could set the data field to null.", "author": "jolshan", "createdAt": "2021-01-02T17:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzNzc2OA=="}], "type": "inlineReview"}, {"oid": "7f2ebfbd4a77d290526a680a7b6b6d8730926d4b", "url": "https://github.com/apache/kafka/commit/7f2ebfbd4a77d290526a680a7b6b6d8730926d4b", "message": "Addressed comments, added handling for older IBPs", "committedDate": "2021-01-05T02:19:38Z", "type": "commit"}, {"oid": "4489573eb59577123bc6bd98b4b844c346b0eeb6", "url": "https://github.com/apache/kafka/commit/4489573eb59577123bc6bd98b4b844c346b0eeb6", "message": "Merge branch 'trunk' into KAFKA-10764", "committedDate": "2021-01-05T16:40:33Z", "type": "commit"}, {"oid": "4489573eb59577123bc6bd98b4b844c346b0eeb6", "url": "https://github.com/apache/kafka/commit/4489573eb59577123bc6bd98b4b844c346b0eeb6", "message": "Merge branch 'trunk' into KAFKA-10764", "committedDate": "2021-01-05T16:40:33Z", "type": "forcePushed"}, {"oid": "f1a56cc363a9dec14789332acec891c57ce020d6", "url": "https://github.com/apache/kafka/commit/f1a56cc363a9dec14789332acec891c57ce020d6", "message": "Added to a simple createtopics request test", "committedDate": "2021-01-06T00:42:10Z", "type": "commit"}, {"oid": "afe594afbe39bc4d61d1be947a5568cbb7e34d57", "url": "https://github.com/apache/kafka/commit/afe594afbe39bc4d61d1be947a5568cbb7e34d57", "message": "Removed incorrect test and added error message to clarify unsupported version exception\n Please enter the commit message for your changes. Lines starting", "committedDate": "2021-01-06T21:38:32Z", "type": "forcePushed"}, {"oid": "0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "url": "https://github.com/apache/kafka/commit/0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "message": "Removed incorrect test and added error message to clarify unsupported version exception", "committedDate": "2021-01-06T21:44:37Z", "type": "commit"}, {"oid": "0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "url": "https://github.com/apache/kafka/commit/0dfd4ee84a3e76ce5153816c9e875bcaccac2929", "message": "Removed incorrect test and added error message to clarify unsupported version exception", "committedDate": "2021-01-06T21:44:37Z", "type": "forcePushed"}, {"oid": "f2ef75850d8807dd835cbd4715a60cacdc9c1cc4", "url": "https://github.com/apache/kafka/commit/f2ef75850d8807dd835cbd4715a60cacdc9c1cc4", "message": "Merge branch 'trunk' of github.com:apache/kafka into KAFKA-10764", "committedDate": "2021-01-21T19:14:45Z", "type": "commit"}, {"oid": "40175b371eca4e00b862d127786aece1e5fef02b", "url": "https://github.com/apache/kafka/commit/40175b371eca4e00b862d127786aece1e5fef02b", "message": "Cleanups, added tests for older IBP version", "committedDate": "2021-01-21T22:16:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2Nzg4Mw==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564867883", "bodyText": "nit: indentation", "author": "rajinisivaram", "createdAt": "2021-01-26T22:09:12Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1625,6 +1628,32 @@ public DeleteTopicsResult deleteTopics(final Collection<String> topicNames,\n         return new DeleteTopicsResult(new HashMap<>(topicFutures));\n     }\n \n+    @Override\n+    public DeleteTopicsWithIdsResult deleteTopicsWithIds(final Collection<Uuid> topicIds,\n+                                           final DeleteTopicsOptions options) {", "originalCommit": "40175b371eca4e00b862d127786aece1e5fef02b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2OTUyNw==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564869527", "bodyText": "nit: indentation", "author": "rajinisivaram", "createdAt": "2021-01-26T22:12:30Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java", "diffHunk": "@@ -1696,6 +1725,79 @@ void handleFailure(Throwable throwable) {\n             }\n         };\n     }\n+   \n+    private Call getDeleteTopicsWithIdsCall(final DeleteTopicsOptions options,\n+                                     final Map<Uuid, KafkaFutureImpl<Void>> futures,", "originalCommit": "40175b371eca4e00b862d127786aece1e5fef02b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg3MjIzOQ==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564872239", "bodyText": "nit: isEmpty() instead of .size()?", "author": "rajinisivaram", "createdAt": "2021-01-26T22:17:50Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/DeleteTopicsRequest.java", "diffHunk": "@@ -36,8 +42,25 @@ public Builder(DeleteTopicsRequestData data) {\n \n         @Override\n         public DeleteTopicsRequest build(short version) {\n+            if (version >= 6 && data.topicNames().size() != 0) {", "originalCommit": "40175b371eca4e00b862d127786aece1e5fef02b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg3ODk5OQ==", "url": "https://github.com/apache/kafka/pull/9684#discussion_r564878999", "bodyText": "Doesn't really matter for this test, but perhaps we could use UNKNOWN_TOPIC_ID (multiple tests below)?", "author": "rajinisivaram", "createdAt": "2021-01-26T22:31:07Z", "path": "clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java", "diffHunk": "@@ -919,6 +973,36 @@ public void testDeleteTopicsRetryThrottlingExceptionWhenEnabled() throws Excepti\n             assertNull(result.values().get(\"topic1\").get());\n             assertNull(result.values().get(\"topic2\").get());\n             TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n+            \n+            // With topic IDs\n+            Uuid topicId1 = Uuid.randomUuid();\n+            Uuid topicId2 = Uuid.randomUuid();\n+            Uuid topicId3 = Uuid.randomUuid();\n+            \n+            env.kafkaClient().prepareResponse(\n+                    expectDeleteTopicsRequestWithTopicIds(topicId1, topicId2, topicId3),\n+                    prepareDeleteTopicsResponse(1000,\n+                            deletableTopicResultWithId(topicId1, Errors.NONE),\n+                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED),\n+                            deletableTopicResultWithId(topicId3, Errors.TOPIC_ALREADY_EXISTS)));", "originalCommit": "40175b371eca4e00b862d127786aece1e5fef02b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc", "url": "https://github.com/apache/kafka/commit/d4754e27edb1f3c3969dcbcf28feb6b1eb5b5bfc", "message": "Addressed comments--moved topic ID in create to ZkAdminManager, updated authorization logic", "committedDate": "2021-01-28T02:45:20Z", "type": "commit"}, {"oid": "46b109da445a5a2d51096c4033334e3aeb42a56e", "url": "https://github.com/apache/kafka/commit/46b109da445a5a2d51096c4033334e3aeb42a56e", "message": "fix package name", "committedDate": "2021-01-29T02:45:56Z", "type": "commit"}]}