{"pr_number": 9600, "pr_title": "KAFKA-10674: Controller API version bond with forwardable APIs", "pr_createdAt": "2020-11-16T19:50:48Z", "pr_url": "https://github.com/apache/kafka/pull/9600", "timeline": [{"oid": "a50ac280c6499495c864c4bcd8c833eafcfb1f0d", "url": "https://github.com/apache/kafka/commit/a50ac280c6499495c864c4bcd8c833eafcfb1f0d", "message": "add tests", "committedDate": "2020-11-17T17:25:36Z", "type": "forcePushed"}, {"oid": "3f5eaa12d39fcadbcba05de03aa9538d379a68e0", "url": "https://github.com/apache/kafka/commit/3f5eaa12d39fcadbcba05de03aa9538d379a68e0", "message": "get controller api version and add exceptional api version case for Envelope", "committedDate": "2021-01-04T21:16:08Z", "type": "forcePushed"}, {"oid": "8f9f580119e6a0adafa27b5f979aaa70046814be", "url": "https://github.com/apache/kafka/commit/8f9f580119e6a0adafa27b5f979aaa70046814be", "message": "get controller api version and add exceptional api version case for Envelope", "committedDate": "2021-01-05T01:43:43Z", "type": "forcePushed"}, {"oid": "5a3a545968ec9a6b91b2fcd9a06ce7cdd3299237", "url": "https://github.com/apache/kafka/commit/5a3a545968ec9a6b91b2fcd9a06ce7cdd3299237", "message": "add close connection case for unsupported version", "committedDate": "2021-01-11T21:24:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNTgyNw==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r555415827", "bodyText": "Why move this class?", "author": "hachikuji", "createdAt": "2021-01-12T00:00:32Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiVersion.java", "diffHunk": "@@ -14,10 +14,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.kafka.clients;\n+package org.apache.kafka.common.protocol;", "originalCommit": "5a3a545968ec9a6b91b2fcd9a06ce7cdd3299237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc0MzExMw==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r556743113", "bodyText": "I want to make ApiVersion to be usable for common/message/ApiVersionsResponse", "author": "abbccdda", "createdAt": "2021-01-13T18:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNTgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4NTEyMg==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r557785122", "bodyText": "Ok. I don't have a strong argument to keep it where it is today I guess.", "author": "hachikuji", "createdAt": "2021-01-15T00:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNTgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxODUyNQ==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r555418525", "bodyText": "nit: we could simplify this a little bit. I'd suggest a non-static method. Maybe something like this:\npublic ApiVersion intersect(ApiVersion other) {\n  // verify this.apiKey matches other.apiKey\n  // return intersection as implemented below\n}", "author": "hachikuji", "createdAt": "2021-01-12T00:08:43Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiVersion.java", "diffHunk": "@@ -53,4 +53,18 @@ public String toString() {\n             \", maxVersion= \" + maxVersion +\n             \")\";\n     }\n+\n+    public static ApiVersion versionsInCommon(ApiKeys apiKey, ApiVersion supportedVersions,", "originalCommit": "5a3a545968ec9a6b91b2fcd9a06ce7cdd3299237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI0NTMzNw==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r556245337", "bodyText": "I looked up the usage of this API, it has the external effect to have reference min and max versions. At least the current format is the most straightforward refactoring without the need to create another ApiVersion instance.", "author": "abbccdda", "createdAt": "2021-01-13T03:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxODUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxOTI0NA==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r555419244", "bodyText": "Not totally sure this gets thrown in the right place. If there are no overlapping versions, perhaps we should leave the api out of the result. Perhaps that suggests we should use this definition:\n// Return common api versions or empty if there are none\npublic Optional<ApiVersion> intersect(ApiVersion other);\nThen we can let the caller decide how to handle this case.", "author": "hachikuji", "createdAt": "2021-01-12T00:11:00Z", "path": "clients/src/main/java/org/apache/kafka/common/protocol/ApiVersion.java", "diffHunk": "@@ -53,4 +53,18 @@ public String toString() {\n             \", maxVersion= \" + maxVersion +\n             \")\";\n     }\n+\n+    public static ApiVersion versionsInCommon(ApiKeys apiKey, ApiVersion supportedVersions,\n+                                              short minAllowedVersion, short maxAllowedVersion) {\n+        if (supportedVersions == null)\n+            throw new UnsupportedVersionException(\"The broker does not support \" + apiKey);\n+\n+        short minVersion = (short) Math.max(minAllowedVersion, supportedVersions.minVersion);\n+        short maxVersion = (short) Math.min(maxAllowedVersion, supportedVersions.maxVersion);\n+        if (minVersion > maxVersion)\n+            throw new UnsupportedVersionException(\"The broker does not support \" + apiKey +", "originalCommit": "5a3a545968ec9a6b91b2fcd9a06ce7cdd3299237", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed59610e7696a24536eb448e1573d2f6c49572c9", "url": "https://github.com/apache/kafka/commit/ed59610e7696a24536eb448e1573d2f6c49572c9", "message": "github comment", "committedDate": "2021-01-13T19:34:58Z", "type": "forcePushed"}, {"oid": "669ad39b76d91aa64ed153672d4a8a7b7f8493c8", "url": "https://github.com/apache/kafka/commit/669ad39b76d91aa64ed153672d4a8a7b7f8493c8", "message": "fix api tests", "committedDate": "2021-01-14T20:56:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4MzM5MQ==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r557783391", "bodyText": "nit: since we moved the null check here, why don't we remove the parameter as well and call supportedVersions.get(apiKey) here?", "author": "hachikuji", "createdAt": "2021-01-15T00:20:00Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -123,21 +125,25 @@ public short latestUsableVersion(ApiKeys apiKey) {\n      * Get the latest version supported by the broker within an allowed range of versions\n      */\n     public short latestUsableVersion(ApiKeys apiKey, short oldestAllowedVersion, short latestAllowedVersion) {\n-        ApiVersion usableVersion = supportedVersions.get(apiKey);\n-        if (usableVersion == null)\n-            throw new UnsupportedVersionException(\"The broker does not support \" + apiKey);\n-        return latestUsableVersion(apiKey, usableVersion, oldestAllowedVersion, latestAllowedVersion);\n+        return latestUsableVersion(apiKey, supportedVersions.get(apiKey), oldestAllowedVersion, latestAllowedVersion);\n     }\n \n-    private short latestUsableVersion(ApiKeys apiKey, ApiVersion supportedVersions,\n-                                      short minAllowedVersion, short maxAllowedVersion) {\n-        short minVersion = (short) Math.max(minAllowedVersion, supportedVersions.minVersion);\n-        short maxVersion = (short) Math.min(maxAllowedVersion, supportedVersions.maxVersion);\n-        if (minVersion > maxVersion)\n+    private short latestUsableVersion(ApiKeys apiKey,\n+                                      ApiVersion supportedVersions,\n+                                      short minAllowedVersion,\n+                                      short maxAllowedVersion) {\n+        if (supportedVersions == null)", "originalCommit": "669ad39b76d91aa64ed153672d4a8a7b7f8493c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgxMDkyOQ==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r557810929", "bodyText": "Yea, actually we could remove the private function since it becomes single caller.", "author": "abbccdda", "createdAt": "2021-01-15T01:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4MzM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4Mzg4NQ==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r557783885", "bodyText": "We could probably simplify this so that it takes a single ApiVersion parameter?\nBy the way, the implementation above latestUsableVersion(ApiKeys apiKey) since it basically does an intersection of the latest supported version with itself. A little helper (say latestSupportedOrThrow) might simplify this.", "author": "hachikuji", "createdAt": "2021-01-15T00:21:28Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -123,21 +125,25 @@ public short latestUsableVersion(ApiKeys apiKey) {\n      * Get the latest version supported by the broker within an allowed range of versions\n      */\n     public short latestUsableVersion(ApiKeys apiKey, short oldestAllowedVersion, short latestAllowedVersion) {", "originalCommit": "669ad39b76d91aa64ed153672d4a8a7b7f8493c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4NjUyMg==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r557786522", "bodyText": "Maybe intersectControllerApiVersions?", "author": "hachikuji", "createdAt": "2021-01-15T00:27:27Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -129,6 +131,40 @@ public static ApiVersionsResponseKeyCollection defaultApiKeys(final byte minMagi\n         return apiKeys;\n     }\n \n+    public static ApiVersionsResponseKeyCollection commonApiVersionsWithActiveController(final byte minMagic,", "originalCommit": "669ad39b76d91aa64ed153672d4a8a7b7f8493c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2NjM4Mw==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r558466383", "bodyText": "How about allSupportedApiVersions?", "author": "hachikuji", "createdAt": "2021-01-15T17:46:27Z", "path": "clients/src/main/java/org/apache/kafka/clients/NodeApiVersions.java", "diffHunk": "@@ -227,4 +230,7 @@ public ApiVersion apiVersion(ApiKeys apiKey) {\n         return supportedVersions.get(apiKey);\n     }\n \n+    public Map<ApiKeys, ApiVersion> fullApiVersions() {", "originalCommit": "9a70335129ab52913eed37414f49cc0c00c727d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2OTg4OQ==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r558469889", "bodyText": "Hmm.. I think my suggestion about latestUsableVersion(ApiKeys) was off if we had to remove this. I think I had failed to take into account that NodeApiVersions represented the versions supported by the remote node, so the intersection was in fact necessary. Sorry about that.", "author": "hachikuji", "createdAt": "2021-01-15T17:50:32Z", "path": "clients/src/test/java/org/apache/kafka/clients/NodeApiVersionsTest.java", "diffHunk": "@@ -125,13 +126,6 @@ public void testUsableVersionCalculationNoKnownVersions() {\n             () -> versions.latestUsableVersion(ApiKeys.FETCH));\n     }\n \n-    @Test", "originalCommit": "9a70335129ab52913eed37414f49cc0c00c727d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ4NDYyMw==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r558484623", "bodyText": "No worry, I will revert it", "author": "abbccdda", "createdAt": "2021-01-15T18:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2OTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ3MDgwMw==", "url": "https://github.com/apache/kafka/pull/9600#discussion_r558470803", "bodyText": "nit: maybe add a short javadoc?", "author": "hachikuji", "createdAt": "2021-01-15T17:51:38Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java", "diffHunk": "@@ -129,6 +131,40 @@ public static ApiVersionsResponseKeyCollection defaultApiKeys(final byte minMagi\n         return apiKeys;\n     }\n \n+    public static ApiVersionsResponseKeyCollection intersectControllerApiVersions(final byte minMagic,", "originalCommit": "9a70335129ab52913eed37414f49cc0c00c727d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce8d9a7329ede0e40f6bba01936e1522daeb07a6", "url": "https://github.com/apache/kafka/commit/ce8d9a7329ede0e40f6bba01936e1522daeb07a6", "message": "get controller api version and add exceptional api version case for Envelope", "committedDate": "2021-01-15T20:40:22Z", "type": "commit"}, {"oid": "c4e6f8f4438facefed3921e783ecac0bac6623a0", "url": "https://github.com/apache/kafka/commit/c4e6f8f4438facefed3921e783ecac0bac6623a0", "message": "add close connection case for unsupported version", "committedDate": "2021-01-15T20:40:22Z", "type": "commit"}, {"oid": "8d57e60724d99fa765621c36c9b1cb8671f9f190", "url": "https://github.com/apache/kafka/commit/8d57e60724d99fa765621c36c9b1cb8671f9f190", "message": "github comment", "committedDate": "2021-01-15T20:41:17Z", "type": "commit"}, {"oid": "5bd1d54e5de9c1d30f59157330ef7e77da9978ae", "url": "https://github.com/apache/kafka/commit/5bd1d54e5de9c1d30f59157330ef7e77da9978ae", "message": "fix test", "committedDate": "2021-01-15T20:41:18Z", "type": "commit"}, {"oid": "8fb7130bdce7194d019713bd3d13551e353956b6", "url": "https://github.com/apache/kafka/commit/8fb7130bdce7194d019713bd3d13551e353956b6", "message": "fix api tests", "committedDate": "2021-01-15T20:41:18Z", "type": "commit"}, {"oid": "54fccf1ac60b87323cfa08b585041da80bb52d3f", "url": "https://github.com/apache/kafka/commit/54fccf1ac60b87323cfa08b585041da80bb52d3f", "message": "address comments", "committedDate": "2021-01-15T20:41:36Z", "type": "commit"}, {"oid": "e4edc091f3a0d737235cd2896aee25bb7d2de234", "url": "https://github.com/apache/kafka/commit/e4edc091f3a0d737235cd2896aee25bb7d2de234", "message": "reduce latestUsableVersion check", "committedDate": "2021-01-15T20:41:36Z", "type": "commit"}, {"oid": "9d1a54ef32dd8ae05f0d3e93f6e7d7878c06f990", "url": "https://github.com/apache/kafka/commit/9d1a54ef32dd8ae05f0d3e93f6e7d7878c06f990", "message": "fix test security protocol", "committedDate": "2021-01-15T20:41:36Z", "type": "commit"}, {"oid": "b7ce6984f4329c1435b590ad8cb5df6f5f795de7", "url": "https://github.com/apache/kafka/commit/b7ce6984f4329c1435b590ad8cb5df6f5f795de7", "message": "revert usable version change and address more comments", "committedDate": "2021-01-15T20:42:16Z", "type": "commit"}, {"oid": "cd531d0b485a8780458f02cb10227e89c7268a3d", "url": "https://github.com/apache/kafka/commit/cd531d0b485a8780458f02cb10227e89c7268a3d", "message": "test fix", "committedDate": "2021-01-15T20:42:16Z", "type": "commit"}, {"oid": "cd531d0b485a8780458f02cb10227e89c7268a3d", "url": "https://github.com/apache/kafka/commit/cd531d0b485a8780458f02cb10227e89c7268a3d", "message": "test fix", "committedDate": "2021-01-15T20:42:16Z", "type": "forcePushed"}, {"oid": "af3208a163f84975283c8603142481da8eaa613a", "url": "https://github.com/apache/kafka/commit/af3208a163f84975283c8603142481da8eaa613a", "message": "fix nit", "committedDate": "2021-01-15T21:52:33Z", "type": "commit"}]}