{"pr_number": 4610, "pr_title": "If a method returned by AwaitingLeadershipProxy returns ListenableFuture, the leadership check is also asynchronous", "pr_createdAt": "2020-02-27T18:22:53Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MDA2Ng==", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r385290066", "bodyText": "a consequence of this is that if the get() method is used, we will still always execute on a thread pool.", "author": "j-baker", "createdAt": "2020-02-27T18:25:34Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -40,16 +45,30 @@ public CoalescingSupplier(Supplier<T> delegate) {\n \n     @Override\n     public T get() {\n+        try {\n+            return getAsync().get();", "originalCommit": "f1aa29c023758a39ff11a7b9b8cac44d8ba7b89a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyODA3OA==", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r385328078", "bodyText": "There's a refactor we could do where the old method still remains, but behaves differently. I don't know it's important, though.", "author": "j-baker", "createdAt": "2020-02-27T19:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MDA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNzQ0Ng==", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r385327446", "bodyText": "This class should probably do with some better unit tests, now, before this merges.", "author": "j-baker", "createdAt": "2020-02-27T19:35:24Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -50,8 +58,12 @@\n \n     private static final Logger log = LoggerFactory.getLogger(AwaitingLeadershipProxy.class);\n \n-    private static final long MAX_NO_QUORUM_RETRIES = 10;\n+    private static final int MAX_NO_QUORUM_RETRIES = 10;", "originalCommit": "d47db8efa3961ef9f457e09cf65408f5c0470335", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e94cbb444a9f4654a908be5baade06037921f4b", "url": "https://github.com/palantir/atlasdb/commit/4e94cbb444a9f4654a908be5baade06037921f4b", "message": "Add a benchmark for awaiting leadership proxy", "committedDate": "2020-03-02T09:52:48Z", "type": "forcePushed"}, {"oid": "88241f44c71bd05695f86e877e55262ee0c020ae", "url": "https://github.com/palantir/atlasdb/commit/88241f44c71bd05695f86e877e55262ee0c020ae", "message": "Checkpoint with jeremy", "committedDate": "2020-03-02T10:57:07Z", "type": "commit"}, {"oid": "f72f0549fb9031fe9c29b5bd1282b97aa0533ff9", "url": "https://github.com/palantir/atlasdb/commit/f72f0549fb9031fe9c29b5bd1282b97aa0533ff9", "message": "PR comments", "committedDate": "2020-03-02T10:57:07Z", "type": "commit"}, {"oid": "955cfcc37938715e42ca34d3f628e131b0104e20", "url": "https://github.com/palantir/atlasdb/commit/955cfcc37938715e42ca34d3f628e131b0104e20", "message": "refactor", "committedDate": "2020-03-02T10:57:07Z", "type": "commit"}, {"oid": "e75089bb3e4ddbb1390453d3ec0362c5baf27427", "url": "https://github.com/palantir/atlasdb/commit/e75089bb3e4ddbb1390453d3ec0362c5baf27427", "message": "Refactor out an AsyncRetrier to allow for better testing", "committedDate": "2020-03-02T10:57:07Z", "type": "commit"}, {"oid": "01b032519586e9bda5bcedc4caeffbb721ea92f0", "url": "https://github.com/palantir/atlasdb/commit/01b032519586e9bda5bcedc4caeffbb721ea92f0", "message": "Add a benchmark for awaiting leadership proxy", "committedDate": "2020-03-02T10:57:08Z", "type": "commit"}, {"oid": "6b347ae9939d307c6939e1d41be44ada3eeecd1d", "url": "https://github.com/palantir/atlasdb/commit/6b347ae9939d307c6939e1d41be44ada3eeecd1d", "message": "PR test failures", "committedDate": "2020-03-02T10:57:08Z", "type": "commit"}, {"oid": "6b347ae9939d307c6939e1d41be44ada3eeecd1d", "url": "https://github.com/palantir/atlasdb/commit/6b347ae9939d307c6939e1d41be44ada3eeecd1d", "message": "PR test failures", "committedDate": "2020-03-02T10:57:08Z", "type": "forcePushed"}, {"oid": "c3060f79784a5466bf5650fe482c51edc287a2c6", "url": "https://github.com/palantir/atlasdb/commit/c3060f79784a5466bf5650fe482c51edc287a2c6", "message": "Refactor coalescingsupplier", "committedDate": "2020-03-02T11:09:33Z", "type": "commit"}, {"oid": "cba7ea76d41fd231dfd3f8b7a6cd844f91dba308", "url": "https://github.com/palantir/atlasdb/commit/cba7ea76d41fd231dfd3f8b7a6cd844f91dba308", "message": "merge conflict", "committedDate": "2020-03-02T11:10:02Z", "type": "commit"}, {"oid": "ed4b93db7e1344b8b4243bc8f4628f478b07633a", "url": "https://github.com/palantir/atlasdb/commit/ed4b93db7e1344b8b4243bc8f4628f478b07633a", "message": "Extra test", "committedDate": "2020-03-02T11:31:22Z", "type": "commit"}, {"oid": "0c78b2e4c4969d40d9adf03ec8cf88167c9d540a", "url": "https://github.com/palantir/atlasdb/commit/0c78b2e4c4969d40d9adf03ec8cf88167c9d540a", "message": "cleanup", "committedDate": "2020-03-02T11:32:53Z", "type": "commit"}, {"oid": "902a7dfd76aa6f8963953e3fa778d50a001e71e0", "url": "https://github.com/palantir/atlasdb/commit/902a7dfd76aa6f8963953e3fa778d50a001e71e0", "message": "checkstyel", "committedDate": "2020-03-02T13:08:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMDk2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r386410969", "bodyText": "Extract this to some utility class, as it's effectively duplicated from ConjureTimelockResource, and also exists in ALP", "author": "gmaretic", "createdAt": "2020-03-02T14:05:57Z", "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "diffHunk": "@@ -35,25 +35,57 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+import com.google.common.base.Throwables;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.google.common.util.concurrent.Uninterruptibles;\n \n+@RunWith(Parameterized.class)\n public class CoalescingSupplierTest {\n     private static final int DEFAULT_VALUE = 123;\n \n     private final Supplier<Integer> delegate = mock(Supplier.class);\n     private final FreezableSupplier freezableDelegate = new FreezableSupplier(delegate);\n-    private final CoalescingSupplier<Integer> supplier = new CoalescingSupplier<>(freezableDelegate);\n+    private final CoalescingSupplier<Integer> coalescing = new CoalescingSupplier<>(freezableDelegate);\n+\n+    private final Supplier<Integer> supplier;\n+\n+    public CoalescingSupplierTest(String name, Object parameter) {\n+        Function<CoalescingSupplierTest, Integer> factory = (Function) parameter;\n+        supplier = () -> factory.apply(this);\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] getParameters() {\n+        return new Object[][] {\n+                {\"blocking\", (Function<CoalescingSupplierTest, Integer>) test -> test.coalescing.get() },\n+                {\"async\", (Function<CoalescingSupplierTest, Integer>) test -> unwrap(test.coalescing.getAsync()) }\n+        };\n+    }\n+\n+    private static <T> T unwrap(ListenableFuture<T> future) {", "originalCommit": "902a7dfd76aa6f8963953e3fa778d50a001e71e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTA5NA==", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r386411094", "bodyText": "nice!", "author": "gmaretic", "createdAt": "2020-03-02T14:06:11Z", "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "diffHunk": "@@ -35,25 +35,57 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+import com.google.common.base.Throwables;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.google.common.util.concurrent.Uninterruptibles;\n \n+@RunWith(Parameterized.class)\n public class CoalescingSupplierTest {\n     private static final int DEFAULT_VALUE = 123;\n \n     private final Supplier<Integer> delegate = mock(Supplier.class);\n     private final FreezableSupplier freezableDelegate = new FreezableSupplier(delegate);\n-    private final CoalescingSupplier<Integer> supplier = new CoalescingSupplier<>(freezableDelegate);\n+    private final CoalescingSupplier<Integer> coalescing = new CoalescingSupplier<>(freezableDelegate);\n+\n+    private final Supplier<Integer> supplier;\n+\n+    public CoalescingSupplierTest(String name, Object parameter) {\n+        Function<CoalescingSupplierTest, Integer> factory = (Function) parameter;\n+        supplier = () -> factory.apply(this);", "originalCommit": "902a7dfd76aa6f8963953e3fa778d50a001e71e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODQ2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r386428469", "bodyText": "Again as before (except this time we get the cause if we reach here, which doesn't seem an intentional dif)", "author": "gmaretic", "createdAt": "2020-03-02T14:36:00Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/AsyncTimelockResource.java", "diffHunk": "@@ -128,7 +131,19 @@ public StartTransactionResponseV4 startTransactions(StartTransactionRequestV4 re\n     @POST\n     @Path(\"start-atlasdb-transaction-v5\")\n     public StartTransactionResponseV5 startTransactionsWithWatches(StartTransactionRequestV5 request) {\n-        return timelock.startTransactionsWithWatches(request);\n+        return unwrapListenableFuture(timelock.startTransactionsWithWatches(request));\n+    }\n+\n+    private static <T> T unwrapListenableFuture(ListenableFuture<T> future) {\n+        try {\n+            return future.get();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(e);\n+        } catch (ExecutionException e) {\n+            Throwables.throwIfUncheckedException(e.getCause());\n+            throw new RuntimeException(e.getCause());", "originalCommit": "902a7dfd76aa6f8963953e3fa778d50a001e71e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "02f08e2e99a9a503b379f3c20634b7514813d6a0", "url": "https://github.com/palantir/atlasdb/commit/02f08e2e99a9a503b379f3c20634b7514813d6a0", "message": "PR commetns", "committedDate": "2020-03-02T15:41:21Z", "type": "commit"}, {"oid": "b54b1d255f849acd61143dd351653427a187e485", "url": "https://github.com/palantir/atlasdb/commit/b54b1d255f849acd61143dd351653427a187e485", "message": "Add generated changelog entries", "committedDate": "2020-03-02T15:41:21Z", "type": "commit"}, {"oid": "691cac2e53347b5b2f412b65a2a4e59299988780", "url": "https://github.com/palantir/atlasdb/commit/691cac2e53347b5b2f412b65a2a4e59299988780", "message": "PR comments", "committedDate": "2020-03-02T15:43:45Z", "type": "commit"}, {"oid": "f95481198c90f9ceaadc248f28b1728dfe9cc5ba", "url": "https://github.com/palantir/atlasdb/commit/f95481198c90f9ceaadc248f28b1728dfe9cc5ba", "message": "Merge branch 'jbaker/async' of github.com:palantir/atlasdb into jbaker/async", "committedDate": "2020-03-02T16:01:46Z", "type": "commit"}, {"oid": "1a0ef2b54404d12eadc6727f8b2c3d289f9cc9c1", "url": "https://github.com/palantir/atlasdb/commit/1a0ef2b54404d12eadc6727f8b2c3d289f9cc9c1", "message": "Move a bunch more stuff to async\n\nmeans our current hot codepaths stay hot even before moving them to\nconjure", "committedDate": "2020-03-02T16:01:52Z", "type": "commit"}, {"oid": "601ded66b53f0fa6283029851597139a200fd9ab", "url": "https://github.com/palantir/atlasdb/commit/601ded66b53f0fa6283029851597139a200fd9ab", "message": "Merge branch 'develop' into jbaker/async", "committedDate": "2020-03-02T16:08:26Z", "type": "commit"}, {"oid": "d78a4d80a585929660ba0fd6aeaace7e32154593", "url": "https://github.com/palantir/atlasdb/commit/d78a4d80a585929660ba0fd6aeaace7e32154593", "message": "Thread pool", "committedDate": "2020-03-02T16:12:49Z", "type": "commit"}, {"oid": "5489cbd1b67cfbfbeb9b8c10d8bbff95d39e7aec", "url": "https://github.com/palantir/atlasdb/commit/5489cbd1b67cfbfbeb9b8c10d8bbff95d39e7aec", "message": "rewrapping...", "committedDate": "2020-03-02T16:30:11Z", "type": "commit"}]}