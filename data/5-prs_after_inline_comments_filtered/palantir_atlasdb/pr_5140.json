{"pr_number": 5140, "pr_title": "[LW] No Op cache tracks version", "pr_createdAt": "2020-12-02T12:48:29Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5140", "timeline": [{"oid": "50f6158fde0d8172359afc2fa1c7e5ffe012ef6f", "url": "https://github.com/palantir/atlasdb/commit/50f6158fde0d8172359afc2fa1c7e5ffe012ef6f", "message": "hah, lets not fail", "committedDate": "2020-12-02T11:40:12Z", "type": "commit"}, {"oid": "18e0bada41049379108696677fed33a03bebdc47", "url": "https://github.com/palantir/atlasdb/commit/18e0bada41049379108696677fed33a03bebdc47", "message": "mess", "committedDate": "2020-12-02T12:02:11Z", "type": "commit"}, {"oid": "f44ed2416eeda440d997f8cba40e7f0d49e7bebc", "url": "https://github.com/palantir/atlasdb/commit/f44ed2416eeda440d997f8cba40e7f0d49e7bebc", "message": "get it right", "committedDate": "2020-12-02T13:06:15Z", "type": "commit"}, {"oid": "c2915614a52500cdcd343559f1999dda96cfc40d", "url": "https://github.com/palantir/atlasdb/commit/c2915614a52500cdcd343559f1999dda96cfc40d", "message": "Add generated changelog entries", "committedDate": "2020-12-02T13:06:15Z", "type": "commit"}, {"oid": "19a002a597f427c4205b467c3e054b1792653f60", "url": "https://github.com/palantir/atlasdb/commit/19a002a597f427c4205b467c3e054b1792653f60", "message": "Add generated changelog entries", "committedDate": "2020-12-02T13:06:15Z", "type": "commit"}, {"oid": "a9a6337236003cbe7129979f4e668b359b8391d1", "url": "https://github.com/palantir/atlasdb/commit/a9a6337236003cbe7129979f4e668b359b8391d1", "message": "Add generated changelog entries", "committedDate": "2020-12-02T13:06:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1MjUwNQ==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r534152505", "bodyText": "Strictly speaking, this is a bit weird (the LWM has a different cache to the one passed directly below), but it's for tests. No strong pref if you think we should resolve this.", "author": "Jolyon-S", "createdAt": "2020-12-02T13:07:28Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SerializableTransactionManager.java", "diffHunk": "@@ -472,8 +472,8 @@ public static SerializableTransactionManager createForTest(\n                 metricsManager,\n                 keyValueService,\n                 new LegacyTimelockService(timestampService, lockService, lockClient),\n-                NoOpLockWatchManager.INSTANCE,\n-                NoOpLockWatchEventCache.INSTANCE,\n+                NoOpLockWatchManager.create(),\n+                NoOpLockWatchEventCache.create(),", "originalCommit": "f44ed2416eeda440d997f8cba40e7f0d49e7bebc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzkwNw==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r539643907", "bodyText": "discussed in internal PR: I know you intend parity as in equality, but would suggest using equality as \"validating parity\" often means checking oddness/evenness which is distinctly not what we're doing here", "author": "jeremyk-91", "createdAt": "2020-12-09T21:00:31Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/DuplicatingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+class DuplicatingLockWatchEventCache implements LockWatchEventCache {\n+    private final LockWatchEventCache mainCache;\n+    private final LockWatchEventCache secondaryCache;\n+\n+    DuplicatingLockWatchEventCache(LockWatchEventCache mainCache, LockWatchEventCache secondaryCache) {\n+        this.mainCache = mainCache;\n+        this.secondaryCache = secondaryCache;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return mainCache.isEnabled();\n+    }\n+\n+    @Override\n+    public Optional<LockWatchVersion> lastKnownVersion() {\n+        return mainCache.lastKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update) {\n+        mainCache.processStartTransactionsUpdate(startTimestamps, update);\n+        secondaryCache.processStartTransactionsUpdate(startTimestamps, update);\n+        validateVersionParity();\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates, LockWatchStateUpdate update) {\n+        mainCache.processGetCommitTimestampsUpdate(transactionUpdates, update);\n+        secondaryCache.processGetCommitTimestampsUpdate(transactionUpdates, update);\n+        validateVersionParity();\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        return mainCache.getCommitUpdate(startTs);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdateForTransactions(\n+            Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n+        return mainCache.getUpdateForTransactions(startTimestamps, version);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        mainCache.removeTransactionStateFromCache(startTimestamp);\n+    }\n+\n+    private void validateVersionParity() {", "originalCommit": "19a002a597f427c4205b467c3e054b1792653f60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r539648416", "bodyText": "Unclear if this has been a convention throughout Lock Watches, but the decomp - in particular, rejecting a success from post-leader election without a snapshot here - seems a bit unexpected. I'd prefer this just return the version, and updateVersion take care of that filtering. It looks like you do that anyway in updateVersion!", "author": "jeremyk-91", "createdAt": "2020-12-09T21:08:00Z", "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -58,11 +67,34 @@ public TransactionsLockWatchUpdate getUpdateForTransactions(\n             Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .clearCache(true)\n-                .startTsToSequence(\n-                        startTimestamps.stream().collect(Collectors.toMap(startTs -> startTs, $ -> FAKE_VERSION)))\n+                .startTsToSequence(startTimestamps.stream()\n+                        .collect(Collectors.toMap(startTs -> startTs, $ -> currentVersion.orElse(FAKE_VERSION))))\n                 .build();\n     }\n \n     @Override\n     public void removeTransactionStateFromCache(long startTimestamp) {}\n+\n+    private void updateVersion(Optional<LockWatchVersion> maybeNewVersion) {\n+        currentVersion = maybeNewVersion.map(newVersion -> currentVersion\n+                .filter(current -> current.id().equals(newVersion.id()) && current.version() > newVersion.version())\n+                .orElse(newVersion));\n+    }\n+\n+    private Optional<LockWatchVersion> extractVersionFromUpdate(LockWatchStateUpdate update) {", "originalCommit": "19a002a597f427c4205b467c3e054b1792653f60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMDE2OA==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r540030168", "bodyText": "So in the real implementation, a success after a leader election will fail (as in, the version will be empty). updateVersion doesn't quite do the same thing - if there has been a leader election without a snapshot, updateVersion will set it to empty, whereas if we permitted this, currentVersion would have a value.", "author": "Jolyon-S", "createdAt": "2020-12-10T09:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMTg2MQ==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r540031861", "bodyText": "The test leaderChangeClearsCache in LWECIT demonstrates this behaviour - accepting a success from a post-leader election causes the versions to diverge.", "author": "Jolyon-S", "createdAt": "2020-12-10T09:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAzMjkzOQ==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r540032939", "bodyText": "There's a good reason for this - we can't have a valid version unless we've had a snapshot telling us:\na) what descriptors are being watched;\nb) what the currently held watches are.\nOtherwise we could tell the client that there are only X watches taken out, when that may not be accurate.", "author": "Jolyon-S", "createdAt": "2020-12-10T10:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1MjQ0NA==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r542252444", "bodyText": "Ah, I misread the updateVersion code - I've left a comment there.\nI still find extractVersionFromUpdate to return an Optional weird: the update clearly has a log ID and a version, just it may not be one we're interested in. I think we could\n\nadd a brief comment indicating the properties of when this returns the version\nname this extractRelevantVersion...?\n\nI don't have a good name for 2 so suggest 1.", "author": "jeremyk-91", "createdAt": "2020-12-14T09:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg=="}], "type": "inlineReview"}, {"oid": "190588464ee3249f337dc4553283bb42ad49e945", "url": "https://github.com/palantir/atlasdb/commit/190588464ee3249f337dc4553283bb42ad49e945", "message": "validate equality", "committedDate": "2020-12-10T10:00:02Z", "type": "commit"}, {"oid": "b9bf138551b444407c9869979adbe768d777e706", "url": "https://github.com/palantir/atlasdb/commit/b9bf138551b444407c9869979adbe768d777e706", "message": "Merge branch 'no-op-but-actually-op' of github.com:palantir/atlasdb into no-op-but-actually-op", "committedDate": "2020-12-10T10:01:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0NzQ2OQ==", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r542247469", "bodyText": "from discussion below: can we use imperative statements here? I find this difficult to parse (I read the filter as a top-level thing that rejects versions that were unfriendly, when that's not the case).", "author": "jeremyk-91", "createdAt": "2020-12-14T09:48:19Z", "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -58,11 +67,34 @@ public TransactionsLockWatchUpdate getUpdateForTransactions(\n             Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .clearCache(true)\n-                .startTsToSequence(\n-                        startTimestamps.stream().collect(Collectors.toMap(startTs -> startTs, $ -> FAKE_VERSION)))\n+                .startTsToSequence(startTimestamps.stream()\n+                        .collect(Collectors.toMap(startTs -> startTs, $ -> currentVersion.orElse(FAKE_VERSION))))\n                 .build();\n     }\n \n     @Override\n     public void removeTransactionStateFromCache(long startTimestamp) {}\n+\n+    private void updateVersion(Optional<LockWatchVersion> maybeNewVersion) {\n+        currentVersion = maybeNewVersion.map(newVersion -> currentVersion\n+                .filter(current -> current.id().equals(newVersion.id()) && current.version() > newVersion.version())\n+                .orElse(newVersion));", "originalCommit": "b9bf138551b444407c9869979adbe768d777e706", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3cff6826dfb348f81fd86372287b9aae11dcf063", "url": "https://github.com/palantir/atlasdb/commit/3cff6826dfb348f81fd86372287b9aae11dcf063", "message": "javadoc", "committedDate": "2020-12-14T10:08:00Z", "type": "commit"}]}