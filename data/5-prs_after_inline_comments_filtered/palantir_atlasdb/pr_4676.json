{"pr_number": 4676, "pr_title": "[LW] Remove old client and resource and use undertow", "pr_createdAt": "2020-03-26T17:23:31Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4676", "timeline": [{"oid": "268035f16e0522f210673abc3e916d6e88890461", "url": "https://github.com/palantir/atlasdb/commit/268035f16e0522f210673abc3e916d6e88890461", "message": "Remove old client and resource and use undertow", "committedDate": "2020-03-26T17:06:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MzYyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398753621", "bodyText": "nit: double space", "author": "felixdesouza", "createdAt": "2020-03-26T17:24:09Z", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureLockWatchingService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.atlasdb.timelock.lock.watch.ConjureLockWatchingService;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureLockWatchingService {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+\n+    private final ConjureLockWatchingService lockWatcher;\n+    private final String namespace;\n+\n+    public NamespacedConjureLockWatchingService(ConjureLockWatchingService lockWatcher, String namespace) {\n+        this.lockWatcher = lockWatcher;\n+        this.namespace = namespace;\n+    }\n+", "originalCommit": "268035f16e0522f210673abc3e916d6e88890461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NDE4NA==", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398754184", "bodyText": "not too sure about this, I think you still want stuff behind the ATR, but I'll think about it whilst goign through the rest of the PR.\nTurns out ATR extends LWS so it's all good.", "author": "felixdesouza", "createdAt": "2020-03-26T17:24:54Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/AsyncTimeLockServicesCreator.java", "diffHunk": "@@ -78,7 +77,6 @@ public TimeLockServices createTimeLockServices(\n \n         AsyncTimelockResource asyncTimelockResource =\n                 new AsyncTimelockResource(maybeEnhancedLockLog, asyncTimelockService);\n-        LockWatchingResource lockWatchingResource = new LockWatchingResource(asyncTimelockService);", "originalCommit": "268035f16e0522f210673abc3e916d6e88890461", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1ODA4OA==", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398758088", "bodyText": "sad that we're gonna have to do this for each resource :(", "author": "felixdesouza", "createdAt": "2020-03-26T17:30:05Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockWatchingResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.function.Function;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.atlasdb.timelock.lock.watch.ConjureLockWatchingService;\n+import com.palantir.atlasdb.timelock.lock.watch.ConjureLockWatchingServiceEndpoints;\n+import com.palantir.atlasdb.timelock.lock.watch.UndertowConjureLockWatchingService;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureLockWatchingResource implements UndertowConjureLockWatchingService {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    private ConjureLockWatchingResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(", "originalCommit": "268035f16e0522f210673abc3e916d6e88890461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NjQ0Nw==", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r399176447", "bodyText": "It's a nuisance, yeah", "author": "gmaretic", "createdAt": "2020-03-27T10:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1ODA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MjQyMA==", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398762420", "bodyText": "sad about this :( but I can't seem to think of a way without having some sort of conjure-undertow generation support for handling exceptions or having a proxy etc.", "author": "felixdesouza", "createdAt": "2020-03-26T17:35:38Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -174,17 +174,16 @@ private void createAndRegisterResources() {\n         // Finally, register the health check, and endpoints associated with the clients.\n         TimeLockResource resource = TimeLockResource.create(namespaces);\n         healthCheck = paxosResources.leadershipComponents().healthCheck(namespaces::getActiveClients);\n-        LockWatchTestingService.create(\n-                Suppliers.compose(TimeLockRuntimeConfiguration::lockWatchTestConfig, runtime::get),\n-                resource::getLockWatchingResource);\n+\n         registrar.accept(resource);\n \n-        Function<String, AsyncTimelockService> serviceCreator =\n-                namespace -> namespaces.get(namespace).getTimelockService();\n+        Function<String, AsyncTimelockService> creator = namespace -> namespaces.get(namespace).getTimelockService();\n         if (undertowRegistrar.isPresent()) {\n-            undertowRegistrar.get().accept(ConjureTimelockResource.undertow(redirectRetryTargeter(), serviceCreator));\n+            undertowRegistrar.get().accept(ConjureTimelockResource.undertow(redirectRetryTargeter(), creator));", "originalCommit": "268035f16e0522f210673abc3e916d6e88890461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NjMwMw==", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r399176303", "bodyText": "\ud83d\ude22", "author": "gmaretic", "createdAt": "2020-03-27T10:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MjQyMA=="}], "type": "inlineReview"}, {"oid": "98515a9167bd347f6c5c6ffc1ab294b7d4a25faa", "url": "https://github.com/palantir/atlasdb/commit/98515a9167bd347f6c5c6ffc1ab294b7d4a25faa", "message": "Remove double newline", "committedDate": "2020-03-27T10:46:03Z", "type": "commit"}]}