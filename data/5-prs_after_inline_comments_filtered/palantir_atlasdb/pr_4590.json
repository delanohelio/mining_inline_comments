{"pr_number": 4590, "pr_title": "[LW] Fix corner case in registering lock watches", "pr_createdAt": "2020-02-20T11:16:57Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4590", "timeline": [{"oid": "8740ab9b0eb8e8daf4d2d8152231738d07d4248e", "url": "https://github.com/palantir/atlasdb/commit/8740ab9b0eb8e8daf4d2d8152231738d07d4248e", "message": "Be better, one day at a time. Also fix nasty concurrency issue.", "committedDate": "2020-02-20T10:43:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0ODg5Ng==", "url": "https://github.com/palantir/atlasdb/pull/4590#discussion_r382748896", "bodyText": "nit: unnecessary this", "author": "jeremyk-91", "createdAt": "2020-02-21T18:54:21Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/watch/LockWatchingServiceImpl.java", "diffHunk": "@@ -59,19 +75,38 @@ public LockWatchStateUpdate getWatchStateUpdate(OptionalLong lastKnownVersion) {\n \n     @Override\n     public void registerLock(Set<LockDescriptor> locksTakenOut, LockToken token) {\n-        lockEventLog.logLock(locksTakenOut.stream().filter(this::hasLockWatch).collect(Collectors.toSet()), token);\n+        watchesLock.readLock().lock();\n+        try {\n+            lockEventLog.logLock(locksTakenOut.stream().filter(this::hasLockWatch).collect(Collectors.toSet()), token);\n+        } finally {\n+            watchesLock.readLock().unlock();\n+        }\n     }\n \n     @Override\n     public void registerUnlock(Set<LockDescriptor> unlocked) {\n+        watchesLock.readLock().lock();\n+        try {\n         lockEventLog.logUnlock(unlocked.stream().filter(this::hasLockWatch).collect(Collectors.toSet()));\n+        } finally {\n+            watchesLock.readLock().unlock();\n+        }\n     }\n \n     private synchronized void addToWatches(LockWatchRequest request) {\n         RangeSet<LockDescriptor> oldRanges = ranges.get();\n+        List<Range<LockDescriptor>> requestAsRanges = toRanges(request);\n+        if (oldRanges.enclosesAll(requestAsRanges)) {\n+            return;\n+        }\n         RangeSet<LockDescriptor> newRanges = TreeRangeSet.create(oldRanges);\n-        newRanges.addAll(toRanges(request));\n-        ranges.set(newRanges);\n+        newRanges.addAll(requestAsRanges);\n+        watchesLock.writeLock().lock();\n+        try {\n+            this.ranges.set(newRanges);", "originalCommit": "8740ab9b0eb8e8daf4d2d8152231738d07d4248e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}