{"pr_number": 4748, "pr_title": "Fix bug in transaction starter if it fails midway through the batch", "pr_createdAt": "2020-05-01T15:31:04Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4748", "timeline": [{"oid": "d0a5f0b201eee2a13121ebec5862eff042d5b4df", "url": "https://github.com/palantir/atlasdb/commit/d0a5f0b201eee2a13121ebec5862eff042d5b4df", "message": "Add unlock if failing mid-way through starting txns", "committedDate": "2020-05-01T15:25:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5Mzg5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4748#discussion_r418593893", "bodyText": "I don't know what doing it this way gave us, but collapsing into the constructor allows us to make the consumer non-static so that it can call the unlock method.", "author": "Jolyon-S", "createdAt": "2020-05-01T15:32:21Z", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -53,20 +53,16 @@\n     private final DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher;\n     private final LockLeaseService lockLeaseService;\n \n-    private TransactionStarter(\n-            DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher,\n-            LockLeaseService lockLeaseService) {\n-        this.autobatcher = autobatcher;\n+    private TransactionStarter(LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n+        this.autobatcher = Autobatchers\n+                .independent(consumer(lockLeaseService, lockWatchEventCache))\n+                .safeLoggablePurpose(\"transaction-starter\")\n+                .build();\n         this.lockLeaseService = lockLeaseService;\n     }\n \n     static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n-        DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher = Autobatchers\n-                .independent(consumer(lockLeaseService, lockWatchEventCache))\n-                .safeLoggablePurpose(\"transaction-starter\")\n-                .build();\n-        return new TransactionStarter(autobatcher,\n-                lockLeaseService);", "originalCommit": "d0a5f0b201eee2a13121ebec5862eff042d5b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwODg1OA==", "url": "https://github.com/palantir/atlasdb/pull/4748#discussion_r419608858", "bodyText": "The general idea here is that through much of Atlas (at least recently written parts), constructors don't generally create new resources: normally this allows better use of e.g. mocks or stubs in tests, though admittedly less so in this case. I'd still prefer this because conventionally create alerts the user that there is some not-completely-trivial construction going on, which there is in this case with the disruptor.\nI'd suggest we keep making the consumer in a static way, though without changing the public API of TransactionStarter: if we extract a private static method that does what unlock does with a passed-in LockLeaseService (e.g. determineAndExecuteUnlocks()) it should be simple to call that from getStartTransactionResponses, and unlock can call that as well.", "author": "jeremyk-91", "createdAt": "2020-05-04T17:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5Mzg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0NjUyMw==", "url": "https://github.com/palantir/atlasdb/pull/4748#discussion_r419946523", "bodyText": "Interesting - that gives some context on why it was written this way (whereas my instinct is to use a constructor).", "author": "Jolyon-S", "createdAt": "2020-05-05T08:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5Mzg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NDA5NQ==", "url": "https://github.com/palantir/atlasdb/pull/4748#discussion_r418594095", "bodyText": "Non-static to call the unlock method.", "author": "Jolyon-S", "createdAt": "2020-05-01T15:32:47Z", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -152,18 +148,25 @@ public void close() {\n         };\n     }\n \n-    private static List<StartIdentifiedAtlasDbTransactionResponse> getStartTransactionResponses(", "originalCommit": "d0a5f0b201eee2a13121ebec5862eff042d5b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd01a34f0fd44a7b497d99dd155b7ee8b87fdf7f", "url": "https://github.com/palantir/atlasdb/commit/fd01a34f0fd44a7b497d99dd155b7ee8b87fdf7f", "message": "Remove unused param", "committedDate": "2020-05-04T08:56:51Z", "type": "commit"}, {"oid": "9258d3b49ade78b5f409e45693f75a886db6c10c", "url": "https://github.com/palantir/atlasdb/commit/9258d3b49ade78b5f409e45693f75a886db6c10c", "message": "Fix method args", "committedDate": "2020-05-04T09:12:40Z", "type": "commit"}, {"oid": "1fc45919879fd6c3bb4a90ad7f5f49aa23fac82a", "url": "https://github.com/palantir/atlasdb/commit/1fc45919879fd6c3bb4a90ad7f5f49aa23fac82a", "message": "Revert static flow to be closer to original", "committedDate": "2020-05-05T08:38:53Z", "type": "commit"}]}