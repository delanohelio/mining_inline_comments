{"pr_number": 4558, "pr_title": "Range request explicit column selection", "pr_createdAt": "2020-02-07T14:34:54Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4558", "timeline": [{"oid": "63025625e41bd89c06a68f9adb62295fc6f793aa", "url": "https://github.com/palantir/atlasdb/commit/63025625e41bd89c06a68f9adb62295fc6f793aa", "message": "Include all columns in rangeRequest explicitly when columnSelection is empty.", "committedDate": "2020-02-06T15:46:01Z", "type": "commit"}, {"oid": "4cea94823384f6ddf536953b2f109e979629b123", "url": "https://github.com/palantir/atlasdb/commit/4cea94823384f6ddf536953b2f109e979629b123", "message": "Augment columnSelection for getAllRowsUnordered | range scan is turned off", "committedDate": "2020-02-06T18:43:09Z", "type": "commit"}, {"oid": "9df7262a185f8c34ed5ec6bd12d6142937b43f91", "url": "https://github.com/palantir/atlasdb/commit/9df7262a185f8c34ed5ec6bd12d6142937b43f91", "message": "Fix copyright", "committedDate": "2020-02-07T13:47:54Z", "type": "commit"}, {"oid": "e25f0a5678af8ee01750b3b2cf9a377eb086e310", "url": "https://github.com/palantir/atlasdb/commit/e25f0a5678af8ee01750b3b2cf9a377eb086e310", "message": "Regenerate schemas", "committedDate": "2020-02-07T14:33:58Z", "type": "commit"}, {"oid": "461b07e7c9944650e869d14681759fcfb0be16cc", "url": "https://github.com/palantir/atlasdb/commit/461b07e7c9944650e869d14681759fcfb0be16cc", "message": "Add generated changelog entries", "committedDate": "2020-02-07T14:33:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTI2NA==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377071264", "bodyText": "generally, prefer having the method name tell you what it does. Augment just means 'change', pretty much - maybe something like optimizeColumnSelections and optimizeColumnSelection.\nAlso, instead of streaming it and collecting back into a new collection, I might be minded to just write return Iterables.transform(ranges, this::optimizeColumnSelection).", "author": "j-baker", "createdAt": "2020-02-10T13:47:16Z", "path": "atlasdb-client/src/integrationInput/java/com/palantir/atlasdb/table/description/generated/SchemaApiTestTable.java", "diffHunk": "@@ -688,21 +691,31 @@ public void delete(Iterable<SchemaApiTestRow> rows) {\n         return transformed;\n     }\n \n-    public BatchingVisitableView<SchemaApiTestRowResult> getRange(RangeRequest range) {\n+    private RangeRequest augmentRangeRequest(RangeRequest range) {\n         if (range.getColumnNames().isEmpty()) {\n-            range = range.getBuilder().retainColumns(allColumns).build();\n+            return range.getBuilder().retainColumns(allColumns).build();\n         }\n-        return BatchingVisitables.transform(t.getRange(tableRef, range), new Function<RowResult<byte[]>, SchemaApiTestRowResult>() {\n+        return range;\n+    }\n+\n+    public BatchingVisitableView<SchemaApiTestRowResult> getRange(RangeRequest range) {\n+        return BatchingVisitables.transform(t.getRange(tableRef, augmentRangeRequest(range)), new Function<RowResult<byte[]>, SchemaApiTestRowResult>() {\n             @Override\n             public SchemaApiTestRowResult apply(RowResult<byte[]> input) {\n                 return SchemaApiTestRowResult.of(input);\n             }\n         });\n     }\n \n+    private Iterable<RangeRequest> augmentRanges(Iterable<RangeRequest> ranges) {\n+        return StreamSupport.stream(ranges.spliterator(), false)", "originalCommit": "461b07e7c9944650e869d14681759fcfb0be16cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NDE1MQ==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377074151", "bodyText": "augmentation is not required here", "author": "sudiksha27", "createdAt": "2020-02-10T13:52:35Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -901,31 +914,31 @@ private void renderGetRanges() {\n             line(\"public <T> Stream<T> getRanges(Iterable<RangeRequest> ranges,\");\n             line(\"                               int concurrencyLevel,\");\n             line(\"                               BiFunction<RangeRequest, BatchingVisitable<\", RowResult, \">, T> visitableProcessor) {\"); {\n-                line(\"return t.getRanges(tableRef, ranges, concurrencyLevel,\");\n+                line(\"return t.getRanges(tableRef, augmentRanges(ranges), concurrencyLevel,\");\n                 line(\"        (rangeRequest, visitable) -> visitableProcessor.apply(rangeRequest, BatchingVisitables.transform(visitable, \", RowResult, \"::of)));\");\n             } line(\"}\");\n             line();\n             line(\"public <T> Stream<T> getRanges(Iterable<RangeRequest> ranges,\");\n             line(\"                               BiFunction<RangeRequest, BatchingVisitable<\", RowResult, \">, T> visitableProcessor) {\"); {\n-                line(\"return t.getRanges(tableRef, ranges,\");\n+                line(\"return t.getRanges(tableRef, augmentRanges(ranges),\");\n                 line(\"        (rangeRequest, visitable) -> visitableProcessor.apply(rangeRequest, BatchingVisitables.transform(visitable, \", RowResult, \"::of)));\");\n             } line(\"}\");\n             line();\n             line(\"public Stream<BatchingVisitable<\", RowResult, \">> getRangesLazy(Iterable<RangeRequest> ranges) {\"); {\n-                line(\"Stream<BatchingVisitable<RowResult<byte[]>>> rangeResults = t.getRangesLazy(tableRef, ranges);\");\n+                line(\"Stream<BatchingVisitable<RowResult<byte[]>>> rangeResults = t.getRangesLazy(tableRef, augmentRanges(ranges));\");\n                 line(\"return rangeResults.map(visitable -> BatchingVisitables.transform(visitable, \", RowResult, \"::of));\");\n             } line(\"}\");\n         }\n \n         private void renderDeleteRange() {\n             line(\"public void deleteRange(RangeRequest range) {\"); {\n-                line(\"deleteRanges(ImmutableSet.of(range));\");\n+                line(\"deleteRanges(ImmutableSet.of(augmentRangeRequest(range)));\");", "originalCommit": "461b07e7c9944650e869d14681759fcfb0be16cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aaba152592292251241a1cb979f4165480142785", "url": "https://github.com/palantir/atlasdb/commit/aaba152592292251241a1cb979f4165480142785", "message": "Address comments + Refactor", "committedDate": "2020-02-10T14:13:09Z", "type": "commit"}, {"oid": "e3c8e279874d3ccbd3c81e75005a04bc24b2ca87", "url": "https://github.com/palantir/atlasdb/commit/e3c8e279874d3ccbd3c81e75005a04bc24b2ca87", "message": "Refactor", "committedDate": "2020-02-10T14:27:54Z", "type": "commit"}, {"oid": "834701200861b9e5974ee5e049dcff3d75e83ea5", "url": "https://github.com/palantir/atlasdb/commit/834701200861b9e5974ee5e049dcff3d75e83ea5", "message": "Refactor", "committedDate": "2020-02-10T15:18:08Z", "type": "commit"}, {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050", "url": "https://github.com/palantir/atlasdb/commit/41a10fe6b6d6522c128104d84f53cc5aecde6050", "message": "Regenerate schema", "committedDate": "2020-02-10T16:02:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5ODY1OQ==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377198659", "bodyText": "nice!", "author": "jeremyk-91", "createdAt": "2020-02-10T17:12:05Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -866,12 +873,22 @@ private void renderNamedDelete() {\n             } line(\"}\");\n         }\n \n-        private void renderGetRange() {\n-            line(\"public BatchingVisitableView<\", RowResult, \"> getRange(RangeRequest range) {\"); {\n+        private void renderOptimizeRangeRequests() {\n+            line(\"private RangeRequest optimizeColumnSelection(RangeRequest range) {\"); {\n                 line(\"if (range.getColumnNames().isEmpty()) {\"); {\n-                    line(\"range = range.getBuilder().retainColumns(allColumns).build();\");\n+                    line(\"return range.getBuilder().retainColumns(allColumns).build();\");\n                 } line(\"}\");\n-                line(\"return BatchingVisitables.transform(t.getRange(tableRef, range), new Function<RowResult<byte[]>, \", RowResult, \">() {\"); {\n+                line(\"return range;\");\n+            } line(\"}\");\n+            line();\n+            line(\"private Iterable<RangeRequest> optimizeColumnSelections(Iterable<RangeRequest> ranges) {\"); {\n+                line(\"return Iterables.transform(ranges, this::optimizeColumnSelection);\");", "originalCommit": "41a10fe6b6d6522c128104d84f53cc5aecde6050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5OTgwMA==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377199800", "bodyText": "I think we still want this to be named optimizeRangeRequest? A ColumnSelection is a different thing (which I see you've added renderer code for later on).", "author": "jeremyk-91", "createdAt": "2020-02-10T17:14:10Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -866,12 +873,22 @@ private void renderNamedDelete() {\n             } line(\"}\");\n         }\n \n-        private void renderGetRange() {\n-            line(\"public BatchingVisitableView<\", RowResult, \"> getRange(RangeRequest range) {\"); {\n+        private void renderOptimizeRangeRequests() {\n+            line(\"private RangeRequest optimizeColumnSelection(RangeRequest range) {\"); {", "originalCommit": "41a10fe6b6d6522c128104d84f53cc5aecde6050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMDQ2Mg==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377200462", "bodyText": "While the code here makes sense, I think it's not normally how the rendering code is structured. Something like the following is more common:\n            line(\"private ColumnSelection optimizeColumnSelection(ColumnSelection columns) {\"); {\n                line(\"if (columns.allColumnsSelected()) {\"); {\n                    line(\"return allColumns;\");\n                } line(\"}\");\n              line(\"return columns;\");\n            } line(\"}\");", "author": "jeremyk-91", "createdAt": "2020-02-10T17:15:25Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -955,13 +972,23 @@ private void renderNamedDeleteRanges() {\n             } line(\"}\");\n         }\n \n+        private void renderOptimizeColumnSelection() {\n+            line(\"private ColumnSelection optimizeColumnSelection(ColumnSelection columns) {\"); {\n+                line(\"if (columns.allColumnsSelected()) {\"); {\n+                    line(\"return allColumns;\");\n+                    line(\"}\");\n+                } line(\"return columns;\");\n+            } line(\"}\");\n+        }", "originalCommit": "41a10fe6b6d6522c128104d84f53cc5aecde6050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMTE3MA==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377201170", "bodyText": "nit: I'm pretty sure Collectors and StreamSupport aren't used any more.", "author": "jeremyk-91", "createdAt": "2020-02-10T17:16:43Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -1294,5 +1323,9 @@ private static boolean isDynamic(TableMetadata table) {\n         ColumnRangeSelections.class,\n         ColumnRangeSelection.class,\n         Iterators.class,\n+        ArrayList.class,\n+        Collectors.class,\n+        StreamSupport.class", "originalCommit": "41a10fe6b6d6522c128104d84f53cc5aecde6050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjA1Nw==", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377202057", "bodyText": "If changing the above, this should also be changed.", "author": "jeremyk-91", "createdAt": "2020-02-10T17:18:19Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -866,12 +873,22 @@ private void renderNamedDelete() {\n             } line(\"}\");\n         }\n \n-        private void renderGetRange() {\n-            line(\"public BatchingVisitableView<\", RowResult, \"> getRange(RangeRequest range) {\"); {\n+        private void renderOptimizeRangeRequests() {\n+            line(\"private RangeRequest optimizeColumnSelection(RangeRequest range) {\"); {\n                 line(\"if (range.getColumnNames().isEmpty()) {\"); {\n-                    line(\"range = range.getBuilder().retainColumns(allColumns).build();\");\n+                    line(\"return range.getBuilder().retainColumns(allColumns).build();\");\n                 } line(\"}\");\n-                line(\"return BatchingVisitables.transform(t.getRange(tableRef, range), new Function<RowResult<byte[]>, \", RowResult, \">() {\"); {\n+                line(\"return range;\");\n+            } line(\"}\");\n+            line();\n+            line(\"private Iterable<RangeRequest> optimizeColumnSelections(Iterable<RangeRequest> ranges) {\"); {", "originalCommit": "41a10fe6b6d6522c128104d84f53cc5aecde6050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c051861c61c9a7723a1c4d79f88501371ddefd04", "url": "https://github.com/palantir/atlasdb/commit/c051861c61c9a7723a1c4d79f88501371ddefd04", "message": "Address comments", "committedDate": "2020-02-10T17:46:13Z", "type": "commit"}, {"oid": "1c7b8f7ee090216912507f9a7778eeabbc01d6c8", "url": "https://github.com/palantir/atlasdb/commit/1c7b8f7ee090216912507f9a7778eeabbc01d6c8", "message": "Regenerate Schema", "committedDate": "2020-02-10T18:06:24Z", "type": "commit"}, {"oid": "477430a02278b1b969674ab495b004115cd8125c", "url": "https://github.com/palantir/atlasdb/commit/477430a02278b1b969674ab495b004115cd8125c", "message": "Remove quotes from changelog description", "committedDate": "2020-02-10T18:08:48Z", "type": "commit"}]}