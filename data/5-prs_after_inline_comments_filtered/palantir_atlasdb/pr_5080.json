{"pr_number": 5080, "pr_title": "Fix hashCode related error-prone checks", "pr_createdAt": "2020-10-26T15:23:27Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5080", "timeline": [{"oid": "5325143d715f12324283f01b63f955644eccf153", "url": "https://github.com/palantir/atlasdb/commit/5325143d715f12324283f01b63f955644eccf153", "message": "Apply ObjectsHashCodePrimitive fixes\n\n```\n./gradlew compileJava compileTestJava -PerrorProneApply=ObjectsHashCodePrimitive --rerun-tasks --no-build-cache\n./gradlew format --rerun-tasks --no-build-cache\n```", "committedDate": "2020-10-26T15:31:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MTIyMA==", "url": "https://github.com/palantir/atlasdb/pull/5080#discussion_r512151220", "bodyText": "I was a bit worried about this one because it could lead to fun times (if you deserialize something from the old version that has a different way of calculating the hash code and shove it into a set you have fun times), but think it's safe given that you can only create this through the serialization proxy, meaning that hash codes are always computed with the current JVM. I'd appreciate a double-check though.", "author": "jeremyk-91", "createdAt": "2020-10-26T17:43:01Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/LockRequest.java", "diffHunk": "@@ -200,15 +200,14 @@ public boolean equals(@Nullable Object obj) {\n                 && lockTimeout.equals(other.lockTimeout)\n                 && (lockGroupBehavior == other.lockGroupBehavior)\n                 && (blockingMode == other.blockingMode)\n-                && Objects.equal(blockingDuration, other.blockingDuration)\n-                && Objects.equal(versionId, other.versionId);\n+                && Objects.equals(blockingDuration, other.blockingDuration)\n+                && Objects.equals(versionId, other.versionId);\n     }\n \n     @Override\n     public int hashCode() {\n         if (hashCode == null) {\n-            hashCode = Objects.hashCode(\n-                    lockMap, lockTimeout, lockGroupBehavior, blockingMode, blockingDuration, versionId);\n+            hashCode = Objects.hash(lockMap, lockTimeout, lockGroupBehavior, blockingMode, blockingDuration, versionId);", "originalCommit": "5325143d715f12324283f01b63f955644eccf153", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MzM5Nw==", "url": "https://github.com/palantir/atlasdb/pull/5080#discussion_r512163397", "bodyText": "I don\u2019t think we support java serialization across versions", "author": "carterkozak", "createdAt": "2020-10-26T18:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MTIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NjE4NA==", "url": "https://github.com/palantir/atlasdb/pull/5080#discussion_r512196184", "bodyText": "That said, the hashCode field on serializable objects should be transient, and there's no reason for it to be volatile.", "author": "carterkozak", "createdAt": "2020-10-26T18:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MTIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5ODA1NQ==", "url": "https://github.com/palantir/atlasdb/pull/5080#discussion_r512198055", "bodyText": "Not sure why we're doing all this boxing/unboxing either. We should use an int with a sentinel value (zero) for the uninitialized case. Some objects may be unlucky, however the hashcode is relatively inexpensive to recompute.", "author": "carterkozak", "createdAt": "2020-10-26T18:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MTIyMA=="}], "type": "inlineReview"}, {"oid": "015d7456f03870e3b799db9c833c296934891446", "url": "https://github.com/palantir/atlasdb/commit/015d7456f03870e3b799db9c833c296934891446", "message": "LockRequest cached hashCode is a transient non-volatile int", "committedDate": "2020-10-26T18:57:37Z", "type": "forcePushed"}, {"oid": "579cf55cb4cbe9058b5dc7b46ebf83c0307899df", "url": "https://github.com/palantir/atlasdb/commit/579cf55cb4cbe9058b5dc7b46ebf83c0307899df", "message": "Upgrade gradle-baseline to 3.44.0", "committedDate": "2020-10-27T13:41:46Z", "type": "commit"}, {"oid": "f3146cf94f94ce47a415309a4a6676c84679cd87", "url": "https://github.com/palantir/atlasdb/commit/f3146cf94f94ce47a415309a4a6676c84679cd87", "message": "Fix baseline DeprecatedGuavaObjects\n\n```\n./gradlew compileJava compileTestJava -PerrorProneApply=DeprecatedGuavaObjects --rerun-tasks --no-build-cache\n./gradlew format --rerun-tasks --no-build-cache\n```", "committedDate": "2020-10-27T13:41:46Z", "type": "commit"}, {"oid": "dcfb247afd67385435f9325d9de8630df201bbaf", "url": "https://github.com/palantir/atlasdb/commit/dcfb247afd67385435f9325d9de8630df201bbaf", "message": "Apply ObjectsHashCodeUnnecessaryVarargs\n\n```\n./gradlew compileJava compileTestJava -PerrorProneApply=ObjectsHashCodeUnnecessaryVarargs --rerun-tasks --no-build-cache\n./gradlew format\n```", "committedDate": "2020-10-27T13:41:46Z", "type": "commit"}, {"oid": "c7d3c0f50ed8c3f7c9210bde12b7360b194380e9", "url": "https://github.com/palantir/atlasdb/commit/c7d3c0f50ed8c3f7c9210bde12b7360b194380e9", "message": "Apply ObjectsHashCodePrimitive fixes\n\n```\n./gradlew compileJava compileTestJava -PerrorProneApply=ObjectsHashCodePrimitive --rerun-tasks --no-build-cache\n./gradlew format --rerun-tasks --no-build-cache\n```", "committedDate": "2020-10-27T13:41:46Z", "type": "commit"}, {"oid": "3bdaf6e2ee5214a8445a380f4f36fbe95ea2bcaf", "url": "https://github.com/palantir/atlasdb/commit/3bdaf6e2ee5214a8445a380f4f36fbe95ea2bcaf", "message": "LockRequest cached hashCode is a transient non-volatile int", "committedDate": "2020-10-27T13:41:46Z", "type": "commit"}, {"oid": "395e95194ba48dcb238be3cdd4f73efb67f6aaa0", "url": "https://github.com/palantir/atlasdb/commit/395e95194ba48dcb238be3cdd4f73efb67f6aaa0", "message": "Retain Namespace hashCode values", "committedDate": "2020-10-27T14:32:34Z", "type": "commit"}, {"oid": "395e95194ba48dcb238be3cdd4f73efb67f6aaa0", "url": "https://github.com/palantir/atlasdb/commit/395e95194ba48dcb238be3cdd4f73efb67f6aaa0", "message": "Retain Namespace hashCode values", "committedDate": "2020-10-27T14:32:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0NTI4Nw==", "url": "https://github.com/palantir/atlasdb/pull/5080#discussion_r512745287", "bodyText": "This produces the same result as the previous implementation, which was effectively return Arrays.hashCode(new Object[] { name });", "author": "carterkozak", "createdAt": "2020-10-27T14:34:38Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/Namespace.java", "diffHunk": "@@ -78,7 +78,7 @@ public String getName() {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(name);\n+        return 31 + Objects.hashCode(name);", "originalCommit": "395e95194ba48dcb238be3cdd4f73efb67f6aaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1Mjc0NA==", "url": "https://github.com/palantir/atlasdb/pull/5080#discussion_r512752744", "bodyText": "sigh. I don't know where we rely on this, of all things, but it looks like it actually makes the tests pass.", "author": "jeremyk-91", "createdAt": "2020-10-27T14:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0NTI4Nw=="}], "type": "inlineReview"}]}