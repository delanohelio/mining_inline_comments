{"pr_number": 4545, "pr_title": "Start migrating AtlasDB to full conjure", "pr_createdAt": "2020-02-01T18:14:27Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4545", "timeline": [{"oid": "ea7dde2d292a730173857b302e8a0fb0b57f6500", "url": "https://github.com/palantir/atlasdb/commit/ea7dde2d292a730173857b302e8a0fb0b57f6500", "message": "Start migrating AtlasDB to full conjure\n\nAt present, we see some performance issues with timelock internally.\nThese will take some debugging, but one component is that our\nrecommendation for high-performance servers internally is not to use\nJersey (especially not jersey async, with the extra gubbins we have) but\nis to use conjure-undertow.\n\nWe also view not using conjure defined APIs as AtlasDB tech debt.\n\nMigrating Atlas in one go to conjure undertow is difficult if not\nimpossible. But there are two endpoints which represent most calls -\ngetLeaderTime and startTransactions.\n\nThis PR:\n\n1. Adds a conjure API project (timelock-api) and defines a subset of the\nAtlasDB timelock API in it.\n2. Exposes this via the timelock service, with an Undertow and Jersey\nimplementation.\n3. Uses the client for these new endpoints on the client side, provided\na boolean flag is set.\n\nRight now, tests are a little fiddly because I'm coding on my home\nlaptop and they don't work at all there.\n\nPlaces which are still potentially a little off:\n1. Error handling logic in the Conjure undertow client is just\n_different_ to Jersey's. But I think I caught all the special error\nhandlers.\n2. We can't actually use this codepath until we can expose an internal\ntimelock dependency. So I've got a boolean flag that enables it\nconditionally so we can test the timelock server implementation.\n3. I think that the client might fall back to feign in some cases? And\nthis won't work if it calls the non-leader. Not sure how we'd want to\nchange that one.", "committedDate": "2020-02-01T18:14:39Z", "type": "forcePushed"}, {"oid": "9c9852e2870bf3ff244f25cee66b7d7091ad9258", "url": "https://github.com/palantir/atlasdb/commit/9c9852e2870bf3ff244f25cee66b7d7091ad9258", "message": "Start migrating AtlasDB to full conjure\n\nAt present, we see some performance issues with timelock internally.\nThese will take some debugging, but one component is that our\nrecommendation for high-performance servers internally is not to use\nJersey (especially not jersey async, with the extra gubbins we have) but\nis to use conjure-undertow.\n\nWe also view not using conjure defined APIs as AtlasDB tech debt.\n\nMigrating Atlas in one go to conjure undertow is difficult if not\nimpossible. But there are two endpoints which represent most calls -\ngetLeaderTime and startTransactions.\n\nThis PR:\n\n1. Adds a conjure API project (timelock-api) and defines a subset of the\nAtlasDB timelock API in it.\n2. Exposes this via the timelock service, with an Undertow and Jersey\nimplementation.\n3. Uses the client for these new endpoints on the client side, provided\na boolean flag is set.\n\nRight now, tests are a little fiddly because I'm coding on my home\nlaptop and they don't work at all there.\n\nPlaces which are still potentially a little off:\n1. Error handling logic in the Conjure undertow client is just\n_different_ to Jersey's. But I think I caught all the special error\nhandlers.\n2. We can't actually use this codepath until we can expose an internal\ntimelock dependency. So I've got a boolean flag that enables it\nconditionally so we can test the timelock server implementation.\n3. I think that the client might fall back to feign in some cases? And\nthis won't work if it calls the non-leader. Not sure how we'd want to\nchange that one.", "committedDate": "2020-02-01T18:19:38Z", "type": "forcePushed"}, {"oid": "ff2f5f332123c87239150dc83b510ce1ec5867d1", "url": "https://github.com/palantir/atlasdb/commit/ff2f5f332123c87239150dc83b510ce1ec5867d1", "message": "Start migrating AtlasDB to full conjure\n\nAt present, we see some performance issues with timelock internally.\nThese will take some debugging, but one component is that our\nrecommendation for high-performance servers internally is not to use\nJersey (especially not jersey async, with the extra gubbins we have) but\nis to use conjure-undertow.\n\nWe also view not using conjure defined APIs as AtlasDB tech debt.\n\nMigrating Atlas in one go to conjure undertow is difficult if not\nimpossible. But there are two endpoints which represent most calls -\ngetLeaderTime and startTransactions.\n\nThis PR:\n\n1. Adds a conjure API project (timelock-api) and defines a subset of the\nAtlasDB timelock API in it.\n2. Exposes this via the timelock service, with an Undertow and Jersey\nimplementation.\n3. Uses the client for these new endpoints on the client side, provided\na boolean flag is set.\n\nRight now, tests are a little fiddly because I'm coding on my home\nlaptop and they don't work at all there.\n\nPlaces which are still potentially a little off:\n1. Error handling logic in the Conjure undertow client is just\n_different_ to Jersey's. But I think I caught all the special error\nhandlers.\n2. We can't actually use this codepath until we can expose an internal\ntimelock dependency. So I've got a boolean flag that enables it\nconditionally so we can test the timelock server implementation.\n3. I think that the client might fall back to feign in some cases? And\nthis won't work if it calls the non-leader. Not sure how we'd want to\nchange that one.", "committedDate": "2020-02-01T18:22:01Z", "type": "forcePushed"}, {"oid": "3a049e39f25e0f769663006dec1f199a797dd382", "url": "https://github.com/palantir/atlasdb/commit/3a049e39f25e0f769663006dec1f199a797dd382", "message": "Start migrating AtlasDB to full conjure\n\nAt present, we see some performance issues with timelock internally.\nThese will take some debugging, but one component is that our\nrecommendation for high-performance servers internally is not to use\nJersey (especially not jersey async, with the extra gubbins we have) but\nis to use conjure-undertow.\n\nWe also view not using conjure defined APIs as AtlasDB tech debt.\n\nMigrating Atlas in one go to conjure undertow is difficult if not\nimpossible. But there are two endpoints which represent most calls -\ngetLeaderTime and startTransactions.\n\nThis PR:\n\n1. Adds a conjure API project (timelock-api) and defines a subset of the\nAtlasDB timelock API in it.\n2. Exposes this via the timelock service, with an Undertow and Jersey\nimplementation.\n3. Uses the client for these new endpoints on the client side, provided\na boolean flag is set.\n\nRight now, tests are a little fiddly because I'm coding on my home\nlaptop and they don't work at all there.\n\nPlaces which are still potentially a little off:\n1. Error handling logic in the Conjure undertow client is just\n_different_ to Jersey's. But I think I caught all the special error\nhandlers.\n2. We can't actually use this codepath until we can expose an internal\ntimelock dependency. So I've got a boolean flag that enables it\nconditionally so we can test the timelock server implementation.\n3. I think that the client might fall back to feign in some cases? And\nthis won't work if it calls the non-leader. Not sure how we'd want to\nchange that one.", "committedDate": "2020-02-01T18:23:41Z", "type": "commit"}, {"oid": "3a049e39f25e0f769663006dec1f199a797dd382", "url": "https://github.com/palantir/atlasdb/commit/3a049e39f25e0f769663006dec1f199a797dd382", "message": "Start migrating AtlasDB to full conjure\n\nAt present, we see some performance issues with timelock internally.\nThese will take some debugging, but one component is that our\nrecommendation for high-performance servers internally is not to use\nJersey (especially not jersey async, with the extra gubbins we have) but\nis to use conjure-undertow.\n\nWe also view not using conjure defined APIs as AtlasDB tech debt.\n\nMigrating Atlas in one go to conjure undertow is difficult if not\nimpossible. But there are two endpoints which represent most calls -\ngetLeaderTime and startTransactions.\n\nThis PR:\n\n1. Adds a conjure API project (timelock-api) and defines a subset of the\nAtlasDB timelock API in it.\n2. Exposes this via the timelock service, with an Undertow and Jersey\nimplementation.\n3. Uses the client for these new endpoints on the client side, provided\na boolean flag is set.\n\nRight now, tests are a little fiddly because I'm coding on my home\nlaptop and they don't work at all there.\n\nPlaces which are still potentially a little off:\n1. Error handling logic in the Conjure undertow client is just\n_different_ to Jersey's. But I think I caught all the special error\nhandlers.\n2. We can't actually use this codepath until we can expose an internal\ntimelock dependency. So I've got a boolean flag that enables it\nconditionally so we can test the timelock server implementation.\n3. I think that the client might fall back to feign in some cases? And\nthis won't work if it calls the non-leader. Not sure how we'd want to\nchange that one.", "committedDate": "2020-02-01T18:23:41Z", "type": "forcePushed"}, {"oid": "02d8a283f2ead8a40d50ea25dc0395c658a68e1a", "url": "https://github.com/palantir/atlasdb/commit/02d8a283f2ead8a40d50ea25dc0395c658a68e1a", "message": "Delete redundant classes", "committedDate": "2020-02-01T18:24:40Z", "type": "commit"}, {"oid": "344903e477bed325d0b0d29d928dc79a93768040", "url": "https://github.com/palantir/atlasdb/commit/344903e477bed325d0b0d29d928dc79a93768040", "message": "Imports", "committedDate": "2020-02-01T18:28:50Z", "type": "commit"}, {"oid": "ccd1b913333a8434c02be2bc0c9b99beca25292e", "url": "https://github.com/palantir/atlasdb/commit/ccd1b913333a8434c02be2bc0c9b99beca25292e", "message": "Imorts", "committedDate": "2020-02-01T18:29:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDY4Nw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r373794687", "bodyText": "this test verifies that the code works in jersey... but we care more about undertow. Witchcraft is not open sourced so this test is hard to write. When we merge this, I'm going to write a similar test in our internal dist of timelock.", "author": "j-baker", "createdAt": "2020-02-01T18:31:42Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -78,6 +78,15 @@ public void nonLeadersReturn503() {\n         });\n     }\n \n+\n+    @Test\n+    public void nonLeadersReturn503_conjure() {\n+        cluster.nonLeaders(client.namespace()).forEach((namespace, server) -> {", "originalCommit": "ccd1b913333a8434c02be2bc0c9b99beca25292e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe1d8e488dcb65fbd6034a0a36880e55ef749d76", "url": "https://github.com/palantir/atlasdb/commit/fe1d8e488dcb65fbd6034a0a36880e55ef749d76", "message": "Fix bug in jersey code", "committedDate": "2020-02-01T18:34:16Z", "type": "commit"}, {"oid": "55c95fdf86c9c228e8e5687e10952ca813fdf5dd", "url": "https://github.com/palantir/atlasdb/commit/55c95fdf86c9c228e8e5687e10952ca813fdf5dd", "message": "Fix compile", "committedDate": "2020-02-02T14:37:51Z", "type": "commit"}, {"oid": "6d23ea812d57ff37181a239e28f33ba7bbb9b0af", "url": "https://github.com/palantir/atlasdb/commit/6d23ea812d57ff37181a239e28f33ba7bbb9b0af", "message": "Mock correctly", "committedDate": "2020-02-02T14:48:22Z", "type": "commit"}, {"oid": "3fb8f27347828102e6317ccdcae07220f7e0b3f3", "url": "https://github.com/palantir/atlasdb/commit/3fb8f27347828102e6317ccdcae07220f7e0b3f3", "message": "Add generated changelog entries", "committedDate": "2020-02-02T14:48:22Z", "type": "commit"}, {"oid": "1cbb29ea5e281516c35002adab2e219c8b96543c", "url": "https://github.com/palantir/atlasdb/commit/1cbb29ea5e281516c35002adab2e219c8b96543c", "message": "Disable license checks for conjure generated code", "committedDate": "2020-02-02T15:01:46Z", "type": "commit"}, {"oid": "92f988ec2486d047c40343a148bc9101b9fe7f2a", "url": "https://github.com/palantir/atlasdb/commit/92f988ec2486d047c40343a148bc9101b9fe7f2a", "message": "Merge branch 'jbaker/conjure_undertow' of github.com:palantir/atlasdb into jbaker/conjure_undertow", "committedDate": "2020-02-02T15:02:07Z", "type": "commit"}, {"oid": "3b816d839f4c82918565a98cb89d1bdd01707dd3", "url": "https://github.com/palantir/atlasdb/commit/3b816d839f4c82918565a98cb89d1bdd01707dd3", "message": "Make class public", "committedDate": "2020-02-02T15:05:44Z", "type": "commit"}, {"oid": "5204cc9b5d2940c8e7a9a9166c9c50c36b1ad3b1", "url": "https://github.com/palantir/atlasdb/commit/5204cc9b5d2940c8e7a9a9166c9c50c36b1ad3b1", "message": "Don't let the TimelockResource own almost all strings.\n\nAs a consequence, 'tl' is no longer a valid name for an Atlas client.\nBut it's not a name at present.", "committedDate": "2020-02-02T15:47:29Z", "type": "commit"}, {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4", "url": "https://github.com/palantir/atlasdb/commit/d8d422a520033b566549ac0e698b1753c9182bb4", "message": "Move variable to end of line", "committedDate": "2020-02-02T16:44:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4ODM5Ng==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r376988396", "bodyText": "awesome!", "author": "jeremyk-91", "createdAt": "2020-02-10T10:48:07Z", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");", "originalCommit": "d8d422a520033b566549ac0e698b1753c9182bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTI2MA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377559260", "bodyText": "(yeah this just means that we can add auth).", "author": "j-baker", "createdAt": "2020-02-11T10:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4ODM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377197445", "bodyText": "I'm guessing the goal here is, in a separate PR, flip this to true and/or only maintain the true branch, while bumping the product dependency from 0.59.x to the version that has the needed timelock?", "author": "jeremyk-91", "createdAt": "2020-02-10T17:10:01Z", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -40,19 +42,31 @@\n import com.palantir.logsafe.Preconditions;\n \n class LockLeaseService {\n+    private static final boolean HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY = false;\n     private final NamespacedTimelockRpcClient delegate;\n+    private final NamespacedConjureTimelockService conjureDelegate;\n     private final UUID clientId;\n     private final CoalescingSupplier<LeaderTime> time;\n \n     @VisibleForTesting\n-    LockLeaseService(NamespacedTimelockRpcClient timelockRpcClient, UUID clientId) {\n+    LockLeaseService(\n+            NamespacedTimelockRpcClient timelockRpcClient,\n+            NamespacedConjureTimelockService conjureDelegate,\n+            UUID clientId) {\n         this.delegate = timelockRpcClient;\n+        this.conjureDelegate = conjureDelegate;\n         this.clientId = clientId;\n-        this.time = new CoalescingSupplier<>(timelockRpcClient::getLeaderTime);\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "originalCommit": "d8d422a520033b566549ac0e698b1753c9182bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1MjU2Mg==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377552562", "bodyText": "right, exactly - basically set to true and inline", "author": "j-baker", "createdAt": "2020-02-11T10:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1OTkwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377659901", "bodyText": "do we want to add the ability to fallback in the case things are borked? or actually just have this be a feature flag until we're happy with it? since this is inside the client and will be annoying to coordinate in the presence of issues.", "author": "felixdesouza", "createdAt": "2020-02-11T14:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwNzk2NA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380707964", "bodyText": "@felixdesouza Don't think there's very much code (beyond generated stuff) on the client side? The server impl is different and maybe we can have a flag there, but it's a lot easier to blacklist stuff.", "author": "jeremyk-91", "createdAt": "2020-02-18T14:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNDc5NA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377214794", "bodyText": "I validated that this behaviour is in line with the current state of the exception mappers in Jersey land. I guess the tests do enforce this parallelism to some extent.", "author": "jeremyk-91", "createdAt": "2020-02-10T17:42:21Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {\n+        return handleExceptions(Futures.submitAsync(\n+                () -> Futures.immediateFuture(supplier.get()), MoreExecutors.directExecutor()));\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(ListenableFuture<T> future) {\n+        return FluentFuture.from(future)\n+                .catching(BlockingTimeoutException.class, timeout -> {\n+                    throw QosException.throttle(Duration.ZERO);\n+                }, MoreExecutors.directExecutor())\n+                .catching(NotCurrentLeaderException.class, notCurrentLeader -> {\n+                    throw redirectRetryTargeter.redirectRequest(notCurrentLeader.getServiceHint())\n+                            .<QosException>map(QosException::retryOther)\n+                            .orElseGet(QosException::unavailable);\n+                }, MoreExecutors.directExecutor())\n+                .catching(TooManyRequestsException.class, tooManyRequests -> {\n+                    throw QosException.throttle();\n+                }, MoreExecutors.directExecutor());", "originalCommit": "d8d422a520033b566549ac0e698b1753c9182bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43cb257f8e8f140f5766b6c34b419089df9a384f", "url": "https://github.com/palantir/atlasdb/commit/43cb257f8e8f140f5766b6c34b419089df9a384f", "message": "Remove repositories configuration from shared.gradle", "committedDate": "2020-02-11T10:58:41Z", "type": "commit"}, {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b", "url": "https://github.com/palantir/atlasdb/commit/41eda4d4c00ab799a645c774860fe102cde6e69b", "message": "Merge branch 'develop' into jbaker/conjure_undertow", "committedDate": "2020-02-11T11:00:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NjI4NA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377686284", "bodyText": "So with the RemoteTimelockServiceAdapter operating as a TimelockService the idea was to separate out the RPC concerns from the \"logical\" concerns.\nWe have the same instance here but a level below.\nIt would be nice to not have to think about conjure concerns in this class and have a wrapper that can deal with the differences.", "author": "felixdesouza", "createdAt": "2020-02-11T14:56:48Z", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -65,8 +79,22 @@ LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     StartTransactionResponseV4 startTransactions(int batchSize) {\n-        StartTransactionRequestV4 request = StartTransactionRequestV4.createForRequestor(clientId, batchSize);\n-        StartTransactionResponseV4 response = delegate.startTransactions(request);\n+        final StartTransactionResponseV4 response;\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzA5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377687093", "bodyText": "Curious, what benefit do we get out of defining a conjure start transcation request object? Aren't they going to be just as big on the wire?", "author": "felixdesouza", "createdAt": "2020-02-11T14:57:59Z", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -65,8 +79,22 @@ LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     StartTransactionResponseV4 startTransactions(int batchSize) {\n-        StartTransactionRequestV4 request = StartTransactionRequestV4.createForRequestor(clientId, batchSize);\n-        StartTransactionResponseV4 response = delegate.startTransactions(request);\n+        final StartTransactionResponseV4 response;\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {\n+            ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzQ4Mg==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377687482", "bodyText": "i.e. isn't it possible to just refer to the non-conjure start transaction request/response inside the conjure definition?", "author": "felixdesouza", "createdAt": "2020-02-11T14:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyOTkxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380729911", "bodyText": "James: I did this because conjure objects are naturally backwards compatible, whereas our objects typically are not (or at least, require the user to have correctly added jsonignoreproperties) - it's safe to add new fields on the server side. This means we should be able to evolve our types rather than adding new endpoints for every field.", "author": "jeremyk-91", "createdAt": "2020-02-18T15:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4ODk3OQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377688979", "bodyText": "based on the above comment, if this implemented a RpcBridge interface or something aptly named, then we can have the return types be in terms of generic \"atlas\" rpc objects, and declutter the usages", "author": "felixdesouza", "createdAt": "2020-02-11T15:00:44Z", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4OTY3NA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377689674", "bodyText": "it also lends itself quite easily to doing the experimental proxy suggestion I made earlier.", "author": "felixdesouza", "createdAt": "2020-02-11T15:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4ODk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc0MTcyMw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380741723", "bodyText": "I don't think we'd want to implement the full interface on both sides though - as we migrate endpoints to Conjure, we'll want to take them out of the legacy RPC protocol at least for clients (server resource might take a bit longer, granted, but the end state is to only have Conjure).", "author": "jeremyk-91", "createdAt": "2020-02-18T15:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4ODk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NTYzNw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377695637", "bodyText": "is there a better way of clearly delineating between the two? i.e. timelockResource and timelockService and why you'd want to pick one over the other?", "author": "felixdesouza", "createdAt": "2020-02-11T15:10:53Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockServices.java", "diffHunk": "@@ -27,21 +27,24 @@\n     static TimeLockServices create(\n             TimestampService timestampService,\n             LockService lockService,\n-            AsyncTimelockResource timelockService,\n+            AsyncTimelockService timelockService,\n+            AsyncTimelockResource timelockResource,\n             LockWatchingResource lockWatchingResource,\n             TimestampManagementService timestampManagementService) {\n         return ImmutableTimeLockServices.builder()\n                 .timestampService(timestampService)\n                 .lockService(lockService)\n                 .timestampManagementService(timestampManagementService)\n                 .timelockService(timelockService)\n+                .timelockResource(timelockResource)\n                 .lockWatchingResource(lockWatchingResource)\n                 .build();\n     }\n \n     TimestampService getTimestampService();\n     LockService getLockService();\n-    AsyncTimelockResource getTimelockService();\n+    AsyncTimelockResource getTimelockResource();", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczNTYyOQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380735629", "bodyText": "Added a comment outlining that AsyncTimelockResource is Jersey specific.", "author": "jeremyk-91", "createdAt": "2020-02-18T15:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NTYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMTQ1Nw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377711457", "bodyText": "since this is code and not routing, we should name it properly", "author": "felixdesouza", "createdAt": "2020-02-11T15:33:39Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczNDM3Nw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380734377", "bodyText": "renamed to forNamespace", "author": "jeremyk-91", "createdAt": "2020-02-18T15:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzIyOQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377717229", "bodyText": "whilst this works it feels tacked on, and adds quite a bit of indirection complexity that I believe can be avoided.\nInside TimelockResource we have a map of the same signature and the same function thing.\nInstead of us passing functions everywhere, can we just create a class that deals with all of that similar to how LocalPaxosComponents does it? Then we just pass that around and we're good to go.", "author": "felixdesouza", "createdAt": "2020-02-11T15:42:10Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -159,16 +170,29 @@ private void createAndRegisterResources() {\n         registerPaxosResource();\n         registerExceptionMappers();\n \n+        Map<String, TimeLockServices> services = new ConcurrentHashMap<>();", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNDcxNw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377724717", "bodyText": "Took me a minute, but I think it would be useful to have a doc/comment explaining that this is there so that even if the server does not support undertow, it still responds to routes that were purposefully defined for conjure & undertow.", "author": "felixdesouza", "createdAt": "2020-02-11T15:53:20Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNjM1Nw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377726357", "bodyText": "so if I've understood correctly, for only the endpoints defined in conjure, regardless of whether they are in jersey or undertow, they will use this codepath for exception handling?\nespecially for jersey, it will never invoke the exception mappers for the below exceptions?", "author": "felixdesouza", "createdAt": "2020-02-11T15:55:40Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {\n+        return handleExceptions(Futures.submitAsync(\n+                () -> Futures.immediateFuture(supplier.get()), MoreExecutors.directExecutor()));\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(ListenableFuture<T> future) {\n+        return FluentFuture.from(future)\n+                .catching(BlockingTimeoutException.class, timeout -> {\n+                    throw QosException.throttle(Duration.ZERO);", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMDY4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380730689", "bodyText": "Yes", "author": "jeremyk-91", "createdAt": "2020-02-18T15:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNjM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMDQ4NQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377730485", "bodyText": "let's have the Supplier<T> be a Callable<T> which is a bit more accurate.", "author": "felixdesouza", "createdAt": "2020-02-11T16:01:21Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxMzkxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380313911", "bodyText": "I would rather not callers be able to use checked exceptions.", "author": "j-baker", "createdAt": "2020-02-17T18:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMDQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMTQ3OA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377731478", "bodyText": "similar vein as comment below: comment re this class represents a new set of endpoints that are defined via conjure.", "author": "felixdesouza", "createdAt": "2020-02-11T16:02:50Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMzU4Mw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380733583", "bodyText": "Won't mark them as new endpoints, because they're not 'new' once this PR merges - they're the status quo. I will deprecate TimeLockResource, however - to ensure that new methods end up in here.", "author": "jeremyk-91", "createdAt": "2020-02-18T15:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMTQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377736247", "bodyText": "this refuses to match against /tl? not sure how hard it would be to ensure that we never hit this path accidentally, since it's an integration test\nI imagine we want to roll out undertow across more endpoints, what if all conjure endpoints started off with ~c? Or some starting symbol that won't match against this similar to how there is .internal for the paxos stuff? Then we don't have to change this line.", "author": "felixdesouza", "createdAt": "2020-02-11T16:10:17Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -41,7 +41,7 @@\n import com.palantir.timestamp.TimestampManagementService;\n import com.palantir.timestamp.TimestampService;\n \n-@Path(\"/{namespace: [a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!tl)[a-zA-Z0-9_-]+}\")", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3MDM4OA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r378170388", "bodyText": "While we're here, just thought of something: if we decide we want to continue at this level, this should probably be (?!tl$) instead, in case someone decides to name their client beginning with tl. As written this doesn't match e.g. tlb or tldr which is probably not the intention. I realise we're going for very short paths in general for perf reasons.", "author": "jeremyk-91", "createdAt": "2020-02-12T10:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxMzY2MA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380313660", "bodyText": "Conjure endpoints cannot start with special characters.", "author": "j-baker", "createdAt": "2020-02-17T17:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMjQ5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380732499", "bodyText": "(have added $)", "author": "jeremyk-91", "createdAt": "2020-02-18T15:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTgyMA==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377739820", "bodyText": "resource.leaderTime will never throw BlockingTimeoutException right? It will always give you back a failed ListenableFuture if I've read correctly", "author": "felixdesouza", "createdAt": "2020-02-11T16:15:46Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/ConjureTimelockResourceTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ConjureTimelockResourceTest {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer test\");\n+    private static final int REMOTE_PORT = 4321;\n+    private static final URL LOCAL = url(\"https://localhost:1234\");\n+    private static final URL REMOTE = url(\"https://localhost:\" + REMOTE_PORT);\n+    private static final RedirectRetryTargeter TARGETER = RedirectRetryTargeter.create(\n+            LOCAL,\n+            ImmutableList.of(LOCAL, REMOTE));\n+\n+    private static final String NAMESPACE = \"test\";\n+\n+    @Mock private AsyncTimelockService timelockService;\n+    @Mock private LeaderTime leaderTime;\n+\n+    private ConjureTimelockResource resource;\n+    private ConjureTimelockService service;\n+\n+    @Before\n+    public void before() {\n+        resource = new ConjureTimelockResource(TARGETER, unused -> timelockService);\n+        service = ConjureTimelockResource.jersey(TARGETER, unused -> timelockService);\n+        when(timelockService.leaderTime()).thenReturn(leaderTime);\n+    }\n+\n+    @Test\n+    public void canGetLeaderTime() {\n+        assertThat(Futures.getUnchecked(resource.leaderTime(AUTH_HEADER, NAMESPACE))).isEqualTo(leaderTime);\n+    }\n+\n+    @Test\n+    public void jerseyPropagatesExceptions() {\n+        when(resource.leaderTime(AUTH_HEADER, NAMESPACE)).thenThrow(new BlockingTimeoutException(\"\"));", "originalCommit": "41eda4d4c00ab799a645c774860fe102cde6e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MjA4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377742089", "bodyText": "unless there's a generated form that's calling .get on it, then fine, but still feels a bit weird", "author": "felixdesouza", "createdAt": "2020-02-11T16:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMjEzMQ==", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380732131", "bodyText": "replaced with the failed listenable future", "author": "jeremyk-91", "createdAt": "2020-02-18T15:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTgyMA=="}], "type": "inlineReview"}, {"oid": "1d5a85fd6a4fd9e280746ce2cd75bc8b91830df2", "url": "https://github.com/palantir/atlasdb/commit/1d5a85fd6a4fd9e280746ce2cd75bc8b91830df2", "message": "PR comments", "committedDate": "2020-02-18T15:22:01Z", "type": "commit"}, {"oid": "dbfd327de0bf649e566d30fff86f22e265f627dd", "url": "https://github.com/palantir/atlasdb/commit/dbfd327de0bf649e566d30fff86f22e265f627dd", "message": "factor out timelocknamespaces", "committedDate": "2020-02-18T17:23:32Z", "type": "commit"}, {"oid": "520c89c26b864ff422dfd50256d4c5b476eaeb8f", "url": "https://github.com/palantir/atlasdb/commit/520c89c26b864ff422dfd50256d4c5b476eaeb8f", "message": "Merge branch 'develop' into jbaker/conjure_undertow", "committedDate": "2020-02-18T17:26:13Z", "type": "commit"}, {"oid": "eba5cb3915632e6fc88a820982b605cdb689d87f", "url": "https://github.com/palantir/atlasdb/commit/eba5cb3915632e6fc88a820982b605cdb689d87f", "message": "Dollar sign did not help", "committedDate": "2020-02-18T17:38:52Z", "type": "commit"}, {"oid": "f5e37ea6daa24847dfab17b7a8df6b2a51e1d6df", "url": "https://github.com/palantir/atlasdb/commit/f5e37ea6daa24847dfab17b7a8df6b2a51e1d6df", "message": "Revert bogus change", "committedDate": "2020-02-18T17:42:14Z", "type": "commit"}, {"oid": "fe2f998e08230eeb67deb439f95305229970e0ce", "url": "https://github.com/palantir/atlasdb/commit/fe2f998e08230eeb67deb439f95305229970e0ce", "message": "test", "committedDate": "2020-02-18T17:43:30Z", "type": "commit"}, {"oid": "c907ba2f2e003aafd20d15e5795182824e0876da", "url": "https://github.com/palantir/atlasdb/commit/c907ba2f2e003aafd20d15e5795182824e0876da", "message": "Fixes", "committedDate": "2020-02-18T18:10:57Z", "type": "commit"}]}