{"pr_number": 2057, "pr_title": "Add a RdsUtilities with the ability to generate an IAM auth token", "pr_createdAt": "2020-09-22T21:17:15Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/2057", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTg2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r493065866", "bodyText": "This probably needs a link to the doc where it states this must be 15 min", "author": "hunterwerlla", "createdAt": "2020-09-22T22:20:16Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);", "originalCommit": "3c56269744cd8ef94a13c558bbf52ea923af6784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzg2Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r498403862", "bodyText": "Ya, our doc pages all say 15 mins: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html", "author": "abrooksv", "createdAt": "2020-10-01T17:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjgxMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r520806810", "bodyText": "We probably should validate hostname to make sure it's compliant. https://github.com/aws/aws-sdk-java-v2/blob/master/utils/src/main/java/software/amazon/awssdk/utils/HostnameValidator.java#L23", "author": "zoewangg", "createdAt": "2020-11-10T19:04:36Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to get an auth token for IAM database authentication.\n+ */\n+public final class GenerateAuthenticationTokenRequest implements ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");", "originalCommit": "3c56269744cd8ef94a13c558bbf52ea923af6784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMzM3MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534403370", "bodyText": "Will change", "author": "abrooksv", "createdAt": "2020-12-02T18:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwNjgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQyMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r520808422", "bodyText": "SdkClientConfiguration is a protected API, so not sure if we want to use it here\nIt seems we only need region and credential provider here", "author": "zoewangg", "createdAt": "2020-11-10T19:07:36Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {\n+    private final SdkClientConfiguration clientConfiguration;\n+\n+    /**\n+     * SDK currently validates that region is present while constructing {@link RdsUtilities} object.\n+     * This can be relaxed in the future when more methods are added that don't use region.\n+     */\n+    private RdsUtilities(Builder builder) {\n+        this.clientConfiguration = builder.clientConfiguration;\n+    }\n+\n+    /**\n+     * Creates a builder for {@link RdsUtilities}.\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    // Used by low-level client\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return RdsUtilities.builder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    public String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);\n+        String signedUrl = fullRequest.getUri().toString();\n+\n+        // Format should be: <hostname>>:<port>>/?Action=connect&DBUser=<username>>&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Expi...\n+        // Note: This must be the real RDS hostname, not proxy or tunnels\n+        return StringUtils.replacePrefixIgnoreCase(signedUrl, \"https://\", \"\");\n+    }\n+\n+    private Region resolveRegion(GenerateAuthenticationTokenRequest request) {\n+        if (request.region() != null) {\n+            return request.region();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.AWS_REGION) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.AWS_REGION);\n+        }\n+\n+        throw new IllegalArgumentException(\"Region should be provided either in GenerateAuthenticationTokenRequest object or \"\n+                                           + \"inherited from RdsClient#utilities\");\n+    }\n+\n+    private AwsCredentialsProvider resolveCredentials(GenerateAuthenticationTokenRequest request) {\n+        if (request.credentialsProvider() != null) {\n+            return request.credentialsProvider();\n+        }\n+\n+        if (this.clientConfiguration != null && this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER) != null) {\n+            return this.clientConfiguration.option(AwsClientOption.CREDENTIALS_PROVIDER);\n+        }\n+\n+        throw new IllegalArgumentException(\"CredentialProvider should be provided either in GenerateAuthenticationTokenRequest \"\n+                                           + \"object or inherited from RdsClient#utilities\");\n+    }\n+\n+    /**\n+     * Builder class to construct {@link RdsUtilities} object\n+     */\n+    public static final class Builder {\n+        private SdkClientConfiguration clientConfiguration;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder clientConfiguration(SdkClientConfiguration clientConfiguration) {", "originalCommit": "3c56269744cd8ef94a13c558bbf52ea923af6784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNDY1OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534404659", "bodyText": "Was worried about future compatibility, but since this is private we can worry about that if/when that time comes", "author": "abrooksv", "createdAt": "2020-12-02T18:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMDk0NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r551630944", "bodyText": "Builder now stores the cred provider and region as fields. This method is used by the package protected method RdsUtilities#create which is generated to be used from RdsClient#utiltiies()\nDefaultRdsClient.java\n    @Override\n    public RdsUtilities utilities() {\n        return RdsUtilities.create(clientConfiguration);\n    }\n\nSo everything is now hidden which should be hidden. Will add cred provider and region to the builder though so manual creation is possible.", "author": "abrooksv", "createdAt": "2021-01-04T23:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwODQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTY1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r520811655", "bodyText": "I understand the existing S3Utitlies doesn't have an interface, but seems a good idea to create one for new utility classes.", "author": "zoewangg", "createdAt": "2020-11-10T19:13:34Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkPublicApi\n+public final class RdsUtilities {", "originalCommit": "3c56269744cd8ef94a13c558bbf52ea923af6784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMjc2Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534402762", "bodyText": "To be clear, not a base interface for all utils, just the methods in this class, right?", "author": "abrooksv", "createdAt": "2020-12-02T18:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4OTE2Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r534489163", "bodyText": "Yup", "author": "zoewangg", "createdAt": "2020-12-02T21:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMTY1NQ=="}], "type": "inlineReview"}, {"oid": "0bd2dbe2b355cf7c8856bc8b4eff40e7f67b3c83", "url": "https://github.com/aws/aws-sdk-java-v2/commit/0bd2dbe2b355cf7c8856bc8b4eff40e7f67b3c83", "message": "Extract out interfaces, add JavaDoc, extend utilities codegen to support interface vs concrete", "committedDate": "2021-01-05T00:51:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjM3NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552246375", "bodyText": "Can we add javadocs for it?", "author": "zoewangg", "createdAt": "2021-01-05T22:51:09Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+\n+@SdkPublicApi\n+public interface RdsUtilities {\n+    /**\n+     * Create a builder that can be used to configure and create a {@link RdsUtilities}.\n+     */\n+    static Builder builder() {\n+        return new DefaultRdsUtilities.DefaultBuilder();\n+    }\n+\n+    default String generateAuthenticationToken(Consumer<GenerateAuthenticationTokenRequest.Builder> getUrlRequest) {\n+        return generateAuthenticationToken(GenerateAuthenticationTokenRequest.builder().applyMutation(getUrlRequest).build());\n+    }\n+\n+    default String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {", "originalCommit": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3Nzg1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552277855", "bodyText": "Yep, missed this one.", "author": "abrooksv", "createdAt": "2021-01-06T00:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0Njc2Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552246762", "bodyText": "Can we add javadocs? same as other public APIs", "author": "zoewangg", "createdAt": "2021-01-05T22:52:14Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.RdsUtilities;\n+import software.amazon.awssdk.utils.HostnameValidator;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to generate an auth token for IAM database authentication.\n+ */\n+@SdkPublicApi\n+public final class GenerateAuthenticationTokenRequest implements\n+        ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        HostnameValidator.validateHostnameCompliant(builder.hostname, \"hostname\", \"GenerateAuthenticationTokenRequest\");\n+\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");\n+        this.port = Validate.isPositive(builder.port, \"port\");\n+        this.username = Validate.notEmpty(builder.username, \"username\");\n+        this.region = builder.region;\n+        this.credentialsProvider = builder.credentialsProvider;\n+    }\n+\n+    public String hostname() {", "originalCommit": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjkyOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552246929", "bodyText": "username()?", "author": "zoewangg", "createdAt": "2021-01-05T22:52:46Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/model/GenerateAuthenticationTokenRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds.model;\n+\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.RdsUtilities;\n+import software.amazon.awssdk.utils.HostnameValidator;\n+import software.amazon.awssdk.utils.Validate;\n+import software.amazon.awssdk.utils.builder.CopyableBuilder;\n+import software.amazon.awssdk.utils.builder.ToCopyableBuilder;\n+\n+/**\n+ * Request object to generate an auth token for IAM database authentication.\n+ */\n+@SdkPublicApi\n+public final class GenerateAuthenticationTokenRequest implements\n+        ToCopyableBuilder<GenerateAuthenticationTokenRequest.Builder, GenerateAuthenticationTokenRequest> {\n+    private final String hostname;\n+    private final int port;\n+    private final String username;\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    public GenerateAuthenticationTokenRequest(BuilderImpl builder) {\n+        HostnameValidator.validateHostnameCompliant(builder.hostname, \"hostname\", \"GenerateAuthenticationTokenRequest\");\n+\n+        this.hostname = Validate.notEmpty(builder.hostname, \"hostname\");\n+        this.port = Validate.isPositive(builder.port, \"port\");\n+        this.username = Validate.notEmpty(builder.username, \"username\");\n+        this.region = builder.region;\n+        this.credentialsProvider = builder.credentialsProvider;\n+    }\n+\n+    public String hostname() {\n+        return hostname;\n+    }\n+\n+    public int port() {\n+        return port;\n+    }\n+\n+    public String userName() {", "originalCommit": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxNzk1Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552317957", "bodyText": "Changed", "author": "abrooksv", "createdAt": "2021-01-06T01:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0NjkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0OTg4Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552249883", "bodyText": "nit, can we make it a constant and add a comment with the link there so that it's less of a magic number?", "author": "zoewangg", "createdAt": "2021-01-05T23:00:38Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkInternalApi\n+final class DefaultRdsUtilities implements RdsUtilities {\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    DefaultRdsUtilities(DefaultBuilder builder) {\n+        this.credentialsProvider = builder.credentialsProvider;\n+        this.region = builder.region;\n+    }\n+\n+    /**\n+     * Used by RDS low-level client's utilities() method\n+     */\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return new DefaultBuilder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    @Override\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);", "originalCommit": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMxODM5MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552318390", "bodyText": "Yep", "author": "abrooksv", "createdAt": "2021-01-06T01:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0OTg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTM4Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552251383", "bodyText": "Seems like we can reuse the signer.", "author": "zoewangg", "createdAt": "2021-01-05T23:05:04Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/DefaultRdsUtilities.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import software.amazon.awssdk.annotations.Immutable;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.signer.Aws4Signer;\n+import software.amazon.awssdk.auth.signer.params.Aws4PresignerParams;\n+import software.amazon.awssdk.awscore.client.config.AwsClientOption;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpMethod;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+import software.amazon.awssdk.utils.StringUtils;\n+\n+@Immutable\n+@SdkInternalApi\n+final class DefaultRdsUtilities implements RdsUtilities {\n+    private final Region region;\n+    private final AwsCredentialsProvider credentialsProvider;\n+\n+    DefaultRdsUtilities(DefaultBuilder builder) {\n+        this.credentialsProvider = builder.credentialsProvider;\n+        this.region = builder.region;\n+    }\n+\n+    /**\n+     * Used by RDS low-level client's utilities() method\n+     */\n+    @SdkInternalApi\n+    static RdsUtilities create(SdkClientConfiguration clientConfiguration) {\n+        return new DefaultBuilder().clientConfiguration(clientConfiguration).build();\n+    }\n+\n+    @Override\n+    public String generateAuthenticationToken(GenerateAuthenticationTokenRequest request) {\n+        SdkHttpFullRequest httpRequest = SdkHttpFullRequest.builder()\n+                                            .method(SdkHttpMethod.GET)\n+                                            .protocol(\"https\")\n+                                            .host(request.hostname())\n+                                            .port(request.port())\n+                                            .encodedPath(\"/\")\n+                                            .putRawQueryParameter(\"DBUser\", request.userName())\n+                                            .putRawQueryParameter(\"Action\", \"connect\")\n+                                            .build();\n+\n+        Instant expirationTime = Instant.now().plus(15, ChronoUnit.MINUTES);\n+        Aws4PresignerParams presignRequest = Aws4PresignerParams.builder()\n+                                                .expirationTime(expirationTime)\n+                                                .awsCredentials(resolveCredentials(request).resolveCredentials())\n+                                                .signingName(\"rds-db\")\n+                                                .signingRegion(resolveRegion(request))\n+                                                .build();\n+\n+        SdkHttpFullRequest fullRequest = Aws4Signer.create().presign(httpRequest, presignRequest);", "originalCommit": "58191334d6ed1a9be1a88ca6f6939ce5c1c2b3e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMzMzExMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r552333111", "bodyText": "Ok, it lacked the thread safe annotation so wasnt sure.", "author": "abrooksv", "createdAt": "2021-01-06T02:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTM4Mw=="}], "type": "inlineReview"}, {"oid": "05420271e4d7e9818abbba6bb3cc9f2499164aea", "url": "https://github.com/aws/aws-sdk-java-v2/commit/05420271e4d7e9818abbba6bb3cc9f2499164aea", "message": "Add more JavaDoc and tests", "committedDate": "2021-01-25T20:30:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA2NDY1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r564064658", "bodyText": "Test data came from AWS CLI: https://github.com/aws/aws-cli/blob/master/tests/functional/rds/test_generate_db_auth_token.py#L50", "author": "abrooksv", "createdAt": "2021-01-25T21:45:27Z", "path": "services/rds/src/test/java/software/amazon/awssdk/services/rds/DefaultRdsUtilitiesTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package software.amazon.awssdk.services.rds;\n+\n+import org.junit.Test;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+\n+import java.time.Clock;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import software.amazon.awssdk.services.rds.DefaultRdsUtilities.DefaultBuilder;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;\n+\n+public class DefaultRdsUtilitiesTest {\n+    private final ZoneId utcZone = ZoneId.of(\"UTC\").normalized();\n+    private final Clock fixedClock = Clock.fixed(ZonedDateTime.of(2016, 11, 7, 17, 39, 33, 0, utcZone).toInstant(), utcZone);", "originalCommit": "05420271e4d7e9818abbba6bb3cc9f2499164aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f178c96a68f94ec9978e96ba71332ccdf7dedf81", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f178c96a68f94ec9978e96ba71332ccdf7dedf81", "message": "Add section to LaunchChangelog.md", "committedDate": "2021-01-25T22:03:44Z", "type": "forcePushed"}, {"oid": "1ef3854da8e51f5c7362665003dad6bb84a67180", "url": "https://github.com/aws/aws-sdk-java-v2/commit/1ef3854da8e51f5c7362665003dad6bb84a67180", "message": "Add section to LaunchChangelog.md", "committedDate": "2021-01-25T22:05:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI1NzE5OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2057#discussion_r572257199", "bodyText": "Nit, should we move this option up since it's recommended", "author": "zoewangg", "createdAt": "2021-02-08T18:04:19Z", "path": "services/rds/src/main/java/software/amazon/awssdk/services/rds/RdsUtilities.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.rds;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.rds.model.GenerateAuthenticationTokenRequest;\n+\n+/**\n+ * Utilities for working with RDS. An instance of this class can be created by:\n+ * <p>\n+ * 1) Directly using the {@link #builder()} method.\n+ *\n+ * <pre>\n+ * RdsUtilities utilities = RdsUtilities.builder()\n+ *  .credentialsProvider(DefaultCredentialsProvider.create())\n+ *  .region(Region.US_WEST_2)\n+ *  .build()\n+ * </pre>\n+ * </p>\n+ *\n+ * <p>\n+ * 2) Using the low-level client {@link RdsClient#utilities()} (or {@link RdsAsyncClient#utilities()}} method. This is\n+ * recommended as SDK will use the same configuration from the {@link RdsClient} object to create the {@link RdsUtilities} object.", "originalCommit": "1ef3854da8e51f5c7362665003dad6bb84a67180", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4348a5d79d297be474f526f36bd3093b555c4b6b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/4348a5d79d297be474f526f36bd3093b555c4b6b", "message": "Add a RdsUtilities class with the ability to generate an IAM auth token", "committedDate": "2021-02-16T22:40:18Z", "type": "forcePushed"}, {"oid": "0c064a02e76f6588d4a7ef8558d2a9b88aa85c2a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/0c064a02e76f6588d4a7ef8558d2a9b88aa85c2a", "message": "Add a RdsUtilities class with the ability to generate an IAM auth token", "committedDate": "2021-02-18T21:45:43Z", "type": "commit"}, {"oid": "0c064a02e76f6588d4a7ef8558d2a9b88aa85c2a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/0c064a02e76f6588d4a7ef8558d2a9b88aa85c2a", "message": "Add a RdsUtilities class with the ability to generate an IAM auth token", "committedDate": "2021-02-18T21:45:43Z", "type": "forcePushed"}]}