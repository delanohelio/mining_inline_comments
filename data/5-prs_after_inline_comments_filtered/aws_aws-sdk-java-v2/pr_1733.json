{"pr_number": 1733, "pr_title": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration", "pr_createdAt": "2020-03-23T18:36:11Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1733", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzI5OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396683298", "bodyText": "Can we call this serviceConfiguration to match S3BaseClientBuilder#serviceConfiguration?", "author": "millems", "createdAt": "2020-03-23T18:53:57Z", "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/presigner/S3Presigner.java", "diffHunk": "@@ -512,6 +513,8 @@ default PresignedAbortMultipartUploadRequest presignAbortMultipartUpload(\n     @SdkPublicApi\n     @NotThreadSafe\n     interface Builder extends SdkPresigner.Builder {\n+        Builder s3Configuration(S3Configuration s3Configuration);", "originalCommit": "c5a546aa64670ef8ac115d6f49885ebc953e21bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzAzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396763034", "bodyText": "Yes, I'll update this", "author": "scheerer", "createdAt": "2020-03-23T21:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzgxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396683815", "bodyText": "Why is disabling checksum validation required?", "author": "millems", "createdAt": "2020-03-23T18:54:50Z", "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/internal/presigner/DefaultS3Presigner.java", "diffHunk": "@@ -98,9 +98,13 @@\n @SdkInternalApi\n public final class DefaultS3Presigner extends DefaultSdkPresigner implements S3Presigner {\n     private static final AwsS3V4Signer DEFAULT_SIGNER = AwsS3V4Signer.create();\n+    private static final S3Configuration DEFAULT_S3_CONFIGURATION = S3Configuration.builder()\n+            .checksumValidationEnabled(false)\n+            .build();", "originalCommit": "c5a546aa64670ef8ac115d6f49885ebc953e21bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2Mjk1Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396762952", "bodyText": "This is just carrying forward the existing default this class was using on line 292. To be honest, I'm not real sure why it is set that way to begin with.", "author": "scheerer", "createdAt": "2020-03-23T21:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4MzgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NDM2OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r396684368", "bodyText": "Can we test all possible flags of S3Configuration?", "author": "millems", "createdAt": "2020-03-23T18:55:44Z", "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/S3PresignerTest.java", "diffHunk": "@@ -325,4 +328,23 @@ public void putObject_Sigv4PresignerHonorsSignatureDuration() {\n             assertThat(Integer.parseInt(expires)).isCloseTo(1234, Offset.offset(2));\n         });\n     }\n+\n+    @Test\n+    public void getObject_S3ConfigurationCanBeOverriddenToLeverageTransferAcceleration() {\n+        S3Presigner presigner = presignerBuilder().s3Configuration(S3Configuration.builder()\n+                    .accelerateModeEnabled(true)\n+                    .checksumValidationEnabled(false)\n+                    .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(\"foo34343434\")\n+                                .key(\"bar\")));\n+\n+\n+        System.out.println(presignedRequest.url());\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(\".s3-accelerate.\");\n+    }", "originalCommit": "c5a546aa64670ef8ac115d6f49885ebc953e21bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c7280445eed9aa94a7e13f89c8b28ca545be339e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c7280445eed9aa94a7e13f89c8b28ca545be339e", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration", "committedDate": "2020-03-24T21:19:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5Nzk0MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r398097941", "bodyText": "Nice! Thanks for testing this.\nFor the other features:\n\npathStyleAccessEnabled, useArnRegionEnabled both affect the endpoint. If they're working, can we add a test for them? If they're not working, maybe we should throw an exception if they're configured.\nchunkedEncodingEnabled and checksumValidationEnabled don't make sense for presigned requests right now. Can we add some javadoc to mention that they currently aren't used for presigning?", "author": "millems", "createdAt": "2020-03-25T18:59:37Z", "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/S3PresignerTest.java", "diffHunk": "@@ -325,4 +330,94 @@ public void putObject_Sigv4PresignerHonorsSignatureDuration() {\n             assertThat(Integer.parseInt(expires)).isCloseTo(1234, Offset.offset(2));\n         });\n     }\n+\n+    @Test\n+    public void getObject_S3ConfigurationCanBeOverriddenToLeverageTransferAcceleration() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                    .accelerateModeEnabled(true)\n+                    .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(\"foo34343434\")\n+                                .key(\"bar\")));\n+\n+\n+        System.out.println(presignedRequest.url());\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(\".s3-accelerate.\");\n+    }\n+\n+\n+    @Test\n+    public void accelerateEnabled_UsesVirtualAddressingWithAccelerateEndpoint() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack uses regional endpoints that support virtual addressing.\n+     */\n+    @Test\n+    public void dualstackEnabled_UsesVirtualAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(String.format(\"%s.s3.dualstack.us-west-2.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack also supports path style endpoints just like the normal endpoints.\n+     */\n+    @Test\n+    public void dualstackAndPathStyleEnabled_UsesPathStyleAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .pathStyleAccessEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(\"s3.dualstack.us-west-2.amazonaws.com\");\n+    }\n+\n+    /**\n+     * When dualstack and accelerate are both enabled there is a special, global dualstack endpoint we must use.\n+     */\n+    @Test\n+    public void dualstackAndAccelerateEnabled_UsesDualstackAccelerateEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.dualstack.amazonaws.com\", BUCKET));", "originalCommit": "5e30d986a096b36d46e76923fc1cc73789d30906", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "087fe2739083169531a4992b5cc2f9453bb1a538", "url": "https://github.com/aws/aws-sdk-java-v2/commit/087fe2739083169531a4992b5cc2f9453bb1a538", "message": "Add S3Presigner tests to address useArnRegionEnabled; javadoc additions to note S3Configuration items that do not apply to presigning", "committedDate": "2020-04-02T17:21:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTU3MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r402511571", "bodyText": "Can we include the javadoc here as well? I see you added it to the concrete implementation already.", "author": "millems", "createdAt": "2020-04-02T18:06:03Z", "path": "services/s3/src/main/java/software/amazon/awssdk/services/s3/presigner/S3Presigner.java", "diffHunk": "@@ -512,6 +513,8 @@ default PresignedAbortMultipartUploadRequest presignAbortMultipartUpload(\n     @SdkPublicApi\n     @NotThreadSafe\n     interface Builder extends SdkPresigner.Builder {\n+        Builder serviceConfiguration(S3Configuration serviceConfiguration);\n+", "originalCommit": "087fe2739083169531a4992b5cc2f9453bb1a538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyODAyNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r402528025", "bodyText": "sure thing!", "author": "scheerer", "createdAt": "2020-04-02T18:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMjMyNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r402512325", "bodyText": "Comment not needed.", "author": "millems", "createdAt": "2020-04-02T18:07:26Z", "path": "services/s3/src/test/java/software/amazon/awssdk/services/s3/S3PresignerTest.java", "diffHunk": "@@ -325,4 +329,128 @@ public void putObject_Sigv4PresignerHonorsSignatureDuration() {\n             assertThat(Integer.parseInt(expires)).isCloseTo(1234, Offset.offset(2));\n         });\n     }\n+\n+    @Test\n+    public void getObject_S3ConfigurationCanBeOverriddenToLeverageTransferAcceleration() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                    .accelerateModeEnabled(true)\n+                    .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(\"foo34343434\")\n+                                .key(\"bar\")));\n+\n+\n+        System.out.println(presignedRequest.url());\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(\".s3-accelerate.\");\n+    }\n+\n+\n+    @Test\n+    public void accelerateEnabled_UsesVirtualAddressingWithAccelerateEndpoint() {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack uses regional endpoints that support virtual addressing.\n+     */\n+    @Test\n+    public void dualstackEnabled_UsesVirtualAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).contains(String.format(\"%s.s3.dualstack.us-west-2.amazonaws.com\", BUCKET));\n+    }\n+\n+    /**\n+     * Dualstack also supports path style endpoints just like the normal endpoints.\n+     */\n+    @Test\n+    public void dualstackAndPathStyleEnabled_UsesPathStyleAddressingWithDualstackEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .pathStyleAccessEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(\"s3.dualstack.us-west-2.amazonaws.com\");\n+        assertThat(presignedRequest.url().toString()).startsWith(String.format(\"https://s3.dualstack.us-west-2.amazonaws.com/%s/%s?\", BUCKET, \"bar\"));\n+    }\n+\n+    /**\n+     * When dualstack and accelerate are both enabled there is a special, global dualstack endpoint we must use.\n+     */\n+    @Test\n+    public void dualstackAndAccelerateEnabled_UsesDualstackAccelerateEndpoint() throws Exception {\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .dualstackEnabled(true)\n+                .accelerateModeEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(BUCKET)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.httpRequest().host()).isEqualTo(String.format(\"%s.s3-accelerate.dualstack.amazonaws.com\", BUCKET));\n+    }\n+\n+    @Test\n+    public void accessPointArn_differentRegion_useArnRegionTrue() throws Exception {\n+        String customEndpoint = \"https://foobar-12345678910.s3-accesspoint.us-west-2.amazonaws.com\";\n+        String accessPointArn = \"arn:aws:s3:us-west-2:12345678910:accesspoint:foobar\";\n+\n+        S3Presigner presigner = presignerBuilder().serviceConfiguration(S3Configuration.builder()\n+                .useArnRegionEnabled(true)\n+                .build())\n+                .build();\n+\n+        PresignedGetObjectRequest presignedRequest =\n+                presigner.presignGetObject(r -> r.signatureDuration(Duration.ofMinutes(5))\n+                        .getObjectRequest(go -> go.bucket(accessPointArn)\n+                                .key(\"bar\")));\n+\n+        assertThat(presignedRequest.url().toString()).startsWith(customEndpoint);\n+    }\n+\n+    @Test //(expected = IllegalArgumentException.class)", "originalCommit": "087fe2739083169531a4992b5cc2f9453bb1a538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNzk2Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1733#discussion_r402527967", "bodyText": "oops \ud83d\udc4d", "author": "scheerer", "createdAt": "2020-04-02T18:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMjMyNQ=="}], "type": "inlineReview"}, {"oid": "edcbb4f5a550a1cf3c4a865602273094f7097cdc", "url": "https://github.com/aws/aws-sdk-java-v2/commit/edcbb4f5a550a1cf3c4a865602273094f7097cdc", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration", "committedDate": "2020-04-02T18:38:32Z", "type": "forcePushed"}, {"oid": "c51e58f1618e75c032e17a85d49a6051796df41e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c51e58f1618e75c032e17a85d49a6051796df41e", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration", "committedDate": "2020-04-02T18:41:48Z", "type": "commit"}, {"oid": "c51e58f1618e75c032e17a85d49a6051796df41e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c51e58f1618e75c032e17a85d49a6051796df41e", "message": "Allow DefaultS3Presigner.Builder to take a custom S3Configuration", "committedDate": "2020-04-02T18:41:48Z", "type": "forcePushed"}, {"oid": "6ad2d32114290bb0d696170b05234680336797d4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/6ad2d32114290bb0d696170b05234680336797d4", "message": "Merge branch 'master' into feature/AllowCustomS3ConfigurationForS3Presigner", "committedDate": "2020-04-02T18:43:32Z", "type": "commit"}]}