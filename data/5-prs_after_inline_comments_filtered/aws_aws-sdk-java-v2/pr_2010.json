{"pr_number": 2010, "pr_title": "Don't omit body hash during async signing", "pr_createdAt": "2020-08-28T21:54:38Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/2010", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMzIwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485113205", "bodyText": "What if they've overridden the signer at the client level?", "author": "millems", "createdAt": "2020-09-08T18:23:40Z", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-query-async-client-class.java", "diffHunk": "@@ -344,4 +350,16 @@ private AwsQueryProtocolFactory init() {\n         }\n         return publishers;\n     }\n+\n+    private <T extends QueryRequest> T applySignerOverride(T request, Signer signer) {\n+        if (request.overrideConfiguration().flatMap(c -> c.signer()).isPresent()) {\n+            return request;\n+        }\n+        Consumer<AwsRequestOverrideConfiguration.Builder> signerOverride = b -> b.signer(signer).build();\n+        AwsRequestOverrideConfiguration overrideConfiguration = request.overrideConfiguration()\n+                .map(c -> c.toBuilder().applyMutation(signerOverride).build())\n+                .orElse((AwsRequestOverrideConfiguration.builder().applyMutation(signerOverride).build()));\n+        return (T) request.toBuilder().overrideConfiguration(overrideConfiguration).build();", "originalCommit": "f4c88d313f30010394a90a53aad4c10b2dc13b8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MjEwMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485942100", "bodyText": "Hmm I I have to take a closer look at this, I just copied it from an existing method :P", "author": "dagnir", "createdAt": "2020-09-09T21:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU4ODI3OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486588278", "bodyText": "Actually took a look at this again, the overrides, either at the client level or request level always take precedence. The async signer is treated as the \"default\" in the case where no overrides are provided at either level.\nNM scratch that!", "author": "dagnir", "createdAt": "2020-09-10T19:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1MzY4MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486653680", "bodyText": "Fixed", "author": "dagnir", "createdAt": "2020-09-10T21:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMzIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTA0OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485115048", "bodyText": "Since this is an internal API, can we not do an overload with a branch in it? Maybe just change the existing callers to use the new method?", "author": "millems", "createdAt": "2020-09-08T18:27:12Z", "path": "core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java", "diffHunk": "@@ -61,6 +61,13 @@\n     protected SdkHttpFullRequest.Builder doSign(SdkHttpFullRequest request,\n                                                 Aws4SignerRequestParams requestParams,\n                                                 T signingParams) {\n+        return doSign(request, requestParams, signingParams, null);\n+    }\n+\n+    protected SdkHttpFullRequest.Builder doSign(SdkHttpFullRequest request,\n+                                                Aws4SignerRequestParams requestParams,\n+                                                T signingParams,\n+                                                String precomputedContentHash) {", "originalCommit": "f4c88d313f30010394a90a53aad4c10b2dc13b8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MjE0NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485942145", "bodyText": "+1", "author": "dagnir", "createdAt": "2020-09-09T21:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMDg3MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485920870", "bodyText": "This feels brittle. It feels like it'll be easy to update one branch of the code without updating the other.\nIs there a way to unify the code paths? Maybe via adapting sync signers to async signers?", "author": "millems", "createdAt": "2020-09-09T21:04:07Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/AsyncSigningStage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.http.pipeline.stages;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.async.AsyncRequestBody;\n+import software.amazon.awssdk.core.http.ExecutionContext;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+import software.amazon.awssdk.core.internal.http.HttpClientDependencies;\n+import software.amazon.awssdk.core.internal.http.InterruptMonitor;\n+import software.amazon.awssdk.core.internal.http.RequestExecutionContext;\n+import software.amazon.awssdk.core.internal.http.pipeline.RequestPipeline;\n+import software.amazon.awssdk.core.internal.util.MetricUtils;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.core.signer.AsyncRequestBodySigner;\n+import software.amazon.awssdk.core.signer.AsyncSigner;\n+import software.amazon.awssdk.core.signer.Signer;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.utils.Pair;\n+\n+@SdkInternalApi\n+public class AsyncSigningStage implements RequestPipeline<SdkHttpFullRequest,\n+        CompletableFuture<SdkHttpFullRequest>> {\n+\n+    private final HttpClientDependencies dependencies;\n+\n+    public AsyncSigningStage(HttpClientDependencies dependencies) {\n+        this.dependencies = dependencies;\n+    }\n+\n+    /**\n+     * Returns the response from executing one httpClientSettings request; or null for retry.\n+     */\n+    public CompletableFuture<SdkHttpFullRequest> execute(SdkHttpFullRequest request, RequestExecutionContext context)\n+            throws Exception {\n+        InterruptMonitor.checkInterrupted();\n+        return signRequest(request, context);\n+    }\n+\n+    /**\n+     * Sign the request if the signer if provided and credentials are present.\n+     */\n+    private CompletableFuture<SdkHttpFullRequest> signRequest(SdkHttpFullRequest request,\n+                                                              RequestExecutionContext context) {\n+        updateInterceptorContext(request, context.executionContext());\n+\n+        Signer signer = context.signer();\n+        MetricCollector metricCollector = context.attemptMetricCollector();\n+\n+        if (!shouldSign(signer)) {\n+            return CompletableFuture.completedFuture(request);\n+        }\n+\n+        adjustForClockSkew(context.executionAttributes());\n+\n+        if (signer instanceof AsyncSigner) {\n+            AsyncSigner nonStreamingAsyncSigner = (AsyncSigner) signer;\n+\n+            long signingStart = System.nanoTime();\n+            return nonStreamingAsyncSigner.sign(request, context.requestProvider(),\n+                    context.executionAttributes()).whenComplete((r, t) ->\n+                        metricCollector.reportMetric(CoreMetric.SIGNING_DURATION,\n+                                Duration.ofNanos(System.nanoTime() - signingStart)));\n+        }", "originalCommit": "7cd93933d791bd7498d99ed771ba95fccd3b219b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MTg1MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485941850", "bodyText": "+1 that's a good idea", "author": "dagnir", "createdAt": "2020-09-09T21:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMDg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMTczOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485921739", "bodyText": "Why not CompletableFutureUtils.forwardExceptionTo here and below?", "author": "millems", "createdAt": "2020-09-09T21:05:46Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/MakeAsyncHttpRequestStage.java", "diffHunk": "@@ -74,16 +74,61 @@ public MakeAsyncHttpRequestStage(TransformingAsyncResponseHandler<Response<Outpu\n                                      HttpClientDependencies dependencies) {\n         this.responseHandler = responseHandler;\n         this.futureCompletionExecutor =\n-            dependencies.clientConfiguration().option(SdkAdvancedAsyncClientOption.FUTURE_COMPLETION_EXECUTOR);\n+                dependencies.clientConfiguration().option(SdkAdvancedAsyncClientOption.FUTURE_COMPLETION_EXECUTOR);\n         this.sdkAsyncHttpClient = dependencies.clientConfiguration().option(SdkClientOption.ASYNC_HTTP_CLIENT);\n         this.apiCallAttemptTimeout = dependencies.clientConfiguration().option(SdkClientOption.API_CALL_ATTEMPT_TIMEOUT);\n         this.timeoutExecutor = dependencies.clientConfiguration().option(SdkClientOption.SCHEDULED_EXECUTOR_SERVICE);\n     }\n \n     @Override\n-    public CompletableFuture<Response<OutputT>> execute(SdkHttpFullRequest request,\n-                                                        RequestExecutionContext context) throws Exception {\n-        return executeHttpRequest(request, context);\n+    public CompletableFuture<Response<OutputT>> execute(CompletableFuture<SdkHttpFullRequest> requestFuture,\n+                                                        RequestExecutionContext context) {\n+        CompletableFuture<Response<OutputT>> toReturn = new CompletableFuture<>();\n+\n+        // Setup the cancellations. If the caller fails to provide a request, forward the exception to the future we\n+        // return\n+        requestFuture.whenComplete((r, t) -> {\n+            if (t != null) {\n+                toReturn.completeExceptionally(t);\n+            }\n+        });", "originalCommit": "7cd93933d791bd7498d99ed771ba95fccd3b219b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MjgxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r485942815", "bodyText": "Let me try it out. I was having a hard time to trying to reconcile the cancellation here and also ensuring that exceptions from the interceptor callbacks (e.g. afterTransmission) were propagated correctly back to the caller future and this is what I landed on.", "author": "dagnir", "createdAt": "2020-09-09T21:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMTczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5Nzg0Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486697846", "bodyText": "Formatting.", "author": "millems", "createdAt": "2020-09-11T00:02:25Z", "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/client/AsyncClientClass.java", "diffHunk": "@@ -400,4 +411,47 @@ private MethodSpec resolveMetricPublishersMethod() {\n \n         return methodBuilder.build();\n     }\n+\n+    private boolean shouldUseAsyncWithBodySigner(OperationModel opModel) {\n+        if (opModel.getInputShape().getRequestSignerClassFqcn() != null) {\n+            return false;\n+        }\n+\n+        AuthType authTypeForOperation = opModel.getAuthType();\n+\n+        if (authTypeForOperation == AuthType.IAM) {\n+            authTypeForOperation = model.getMetadata().getAuthType();\n+        }\n+\n+        return authTypeForOperation == AuthType.V4 && opModel.hasStreamingInput();\n+    }\n+\n+    private CodeBlock applyAsyncWithBodyV4SignerOverride(OperationModel opModel) {\n+        return CodeBlock.builder()\n+                .beginControlFlow(\"if (!isSignerOverridden($N))\", \"clientConfiguration\")\n+                .addStatement(\"$1L = applySignerOverride($1L, $2T.create())\",\n+                opModel.getInput().getVariableName(), AsyncAws4Signer.class)", "originalCommit": "7d1568d91bcc9347edb44d581b3af7bf10829349", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5ODUzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486698534", "bodyText": "This duplicates data that was already pulled out elsewhere. To prevent duplication, can we just pull out what we need here (similar to ENDPOINT_OVERRIDDEN.... SIGNER_OVERRIDDEN?)", "author": "millems", "createdAt": "2020-09-11T00:05:07Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/client/builder/SdkDefaultClientBuilder.java", "diffHunk": "@@ -372,6 +373,7 @@ public final B overrideConfiguration(ClientOverrideConfiguration overrideConfig)\n         overrideConfig.advancedOption(ENDPOINT_OVERRIDDEN_OVERRIDE).ifPresent(value -> {\n             clientConfiguration.option(ENDPOINT_OVERRIDDEN, value);\n         });\n+        clientConfiguration.option(CLIENT_OVERRIDE_CONFIGURATION, overrideConfig);", "originalCommit": "7d1568d91bcc9347edb44d581b3af7bf10829349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwMTEzOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2010#discussion_r486701138", "bodyText": "Sure; I added this change before I merged from master where ENDPOINT_OVERRIDDEN_OVERRIDE was! I'll copy the same pattern", "author": "dagnir", "createdAt": "2020-09-11T00:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5ODUzNA=="}], "type": "inlineReview"}, {"oid": "300c98d392c52a049c61a5cb9c35264cde0bea35", "url": "https://github.com/aws/aws-sdk-java-v2/commit/300c98d392c52a049c61a5cb9c35264cde0bea35", "message": "Set flat when signer is overridden", "committedDate": "2020-09-11T00:47:40Z", "type": "forcePushed"}, {"oid": "a0859c40d88faed6ddafeef23b9da5583ede0a2e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/a0859c40d88faed6ddafeef23b9da5583ede0a2e", "message": "Set flag when signer is overridden", "committedDate": "2020-09-11T00:48:24Z", "type": "forcePushed"}, {"oid": "429a8a8141096a0f8409b360c649409f6023320a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/429a8a8141096a0f8409b360c649409f6023320a", "message": "Don't omit body hash during async signing\n\nThis fixes a bug where the SHA-256 of the request body is not included in the\nSigV4 calculation for async, streaming (note: not event streaming) requests.", "committedDate": "2020-09-11T19:56:28Z", "type": "commit"}, {"oid": "429a8a8141096a0f8409b360c649409f6023320a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/429a8a8141096a0f8409b360c649409f6023320a", "message": "Don't omit body hash during async signing\n\nThis fixes a bug where the SHA-256 of the request body is not included in the\nSigV4 calculation for async, streaming (note: not event streaming) requests.", "committedDate": "2020-09-11T19:56:28Z", "type": "forcePushed"}]}