{"pr_number": 1906, "pr_title": "Metric utils test", "pr_createdAt": "2020-06-17T22:39:10Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1906", "timeline": [{"oid": "1ce3eec2d1790091856bdb9c4196077692497b92", "url": "https://github.com/aws/aws-sdk-java-v2/commit/1ce3eec2d1790091856bdb9c4196077692497b92", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882", "committedDate": "2020-06-17T22:56:38Z", "type": "forcePushed"}, {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "url": "https://github.com/aws/aws-sdk-java-v2/commit/b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882", "committedDate": "2020-06-18T15:19:38Z", "type": "commit"}, {"oid": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "url": "https://github.com/aws/aws-sdk-java-v2/commit/b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "message": "Add tests for MetricUtils\n\nFollow-up on review comment on #1882", "committedDate": "2020-06-18T15:19:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNjc4OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906#discussion_r442336788", "bodyText": "Why do we report the same metric with two different values?", "author": "cenedhryn", "createdAt": "2020-06-18T16:02:40Z", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/internal/util/MetricUtilsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.util;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Optional;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequestOverrideConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.core.client.config.SdkClientOption;\n+import software.amazon.awssdk.core.http.HttpResponseHandler;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.metrics.MetricCollector;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.utils.Pair;\n+\n+public class MetricUtilsTest {\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testMeasureDuration_returnsAccurateDurationInformation() {\n+        long testDurationNanos = Duration.ofMillis(1).toNanos();\n+\n+        Pair<Object, Duration> measuredExecute = MetricUtils.measureDuration(() -> {\n+            long start = System.nanoTime();\n+            // spin thread instead of Thread.sleep() for a bit more accuracy...\n+            while (System.nanoTime() - start < testDurationNanos) {\n+            }\n+            return \"foo\";\n+        });\n+\n+        assertThat(measuredExecute.right()).isGreaterThanOrEqualTo(Duration.ofNanos(testDurationNanos));\n+    }\n+\n+    @Test\n+    public void testMeasureDuration_returnsCallableReturnValue() {\n+        String result = \"foo\";\n+\n+        Pair<String, Duration> measuredExecute = MetricUtils.measureDuration(() -> result);\n+\n+        assertThat(measuredExecute.left()).isEqualTo(result);\n+    }\n+\n+    @Test\n+    public void testMeasureDurationUnsafe_doesNotWrapException() throws Exception {\n+        IOException ioe = new IOException(\"boom\");\n+\n+        thrown.expect(IOException.class);\n+        try {\n+            MetricUtils.measureDurationUnsafe(() -> {\n+                throw ioe;\n+            });\n+        } catch (IOException caught) {\n+            assertThat(caught).isSameAs(ioe);\n+            throw caught;\n+        }\n+    }\n+\n+    @Test\n+    public void testMeasureDuration_doesNotWrapException() {\n+        RuntimeException e = new RuntimeException(\"boom\");\n+\n+        thrown.expect(RuntimeException.class);\n+\n+        try {\n+            MetricUtils.measureDuration(() -> {\n+                throw e;\n+            });\n+        } catch (RuntimeException caught) {\n+            assertThat(caught).isSameAs(e);\n+            throw caught;\n+        }\n+    }\n+\n+    @Test\n+    public void testCollectHttpMetrics_collectsAllExpectedMetrics() {\n+        MetricCollector mockCollector = mock(MetricCollector.class);\n+\n+        int statusCode = 200;\n+        String requestId = \"request-id\";\n+        String amznRequestId = \"amzn-request-id\";\n+        String requestId2 = \"request-id-2\";\n+\n+        SdkHttpFullResponse response = SdkHttpFullResponse.builder()\n+                .statusCode(statusCode)\n+                .putHeader(\"x-amz-request-id\", requestId)\n+                .putHeader(HttpResponseHandler.X_AMZN_REQUEST_ID_HEADER, amznRequestId)\n+                .putHeader(HttpResponseHandler.X_AMZ_ID_2_HEADER, requestId2)\n+                .build();\n+\n+        MetricUtils.collectHttpMetrics(mockCollector, response);\n+\n+        verify(mockCollector).reportMetric(CoreMetric.HTTP_STATUS_CODE, statusCode);\n+        verify(mockCollector).reportMetric(CoreMetric.AWS_REQUEST_ID, requestId);\n+        verify(mockCollector).reportMetric(CoreMetric.AWS_REQUEST_ID, amznRequestId);", "originalCommit": "b9b7faabb0ecd823a5ce0f7cc99a6530d5f7a82c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjI2Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906#discussion_r442342267", "bodyText": "Depending on the service, the Header used for the request ID can be differ between these two values. This is just to ensure we're catching both cases, I don't think a service will use both.", "author": "dagnir", "createdAt": "2020-06-18T16:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNjc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjY2MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1906#discussion_r442342660", "bodyText": "ok!", "author": "cenedhryn", "createdAt": "2020-06-18T16:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNjc4OA=="}], "type": "inlineReview"}]}