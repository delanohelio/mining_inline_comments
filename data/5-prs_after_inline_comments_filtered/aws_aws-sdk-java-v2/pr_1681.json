{"pr_number": 1681, "pr_title": "Updated retry policy behavior.", "pr_createdAt": "2020-03-03T23:16:46Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1681", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMzU3Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r387933572", "bodyText": "add @ThreadSafe?\nCan we add some tests for this class to make sure it's actually thread safe?", "author": "zoewangg", "createdAt": "2020-03-04T21:05:02Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/capacity/TokenBucket.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.capacity;\n+\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.retry.conditions.TokenBucketRetryCondition.Capacity;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A lock-free implementation of a token bucket. Tokens can be acquired from the bucket as long as there is sufficient capacity\n+ * in the bucket.\n+ */\n+@SdkInternalApi\n+public class TokenBucket {", "originalCommit": "d6d3caa45d6e6e59529a90e6853a8bf235a00767", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjY0Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388466647", "bodyText": "This class is tested in TokenBucketRetryConditionTest.", "author": "millems", "createdAt": "2020-03-05T18:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMzU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDUwMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r387974502", "bodyText": "Hmm, what's the benefit of this over using locks? Not necessarily against this, but I'd prefer using locks if the perf gain is minimal because while(true) is scary...", "author": "zoewangg", "createdAt": "2020-03-04T22:31:59Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/capacity/TokenBucket.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.capacity;\n+\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.retry.conditions.TokenBucketRetryCondition.Capacity;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A lock-free implementation of a token bucket. Tokens can be acquired from the bucket as long as there is sufficient capacity\n+ * in the bucket.\n+ */\n+@SdkInternalApi\n+public class TokenBucket {\n+    private final int maxCapacity;\n+    private final AtomicInteger capacity;\n+\n+    /**\n+     * Create a bucket containing the specified number of tokens.\n+     */\n+    public TokenBucket(int maxCapacity) {\n+        this.maxCapacity = maxCapacity;\n+        this.capacity = new AtomicInteger(maxCapacity);\n+    }\n+\n+    /**\n+     * Try to acquire a certain number of tokens from this bucket. If there aren't sufficient tokens in this bucket,\n+     * {@link Optional#empty()} is returned.\n+     */\n+    public Optional<Capacity> tryAcquire(int amountToAcquire) {\n+        Validate.isTrue(amountToAcquire >= 0, \"Amount must not be negative.\");\n+\n+        if (amountToAcquire == 0) {\n+            return Optional.of(Capacity.builder()\n+                                       .capacityAcquired(0)\n+                                       .capacityRemaining(capacity.get())\n+                                       .build());\n+        }\n+\n+        while (true) {", "originalCommit": "d6d3caa45d6e6e59529a90e6853a8bf235a00767", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MTIzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388471234", "bodyText": "I didn't do performance tests, but optimistic concurrency is usually faster than lock-based concurrency, if the platform supports the atomic compare-and-set.\nIf the platform supports the atomic compare-and-set, then I'd guess this isn't much slower than non-concurrent case. If the platform doesn't support atomic compare-and-set, then it would likely be implemented using locks and would have the same performance as the lock-based implementation.\nThe do-while equivalent of this is:\n        int currentCapacity;\n        int newCapacity;\n        do {\n            currentCapacity = capacity.get();\n\n            if (currentCapacity == maxCapacity) {\n                return;\n            }\n\n            newCapacity = Math.min(currentCapacity + amountToRelease, maxCapacity);\n        } while (!capacity.compareAndSet(currentCapacity, newCapacity));\n... if it makes it less scary. I feel like the current writing is a little more straight-foward, though. We can walk through the code on chime if that would help make it less scary.\nThe current implementation will almost always iterate just once, because the value is unlikely to be changed between currentCapacity = capacity.get() and capacity.compareAndSet(currentCapacity, newCapacity).", "author": "millems", "createdAt": "2020-03-05T18:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxOTM3OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388519378", "bodyText": "It can take a bit more time to understand the code and also might be error-prone in the future development.\nI'd vote for the the do-while equivalent since it is more straightforward and readable, to me", "author": "zoewangg", "createdAt": "2020-03-05T19:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMzg5Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388523892", "bodyText": "I'll switch to the do-while. The V1 equivalent hasn't been touched since 2016, so I don't expect this to change very much, either.", "author": "millems", "createdAt": "2020-03-05T19:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NDUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4Mjk1NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r387982954", "bodyText": "Why did we remove those validations?", "author": "zoewangg", "createdAt": "2020-03-04T22:52:59Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/http/ExecutionContext.java", "diffHunk": "@@ -37,10 +36,10 @@\n     private final ExecutionAttributes executionAttributes;\n \n     private ExecutionContext(final Builder builder) {\n-        this.signer = Validate.paramNotNull(builder.signer, \"signer\");", "originalCommit": "d6d3caa45d6e6e59529a90e6853a8bf235a00767", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MjY1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388472658", "bodyText": "I added them originally, but in hindsight they just made testing more difficult.\nI ended up not needing them removed, because I changed the way I was testing this change, so I could add them back in again.", "author": "millems", "createdAt": "2020-03-05T18:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4Mjk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NDQ1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r387984455", "bodyText": "can we create constants for the numbers?", "author": "zoewangg", "createdAt": "2020-03-04T22:56:44Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/TokenBucketRetryCondition.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.retry.conditions;\n+\n+import java.util.Optional;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttribute;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.internal.capacity.TokenBucket;\n+import software.amazon.awssdk.core.internal.retry.SdkDefaultRetrySetting;\n+import software.amazon.awssdk.core.retry.RetryMode;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.core.retry.RetryPolicyContext;\n+import software.amazon.awssdk.utils.ToString;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A {@link RetryCondition} that limits the number of retries made by the SDK using a token bucket algorithm. \"Tokens\" are\n+ * acquired from the bucket whenever {@link #shouldRetry} returns true, and are released to the bucket whenever\n+ * {@link #requestSucceeded} or {@link #requestWillNotBeRetried} are invoked.\n+ *\n+ * <p>\n+ * If \"tokens\" cannot be acquired from the bucket, it means too many requests have failed and the request will not be allowed\n+ * to retry until we start to see initial non-retried requests succeed via {@link #requestSucceeded(RetryPolicyContext)}.\n+ *\n+ * <p>\n+ * This prevents the client from holding the calling thread to retry when it's likely that it will fail anyway.\n+ *\n+ * <p>\n+ * This is currently included in the default {@link RetryPolicy#aggregateRetryCondition()}, but can be disabled by setting the\n+ * {@link RetryPolicy.Builder#retryCapacityCondition} to null.\n+ */\n+@SdkPublicApi\n+public class TokenBucketRetryCondition implements RetryCondition {\n+    private static final ExecutionAttribute<Capacity> LAST_ACQUIRED_CAPACITY =\n+        new ExecutionAttribute<>(\"TokenBucketRetryCondition.LAST_ACQUIRED_CAPACITY\");\n+\n+    private static final ExecutionAttribute<Integer> RETRY_COUNT_OF_LAST_CAPACITY_ACQUISITION =\n+        new ExecutionAttribute<>(\"TokenBucketRetryCondition.RETRY_COUNT_OF_LAST_CAPACITY_ACQUISITION\");\n+\n+    private final TokenBucket capacity;\n+    private final TokenBucketExceptionCostCalculator exceptionCostCalculator;\n+\n+    private TokenBucketRetryCondition(Builder builder) {\n+        this.capacity = new TokenBucket(Validate.notNull(builder.tokenBucketSize, \"tokenBucketSize\"));\n+        this.exceptionCostCalculator = Validate.notNull(builder.exceptionCostCalculator, \"exceptionCostCalculator\");\n+    }\n+\n+    /**\n+     * Create a condition using the {@link RetryMode#defaultRetryMode()}. This is equivalent to\n+     * {@code forRetryMode(RetryMode.defaultRetryMode())}.\n+     *\n+     * <p>\n+     * For more detailed control, see {@link #builder()}.\n+     */\n+    public static TokenBucketRetryCondition create() {\n+        return forRetryMode(RetryMode.defaultRetryMode());\n+    }\n+\n+    /**\n+     * Create a condition using the configured {@link RetryMode}. The {@link RetryMode#LEGACY} does not subtract tokens from\n+     * the token bucket when throttling exceptions are encountered. The {@link RetryMode#STANDARD} treats throttling and non-\n+     * throttling exceptions as the same cost.\n+     *\n+     * <p>\n+     * For more detailed control, see {@link #builder()}.\n+     */\n+    public static TokenBucketRetryCondition forRetryMode(RetryMode retryMode) {\n+        return TokenBucketRetryCondition.builder()\n+                                        .tokenBucketSize(SdkDefaultRetrySetting.TOKEN_BUCKET_SIZE)\n+                                        .exceptionCostCalculator(getExceptionCostCalculator(retryMode))\n+                                        .build();\n+    }\n+\n+    private static TokenBucketExceptionCostCalculator getExceptionCostCalculator(RetryMode retryMode) {\n+        switch (retryMode) {\n+            case LEGACY: return TokenBucketExceptionCostCalculator.builder()\n+                                                                  .throttlingExceptionCost(0)", "originalCommit": "d6d3caa45d6e6e59529a90e6853a8bf235a00767", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MzkyMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388473920", "bodyText": "Would that improve readability? I would suspect that people reading this part of the code would want to know what these values are without having to go to a different part of the file to see them.\nI usually support creating a constant for something that isn't self-evident, but the name is right there (0 is the throttling exception cost for the legacy retry mode). I'm against constants when it just makes people jump around in the code to see the values they're actually looking for.", "author": "millems", "createdAt": "2020-03-05T18:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NDQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTAwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388539006", "bodyText": "No, it would not improve readability, but I think it would improve maintainability to have all default sdk retry configurations in one place, i.e., SdkDefaultRetrySetting where we keep TOKEN_BUCKET_SIZE. In addition, when customers ask our default settings, we can just point them to one place.", "author": "zoewangg", "createdAt": "2020-03-05T20:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NjY4Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r387986687", "bodyText": "Do we really need additional hooks? I feel there are some overlaps between them and interceptors. I'd be fine if this is internal, but this class is public api.\nMy concern is that having two places to inject afterAttempt hooks can be confusing.", "author": "zoewangg", "createdAt": "2020-03-04T23:02:44Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/RetryCondition.java", "diffHunk": "@@ -32,14 +30,31 @@\n      */\n     boolean shouldRetry(RetryPolicyContext context);\n \n+    /**\n+     * Called by the SDK to notify this condition that the provided request will not be retried, because some retry condition\n+     * determined that it shouldn't be retried.\n+     */\n+    default void requestWillNotBeRetried(RetryPolicyContext context) {", "originalCommit": "d6d3caa45d6e6e59529a90e6853a8bf235a00767", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MTY2Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388481667", "bodyText": "Why wouldn't this hook be needed? Implementing a stateful retry condition like a token bucket needs to know when the capacity it acquired can be released.\nThe only other alternatives, I don't like:\n\nDon't make retry throttling directly configurable.\nRemove requestWillNotBeRetried (the other one is still required), but we'd have to add validation that: (1) there's only one stateful retry condition, and (2) that stateful retry condition is always considered after every other retry condition. That feels more confusing, and we'd still need something like isStatefulRetryCondition (or more likely, a StatefulRetryCondition interface) to be able to identify which ones are stateful so that we could implement those preconditions.\nDo an instanceof ExecutionInterceptor on every registered retry condition that's added so that we can also register them as an execution interceptor (somehow, not sure how that would work). We'd then implement ExecutionInterceptor on the retry conditions that need the information.", "author": "millems", "createdAt": "2020-03-05T18:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NjY4Nw=="}], "type": "inlineReview"}, {"oid": "f68b47e8cbcffd15575df0beed171bc51f321773", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f68b47e8cbcffd15575df0beed171bc51f321773", "message": "Addressed comments.", "committedDate": "2020-03-05T19:52:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMTIxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388521215", "bodyText": "How about addServiceSpecificRetryPolicy?", "author": "zoewangg", "createdAt": "2020-03-05T19:43:05Z", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/retry/AwsRetryPolicy.java", "diffHunk": "@@ -31,12 +32,38 @@\n     private AwsRetryPolicy() {\n     }\n \n+    /**\n+     * Retrieve the {@link RetryCondition#defaultRetryCondition()} with AWS-specific conditions added.\n+     */\n     public static RetryCondition defaultRetryCondition() {\n-        return OrRetryCondition.create(RetryCondition.defaultRetryCondition(),\n-                                       RetryOnErrorCodeCondition.create(AwsErrorCode.RETRYABLE_ERROR_CODES));\n+        return OrRetryCondition.create(RetryCondition.defaultRetryCondition(), awsRetryCondition());\n     }\n \n+    /**\n+     * Retrieve the {@link RetryPolicy#defaultRetryPolicy()} with AWS-specific conditions added.\n+     */\n     public static RetryPolicy defaultRetryPolicy() {\n-        return RetryPolicy.defaultRetryPolicy().toBuilder().retryCondition(defaultRetryCondition()).build();\n+        return forRetryMode(RetryMode.defaultRetryMode());\n+    }\n+\n+    /**\n+     * Retrieve the {@link RetryPolicy#defaultRetryPolicy()} with AWS-specific conditions added. This uses the specified\n+     * {@link RetryMode} when constructing the {@link RetryPolicy}.\n+     */\n+    public static RetryPolicy forRetryMode(RetryMode retryMode) {\n+        return addRefinements(RetryPolicy.forRetryMode(retryMode));\n+    }\n+\n+    /**\n+     * Update the provided {@link RetryPolicy} to add AWS-specific conditions.\n+     */\n+    public static RetryPolicy addRefinements(RetryPolicy condition) {", "originalCommit": "130e4214c670291d913633862380fe06bb473a1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjQwOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388522409", "bodyText": "How about serviceSpecificRetryPolicyAllowed or shouldAddServiceSpecificRetryPolicy?\nShould we use Boolean so that we can differentiate the default with unset?", "author": "zoewangg", "createdAt": "2020-03-05T19:45:08Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/RetryPolicy.java", "diffHunk": "@@ -112,71 +208,142 @@ public boolean equals(Object o) {\n         if (!throttlingBackoffStrategy.equals(that.throttlingBackoffStrategy)) {\n             return false;\n         }\n-        return numRetries.equals(that.numRetries);\n+        return true;\n     }\n \n     @Override\n     public int hashCode() {\n-        int result = retryCondition.hashCode();\n+        int result = aggregateRetryCondition.hashCode();\n+        result = 31 * result + Boolean.hashCode(furtherRefinementsAllowed);\n         result = 31 * result + backoffStrategy.hashCode();\n         result = 31 * result + throttlingBackoffStrategy.hashCode();\n-        result = 31 * result + numRetries.hashCode();\n         return result;\n     }\n \n-    public static Builder builder() {\n-        return new BuilderImpl();\n-    }\n-\n-    public static RetryPolicy defaultRetryPolicy() {\n-        return RetryPolicy.builder()\n-                          .backoffStrategy(BackoffStrategy.defaultStrategy())\n-                          .throttlingBackoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n-                          .numRetries(SdkDefaultRetrySetting.DEFAULT_MAX_RETRIES)\n-                          .retryCondition(RetryCondition.defaultRetryCondition())\n-                          .build();\n-    }\n-\n-    public static RetryPolicy none() {\n-        return RetryPolicy.builder()\n-                          .numRetries(0)\n-                          .backoffStrategy(BackoffStrategy.none())\n-                          .throttlingBackoffStrategy(BackoffStrategy.none())\n-                          .retryCondition(RetryCondition.none())\n-                          .build();\n-    }\n-\n     public interface Builder extends CopyableBuilder<Builder, RetryPolicy> {\n-        Builder numRetries(Integer numRetries);\n-\n-        Integer numRetries();\n-\n+        /**\n+         * Configure whether further refinements of this retry policy are allowed after it is created. This may include service-\n+         * specific retry conditions that may not otherwise be covered by the {@link RetryCondition#defaultRetryCondition()}.\n+         *\n+         * <p>\n+         * By default, this is true.\n+         */\n+        Builder furtherRefinementsAllowed(boolean furtherRefinementsAllowed);", "originalCommit": "130e4214c670291d913633862380fe06bb473a1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzYyNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388593626", "bodyText": "serviceSpecificRetryPolicyAllowed sounds like it would override this with a service-specific retry policy, instead of add its conditions/backoff strategy/etc.\nWe don't currently use the flag for anything other than retry conditions, so maybe we could just limit it to that to make the naming easier. How about additionalRetryConditionsAllowed?", "author": "millems", "createdAt": "2020-03-05T22:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMDY3Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388630672", "bodyText": "additionalRetryConditionsAllowed +1", "author": "zoewangg", "createdAt": "2020-03-05T23:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMDMyNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388530327", "bodyText": "Don't we need to update the generated test files accordingly to make the codegen tests pass?  Or we don't have any tests for it?", "author": "zoewangg", "createdAt": "2020-03-05T19:59:15Z", "path": "codegen/src/main/java/software/amazon/awssdk/codegen/poet/builder/BaseClientBuilderClass.java", "diffHunk": "@@ -198,14 +197,20 @@ private MethodSpec finalizeServiceConfigurationMethod() {\n                    .endControlFlow();\n \n             builder.addCode(\"return config.toBuilder()\\n\" +\n-                                  \"       .option($1T.EXECUTION_INTERCEPTORS, interceptors)\\n\" +\n-                                  \"       .option($1T.ENDPOINT_DISCOVERY_ENABLED, endpointDiscoveryEnabled)\\n\" +\n-                                  \"       .build();\", SdkClientOption.class);\n+                            \".option($T.ENDPOINT_DISCOVERY_ENABLED, endpointDiscoveryEnabled)\\n\",\n+                            SdkClientOption.class);\n         } else {\n-            builder.addCode(\"return config.toBuilder()\\n\" +\n-                                  \"       .option($T.EXECUTION_INTERCEPTORS, interceptors)\\n\" +\n-                                  \"       .build();\", SdkClientOption.class);\n+            builder.addCode(\"return config.toBuilder()\\n\");\n+        }\n+\n+        builder.addCode(\".option($1T.EXECUTION_INTERCEPTORS, interceptors)\", SdkClientOption.class);", "originalCommit": "f68b47e8cbcffd15575df0beed171bc51f321773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjcyNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388626726", "bodyText": "We apparently don't test classes with custom retry policies, and this change didn't affect classes without custom retry policies.", "author": "millems", "createdAt": "2020-03-05T23:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMDMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTY3OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388631678", "bodyText": "Can we add tests for it then? :) or create a backlog item you think that's gonna take some time.", "author": "zoewangg", "createdAt": "2020-03-05T23:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMDMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MDE1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r389180158", "bodyText": "-1 to ever adding a backlog item for tests. Adding them now...", "author": "millems", "createdAt": "2020-03-06T22:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMDMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMzUwMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388533502", "bodyText": "What's isBeforeAttemptSent?", "author": "zoewangg", "createdAt": "2020-03-05T20:05:47Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/utils/RetryableStageHelper.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.http.pipeline.stages.utils;\n+\n+import static software.amazon.awssdk.core.internal.retry.SdkDefaultRetrySetting.SDK_RETRY_INFO_HEADER;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletionException;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.Response;\n+import software.amazon.awssdk.core.SdkStandardLogger;\n+import software.amazon.awssdk.core.client.config.SdkClientOption;\n+import software.amazon.awssdk.core.exception.NonRetryableException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.core.internal.InternalCoreExecutionAttribute;\n+import software.amazon.awssdk.core.internal.http.HttpClientDependencies;\n+import software.amazon.awssdk.core.internal.http.RequestExecutionContext;\n+import software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage;\n+import software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage;\n+import software.amazon.awssdk.core.internal.retry.ClockSkewAdjuster;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.core.retry.RetryPolicyContext;\n+import software.amazon.awssdk.core.retry.RetryUtils;\n+import software.amazon.awssdk.core.retry.conditions.TokenBucketRetryCondition;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+\n+/**\n+ * Contains the logic shared by {@link RetryableStage} and {@link AsyncRetryableStage} when querying and interacting with a\n+ * {@link RetryPolicy}.\n+ */\n+@SdkInternalApi\n+public class RetryableStageHelper {\n+    private final SdkHttpFullRequest request;\n+    private final RequestExecutionContext context;\n+    private final RetryPolicy retryPolicy;\n+    private final HttpClientDependencies dependencies;\n+\n+    private int attemptNumber = 0;\n+    private SdkHttpResponse lastResponse = null;\n+    private SdkException lastException = null;\n+    private Duration lastBackoffDelay = null;\n+\n+    public RetryableStageHelper(SdkHttpFullRequest request,\n+                                RequestExecutionContext context,\n+                                HttpClientDependencies dependencies) {\n+        this.request = request;\n+        this.context = context;\n+        this.retryPolicy = dependencies.clientConfiguration().option(SdkClientOption.RETRY_POLICY);\n+        this.dependencies = dependencies;\n+    }\n+\n+    /**\n+     * Invoke when starting a request attempt, before querying the retry policy.\n+     */\n+    public void startingAttempt() {\n+        ++attemptNumber;\n+        context.executionAttributes().putAttribute(InternalCoreExecutionAttribute.EXECUTION_ATTEMPT, attemptNumber);\n+    }\n+\n+    /**\n+     * Returns true if the retry policy allows this attempt. This will always return true if the current attempt is not a retry\n+     * (i.e. it's the first request in the execution).\n+     */\n+    public boolean retryPolicyAllowsRetry() {\n+        if (isInitialAttempt()) {\n+            return true;\n+        }\n+\n+        if (lastException instanceof NonRetryableException) {\n+            return false;\n+        }\n+\n+        RetryPolicyContext context = retryPolicyContext(true);\n+\n+        boolean willRetry = retryPolicy.aggregateRetryCondition().shouldRetry(context);\n+        if (!willRetry) {\n+            retryPolicy.aggregateRetryCondition().requestWillNotBeRetried(context);\n+        }\n+\n+        return willRetry;\n+    }\n+\n+    /**\n+     * Return the exception that should be thrown, because the retry policy did not allow the request to be retried.\n+     */\n+    public SdkException retryPolicyDisallowedRetryException() {\n+        return lastException;\n+    }\n+\n+    /**\n+     * Get the amount of time that the request should be delayed before being sent. This may be {@link Duration#ZERO}, such as\n+     * for the first request in the request series.\n+     */\n+    public Duration getBackoffDelay() {\n+        Duration result;\n+        if (isInitialAttempt()) {\n+            result = Duration.ZERO;\n+        } else {\n+            RetryPolicyContext context = retryPolicyContext(true);\n+            if (RetryUtils.isThrottlingException(lastException)) {\n+                result = retryPolicy.throttlingBackoffStrategy().computeDelayBeforeNextRetry(context);\n+            } else {\n+                result = retryPolicy.backoffStrategy().computeDelayBeforeNextRetry(context);\n+            }\n+        }\n+        lastBackoffDelay = result;\n+        return result;\n+    }\n+\n+    /**\n+     * Log a message to the user at the debug level to indicate how long we will wait before retrying the request.\n+     */\n+    public void logBackingOff(Duration backoffDelay) {\n+        SdkStandardLogger.REQUEST_LOGGER.debug(() -> \"Retryable error detected. Will retry in \" +\n+                                                     backoffDelay.toMillis() + \"ms. Request attempt number \" +\n+                                                     attemptNumber);\n+    }\n+\n+    /**\n+     * Retrieve the request to send to the service, including any detailed retry information headers.\n+     */\n+    public SdkHttpFullRequest requestToSend() {\n+        Integer availableRetryCapacity = TokenBucketRetryCondition.getCapacityForExecution(context.executionAttributes())\n+                                                                  .map(TokenBucketRetryCondition.Capacity::capacityRemaining)\n+                                                                  .orElse(null);\n+\n+        return request.toBuilder()\n+                      .putHeader(SDK_RETRY_INFO_HEADER,\n+                                 String.format(\"%s/%s/%s\",\n+                                               attemptNumber - 1,\n+                                               lastBackoffDelay.toMillis(),\n+                                               availableRetryCapacity != null ? availableRetryCapacity : \"\"))\n+                      .build();\n+    }\n+\n+    /**\n+     * Log a message to the user at the debug level to indicate that we are sending the request to the service.\n+     */\n+    public void logSendingRequest() {\n+        SdkStandardLogger.REQUEST_LOGGER.debug(() -> (isInitialAttempt() ? \"Sending\" : \"Retrying\") + \" Request: \" + request);\n+    }\n+\n+    /**\n+     * Adjust the client-side clock skew if the provided response indicates that there is a large skew between the client and\n+     * service. This will allow a retried request to be signed with what is likely to be a more accurate time.\n+     */\n+    public void adjustClockIfClockSkew(Response<?> response) {\n+        ClockSkewAdjuster clockSkewAdjuster = dependencies.clockSkewAdjuster();\n+        if (!response.isSuccess() && clockSkewAdjuster.shouldAdjust(response.exception())) {\n+            dependencies.updateTimeOffset(clockSkewAdjuster.getAdjustmentInSeconds(response.httpResponse()));\n+        }\n+    }\n+\n+    /**\n+     * Notify the retry policy that the request attempt succeeded.\n+     */\n+    public void attemptSucceeded() {\n+        retryPolicy.aggregateRetryCondition().requestSucceeded(retryPolicyContext(false));\n+    }\n+\n+    /**\n+     * Retrieve the current attempt number, updated whenever {@link #startingAttempt()} is invoked.\n+     */\n+    public int getAttemptNumber() {\n+        return attemptNumber;\n+    }\n+\n+    /**\n+     * Retrieve the last call failure exception encountered by this execution, updated whenever {@link #setLastException} is\n+     * invoked.\n+     */\n+    public SdkException getLastException() {\n+        return lastException;\n+    }\n+\n+    /**\n+     * Update the {@link #getLastException()} value for this helper. This will be used to determine whether the request should\n+     * be retried.\n+     */\n+    public void setLastException(Throwable lastException) {\n+        if (lastException instanceof CompletionException) {\n+            setLastException(lastException.getCause());\n+        } else if (lastException instanceof SdkException) {\n+            this.lastException = (SdkException) lastException;\n+        } else {\n+            this.lastException = SdkClientException.create(\"Unable to execute HTTP request: \" + lastException.getMessage(),\n+                                                           lastException);\n+        }\n+    }\n+\n+    /**\n+     * Set the last HTTP response returned by the service. This will be used to determine whether the request should be retried.\n+     */\n+    public void setLastResponse(SdkHttpResponse lastResponse) {\n+        this.lastResponse = lastResponse;\n+    }\n+\n+    private boolean isInitialAttempt() {\n+        return attemptNumber == 1;\n+    }\n+\n+    private RetryPolicyContext retryPolicyContext(boolean isBeforeAttemptSent) {\n+        return RetryPolicyContext.builder()\n+                                 .request(request)\n+                                 .originalRequest(context.originalRequest())\n+                                 .exception(lastException)\n+                                 .retriesAttempted(retriesAttemptedSoFar(isBeforeAttemptSent))\n+                                 .executionAttributes(context.executionAttributes())\n+                                 .httpStatusCode(lastResponse == null ? null : lastResponse.statusCode())\n+                                 .build();\n+    }\n+\n+    private int retriesAttemptedSoFar(boolean isBeforeAttemptSent) {", "originalCommit": "f68b47e8cbcffd15575df0beed171bc51f321773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyODA1NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388628054", "bodyText": "It specifies whether or not we've sent a request to the service for this overall attempt, yet.\nAssuming we're executing attempt 3, the number of retries attempted varies based on whether the request has been sent to the service yet. Before we send the request, the number of retries is 1 (from attempt 2). After we send the request, the number of retries is 2 (from attempt 2 and attempt 3).", "author": "millems", "createdAt": "2020-03-05T23:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMzUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzNDk4MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388634980", "bodyText": "Gotcha, can we add some javadocs (basically what you just typed above)?", "author": "zoewangg", "createdAt": "2020-03-06T00:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMzUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNTE2NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388535164", "bodyText": "How about TokenBucketExceptionCostProvider? I feel it doesn't really calculate anything..", "author": "zoewangg", "createdAt": "2020-03-05T20:09:12Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/TokenBucketExceptionCostCalculator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.retry.conditions;\n+\n+import java.util.function.Function;\n+import software.amazon.awssdk.annotations.NotThreadSafe;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.annotations.ThreadSafe;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.core.internal.retry.DefaultTokenBucketExceptionCostCalculator;\n+\n+/**\n+ * A function used by {@link TokenBucketRetryCondition} to determine how many tokens should be removed from the bucket when an\n+ * exception is encountered. This can be implemented directly, or using the helper methods provided by the {@link #builder()}.\n+ */\n+@SdkPublicApi\n+@FunctionalInterface\n+@ThreadSafe\n+public interface TokenBucketExceptionCostCalculator extends Function<SdkException, Integer> {", "originalCommit": "f68b47e8cbcffd15575df0beed171bc51f321773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyOTI4OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388629289", "bodyText": "Provider implies to me that it just returns something (indistinguished from a \"supplier\"). I wanted a word that indicates it's a function, determining a number from an exception. Since it was a number, I used the word calculate.\nMaybe just TokenBucketExceptionCostFunction?", "author": "millems", "createdAt": "2020-03-05T23:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNTE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTc0MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388631741", "bodyText": "TokenBucketExceptionCostFunction sounds good to me", "author": "zoewangg", "createdAt": "2020-03-05T23:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNTE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MjAxNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388542014", "bodyText": "Nice javadocs!", "author": "zoewangg", "createdAt": "2020-03-05T20:21:39Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/TokenBucketRetryCondition.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.retry.conditions;\n+\n+import java.util.Optional;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttribute;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.internal.capacity.TokenBucket;\n+import software.amazon.awssdk.core.internal.retry.SdkDefaultRetrySetting;\n+import software.amazon.awssdk.core.retry.RetryMode;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.core.retry.RetryPolicyContext;\n+import software.amazon.awssdk.utils.ToString;\n+import software.amazon.awssdk.utils.Validate;\n+\n+/**\n+ * A {@link RetryCondition} that limits the number of retries made by the SDK using a token bucket algorithm. \"Tokens\" are\n+ * acquired from the bucket whenever {@link #shouldRetry} returns true, and are released to the bucket whenever\n+ * {@link #requestSucceeded} or {@link #requestWillNotBeRetried} are invoked.\n+ *\n+ * <p>\n+ * If \"tokens\" cannot be acquired from the bucket, it means too many requests have failed and the request will not be allowed\n+ * to retry until we start to see initial non-retried requests succeed via {@link #requestSucceeded(RetryPolicyContext)}.\n+ *\n+ * <p>\n+ * This prevents the client from holding the calling thread to retry when it's likely that it will fail anyway.\n+ *\n+ * <p>\n+ * This is currently included in the default {@link RetryPolicy#aggregateRetryCondition()}, but can be disabled by setting the\n+ * {@link RetryPolicy.Builder#retryCapacityCondition} to null.", "originalCommit": "f68b47e8cbcffd15575df0beed171bc51f321773", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTY2Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388585663", "bodyText": "Is this class tested anywhere?", "author": "zoewangg", "createdAt": "2020-03-05T21:48:19Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/http/pipeline/stages/utils/RetryableStageHelper.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.http.pipeline.stages.utils;\n+\n+import static software.amazon.awssdk.core.internal.retry.SdkDefaultRetrySetting.SDK_RETRY_INFO_HEADER;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletionException;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.Response;\n+import software.amazon.awssdk.core.SdkStandardLogger;\n+import software.amazon.awssdk.core.client.config.SdkClientOption;\n+import software.amazon.awssdk.core.exception.NonRetryableException;\n+import software.amazon.awssdk.core.exception.SdkClientException;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.core.internal.InternalCoreExecutionAttribute;\n+import software.amazon.awssdk.core.internal.http.HttpClientDependencies;\n+import software.amazon.awssdk.core.internal.http.RequestExecutionContext;\n+import software.amazon.awssdk.core.internal.http.pipeline.stages.AsyncRetryableStage;\n+import software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage;\n+import software.amazon.awssdk.core.internal.retry.ClockSkewAdjuster;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.core.retry.RetryPolicyContext;\n+import software.amazon.awssdk.core.retry.RetryUtils;\n+import software.amazon.awssdk.core.retry.conditions.TokenBucketRetryCondition;\n+import software.amazon.awssdk.http.SdkHttpFullRequest;\n+import software.amazon.awssdk.http.SdkHttpResponse;\n+\n+/**\n+ * Contains the logic shared by {@link RetryableStage} and {@link AsyncRetryableStage} when querying and interacting with a\n+ * {@link RetryPolicy}.\n+ */\n+@SdkInternalApi\n+public class RetryableStageHelper {", "originalCommit": "f68b47e8cbcffd15575df0beed171bc51f321773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMDUwNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388630507", "bodyText": "It's not really useful to test in isolation, since it's so dependent on the stages. It'd ideally be tested via the RetryableStage and AsyncRetryableStage. I tried to test those (hence why I deleted those Validate.notNulls you asked about), but the tests ended up being way too brittle and would have been a maintenance nightmare. I ended up just writing some higher-level functional tests to make sure it all seemed to behave nicely.\nI figured it was at least better than what we had...", "author": "millems", "createdAt": "2020-03-05T23:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMzIyOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r388633229", "bodyText": "Seems we only have tests for sync client. Can we add tests for async client as well?", "author": "zoewangg", "createdAt": "2020-03-05T23:55:57Z", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/retry/ClientRetryModeTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.retry;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.anyRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.anyUrl;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import java.net.URI;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.core.exception.SdkException;\n+import software.amazon.awssdk.core.retry.RetryMode;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonClient;\n+import software.amazon.awssdk.services.protocolrestjson.ProtocolRestJsonClientBuilder;\n+\n+public class ClientRetryModeTest {", "originalCommit": "7617d615acb74776d421a8a5eb1e566ab21eb0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NDczOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r389074739", "bodyText": "Great point!", "author": "millems", "createdAt": "2020-03-06T18:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMzIyOQ=="}], "type": "inlineReview"}, {"oid": "c541587c6c11d5f64bdd3171680ee7ef7a3d6b52", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c541587c6c11d5f64bdd3171680ee7ef7a3d6b52", "message": "Addressed comments.", "committedDate": "2020-03-06T19:35:22Z", "type": "forcePushed"}, {"oid": "d1c2a59537f740e8a2161f981406842ff24f5d31", "url": "https://github.com/aws/aws-sdk-java-v2/commit/d1c2a59537f740e8a2161f981406842ff24f5d31", "message": "Addressed comments.", "committedDate": "2020-03-06T20:29:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NDc3OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r389154779", "bodyText": "Could this be a breaking change? Duplicate conditions provided would now get evaluated twice", "author": "zoewangg", "createdAt": "2020-03-06T21:32:57Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/retry/conditions/OrRetryCondition.java", "diffHunk": "@@ -28,12 +28,16 @@\n @SdkPublicApi\n public final class OrRetryCondition implements RetryCondition {\n \n-    private Set<RetryCondition> conditions = new HashSet<>();\n+    private final List<RetryCondition> conditions = new ArrayList<>();", "originalCommit": "d1c2a59537f740e8a2161f981406842ff24f5d31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MDQ3Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r389170473", "bodyText": "Good catch! I'll switch to a linked hash set, so that we can preserve order and uniqueness.", "author": "millems", "createdAt": "2020-03-06T22:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NDc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NTUwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1681#discussion_r389175506", "bodyText": "I also went ahead and added a test to preserve ordering.", "author": "millems", "createdAt": "2020-03-06T22:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NDc3OQ=="}], "type": "inlineReview"}, {"oid": "2a1862c2c73c81a2c40a7fe48e244dbef5f1d833", "url": "https://github.com/aws/aws-sdk-java-v2/commit/2a1862c2c73c81a2c40a7fe48e244dbef5f1d833", "message": "Updated retry policy behavior.\n\n1. Added support for \"retry modes\". A retry mode allows configuring multiple SDK parameters at once using default retry profiles, some of which are standardized between AWS SDK languages. See RetryMode javadoc for more information.\n2. Added the ability to configure or disable the default retry throttling behavior of the SDK that 'kicks in' during a large volume of retriable service call errors. This behavior can now be configured via `RetryPolicy.retryCapacityCondition`.\n3. Fixed an issue where the retry condition returned by `RetryPolicy.retryCondition` differed from the one specified by `RetryPolicy.Builder.retryCondition`. The old value can be accessed via the new `RetryPolicy.aggregateRetryCondition`.\n4. Fixed an issue where specifying your own retry policy would override AWS and service-specific retry conditions. By default, all retry policies now have AWS and service-specific retry conditions added. This can be disabled via the new `RetryPolicy.furtherRefinementsAllowed(false)`.", "committedDate": "2020-03-06T22:31:35Z", "type": "forcePushed"}, {"oid": "b4dbc44b3b529b512ccae0eebaa02bd2f3bccb32", "url": "https://github.com/aws/aws-sdk-java-v2/commit/b4dbc44b3b529b512ccae0eebaa02bd2f3bccb32", "message": "Updated retry policy behavior.\n\n1. Added support for \"retry modes\". A retry mode allows configuring multiple SDK parameters at once using default retry profiles, some of which are standardized between AWS SDK languages. See RetryMode javadoc for more information.\n2. Added the ability to configure or disable the default retry throttling behavior of the SDK that 'kicks in' during a large volume of retriable service call errors. This behavior can now be configured via `RetryPolicy.retryCapacityCondition`.\n3. Fixed an issue where the retry condition returned by `RetryPolicy.retryCondition` differed from the one specified by `RetryPolicy.Builder.retryCondition`. The old value can be accessed via the new `RetryPolicy.aggregateRetryCondition`.\n4. Fixed an issue where specifying your own retry policy would override AWS and service-specific retry conditions. By default, all retry policies now have AWS and service-specific retry conditions added. This can be disabled via the new `RetryPolicy.furtherRefinementsAllowed(false)`.", "committedDate": "2020-03-06T22:47:46Z", "type": "forcePushed"}, {"oid": "329cd60c20de778b318cf2f9c50c0cda25c64d52", "url": "https://github.com/aws/aws-sdk-java-v2/commit/329cd60c20de778b318cf2f9c50c0cda25c64d52", "message": "Updated retry policy behavior.\n\n1. Added support for \"retry modes\". A retry mode allows configuring multiple SDK parameters at once using default retry profiles, some of which are standardized between AWS SDK languages. See RetryMode javadoc for more information.\n2. Added the ability to configure or disable the default retry throttling behavior of the SDK that 'kicks in' during a large volume of retriable service call errors. This behavior can now be configured via `RetryPolicy.retryCapacityCondition`.\n3. Fixed an issue where the retry condition returned by `RetryPolicy.retryCondition` differed from the one specified by `RetryPolicy.Builder.retryCondition`. The old value can be accessed via the new `RetryPolicy.aggregateRetryCondition`.\n4. Fixed an issue where specifying your own retry policy would override AWS and service-specific retry conditions. By default, all retry policies now have AWS and service-specific retry conditions added. This can be disabled via the new `RetryPolicy.furtherRefinementsAllowed(false)`.", "committedDate": "2020-03-06T23:45:55Z", "type": "commit"}, {"oid": "329cd60c20de778b318cf2f9c50c0cda25c64d52", "url": "https://github.com/aws/aws-sdk-java-v2/commit/329cd60c20de778b318cf2f9c50c0cda25c64d52", "message": "Updated retry policy behavior.\n\n1. Added support for \"retry modes\". A retry mode allows configuring multiple SDK parameters at once using default retry profiles, some of which are standardized between AWS SDK languages. See RetryMode javadoc for more information.\n2. Added the ability to configure or disable the default retry throttling behavior of the SDK that 'kicks in' during a large volume of retriable service call errors. This behavior can now be configured via `RetryPolicy.retryCapacityCondition`.\n3. Fixed an issue where the retry condition returned by `RetryPolicy.retryCondition` differed from the one specified by `RetryPolicy.Builder.retryCondition`. The old value can be accessed via the new `RetryPolicy.aggregateRetryCondition`.\n4. Fixed an issue where specifying your own retry policy would override AWS and service-specific retry conditions. By default, all retry policies now have AWS and service-specific retry conditions added. This can be disabled via the new `RetryPolicy.furtherRefinementsAllowed(false)`.", "committedDate": "2020-03-06T23:45:55Z", "type": "forcePushed"}, {"oid": "531d69de0ada60ba60895d7c04dd73d3c76eeaed", "url": "https://github.com/aws/aws-sdk-java-v2/commit/531d69de0ada60ba60895d7c04dd73d3c76eeaed", "message": "Merge branch 'master' into millem/retry-improvements", "committedDate": "2020-03-06T23:51:29Z", "type": "commit"}]}