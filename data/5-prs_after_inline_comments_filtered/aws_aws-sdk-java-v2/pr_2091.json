{"pr_number": 2091, "pr_title": "Include event type in visitor name", "pr_createdAt": "2020-10-14T20:58:31Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/2091", "timeline": [{"oid": "baf2d80e7485377f48caca232b4203194474c909", "url": "https://github.com/aws/aws-sdk-java-v2/commit/baf2d80e7485377f48caca232b4203194474c909", "message": "Include event type in visitor name\n\nThis commit fixes event visitor method generation by including the *event type*\nin the visitor name. Note that event type here is actually the member name in\nthe encompassing eventstream structure, *not* the Java class of the event.\n\nFor example, in the example below, \"Foo\" is the event type.\n\n\"MyEventStream\": {\n   \"type\": \"structure\",\n   \"eventstream\": true,\n   \"members\": {\n       \"Foo\": {\n           \"shape\": \"Bar\"\n       }\n   }\n}\n\nTo ensure that this change is backwards compatible with existing services that\nhave event streams (Transcribe Streaming and Kinesis), we also include a\ncustomization to supress this behavior keep the method name as \"visit\".\n\nNote that by sheer luck, the existing consumer method setters, e.g.\n\nBuilder onSubscribeToShardEvent(Consumer<SubscribeToShardEvent>);\n\nare unaffected by this change. The previous generation scheme for these methods\nis \"on{Generation Java class name for event shape}\"; now it's \"on{event type}\".\nHowever, both Transcribe and Kinesis use the shape name as the member name (or\nvise versa?) in their current iteration of their event streams.\n\nFor example, in Kinesis, SubscribeToShard's output stream is defined as\n\n\"SubscribeToShardEventStream\":{\n  \"type\":\"structure\",\n  \"required\":[\"SubscribeToShardEvent\"],\n  \"members\":{\n    \"SubscribeToShardEvent\":{\"shape\":\"SubscribeToShardEvent\"},\n\n    ...\n    },\n  \"eventstream\":true\n}", "committedDate": "2020-10-14T19:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA2NTIyOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2091#discussion_r505065229", "bodyText": "Should we add visitEventTwo and visitEventOne and deprecate visit?", "author": "zoewangg", "createdAt": "2020-10-14T23:28:29Z", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/eventstream/test-visitor-builder.java", "diffHunk": "@@ -67,5 +91,16 @@ public void visit(EventOne event) {\n         public void visit(EventTwo event) {\n             onEventTwo.accept(event);\n         }", "originalCommit": "baf2d80e7485377f48caca232b4203194474c909", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA3OTUwNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2091#discussion_r505079505", "bodyText": "I considered this, but I think I don't think that would actually work when you do the dispatch; for example,\neventStream.visit(visitor);\n\nwhere eventStream is actually an instance of EventOne, we don't know if visit(EventOne) is implemented, or visitEventOne(EventOne) is implemented, or both!", "author": "dagnir", "createdAt": "2020-10-14T23:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA2NTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjQ3Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/2091#discussion_r505892476", "bodyText": "Gotcha", "author": "zoewangg", "createdAt": "2020-10-15T22:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA2NTIyOQ=="}], "type": "inlineReview"}]}