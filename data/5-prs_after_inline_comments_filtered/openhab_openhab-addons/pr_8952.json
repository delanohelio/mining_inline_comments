{"pr_number": 8952, "pr_title": "[Vigicrues] OH3 enhancements", "pr_createdAt": "2020-11-03T15:40:14Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8952", "timeline": [{"oid": "cfa65cbc4d78b31a831625487b8437ff3b25fae3", "url": "https://github.com/openhab/openhab-addons/commit/cfa65cbc4d78b31a831625487b8437ff3b25fae3", "message": "Staging work\nSaving my work\nVigicrues extensions for OH3\nFirst code review\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-03T15:44:50Z", "type": "commit"}, {"oid": "cfa65cbc4d78b31a831625487b8437ff3b25fae3", "url": "https://github.com/openhab/openhab-addons/commit/cfa65cbc4d78b31a831625487b8437ff3b25fae3", "message": "Staging work\nSaving my work\nVigicrues extensions for OH3\nFirst code review\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-03T15:44:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwNzc1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517007754", "bodyText": "You don't even check if the handler being removed is even related to the service you are unregistering?\nTypically you keep track of a map of handler instances to registered services.", "author": "cpmeister", "createdAt": "2020-11-03T23:06:43Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesHandlerFactory.java", "diffHunk": "@@ -64,10 +72,13 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n     protected @Nullable ThingHandler createHandler(Thing thing) {\n         ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n \n-        if (thingTypeUID.equals(THING_TYPE_VIGI_CRUES)) {\n-            return new VigiCruesHandler(thing, timeZoneProvider, gson);\n-        }\n+        return supportsThingType(thingTypeUID) ? new VigiCruesHandler(thing, locationProvider, apiHandler) : null;\n+    }\n \n-        return null;\n+    @Override\n+    protected void removeHandler(ThingHandler thingHandler) {\n+        if (serviceReg != null) {\n+            serviceReg.unregister();\n+        }\n     }", "originalCommit": "cfa65cbc4d78b31a831625487b8437ff3b25fae3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODEwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517008105", "bodyText": "Why isn't the VigiCruesDiscoveryService a @Component?", "author": "cpmeister", "createdAt": "2020-11-03T23:07:41Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesHandlerFactory.java", "diffHunk": "@@ -42,17 +44,23 @@\n @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.vigicrues\")\n @NonNullByDefault\n public class VigiCruesHandlerFactory extends BaseThingHandlerFactory {\n-    private final Gson gson;\n-    // Needed for converting UTC time to local time\n-    private final TimeZoneProvider timeZoneProvider;\n+    private final LocationProvider locationProvider;\n+    private final ApiHandler apiHandler;\n+    private @Nullable ServiceRegistration<?> serviceReg;\n \n     @Activate\n-    public VigiCruesHandlerFactory(@Reference TimeZoneProvider timeZoneProvider) {\n-        this.timeZoneProvider = timeZoneProvider;\n-        this.gson = new GsonBuilder()\n-                .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n-                        jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n-                .create();\n+    public VigiCruesHandlerFactory(@Reference TimeZoneProvider timeZoneProvider,\n+            @Reference LocationProvider locationProvider) {\n+        this.locationProvider = locationProvider;\n+        this.apiHandler = new ApiHandler(timeZoneProvider);\n+    }\n+\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        VigiCruesDiscoveryService discoveryService = new VigiCruesDiscoveryService(apiHandler, locationProvider);\n+        serviceReg = bundleContext.registerService(DiscoveryService.class.getName(), discoveryService,\n+                new Hashtable<>());", "originalCommit": "cfa65cbc4d78b31a831625487b8437ff3b25fae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1Mzc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517253795", "bodyText": "Because it needs the ApiHandler", "author": "clinique", "createdAt": "2020-11-04T10:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MzMyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517583323", "bodyText": "Why not make the ApiHandler a @Component as well then?", "author": "cpmeister", "createdAt": "2020-11-04T19:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MDgwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517970802", "bodyText": "Did it.", "author": "clinique", "createdAt": "2020-11-05T11:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwODEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMzM3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517013374", "bodyText": "I don't see much of a purpose of this class. It would be much simpler to replace this class with a series of methods in API handler instead, one for each type of api request.", "author": "cpmeister", "createdAt": "2020-11-03T23:23:37Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/api/ApiRequest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.api;\n+\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.vigicrues.internal.dto.hubeau.HubEauResponse;\n+import org.openhab.binding.vigicrues.internal.dto.opendatasoft.OpenDatasoftResponse;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.CdStationHydro;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.InfoVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TerEntVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TronEntVigiCru;\n+import org.openhab.core.library.types.PointType;\n+\n+/**\n+ * The {@link APIRequests} defines all the action classes that can be used\n+ * when interaction with Vigicrues API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ApiRequest {", "originalCommit": "cfa65cbc4d78b31a831625487b8437ff3b25fae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2NTQxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517265410", "bodyText": "Removed", "author": "clinique", "createdAt": "2020-11-04T11:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMzM3NA=="}], "type": "inlineReview"}, {"oid": "685bf8f3e20a730fbaec799b0a7efd673368b306", "url": "https://github.com/openhab/openhab-addons/commit/685bf8f3e20a730fbaec799b0a7efd673368b306", "message": "Code review and some corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-04T11:25:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MTY4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517581683", "bodyText": "You can simplify your api calls a bit by handling the json parsing in this method as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String execute(String url) throws VigiCruesException {\n          \n          \n            \n                    String jsonResponse = \"\";\n          \n          \n            \n                    try {\n          \n          \n            \n                        jsonResponse = HttpUtil.executeUrl(\"GET\", url, TIMEOUT_MS);\n          \n          \n            \n                        return jsonResponse;\n          \n          \n            \n                    } catch (IOException e) {\n          \n          \n            \n                        throw new VigiCruesException(e);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private <T> T execute(String url, Class<T> responseType) throws VigiCruesException {\n          \n          \n            \n                   try {\n          \n          \n            \n                        String jsonResponse = HttpUtil.executeUrl(\"GET\", url, TIMEOUT_MS);\n          \n          \n            \n                        return gson.fromJson(response, responseType);\n          \n          \n            \n                    } catch (IOException e) {\n          \n          \n            \n                        throw new VigiCruesException(e);\n          \n          \n            \n                    } catch (JsonSyntaxException e) {\n          \n          \n            \n                        throw new VigiCruesException(e);\n          \n          \n            \n                    }\n          \n          \n            \n                }", "author": "cpmeister", "createdAt": "2020-11-04T19:30:01Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/api/ApiHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.api;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.vigicrues.internal.dto.hubeau.HubEauResponse;\n+import org.openhab.binding.vigicrues.internal.dto.opendatasoft.OpenDatasoftResponse;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.CdStationHydro;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.InfoVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TerEntVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TronEntVigiCru;\n+import org.openhab.core.i18n.TimeZoneProvider;\n+import org.openhab.core.io.net.http.HttpUtil;\n+import org.openhab.core.library.types.PointType;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link ApiHandler} is the responsible to call a given\n+ * url and transform the answer in the appropriate dto class\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ApiHandler {\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Gson gson;\n+\n+    public ApiHandler(TimeZoneProvider timeZoneProvider) {\n+        this.gson = new GsonBuilder().registerTypeAdapter(ZonedDateTime.class,\n+                (JsonDeserializer<ZonedDateTime>) (json, type, jsonDeserializationContext) -> ZonedDateTime\n+                        .parse(json.getAsJsonPrimitive().getAsString())\n+                        .withZoneSameInstant(timeZoneProvider.getTimeZone()))\n+                .create();\n+    }\n+\n+    private String execute(String url) throws VigiCruesException {\n+        String jsonResponse = \"\";\n+        try {\n+            jsonResponse = HttpUtil.executeUrl(\"GET\", url, TIMEOUT_MS);\n+            return jsonResponse;\n+        } catch (IOException e) {\n+            throw new VigiCruesException(e);\n+        }\n+    }", "originalCommit": "685bf8f3e20a730fbaec799b0a7efd673368b306", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MTk5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r517581991", "bodyText": "Please make sure all of your method names are camelcase.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public InfoVigiCru GetTronconStatus(String tronconId) throws VigiCruesException {\n          \n          \n            \n                public InfoVigiCru getTronconStatus(String tronconId) throws VigiCruesException {", "author": "cpmeister", "createdAt": "2020-11-04T19:30:36Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/api/ApiHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.api;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.vigicrues.internal.dto.hubeau.HubEauResponse;\n+import org.openhab.binding.vigicrues.internal.dto.opendatasoft.OpenDatasoftResponse;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.CdStationHydro;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.InfoVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TerEntVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TronEntVigiCru;\n+import org.openhab.core.i18n.TimeZoneProvider;\n+import org.openhab.core.io.net.http.HttpUtil;\n+import org.openhab.core.library.types.PointType;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link ApiHandler} is the responsible to call a given\n+ * url and transform the answer in the appropriate dto class\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ApiHandler {\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Gson gson;\n+\n+    public ApiHandler(TimeZoneProvider timeZoneProvider) {\n+        this.gson = new GsonBuilder().registerTypeAdapter(ZonedDateTime.class,\n+                (JsonDeserializer<ZonedDateTime>) (json, type, jsonDeserializationContext) -> ZonedDateTime\n+                        .parse(json.getAsJsonPrimitive().getAsString())\n+                        .withZoneSameInstant(timeZoneProvider.getTimeZone()))\n+                .create();\n+    }\n+\n+    private String execute(String url) throws VigiCruesException {\n+        String jsonResponse = \"\";\n+        try {\n+            jsonResponse = HttpUtil.executeUrl(\"GET\", url, TIMEOUT_MS);\n+            return jsonResponse;\n+        } catch (IOException e) {\n+            throw new VigiCruesException(e);\n+        }\n+    }\n+\n+    public InfoVigiCru GetTronconStatus(String tronconId) throws VigiCruesException {", "originalCommit": "685bf8f3e20a730fbaec799b0a7efd673368b306", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "url": "https://github.com/openhab/openhab-addons/commit/62f3e8140ee58b135d1d1d9ed6900475f794982e", "message": "Code review enhancements\nChanged alert to Number\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-05T11:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1MTE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518351167", "bodyText": "You don't need to supply a configurationPid if your component isn't configurable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = ApiHandler.class, configurationPid = \"binding.vigicrues.apiHandler\")\n          \n          \n            \n            @Component(service = ApiHandler.class)", "author": "cpmeister", "createdAt": "2020-11-05T20:40:48Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/api/ApiHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.api;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.vigicrues.internal.dto.hubeau.HubEauResponse;\n+import org.openhab.binding.vigicrues.internal.dto.opendatasoft.OpenDatasoftResponse;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.CdStationHydro;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.InfoVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TerEntVigiCru;\n+import org.openhab.binding.vigicrues.internal.dto.vigicrues.TronEntVigiCru;\n+import org.openhab.core.i18n.TimeZoneProvider;\n+import org.openhab.core.io.net.http.HttpUtil;\n+import org.openhab.core.library.types.PointType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link ApiHandler} is the responsible to call a given\n+ * url and transform the answer in the appropriate dto class\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+\n+@Component(service = ApiHandler.class, configurationPid = \"binding.vigicrues.apiHandler\")", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1MzI4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518353284", "bodyText": "This value only ever increases, is it ever reset anywhere? Should it reset as part of stopScan()?", "author": "cpmeister", "createdAt": "2020-11-05T20:44:50Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/discovery/VigiCruesDiscoveryService.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.discovery;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.vigicrues.internal.StationConfiguration;\n+import org.openhab.binding.vigicrues.internal.api.ApiHandler;\n+import org.openhab.binding.vigicrues.internal.api.VigiCruesException;\n+import org.openhab.binding.vigicrues.internal.dto.hubeau.HubEauResponse;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocationProvider;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link VigiCruesDiscoveryService} searches for available\n+ * hydro stations discoverable through API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.vigicrues\")\n+@NonNullByDefault\n+public class VigiCruesDiscoveryService extends AbstractDiscoveryService {\n+    private static final int SEARCH_TIME = 5;\n+\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesDiscoveryService.class);\n+    private final LocationProvider locationProvider;\n+    private final ApiHandler apiHandler;\n+\n+    private int searchRange = 10;\n+\n+    @Activate\n+    public VigiCruesDiscoveryService(@Reference ApiHandler apiHandler, @Reference LocationProvider locationProvider) {\n+        super(SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME, false);\n+        this.apiHandler = apiHandler;\n+        this.locationProvider = locationProvider;\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        PointType location = locationProvider.getLocation();\n+        if (location != null) {\n+            try {\n+                HubEauResponse response = apiHandler.discoverStations(location, searchRange);\n+                if (response.count > 0) {\n+                    response.stations.stream().filter(station -> station.enService).forEach(station -> {\n+                        thingDiscovered(DiscoveryResultBuilder\n+                                .create(new ThingUID(THING_TYPE_STATION, station.codeStation))\n+                                .withLabel(station.libelleStation).withRepresentationProperty(StationConfiguration.ID)\n+                                .withProperty(StationConfiguration.ID, station.codeStation).build());\n+                    });\n+                } else {\n+                    logger.info(\"No station exists in a neighbourhood of {} km\", searchRange);\n+                }\n+            } catch (VigiCruesException e) {\n+                logger.warn(\"Error discovering nearby hydro stations : {}\", e.getMessage());\n+            }\n+            searchRange += 10;", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwMjI1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518602252", "bodyText": "Yes, the value increases each time a scan is manually launched so the radius of the search is extended per 10km each time. Isn't it a nice idea ?", "author": "clinique", "createdAt": "2020-11-06T08:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1MzI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1NDEyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518354121", "bodyText": "Is there any reason you are using QuantityType here? It doesn't seem that you care about the units when you are later using the values as references. Wouldn't just storing as a Double suffice?", "author": "cpmeister", "createdAt": "2020-11-05T20:46:31Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -54,35 +74,124 @@\n  */\n @NonNullByDefault\n public class VigiCruesHandler extends BaseThingHandler {\n-    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n-    private static final int TIMEOUT_MS = 30000;\n     private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final LocationProvider locationProvider;\n \n-    // Time zone provider representing time zone configured in openHAB configuration\n-    private final TimeZoneProvider timeZoneProvider;\n-    private final Gson gson;\n     private @Nullable ScheduledFuture<?> refreshJob;\n-    private @Nullable String queryUrl;\n+    private final ApiHandler apiHandler;\n+\n+    private List<QuantityType<?>> referenceHeights = new ArrayList<>();\n+    private List<QuantityType<?>> referenceFlows = new ArrayList<>();\n+    private @Nullable String portion;\n \n-    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+    public VigiCruesHandler(Thing thing, LocationProvider locationProvider, ApiHandler apiHandler) {\n         super(thing);\n-        this.timeZoneProvider = timeZoneProvider;\n-        this.gson = gson;\n+        this.apiHandler = apiHandler;\n+        this.locationProvider = locationProvider;\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing VigiCrues handler.\");\n \n-        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n-        logger.debug(\"config station = {}\", config.id);\n+        StationConfiguration config = getConfigAs(StationConfiguration.class);\n         logger.debug(\"config refresh = {} min\", config.refresh);\n \n         updateStatus(ThingStatus.UNKNOWN);\n-        queryUrl = URL + config.id;\n+\n+        if (thing.getProperties().isEmpty()) {\n+            Map<String, String> properties = discoverAttributes(config);\n+            updateProperties(properties);\n+        }\n+        getReferences();\n         refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n     }\n \n+    private void getReferences() {\n+        List<QuantityType<?>> heights = new ArrayList<>();\n+        List<QuantityType<?>> flows = new ArrayList<>();\n+        thing.getProperties().keySet().stream().filter(key -> key.startsWith(FLOOD)).forEach(key -> {\n+            String value = thing.getProperties().get(key);\n+            if (key.contains(FLOW)) {\n+                flows.add(new QuantityType<>(value));\n+            } else {\n+                heights.add(new QuantityType<>(value));", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwMzMwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518603300", "bodyText": "It is a lazy approach to avoid having to cope with units :)", "author": "clinique", "createdAt": "2020-11-06T08:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1NDEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzNjE0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r519236141", "bodyText": "Well a unitless QuantityType is a bit misleading. Can you just use a Double instead?", "author": "cpmeister", "createdAt": "2020-11-07T23:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1NDEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM1NDYxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r519354612", "bodyText": "There is a unit in the incoming data", "author": "clinique", "createdAt": "2020-11-08T11:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1NDEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1OTUzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518359539", "bodyText": "I don't think that bindings should be interacting with the osgi framework directly like this. Since your resources would be located in the same jar as the compiled code It should be more than sufficient to load the resource using the classloader found from VigiCruesHandler.class.getClassLoader()\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Bundle bundle = FrameworkUtil.getBundle(getClass());\n          \n          \n            \n                    try (InputStream stream = bundle.getResource(iconPath).openStream()) {\n          \n          \n            \n                    try (InputStream stream = VigiCruesHandler.class.getClassLoader().getResourceAsStream()) {", "author": "cpmeister", "createdAt": "2020-11-05T20:56:43Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -133,8 +258,29 @@ private void updateQuantity(String channelId, Double value, Unit<?> unit) {\n \n     public void updateDate(String channelId, ZonedDateTime zonedDateTime) {\n         if (isLinked(channelId)) {\n-            ZonedDateTime localDateTime = zonedDateTime.withZoneSameInstant(timeZoneProvider.getTimeZone());\n-            updateState(channelId, new DateTimeType(localDateTime));\n+            updateState(channelId, new DateTimeType(zonedDateTime));\n+        }\n+    }\n+\n+    public void updateAlert(String channelId, int value) {\n+        String channelIcon = channelId + \"-icon\";\n+        if (isLinked(channelId)) {\n+            updateState(channelId, new DecimalType(value));\n+        }\n+        if (isLinked(channelIcon)) {\n+            String resource = getResource(String.format(\"picto/crue-%d.svg\", value));\n+            updateState(channelIcon,\n+                    resource != null ? new RawType(resource.getBytes(), \"image/svg+xml\") : UnDefType.UNDEF);\n+        }\n+    }\n+\n+    public @Nullable String getResource(String iconPath) {\n+        Bundle bundle = FrameworkUtil.getBundle(getClass());\n+        try (InputStream stream = bundle.getResource(iconPath).openStream()) {", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MDUxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518360510", "bodyText": "Since you are only using this to load binary data perhaps you should just return a byte array instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @Nullable String getResource(String iconPath) {\n          \n          \n            \n                public byte @Nullable [] getResource(String iconPath) {", "author": "cpmeister", "createdAt": "2020-11-05T20:58:47Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -133,8 +258,29 @@ private void updateQuantity(String channelId, Double value, Unit<?> unit) {\n \n     public void updateDate(String channelId, ZonedDateTime zonedDateTime) {\n         if (isLinked(channelId)) {\n-            ZonedDateTime localDateTime = zonedDateTime.withZoneSameInstant(timeZoneProvider.getTimeZone());\n-            updateState(channelId, new DateTimeType(localDateTime));\n+            updateState(channelId, new DateTimeType(zonedDateTime));\n+        }\n+    }\n+\n+    public void updateAlert(String channelId, int value) {\n+        String channelIcon = channelId + \"-icon\";\n+        if (isLinked(channelId)) {\n+            updateState(channelId, new DecimalType(value));\n+        }\n+        if (isLinked(channelIcon)) {\n+            String resource = getResource(String.format(\"picto/crue-%d.svg\", value));\n+            updateState(channelIcon,\n+                    resource != null ? new RawType(resource.getBytes(), \"image/svg+xml\") : UnDefType.UNDEF);\n+        }\n+    }\n+\n+    public @Nullable String getResource(String iconPath) {", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MTMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518361319", "bodyText": "If you want to just return a binary array this can be vastly simplified due to java 11.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n          \n          \n            \n                        return stream.readAllBytes();", "author": "cpmeister", "createdAt": "2020-11-05T21:00:18Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -133,8 +258,29 @@ private void updateQuantity(String channelId, Double value, Unit<?> unit) {\n \n     public void updateDate(String channelId, ZonedDateTime zonedDateTime) {\n         if (isLinked(channelId)) {\n-            ZonedDateTime localDateTime = zonedDateTime.withZoneSameInstant(timeZoneProvider.getTimeZone());\n-            updateState(channelId, new DateTimeType(localDateTime));\n+            updateState(channelId, new DateTimeType(zonedDateTime));\n+        }\n+    }\n+\n+    public void updateAlert(String channelId, int value) {\n+        String channelIcon = channelId + \"-icon\";\n+        if (isLinked(channelId)) {\n+            updateState(channelId, new DecimalType(value));\n+        }\n+        if (isLinked(channelIcon)) {\n+            String resource = getResource(String.format(\"picto/crue-%d.svg\", value));\n+            updateState(channelIcon,\n+                    resource != null ? new RawType(resource.getBytes(), \"image/svg+xml\") : UnDefType.UNDEF);\n+        }\n+    }\n+\n+    public @Nullable String getResource(String iconPath) {\n+        Bundle bundle = FrameworkUtil.getBundle(getClass());\n+        try (InputStream stream = bundle.getResource(iconPath).openStream()) {\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2MjUxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518362514", "bodyText": "IIRC QuantityType accepts a plain Number argument and DecimalType extends Number.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                properties.put(DISTANCE, new QuantityType<>(distance.intValue(), SIUnits.METRE).toString());\n          \n          \n            \n                                properties.put(DISTANCE, new QuantityType<>(distance, SIUnits.METRE).toString());", "author": "cpmeister", "createdAt": "2020-11-05T21:02:39Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -54,35 +74,124 @@\n  */\n @NonNullByDefault\n public class VigiCruesHandler extends BaseThingHandler {\n-    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n-    private static final int TIMEOUT_MS = 30000;\n     private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final LocationProvider locationProvider;\n \n-    // Time zone provider representing time zone configured in openHAB configuration\n-    private final TimeZoneProvider timeZoneProvider;\n-    private final Gson gson;\n     private @Nullable ScheduledFuture<?> refreshJob;\n-    private @Nullable String queryUrl;\n+    private final ApiHandler apiHandler;\n+\n+    private List<QuantityType<?>> referenceHeights = new ArrayList<>();\n+    private List<QuantityType<?>> referenceFlows = new ArrayList<>();\n+    private @Nullable String portion;\n \n-    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+    public VigiCruesHandler(Thing thing, LocationProvider locationProvider, ApiHandler apiHandler) {\n         super(thing);\n-        this.timeZoneProvider = timeZoneProvider;\n-        this.gson = gson;\n+        this.apiHandler = apiHandler;\n+        this.locationProvider = locationProvider;\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing VigiCrues handler.\");\n \n-        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n-        logger.debug(\"config station = {}\", config.id);\n+        StationConfiguration config = getConfigAs(StationConfiguration.class);\n         logger.debug(\"config refresh = {} min\", config.refresh);\n \n         updateStatus(ThingStatus.UNKNOWN);\n-        queryUrl = URL + config.id;\n+\n+        if (thing.getProperties().isEmpty()) {\n+            Map<String, String> properties = discoverAttributes(config);\n+            updateProperties(properties);\n+        }\n+        getReferences();\n         refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n     }\n \n+    private void getReferences() {\n+        List<QuantityType<?>> heights = new ArrayList<>();\n+        List<QuantityType<?>> flows = new ArrayList<>();\n+        thing.getProperties().keySet().stream().filter(key -> key.startsWith(FLOOD)).forEach(key -> {\n+            String value = thing.getProperties().get(key);\n+            if (key.contains(FLOW)) {\n+                flows.add(new QuantityType<>(value));\n+            } else {\n+                heights.add(new QuantityType<>(value));\n+            }\n+        });\n+        referenceHeights = heights.stream().distinct().sorted().collect(Collectors.toList());\n+        referenceFlows = flows.stream().distinct().sorted().collect(Collectors.toList());\n+        portion = thing.getProperties().get(TRONCON);\n+    }\n+\n+    private Map<String, String> discoverAttributes(StationConfiguration config) {\n+        Map<String, String> properties = new HashMap<>();\n+\n+        ThingBuilder thingBuilder = editThing();\n+        List<Channel> channels = new ArrayList<>(getThing().getChannels());\n+\n+        try {\n+            HubEauResponse stationDetails = apiHandler.discoverStations(config.id);\n+            stationDetails.stations.stream().findFirst().ifPresent(station -> {\n+                PointType stationLocation = new PointType(\n+                        String.format(Locale.US, \"%f,%f\", station.latitudeStation, station.longitudeStation));\n+                properties.put(LOCATION, stationLocation.toString());\n+                PointType serverLocation = locationProvider.getLocation();\n+                if (serverLocation != null) {\n+                    DecimalType distance = serverLocation.distanceFrom(stationLocation);\n+                    properties.put(DISTANCE, new QuantityType<>(distance.intValue(), SIUnits.METRE).toString());", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NTI5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518365292", "bodyText": "What is the point of keeping track of multiple reference values if you only care about the first one?", "author": "cpmeister", "createdAt": "2020-11-05T21:08:15Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -102,26 +211,42 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n     }\n \n     private void updateAndPublish() {\n+        StationConfiguration config = getConfigAs(StationConfiguration.class);\n         try {\n-            if (queryUrl != null) {\n-                String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n-                updateStatus(ThingStatus.ONLINE);\n-                OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n-                Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(Record::getFields).ifPresent(field -> {\n-                    field.getHeight().ifPresent(height -> updateQuantity(HEIGHT, height, METRE));\n-                    field.getFlow().ifPresent(flow -> updateQuantity(FLOW, flow, CUBICMETRE_PER_SECOND));\n-                    field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+            OpenDatasoftResponse measures = apiHandler.getMeasures(config.id);\n+            measures.getFirstRecord().ifPresent(field -> {\n+                field.getHeight().ifPresent(height -> {\n+                    updateQuantity(HEIGHT, height, SIUnits.METRE);\n+                    updateRelativeMeasure(RELATIVE_HEIGHT, referenceHeights, height);\n                 });\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.DISABLED,\n-                        \"queryUrl should never be null, but it is !\");\n+                field.getFlow().ifPresent(flow -> {\n+                    updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND);\n+                    updateRelativeMeasure(RELATIVE_FLOW, referenceFlows, flow);\n+                });\n+                field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+            });\n+            if (portion != null) {\n+                InfoVigiCru status = apiHandler.getTronconStatus(portion);\n+                updateAlert(ALERT, status.vicInfoVigiCru.vicNivInfoVigiCru - 1);\n+                updateString(SHORT_COMMENT, status.vicInfoVigiCru.vicSituActuInfoVigiCru);\n+                updateString(COMMENT, status.vicInfoVigiCru.vicQualifInfoVigiCru);\n             }\n-        } catch (MalformedURLException e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                    String.format(\"Querying '%s' raised : %s\", queryUrl, e.getMessage()));\n-        } catch (IOException e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                    String.format(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage()));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (VigiCruesException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.DISABLED, e.getMessage());\n+        }\n+    }\n+\n+    private void updateString(String channelId, String value) {\n+        if (isLinked(channelId)) {\n+            updateState(channelId, new StringType(value));\n+        }\n+    }\n+\n+    private void updateRelativeMeasure(String channelId, List<QuantityType<?>> reference, double value) {\n+        if (reference.size() > 0) {\n+            double percent = value / reference.get(0).doubleValue() * 100;", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwODk0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518608947", "bodyText": "I currently use the lowest value as reference, but maybe we could introduce a setting to let the user decide if he wants it compared to lowest or highest. Reason why I did it this way.", "author": "clinique", "createdAt": "2020-11-06T08:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2NTI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2Nzc3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518367775", "bodyText": "Bindings should never use ThingStatusDetail.DISABLED, that is reserved for the core. Please use ThingStatusDetail.COMMUNICATION_ERROR instead.", "author": "cpmeister", "createdAt": "2020-11-05T21:13:25Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -102,26 +211,42 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n     }\n \n     private void updateAndPublish() {\n+        StationConfiguration config = getConfigAs(StationConfiguration.class);\n         try {\n-            if (queryUrl != null) {\n-                String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n-                updateStatus(ThingStatus.ONLINE);\n-                OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n-                Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(Record::getFields).ifPresent(field -> {\n-                    field.getHeight().ifPresent(height -> updateQuantity(HEIGHT, height, METRE));\n-                    field.getFlow().ifPresent(flow -> updateQuantity(FLOW, flow, CUBICMETRE_PER_SECOND));\n-                    field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+            OpenDatasoftResponse measures = apiHandler.getMeasures(config.id);\n+            measures.getFirstRecord().ifPresent(field -> {\n+                field.getHeight().ifPresent(height -> {\n+                    updateQuantity(HEIGHT, height, SIUnits.METRE);\n+                    updateRelativeMeasure(RELATIVE_HEIGHT, referenceHeights, height);\n                 });\n-            } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.DISABLED,\n-                        \"queryUrl should never be null, but it is !\");\n+                field.getFlow().ifPresent(flow -> {\n+                    updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND);\n+                    updateRelativeMeasure(RELATIVE_FLOW, referenceFlows, flow);\n+                });\n+                field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+            });\n+            if (portion != null) {\n+                InfoVigiCru status = apiHandler.getTronconStatus(portion);\n+                updateAlert(ALERT, status.vicInfoVigiCru.vicNivInfoVigiCru - 1);\n+                updateString(SHORT_COMMENT, status.vicInfoVigiCru.vicSituActuInfoVigiCru);\n+                updateString(COMMENT, status.vicInfoVigiCru.vicQualifInfoVigiCru);\n             }\n-        } catch (MalformedURLException e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                    String.format(\"Querying '%s' raised : %s\", queryUrl, e.getMessage()));\n-        } catch (IOException e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                    String.format(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage()));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (VigiCruesException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.DISABLED, e.getMessage());", "originalCommit": "62f3e8140ee58b135d1d1d9ed6900475f794982e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3885b5e6d8bd9b08de9914df6ede5d89f53f9557", "url": "https://github.com/openhab/openhab-addons/commit/3885b5e6d8bd9b08de9914df6ede5d89f53f9557", "message": "Code review corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-06T09:05:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4Mjg4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8952#discussion_r518882886", "bodyText": "You shouldn't have changed this one. You were supposed to remove the one from ApiHandler instead.", "author": "cpmeister", "createdAt": "2020-11-06T17:01:23Z", "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/discovery/VigiCruesDiscoveryService.java", "diffHunk": "@@ -37,7 +37,7 @@\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  */\n-@Component(service = DiscoveryService.class, configurationPid = \"discovery.vigicrues\")\n+@Component(service = DiscoveryService.class)", "originalCommit": "3885b5e6d8bd9b08de9914df6ede5d89f53f9557", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "29399df11d6d1b6404852cc97597fbe26e65dda1", "url": "https://github.com/openhab/openhab-addons/commit/29399df11d6d1b6404852cc97597fbe26e65dda1", "message": "Correcting my error\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-07T11:04:13Z", "type": "commit"}, {"oid": "410747abb4d72acff07d4f3342c4f378a283d684", "url": "https://github.com/openhab/openhab-addons/commit/410747abb4d72acff07d4f3342c4f378a283d684", "message": "Adressing SAT finding\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-11-09T07:43:15Z", "type": "commit"}]}