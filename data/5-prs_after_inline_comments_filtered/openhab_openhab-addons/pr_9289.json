{"pr_number": 9289, "pr_title": "[miio] Elimate several SAT warnings", "pr_createdAt": "2020-12-08T11:17:02Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9289", "timeline": [{"oid": "915a216052c8f2b3e31c627dbd819f805e4c7ae2", "url": "https://github.com/openhab/openhab-addons/commit/915a216052c8f2b3e31c627dbd819f805e4c7ae2", "message": "[miio] eliminate warnings from mapdraw\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T11:01:36Z", "type": "commit"}, {"oid": "575e7d2569f9f701d0f4c5b3f091cb395c35c7bb", "url": "https://github.com/openhab/openhab-addons/commit/575e7d2569f9f701d0f4c5b3f091cb395c35c7bb", "message": "[miio] clean warnings from basic handler\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T11:01:39Z", "type": "commit"}, {"oid": "9b2bfa96c5fd60dcc65d86d89df85cc82fbe593d", "url": "https://github.com/openhab/openhab-addons/commit/9b2bfa96c5fd60dcc65d86d89df85cc82fbe593d", "message": "[miio] avoid apache commons warning in utils\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T11:09:35Z", "type": "commit"}, {"oid": "0224054d366a3b684ecd42d462b38253a3dd5823", "url": "https://github.com/openhab/openhab-addons/commit/0224054d366a3b684ecd42d462b38253a3dd5823", "message": "[miio] eliminate warnings from micloudconnector\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T11:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMDc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r538630762", "bodyText": "Nullable annotations aren't required for local variables. This can be removed.", "author": "cpmeister", "createdAt": "2020-12-08T17:25:07Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "diffHunk": "@@ -492,9 +514,10 @@ private void dumpCookies(String url, boolean delete) {\n         if (logger.isTraceEnabled()) {\n             try {\n                 URI uri = URI.create(url);\n-                if (uri != null) {\n-                    logger.trace(\"Cookie dump for {}\", uri);\n-                    CookieStore cs = httpClient.getCookieStore();\n+                logger.trace(\"Cookie dump for {}\", uri);\n+                @Nullable", "originalCommit": "0224054d366a3b684ecd42d462b38253a3dd5823", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTcwMA==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r538631700", "bodyText": "same here", "author": "cpmeister", "createdAt": "2020-12-08T17:26:01Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -379,6 +382,7 @@ private void drawOpenHabRocks(Graphics2D g2d, int width, int height, float scale\n         } catch (IOException e) {\n             logger.debug(\"Error loading image ohlogo.png:: {}\", e.getMessage());\n         }\n+        @Nullable", "originalCommit": "0224054d366a3b684ecd42d462b38253a3dd5823", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99e78df1476fe4ce564f7496cd4fc4576549b86c", "url": "https://github.com/openhab/openhab-addons/commit/99e78df1476fe4ce564f7496cd4fc4576549b86c", "message": "[miio] update from feedback. remove @Nullable for local variables\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T18:02:46Z", "type": "commit"}, {"oid": "785c1247031f23c60781c24832911b3b6359a655", "url": "https://github.com/openhab/openhab-addons/commit/785c1247031f23c60781c24832911b3b6359a655", "message": "[miio] one more\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T18:05:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTc5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r538781796", "bodyText": "You don't have to call toString it will be called automatically, but only when the logging-level actually applies.", "author": "martinvw", "createdAt": "2020-12-08T20:25:41Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "diffHunk": "@@ -154,22 +155,26 @@ public String getMapUrl(String vacuumMap, String country) throws MiCloudExceptio\n         String mapResponse = request(url, map);\n         logger.trace(\"response: {}\", mapResponse);\n         String errorMsg = \"\";\n-        JsonElement response = PARSER.parse(mapResponse);\n-        if (response.isJsonObject()) {\n-            logger.debug(\"Received  JSON message {}\", response.toString());\n-            if (response.getAsJsonObject().has(\"result\") && response.getAsJsonObject().get(\"result\").isJsonObject()) {\n-                JsonObject jo = response.getAsJsonObject().get(\"result\").getAsJsonObject();\n-                if (jo.has(\"url\")) {\n-                    String mapUrl = jo.get(\"url\").getAsString();\n-                    return mapUrl != null ? mapUrl : \"\";\n+        try {\n+            JsonElement response = PARSER.parse(mapResponse);\n+            if (response.isJsonObject()) {\n+                logger.debug(\"Received  JSON message {}\", response.toString());", "originalCommit": "785c1247031f23c60781c24832911b3b6359a655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4NTgxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r538785811", "bodyText": "agree.done", "author": "marcelrv", "createdAt": "2020-12-08T20:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTc5Ng=="}], "type": "inlineReview"}, {"oid": "e4a7d03c361533052cbd25ae0787ec9fda805547", "url": "https://github.com/openhab/openhab-addons/commit/e4a7d03c361533052cbd25ae0787ec9fda805547", "message": "[miio] update from feedback-remove tostring\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-08T20:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjExMA==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541146110", "bodyText": "Please cache cmdResponse.get(0) in a local variable.", "author": "cpmeister", "createdAt": "2020-12-11T18:32:06Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -641,19 +642,21 @@ public void onMessageReceived(MiIoSendCommand response) {\n                 default:\n                     if (refreshListCustomCommands.containsKey(response.getMethod())) {\n                         logger.debug(\"Processing custom refresh command response for !{}\", response.getMethod());\n-                        MiIoBasicChannel ch = refreshListCustomCommands.get(response.getMethod());\n-                        if (response.getResult().isJsonArray()) {\n-                            JsonArray cmdResponse = response.getResult().getAsJsonArray();\n-                            final String transformation = ch.getTransfortmation();\n-                            if (transformation == null || transformation.isBlank()) {\n-                                updateChannel(ch, ch.getChannel(),\n-                                        cmdResponse.get(0).isJsonPrimitive() ? cmdResponse.get(0)\n-                                                : new JsonPrimitive(cmdResponse.get(0).toString()));\n+                        final MiIoBasicChannel ch = refreshListCustomCommands.get(response.getMethod());\n+                        if (ch != null) {\n+                            if (response.getResult().isJsonArray()) {\n+                                JsonArray cmdResponse = response.getResult().getAsJsonArray();\n+                                final String transformation = ch.getTransfortmation();\n+                                if (transformation == null || transformation.isBlank()) {\n+                                    updateChannel(ch, ch.getChannel(),\n+                                            cmdResponse.get(0).isJsonPrimitive() ? cmdResponse.get(0)\n+                                                    : new JsonPrimitive(cmdResponse.get(0).toString()));", "originalCommit": "e4a7d03c361533052cbd25ae0787ec9fda805547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0MjQ1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541542452", "bodyText": "agree. done", "author": "marcelrv", "createdAt": "2020-12-12T09:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjM0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541146341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final @Nullable MiIoBasicChannel miIoBasicChannel = actions.get(channelUID);\n          \n          \n            \n                        final MiIoBasicChannel miIoBasicChannel = actions.get(channelUID);", "author": "cpmeister", "createdAt": "2020-12-11T18:32:30Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -134,7 +135,7 @@ public void handleCommand(ChannelUID channelUID, Command receivedCommand) {\n         }\n         logger.debug(\"Locating action for {} channel '{}': '{}'\", getThing().getUID(), channelUID.getId(), command);\n         if (!actions.isEmpty()) {\n-            MiIoBasicChannel miIoBasicChannel = actions.get(channelUID);\n+            final @Nullable MiIoBasicChannel miIoBasicChannel = actions.get(channelUID);", "originalCommit": "e4a7d03c361533052cbd25ae0787ec9fda805547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0OTM0NA==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541149344", "bodyText": "What would throw either of these exceptions?", "author": "cpmeister", "createdAt": "2020-12-11T18:37:51Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "diffHunk": "@@ -154,22 +155,26 @@ public String getMapUrl(String vacuumMap, String country) throws MiCloudExceptio\n         String mapResponse = request(url, map);\n         logger.trace(\"response: {}\", mapResponse);\n         String errorMsg = \"\";\n-        JsonElement response = PARSER.parse(mapResponse);\n-        if (response.isJsonObject()) {\n-            logger.debug(\"Received  JSON message {}\", response.toString());\n-            if (response.getAsJsonObject().has(\"result\") && response.getAsJsonObject().get(\"result\").isJsonObject()) {\n-                JsonObject jo = response.getAsJsonObject().get(\"result\").getAsJsonObject();\n-                if (jo.has(\"url\")) {\n-                    String mapUrl = jo.get(\"url\").getAsString();\n-                    return mapUrl != null ? mapUrl : \"\";\n+        try {\n+            JsonElement response = PARSER.parse(mapResponse);\n+            if (response.isJsonObject()) {\n+                logger.debug(\"Received  JSON message {}\", response);\n+                if (response.getAsJsonObject().has(\"result\")\n+                        && response.getAsJsonObject().get(\"result\").isJsonObject()) {\n+                    JsonObject jo = response.getAsJsonObject().get(\"result\").getAsJsonObject();\n+                    if (jo.has(\"url\")) {\n+                        return jo.get(\"url\").getAsString();\n+                    } else {\n+                        errorMsg = \"Could not get url\";\n+                    }\n                 } else {\n-                    errorMsg = \"Could not get url\";\n+                    errorMsg = \"Could not get result\";\n                 }\n             } else {\n-                errorMsg = \"Could not get result\";\n+                errorMsg = \"Received message is invalid JSON\";\n             }\n-        } else {\n-            errorMsg = \"Received message is invalid JSON\";\n+        } catch (ClassCastException | IllegalStateException e) {", "originalCommit": "e4a7d03c361533052cbd25ae0787ec9fda805547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0MDE5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541540191", "bodyText": "During my testing I had all sorts of garbage responses that came form the Xiaomi cloud. (so invalid json)\nCausing exceptions during the reading and processing of the json responses.\nAt most places I was already catching these, but seems this one not.", "author": "marcelrv", "createdAt": "2020-12-12T09:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0OTM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NzUyMw==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541157523", "bodyText": "While not a bad approach per se. In general you should avoid storing the entire file in memory if you would just pass it to another application for processing. Passing a reader for that file data would instead be preferable since it would allow the processing application to read and garbage collect data as it goes without requiring the entire file available at once.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try (InputStream reader = fileName.openStream()) {\n          \n          \n            \n                        JsonElement jsonElement = parser.parse(new String(reader.readAllBytes(), StandardCharsets.UTF_8));\n          \n          \n            \n                    try (InputStream inputStream = fileName.openStream();\n          \n          \n            \n                           InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n          \n          \n            \n                        JsonElement jsonElement = parser.parse(reader);", "author": "cpmeister", "createdAt": "2020-12-11T18:52:43Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/Utils.java", "diffHunk": "@@ -90,12 +94,15 @@ public static String obfuscateToken(String tokenString) {\n         }\n     }\n \n-    public static JsonObject convertFileToJSON(URL fileName) throws JsonIOException, JsonSyntaxException, IOException {\n+    public static JsonObject convertFileToJSON(URL fileName) throws JsonIOException, JsonSyntaxException,\n+            JsonParseException, IOException, URISyntaxException, NoSuchFileException {\n         JsonObject jsonObject = new JsonObject();\n         JsonParser parser = new JsonParser();\n-        JsonElement jsonElement = parser.parse(IOUtils.toString(fileName));\n-        jsonObject = jsonElement.getAsJsonObject();\n-        return jsonObject;\n+        try (InputStream reader = fileName.openStream()) {\n+            JsonElement jsonElement = parser.parse(new String(reader.readAllBytes(), StandardCharsets.UTF_8));", "originalCommit": "e4a7d03c361533052cbd25ae0787ec9fda805547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1ODkzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541158938", "bodyText": "What would throw a ClassCastException or IllegalStateException here?", "author": "cpmeister", "createdAt": "2020-12-11T18:55:09Z", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "diffHunk": "@@ -396,22 +414,21 @@ private String loginStep1() throws InterruptedException, TimeoutException, Execu\n         logger.trace(\"Xiaomi Login step 1 response = {}\", responseStep1);\n         try {\n             JsonElement resp = new JsonParser().parse(parseJson(content));\n-            if (resp.getAsJsonObject().has(\"_sign\")) {\n+            if (resp.isJsonObject() && resp.getAsJsonObject().has(\"_sign\")) {\n                 String sign = resp.getAsJsonObject().get(\"_sign\").getAsString();\n                 logger.trace(\"Xiaomi Login step 1 sign = {}\", sign);\n                 return sign;\n             } else {\n-                logger.trace(\"Xiaomi Login _sign missing. Maybe still has login cookie.\");\n+                logger.debug(\"Xiaomi Login _sign missing. Maybe still has login cookie.\");\n                 return \"\";\n             }\n-\n-        } catch (JsonSyntaxException | NullPointerException e) {\n+        } catch (JsonParseException | IllegalStateException | ClassCastException e) {", "originalCommit": "e4a7d03c361533052cbd25ae0787ec9fda805547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU0MTAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9289#discussion_r541541015", "bodyText": "as before comment, the responses of Xiaomi cloud are many times corrupt.\nmaybe I'm overly caution here to catch all possible errors that can be thrown in this part of the process.\nDuring my testing for this PR I had some JsonParseException & IllegalStateExceptions in the module, not 100% sure anymore if it was in this specific step. I may have added it to multiple steps to avoid the same.", "author": "marcelrv", "createdAt": "2020-12-12T09:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1ODkzOA=="}], "type": "inlineReview"}, {"oid": "3c3cbc874995e8c89c162c2968290c37eb5b9a38", "url": "https://github.com/openhab/openhab-addons/commit/3c3cbc874995e8c89c162c2968290c37eb5b9a38", "message": "Apply suggestions from code review\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>", "committedDate": "2020-12-12T09:31:49Z", "type": "commit"}, {"oid": "cb1a0fdbac4de2097ab51f5f1223b919dd2073b8", "url": "https://github.com/openhab/openhab-addons/commit/cb1a0fdbac4de2097ab51f5f1223b919dd2073b8", "message": "[miio] updates from review feedback\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>", "committedDate": "2020-12-12T09:39:48Z", "type": "commit"}]}