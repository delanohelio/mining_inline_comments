{"pr_number": 7441, "pr_title": "[modbus][sunspec] Support for SunSpec meters", "pr_createdAt": "2020-04-22T08:23:11Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7441", "timeline": [{"oid": "bff53242e1efded5e8a18c23102c8d62d141d583", "url": "https://github.com/openhab/openhab-addons/commit/bff53242e1efded5e8a18c23102c8d62d141d583", "message": "[sunspec] Support for SunSpec meters\n\nThis commit adds support for SunSpec compatible meters. They are auto discovered\nand handled as separate things even if they are part of another device.\nThis is due to the nature of the SunSpec format wich also handles\nthe different report types as different blocks.\n\n\nSigned-off-by: Nagy Attila Gabor <mrbig@sneaker.hu>", "committedDate": "2020-04-22T08:05:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwOTUzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7441#discussion_r413109534", "bodyText": "Please remove all the excess blank lines in this method", "author": "cpmeister", "createdAt": "2020-04-22T16:00:24Z", "path": "bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/parser/MeterModelParser.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sunspec.internal.parser;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.openhab.binding.modbus.sunspec.internal.SunSpecConstants;\n+import org.openhab.binding.modbus.sunspec.internal.dto.MeterModelBlock;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+\n+/**\n+ * Parser for sunspec compatible meters\n+ *\n+ * @author Nagy Attila Gabor - Initial contribution\n+ *\n+ */\n+public class MeterModelParser extends AbstractBaseParser implements SunspecParser<MeterModelBlock> {\n+\n+    @Override\n+    public MeterModelBlock parse(@NonNull ModbusRegisterArray raw) {", "originalCommit": "bff53242e1efded5e8a18c23102c8d62d141d583", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMzY1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7441#discussion_r413233654", "bodyText": "ok, removed blank lines", "author": "mrbig", "createdAt": "2020-04-22T18:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwOTUzNA=="}], "type": "inlineReview"}, {"oid": "512244d5c31a0f909ee76eb4efde9613f5f31949", "url": "https://github.com/openhab/openhab-addons/commit/512244d5c31a0f909ee76eb4efde9613f5f31949", "message": "[sunspec] fixed file endings and missing unit declaration\n\nSigned-off-by: Nagy Attila Gabor <mrbig@sneaker.hu>", "committedDate": "2020-04-22T18:49:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2Njg5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7441#discussion_r413266894", "bodyText": "You could refactor a lot of code if you grouped all of the phase fields into a nested class.\npublic MeterModelBlock{\n...\n    public PhaseBlock phaseA = new PhaseBlock();\n    public PhaseBlock phaseB = new PhaseBlock();\n    public PhaseBlock phaseC = new PhaseBlock();\n...\n\n    public static class PhaseBlock {\n...\n        public Optional<Long> acExportedReactiveEnergyQ4;\n...\n    }\n}\n\nThen you could access all the data like so: meterBlock.phaseC.acExportedReactiveEnergyQ4.\nModel parsing wouldn't be all that different, but where you would save a lot of code is in this class and in the handler where you would only need a single method to update all the channels for a phase group, rather than having a method for each phase like you do now.\nWDYT?", "author": "cpmeister", "createdAt": "2020-04-22T19:37:29Z", "path": "bundles/org.openhab.binding.modbus.sunspec/src/main/java/org/openhab/binding/modbus/sunspec/internal/dto/MeterModelBlock.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sunspec.internal.dto;\n+\n+import java.util.Optional;\n+\n+/**\n+ *\n+ * Data object for the parsed information from a sunspec meter\n+ *\n+ * @author Nagy Attila Gabor - Initial contribution\n+ *\n+ */\n+public class MeterModelBlock {\n+\n+    /**\n+     * Sunspec device type id\n+     */\n+    public Integer sunspecDID;\n+\n+    /**\n+     * Block length\n+     */\n+    public Integer length;\n+\n+    /**\n+     * AC Total Current value\n+     */\n+    public Short acCurrentTotal;\n+\n+    /**\n+     * AC Phase A Current value\n+     */\n+    public Short acCurrentPhaseA;\n+\n+    /**\n+     * AC Phase B Current value\n+     */\n+    public Optional<Short> acCurrentPhaseB;\n+\n+    /**\n+     * AC Phase C Current value\n+     */\n+    public Optional<Short> acCurrentPhaseC;\n+\n+    /**\n+     * AC Current scale factor\n+     */\n+    public Short acCurrentSF;\n+\n+    /**\n+     * AC Voltage Line to line value\n+     */\n+    public Optional<Short> acVoltageLineToNAverage;\n+\n+    /**\n+     * AC Voltage Phase A to N value\n+     */\n+    public Optional<Short> acVoltageAtoN;\n+\n+    /**\n+     * AC Voltage Phase B to N value\n+     */\n+    public Optional<Short> acVoltageBtoN;\n+\n+    /**\n+     * AC Voltage Phase C to N value\n+     */\n+    public Optional<Short> acVoltageCtoN;\n+\n+    /**\n+     * AC Voltage Line to N value\n+     */\n+    public Optional<Short> acVoltageLineToLineAverage;\n+\n+    /**\n+     * AC Voltage Phase AB value\n+     */\n+    public Optional<Short> acVoltageAB;\n+\n+    /**\n+     * AC Voltage Phase BC value\n+     */\n+    public Optional<Short> acVoltageBC;\n+\n+    /**\n+     * AC Voltage Phase CA value\n+     */\n+    public Optional<Short> acVoltageCA;\n+\n+    /**\n+     * AC Voltage scale factor\n+     */\n+    public Short acVoltageSF;\n+\n+    /**\n+     * AC Frequency value\n+     */\n+    public Short acFrequency;\n+\n+    /**\n+     * AC Frequency scale factor\n+     */\n+    public Optional<Short> acFrequencySF;\n+\n+    /**\n+     * Total real power\n+     */\n+    public Short acRealPowerTotal;\n+\n+    /**\n+     * Phase A AC real power\n+     */\n+    public Optional<Short> acRealPowerPhaseA;\n+\n+    /**\n+     * Phase B AC real power\n+     */\n+    public Optional<Short> acRealPowerPhaseB;\n+\n+    /**\n+     * Phase C AC real power\n+     */\n+    public Optional<Short> acRealPowerPhaseC;\n+\n+    /**\n+     * AC Real Power Scale Factor\n+     */\n+    public Short acRealPowerSF;\n+\n+    /**\n+     * Total apparent power\n+     */\n+    public Optional<Short> acApparentPowerTotal;\n+\n+    /**\n+     * Phase A AC apparent power\n+     */\n+    public Optional<Short> acApparentPowerPhaseA;\n+\n+    /**\n+     * Phase B AC apparent power\n+     */\n+    public Optional<Short> acApparentPowerPhaseB;\n+\n+    /**\n+     * Phase C AC apparent power\n+     */\n+    public Optional<Short> acApparentPowerPhaseC;\n+\n+    /**\n+     * AC Apparent Power Scale Factor\n+     */\n+    public Optional<Short> acApparentPowerSF;\n+\n+    /**\n+     * Total reactive power\n+     */\n+    public Optional<Short> acReactivePowerTotal;\n+\n+    /**\n+     * Phase A AC reactive power\n+     */\n+    public Optional<Short> acReactivePowerPhaseA;\n+\n+    /**\n+     * Phase B AC reactive power\n+     */\n+    public Optional<Short> acReactivePowerPhaseB;\n+\n+    /**\n+     * Phase C AC reactive power\n+     */\n+    public Optional<Short> acReactivePowerPhaseC;\n+\n+    /**\n+     * AC Reactive Power Scale Factor\n+     */\n+    public Optional<Short> acReactivePowerSF;\n+\n+    /**\n+     * Power factor\n+     */\n+    public Optional<Short> acPowerFactor;\n+\n+    /**\n+     * Phase A Power factor\n+     */\n+    public Optional<Short> acPowerFactorPhaseA;\n+\n+    /**\n+     * Phase B Power factor\n+     */\n+    public Optional<Short> acPowerFactorPhaseB;\n+\n+    /**\n+     * Phase C Power factor\n+     */\n+    public Optional<Short> acPowerFactorPhaseC;\n+\n+    /**\n+     * Power factor scale factor\n+     */\n+    public Optional<Short> acPowerFactorSF;\n+\n+    /**\n+     * Total exported real energy\n+     */\n+    public Optional<Long> acExportedRealEnergyTotal;\n+\n+    /**\n+     * Phase A exported real energy\n+     */\n+    public Optional<Long> acExportedRealEnergyPhaseA;\n+\n+    /**\n+     * Phase B exported real energy\n+     */\n+    public Optional<Long> acExportedRealEnergyPhaseB;\n+\n+    /**\n+     * Phase C exported real energy\n+     */\n+    public Optional<Long> acExportedRealEnergyPhaseC;\n+\n+    /**\n+     * Total imported real energy\n+     */\n+    public Long acImportedRealEnergyTotal;\n+\n+    /**\n+     * Phase A imported real energy\n+     */\n+    public Optional<Long> acImportedRealEnergyPhaseA;\n+\n+    /**\n+     * Phase B imported real energy\n+     */\n+    public Optional<Long> acImportedRealEnergyPhaseB;\n+\n+    /**\n+     * Phase C imported real energy\n+     */\n+    public Optional<Long> acImportedRealEnergyPhaseC;\n+\n+    /**\n+     * Real Energy Scale Factor\n+     */\n+    public Short acRealEnergySF;\n+\n+    /**\n+     * Total exported apparent energy\n+     */\n+    public Optional<Long> acExportedApparentEnergyTotal;\n+\n+    /**\n+     * Phase A exported apparent energy\n+     */\n+    public Optional<Long> acExportedApparentEnergyPhaseA;\n+\n+    /**\n+     * Phase B exported apparent energy\n+     */\n+    public Optional<Long> acExportedApparentEnergyPhaseB;\n+\n+    /**\n+     * Phase C exported apparent energy\n+     */\n+    public Optional<Long> acExportedApparentEnergyPhaseC;\n+\n+    /**\n+     * Total imported apparent energy\n+     */\n+    public Optional<Long> acImportedApparentEnergyTotal;\n+\n+    /**\n+     * Phase A imported apparent energy\n+     */\n+    public Optional<Long> acImportedApparentEnergyPhaseA;\n+\n+    /**\n+     * Phase B imported apparent energy\n+     */\n+    public Optional<Long> acImportedApparentEnergyPhaseB;\n+\n+    /**\n+     * Phase C imported apparent energy\n+     */\n+    public Optional<Long> acImportedApparentEnergyPhaseC;\n+\n+    /**\n+     * Apparent Energy Scale Factor\n+     */\n+    public Optional<Short> acApparentEnergySF;\n+\n+    /**\n+     * Quadrant 1: Total imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ1Total;\n+\n+    /**\n+     * Quadrant 1: Phase A imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ1PhaseA;\n+\n+    /**\n+     * Quadrant 1: Phase B imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ1PhaseB;\n+\n+    /**\n+     * Quadrant 1: Phase C imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ1PhaseC;\n+\n+    /**\n+     * Quadrant 2: Total imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ2Total;\n+\n+    /**\n+     * Quadrant 2: Phase A imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ2PhaseA;\n+\n+    /**\n+     * Quadrant 2: Phase B imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ2PhaseB;\n+\n+    /**\n+     * Quadrant 2: Phase C imported reactive energy\n+     */\n+    public Optional<Long> acImportedReactiveEnergyQ2PhaseC;\n+\n+    /**\n+     * Quadrant 3: Total exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ3Total;\n+\n+    /**\n+     * Quadrant 3: Phase A exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ3PhaseA;\n+\n+    /**\n+     * Quadrant 3: Phase B exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ3PhaseB;\n+\n+    /**\n+     * Quadrant 3: Phase C exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ3PhaseC;\n+\n+    /**\n+     * Quadrant 4: Total exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ4Total;\n+\n+    /**\n+     * Quadrant 4: Phase A exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ4PhaseA;\n+\n+    /**\n+     * Quadrant 4: Phase B exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ4PhaseB;\n+\n+    /**\n+     * Quadrant 4: Phase C exported reactive energy\n+     */\n+    public Optional<Long> acExportedReactiveEnergyQ4PhaseC;", "originalCommit": "512244d5c31a0f909ee76eb4efde9613f5f31949", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyOTE3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7441#discussion_r413329177", "bodyText": "I was also hesitating a lot about that part, because of the lot of similar code. On the other hand I didn't want to overcomplicate the data structures, neither to push too much of knowledge into the parser class.\nHowever you solution seems now a good compromise, so I will definitely give it a try.", "author": "mrbig", "createdAt": "2020-04-22T21:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2Njg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0MjIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7441#discussion_r414342237", "bodyText": "Thank you again for the idea, I could remove lots of lines. This happens when I'm too long into one solution :)", "author": "mrbig", "createdAt": "2020-04-24T07:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2Njg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MTk4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7441#discussion_r414771989", "bodyText": "Np, I just saw a lot of duplicate code and proposed a solution. :)", "author": "cpmeister", "createdAt": "2020-04-24T18:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2Njg5NA=="}], "type": "inlineReview"}, {"oid": "8e5892fe0fbcccce9ed5c433f71e59739f57363a", "url": "https://github.com/openhab/openhab-addons/commit/8e5892fe0fbcccce9ed5c433f71e59739f57363a", "message": "[sunspec] meter block dto refactored\n\nThis way we could get rid of ~250 loc.\n\n\nSigned-off-by: Nagy Attila Gabor <mrbig@sneaker.hu>", "committedDate": "2020-04-22T21:41:54Z", "type": "commit"}, {"oid": "e4bdb86e3f28383875bd927f8205c9725105f0ac", "url": "https://github.com/openhab/openhab-addons/commit/e4bdb86e3f28383875bd927f8205c9725105f0ac", "message": "[sunspec] make sure we don't fail if the address/block size contains decimal dots\n\nSome older installations of OpenHAB returned this values incorrectly\n\nSigned-off-by: Nagy Attila Gabor <mrbig@sneaker.hu>", "committedDate": "2020-04-24T07:00:14Z", "type": "commit"}]}