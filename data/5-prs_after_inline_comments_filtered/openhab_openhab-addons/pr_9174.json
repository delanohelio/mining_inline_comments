{"pr_number": 9174, "pr_title": "[modbus.sbc] Initial contribution", "pr_createdAt": "2020-11-29T19:44:11Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9174", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532363137", "bodyText": "What is the -1 here? Would it be readable to follow the terminology of the modbus binding: \"address\" word would be used to refer zero based indices", "author": "ssalonen", "createdAt": "2020-11-30T05:59:28Z", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "originalCommit": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODgxMw==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418813", "bodyText": "I'm a bit confused, too. The documentation states \"In accordance with the Modbus protocol, a register R is numbered as R - 1 when transmitted.\" page 5 https://www.meterbuy.com/fileadmin/user_upload/Data_sheets/120102_SAIA_-_Data_sheet_26-529_EN_DS_Energy-Meter-ALD1-with-Modbus.pdf\nIs this common to Modbus devices?", "author": "fwolter", "createdAt": "2020-11-30T08:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMTk4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r533931985", "bodyText": "In modbus binding terminology the register address refers to the address number on the wire, i.e. R-1.\nThis is typical source of confusion with Modbus. I even added section in the documentation clarifying the topic: https://www.openhab.org/addons/bindings/modbus/#comment-on-addressing", "author": "ssalonen", "createdAt": "2020-12-02T06:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxNjMzOA==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534316338", "bodyText": "I wasn't aware of this fine difference in wording. Changed it to FIRST_READ_REGISTER.", "author": "fwolter", "createdAt": "2020-12-02T16:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzMjc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534332762", "bodyText": "I would have suggested to keep everything zero based, similar to the other bindings \ud83d\ude05...adding simply a comment referencing device manual\nI think this is OK as well but perhaps good to add comment for posterity that this is 1-based register number, not the zero based address that goes on the wire.\nAlso note the same naming issue with channel definitions.", "author": "ssalonen", "createdAt": "2020-12-02T17:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDExNA==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534350114", "bodyText": "Actually I always use zero-based numbers where possible, but my goal here was to use the same numbers in the constants as in the device's documentation. I added a comment and changed the wording in the enum.", "author": "fwolter", "createdAt": "2020-12-02T17:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532364045", "bodyText": "Unnecessary? You could construct QuantityType using the DecimalType without intermediate conversion to float", "author": "ssalonen", "createdAt": "2020-11-30T06:02:54Z", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)", "originalCommit": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODg3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418876", "bodyText": "I need to apply a multiplier before converting it to QuantityType. Do you have a suggestion?", "author": "fwolter", "createdAt": "2020-11-30T08:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDgwNA==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532364804", "bodyText": "Same index as above?", "author": "ssalonen", "createdAt": "2020-11-30T06:05:35Z", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),", "originalCommit": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODkzMA==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418930", "bodyText": "They are for distinct Thing types. I added a comment.", "author": "fwolter", "createdAt": "2020-11-30T08:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDgwNA=="}], "type": "inlineReview"}, {"oid": "a23d7ac966dd01f82968e39ebe837f790f49422e", "url": "https://github.com/openhab/openhab-addons/commit/a23d7ac966dd01f82968e39ebe837f790f49422e", "message": "Incorporate review feedback #1\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-11-30T08:30:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDQ1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r533934450", "bodyText": "Would this work?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .map(DecimalType::floatValue)\n          \n          \n            \n                                    .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))\n          \n          \n            \n                                    .map(decimalState -> new QuantityType(decimalState.toBigDecimal().multiply(new BigDecimal(multiplier)), channel.getUnit()))\n          \n      \n    \n    \n  \n\nIt's a minor cosmetic change to the original but avoids floating point conversions.", "author": "ssalonen", "createdAt": "2020-12-02T06:54:19Z", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)\n+                        .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))", "originalCommit": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyNzU1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534327559", "bodyText": "Yes, I'm staying in the BigDecimal domain, now.", "author": "fwolter", "createdAt": "2020-12-02T16:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDQ1MA=="}], "type": "inlineReview"}, {"oid": "852005e12aa18549c18385f37c23e37de7914478", "url": "https://github.com/openhab/openhab-addons/commit/852005e12aa18549c18385f37c23e37de7914478", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-02T16:57:58Z", "type": "forcePushed"}, {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018", "url": "https://github.com/openhab/openhab-addons/commit/3ec282de6389adc506a1a865072f3a32ddbb4018", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-02T16:59:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534338186", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n          \n          \n            \n                PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n          \n          \n            \n                FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n          \n          \n            \n                VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n          \n          \n            \n                CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n          \n          \n            \n                ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n          \n          \n            \n                REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n          \n          \n            \n                POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n          \n          \n            \n            \n          \n          \n            \n                private BigDecimal multiplier;\n          \n          \n            \n                private int registerAddress;\n          \n          \n            \n                private ModbusConstants.ValueType type;\n          \n          \n            \n                private Unit<?> unit;\n          \n          \n            \n            \n          \n          \n            \n                private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n          \n          \n            \n                    this.multiplier = new BigDecimal(multiplier);\n          \n          \n            \n                TOTAL_ENERGY(\"0.01\", 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n          \n          \n            \n                PARTIAL_ENERGY(\"0.01\", 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n          \n          \n            \n                FEEDING_BACK_ENERGY(\"0.01\", 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n          \n          \n            \n                VOLTAGE(\"1\", 36, UINT16, SmartHomeUnits.VOLT),\n          \n          \n            \n                CURRENT(\"0.1\", 37, UINT16, SmartHomeUnits.AMPERE),\n          \n          \n            \n                ACTIVE_POWER(\"10\", 38, INT16, SmartHomeUnits.WATT),\n          \n          \n            \n                REACTIVE_POWER(\"10\", 39, INT16, SmartHomeUnits.VAR),\n          \n          \n            \n                POWER_FACTOR(\"0.01\", 40, UINT16, SmartHomeUnits.ONE);\n          \n          \n            \n            \n          \n          \n            \n                private BigDecimal multiplier;\n          \n          \n            \n                private int registerAddress;\n          \n          \n            \n                private ModbusConstants.ValueType type;\n          \n          \n            \n                private Unit<?> unit;\n          \n          \n            \n            \n          \n          \n            \n                private ALD1Registers(String multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n          \n          \n            \n                    this.multiplier = new BigDecimal(multiplier);\n          \n      \n    \n    \n  \n\nJust a cosmetic suggestion\nWith this change you would have \"neat\" finite numbers since big decimal operate in 10-base. See https://stackoverflow.com/questions/7408566/java-double-value-0-01-changes-to-0-009999999999999787\nFeel free to ignore this comment :)", "author": "ssalonen", "createdAt": "2020-12-02T17:12:03Z", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import java.math.BigDecimal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n+    VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n+    CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n+    ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n+    REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n+    POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n+\n+    private BigDecimal multiplier;\n+    private int registerAddress;\n+    private ModbusConstants.ValueType type;\n+    private Unit<?> unit;\n+\n+    private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n+        this.multiplier = new BigDecimal(multiplier);", "originalCommit": "3ec282de6389adc506a1a865072f3a32ddbb4018", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NjA1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534346059", "bodyText": "I understand, but it seems more odd to me to have these numeric constants as strings...", "author": "fwolter", "createdAt": "2020-12-02T17:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzkxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534373915", "bodyText": "Yup.. No way around the strings really if we want stay fully in BigDecimal domain.\nAs said, feel free to ignore this comment, makes little practical difference really", "author": "ssalonen", "createdAt": "2020-12-02T18:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng=="}], "type": "inlineReview"}, {"oid": "36993c5b60a7239747f5da29d812bcefe3bcbcb1", "url": "https://github.com/openhab/openhab-addons/commit/36993c5b60a7239747f5da29d812bcefe3bcbcb1", "message": "Fix OH version\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-23T16:58:08Z", "type": "forcePushed"}, {"oid": "1b3a863033875504604ab53d5307fb42474d1f87", "url": "https://github.com/openhab/openhab-addons/commit/1b3a863033875504604ab53d5307fb42474d1f87", "message": "[modbus.sbc] Initial contribution\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:42Z", "type": "commit"}, {"oid": "b79f818c7fa3375aac7e7380c44ecfbe375ffd20", "url": "https://github.com/openhab/openhab-addons/commit/b79f818c7fa3375aac7e7380c44ecfbe375ffd20", "message": "Incorporate review feedback #1\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:42Z", "type": "commit"}, {"oid": "b6b14219091ce0c93014a026679a974dc1debea5", "url": "https://github.com/openhab/openhab-addons/commit/b6b14219091ce0c93014a026679a974dc1debea5", "message": "Clean address\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:42Z", "type": "commit"}, {"oid": "c421e6b76537a754563f2db70b44dce6934088a8", "url": "https://github.com/openhab/openhab-addons/commit/c421e6b76537a754563f2db70b44dce6934088a8", "message": "Adoptions to Modbus PR\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:42Z", "type": "commit"}, {"oid": "e9239dd836f5c9e249962eff8b1274bd4e2b5374", "url": "https://github.com/openhab/openhab-addons/commit/e9239dd836f5c9e249962eff8b1274bd4e2b5374", "message": "Change wording\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:42Z", "type": "commit"}, {"oid": "b230f08d777f7e9b696b1039cd39e06d45e21730", "url": "https://github.com/openhab/openhab-addons/commit/b230f08d777f7e9b696b1039cd39e06d45e21730", "message": "Refactor float/BigDecimal\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:42Z", "type": "commit"}, {"oid": "762f2b858530e5e28effb42660db5edf5a29d7ab", "url": "https://github.com/openhab/openhab-addons/commit/762f2b858530e5e28effb42660db5edf5a29d7ab", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:43Z", "type": "commit"}, {"oid": "add8ed01e8ec2ccb9cb1a759ceaaddb2394f2a06", "url": "https://github.com/openhab/openhab-addons/commit/add8ed01e8ec2ccb9cb1a759ceaaddb2394f2a06", "message": "Change wording\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:43Z", "type": "commit"}, {"oid": "6b66f401bbca667b5e48659ea1bae8f230f067c7", "url": "https://github.com/openhab/openhab-addons/commit/6b66f401bbca667b5e48659ea1bae8f230f067c7", "message": "Add ability for TCP bridge. Apply moving of modbus transport to core. Apply renaming of Units. Remove feature file.\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:43Z", "type": "commit"}, {"oid": "5483bd2ef6c77638a35bb6b1c51621bf4a14beb3", "url": "https://github.com/openhab/openhab-addons/commit/5483bd2ef6c77638a35bb6b1c51621bf4a14beb3", "message": "Fix OH version\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:43Z", "type": "commit"}, {"oid": "1cecdc4346a55129b026f5ad372dfe2937587ab7", "url": "https://github.com/openhab/openhab-addons/commit/1cecdc4346a55129b026f5ad372dfe2937587ab7", "message": "Fixed signedness for the power factor\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:43Z", "type": "commit"}, {"oid": "76d358694a647f978a2b06610dde05d046e9134f", "url": "https://github.com/openhab/openhab-addons/commit/76d358694a647f978a2b06610dde05d046e9134f", "message": "Add TCP bridge\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T17:56:43Z", "type": "commit"}, {"oid": "bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "url": "https://github.com/openhab/openhab-addons/commit/bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "message": "Update license headers\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T18:01:27Z", "type": "commit"}, {"oid": "bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "url": "https://github.com/openhab/openhab-addons/commit/bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "message": "Update license headers\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2021-02-01T18:01:27Z", "type": "forcePushed"}]}