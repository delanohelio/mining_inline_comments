{"pr_number": 8534, "pr_title": "[revogi] Initial contribution - Resubmitted for OH3", "pr_createdAt": "2020-09-21T22:16:18Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8534", "timeline": [{"oid": "2d65492a26552c0ee5f180ec6aee828235fcceff", "url": "https://github.com/openhab/openhab-addons/commit/2d65492a26552c0ee5f180ec6aee828235fcceff", "message": "Rename binding and resubmit to OH3\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-09-21T22:06:44Z", "type": "commit"}, {"oid": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "url": "https://github.com/openhab/openhab-addons/commit/c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "message": "fix code style for some xml files\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-09-22T06:27:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzMwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499233305", "bodyText": "Did you insert the sapces by intention?", "author": "fwolter", "createdAt": "2020-10-04T10:57:37Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlBindingConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link RevogiSmartStripControlBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlBindingConstants {\n+\n+    private static final String BINDING_ID = \"revogi    \";", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3Mjg3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r503472873", "bodyText": "oops, of course not ;)", "author": "andibraeu", "createdAt": "2020-10-12T18:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzU1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499233557", "bodyText": "Logging to info should be used rarely. This could be debug.", "author": "fwolter", "createdAt": "2020-10-04T11:00:28Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzY1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499233654", "bodyText": "Can you handle the REFRESH command?", "author": "fwolter", "createdAt": "2020-10-04T11:01:44Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDIwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508060208", "bodyText": "now it is handled, does it mean anything else?", "author": "andibraeu", "createdAt": "2020-10-19T21:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzU2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508787561", "bodyText": "Looks good.", "author": "fwolter", "createdAt": "2020-10-20T19:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzg5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499233892", "bodyText": "Can this comment be removed?", "author": "fwolter", "createdAt": "2020-10-04T11:04:39Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMzk4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499233989", "bodyText": "You don't need to schedule another task if you use scheduleWithFixedDelay with an initial delay of 0 sec., as it is executed immediately.", "author": "fwolter", "createdAt": "2020-10-04T11:05:46Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:\n+        scheduler.execute(this::updateStripInformation);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNDEwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499234106", "bodyText": "Since you already cancel the task in dispose(), this check is not needed. The framework takes care that disposed() is called when the Thing is disabled.", "author": "fwolter", "createdAt": "2020-10-04T11:07:11Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:\n+        scheduler.execute(this::updateStripInformation);\n+        Runnable runnable = RevogiSmartStripControlHandler.this::updateStripInformation;\n+\n+        if (pollingJob == null || pollingJob.isCancelled()) {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNDE3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499234173", "bodyText": "Is there a reason that you stored the lambda to a local variable and not using it directly here?", "author": "fwolter", "createdAt": "2020-10-04T11:08:02Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:\n+        scheduler.execute(this::updateStripInformation);\n+        Runnable runnable = RevogiSmartStripControlHandler.this::updateStripInformation;\n+\n+        if (pollingJob == null || pollingJob.isCancelled()) {\n+            pollingJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.getPollInterval(), TimeUnit.SECONDS);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNDE4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499234189", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-10-04T11:08:21Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:\n+        scheduler.execute(this::updateStripInformation);\n+        Runnable runnable = RevogiSmartStripControlHandler.this::updateStripInformation;\n+\n+        if (pollingJob == null || pollingJob.isCancelled()) {\n+            pollingJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.getPollInterval(), TimeUnit.SECONDS);\n+        }\n+\n+        logger.debug(\"Finished initializing!\");", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNDMyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499234323", "bodyText": "Since config is Nullable, you need to store it to a local variable and check if it is null before using it. Same for below. Please check all compiler warnings.", "author": "fwolter", "createdAt": "2020-10-04T11:09:48Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNDM1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499234352", "bodyText": "No harm in canceling a task that is already cancelled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (pollingJob != null && !pollingJob.isCancelled()) {\n          \n          \n            \n                    if (pollingJob != null) {", "author": "fwolter", "createdAt": "2020-10-04T11:10:08Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:\n+        scheduler.execute(this::updateStripInformation);\n+        Runnable runnable = RevogiSmartStripControlHandler.this::updateStripInformation;\n+\n+        if (pollingJob == null || pollingJob.isCancelled()) {\n+            pollingJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.getPollInterval(), TimeUnit.SECONDS);\n+        }\n+\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (pollingJob != null && !pollingJob.isCancelled()) {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235204", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "author": "fwolter", "createdAt": "2020-10-04T11:19:18Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripDiscoveryService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.DiscoveryRawResponse;\n+import org.openhab.binding.revogi.internal.api.DiscoveryResponse;\n+import org.openhab.binding.revogi.internal.api.RevogiDiscoveryService;\n+import org.openhab.binding.revogi.internal.udp.DatagramSocketWrapper;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link RevogiSmartStripDiscoveryService} helps to discover new smart strips\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.revogismartstripcontrol\")\n+@NonNullByDefault\n+public class RevogiSmartStripDiscoveryService extends AbstractDiscoveryService {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Collections.singleton(RevogiSmartStripControlBindingConstants.SMART_STRIP_THING_TYPE));\n+\n+    private final RevogiDiscoveryService revogiDiscoveryService;\n+\n+    private static final int SEARCH_TIME = 10;", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTM2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235361", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withRepresentationProperty(RevogiSmartStripControlBindingConstants.SERIAL_NUMBER).build();\n          \n          \n            \n                                    .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER).build();", "author": "fwolter", "createdAt": "2020-10-04T11:21:11Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripDiscoveryService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.DiscoveryRawResponse;\n+import org.openhab.binding.revogi.internal.api.DiscoveryResponse;\n+import org.openhab.binding.revogi.internal.api.RevogiDiscoveryService;\n+import org.openhab.binding.revogi.internal.udp.DatagramSocketWrapper;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link RevogiSmartStripDiscoveryService} helps to discover new smart strips\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.revogismartstripcontrol\")\n+@NonNullByDefault\n+public class RevogiSmartStripDiscoveryService extends AbstractDiscoveryService {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Collections.singleton(RevogiSmartStripControlBindingConstants.SMART_STRIP_THING_TYPE));\n+\n+    private final RevogiDiscoveryService revogiDiscoveryService;\n+\n+    private static final int SEARCH_TIME = 10;\n+\n+    public RevogiSmartStripDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES, SEARCH_TIME);\n+        revogiDiscoveryService = new RevogiDiscoveryService(new UdpSenderService(new DatagramSocketWrapper()));\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THING_TYPES;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        CompletableFuture<List<DiscoveryRawResponse>> discoveryResponses = revogiDiscoveryService.discoverSmartStrips();\n+        discoveryResponses.thenAccept(this::applyDiscoveryResults);\n+    }\n+\n+    private void applyDiscoveryResults(final List<DiscoveryRawResponse> discoveryRawResponses) {\n+        discoveryRawResponses.forEach(response -> {\n+            ThingUID thingUID = getThingUID(response.getData());\n+            if (thingUID != null) {\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(Thing.PROPERTY_MODEL_ID, response.getData().getRegId());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, response.getData().getMacAddress());\n+                properties.put(Thing.PROPERTY_FIRMWARE_VERSION, response.getData().getVersion());\n+                properties.put(Thing.PROPERTY_SERIAL_NUMBER, response.getData().getSerialNumber());\n+                properties.put(\"ipAddress\", response.getIpAddress());\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                        .withThingType(RevogiSmartStripControlBindingConstants.SMART_STRIP_THING_TYPE)\n+                        .withProperties(properties)\n+                        .withRepresentationProperty(RevogiSmartStripControlBindingConstants.SERIAL_NUMBER).build();", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTUyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235528", "bodyText": "You could move the DTOs into a package called dto to avoid warnings about the missing NonNullByDefault annotation.", "author": "fwolter", "createdAt": "2020-10-04T11:23:14Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/DiscoveryRawResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+public class DiscoveryRawResponse {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTYxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235615", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompletableFuture<List<UdpResponse>> responses = udpSenderService.broadcastUpdDatagram(UDP_DISCOVERY_QUERY);\n          \n          \n            \n                    CompletableFuture<List<UdpResponse>> responses = udpSenderService.broadcastUdpDatagram(UDP_DISCOVERY_QUERY);", "author": "fwolter", "createdAt": "2020-10-04T11:24:12Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/RevogiDiscoveryService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.revogi.internal.udp.UdpResponse;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link RevogiDiscoveryService} helps to discover smart strips within your network\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiDiscoveryService {\n+    private static final String UDP_DISCOVERY_QUERY = \"00sw=all,,,;\";\n+    private final Logger logger = LoggerFactory.getLogger(RevogiDiscoveryService.class);\n+\n+    private final Gson gson = new GsonBuilder().create();\n+    private final UdpSenderService udpSenderService;\n+\n+    public RevogiDiscoveryService(UdpSenderService udpSenderService) {\n+        this.udpSenderService = udpSenderService;\n+    }\n+\n+    public CompletableFuture<List<DiscoveryRawResponse>> discoverSmartStrips() {\n+        CompletableFuture<List<UdpResponse>> responses = udpSenderService.broadcastUpdDatagram(UDP_DISCOVERY_QUERY);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTYzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235636", "bodyText": "See above. Logging to info.", "author": "fwolter", "createdAt": "2020-10-04T11:24:30Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/RevogiDiscoveryService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.revogi.internal.udp.UdpResponse;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link RevogiDiscoveryService} helps to discover smart strips within your network\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiDiscoveryService {\n+    private static final String UDP_DISCOVERY_QUERY = \"00sw=all,,,;\";\n+    private final Logger logger = LoggerFactory.getLogger(RevogiDiscoveryService.class);\n+\n+    private final Gson gson = new GsonBuilder().create();\n+    private final UdpSenderService udpSenderService;\n+\n+    public RevogiDiscoveryService(UdpSenderService udpSenderService) {\n+        this.udpSenderService = udpSenderService;\n+    }\n+\n+    public CompletableFuture<List<DiscoveryRawResponse>> discoverSmartStrips() {\n+        CompletableFuture<List<UdpResponse>> responses = udpSenderService.broadcastUpdDatagram(UDP_DISCOVERY_QUERY);\n+        return responses.thenApply(futureList -> {\n+            futureList.forEach(response -> logger.info(\"Received: {}\", response));", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTgwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235802", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-10-04T11:26:30Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/StatusService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.binding.revogi.internal.udp.UdpResponse;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link StatusService} contains methods to get a status of a Revogi SmartStrip\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StatusService {\n+\n+    private static final String UDP_DISCOVERY_QUERY = \"V3{\\\"sn\\\":\\\"%s\\\", \\\"cmd\\\": 90}\";\n+    public static final String VERSION_STRING = \"V3\";\n+    private final Logger logger = LoggerFactory.getLogger(StatusService.class);\n+\n+    private final Gson gson = new GsonBuilder().create();\n+    private final UdpSenderService udpSenderService;\n+\n+    public StatusService(UdpSenderService udpSenderService) {\n+        this.udpSenderService = udpSenderService;\n+    }\n+\n+    public CompletableFuture<Status> queryStatus(String serialNumber, String ipAddress) {\n+        CompletableFuture<List<UdpResponse>> responses;\n+        if (ipAddress.trim().isEmpty()) {\n+            responses = udpSenderService.broadcastUpdDatagram(String.format(UDP_DISCOVERY_QUERY, serialNumber));\n+        } else {\n+            responses = udpSenderService.sendMessage(String.format(UDP_DISCOVERY_QUERY, serialNumber), ipAddress);\n+        }\n+        return responses.thenApply(this::getStatus);\n+    }\n+\n+    @NotNull\n+    private Status getStatus(final List<UdpResponse> singleResponse) {\n+        singleResponse.forEach(response -> logger.info(\"Received: {}\", response.getAnswer()));", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMjQ1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r507732452", "bodyText": "I know what you mean, but on github above and below doesn't seem to work as expected ;)", "author": "andibraeu", "createdAt": "2020-10-19T13:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTkxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235910", "bodyText": "As the unchecked exception is logged by the framework, the additional logging could be removed. Same for below.", "author": "fwolter", "createdAt": "2020-10-04T11:27:39Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/SwitchService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.binding.revogi.internal.udp.UdpResponse;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link SwitchService} enables the binding to actually switch plugs on and of\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SwitchService {\n+\n+    private static final String UDP_DISCOVERY_QUERY = \"V3{\\\"sn\\\":\\\"%s\\\", \\\"cmd\\\": 20, \\\"port\\\": %d, \\\"state\\\": %d}\";\n+    private static final String VERSION_STRING = \"V3\";\n+    private final Logger logger = LoggerFactory.getLogger(SwitchService.class);\n+\n+    private final Gson gson = new GsonBuilder().create();\n+    private final UdpSenderService udpSenderService;\n+\n+    public SwitchService(UdpSenderService udpSenderService) {\n+        this.udpSenderService = udpSenderService;\n+    }\n+\n+    public CompletableFuture<SwitchResponse> switchPort(String serialNumber, String ipAddress, int port, int state) {\n+        if (state < 0 || state > 1) {\n+            logger.warn(\"state value is not valid: {}\", state);\n+            throw new IllegalArgumentException(\"state has to be 0 or 1\");", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNTkyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499235929", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-10-04T11:28:05Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/SwitchService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.binding.revogi.internal.udp.UdpResponse;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link SwitchService} enables the binding to actually switch plugs on and of\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SwitchService {\n+\n+    private static final String UDP_DISCOVERY_QUERY = \"V3{\\\"sn\\\":\\\"%s\\\", \\\"cmd\\\": 20, \\\"port\\\": %d, \\\"state\\\": %d}\";\n+    private static final String VERSION_STRING = \"V3\";\n+    private final Logger logger = LoggerFactory.getLogger(SwitchService.class);\n+\n+    private final Gson gson = new GsonBuilder().create();\n+    private final UdpSenderService udpSenderService;\n+\n+    public SwitchService(UdpSenderService udpSenderService) {\n+        this.udpSenderService = udpSenderService;\n+    }\n+\n+    public CompletableFuture<SwitchResponse> switchPort(String serialNumber, String ipAddress, int port, int state) {\n+        if (state < 0 || state > 1) {\n+            logger.warn(\"state value is not valid: {}\", state);\n+            throw new IllegalArgumentException(\"state has to be 0 or 1\");\n+        }\n+        if (port < 0) {\n+            logger.warn(\"port doesn't exist on device: {}\", port);\n+            throw new IllegalArgumentException(\"Given port doesn't exist\");\n+        }\n+\n+        CompletableFuture<List<UdpResponse>> responses;\n+        if (ipAddress.trim().isEmpty()) {\n+            responses = udpSenderService\n+                    .broadcastUpdDatagram(String.format(UDP_DISCOVERY_QUERY, serialNumber, port, state));\n+        } else {\n+            responses = udpSenderService.sendMessage(String.format(UDP_DISCOVERY_QUERY, serialNumber, port, state),\n+                    ipAddress);\n+        }\n+\n+        return responses.thenApply(this::getSwitchResponse);\n+    }\n+\n+    @NotNull\n+    private SwitchResponse getSwitchResponse(final List<UdpResponse> singleResponse) {\n+        singleResponse.forEach(response -> logger.info(\"Reveived {}\", response.getAnswer()));", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjA0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499236047", "bodyText": "This class is very similar to StatusService. You could move the redundant code to a super class.", "author": "fwolter", "createdAt": "2020-10-04T11:29:22Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/api/SwitchService.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.api;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.binding.revogi.internal.udp.UdpResponse;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link SwitchService} enables the binding to actually switch plugs on and of\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SwitchService {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5OTY0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r507799642", "bodyText": "I made a diff of these 2 classes, and in my opinion there are enough differences to leave it in 2 separate classes", "author": "andibraeu", "createdAt": "2020-10-19T14:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjExNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499236116", "bodyText": "You could append DTO to the class name to avoid the warnings about missing NonNullByDefault annotation.", "author": "fwolter", "createdAt": "2020-10-04T11:30:11Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpResponse.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import java.util.Objects;\n+\n+/**\n+ * The class {@link UdpResponse} represents udp reponse we expect\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+public class UdpResponse {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NDg2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r507754866", "bodyText": "thanks for that hint, I didn't know that", "author": "andibraeu", "createdAt": "2020-10-19T13:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjE5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499236193", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "author": "fwolter", "createdAt": "2020-10-04T11:31:01Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    public static final long TIMEOUT_BASE_VALUE = 800L;", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjc4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499236787", "bodyText": "Can you use the ScheduledExecutorService of the ThingHandler or the Thread of the DiscoveryService? I know this could result in quite extensive refactoring, but bindings should only create Threads if they really need to. E.g. listening on a socket permanently. Same for below.", "author": "fwolter", "createdAt": "2020-10-04T11:37:53Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    public static final long TIMEOUT_BASE_VALUE = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> broadcastUpdDatagram(String content) {\n+        List<String> allBroadcastAddresses = NetUtil.getAllBroadcastAddresses();\n+        CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+        Executors.newCachedThreadPool().submit(() -> future.complete(allBroadcastAddresses.stream().map(address -> {", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjg2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499236869", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);\n          \n          \n            \n                        logger.warn(\"Error sending message or reading anwser {}\", e.getMessage());", "author": "fwolter", "createdAt": "2020-10-04T11:38:48Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    public static final long TIMEOUT_BASE_VALUE = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> broadcastUpdDatagram(String content) {\n+        List<String> allBroadcastAddresses = NetUtil.getAllBroadcastAddresses();\n+        CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+        Executors.newCachedThreadPool().submit(() -> future.complete(allBroadcastAddresses.stream().map(address -> {\n+            try {\n+                return sendMessage(content, InetAddress.getByName(address));\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Could not find host with IP {}\", address);\n+                return new ArrayList<UdpResponse>();\n+            }\n+        }).flatMap(Collection::stream).distinct().collect(toList())));\n+        return future;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> sendMessage(String content, String ipAddress) {\n+        try {\n+            CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n+            Executors.newCachedThreadPool().submit(() -> future.complete(sendMessage(content, inetAddress)));\n+            return future;\n+        } catch (UnknownHostException e) {\n+            logger.warn(\"Could not find host with IP {}\", ipAddress);\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+    }\n+\n+    private List<UdpResponse> sendMessage(String content, InetAddress inetAddress) {\n+        logger.debug(\"Using address {}\", inetAddress);\n+        byte[] buf = content.getBytes(Charset.defaultCharset());\n+        DatagramPacket packet = new DatagramPacket(buf, buf.length, inetAddress, REVOGI_PORT);\n+        List<UdpResponse> responses = Collections.emptyList();\n+        try {\n+            datagramSocketWrapper.initSocket();\n+            datagramSocketWrapper.sendPacket(packet);\n+            responses = getUdpResponses();\n+        } catch (IOException e) {\n+            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNjkxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499236910", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-10-04T11:39:21Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    public static final long TIMEOUT_BASE_VALUE = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> broadcastUpdDatagram(String content) {\n+        List<String> allBroadcastAddresses = NetUtil.getAllBroadcastAddresses();\n+        CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+        Executors.newCachedThreadPool().submit(() -> future.complete(allBroadcastAddresses.stream().map(address -> {\n+            try {\n+                return sendMessage(content, InetAddress.getByName(address));\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Could not find host with IP {}\", address);\n+                return new ArrayList<UdpResponse>();\n+            }\n+        }).flatMap(Collection::stream).distinct().collect(toList())));\n+        return future;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> sendMessage(String content, String ipAddress) {\n+        try {\n+            CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n+            Executors.newCachedThreadPool().submit(() -> future.complete(sendMessage(content, inetAddress)));\n+            return future;\n+        } catch (UnknownHostException e) {\n+            logger.warn(\"Could not find host with IP {}\", ipAddress);\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+    }\n+\n+    private List<UdpResponse> sendMessage(String content, InetAddress inetAddress) {\n+        logger.debug(\"Using address {}\", inetAddress);\n+        byte[] buf = content.getBytes(Charset.defaultCharset());\n+        DatagramPacket packet = new DatagramPacket(buf, buf.length, inetAddress, REVOGI_PORT);\n+        List<UdpResponse> responses = Collections.emptyList();\n+        try {\n+            datagramSocketWrapper.initSocket();\n+            datagramSocketWrapper.sendPacket(packet);\n+            responses = getUdpResponses();\n+        } catch (IOException e) {\n+            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);\n+        } finally {\n+            datagramSocketWrapper.closeSocket();\n+        }\n+        return responses;\n+    }\n+\n+    private List<UdpResponse> getUdpResponses() {\n+        int timeoutCounter = 0;\n+        List<UdpResponse> list = new ArrayList<>();\n+        while (timeoutCounter < MAX_TIMEOUT_COUNT) {\n+            byte[] receivedBuf = new byte[512];\n+            DatagramPacket answer = new DatagramPacket(receivedBuf, receivedBuf.length);\n+            try {\n+                datagramSocketWrapper.receiveAnswer(answer);\n+            } catch (SocketTimeoutException | SocketException e) {\n+                timeoutCounter++;\n+                logger.info(\"Socket receive time no. {}\", timeoutCounter);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzAzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499237038", "bodyText": "When you change the threading to use the existing schedulers, better replace the sleep by scheduling another task to prevent blocking of the current task.", "author": "fwolter", "createdAt": "2020-10-04T11:40:45Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    public static final long TIMEOUT_BASE_VALUE = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> broadcastUpdDatagram(String content) {\n+        List<String> allBroadcastAddresses = NetUtil.getAllBroadcastAddresses();\n+        CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+        Executors.newCachedThreadPool().submit(() -> future.complete(allBroadcastAddresses.stream().map(address -> {\n+            try {\n+                return sendMessage(content, InetAddress.getByName(address));\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Could not find host with IP {}\", address);\n+                return new ArrayList<UdpResponse>();\n+            }\n+        }).flatMap(Collection::stream).distinct().collect(toList())));\n+        return future;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> sendMessage(String content, String ipAddress) {\n+        try {\n+            CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n+            Executors.newCachedThreadPool().submit(() -> future.complete(sendMessage(content, inetAddress)));\n+            return future;\n+        } catch (UnknownHostException e) {\n+            logger.warn(\"Could not find host with IP {}\", ipAddress);\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+    }\n+\n+    private List<UdpResponse> sendMessage(String content, InetAddress inetAddress) {\n+        logger.debug(\"Using address {}\", inetAddress);\n+        byte[] buf = content.getBytes(Charset.defaultCharset());\n+        DatagramPacket packet = new DatagramPacket(buf, buf.length, inetAddress, REVOGI_PORT);\n+        List<UdpResponse> responses = Collections.emptyList();\n+        try {\n+            datagramSocketWrapper.initSocket();\n+            datagramSocketWrapper.sendPacket(packet);\n+            responses = getUdpResponses();\n+        } catch (IOException e) {\n+            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);\n+        } finally {\n+            datagramSocketWrapper.closeSocket();\n+        }\n+        return responses;\n+    }\n+\n+    private List<UdpResponse> getUdpResponses() {\n+        int timeoutCounter = 0;\n+        List<UdpResponse> list = new ArrayList<>();\n+        while (timeoutCounter < MAX_TIMEOUT_COUNT) {\n+            byte[] receivedBuf = new byte[512];\n+            DatagramPacket answer = new DatagramPacket(receivedBuf, receivedBuf.length);\n+            try {\n+                datagramSocketWrapper.receiveAnswer(answer);\n+            } catch (SocketTimeoutException | SocketException e) {\n+                timeoutCounter++;\n+                logger.info(\"Socket receive time no. {}\", timeoutCounter);\n+                try {\n+                    TimeUnit.MILLISECONDS.sleep(timeoutCounter * TIMEOUT_BASE_VALUE);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0Mzg4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508043883", "bodyText": "I'm not sure what you mean what I should do. Somewhere I need to tell the software to wait a certain amount of time until it looks for udp responses again. I already refactored this part to not block the main thread.", "author": "andibraeu", "createdAt": "2020-10-19T20:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NjYzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508786636", "bodyText": "Your current implementation is blocking the current thread. You can avoid the blocking by using scheduler.scheduleWithFixedDelay(), which schedules the task after the specified time without blocking.", "author": "fwolter", "createdAt": "2020-10-20T19:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODI5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r510408299", "bodyText": "This part is already called within a scheduled thread (see line 77 or 92). I did this, because it was already requested to not block the main thread. Should I really add another scheduled layer there? It feels like the movie Inception then.", "author": "andibraeu", "createdAt": "2020-10-22T19:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMDMwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r511020303", "bodyText": "I just saw, that the timeout is quite short. I don't see any problems if you keep it as is.", "author": "fwolter", "createdAt": "2020-10-23T17:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzE1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499237156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);\n          \n          \n            \n                            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage());", "author": "fwolter", "createdAt": "2020-10-04T11:42:16Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    public static final long TIMEOUT_BASE_VALUE = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> broadcastUpdDatagram(String content) {\n+        List<String> allBroadcastAddresses = NetUtil.getAllBroadcastAddresses();\n+        CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+        Executors.newCachedThreadPool().submit(() -> future.complete(allBroadcastAddresses.stream().map(address -> {\n+            try {\n+                return sendMessage(content, InetAddress.getByName(address));\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Could not find host with IP {}\", address);\n+                return new ArrayList<UdpResponse>();\n+            }\n+        }).flatMap(Collection::stream).distinct().collect(toList())));\n+        return future;\n+    }\n+\n+    public CompletableFuture<List<UdpResponse>> sendMessage(String content, String ipAddress) {\n+        try {\n+            CompletableFuture<List<UdpResponse>> future = new CompletableFuture<>();\n+            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n+            Executors.newCachedThreadPool().submit(() -> future.complete(sendMessage(content, inetAddress)));\n+            return future;\n+        } catch (UnknownHostException e) {\n+            logger.warn(\"Could not find host with IP {}\", ipAddress);\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+    }\n+\n+    private List<UdpResponse> sendMessage(String content, InetAddress inetAddress) {\n+        logger.debug(\"Using address {}\", inetAddress);\n+        byte[] buf = content.getBytes(Charset.defaultCharset());\n+        DatagramPacket packet = new DatagramPacket(buf, buf.length, inetAddress, REVOGI_PORT);\n+        List<UdpResponse> responses = Collections.emptyList();\n+        try {\n+            datagramSocketWrapper.initSocket();\n+            datagramSocketWrapper.sendPacket(packet);\n+            responses = getUdpResponses();\n+        } catch (IOException e) {\n+            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);\n+        } finally {\n+            datagramSocketWrapper.closeSocket();\n+        }\n+        return responses;\n+    }\n+\n+    private List<UdpResponse> getUdpResponses() {\n+        int timeoutCounter = 0;\n+        List<UdpResponse> list = new ArrayList<>();\n+        while (timeoutCounter < MAX_TIMEOUT_COUNT) {\n+            byte[] receivedBuf = new byte[512];\n+            DatagramPacket answer = new DatagramPacket(receivedBuf, receivedBuf.length);\n+            try {\n+                datagramSocketWrapper.receiveAnswer(answer);\n+            } catch (SocketTimeoutException | SocketException e) {\n+                timeoutCounter++;\n+                logger.info(\"Socket receive time no. {}\", timeoutCounter);\n+                try {\n+                    TimeUnit.MILLISECONDS.sleep(timeoutCounter * TIMEOUT_BASE_VALUE);\n+                } catch (InterruptedException ex) {\n+                    logger.debug(\"Interrupted sleep\");\n+                    Thread.currentThread().interrupt();\n+                }\n+                continue;\n+            } catch (IOException e) {\n+                logger.warn(\"Error sending message or reading anwser {}\", e.getMessage(), e);", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzY2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r499237669", "bodyText": "Is mW a reasonable default value? You might want to use Watts here, as you also specified one position after the decimal point in the XML.", "author": "fwolter", "createdAt": "2020-10-04T11:47:50Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.Status;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing, StatusService statusService, SwitchService switchService) {\n+        super(thing);\n+        this.statusService = statusService;\n+        this.switchService = switchService;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.info(\"Sometring went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(config.getSerialNumber(), config.ipAddress, port, state);\n+        }\n+    }\n+\n+    private int convertOnOffTypeToState(Command command) {\n+        if (command == OnOffType.ON) {\n+            return 1;\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(RevogiSmartStripControlConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Example for background initialization:\n+        scheduler.execute(this::updateStripInformation);\n+        Runnable runnable = RevogiSmartStripControlHandler.this::updateStripInformation;\n+\n+        if (pollingJob == null || pollingJob.isCancelled()) {\n+            pollingJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.getPollInterval(), TimeUnit.SECONDS);\n+        }\n+\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\n+            pollingJob.cancel(true);\n+            pollingJob = null;\n+        }\n+    }\n+\n+    private void updateStripInformation() {\n+        if (config == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        CompletableFuture<Status> futureStatus = statusService.queryStatus(config.getSerialNumber(),\n+                config.getIpAddress());\n+        futureStatus.thenAccept(this::updatePlugStatus);\n+    }\n+\n+    private void updatePlugStatus(Status status) {\n+        if (status.isOnline()) {\n+            updateStatus(ThingStatus.ONLINE);\n+            handleAllPlugsInformation(status);\n+            handleSinglePlugInformation(status);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE,\n+                    \"Retrieved status code: \" + status.getResponseCode());\n+        }\n+    }\n+\n+    private void handleSinglePlugInformation(Status status) {\n+        for (int i = 0; i < status.getSwitchValue().size(); i++) {\n+            int plugNumber = i + 1;\n+            updateState(\"plug\" + plugNumber + \"#switch\", OnOffType.from(status.getSwitchValue().get(i).toString()));\n+            updateState(\"plug\" + plugNumber + \"#watt\", new QuantityType<>(status.getWatt().get(i), MILLI(WATT)));", "originalCommit": "c8c25a6ee6174259f1e6fc02b9387ecb59006dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MjI0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508062240", "bodyText": "the raw value I receive from the device is milliwatt", "author": "andibraeu", "createdAt": "2020-10-19T21:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTUzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508071536", "bodyText": "the change was suggested by @Hilbrand on the old PR", "author": "andibraeu", "createdAt": "2020-10-19T21:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDQ5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508790497", "bodyText": "You can do that. If I see correctly, the value is displayed in mW in the UI by default. So, I'd suggest to replace the %unit% in the XML file by W to achieve a reasonable default unit in the UI.", "author": "fwolter", "createdAt": "2020-10-20T19:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTQ3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508821476", "bodyText": "What's the source of the PDF in the doc folder?\nI got this document when I asked the revogi support on how to control this device if I don't want to use their AWS based app.\n\n\n\nAre you sure you may distribute this document? It's also uncommon to include a vendor documentation in the binding. Do you have the ability to store it somewhere else and reference it in the readme?\n\nI thought it was a good idea for tranparency reasons. But anyway, I can include it to my kotlin project and refernence the document here.\n(somehow this answer appears in a wrong thread now)", "author": "andibraeu", "createdAt": "2020-10-20T20:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3NzcxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r511577716", "bodyText": "units are done, too", "author": "andibraeu", "createdAt": "2020-10-25T10:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzNzY2OQ=="}], "type": "inlineReview"}, {"oid": "8b32b50b7e939468345538075a8b99bcb544f72c", "url": "https://github.com/openhab/openhab-addons/commit/8b32b50b7e939468345538075a8b99bcb544f72c", "message": "remove auto generated dot files\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-12T18:40:01Z", "type": "commit"}, {"oid": "0128186013eee9fe04ebe6eef73e3ca9fe838d27", "url": "https://github.com/openhab/openhab-addons/commit/0128186013eee9fe04ebe6eef73e3ca9fe838d27", "message": "more details for docs\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-12T18:43:59Z", "type": "commit"}, {"oid": "30bc0179da21ce9e927930ee2c181a479834e6be", "url": "https://github.com/openhab/openhab-addons/commit/30bc0179da21ce9e927930ee2c181a479834e6be", "message": "remove whitespace\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-12T18:46:21Z", "type": "commit"}, {"oid": "e4937e823b09c6802776a171909edd1ca0065865", "url": "https://github.com/openhab/openhab-addons/commit/e4937e823b09c6802776a171909edd1ca0065865", "message": "typos and names\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-12T18:49:41Z", "type": "commit"}, {"oid": "ce664dba18ca245422ec24f273bf9c4744a321f2", "url": "https://github.com/openhab/openhab-addons/commit/ce664dba18ca245422ec24f273bf9c4744a321f2", "message": "remove useless comment\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T12:10:47Z", "type": "commit"}, {"oid": "74bef3e4d80629f46747ed82490f83f6410e06b9", "url": "https://github.com/openhab/openhab-addons/commit/74bef3e4d80629f46747ed82490f83f6410e06b9", "message": "simplify scheduler handling\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T12:23:16Z", "type": "commit"}, {"oid": "c908d919945911ab823b29b556d5693137007cef", "url": "https://github.com/openhab/openhab-addons/commit/c908d919945911ab823b29b556d5693137007cef", "message": "typo\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T12:25:15Z", "type": "commit"}, {"oid": "fa49505c5a899aaea053df7178ed245aa30a5c80", "url": "https://github.com/openhab/openhab-addons/commit/fa49505c5a899aaea053df7178ed245aa30a5c80", "message": "better null handling\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T12:28:15Z", "type": "commit"}, {"oid": "63f7b1eeda692caee0c4ac0b3076c20564787f50", "url": "https://github.com/openhab/openhab-addons/commit/63f7b1eeda692caee0c4ac0b3076c20564787f50", "message": "constants usage\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T12:38:32Z", "type": "commit"}, {"oid": "1ec629e430dbcfa580e42777e2937c56c21a566a", "url": "https://github.com/openhab/openhab-addons/commit/1ec629e430dbcfa580e42777e2937c56c21a566a", "message": "adopt log level\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T12:50:50Z", "type": "commit"}, {"oid": "d20eec410089c0d0f9d7cebb5ad3b1a0aaf506c3", "url": "https://github.com/openhab/openhab-addons/commit/d20eec410089c0d0f9d7cebb5ad3b1a0aaf506c3", "message": "typo\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T13:14:33Z", "type": "commit"}, {"oid": "4aca614cd858aa0fdfc6736657548bd4a91c7f06", "url": "https://github.com/openhab/openhab-addons/commit/4aca614cd858aa0fdfc6736657548bd4a91c7f06", "message": "use DTO for dtos\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T13:43:37Z", "type": "commit"}, {"oid": "4fe461814467c77cea3afde0e82b52b3b169f517", "url": "https://github.com/openhab/openhab-addons/commit/4fe461814467c77cea3afde0e82b52b3b169f517", "message": "cleanup logging\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T13:52:58Z", "type": "commit"}, {"oid": "02d0c40ef8b266e6b60b57f6ca1ba6384f2974eb", "url": "https://github.com/openhab/openhab-addons/commit/02d0c40ef8b266e6b60b57f6ca1ba6384f2974eb", "message": "improve descriptions\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T14:22:43Z", "type": "commit"}, {"oid": "31125b92af3ab1096e2c7ec3167d3c715d127852", "url": "https://github.com/openhab/openhab-addons/commit/31125b92af3ab1096e2c7ec3167d3c715d127852", "message": "use existing thread pool\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T20:31:47Z", "type": "commit"}, {"oid": "694bd1411ef32b4a81e90387942c234ef44ad6a5", "url": "https://github.com/openhab/openhab-addons/commit/694bd1411ef32b4a81e90387942c234ef44ad6a5", "message": "support refreshType\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T21:01:18Z", "type": "commit"}, {"oid": "3fb3721b0206c54bc46d0badc2ed382972ca6d32", "url": "https://github.com/openhab/openhab-addons/commit/3fb3721b0206c54bc46d0badc2ed382972ca6d32", "message": "reduce build time\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-19T21:22:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5Njg1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508796857", "bodyText": "Please use the scheduler of the ThingHandler when invoked from there. When used in discovery, you can create your own thread pool. The name of the pool should be \"OH-binding-\".", "author": "fwolter", "createdAt": "2020-10-20T19:51:01Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    private static final long TIMEOUT_BASE_VALUE_SEC = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");", "originalCommit": "3fb3721b0206c54bc46d0badc2ed382972ca6d32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNTY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508815672", "bodyText": "So I need to pass through the scheduler instace of the ThingHandler to this service?\nI saw there's also a scheduler instance created by AbstractDiscoveryService. Maybe I should use that, in favour of creating a new scheduler for the discovery service?", "author": "andibraeu", "createdAt": "2020-10-20T20:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5Njg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNzY5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r508817697", "bodyText": "Yes. Indeed, the scheduler of AbstractDiscoveryService should be preferred.", "author": "fwolter", "createdAt": "2020-10-20T20:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5Njg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMTI2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r509001263", "bodyText": "An interrupt usually means that the thread should exit, so you should terminate as quick as possible instead of continuing your timeout loop.", "author": "cpmeister", "createdAt": "2020-10-21T05:37:46Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    private static final long TIMEOUT_BASE_VALUE_SEC = 800L;\n+    private static final int REVOGI_PORT = 8888;\n+\n+    private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n+    private final DatagramSocketWrapper datagramSocketWrapper;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private final long timeoutBaseValue;\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+        this.timeoutBaseValue = TIMEOUT_BASE_VALUE_SEC;\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper, long timeout) {\n+        this.timeoutBaseValue = timeout;\n+        this.datagramSocketWrapper = datagramSocketWrapper;\n+    }\n+\n+    public CompletableFuture<List<UdpResponseDTO>> broadcastUdpDatagram(String content) {\n+        List<String> allBroadcastAddresses = NetUtil.getAllBroadcastAddresses();\n+        CompletableFuture<List<UdpResponseDTO>> future = new CompletableFuture<>();\n+        scheduler.submit(() -> future.complete(allBroadcastAddresses.stream().map(address -> {\n+            try {\n+                return sendMessage(content, InetAddress.getByName(address));\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Could not find host with IP {}\", address);\n+                return new ArrayList<UdpResponseDTO>();\n+            }\n+        }).flatMap(Collection::stream).distinct().collect(toList())));\n+        return future;\n+    }\n+\n+    public CompletableFuture<List<UdpResponseDTO>> sendMessage(String content, String ipAddress) {\n+        try {\n+            CompletableFuture<List<UdpResponseDTO>> future = new CompletableFuture<>();\n+            InetAddress inetAddress = InetAddress.getByName(ipAddress);\n+            scheduler.submit(() -> future.complete(sendMessage(content, inetAddress)));\n+            return future;\n+        } catch (UnknownHostException e) {\n+            logger.warn(\"Could not find host with IP {}\", ipAddress);\n+            return CompletableFuture.completedFuture(Collections.emptyList());\n+        }\n+    }\n+\n+    private List<UdpResponseDTO> sendMessage(String content, InetAddress inetAddress) {\n+        logger.debug(\"Using address {}\", inetAddress);\n+        byte[] buf = content.getBytes(Charset.defaultCharset());\n+        DatagramPacket packet = new DatagramPacket(buf, buf.length, inetAddress, REVOGI_PORT);\n+        List<UdpResponseDTO> responses = Collections.emptyList();\n+        try {\n+            datagramSocketWrapper.initSocket();\n+            datagramSocketWrapper.sendPacket(packet);\n+            responses = getUdpResponses();\n+        } catch (IOException e) {\n+            logger.warn(\"Error sending message or reading anwser {}\", e.getMessage());\n+        } finally {\n+            datagramSocketWrapper.closeSocket();\n+        }\n+        return responses;\n+    }\n+\n+    private List<UdpResponseDTO> getUdpResponses() {\n+        int timeoutCounter = 0;\n+        List<UdpResponseDTO> list = new ArrayList<>();\n+        while (timeoutCounter < MAX_TIMEOUT_COUNT) {\n+            byte[] receivedBuf = new byte[512];\n+            DatagramPacket answer = new DatagramPacket(receivedBuf, receivedBuf.length);\n+            try {\n+                datagramSocketWrapper.receiveAnswer(answer);\n+            } catch (SocketTimeoutException | SocketException e) {\n+                timeoutCounter++;\n+                try {\n+                    TimeUnit.MILLISECONDS.sleep(timeoutCounter * timeoutBaseValue);\n+                } catch (InterruptedException ex) {\n+                    logger.debug(\"Interrupted sleep\");\n+                    Thread.currentThread().interrupt();", "originalCommit": "3fb3721b0206c54bc46d0badc2ed382972ca6d32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxMTU2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r510411561", "bodyText": "In that case it's the sleep thread that would be interrupted. I see no reason to not continue the loop itself.", "author": "andibraeu", "createdAt": "2020-10-22T19:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNjY1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r510506652", "bodyText": "An interrupt is less a \"get back to work\" and more of a \"stop all work and go home\".", "author": "cpmeister", "createdAt": "2020-10-22T23:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512194023", "bodyText": "I agree with @cpmeister. A good approach to finish the thread is to simply throw the exception and handle it top level. Another option would be to return an empty list.\nThe thread is interrupted e.g. when the JVM is shutdown.", "author": "fwolter", "createdAt": "2020-10-26T18:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzIwMw==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512263203", "bodyText": "it's now implemented in a way it returns everything we have so far.", "author": "andibraeu", "createdAt": "2020-10-26T20:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMTI2Mw=="}], "type": "inlineReview"}, {"oid": "ef360d241abe9a328ec35357670c24aaf38f8b69", "url": "https://github.com/openhab/openhab-addons/commit/ef360d241abe9a328ec35357670c24aaf38f8b69", "message": "use existing scheduler instances\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-21T10:29:15Z", "type": "commit"}, {"oid": "e920b7773bd1e2836f562bfa75385043b75c0cf9", "url": "https://github.com/openhab/openhab-addons/commit/e920b7773bd1e2836f562bfa75385043b75c0cf9", "message": "remove support document\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-22T19:47:58Z", "type": "commit"}, {"oid": "117ad55953ce53dc6a88ca9ca1f000bb4a0267d9", "url": "https://github.com/openhab/openhab-addons/commit/117ad55953ce53dc6a88ca9ca1f000bb4a0267d9", "message": "remove support document\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-22T19:50:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNzEwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r510507109", "bodyText": "Is this constructor used anymore?", "author": "cpmeister", "createdAt": "2020-10-22T23:09:24Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -56,17 +56,19 @@\n \n     private final Logger logger = LoggerFactory.getLogger(UdpSenderService.class);\n     private final DatagramSocketWrapper datagramSocketWrapper;\n-    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private final ScheduledExecutorService scheduler;\n     private final long timeoutBaseValue;\n \n-    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper) {\n+    public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper, ScheduledExecutorService scheduler) {\n         this.timeoutBaseValue = TIMEOUT_BASE_VALUE_SEC;\n         this.datagramSocketWrapper = datagramSocketWrapper;\n+        this.scheduler = scheduler;\n     }\n \n     public UdpSenderService(DatagramSocketWrapper datagramSocketWrapper, long timeout) {\n         this.timeoutBaseValue = timeout;\n         this.datagramSocketWrapper = datagramSocketWrapper;\n+        this.scheduler = ThreadPoolManager.getScheduledPool(\"test pool\");\n     }", "originalCommit": "ef360d241abe9a328ec35357670c24aaf38f8b69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MjgwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r510652800", "bodyText": "yes, for testing", "author": "andibraeu", "createdAt": "2020-10-23T06:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNzEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMDUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r511020511", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long TIMEOUT_BASE_VALUE_SEC = 800L;\n          \n          \n            \n                private static final long TIMEOUT_BASE_VALUE_MS = 800L;", "author": "fwolter", "createdAt": "2020-10-23T17:04:25Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/UdpSenderService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.InetAddress;\n+import java.net.SocketException;\n+import java.net.SocketTimeoutException;\n+import java.net.UnknownHostException;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.net.NetUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link UdpSenderService} is responsible for sending and receiving udp packets\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UdpSenderService {\n+\n+    /**\n+     * Limit timeout waiting time, as we have to deal with UDP\n+     *\n+     * How it works: for every loop, we'll wait a bit longer, so the timeout counter is multiplied with the timeout base\n+     * value. Let max timeout count be 2 and timeout base value 800, then we'll have a maximum of loops of 3, waiting\n+     * 800ms in the 1st loop, 1600ms in the 2nd loop and 2400ms in the third loop.\n+     */\n+    private static final int MAX_TIMEOUT_COUNT = 2;\n+    private static final long TIMEOUT_BASE_VALUE_SEC = 800L;", "originalCommit": "117ad55953ce53dc6a88ca9ca1f000bb4a0267d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9957baf2768ae0fabb4581e6949a575a5ef459d", "url": "https://github.com/openhab/openhab-addons/commit/d9957baf2768ae0fabb4581e6949a575a5ef459d", "message": "constant naming\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-23T19:20:57Z", "type": "commit"}, {"oid": "f2eaafb547231d250bade8a83ad62c8fca3dddbc", "url": "https://github.com/openhab/openhab-addons/commit/f2eaafb547231d250bade8a83ad62c8fca3dddbc", "message": "set better units for channels\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-25T10:29:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NDIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512184219", "bodyText": "Please add the NonNullByDefault annotation. You could initialize the fields with default values to avoid the null checks.", "author": "fwolter", "createdAt": "2020-10-26T18:35:53Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlConfiguration.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+/**\n+ * The {@link RevogiSmartStripControlConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+public class RevogiSmartStripControlConfiguration {", "originalCommit": "f2eaafb547231d250bade8a83ad62c8fca3dddbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTQ2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512255468", "bodyText": "done", "author": "andibraeu", "createdAt": "2020-10-26T20:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NDIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NjgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512186815", "bodyText": "The compiler is more intelligent on local variables. Therefore, the Nullable could be removed.", "author": "fwolter", "createdAt": "2020-10-26T18:39:56Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.StatusDTO;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.binding.revogi.internal.udp.DatagramSocketWrapper;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing) {\n+        super(thing);\n+        UdpSenderService udpSenderService = new UdpSenderService(new DatagramSocketWrapper(), scheduler);\n+        this.statusService = new StatusService(udpSenderService);\n+        this.switchService = new SwitchService(udpSenderService);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.debug(\"Something went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        @Nullable", "originalCommit": "f2eaafb547231d250bade8a83ad62c8fca3dddbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTU0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512255541", "bodyText": "done", "author": "andibraeu", "createdAt": "2020-10-26T20:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NjgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4Nzk2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512187964", "bodyText": "Would be good to make the access to the config parameters consistent. You could remove the getter and access the fields directly.", "author": "fwolter", "createdAt": "2020-10-26T18:41:38Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandler.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import static org.openhab.core.library.unit.MetricPrefix.MILLI;\n+import static org.openhab.core.library.unit.SmartHomeUnits.AMPERE;\n+import static org.openhab.core.library.unit.SmartHomeUnits.WATT;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.StatusDTO;\n+import org.openhab.binding.revogi.internal.api.StatusService;\n+import org.openhab.binding.revogi.internal.api.SwitchService;\n+import org.openhab.binding.revogi.internal.udp.DatagramSocketWrapper;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RevogiSmartStripControlHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RevogiSmartStripControlHandler.class);\n+    private final StatusService statusService;\n+    private final SwitchService switchService;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable RevogiSmartStripControlConfiguration config;\n+\n+    public RevogiSmartStripControlHandler(Thing thing) {\n+        super(thing);\n+        UdpSenderService udpSenderService = new UdpSenderService(new DatagramSocketWrapper(), scheduler);\n+        this.statusService = new StatusService(udpSenderService);\n+        this.switchService = new SwitchService(udpSenderService);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case RevogiSmartStripControlBindingConstants.PLUG_1_SWITCH:\n+                switchPlug(command, 1);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_2_SWITCH:\n+                switchPlug(command, 2);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_3_SWITCH:\n+                switchPlug(command, 3);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_4_SWITCH:\n+                switchPlug(command, 4);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_5_SWITCH:\n+                switchPlug(command, 5);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.PLUG_6_SWITCH:\n+                switchPlug(command, 6);\n+                break;\n+            case RevogiSmartStripControlBindingConstants.ALL_PLUGS:\n+                switchPlug(command, 0);\n+                break;\n+            default:\n+                logger.debug(\"Something went wrong, we've got a message for {}\", channelUID.getId());\n+        }\n+    }\n+\n+    private void switchPlug(Command command, int port) {\n+        @Nullable\n+        RevogiSmartStripControlConfiguration localConfig = this.config;\n+        if (localConfig == null) {\n+            logger.warn(\"No config available, config object was null\");\n+            return;\n+        }\n+        if (command instanceof OnOffType) {\n+            int state = convertOnOffTypeToState(command);\n+            switchService.switchPort(localConfig.getSerialNumber(), localConfig.ipAddress, port, state);", "originalCommit": "f2eaafb547231d250bade8a83ad62c8fca3dddbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MDYxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512250610", "bodyText": "hm, in my code the usage is consistent. Everywhere else the properties are accressed directly?", "author": "andibraeu", "createdAt": "2020-10-26T20:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4Nzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MTczOA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512251738", "bodyText": "In the first argument of switchPort() a getter is used and in the second argument, the field is accessed directly.", "author": "fwolter", "createdAt": "2020-10-26T20:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4Nzk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5Njk2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512196968", "bodyText": "datagramSocket needs to be stored to a local variable to fix the compiler warning. Same for below.", "author": "fwolter", "createdAt": "2020-10-26T18:56:56Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/udp/DatagramSocketWrapper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal.udp;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.SocketException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DatagramSocketWrapper} wraps Java's DatagramSocket for better testing\n+ * UdpSenderService\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DatagramSocketWrapper {\n+\n+    @Nullable\n+    private DatagramSocket datagramSocket;\n+\n+    public void initSocket() throws SocketException {\n+        closeSocket();\n+        datagramSocket = new DatagramSocket();\n+        datagramSocket.setBroadcast(true);\n+        datagramSocket.setSoTimeout(3);\n+    }\n+\n+    public void closeSocket() {\n+        if (datagramSocket != null && !datagramSocket.isClosed()) {\n+            datagramSocket.close();", "originalCommit": "f2eaafb547231d250bade8a83ad62c8fca3dddbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MDI3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512290274", "bodyText": "done, even if I don't understand why that's a problem for the compiler. I still need to male a null check for the local variable. So in my opinion it's just more boilerplate code to write.", "author": "andibraeu", "createdAt": "2020-10-26T21:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5Njk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0OTg1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r512449850", "bodyText": "The compiler complains because datagramSocket is a field and could theoretically be modified by another thread exactly between the null check and the access in the next line.", "author": "fwolter", "createdAt": "2020-10-27T06:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5Njk2OA=="}], "type": "inlineReview"}, {"oid": "26391a678df36387d7488a2afe6421f8c7c72eac", "url": "https://github.com/openhab/openhab-addons/commit/26391a678df36387d7488a2afe6421f8c7c72eac", "message": "unify thing name\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T20:24:35Z", "type": "commit"}, {"oid": "ba374f4b4decfd7fa3e9779c006f8a171ba374e1", "url": "https://github.com/openhab/openhab-addons/commit/ba374f4b4decfd7fa3e9779c006f8a171ba374e1", "message": "xml formatting\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T20:32:38Z", "type": "commit"}, {"oid": "e88daa78de6c08fa99b5f5749bbf5f257fb389ea", "url": "https://github.com/openhab/openhab-addons/commit/e88daa78de6c08fa99b5f5749bbf5f257fb389ea", "message": "null annotations\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T20:37:01Z", "type": "commit"}, {"oid": "ed78b81fa92af31e1ef081fd39ac92239ba4b442", "url": "https://github.com/openhab/openhab-addons/commit/ed78b81fa92af31e1ef081fd39ac92239ba4b442", "message": "use oldschool way of property access\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T20:44:14Z", "type": "commit"}, {"oid": "2e80ebf7f2ce46ba4e2d5fb4a1b3cb9349eccdd2", "url": "https://github.com/openhab/openhab-addons/commit/2e80ebf7f2ce46ba4e2d5fb4a1b3cb9349eccdd2", "message": "return everything we have so far on thread interruption\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T20:52:42Z", "type": "commit"}, {"oid": "0d09f4c13059ebc3debead7de490995e73471043", "url": "https://github.com/openhab/openhab-addons/commit/0d09f4c13059ebc3debead7de490995e73471043", "message": "local copied variables\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T21:48:30Z", "type": "commit"}, {"oid": "50daf734e3cd839fee9e95e086470214d6a74648", "url": "https://github.com/openhab/openhab-addons/commit/50daf734e3cd839fee9e95e086470214d6a74648", "message": "Merge branch 'main' into revogismartstrip-oh3", "committedDate": "2020-10-26T21:53:04Z", "type": "commit"}, {"oid": "40f190a5bb54bdf6c60ec5a5292d15596558baa6", "url": "https://github.com/openhab/openhab-addons/commit/40f190a5bb54bdf6c60ec5a5292d15596558baa6", "message": "fix merge problem\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-26T22:02:03Z", "type": "commit"}, {"oid": "06e77c036a7eb682dd553cbfb5bb898c9af19043", "url": "https://github.com/openhab/openhab-addons/commit/06e77c036a7eb682dd553cbfb5bb898c9af19043", "message": "style checked\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-27T07:02:45Z", "type": "commit"}, {"oid": "a0bd98b66c585b5bd67bc4589358a9f4279561a8", "url": "https://github.com/openhab/openhab-addons/commit/a0bd98b66c585b5bd67bc4589358a9f4279561a8", "message": "extend readme\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-10-30T08:58:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzE0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r516437148", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.revogismartstripcontrol\")\n          \n          \n            \n            @Component(service = DiscoveryService.class, configurationPid = \"discovery.revogi\")", "author": "cpmeister", "createdAt": "2020-11-03T05:40:52Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripDiscoveryService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.DiscoveryRawResponseDTO;\n+import org.openhab.binding.revogi.internal.api.DiscoveryResponseDTO;\n+import org.openhab.binding.revogi.internal.api.RevogiDiscoveryService;\n+import org.openhab.binding.revogi.internal.udp.DatagramSocketWrapper;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link RevogiSmartStripDiscoveryService} helps to discover new smart strips\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.revogismartstripcontrol\")", "originalCommit": "a0bd98b66c585b5bd67bc4589358a9f4279561a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzM3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r516437374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(configurationPid = \"binding.revogismartstripcontrol\", service = ThingHandlerFactory.class)\n          \n          \n            \n            @Component(configurationPid = \"binding.revogi\", service = ThingHandlerFactory.class)", "author": "cpmeister", "createdAt": "2020-11-03T05:42:04Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripControlHandlerFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link RevogiSmartStripControlHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.revogismartstripcontrol\", service = ThingHandlerFactory.class)", "originalCommit": "a0bd98b66c585b5bd67bc4589358a9f4279561a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzQ0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r516437445", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n          \n          \n            \n                        Collections.singleton(RevogiSmartStripControlBindingConstants.SMART_STRIP_THING_TYPE));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(RevogiSmartStripControlBindingConstants.SMART_STRIP_THING_TYPE);", "author": "cpmeister", "createdAt": "2020-11-03T05:42:27Z", "path": "bundles/org.openhab.binding.revogi/src/main/java/org/openhab/binding/revogi/internal/RevogiSmartStripDiscoveryService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.revogi.internal;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.revogi.internal.api.DiscoveryRawResponseDTO;\n+import org.openhab.binding.revogi.internal.api.DiscoveryResponseDTO;\n+import org.openhab.binding.revogi.internal.api.RevogiDiscoveryService;\n+import org.openhab.binding.revogi.internal.udp.DatagramSocketWrapper;\n+import org.openhab.binding.revogi.internal.udp.UdpSenderService;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link RevogiSmartStripDiscoveryService} helps to discover new smart strips\n+ *\n+ * @author Andi Br\u00e4u - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.revogismartstripcontrol\")\n+@NonNullByDefault\n+public class RevogiSmartStripDiscoveryService extends AbstractDiscoveryService {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Collections.singleton(RevogiSmartStripControlBindingConstants.SMART_STRIP_THING_TYPE));", "originalCommit": "a0bd98b66c585b5bd67bc4589358a9f4279561a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MDgyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r516560826", "bodyText": "that one is done by mvn spotless:apply. The build would fail if I do this change.", "author": "andibraeu", "createdAt": "2020-11-03T10:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2Mzc5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r516563790", "bodyText": "The suggested change is to remove \"new HashSet<>(\".", "author": "fwolter", "createdAt": "2020-11-03T10:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MjcyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8534#discussion_r516572728", "bodyText": "ah, I see", "author": "andibraeu", "createdAt": "2020-11-03T10:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNzQ0NQ=="}], "type": "inlineReview"}, {"oid": "a4bd40468b796457f497e18d879ddc346e84c64d", "url": "https://github.com/openhab/openhab-addons/commit/a4bd40468b796457f497e18d879ddc346e84c64d", "message": "discovery configuration\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-11-03T10:32:42Z", "type": "commit"}, {"oid": "a1692de34797a49ab6d0d22aa08ccced231e511d", "url": "https://github.com/openhab/openhab-addons/commit/a1692de34797a49ab6d0d22aa08ccced231e511d", "message": "applying strange formatting rules\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-11-03T10:33:15Z", "type": "commit"}, {"oid": "6f12aa715f1124985a7fa6eb7ef572203c975168", "url": "https://github.com/openhab/openhab-addons/commit/6f12aa715f1124985a7fa6eb7ef572203c975168", "message": "remove redundant definition\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-11-03T10:45:11Z", "type": "commit"}, {"oid": "99c6c7c7b8dab1dc5922c844e514421be632f442", "url": "https://github.com/openhab/openhab-addons/commit/99c6c7c7b8dab1dc5922c844e514421be632f442", "message": "handler configuration\n\nSigned-off-by: Andreas Br\u00e4u <ab@andi95.de>", "committedDate": "2020-11-03T10:47:27Z", "type": "commit"}]}