{"pr_number": 7546, "pr_title": "[coolmasternet] General tidy up of addon", "pr_createdAt": "2020-05-04T07:18:06Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7546", "timeline": [{"oid": "99117c7c662c211f5a327390272dc5e7c79d125b", "url": "https://github.com/openhab/openhab-addons/commit/99117c7c662c211f5a327390272dc5e7c79d125b", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove shadow local variables\n* Fix JavaDocs (use proper syntax and tags)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Shorten lines to improve readability\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-04T07:35:23Z", "type": "forcePushed"}, {"oid": "f19904982bff03c26186edcb9d8ff8cb2236d58d", "url": "https://github.com/openhab/openhab-addons/commit/f19904982bff03c26186edcb9d8ff8cb2236d58d", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Shorten lines to improve readability\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-05T01:59:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMTE4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420311185", "bodyText": "This message wouldn't be very helpful for debugging", "author": "cpmeister", "createdAt": "2020-05-05T18:15:09Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -162,52 +170,55 @@ public boolean isConnected() {\n                         return response.toString();\n                     }\n                     response.append(line);\n-                    if (response.length() > 100) {\n-                        throw new CoolMasterClientError(String.format(\"Unexpected response to command %s\", command));\n+                    if (response.length() > MAX_VALID_LINE_LENGTH) {\n+                        throw new CoolMasterClientError(\"Command '%s' received unexpected response '%s'\", command,\n+                                response);\n                     }\n                 }\n-            } catch (SocketTimeoutException e) {\n+            } catch (final SocketTimeoutException ste) {\n                 if (response.length() == 0) {\n-                    throw new CoolMasterClientError(String.format(\"No response to command %s\", command));\n+                    throw new CoolMasterClientError(\"Command '%s' received no response\", command);\n                 }\n-                throw new CoolMasterClientError(String.format(\"Command '%s' got error '%s'\", command, response));\n-            } catch (IOException e) {\n-                logger.error(\"{}\", e.getLocalizedMessage(), e);\n-                return null;\n+                throw new CoolMasterClientError(\"Command '%s' received truncated response '%s'\", command, response);\n             }\n         }\n     }\n \n-    /*\n-     * Verify that the client socket is connected and responding, and try to reconnect if possible.\n-     * May block for 1-2 seconds.\n+    /**\n+     * Ensure a client socket is connected and ready to receive commands.\n+     *\n+     * <p>\n+     * This method may block for up to {@link #SOCKET_TIMEOUT_MS}, depending on\n+     * the state of the connection. This usual time is {@link #SINK_TIMEOUT_MS}.\n+     *\n+     * <p>\n+     * Return of this method guarantees the socket is ready to receive a\n+     * command. If the socket could not be made ready, an exception is raised.\n      *\n-     * Throws CoolMasterNetClientError if there is a connection problem.\n+     * @throws IOException if the socket could not be made ready\n      */\n-    @SuppressWarnings(\"resource\")\n-    private void checkConnection() throws CoolMasterClientError {\n+    private void checkConnection() throws IOException {\n         synchronized (socketLock) {\n-            ControllerConfiguration config = getConfigAs(ControllerConfiguration.class);\n             try {\n-                if (!isConnected()) {\n+                // Longer sink time used for initial connection welcome > prompt\n+                final int sinkTime;\n+                if (isConnected()) {\n+                    sinkTime = SINK_TIMEOUT_MS;\n+                } else {\n+                    sinkTime = SOCKET_TIMEOUT_MS;\n                     connect();\n-                    if (!isConnected()) {\n-                        throw new CoolMasterClientError(\n-                                String.format(\"Failed to connect to %s:%s\", config.host, config.port));\n-                    }\n                 }\n \n-                Socket localSocket = socket;\n-                if (localSocket == null) {\n-                    throw new CoolMasterClientError(\n-                            String.format(\"Failed to connect to %s:%s\", config.host, config.port));\n+                final Socket socket = this.socket;\n+                if (socket == null) {\n+                    throw new IllegalStateException(\"Socket verified earlier\");", "originalCommit": "f19904982bff03c26186edcb9d8ff8cb2236d58d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzM3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420313374", "bodyText": "It would be more optimal to save the ControllerConfiguration to a field during initialization so you don't need to create it each time. Creating the configuration class is a costly procedure.", "author": "cpmeister", "createdAt": "2020-05-05T18:18:37Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -239,57 +250,80 @@ private void checkConnection() throws CoolMasterClientError {\n                     throw new IOException(\"Unexpected data following prompt\");\n                 }\n                 logger.trace(\"Buffer empty following solicited > prompt\");\n-            } catch (IOException e) {\n+            } catch (final IOException ioe) {\n                 disconnect();\n-                logger.debug(\"{}\", e.getLocalizedMessage(), e);\n-                throw new CoolMasterClientError(\n-                        String.format(\"No response from CoolMasterNet unit %s:%s\", config.host, config.port));\n+                throw ioe;\n             }\n         }\n     }\n \n+    /**\n+     * Opens the socket.\n+     *\n+     * <p>\n+     * Guarantees to either open the socket or thrown an exception.\n+     *\n+     * @throws IOException if the socket could not be opened\n+     */\n     private void connect() throws IOException {\n         synchronized (socketLock) {\n-            ControllerConfiguration config = getConfigAs(ControllerConfiguration.class);\n+            final ControllerConfiguration cfg = getConfigAs(ControllerConfiguration.class);\n             try {\n-                Socket localSocket = new Socket();\n-                localSocket.connect(new InetSocketAddress(config.host, config.port), SOCKET_TIMEOUT);\n-                localSocket.setSoTimeout(SOCKET_TIMEOUT);\n-                socket = localSocket;\n-            } catch (UnknownHostException e) {\n-                logger.error(\"Unknown socket host: {}\", config.host);\n-                socket = null;\n-            } catch (SocketException e) {\n-                logger.error(\"Failed to connect to {}:{}: {}\", config.host, config.port, e.getLocalizedMessage(), e);\n+                logger.debug(\"Connecting to {}:{}\", cfg.host, cfg.port);\n+                final Socket socket = new Socket();\n+                socket.connect(new InetSocketAddress(cfg.host, cfg.port), SOCKET_TIMEOUT_MS);\n+                socket.setSoTimeout(SOCKET_TIMEOUT_MS);\n+                this.socket = socket;\n+            } catch (final IOException ioe) {\n                 socket = null;\n+                throw ioe;\n             }\n         }\n     }\n \n+    /**\n+     * Attempts to disconnect the socket.\n+     *\n+     * <p>\n+     * Disconnection failure is not considered an error, although will be logged.\n+     */\n     private void disconnect() {\n         synchronized (socketLock) {\n-            Socket localSocket = socket;\n-            if (localSocket != null) {\n+            final ControllerConfiguration cfg = getConfigAs(ControllerConfiguration.class);", "originalCommit": "f19904982bff03c26186edcb9d8ff8cb2236d58d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjU0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420316547", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nDowngrade this to a warning instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, ioe.getMessage());\n          \n          \n            \n                        logger.warn(\"Failed to set channel {} -> {}: {}\", channel, command, ioe.getMessage());", "author": "cpmeister", "createdAt": "2020-05-05T18:24:03Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -49,107 +49,130 @@\n \n     private final Logger logger = LoggerFactory.getLogger(HVACHandler.class);\n \n-    public HVACHandler(Thing thing) {\n+    public HVACHandler(final Thing thing) {\n         super(thing);\n     }\n \n+    /**\n+     * Get the controller handler for this bridge.\n+     *\n+     * <p>\n+     * This method does not raise any exception, but it will update the Thing\n+     * status if there is an issue obtaining the handler.\n+     *\n+     * <p>\n+     * The returned handler may or may not be connected.\n+     *\n+     * @return the controller handler or null if the controller is unavailable\n+     */\n     private @Nullable ControllerHandler getControllerHandler() {\n-        Bridge bridge = getBridge();\n-        return bridge != null ? (ControllerHandler) bridge.getHandler() : null;\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"CoolMasterNet Controller bridge not set\");\n+            return null;\n+        }\n+\n+        return (ControllerHandler) bridge.getHandler();\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String channel = channelUID.getId();\n-        ControllerHandler controller = getControllerHandler();\n+    public void handleCommand(final ChannelUID channelUID, final Command command) {\n+        final String uid = getConfigAs(HVACConfiguration.class).uid;\n+        final String channel = channelUID.getId();\n+        final ControllerHandler controller = getControllerHandler();\n+\n+        if (controller == null || !controller.isConnected()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n+        }\n \n         try {\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"CoolMasterNet Controller bridge not set\");\n-            } else if (controller == null || !controller.isConnected()) {\n-                ControllerConfiguration config = bridge.getConfiguration().as(ControllerConfiguration.class);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        String.format(\"Could not connect to CoolMasterNet unit %s:%d\", config.host, config.port));\n-            } else {\n-                if (channel.endsWith(ON) && command instanceof OnOffType) {\n-                    OnOffType onoff = (OnOffType) command;\n-                    controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n-                } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n-                    DecimalType temp = (DecimalType) command;\n-                    controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n-                } else if (channel.endsWith(MODE) && command instanceof StringType) {\n-                    /* the mode value in the command is the actual CoolMasterNet protocol command */\n-                    controller.sendCommand(String.format(\"%s %s\", command, uid));\n-                } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n-                } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n-                } else if (command instanceof RefreshType) {\n-                    refresh();\n-                }\n+            if (channel.endsWith(ON) && command instanceof OnOffType) {\n+                final OnOffType onoff = (OnOffType) command;\n+                controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n+            } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n+                final DecimalType temp = (DecimalType) command;\n+                controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n+            } else if (channel.endsWith(MODE) && command instanceof StringType) {\n+                // the mode value in the command is the actual CoolMasterNet protocol command\n+                controller.sendCommand(String.format(\"%s %s\", command, uid));\n+            } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n+            } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n+            } else if (command instanceof RefreshType) {\n+                refresh();\n             }\n-        } catch (CoolMasterClientError e) {\n-            logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, e.getMessage());\n+        } catch (final IOException ioe) {\n+            logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, ioe.getMessage());", "originalCommit": "f19904982bff03c26186edcb9d8ff8cb2236d58d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjY2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420316667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"Failed to refresh\", ioe);\n          \n          \n            \n                        logger.warn(\"Failed to refresh\", ioe);", "author": "cpmeister", "createdAt": "2020-05-05T18:24:14Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -49,107 +49,130 @@\n \n     private final Logger logger = LoggerFactory.getLogger(HVACHandler.class);\n \n-    public HVACHandler(Thing thing) {\n+    public HVACHandler(final Thing thing) {\n         super(thing);\n     }\n \n+    /**\n+     * Get the controller handler for this bridge.\n+     *\n+     * <p>\n+     * This method does not raise any exception, but it will update the Thing\n+     * status if there is an issue obtaining the handler.\n+     *\n+     * <p>\n+     * The returned handler may or may not be connected.\n+     *\n+     * @return the controller handler or null if the controller is unavailable\n+     */\n     private @Nullable ControllerHandler getControllerHandler() {\n-        Bridge bridge = getBridge();\n-        return bridge != null ? (ControllerHandler) bridge.getHandler() : null;\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"CoolMasterNet Controller bridge not set\");\n+            return null;\n+        }\n+\n+        return (ControllerHandler) bridge.getHandler();\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String channel = channelUID.getId();\n-        ControllerHandler controller = getControllerHandler();\n+    public void handleCommand(final ChannelUID channelUID, final Command command) {\n+        final String uid = getConfigAs(HVACConfiguration.class).uid;\n+        final String channel = channelUID.getId();\n+        final ControllerHandler controller = getControllerHandler();\n+\n+        if (controller == null || !controller.isConnected()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n+        }\n \n         try {\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"CoolMasterNet Controller bridge not set\");\n-            } else if (controller == null || !controller.isConnected()) {\n-                ControllerConfiguration config = bridge.getConfiguration().as(ControllerConfiguration.class);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        String.format(\"Could not connect to CoolMasterNet unit %s:%d\", config.host, config.port));\n-            } else {\n-                if (channel.endsWith(ON) && command instanceof OnOffType) {\n-                    OnOffType onoff = (OnOffType) command;\n-                    controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n-                } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n-                    DecimalType temp = (DecimalType) command;\n-                    controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n-                } else if (channel.endsWith(MODE) && command instanceof StringType) {\n-                    /* the mode value in the command is the actual CoolMasterNet protocol command */\n-                    controller.sendCommand(String.format(\"%s %s\", command, uid));\n-                } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n-                } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n-                } else if (command instanceof RefreshType) {\n-                    refresh();\n-                }\n+            if (channel.endsWith(ON) && command instanceof OnOffType) {\n+                final OnOffType onoff = (OnOffType) command;\n+                controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n+            } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n+                final DecimalType temp = (DecimalType) command;\n+                controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n+            } else if (channel.endsWith(MODE) && command instanceof StringType) {\n+                // the mode value in the command is the actual CoolMasterNet protocol command\n+                controller.sendCommand(String.format(\"%s %s\", command, uid));\n+            } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n+            } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n+            } else if (command instanceof RefreshType) {\n+                refresh();\n             }\n-        } catch (CoolMasterClientError e) {\n-            logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, e.getMessage());\n+        } catch (final IOException ioe) {\n+            logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, ioe.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getLocalizedMessage());\n         }\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet HVAC handler...\");\n-        updateStatus(ThingStatus.ONLINE);\n+        updateStatus(ThingStatus.UNKNOWN);\n     }\n \n-    /* Update this HVAC unit's properties from the controller */\n+    /**\n+     * Update this HVAC unit's properties from the controller.\n+     */\n     public void refresh() {\n-        String on = query(\"o\");\n-        if (on != null) {\n-            updateState(ON, \"1\".equals(on) ? OnOffType.ON : OnOffType.OFF);\n+        final ControllerHandler controller = getControllerHandler();\n+        if (controller == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n         }\n \n-        String currentTemp = query(\"a\");\n-        if (currentTemp != null) {\n-            updateState(CURRENT_TEMP, new DecimalType(currentTemp));\n-        }\n+        try {\n+            final String on = query(controller, \"o\");\n+            if (on != null) {\n+                updateState(ON, \"1\".equals(on) ? OnOffType.ON : OnOffType.OFF);\n+            }\n \n-        String setTemp = query(\"t\");\n-        if (setTemp != null) {\n-            updateState(SET_TEMP, new DecimalType(setTemp));\n-        }\n+            final String currentTemp = query(controller, \"a\");\n+            if (currentTemp != null) {\n+                updateState(CURRENT_TEMP, new DecimalType(currentTemp));\n+            }\n \n-        String mode = MODE_NUM_TO_STR.get(query(\"m\"));\n-        if (mode != null) {\n-            updateState(MODE, new StringType(mode));\n-        }\n+            final String setTemp = query(controller, \"t\");\n+            if (setTemp != null) {\n+                updateState(SET_TEMP, new DecimalType(setTemp));\n+            }\n \n-        String louvre = query(\"s\");\n-        if (louvre != null) {\n-            updateState(LOUVRE, new StringType(louvre));\n-        }\n+            final String mode = MODE_NUM_TO_STR.get(query(controller, \"m\"));\n+            if (mode != null) {\n+                updateState(MODE, new StringType(mode));\n+            }\n \n-        String fan = FAN_NUM_TO_STR.get(query(\"f\"));\n-        if (fan != null) {\n-            updateState(FAN_SPEED, new StringType(fan));\n-        }\n-    }\n+            final String louvre = query(controller, \"s\");\n+            if (louvre != null) {\n+                updateState(LOUVRE, new StringType(louvre));\n+            }\n \n-    private @Nullable String query(String queryChar) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String command = String.format(\"query %s %s\", uid, queryChar);\n-        ControllerHandler controller = getControllerHandler();\n-        if (controller != null) {\n-            try {\n-                return controller.sendCommand(command);\n-            } catch (CoolMasterClientError e) {\n-                logger.error(\"Query '{}' failed: {}\", command, e.getMessage());\n+            final String fan = FAN_NUM_TO_STR.get(query(controller, \"f\"));\n+            if (fan != null) {\n+                updateState(FAN_SPEED, new StringType(fan));\n             }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final IOException ioe) {\n+            logger.error(\"Failed to refresh\", ioe);", "originalCommit": "f19904982bff03c26186edcb9d8ff8cb2236d58d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNzE5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420317194", "bodyText": "Please move static fields to the top of the class.", "author": "cpmeister", "createdAt": "2020-05-05T18:25:09Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -166,18 +189,18 @@ public void refresh() {\n         MODE_NUM_TO_STR.put(\"5\", \"fan\");\n     }\n \n-    /*\n-     * The CoolMasterNet protocol's query command returns numbers 0-5\n-     * for fan speed, but the protocol's fan command (& matching\n-     * binding command) use single-letter abbreviations.\n+    /**\n+     * The CoolMasterNet protocol's query command returns numbers 0-5 for fan\n+     * speed, but the protocol's fan command (and matching binding command) use\n+     * single-letter abbreviations.\n      */\n     private static final Map<String, @Nullable String> FAN_NUM_TO_STR;\n     static {\n         FAN_NUM_TO_STR = new HashMap<>();\n-        FAN_NUM_TO_STR.put(\"0\", \"l\"); /* Low */\n-        FAN_NUM_TO_STR.put(\"1\", \"m\"); /* Medium */\n-        FAN_NUM_TO_STR.put(\"2\", \"h\"); /* High */\n-        FAN_NUM_TO_STR.put(\"3\", \"a\"); /* Auto */\n-        FAN_NUM_TO_STR.put(\"4\", \"t\"); /* Top */\n+        FAN_NUM_TO_STR.put(\"0\", \"l\"); // Low\n+        FAN_NUM_TO_STR.put(\"1\", \"m\"); // Medium\n+        FAN_NUM_TO_STR.put(\"2\", \"h\"); // High\n+        FAN_NUM_TO_STR.put(\"3\", \"a\"); // Auto\n+        FAN_NUM_TO_STR.put(\"4\", \"t\"); // Top\n     }", "originalCommit": "f19904982bff03c26186edcb9d8ff8cb2236d58d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4ae2e4762c3f29b1e2a39e3045cf45097bc367e", "url": "https://github.com/openhab/openhab-addons/commit/d4ae2e4762c3f29b1e2a39e3045cf45097bc367e", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Shorten lines to improve readability\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Use appropriate logging levels\n* Cache configuration to reduce lookup costs\n* Move static constants and initialisation to start of compilation unit\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-06T04:02:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Mzg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420543852", "bodyText": "The controller might already be offline due to not having a bridge.", "author": "cpmeister", "createdAt": "2020-05-06T04:51:00Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -47,137 +47,160 @@\n @NonNullByDefault\n public class HVACHandler extends BaseThingHandler {\n \n+    /**\n+     * The CoolMasterNet protocol's query command returns numbers 0-5 for fan\n+     * speed, but the protocol's fan command (and matching binding command) use\n+     * single-letter abbreviations.\n+     */\n+    private static final Map<String, @Nullable String> FAN_NUM_TO_STR;\n+\n+    /**\n+     * The CoolMasterNet query command returns numbers 0-5 for operation modes,\n+     * but these don't map to any mode you can set on the device, so we use this\n+     * lookup table.\n+     */\n+    private static final Map<String, @Nullable String> MODE_NUM_TO_STR;\n+\n+    static {\n+        FAN_NUM_TO_STR = new HashMap<>();\n+        FAN_NUM_TO_STR.put(\"0\", \"l\"); // low\n+        FAN_NUM_TO_STR.put(\"1\", \"m\"); // medium\n+        FAN_NUM_TO_STR.put(\"2\", \"h\"); // high\n+        FAN_NUM_TO_STR.put(\"3\", \"a\"); // auto\n+        FAN_NUM_TO_STR.put(\"4\", \"t\"); // top\n+\n+        MODE_NUM_TO_STR = new HashMap<>();\n+        MODE_NUM_TO_STR.put(\"0\", \"cool\");\n+        MODE_NUM_TO_STR.put(\"1\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"2\", \"auto\");\n+        MODE_NUM_TO_STR.put(\"3\", \"dry\");\n+        // 4=='haux' but this mode doesn't have an equivalent command to set it\n+        MODE_NUM_TO_STR.put(\"4\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"5\", \"fan\");\n+    }\n+\n     private final Logger logger = LoggerFactory.getLogger(HVACHandler.class);\n \n-    public HVACHandler(Thing thing) {\n+    public HVACHandler(final Thing thing) {\n         super(thing);\n     }\n \n+    /**\n+     * Get the controller handler for this bridge.\n+     *\n+     * <p>\n+     * This method does not raise any exception, but it will update the Thing\n+     * status if there is an issue obtaining the handler.\n+     *\n+     * <p>\n+     * The returned handler may or may not be connected.\n+     *\n+     * @return the controller handler or null if the controller is unavailable\n+     */\n     private @Nullable ControllerHandler getControllerHandler() {\n-        Bridge bridge = getBridge();\n-        return bridge != null ? (ControllerHandler) bridge.getHandler() : null;\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"CoolMasterNet Controller bridge not set\");\n+            return null;\n+        }\n+\n+        return (ControllerHandler) bridge.getHandler();\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String channel = channelUID.getId();\n-        ControllerHandler controller = getControllerHandler();\n+    public void handleCommand(final ChannelUID channelUID, final Command command) {\n+        final String uid = getConfigAs(HVACConfiguration.class).uid;\n+        final String channel = channelUID.getId();\n+        final ControllerHandler controller = getControllerHandler();\n+\n+        if (controller == null || !controller.isConnected()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n+        }\n \n         try {\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"CoolMasterNet Controller bridge not set\");\n-            } else if (controller == null || !controller.isConnected()) {\n-                ControllerConfiguration config = bridge.getConfiguration().as(ControllerConfiguration.class);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        String.format(\"Could not connect to CoolMasterNet unit %s:%d\", config.host, config.port));\n-            } else {\n-                if (channel.endsWith(ON) && command instanceof OnOffType) {\n-                    OnOffType onoff = (OnOffType) command;\n-                    controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n-                } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n-                    DecimalType temp = (DecimalType) command;\n-                    controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n-                } else if (channel.endsWith(MODE) && command instanceof StringType) {\n-                    /* the mode value in the command is the actual CoolMasterNet protocol command */\n-                    controller.sendCommand(String.format(\"%s %s\", command, uid));\n-                } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n-                } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n-                } else if (command instanceof RefreshType) {\n-                    refresh();\n-                }\n+            if (channel.endsWith(ON) && command instanceof OnOffType) {\n+                final OnOffType onoff = (OnOffType) command;\n+                controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n+            } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n+                final DecimalType temp = (DecimalType) command;\n+                controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n+            } else if (channel.endsWith(MODE) && command instanceof StringType) {\n+                // the mode value in the command is the actual CoolMasterNet protocol command\n+                controller.sendCommand(String.format(\"%s %s\", command, uid));\n+            } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n+            } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n+            } else if (command instanceof RefreshType) {\n+                refresh();\n             }\n-        } catch (CoolMasterClientError e) {\n-            logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, e.getMessage());\n+        } catch (final IOException ioe) {\n+            logger.warn(\"Failed to set channel {} -> {}: {}\", channel, command, ioe.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getLocalizedMessage());\n         }\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet HVAC handler...\");\n-        updateStatus(ThingStatus.ONLINE);\n+        updateStatus(ThingStatus.UNKNOWN);\n     }\n \n-    /* Update this HVAC unit's properties from the controller */\n+    /**\n+     * Update this HVAC unit's properties from the controller.\n+     */\n     public void refresh() {\n-        String on = query(\"o\");\n-        if (on != null) {\n-            updateState(ON, \"1\".equals(on) ? OnOffType.ON : OnOffType.OFF);\n+        final ControllerHandler controller = getControllerHandler();\n+        if (controller == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");", "originalCommit": "d4ae2e4762c3f29b1e2a39e3045cf45097bc367e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420545492", "bodyText": "Same suggestion as my previous review.", "author": "cpmeister", "createdAt": "2020-05-06T04:58:25Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -47,137 +47,160 @@\n @NonNullByDefault\n public class HVACHandler extends BaseThingHandler {\n \n+    /**\n+     * The CoolMasterNet protocol's query command returns numbers 0-5 for fan\n+     * speed, but the protocol's fan command (and matching binding command) use\n+     * single-letter abbreviations.\n+     */\n+    private static final Map<String, @Nullable String> FAN_NUM_TO_STR;\n+\n+    /**\n+     * The CoolMasterNet query command returns numbers 0-5 for operation modes,\n+     * but these don't map to any mode you can set on the device, so we use this\n+     * lookup table.\n+     */\n+    private static final Map<String, @Nullable String> MODE_NUM_TO_STR;\n+\n+    static {\n+        FAN_NUM_TO_STR = new HashMap<>();\n+        FAN_NUM_TO_STR.put(\"0\", \"l\"); // low\n+        FAN_NUM_TO_STR.put(\"1\", \"m\"); // medium\n+        FAN_NUM_TO_STR.put(\"2\", \"h\"); // high\n+        FAN_NUM_TO_STR.put(\"3\", \"a\"); // auto\n+        FAN_NUM_TO_STR.put(\"4\", \"t\"); // top\n+\n+        MODE_NUM_TO_STR = new HashMap<>();\n+        MODE_NUM_TO_STR.put(\"0\", \"cool\");\n+        MODE_NUM_TO_STR.put(\"1\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"2\", \"auto\");\n+        MODE_NUM_TO_STR.put(\"3\", \"dry\");\n+        // 4=='haux' but this mode doesn't have an equivalent command to set it\n+        MODE_NUM_TO_STR.put(\"4\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"5\", \"fan\");\n+    }\n+\n     private final Logger logger = LoggerFactory.getLogger(HVACHandler.class);\n \n-    public HVACHandler(Thing thing) {\n+    public HVACHandler(final Thing thing) {\n         super(thing);\n     }\n \n+    /**\n+     * Get the controller handler for this bridge.\n+     *\n+     * <p>\n+     * This method does not raise any exception, but it will update the Thing\n+     * status if there is an issue obtaining the handler.\n+     *\n+     * <p>\n+     * The returned handler may or may not be connected.\n+     *\n+     * @return the controller handler or null if the controller is unavailable\n+     */\n     private @Nullable ControllerHandler getControllerHandler() {\n-        Bridge bridge = getBridge();\n-        return bridge != null ? (ControllerHandler) bridge.getHandler() : null;\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"CoolMasterNet Controller bridge not set\");\n+            return null;\n+        }\n+\n+        return (ControllerHandler) bridge.getHandler();\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String channel = channelUID.getId();\n-        ControllerHandler controller = getControllerHandler();\n+    public void handleCommand(final ChannelUID channelUID, final Command command) {\n+        final String uid = getConfigAs(HVACConfiguration.class).uid;\n+        final String channel = channelUID.getId();\n+        final ControllerHandler controller = getControllerHandler();\n+\n+        if (controller == null || !controller.isConnected()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n+        }\n \n         try {\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"CoolMasterNet Controller bridge not set\");\n-            } else if (controller == null || !controller.isConnected()) {\n-                ControllerConfiguration config = bridge.getConfiguration().as(ControllerConfiguration.class);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        String.format(\"Could not connect to CoolMasterNet unit %s:%d\", config.host, config.port));\n-            } else {\n-                if (channel.endsWith(ON) && command instanceof OnOffType) {\n-                    OnOffType onoff = (OnOffType) command;\n-                    controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n-                } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n-                    DecimalType temp = (DecimalType) command;\n-                    controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n-                } else if (channel.endsWith(MODE) && command instanceof StringType) {\n-                    /* the mode value in the command is the actual CoolMasterNet protocol command */\n-                    controller.sendCommand(String.format(\"%s %s\", command, uid));\n-                } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n-                } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n-                } else if (command instanceof RefreshType) {\n-                    refresh();\n-                }\n+            if (channel.endsWith(ON) && command instanceof OnOffType) {\n+                final OnOffType onoff = (OnOffType) command;\n+                controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n+            } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n+                final DecimalType temp = (DecimalType) command;\n+                controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n+            } else if (channel.endsWith(MODE) && command instanceof StringType) {\n+                // the mode value in the command is the actual CoolMasterNet protocol command\n+                controller.sendCommand(String.format(\"%s %s\", command, uid));\n+            } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n+            } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n+            } else if (command instanceof RefreshType) {\n+                refresh();\n             }\n-        } catch (CoolMasterClientError e) {\n-            logger.error(\"Failed to set channel {} -> {}: {}\", channel, command, e.getMessage());\n+        } catch (final IOException ioe) {\n+            logger.warn(\"Failed to set channel {} -> {}: {}\", channel, command, ioe.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getLocalizedMessage());\n         }\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet HVAC handler...\");\n-        updateStatus(ThingStatus.ONLINE);\n+        updateStatus(ThingStatus.UNKNOWN);\n     }\n \n-    /* Update this HVAC unit's properties from the controller */\n+    /**\n+     * Update this HVAC unit's properties from the controller.\n+     */\n     public void refresh() {\n-        String on = query(\"o\");\n-        if (on != null) {\n-            updateState(ON, \"1\".equals(on) ? OnOffType.ON : OnOffType.OFF);\n+        final ControllerHandler controller = getControllerHandler();\n+        if (controller == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n         }\n \n-        String currentTemp = query(\"a\");\n-        if (currentTemp != null) {\n-            updateState(CURRENT_TEMP, new DecimalType(currentTemp));\n-        }\n+        try {\n+            final String on = query(controller, \"o\");\n+            if (on != null) {\n+                updateState(ON, \"1\".equals(on) ? OnOffType.ON : OnOffType.OFF);\n+            }\n \n-        String setTemp = query(\"t\");\n-        if (setTemp != null) {\n-            updateState(SET_TEMP, new DecimalType(setTemp));\n-        }\n+            final String currentTemp = query(controller, \"a\");\n+            if (currentTemp != null) {\n+                updateState(CURRENT_TEMP, new DecimalType(currentTemp));\n+            }\n \n-        String mode = MODE_NUM_TO_STR.get(query(\"m\"));\n-        if (mode != null) {\n-            updateState(MODE, new StringType(mode));\n-        }\n+            final String setTemp = query(controller, \"t\");\n+            if (setTemp != null) {\n+                updateState(SET_TEMP, new DecimalType(setTemp));\n+            }\n \n-        String louvre = query(\"s\");\n-        if (louvre != null) {\n-            updateState(LOUVRE, new StringType(louvre));\n-        }\n+            final String mode = MODE_NUM_TO_STR.get(query(controller, \"m\"));\n+            if (mode != null) {\n+                updateState(MODE, new StringType(mode));\n+            }\n \n-        String fan = FAN_NUM_TO_STR.get(query(\"f\"));\n-        if (fan != null) {\n-            updateState(FAN_SPEED, new StringType(fan));\n-        }\n-    }\n+            final String louvre = query(controller, \"s\");\n+            if (louvre != null) {\n+                updateState(LOUVRE, new StringType(louvre));\n+            }\n \n-    private @Nullable String query(String queryChar) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String command = String.format(\"query %s %s\", uid, queryChar);\n-        ControllerHandler controller = getControllerHandler();\n-        if (controller != null) {\n-            try {\n-                return controller.sendCommand(command);\n-            } catch (CoolMasterClientError e) {\n-                logger.error(\"Query '{}' failed: {}\", command, e.getMessage());\n+            final String fan = FAN_NUM_TO_STR.get(query(controller, \"f\"));\n+            if (fan != null) {\n+                updateState(FAN_SPEED, new StringType(fan));\n             }\n-        }\n-        return null; /* passing back null sets an invalid value on the channel */\n-    }\n \n-    /*\n-     * The CoolMasterNet query command returns numbers 0-5 for operation modes,\n-     * but these don't map to any mode you can set on the device, so we use this\n-     * lookup table.\n-     */\n-    private static final Map<String, @Nullable String> MODE_NUM_TO_STR;\n-    static {\n-        MODE_NUM_TO_STR = new HashMap<>();\n-        MODE_NUM_TO_STR.put(\"0\", \"cool\");\n-        MODE_NUM_TO_STR.put(\"1\", \"heat\");\n-        MODE_NUM_TO_STR.put(\"2\", \"auto\");\n-        MODE_NUM_TO_STR.put(\"3\", \"dry\");\n-        /* 4=='haux' but this mode doesn't have an equivalent command to set it! */\n-        MODE_NUM_TO_STR.put(\"4\", \"heat\");\n-        MODE_NUM_TO_STR.put(\"5\", \"fan\");\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final IOException ioe) {\n+            logger.warn(\"Failed to refresh\", ioe);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getLocalizedMessage());\n+        }\n     }\n \n-    /*\n-     * The CoolMasterNet protocol's query command returns numbers 0-5\n-     * for fan speed, but the protocol's fan command (& matching\n-     * binding command) use single-letter abbreviations.\n-     */\n-    private static final Map<String, @Nullable String> FAN_NUM_TO_STR;\n-    static {\n-        FAN_NUM_TO_STR = new HashMap<>();\n-        FAN_NUM_TO_STR.put(\"0\", \"l\"); /* Low */\n-        FAN_NUM_TO_STR.put(\"1\", \"m\"); /* Medium */\n-        FAN_NUM_TO_STR.put(\"2\", \"h\"); /* High */\n-        FAN_NUM_TO_STR.put(\"3\", \"a\"); /* Auto */\n-        FAN_NUM_TO_STR.put(\"4\", \"t\"); /* Top */\n+    private @Nullable String query(final ControllerHandler controller, final String queryChar)\n+            throws IOException, CoolMasterClientError {\n+        final String uid = getConfigAs(HVACConfiguration.class).uid;", "originalCommit": "d4ae2e4762c3f29b1e2a39e3045cf45097bc367e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTg2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420545868", "bodyText": "It would be better to handle per-channel refreshes since the UI could spam refreshes for multiple channels at once causing you to make a lot of unnecessary queries and channel updates.", "author": "cpmeister", "createdAt": "2020-05-06T04:59:52Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -47,137 +47,160 @@\n @NonNullByDefault\n public class HVACHandler extends BaseThingHandler {\n \n+    /**\n+     * The CoolMasterNet protocol's query command returns numbers 0-5 for fan\n+     * speed, but the protocol's fan command (and matching binding command) use\n+     * single-letter abbreviations.\n+     */\n+    private static final Map<String, @Nullable String> FAN_NUM_TO_STR;\n+\n+    /**\n+     * The CoolMasterNet query command returns numbers 0-5 for operation modes,\n+     * but these don't map to any mode you can set on the device, so we use this\n+     * lookup table.\n+     */\n+    private static final Map<String, @Nullable String> MODE_NUM_TO_STR;\n+\n+    static {\n+        FAN_NUM_TO_STR = new HashMap<>();\n+        FAN_NUM_TO_STR.put(\"0\", \"l\"); // low\n+        FAN_NUM_TO_STR.put(\"1\", \"m\"); // medium\n+        FAN_NUM_TO_STR.put(\"2\", \"h\"); // high\n+        FAN_NUM_TO_STR.put(\"3\", \"a\"); // auto\n+        FAN_NUM_TO_STR.put(\"4\", \"t\"); // top\n+\n+        MODE_NUM_TO_STR = new HashMap<>();\n+        MODE_NUM_TO_STR.put(\"0\", \"cool\");\n+        MODE_NUM_TO_STR.put(\"1\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"2\", \"auto\");\n+        MODE_NUM_TO_STR.put(\"3\", \"dry\");\n+        // 4=='haux' but this mode doesn't have an equivalent command to set it\n+        MODE_NUM_TO_STR.put(\"4\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"5\", \"fan\");\n+    }\n+\n     private final Logger logger = LoggerFactory.getLogger(HVACHandler.class);\n \n-    public HVACHandler(Thing thing) {\n+    public HVACHandler(final Thing thing) {\n         super(thing);\n     }\n \n+    /**\n+     * Get the controller handler for this bridge.\n+     *\n+     * <p>\n+     * This method does not raise any exception, but it will update the Thing\n+     * status if there is an issue obtaining the handler.\n+     *\n+     * <p>\n+     * The returned handler may or may not be connected.\n+     *\n+     * @return the controller handler or null if the controller is unavailable\n+     */\n     private @Nullable ControllerHandler getControllerHandler() {\n-        Bridge bridge = getBridge();\n-        return bridge != null ? (ControllerHandler) bridge.getHandler() : null;\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"CoolMasterNet Controller bridge not set\");\n+            return null;\n+        }\n+\n+        return (ControllerHandler) bridge.getHandler();\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        String uid = getConfigAs(HVACConfiguration.class).uid;\n-        String channel = channelUID.getId();\n-        ControllerHandler controller = getControllerHandler();\n+    public void handleCommand(final ChannelUID channelUID, final Command command) {\n+        final String uid = getConfigAs(HVACConfiguration.class).uid;\n+        final String channel = channelUID.getId();\n+        final ControllerHandler controller = getControllerHandler();\n+\n+        if (controller == null || !controller.isConnected()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not connect to CoolMasterNet unit\");\n+            return;\n+        }\n \n         try {\n-            Bridge bridge = getBridge();\n-            if (bridge == null) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"CoolMasterNet Controller bridge not set\");\n-            } else if (controller == null || !controller.isConnected()) {\n-                ControllerConfiguration config = bridge.getConfiguration().as(ControllerConfiguration.class);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n-                        String.format(\"Could not connect to CoolMasterNet unit %s:%d\", config.host, config.port));\n-            } else {\n-                if (channel.endsWith(ON) && command instanceof OnOffType) {\n-                    OnOffType onoff = (OnOffType) command;\n-                    controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n-                } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n-                    DecimalType temp = (DecimalType) command;\n-                    controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n-                } else if (channel.endsWith(MODE) && command instanceof StringType) {\n-                    /* the mode value in the command is the actual CoolMasterNet protocol command */\n-                    controller.sendCommand(String.format(\"%s %s\", command, uid));\n-                } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n-                } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n-                    controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n-                } else if (command instanceof RefreshType) {\n-                    refresh();\n-                }\n+            if (channel.endsWith(ON) && command instanceof OnOffType) {\n+                final OnOffType onoff = (OnOffType) command;\n+                controller.sendCommand(String.format(\"%s %s\", onoff == OnOffType.ON ? \"on\" : \"off\", uid));\n+            } else if (channel.endsWith(SET_TEMP) && command instanceof DecimalType) {\n+                final DecimalType temp = (DecimalType) command;\n+                controller.sendCommand(String.format(\"temp %s %s\", uid, temp));\n+            } else if (channel.endsWith(MODE) && command instanceof StringType) {\n+                // the mode value in the command is the actual CoolMasterNet protocol command\n+                controller.sendCommand(String.format(\"%s %s\", command, uid));\n+            } else if (channel.endsWith(FAN_SPEED) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"fspeed %s %s\", uid, command));\n+            } else if (channel.endsWith(LOUVRE) && command instanceof StringType) {\n+                controller.sendCommand(String.format(\"swing %s %s\", uid, command));\n+            } else if (command instanceof RefreshType) {\n+                refresh();", "originalCommit": "d4ae2e4762c3f29b1e2a39e3045cf45097bc367e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NjMyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420576328", "bodyText": "@cpmeister can you expand on what you mean here? Is there an addon that you'd recommend I take a look at for an example?", "author": "benalexau", "createdAt": "2020-05-06T06:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2MjMxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421162312", "bodyText": "openhab-addons/bundles/org.openhab.binding.millheat/src/main/java/org/openhab/binding/millheat/internal/handler/MillheatRoomHandler.java\n    \n    \n        Lines 65 to 77\n      in\n      c8479ac\n    \n    \n    \n    \n\n        \n          \n           protected void handleCommand(final ChannelUID channelUID, final Command command, final MillheatModel model) { \n        \n\n        \n          \n               final Optional<Room> optionalRoom = model.findRoomById(config.roomId); \n        \n\n        \n          \n               if (optionalRoom.isPresent()) { \n        \n\n        \n          \n                   updateStatus(ThingStatus.ONLINE); \n        \n\n        \n          \n                   final Room room = optionalRoom.get(); \n        \n\n        \n          \n                   if (CHANNEL_CURRENT_TEMPERATURE.equals(channelUID.getId())) { \n        \n\n        \n          \n                       if (command instanceof RefreshType) { \n        \n\n        \n          \n                           updateState(channelUID, new QuantityType<>(room.getCurrentTemp(), SIUnits.CELSIUS)); \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } else if (CHANNEL_CURRENT_MODE.equals(channelUID.getId())) { \n        \n\n        \n          \n                       if (command instanceof RefreshType) { \n        \n\n        \n          \n                           updateState(channelUID, new StringType(room.getMode().toString())); \n        \n\n        \n          \n                       }", "author": "cpmeister", "createdAt": "2020-05-07T00:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NjIzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r420546235", "bodyText": "Should probably also check if the ControllerHandler is null here and change thing status accordingly.", "author": "cpmeister", "createdAt": "2020-05-06T05:01:38Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/handler/HVACHandler.java", "diffHunk": "@@ -47,137 +47,160 @@\n @NonNullByDefault\n public class HVACHandler extends BaseThingHandler {\n \n+    /**\n+     * The CoolMasterNet protocol's query command returns numbers 0-5 for fan\n+     * speed, but the protocol's fan command (and matching binding command) use\n+     * single-letter abbreviations.\n+     */\n+    private static final Map<String, @Nullable String> FAN_NUM_TO_STR;\n+\n+    /**\n+     * The CoolMasterNet query command returns numbers 0-5 for operation modes,\n+     * but these don't map to any mode you can set on the device, so we use this\n+     * lookup table.\n+     */\n+    private static final Map<String, @Nullable String> MODE_NUM_TO_STR;\n+\n+    static {\n+        FAN_NUM_TO_STR = new HashMap<>();\n+        FAN_NUM_TO_STR.put(\"0\", \"l\"); // low\n+        FAN_NUM_TO_STR.put(\"1\", \"m\"); // medium\n+        FAN_NUM_TO_STR.put(\"2\", \"h\"); // high\n+        FAN_NUM_TO_STR.put(\"3\", \"a\"); // auto\n+        FAN_NUM_TO_STR.put(\"4\", \"t\"); // top\n+\n+        MODE_NUM_TO_STR = new HashMap<>();\n+        MODE_NUM_TO_STR.put(\"0\", \"cool\");\n+        MODE_NUM_TO_STR.put(\"1\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"2\", \"auto\");\n+        MODE_NUM_TO_STR.put(\"3\", \"dry\");\n+        // 4=='haux' but this mode doesn't have an equivalent command to set it\n+        MODE_NUM_TO_STR.put(\"4\", \"heat\");\n+        MODE_NUM_TO_STR.put(\"5\", \"fan\");\n+    }\n+\n     private final Logger logger = LoggerFactory.getLogger(HVACHandler.class);\n \n-    public HVACHandler(Thing thing) {\n+    public HVACHandler(final Thing thing) {\n         super(thing);\n     }\n \n+    /**\n+     * Get the controller handler for this bridge.\n+     *\n+     * <p>\n+     * This method does not raise any exception, but it will update the Thing\n+     * status if there is an issue obtaining the handler.\n+     *\n+     * <p>\n+     * The returned handler may or may not be connected.\n+     *\n+     * @return the controller handler or null if the controller is unavailable\n+     */\n     private @Nullable ControllerHandler getControllerHandler() {\n-        Bridge bridge = getBridge();\n-        return bridge != null ? (ControllerHandler) bridge.getHandler() : null;\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"CoolMasterNet Controller bridge not set\");\n+            return null;\n+        }\n+\n+        return (ControllerHandler) bridge.getHandler();", "originalCommit": "d4ae2e4762c3f29b1e2a39e3045cf45097bc367e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce5819c83156cf3eb21a0af1f5cdcd1270ecb0c9", "url": "https://github.com/openhab/openhab-addons/commit/ce5819c83156cf3eb21a0af1f5cdcd1270ecb0c9", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Fix incorrect constant for louve channel\n* Improve matching style (string constants, switch)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Shorten lines to improve readability\n* Properly handle refresh command (don't rely on poller)\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic and make more informative\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Use appropriate logging levels to match OpenHAB standards\n* Cache configuration to reduce lookup overhead\n* Move static constants and initialisation to start of compilation unit\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-07T02:51:19Z", "type": "forcePushed"}, {"oid": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "url": "https://github.com/openhab/openhab-addons/commit/8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Fix incorrect constant for louve channel\n* Improve matching style (string constants, switch)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Query for controller temperature scale and set units accordingly\n* Shorten lines to improve readability\n* Properly handle refresh command (don't rely on poller)\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic and make more informative\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Use appropriate logging levels to match OpenHAB standards\n* Cache configuration to reduce lookup overhead\n* Move static constants and initialisation to start of compilation unit\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-07T04:07:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MjI1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421852250", "bodyText": "Was this a bug?", "author": "cpmeister", "createdAt": "2020-05-07T23:32:20Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/CoolMasterNetBindingConstants.java", "diffHunk": "@@ -30,16 +29,16 @@\n \n     public static final String BINDING_ID = \"coolmasternet\";\n \n-    // List of all Thing Type UIDs\n+    // list of all Thing Type UIDs\n     public static final ThingTypeUID THING_TYPE_CONTROLLER = new ThingTypeUID(BINDING_ID, \"controller\");\n     public static final ThingTypeUID THING_TYPE_HVAC = new ThingTypeUID(BINDING_ID, \"hvac\");\n \n-    // List of all Channel ids\n+    // list of all Channel ids\n     public static final String ON = \"on\";\n     public static final String MODE = \"mode\";\n     public static final String SET_TEMP = \"set_temp\";\n     public static final String FAN_SPEED = \"fan_speed\";\n-    public static final String LOUVRE = \"louvre_angle\";\n+    public static final String LOUVRE = \"louvre\";", "originalCommit": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MzQ0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421863440", "bodyText": "Yes. The introduction of the switch statement default clause found it. I noted it in the commit log:\n\nFix incorrect constant for louve channel", "author": "benalexau", "createdAt": "2020-05-08T00:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MjI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1Mjk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421852975", "bodyText": "There is no harm in cancelling an already cancelled task. Also I'm pretty sure you still want to set the poller back to null regardless.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (poller != null && !poller.isCancelled()) {\n          \n          \n            \n                        if (poller != null) {", "author": "cpmeister", "createdAt": "2020-05-07T23:34:50Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -44,116 +47,163 @@\n /**\n  * Bridge to access a CoolMasterNet unit's ASCII protocol via TCP socket.\n  *\n- * A single CoolMasterNet can be connected to one or more HVAC units, each with a unique UID.\n- * These are individual Things inside the bridge.\n+ * <p>\n+ * A single CoolMasterNet can be connected to one or more HVAC units, each with\n+ * a unique UID. Each HVAC is an individual thing inside the bridge.\n  *\n  * @author Angus Gratton - Initial contribution\n  * @author Wouter Born - Fix null pointer exceptions and stop refresh job on update/dispose\n  */\n @NonNullByDefault\n-public class ControllerHandler extends BaseBridgeHandler {\n-    private static final byte LF = \"\\n\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final byte PROMPT = \">\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final int SINK_TIMEOUT = 1000;\n-    private static final int SOCKET_TIMEOUT = 2000;\n+public final class ControllerHandler extends BaseBridgeHandler {\n+    private static final byte LF = \"\\n\".getBytes(US_ASCII)[0];\n+    private static final byte PROMPT = \">\".getBytes(US_ASCII)[0];\n+    private static final int LS_LINE_LENGTH = 36;\n+    private static final int LS_LINE_TEMP_SCALE_OFFSET = 13;\n+    private static final int MAX_VALID_LINE_LENGTH = LS_LINE_LENGTH * 20;\n+    private static final int SINK_TIMEOUT_MS = 25;\n+    private static final int SOCKET_TIMEOUT_MS = 2000;\n \n+    private ControllerConfiguration cfg = new ControllerConfiguration();\n+    private Unit<?> unit = SIUnits.CELSIUS;\n     private final Logger logger = LoggerFactory.getLogger(ControllerHandler.class);\n-    private final Object refreshLock = new Object();\n     private final Object socketLock = new Object();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> poller;\n     private @Nullable Socket socket;\n \n-    public ControllerHandler(Bridge thing) {\n+    public ControllerHandler(final Bridge thing) {\n         super(thing);\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet Controller handler...\");\n-        stopRefresh();\n-        startRefresh();\n+        cfg = getConfigAs(ControllerConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+        determineTemperatureUnits();\n+        stopPoller();\n+        startPoller();\n     }\n \n     @Override\n     public void dispose() {\n-        stopRefresh();\n-        logger.debug(\"Disconnecting CoolMasterNet Controller handler...\");\n+        updateStatus(ThingStatus.OFFLINE);\n+        stopPoller();\n         disconnect();\n-        super.dispose();\n     }\n \n-    private void startRefresh() {\n-        synchronized (refreshLock) {\n-            ControllerConfiguration config = getConfigAs(ControllerConfiguration.class);\n-            logger.debug(\"Scheduling new refresh job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshHVACUnits, 0, config.refresh, TimeUnit.SECONDS);\n+    /**\n+     * Obtain the temperature unit configured for this controller.\n+     *\n+     * <p>\n+     * CoolMasterNet defaults to Celsius, but allows a user to change the scale\n+     * on a per-controller basis using the ASCII I/F \"set deg\" command. Given\n+     * changing the unit is very rarely performed, there is no direct support\n+     * for doing so within this binding.\n+     *\n+     * @return the unit as determined from the first line of the \"ls\" command\n+     */\n+    public Unit<?> getUnit() {\n+        return unit;\n+    }\n+\n+    private void determineTemperatureUnits() {\n+        synchronized (socketLock) {\n+            try {\n+                checkConnection();\n+                final String ls = sendCommand(\"ls\");\n+                if (ls.length() < LS_LINE_LENGTH) {\n+                    throw new CoolMasterClientError(\"Invalid 'ls' response: '\" + ls + \"'\");\n+                }\n+                final char scale = ls.charAt(LS_LINE_TEMP_SCALE_OFFSET);\n+                unit = scale == 'C' ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                logger.trace(\"Temperature scale '{}' set to {}\", scale, unit);\n+            } catch (final IOException ioe) {\n+                logger.warn(\"Could not determine temperature scale\", ioe);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void startPoller() {\n+        synchronized (scheduler) {\n+            logger.debug(\"Scheduling new poller\");\n+            poller = scheduler.scheduleWithFixedDelay(this::poll, 0, cfg.refresh, SECONDS);\n         }\n     }\n \n-    private void stopRefresh() {\n-        synchronized (refreshLock) {\n-            ScheduledFuture<?> localRefreshJob = refreshJob;\n-            if (localRefreshJob != null && !localRefreshJob.isCancelled()) {\n-                logger.debug(\"Cancelling existing refresh job\");\n-                localRefreshJob.cancel(true);\n-                refreshJob = null;\n+    private void stopPoller() {\n+        synchronized (scheduler) {\n+            final ScheduledFuture<?> poller = this.poller;\n+            if (poller != null && !poller.isCancelled()) {", "originalCommit": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MzgzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421863838", "bodyText": "Will make this change.", "author": "benalexau", "createdAt": "2020-05-08T00:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1Mjk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MzIzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421853230", "bodyText": "Why not use the constructor that handles formatting for you?", "author": "cpmeister", "createdAt": "2020-05-07T23:35:38Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -44,116 +47,163 @@\n /**\n  * Bridge to access a CoolMasterNet unit's ASCII protocol via TCP socket.\n  *\n- * A single CoolMasterNet can be connected to one or more HVAC units, each with a unique UID.\n- * These are individual Things inside the bridge.\n+ * <p>\n+ * A single CoolMasterNet can be connected to one or more HVAC units, each with\n+ * a unique UID. Each HVAC is an individual thing inside the bridge.\n  *\n  * @author Angus Gratton - Initial contribution\n  * @author Wouter Born - Fix null pointer exceptions and stop refresh job on update/dispose\n  */\n @NonNullByDefault\n-public class ControllerHandler extends BaseBridgeHandler {\n-    private static final byte LF = \"\\n\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final byte PROMPT = \">\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final int SINK_TIMEOUT = 1000;\n-    private static final int SOCKET_TIMEOUT = 2000;\n+public final class ControllerHandler extends BaseBridgeHandler {\n+    private static final byte LF = \"\\n\".getBytes(US_ASCII)[0];\n+    private static final byte PROMPT = \">\".getBytes(US_ASCII)[0];\n+    private static final int LS_LINE_LENGTH = 36;\n+    private static final int LS_LINE_TEMP_SCALE_OFFSET = 13;\n+    private static final int MAX_VALID_LINE_LENGTH = LS_LINE_LENGTH * 20;\n+    private static final int SINK_TIMEOUT_MS = 25;\n+    private static final int SOCKET_TIMEOUT_MS = 2000;\n \n+    private ControllerConfiguration cfg = new ControllerConfiguration();\n+    private Unit<?> unit = SIUnits.CELSIUS;\n     private final Logger logger = LoggerFactory.getLogger(ControllerHandler.class);\n-    private final Object refreshLock = new Object();\n     private final Object socketLock = new Object();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> poller;\n     private @Nullable Socket socket;\n \n-    public ControllerHandler(Bridge thing) {\n+    public ControllerHandler(final Bridge thing) {\n         super(thing);\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet Controller handler...\");\n-        stopRefresh();\n-        startRefresh();\n+        cfg = getConfigAs(ControllerConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+        determineTemperatureUnits();\n+        stopPoller();\n+        startPoller();\n     }\n \n     @Override\n     public void dispose() {\n-        stopRefresh();\n-        logger.debug(\"Disconnecting CoolMasterNet Controller handler...\");\n+        updateStatus(ThingStatus.OFFLINE);\n+        stopPoller();\n         disconnect();\n-        super.dispose();\n     }\n \n-    private void startRefresh() {\n-        synchronized (refreshLock) {\n-            ControllerConfiguration config = getConfigAs(ControllerConfiguration.class);\n-            logger.debug(\"Scheduling new refresh job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshHVACUnits, 0, config.refresh, TimeUnit.SECONDS);\n+    /**\n+     * Obtain the temperature unit configured for this controller.\n+     *\n+     * <p>\n+     * CoolMasterNet defaults to Celsius, but allows a user to change the scale\n+     * on a per-controller basis using the ASCII I/F \"set deg\" command. Given\n+     * changing the unit is very rarely performed, there is no direct support\n+     * for doing so within this binding.\n+     *\n+     * @return the unit as determined from the first line of the \"ls\" command\n+     */\n+    public Unit<?> getUnit() {\n+        return unit;\n+    }\n+\n+    private void determineTemperatureUnits() {\n+        synchronized (socketLock) {\n+            try {\n+                checkConnection();\n+                final String ls = sendCommand(\"ls\");\n+                if (ls.length() < LS_LINE_LENGTH) {\n+                    throw new CoolMasterClientError(\"Invalid 'ls' response: '\" + ls + \"'\");", "originalCommit": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NDMyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421864326", "bodyText": "I forgot I added one! :-) Fixed.", "author": "benalexau", "createdAt": "2020-05-08T00:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MzIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MzYzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421853634", "bodyText": "It is good practice to make sure that you flush the output before you try to read a response.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            out.write(LF);\n          \n          \n            \n                            out.write(LF);\n          \n          \n            \n                            out.flush();", "author": "cpmeister", "createdAt": "2020-05-07T23:36:57Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -44,116 +47,163 @@\n /**\n  * Bridge to access a CoolMasterNet unit's ASCII protocol via TCP socket.\n  *\n- * A single CoolMasterNet can be connected to one or more HVAC units, each with a unique UID.\n- * These are individual Things inside the bridge.\n+ * <p>\n+ * A single CoolMasterNet can be connected to one or more HVAC units, each with\n+ * a unique UID. Each HVAC is an individual thing inside the bridge.\n  *\n  * @author Angus Gratton - Initial contribution\n  * @author Wouter Born - Fix null pointer exceptions and stop refresh job on update/dispose\n  */\n @NonNullByDefault\n-public class ControllerHandler extends BaseBridgeHandler {\n-    private static final byte LF = \"\\n\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final byte PROMPT = \">\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final int SINK_TIMEOUT = 1000;\n-    private static final int SOCKET_TIMEOUT = 2000;\n+public final class ControllerHandler extends BaseBridgeHandler {\n+    private static final byte LF = \"\\n\".getBytes(US_ASCII)[0];\n+    private static final byte PROMPT = \">\".getBytes(US_ASCII)[0];\n+    private static final int LS_LINE_LENGTH = 36;\n+    private static final int LS_LINE_TEMP_SCALE_OFFSET = 13;\n+    private static final int MAX_VALID_LINE_LENGTH = LS_LINE_LENGTH * 20;\n+    private static final int SINK_TIMEOUT_MS = 25;\n+    private static final int SOCKET_TIMEOUT_MS = 2000;\n \n+    private ControllerConfiguration cfg = new ControllerConfiguration();\n+    private Unit<?> unit = SIUnits.CELSIUS;\n     private final Logger logger = LoggerFactory.getLogger(ControllerHandler.class);\n-    private final Object refreshLock = new Object();\n     private final Object socketLock = new Object();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> poller;\n     private @Nullable Socket socket;\n \n-    public ControllerHandler(Bridge thing) {\n+    public ControllerHandler(final Bridge thing) {\n         super(thing);\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet Controller handler...\");\n-        stopRefresh();\n-        startRefresh();\n+        cfg = getConfigAs(ControllerConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+        determineTemperatureUnits();\n+        stopPoller();\n+        startPoller();\n     }\n \n     @Override\n     public void dispose() {\n-        stopRefresh();\n-        logger.debug(\"Disconnecting CoolMasterNet Controller handler...\");\n+        updateStatus(ThingStatus.OFFLINE);\n+        stopPoller();\n         disconnect();\n-        super.dispose();\n     }\n \n-    private void startRefresh() {\n-        synchronized (refreshLock) {\n-            ControllerConfiguration config = getConfigAs(ControllerConfiguration.class);\n-            logger.debug(\"Scheduling new refresh job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshHVACUnits, 0, config.refresh, TimeUnit.SECONDS);\n+    /**\n+     * Obtain the temperature unit configured for this controller.\n+     *\n+     * <p>\n+     * CoolMasterNet defaults to Celsius, but allows a user to change the scale\n+     * on a per-controller basis using the ASCII I/F \"set deg\" command. Given\n+     * changing the unit is very rarely performed, there is no direct support\n+     * for doing so within this binding.\n+     *\n+     * @return the unit as determined from the first line of the \"ls\" command\n+     */\n+    public Unit<?> getUnit() {\n+        return unit;\n+    }\n+\n+    private void determineTemperatureUnits() {\n+        synchronized (socketLock) {\n+            try {\n+                checkConnection();\n+                final String ls = sendCommand(\"ls\");\n+                if (ls.length() < LS_LINE_LENGTH) {\n+                    throw new CoolMasterClientError(\"Invalid 'ls' response: '\" + ls + \"'\");\n+                }\n+                final char scale = ls.charAt(LS_LINE_TEMP_SCALE_OFFSET);\n+                unit = scale == 'C' ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                logger.trace(\"Temperature scale '{}' set to {}\", scale, unit);\n+            } catch (final IOException ioe) {\n+                logger.warn(\"Could not determine temperature scale\", ioe);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void startPoller() {\n+        synchronized (scheduler) {\n+            logger.debug(\"Scheduling new poller\");\n+            poller = scheduler.scheduleWithFixedDelay(this::poll, 0, cfg.refresh, SECONDS);\n         }\n     }\n \n-    private void stopRefresh() {\n-        synchronized (refreshLock) {\n-            ScheduledFuture<?> localRefreshJob = refreshJob;\n-            if (localRefreshJob != null && !localRefreshJob.isCancelled()) {\n-                logger.debug(\"Cancelling existing refresh job\");\n-                localRefreshJob.cancel(true);\n-                refreshJob = null;\n+    private void stopPoller() {\n+        synchronized (scheduler) {\n+            final ScheduledFuture<?> poller = this.poller;\n+            if (poller != null && !poller.isCancelled()) {\n+                logger.debug(\"Cancelling existing poller\");\n+                poller.cancel(true);\n+                this.poller = null;\n             }\n         }\n     }\n \n-    private void refreshHVACUnits() {\n+    private void poll() {\n         try {\n             checkConnection();\n-            updateStatus(ThingStatus.ONLINE);\n-            for (Thing t : getThing().getThings()) {\n-                HVACHandler h = (HVACHandler) t.getHandler();\n-                if (h != null) {\n-                    h.refresh();\n-                }\n+        } catch (final IOException ioe) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getMessage());\n+            return;\n+        }\n+        for (Thing t : getThing().getThings()) {\n+            final HVACHandler h = (HVACHandler) t.getHandler();\n+            if (h != null) {\n+                h.refresh();\n             }\n-        } catch (CoolMasterClientError e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n+        if (isConnected()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         }\n     }\n \n-    /*\n-     * Return true if the client socket is connected.\n+    /**\n+     * Passively determine if the client socket appears to be connected, but do\n+     * modify the connection state.\n      *\n-     * Use checkConnection() to probe if the coolmasternet is responding correctly,\n-     * and try to re-establish the connection if possible.\n+     * <p>\n+     * Use {@link #checkConnection()} if active verification (and potential\n+     * reconnection) of the CoolNetMaster connection is required.\n      */\n     public boolean isConnected() {\n         synchronized (socketLock) {\n-            Socket localSocket = socket;\n-            return localSocket != null && localSocket.isConnected() && !localSocket.isClosed();\n+            final Socket socket = this.socket;\n+            return socket != null && socket.isConnected() && !socket.isClosed();\n         }\n     }\n \n-    /*\n-     * Send a particular ASCII command to the CoolMasterNet, and return the successful response as a string.\n+    /**\n+     * Send a specific ASCII I/F command to CoolMasterNet and return its response.\n+     *\n+     * <p>\n+     * This method automatically acquires a connection.\n      *\n-     * If the \"OK\" prompt is not received then a CoolMasterClientError is thrown that contains whatever\n-     * error message was printed by the CoolMasterNet.\n+     * @return the server response to the command (never empty)\n+     * @throws {@link IOException} if communications failed with the server\n      */\n-    @SuppressWarnings(\"resource\")\n-    public @Nullable String sendCommand(String command) throws CoolMasterClientError {\n+    public String sendCommand(final String command) throws IOException {\n         synchronized (socketLock) {\n             checkConnection();\n \n-            StringBuilder response = new StringBuilder();\n+            final StringBuilder response = new StringBuilder();\n             try {\n-                Socket localSocket = socket;\n-                if (localSocket == null || !isConnected()) {\n+                final Socket socket = this.socket;\n+                if (socket == null || !isConnected()) {\n                     throw new CoolMasterClientError(String.format(\"No connection for sending command %s\", command));\n                 }\n \n                 logger.trace(\"Sending command '{}'\", command);\n-                OutputStream out = localSocket.getOutputStream();\n-                out.write(command.getBytes(StandardCharsets.US_ASCII));\n+                OutputStream out = socket.getOutputStream();\n+                out.write(command.getBytes(US_ASCII));\n                 out.write(LF);\n ", "originalCommit": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NDYyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421864623", "bodyText": "Done.", "author": "benalexau", "createdAt": "2020-05-08T00:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MzYzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDM0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421854344", "bodyText": "If you are looking to make good general improvements to make, then you could wrap this output stream in a OutputStreamWriter so you can let the writer deal with Charset conversions for you. Should allow you to get rid of the LF constant you are using below.", "author": "cpmeister", "createdAt": "2020-05-07T23:39:01Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -44,116 +47,163 @@\n /**\n  * Bridge to access a CoolMasterNet unit's ASCII protocol via TCP socket.\n  *\n- * A single CoolMasterNet can be connected to one or more HVAC units, each with a unique UID.\n- * These are individual Things inside the bridge.\n+ * <p>\n+ * A single CoolMasterNet can be connected to one or more HVAC units, each with\n+ * a unique UID. Each HVAC is an individual thing inside the bridge.\n  *\n  * @author Angus Gratton - Initial contribution\n  * @author Wouter Born - Fix null pointer exceptions and stop refresh job on update/dispose\n  */\n @NonNullByDefault\n-public class ControllerHandler extends BaseBridgeHandler {\n-    private static final byte LF = \"\\n\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final byte PROMPT = \">\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final int SINK_TIMEOUT = 1000;\n-    private static final int SOCKET_TIMEOUT = 2000;\n+public final class ControllerHandler extends BaseBridgeHandler {\n+    private static final byte LF = \"\\n\".getBytes(US_ASCII)[0];\n+    private static final byte PROMPT = \">\".getBytes(US_ASCII)[0];\n+    private static final int LS_LINE_LENGTH = 36;\n+    private static final int LS_LINE_TEMP_SCALE_OFFSET = 13;\n+    private static final int MAX_VALID_LINE_LENGTH = LS_LINE_LENGTH * 20;\n+    private static final int SINK_TIMEOUT_MS = 25;\n+    private static final int SOCKET_TIMEOUT_MS = 2000;\n \n+    private ControllerConfiguration cfg = new ControllerConfiguration();\n+    private Unit<?> unit = SIUnits.CELSIUS;\n     private final Logger logger = LoggerFactory.getLogger(ControllerHandler.class);\n-    private final Object refreshLock = new Object();\n     private final Object socketLock = new Object();\n \n-    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> poller;\n     private @Nullable Socket socket;\n \n-    public ControllerHandler(Bridge thing) {\n+    public ControllerHandler(final Bridge thing) {\n         super(thing);\n     }\n \n     @Override\n     public void initialize() {\n-        logger.debug(\"Initializing CoolMasterNet Controller handler...\");\n-        stopRefresh();\n-        startRefresh();\n+        cfg = getConfigAs(ControllerConfiguration.class);\n+        updateStatus(ThingStatus.UNKNOWN);\n+        determineTemperatureUnits();\n+        stopPoller();\n+        startPoller();\n     }\n \n     @Override\n     public void dispose() {\n-        stopRefresh();\n-        logger.debug(\"Disconnecting CoolMasterNet Controller handler...\");\n+        updateStatus(ThingStatus.OFFLINE);\n+        stopPoller();\n         disconnect();\n-        super.dispose();\n     }\n \n-    private void startRefresh() {\n-        synchronized (refreshLock) {\n-            ControllerConfiguration config = getConfigAs(ControllerConfiguration.class);\n-            logger.debug(\"Scheduling new refresh job\");\n-            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshHVACUnits, 0, config.refresh, TimeUnit.SECONDS);\n+    /**\n+     * Obtain the temperature unit configured for this controller.\n+     *\n+     * <p>\n+     * CoolMasterNet defaults to Celsius, but allows a user to change the scale\n+     * on a per-controller basis using the ASCII I/F \"set deg\" command. Given\n+     * changing the unit is very rarely performed, there is no direct support\n+     * for doing so within this binding.\n+     *\n+     * @return the unit as determined from the first line of the \"ls\" command\n+     */\n+    public Unit<?> getUnit() {\n+        return unit;\n+    }\n+\n+    private void determineTemperatureUnits() {\n+        synchronized (socketLock) {\n+            try {\n+                checkConnection();\n+                final String ls = sendCommand(\"ls\");\n+                if (ls.length() < LS_LINE_LENGTH) {\n+                    throw new CoolMasterClientError(\"Invalid 'ls' response: '\" + ls + \"'\");\n+                }\n+                final char scale = ls.charAt(LS_LINE_TEMP_SCALE_OFFSET);\n+                unit = scale == 'C' ? SIUnits.CELSIUS : ImperialUnits.FAHRENHEIT;\n+                logger.trace(\"Temperature scale '{}' set to {}\", scale, unit);\n+            } catch (final IOException ioe) {\n+                logger.warn(\"Could not determine temperature scale\", ioe);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void startPoller() {\n+        synchronized (scheduler) {\n+            logger.debug(\"Scheduling new poller\");\n+            poller = scheduler.scheduleWithFixedDelay(this::poll, 0, cfg.refresh, SECONDS);\n         }\n     }\n \n-    private void stopRefresh() {\n-        synchronized (refreshLock) {\n-            ScheduledFuture<?> localRefreshJob = refreshJob;\n-            if (localRefreshJob != null && !localRefreshJob.isCancelled()) {\n-                logger.debug(\"Cancelling existing refresh job\");\n-                localRefreshJob.cancel(true);\n-                refreshJob = null;\n+    private void stopPoller() {\n+        synchronized (scheduler) {\n+            final ScheduledFuture<?> poller = this.poller;\n+            if (poller != null && !poller.isCancelled()) {\n+                logger.debug(\"Cancelling existing poller\");\n+                poller.cancel(true);\n+                this.poller = null;\n             }\n         }\n     }\n \n-    private void refreshHVACUnits() {\n+    private void poll() {\n         try {\n             checkConnection();\n-            updateStatus(ThingStatus.ONLINE);\n-            for (Thing t : getThing().getThings()) {\n-                HVACHandler h = (HVACHandler) t.getHandler();\n-                if (h != null) {\n-                    h.refresh();\n-                }\n+        } catch (final IOException ioe) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ioe.getMessage());\n+            return;\n+        }\n+        for (Thing t : getThing().getThings()) {\n+            final HVACHandler h = (HVACHandler) t.getHandler();\n+            if (h != null) {\n+                h.refresh();\n             }\n-        } catch (CoolMasterClientError e) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n+        if (isConnected()) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n         }\n     }\n \n-    /*\n-     * Return true if the client socket is connected.\n+    /**\n+     * Passively determine if the client socket appears to be connected, but do\n+     * modify the connection state.\n      *\n-     * Use checkConnection() to probe if the coolmasternet is responding correctly,\n-     * and try to re-establish the connection if possible.\n+     * <p>\n+     * Use {@link #checkConnection()} if active verification (and potential\n+     * reconnection) of the CoolNetMaster connection is required.\n      */\n     public boolean isConnected() {\n         synchronized (socketLock) {\n-            Socket localSocket = socket;\n-            return localSocket != null && localSocket.isConnected() && !localSocket.isClosed();\n+            final Socket socket = this.socket;\n+            return socket != null && socket.isConnected() && !socket.isClosed();\n         }\n     }\n \n-    /*\n-     * Send a particular ASCII command to the CoolMasterNet, and return the successful response as a string.\n+    /**\n+     * Send a specific ASCII I/F command to CoolMasterNet and return its response.\n+     *\n+     * <p>\n+     * This method automatically acquires a connection.\n      *\n-     * If the \"OK\" prompt is not received then a CoolMasterClientError is thrown that contains whatever\n-     * error message was printed by the CoolMasterNet.\n+     * @return the server response to the command (never empty)\n+     * @throws {@link IOException} if communications failed with the server\n      */\n-    @SuppressWarnings(\"resource\")\n-    public @Nullable String sendCommand(String command) throws CoolMasterClientError {\n+    public String sendCommand(final String command) throws IOException {\n         synchronized (socketLock) {\n             checkConnection();\n \n-            StringBuilder response = new StringBuilder();\n+            final StringBuilder response = new StringBuilder();\n             try {\n-                Socket localSocket = socket;\n-                if (localSocket == null || !isConnected()) {\n+                final Socket socket = this.socket;\n+                if (socket == null || !isConnected()) {\n                     throw new CoolMasterClientError(String.format(\"No connection for sending command %s\", command));\n                 }\n \n                 logger.trace(\"Sending command '{}'\", command);\n-                OutputStream out = localSocket.getOutputStream();\n-                out.write(command.getBytes(StandardCharsets.US_ASCII));\n+                OutputStream out = socket.getOutputStream();", "originalCommit": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2ODQ4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421868488", "bodyText": "Do you mean BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), US_ASCII)) so you get BufferedWriter.newLine()?", "author": "benalexau", "createdAt": "2020-05-08T00:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2OTQ5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421869493", "bodyText": "I don't think a BufferedWriter would be very useful in this case since the buffer is so short lived. Also it seems like '\\n' was used pretty intentionally rather than a system newline so I think using BufferedWriter.newLine() might break things.\nMy suggestion is to just use new OutputStreamWriter(socket.getOutputStream(), US_ASCII)", "author": "cpmeister", "createdAt": "2020-05-08T00:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MDg4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421870886", "bodyText": "OK done.", "author": "benalexau", "createdAt": "2020-05-08T00:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDc4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421854787", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            out.write(LF);\n          \n          \n            \n                            out.write(LF);\n          \n          \n            \n                            out.flush();", "author": "cpmeister", "createdAt": "2020-05-07T23:40:28Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -223,14 +277,14 @@ private void checkConnection() throws CoolMasterClientError {\n                     }\n                 } catch (final SocketTimeoutException expectedFromRead) {\n                 } finally {\n-                    localSocket.setSoTimeout(SOCKET_TIMEOUT);\n+                    socket.setSoTimeout(SOCKET_TIMEOUT_MS);\n                 }\n \n                 // Solicit for a prompt given we haven't received one earlier\n-                final OutputStream out = localSocket.getOutputStream();\n+                final OutputStream out = socket.getOutputStream();\n                 out.write(LF);", "originalCommit": "8248afc10ac8cd1a4aeef2cbe4dbbd0a93526116", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NDcyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421864727", "bodyText": "Done", "author": "benalexau", "createdAt": "2020-05-08T00:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODMxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421878317", "bodyText": "Flush still hasn't been done here.", "author": "cpmeister", "createdAt": "2020-05-08T01:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDE1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421900156", "bodyText": "I've definitely done it this time!", "author": "benalexau", "createdAt": "2020-05-08T02:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NDc4Nw=="}], "type": "inlineReview"}, {"oid": "68a7e4081afd750848a5066be4778320f497d502", "url": "https://github.com/openhab/openhab-addons/commit/68a7e4081afd750848a5066be4778320f497d502", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Fix incorrect constant for louve channel\n* Improve matching style (string constants, switch)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Query for controller temperature scale and set units accordingly\n* Shorten lines to improve readability\n* Properly handle refresh command (don't rely on poller)\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic and make more informative\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Use appropriate logging levels to match OpenHAB standards\n* Cache configuration to reduce lookup overhead\n* Move static constants and initialisation to start of compilation unit\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-08T00:43:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODg3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421878873", "bodyText": "This should be doable now.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final byte LF = \"\\n\".getBytes(US_ASCII)[0];\n          \n          \n            \n                private static final String LF = \"\\n\";", "author": "cpmeister", "createdAt": "2020-05-08T01:04:28Z", "path": "bundles/org.openhab.binding.coolmasternet/src/main/java/org/openhab/binding/coolmasternet/internal/ControllerHandler.java", "diffHunk": "@@ -44,116 +49,164 @@\n /**\n  * Bridge to access a CoolMasterNet unit's ASCII protocol via TCP socket.\n  *\n- * A single CoolMasterNet can be connected to one or more HVAC units, each with a unique UID.\n- * These are individual Things inside the bridge.\n+ * <p>\n+ * A single CoolMasterNet can be connected to one or more HVAC units, each with\n+ * a unique UID. Each HVAC is an individual thing inside the bridge.\n  *\n  * @author Angus Gratton - Initial contribution\n  * @author Wouter Born - Fix null pointer exceptions and stop refresh job on update/dispose\n  */\n @NonNullByDefault\n-public class ControllerHandler extends BaseBridgeHandler {\n-    private static final byte LF = \"\\n\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final byte PROMPT = \">\".getBytes(StandardCharsets.US_ASCII)[0];\n-    private static final int SINK_TIMEOUT = 1000;\n-    private static final int SOCKET_TIMEOUT = 2000;\n+public final class ControllerHandler extends BaseBridgeHandler {\n+    private static final byte LF = \"\\n\".getBytes(US_ASCII)[0];", "originalCommit": "68a7e4081afd750848a5066be4778320f497d502", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDMzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7546#discussion_r421900335", "bodyText": "Done", "author": "benalexau", "createdAt": "2020-05-08T02:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODg3Mw=="}], "type": "inlineReview"}, {"oid": "d776459ff9987cb95995e9568ac3650be98db37f", "url": "https://github.com/openhab/openhab-addons/commit/d776459ff9987cb95995e9568ac3650be98db37f", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Fix incorrect constant for louve channel\n* Improve matching style (string constants, switch)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Query for controller temperature scale and set units accordingly\n* Shorten lines to improve readability\n* Properly handle refresh command (don't rely on poller)\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic and make more informative\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Use appropriate logging levels to match OpenHAB standards\n* Cache configuration to reduce lookup overhead\n* Move static constants and initialisation to start of compilation unit\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-08T02:23:51Z", "type": "commit"}, {"oid": "d776459ff9987cb95995e9568ac3650be98db37f", "url": "https://github.com/openhab/openhab-addons/commit/d776459ff9987cb95995e9568ac3650be98db37f", "message": "[coolmasternet] General tidy up of addon\n\nChanges include:\n\n* Remove unnecessary compiler warning suppression\n* Fix JavaDocs (use proper syntax and tags)\n* Fix incorrect constant for louve channel\n* Improve matching style (string constants, switch)\n* Consistent comments (inline, not block or JavaDoc)\n* Eliminate magic number\n* Query for controller temperature scale and set units accordingly\n* Shorten lines to improve readability\n* Properly handle refresh command (don't rely on poller)\n* Return from failed methods earlier to improve readability\n* Use final where possible\n* Rename refresh to poller\n* Stop using custom exception except for specific protocol case\n* Rationalise exception handling (centralise catch and log)\n* Synchronize on appropriate final object for polling use case\n* Centralise thing state reporting logic and make more informative\n* Accelerate commands by using shorter sink timeout where connected\n* Add polling duration trace message\n* Use appropriate logging levels to match OpenHAB standards\n* Cache configuration to reduce lookup overhead\n* Move static constants and initialisation to start of compilation unit\n* Apply Spotless plugin\n\nThis has been tested on a CoolMasterNet system. This includes various\nbreaking conditions such as introducing the wrong address to the\nbridge etc and ensuring bridge and HVAC states vary as\nexpected (including returning to online states when breaking\nconditions were corrected).\n\nSigned-off-by: Ben Alex <ben.alex@acegi.com.au>", "committedDate": "2020-05-08T02:23:51Z", "type": "forcePushed"}]}