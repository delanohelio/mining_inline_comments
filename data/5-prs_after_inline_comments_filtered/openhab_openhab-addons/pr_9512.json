{"pr_number": 9512, "pr_title": "[pidcontroller] Initial Contribution", "pr_createdAt": "2020-12-25T08:03:57Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9512", "timeline": [{"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "url": "https://github.com/openhab/openhab-addons/commit/88c73a1d5985e1a997f323bae18b729f7b8753d0", "message": "[pidcontroller] Initial Contribution\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-25T08:02:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MjExMw==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public Map<String, Object> execute(Map<String, Object> context) {\n          \n          \n            \n                public @Nullable Map<String, Object> execute(Map<String, Object> context) {", "author": "J-N-K", "createdAt": "2020-12-25T10:29:55Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/handler/PIDControllerActionHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.handler;\n+\n+import static org.openhab.automation.pidcontroller.internal.PIDControllerConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.handler.ActionHandler;\n+import org.openhab.core.automation.handler.BaseModuleHandler;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.items.events.ItemEventFactory;\n+import org.openhab.core.library.types.DecimalType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ * @author Fabian Wolter - Add PID debugging items\n+ */\n+@NonNullByDefault\n+public class PIDControllerActionHandler extends BaseModuleHandler<Action> implements ActionHandler {\n+    public static final String MODULE_TYPE_ID = AUTOMATION_NAME + \".action\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(PIDControllerActionHandler.class);\n+\n+    private ItemRegistry itemRegistry;\n+    private EventPublisher eventPublisher;\n+\n+    public PIDControllerActionHandler(Action module, ItemRegistry itemRegistry, EventPublisher eventPublisher) {\n+        super(module);\n+        this.itemRegistry = itemRegistry;\n+        this.eventPublisher = eventPublisher;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Map<String, Object> execute(Map<String, Object> context) {", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MjY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852645", "bodyText": "This throws an NPE and if I didn't overlook something, that is never catched.", "author": "J-N-K", "createdAt": "2020-12-25T10:34:34Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/handler/PIDControllerTriggerHandler.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.handler;\n+\n+import static org.openhab.automation.pidcontroller.internal.PIDControllerConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.automation.pidcontroller.internal.PIDException;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemNotFoundException;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemEventFactory;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ * @author Fabian Wolter - Add PID debug output values\n+ */\n+@NonNullByDefault\n+public class PIDControllerTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber {\n+    public static final String MODULE_TYPE_ID = AUTOMATION_NAME + \".trigger\";\n+    private static final Set<String> SUBSCRIBED_EVENT_TYPES = Set.of(ItemStateEvent.TYPE, ItemStateChangedEvent.TYPE);\n+    private final Logger logger = LoggerFactory.getLogger(PIDControllerTriggerHandler.class);\n+    private final ScheduledExecutorService scheduler = Executors\n+            .newSingleThreadScheduledExecutor(new NamedThreadFactory(\"OH-automation-\" + AUTOMATION_NAME, true));\n+    private final ServiceRegistration<?> eventSubscriberRegistration;\n+    private final PIDController controller;\n+    private final int loopTimeMs;\n+    private @Nullable ScheduledFuture<?> controllerjob;\n+    private long previousTimeMs = System.currentTimeMillis();\n+    private Item inputItem;\n+    private Item setpointItem;\n+    private EventFilter eventFilter;\n+\n+    public PIDControllerTriggerHandler(Trigger module, ItemRegistry itemRegistry, EventPublisher eventPublisher,\n+            BundleContext bundleContext) {\n+        super(module);\n+\n+        Configuration config = module.getConfiguration();\n+\n+        String inputItemName = (String) Objects.requireNonNull(config.get(CONFIG_INPUT_ITEM), \"Input item is not set\");", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MjkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852905", "bodyText": "Assign to a local variable to prevent the null-warning.", "author": "J-N-K", "createdAt": "2020-12-25T10:36:07Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/handler/PIDControllerTriggerHandler.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.handler;\n+\n+import static org.openhab.automation.pidcontroller.internal.PIDControllerConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.automation.pidcontroller.internal.PIDException;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemNotFoundException;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemEventFactory;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ * @author Fabian Wolter - Add PID debug output values\n+ */\n+@NonNullByDefault\n+public class PIDControllerTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber {\n+    public static final String MODULE_TYPE_ID = AUTOMATION_NAME + \".trigger\";\n+    private static final Set<String> SUBSCRIBED_EVENT_TYPES = Set.of(ItemStateEvent.TYPE, ItemStateChangedEvent.TYPE);\n+    private final Logger logger = LoggerFactory.getLogger(PIDControllerTriggerHandler.class);\n+    private final ScheduledExecutorService scheduler = Executors\n+            .newSingleThreadScheduledExecutor(new NamedThreadFactory(\"OH-automation-\" + AUTOMATION_NAME, true));\n+    private final ServiceRegistration<?> eventSubscriberRegistration;\n+    private final PIDController controller;\n+    private final int loopTimeMs;\n+    private @Nullable ScheduledFuture<?> controllerjob;\n+    private long previousTimeMs = System.currentTimeMillis();\n+    private Item inputItem;\n+    private Item setpointItem;\n+    private EventFilter eventFilter;\n+\n+    public PIDControllerTriggerHandler(Trigger module, ItemRegistry itemRegistry, EventPublisher eventPublisher,\n+            BundleContext bundleContext) {\n+        super(module);\n+\n+        Configuration config = module.getConfiguration();\n+\n+        String inputItemName = (String) Objects.requireNonNull(config.get(CONFIG_INPUT_ITEM), \"Input item is not set\");\n+        String setpointItemName = (String) Objects.requireNonNull(config.get(CONFIG_SETPOINT_ITEM),\n+                \"Setpoint item is not set\");\n+\n+        try {\n+            inputItem = itemRegistry.getItem(inputItemName);\n+        } catch (ItemNotFoundException e) {\n+            throw new IllegalArgumentException(\"Configured input item not found: \" + inputItemName, e);\n+        }\n+\n+        try {\n+            setpointItem = itemRegistry.getItem(setpointItemName);\n+        } catch (ItemNotFoundException e) {\n+            throw new IllegalArgumentException(\"Configured setpoint item not found: \" + setpointItemName, e);\n+        }\n+\n+        double outputLowerLimit = getDoubleFromConfig(config, CONFIG_OUTPUT_LOWER_LIMIT);\n+        double outputUpperLimit = getDoubleFromConfig(config, CONFIG_OUTPUT_UPPER_LIMIT);\n+        double kpAdjuster = getDoubleFromConfig(config, CONFIG_KP_GAIN);\n+        double kiAdjuster = getDoubleFromConfig(config, CONFIG_KI_GAIN);\n+        double kdAdjuster = getDoubleFromConfig(config, CONFIG_KD_GAIN);\n+        double kdTimeConstant = getDoubleFromConfig(config, CONFIG_KD_TIMECONSTANT);\n+\n+        loopTimeMs = ((BigDecimal) Objects.requireNonNull(config.get(CONFIG_LOOP_TIME),\n+                CONFIG_LOOP_TIME + \" is not set\")).intValue();\n+\n+        controller = new PIDController(outputLowerLimit, outputUpperLimit, kpAdjuster, kiAdjuster, kdAdjuster,\n+                kdTimeConstant);\n+\n+        eventFilter = event -> {\n+            String topic = event.getTopic();\n+\n+            return topic.equals(\"openhab/items/\" + inputItemName + \"/state\")\n+                    || topic.equals(\"openhab/items/\" + inputItemName + \"/statechanged\")\n+                    || topic.equals(\"openhab/items/\" + setpointItemName + \"/statechanged\");\n+        };\n+\n+        eventSubscriberRegistration = bundleContext.registerService(EventSubscriber.class.getName(), this, null);\n+\n+        eventPublisher.post(ItemEventFactory.createCommandEvent(inputItemName, RefreshType.REFRESH));\n+\n+        controllerjob = scheduler.scheduleWithFixedDelay(this::calculate, 0, loopTimeMs, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private double getDoubleFromConfig(Configuration config, String key) {\n+        return ((BigDecimal) Objects.requireNonNull(config.get(key), key + \" is not set\")).doubleValue();\n+    }\n+\n+    private void calculate() {\n+        double input;\n+        double setpoint;\n+\n+        try {\n+            input = getItemValueAsNumber(inputItem);\n+        } catch (PIDException e) {\n+            logger.warn(\"Input item: {}\", e.getMessage());\n+            return;\n+        }\n+\n+        try {\n+            setpoint = getItemValueAsNumber(setpointItem);\n+        } catch (PIDException e) {\n+            logger.warn(\"Setpoint item: {}\", e.getMessage());\n+            return;\n+        }\n+\n+        long now = System.currentTimeMillis();\n+\n+        PIDOutputDTO output = controller.calculate(input, setpoint, now - previousTimeMs);\n+        previousTimeMs = now;\n+\n+        Map<String, BigDecimal> outputs = new HashMap<>();\n+\n+        putBigDecimal(outputs, OUTPUT, output.getOutput());\n+        putBigDecimal(outputs, P_INSPECTOR, output.getProportionalPart());\n+        putBigDecimal(outputs, I_INSPECTOR, output.getIntegralPart());\n+        putBigDecimal(outputs, D_INSPECTOR, output.getDerivativePart());\n+        putBigDecimal(outputs, E_INSPECTOR, output.getError());\n+\n+        ModuleHandlerCallback localCallback = callback;\n+        if (localCallback != null && localCallback instanceof TriggerHandlerCallback) {\n+            ((TriggerHandlerCallback) localCallback).triggered(module, outputs);\n+        } else {\n+            logger.warn(\"No callback set\");\n+        }\n+    }\n+\n+    private void putBigDecimal(Map<String, BigDecimal> map, String key, double value) {\n+        map.put(key, BigDecimal.valueOf(value));\n+    }\n+\n+    private double getItemValueAsNumber(Item item) throws PIDException {\n+        State setpointState = item.getState();\n+\n+        if (setpointState instanceof Number) {\n+            double doubleValue = ((Number) setpointState).doubleValue();\n+\n+            if (Double.isFinite(doubleValue)) {\n+                return doubleValue;\n+            }\n+        } else if (setpointState instanceof StringType) {\n+            try {\n+                return Double.parseDouble(setpointState.toString());\n+            } catch (NumberFormatException e) {\n+                // nothing\n+            }\n+        }\n+        throw new PIDException(\n+                \"Item type is not a number: \" + setpointState.getClass().getSimpleName() + \": \" + setpointState);\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (event instanceof ItemStateChangedEvent) {\n+            calculate();\n+        }\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return SUBSCRIBED_EVENT_TYPES;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return eventFilter;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        eventSubscriberRegistration.unregister();\n+\n+        if (controllerjob != null) {", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1Mjk5MA==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852990", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)\n          \n          \n            \n                    final List<Trigger> triggers = List.of(ModuleBuilder.createTrigger().withId(triggerId)", "author": "J-N-K", "createdAt": "2020-12-25T10:36:41Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerRuleTemplate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.automation.pidcontroller.internal.PIDControllerConstants;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.automation.pidcontroller.internal.type.PIDControllerActionType;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Condition;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.Visibility;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.util.ModuleBuilder;\n+import org.openhab.core.config.core.ConfigDescriptionParameter;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class PIDControllerRuleTemplate extends RuleTemplate {\n+    public static final String UID = \"PIDControllerRuleTemplate\";\n+\n+    public static PIDControllerRuleTemplate initialize() {\n+        final String triggerId = UUID.randomUUID().toString();\n+\n+        final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzA3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<Action> actions = Collections.singletonList(ModuleBuilder.createAction()\n          \n          \n            \n                    final List<Action> actions = List.of(ModuleBuilder.createAction()", "author": "J-N-K", "createdAt": "2020-12-25T10:37:07Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerRuleTemplate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.automation.pidcontroller.internal.PIDControllerConstants;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.automation.pidcontroller.internal.type.PIDControllerActionType;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Condition;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.Visibility;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.util.ModuleBuilder;\n+import org.openhab.core.config.core.ConfigDescriptionParameter;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class PIDControllerRuleTemplate extends RuleTemplate {\n+    public static final String UID = \"PIDControllerRuleTemplate\";\n+\n+    public static PIDControllerRuleTemplate initialize() {\n+        final String triggerId = UUID.randomUUID().toString();\n+\n+        final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)\n+                .withTypeUID(PIDControllerTriggerHandler.MODULE_TYPE_ID).withLabel(\"PID Controller Trigger\").build());\n+\n+        final Map<String, String> actionInputs = new HashMap<String, String>();\n+        actionInputs.put(PIDControllerActionType.INPUT, triggerId + \".\" + PIDControllerConstants.OUTPUT);\n+\n+        final List<Action> actions = Collections.singletonList(ModuleBuilder.createAction()", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzEzMg==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<String> tags = new HashSet<String>();\n          \n          \n            \n                    tags.add(\"PID Controller\");\n          \n          \n            \n                    Set<String> tags = Set.of(\"PID Controller\");", "author": "J-N-K", "createdAt": "2020-12-25T10:37:47Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerRuleTemplate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.automation.pidcontroller.internal.PIDControllerConstants;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.automation.pidcontroller.internal.type.PIDControllerActionType;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Condition;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.Visibility;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.util.ModuleBuilder;\n+import org.openhab.core.config.core.ConfigDescriptionParameter;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class PIDControllerRuleTemplate extends RuleTemplate {\n+    public static final String UID = \"PIDControllerRuleTemplate\";\n+\n+    public static PIDControllerRuleTemplate initialize() {\n+        final String triggerId = UUID.randomUUID().toString();\n+\n+        final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)\n+                .withTypeUID(PIDControllerTriggerHandler.MODULE_TYPE_ID).withLabel(\"PID Controller Trigger\").build());\n+\n+        final Map<String, String> actionInputs = new HashMap<String, String>();\n+        actionInputs.put(PIDControllerActionType.INPUT, triggerId + \".\" + PIDControllerConstants.OUTPUT);\n+\n+        final List<Action> actions = Collections.singletonList(ModuleBuilder.createAction()\n+                .withId(UUID.randomUUID().toString()).withTypeUID(PIDControllerActionHandler.MODULE_TYPE_ID)\n+                .withLabel(\"PID Controller Action\").withInputs(actionInputs).build());\n+\n+        Set<String> tags = new HashSet<String>();\n+        tags.add(\"PID Controller\");", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzU3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n          \n          \n            \n                private static final RuleTemplate PROVIDED_RULE_TEMPLATE = PIDControllerRuleTemplate.initialize();", "author": "J-N-K", "createdAt": "2020-12-25T10:41:25Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzY0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.unmodifiableCollection(providedRuleTemplates.values());\n          \n          \n            \n                    return Set.of(PROVIDED_RULE_TEMPLATE);", "author": "J-N-K", "createdAt": "2020-12-25T10:41:58Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n+\n+    public PIDControllerTemplateProvider() {\n+        providedRuleTemplates.put(PIDControllerRuleTemplate.UID, PIDControllerRuleTemplate.initialize());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public RuleTemplate getTemplate(String UID, @Nullable Locale locale) {\n+        return providedRuleTemplates.get(UID);\n+    }\n+\n+    @Override\n+    public Collection<RuleTemplate> getTemplates(@Nullable Locale locale) {\n+        return providedRuleTemplates.values();\n+    }\n+\n+    @Override\n+    public void addProviderChangeListener(ProviderChangeListener<RuleTemplate> listener) {\n+        // does nothing because this provider does not change\n+    }\n+\n+    @Override\n+    public Collection<RuleTemplate> getAll() {\n+        return Collections.unmodifiableCollection(providedRuleTemplates.values());", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzgxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return providedRuleTemplates.get(UID);\n          \n          \n            \n                   \n          \n          \n            \n                    return uid.equals(PIDControllerRuleTemplate.UID) ? PROVIDED_RULE_TEMPLATE : null;", "author": "J-N-K", "createdAt": "2020-12-25T10:43:27Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n+\n+    public PIDControllerTemplateProvider() {\n+        providedRuleTemplates.put(PIDControllerRuleTemplate.UID, PIDControllerRuleTemplate.initialize());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public RuleTemplate getTemplate(String UID, @Nullable Locale locale) {\n+        return providedRuleTemplates.get(UID);", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1Mzg3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return providedRuleTemplates.values();\n          \n          \n            \n                    return Set.of(PROVIDED_RULE_TEMPLATE);", "author": "J-N-K", "createdAt": "2020-12-25T10:43:57Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n+\n+    public PIDControllerTemplateProvider() {\n+        providedRuleTemplates.put(PIDControllerRuleTemplate.UID, PIDControllerRuleTemplate.initialize());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public RuleTemplate getTemplate(String UID, @Nullable Locale locale) {\n+        return providedRuleTemplates.get(UID);\n+    }\n+\n+    @Override\n+    public Collection<RuleTemplate> getTemplates(@Nullable Locale locale) {\n+        return providedRuleTemplates.values();", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1NDEyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548854128", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, ModuleType> providedModuleTypes = new HashMap<String, ModuleType>();\n          \n          \n            \n                private static final Map<String, ModuleType> PROVIDED_MODULE_TYPE = new Map.of(...)", "author": "J-N-K", "createdAt": "2020-12-25T10:45:52Z", "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/type/PIDControllerModuleTypeProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.type;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.core.automation.type.ModuleType;\n+import org.openhab.core.automation.type.ModuleTypeProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerModuleTypeProvider implements ModuleTypeProvider {\n+    private final Map<String, ModuleType> providedModuleTypes = new HashMap<String, ModuleType>();", "originalCommit": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1d6ce3e82fe704048c6e11d4ad034484ed9c2d96", "url": "https://github.com/openhab/openhab-addons/commit/1d6ce3e82fe704048c6e11d4ad034484ed9c2d96", "message": "Incorporate review feedback No.1\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>", "committedDate": "2020-12-25T12:12:06Z", "type": "commit"}]}