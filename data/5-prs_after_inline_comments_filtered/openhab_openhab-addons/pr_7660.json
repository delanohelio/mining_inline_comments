{"pr_number": 7660, "pr_title": "[netatmo] Add support for the Presence camera (#3059)", "pr_createdAt": "2020-05-17T12:37:37Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7660", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426281719", "bodyText": "Why NOC ???\nWhy not something like NAPresence ?", "author": "lolodomo", "createdAt": "2020-05-17T16:51:07Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "originalCommit": "9e42a99796414ded0289228d92324816ea829cf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NDQ5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426284499", "bodyText": "\"NOC\" is a type id which comes from the Netatmo API, I can't change that. ;-) At least the constant name is more meaningful. It seems to mean \"Netatmo Outdoor Camera\", see https://dev.netatmo.com/apidocumentation/security#products-details", "author": "Novanic", "createdAt": "2020-05-17T17:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjEzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426286134", "bodyText": "We have the full control / choice of our openHAB thing types.\nAs I understand, until now the OH thing type is matching the API type ?\nThere was no real reason for that and as soon as this type has no easy meaning for the end user, I would suggest to use a more meaning thing type, like OutdoorCamera for example.\nAnd it was a bad idea to use uppercase letters in the thing types. But it is too late to change that.", "author": "lolodomo", "createdAt": "2020-05-17T17:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426286815", "bodyText": "\"NOC\" has technically to match the Netatmo API type, there is no other mapping mechanizm within the binding.\nYes, Netatmo changed their product names. \"Welcome\" is now \"Indoor\", and \"Presence\" is now \"Outdoor\". I decided to keep the old names, because everything is named \"Welcome\", now it is still consistent. I think it would be a good idea to plan a separate refactoring issue to rename everything to the new names, \"Welcome\" is existing in nearly every class, so that will become expensive and should planned separately.", "author": "Novanic", "createdAt": "2020-05-17T17:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4Nzc0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426287745", "bodyText": "\"NOC\" has technically to match the Netatmo API type\n\nCan you please point in the code where it is required to have the openHAB thing type being named \"NOC\" to be able to use the API ?", "author": "lolodomo", "createdAt": "2020-05-17T17:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MDAyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426290026", "bodyText": "Method \"org.openhab.binding.netatmo.internal.discovery.NetatmoModuleDiscoveryService#discoverWelcomeHome\", line 149. When you follow the trace you will find method \"org.openhab.binding.netatmo.internal.discovery.NetatmoModuleDiscoveryService#findThingUID\", there it is matched with the constants. See also the usage of method \"io.swagger.client.model.NAWelcomeCamera#getType\", there comes \"NOC\" from the Netatmo API like described in the API documentation from Netatmo.", "author": "Novanic", "createdAt": "2020-05-17T18:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NTk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426295995", "bodyText": "Ok, you're absolutely right ! I don't like how it was done but it makes sense in this case to continue with the same patten and so use NOC as thing type in openHAB.", "author": "lolodomo", "createdAt": "2020-05-17T19:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426281912", "bodyText": "In case we decide to have only one configuration setting for any camera, at least its label and description has to be updated (not its name as it will break existing setup).\nBut I rather suggest to add a new configuration setting readPresence.", "author": "lolodomo", "createdAt": "2020-05-17T16:53:13Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -207,6 +207,8 @@ private String getApiScope() {\n         if (configuration.readWelcome) {\n             scopes.add(\"read_camera\");\n             scopes.add(\"access_camera\");\n+            scopes.add(\"read_presence\");\n+            scopes.add(\"access_presence\");", "originalCommit": "9e42a99796414ded0289228d92324816ea829cf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMDMzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426300335", "bodyText": "Thank you for your feedback.\nI decided for the first option (renaming just label and description), because I think there is no use-case for enabling indoor camera access but not outdoor camera access or the other way round. I renamed it to generally \"Access Camera API\", that should it clarify for the user, it's downward compatible and nobody has to activate the Presence separately.\nI hope the solution is ok. When necessary I could also revert it and separate the settings.", "author": "Novanic", "createdAt": "2020-05-17T20:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMjM0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426302340", "bodyText": "Update: Hm, maybe it's better to separate it. It would cause that the user automatically grants more scopes when the binding is already installed, right? So it would be better when the user explicitly set the grants for the new scopes. I will separate it, please block the pull-request since the change is done.", "author": "Novanic", "createdAt": "2020-05-17T20:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNDEyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426304128", "bodyText": "done. It is now separated, the user has to grant the access to the outdoor cameras explicitly.", "author": "Novanic", "createdAt": "2020-05-17T20:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzUyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427797529", "bodyText": "UnDefType.NULL should never be set. Please rather use UnDefType.UNDEF.\nCan you fix the other methods in the class please ? I see the same error at line 96 for example.", "author": "lolodomo", "createdAt": "2020-05-20T07:30:11Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/ChannelTypeUtils.java", "diffHunk": "@@ -96,6 +96,10 @@ public static State toOnOffType(@Nullable Integer value) {\n         return value != null ? (value == 1 ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;\n     }\n \n+    public static State toOnOffType(@Nullable Boolean value) {\n+        return value != null ? (value ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;", "originalCommit": "0f00835aee272debe253defb0db074b2813525c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNzAxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428237013", "bodyText": "Ok, I have just realized the same behavior like the other methods. I can change that when you are sure. I hope this pull-request is not a never ending story... ;-)", "author": "Novanic", "createdAt": "2020-05-20T18:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1NDQ3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428254477", "bodyText": "done (but I have only changed it for toOnOffType methods because there are too many usages and I can't ensure that nothing would break. That could be a good separate refactoring ;-))", "author": "Novanic", "createdAt": "2020-05-20T19:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5OTIwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427799202", "bodyText": "Just a comment, I see the scope \"write_camera\" is used for the Welcome camera. I don't remember what it is its role. But are you sure that it is not required for the Presence ?", "author": "lolodomo", "createdAt": "2020-05-20T07:33:25Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -210,6 +210,11 @@ private String getApiScope() {\n             scopes.add(\"write_camera\");\n         }\n \n+        if (configuration.readPresence) {", "originalCommit": "0f00835aee272debe253defb0db074b2813525c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNDIzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428234238", "bodyText": "Yes, write_camera isn't existing for the Presence camera. This is documented here: https://dev.netatmo.com/apidocumentation/security#scopes", "author": "Novanic", "createdAt": "2020-05-20T18:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5OTIwMg=="}], "type": "inlineReview"}, {"oid": "0ff7210e820c8493d9a91e4f511d55b8c0b25f66", "url": "https://github.com/openhab/openhab-addons/commit/0ff7210e820c8493d9a91e4f511d55b8c0b25f66", "message": "Support for the Presence camera added\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "7342c5fcf8fe17151c76829992caeb0ca6feb109", "url": "https://github.com/openhab/openhab-addons/commit/7342c5fcf8fe17151c76829992caeb0ca6feb109", "message": "README updated for Presence camera support\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "7ed5b69f65f03de3fa0f0297837b6301dfabd7ed", "url": "https://github.com/openhab/openhab-addons/commit/7ed5b69f65f03de3fa0f0297837b6301dfabd7ed", "message": "Files and thing types renamed because it handles now various camera types (not only the Welcome camera)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "f9a6033da58987ce0d805994f1a8a9cd83f3cc06", "url": "https://github.com/openhab/openhab-addons/commit/f9a6033da58987ce0d805994f1a8a9cd83f3cc06", "message": "Permission configurations renamed because it handles now various camera types (not only the Welcome camera)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "1f7bd54d855e5875259b1dbfef480f5b3c57449f", "url": "https://github.com/openhab/openhab-addons/commit/1f7bd54d855e5875259b1dbfef480f5b3c57449f", "message": "README updated to clarify the Welcome and Presence product names\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "c4909e60f88085bce7b10a71ae50eaf12b4c7165", "url": "https://github.com/openhab/openhab-addons/commit/c4909e60f88085bce7b10a71ae50eaf12b4c7165", "message": "Permission configurations renamed because it handles now various camera types (not only the Welcome camera) ; Reverted. Now it is separated, so the user has explicitly to decide if he wants to grant the access to outdoor cameras.\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "7a79ace451eb7806137c49bc15bef8cc162375e2", "url": "https://github.com/openhab/openhab-addons/commit/7a79ace451eb7806137c49bc15bef8cc162375e2", "message": "Camera channels separated to remove \"welcome\" from the (Presence) channel names. The channels of the Welcome camera were not renamed to be downward compatible.\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "4e8735d08ed6467133ddc80466aa2fbbf9c295cc", "url": "https://github.com/openhab/openhab-addons/commit/4e8735d08ed6467133ddc80466aa2fbbf9c295cc", "message": "Camera channels separated to remove \"welcome\" from the (Presence) channel names. The channels of the Welcome camera were not renamed to be downward compatible.\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:06Z", "type": "commit"}, {"oid": "16c7caca3963124afce054c99ef828a8b2156e54", "url": "https://github.com/openhab/openhab-addons/commit/16c7caca3963124afce054c99ef828a8b2156e54", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:07Z", "type": "commit"}, {"oid": "6e425b3e25853326e159743c1871437f8e6b6151", "url": "https://github.com/openhab/openhab-addons/commit/6e425b3e25853326e159743c1871437f8e6b6151", "message": "README format fixed\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:07Z", "type": "commit"}, {"oid": "e52660461a21db64446100b73d1ca2c87325472c", "url": "https://github.com/openhab/openhab-addons/commit/e52660461a21db64446100b73d1ca2c87325472c", "message": "README format fixed\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:07Z", "type": "commit"}, {"oid": "ee8cbe384fb656a7f0254c3cc7626e11df7d30f8", "url": "https://github.com/openhab/openhab-addons/commit/ee8cbe384fb656a7f0254c3cc7626e11df7d30f8", "message": "NULL changed to UNDEF like mentioned within the code review\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:07Z", "type": "commit"}, {"oid": "25ef71ae3e6f74110ef0ace8a09f83fe73590ad9", "url": "https://github.com/openhab/openhab-addons/commit/25ef71ae3e6f74110ef0ace8a09f83fe73590ad9", "message": "welcomeHomeEvent channel removed for the Presence camera, event handling for the Presence will get realized later\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:07Z", "type": "commit"}, {"oid": "707124bec0658db90aaa17717b1243fd8eef8609", "url": "https://github.com/openhab/openhab-addons/commit/707124bec0658db90aaa17717b1243fd8eef8609", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:20:07Z", "type": "commit"}, {"oid": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf", "url": "https://github.com/openhab/openhab-addons/commit/bc8e8e94089e71bd96bbda65e08c4e7827184aaf", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-20T19:28:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDU3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428884571", "bodyText": "Some of our build tools don't like EOF without a newline. So add a newline here.", "author": "cpmeister", "createdAt": "2020-05-21T20:05:47Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeCameraHandler.java", "diffHunk": "@@ -12,106 +12,44 @@\n  */\n package org.openhab.binding.netatmo.internal.welcome;\n \n-import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n import org.eclipse.jdt.annotation.NonNull;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\n-\n-import io.swagger.client.model.NAWelcomeCamera;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n \n /**\n  * {@link NAWelcomeCameraHandler} is the class used to handle the Welcome Camera Data\n  *\n  * @author Ing. Peter Weiss - Initial contribution\n  *\n  */\n-public class NAWelcomeCameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\n-    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\n+public class NAWelcomeCameraHandler extends CameraHandler {\n \n     public NAWelcomeCameraHandler(@NonNull Thing thing) {\n         super(thing);\n     }\n \n-    @Override\n-    protected void updateProperties(NAWelcomeCamera moduleData) {\n-        updateProperties(null, moduleData.getType());\n-    }\n-\n     @SuppressWarnings(\"null\")\n     @Override\n-    protected State getNAThingProperty(String chanelId) {\n-        switch (chanelId) {\n+    protected State getNAThingProperty(String channelId) {\n+        switch (channelId) {\n             case CHANNEL_WELCOME_CAMERA_STATUS:\n-                return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+                return getStatusState();\n             case CHANNEL_WELCOME_CAMERA_SDSTATUS:\n-                return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+                return getSdStatusState();\n             case CHANNEL_WELCOME_CAMERA_ALIMSTATUS:\n-                return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+                return getAlimStatusState();\n             case CHANNEL_WELCOME_CAMERA_ISLOCAL:\n-                return (module == null || module.getIsLocal() == null) ? UnDefType.UNDEF\n-                        : module.getIsLocal() ? OnOffType.ON : OnOffType.OFF;\n+                return getIsLocalState();\n             case CHANNEL_WELCOME_CAMERA_LIVEPICTURE_URL:\n-                return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\n+                return getLivePictureURLState();\n             case CHANNEL_WELCOME_CAMERA_LIVEPICTURE:\n-                return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\n+                return getLivePictureState();\n             case CHANNEL_WELCOME_CAMERA_LIVESTREAM_URL:\n-                return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\n-        }\n-        return super.getNAThingProperty(chanelId);\n-    }\n-\n-    /**\n-     * Get the url for the live snapshot\n-     *\n-     * @return Url of the live snapshot\n-     */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * Get the url for the live stream depending wether local or not\n-     *\n-     * @return Url of the live stream\n-     */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += \"/live/index\";\n-            result += isLocal() ? \"_local\" : \"\";\n-            result += \".m3u8\";\n+                return getLiveStreamState();\n         }\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n-    }\n-\n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += \"/vod/\" + videoId + \"/index\";\n-            result += isLocal() ? \"_local\" : \"\";\n-            result += \".m3u8\";\n-        }\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal().booleanValue();\n+        return super.getNAThingProperty(channelId);\n     }\n-}\n+}", "originalCommit": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MTQ0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428891442", "bodyText": "done", "author": "Novanic", "createdAt": "2020-05-21T20:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDkyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428884924", "bodyText": "Some of our build tools don't like EOF without a newline. So add a newline here.", "author": "cpmeister", "createdAt": "2020-05-21T20:06:32Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private String getVpnUrl() {\r\n+        return (module == null) ? null : module.getVpnUrl();\r\n+    }\r\n+\r\n+    public String getStreamURL(String videoId) {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/vod/\" + videoId + \"/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private boolean isLocal() {\r\n+        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal().booleanValue();\r\n+    }\r\n+}", "originalCommit": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MTM2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428891368", "bodyText": "done", "author": "Novanic", "createdAt": "2020-05-21T20:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDkyNA=="}], "type": "inlineReview"}, {"oid": "2609e722b91b1797d228e4075991602ce88635e0", "url": "https://github.com/openhab/openhab-addons/commit/2609e722b91b1797d228e4075991602ce88635e0", "message": "New line at the end of the file added\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-21T20:18:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MjU2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428892560", "bodyText": "Please cache getLiveStreamURL() to a local variable to it doesn't get recomputed. Also do the same for  the other methods above.", "author": "cpmeister", "createdAt": "2020-05-21T20:21:57Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r", "originalCommit": "2609e722b91b1797d228e4075991602ce88635e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDMzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428904339", "bodyText": "done", "author": "Novanic", "createdAt": "2020-05-21T20:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MjU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzEyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428893129", "bodyText": "You should use a StringBuilder here instead of raw string concatenation.", "author": "cpmeister", "createdAt": "2020-05-21T20:23:08Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r", "originalCommit": "2609e722b91b1797d228e4075991602ce88635e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDU1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428904556", "bodyText": "done (but the code wasn't new, it was just moved and as I know to use StringBuilder isn't much important since Java 6 because the JDK / compiler optimizes the code itself)", "author": "Novanic", "createdAt": "2020-05-21T20:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzIwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428893209", "bodyText": "same here", "author": "cpmeister", "createdAt": "2020-05-21T20:23:17Z", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private String getVpnUrl() {\r\n+        return (module == null) ? null : module.getVpnUrl();\r\n+    }\r\n+\r\n+    public String getStreamURL(String videoId) {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/vod/\" + videoId + \"/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r", "originalCommit": "2609e722b91b1797d228e4075991602ce88635e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428904945", "bodyText": "done (but the code wasn't new, it was just moved and as I know to use StringBuilder isn't much important since Java 6 because the JDK / compiler optimizes the code itself)", "author": "Novanic", "createdAt": "2020-05-21T20:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzIwOQ=="}], "type": "inlineReview"}, {"oid": "1912bdcbc7409002617b5f81c151abc057420851", "url": "https://github.com/openhab/openhab-addons/commit/1912bdcbc7409002617b5f81c151abc057420851", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>", "committedDate": "2020-05-21T20:44:29Z", "type": "commit"}]}