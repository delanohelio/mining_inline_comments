{"pr_number": 6860, "pr_title": "[airthings] Airthings bluetooth binding initial contribution", "pr_createdAt": "2020-01-18T12:21:48Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/6860", "timeline": [{"oid": "dc398abb6d566faf12e6ecba399bae71fe42c7a2", "url": "https://github.com/openhab/openhab-addons/commit/dc398abb6d566faf12e6ecba399bae71fe42c7a2", "message": "Updated codeowners and parent pom files\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-01-19T16:44:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjA0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896043", "bodyText": "Wouldn't it make more sense to add these to the core UoM bundle?", "author": "J-N-K", "createdAt": "2020-02-16T11:35:23Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsBindingConstants.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import java.math.BigInteger;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.dimension.Density;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.AlternateUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link AirthingsBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsBindingConstants {\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_AIRTHINGS_WAVE_PLUS = new ThingTypeUID(\n+            BluetoothBindingConstants.BINDING_ID, \"airthings_wave_plus\");\n+\n+    // Channel IDs\n+    public static final String CHANNEL_ID_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_ID_TEMPERATURE = \"temperature\";\n+    public static final String CHANNEL_ID_PRESSURE = \"pressure\";\n+    public static final String CHANNEL_ID_CO2 = \"co2\";\n+    public static final String CHANNEL_ID_TVOC = \"tvoc\";\n+    public static final String CHANNEL_ID_RADON_ST_AVG = \"radon_st_avg\";\n+    public static final String CHANNEL_ID_RADON_LT_AVG = \"radon_lt_avg\";\n+\n+    public static final Unit<Dimensionless> PARTS_PER_BILLION = new TransformedUnit<>(SmartHomeUnits.ONE,", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxMDYwMA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379910600", "bodyText": "PR done", "author": "paulianttila", "createdAt": "2020-02-16T15:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDQwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380244409", "bodyText": "PR is merged, but if I have understood correctly, next core version will be 3.0 and as this binding is targetted to be in 2.5.x, I need to keep those in?", "author": "paulianttila", "createdAt": "2020-02-17T15:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMDM2OA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380810368", "bodyText": "Yes. Unfortunately that is probably the case.", "author": "J-N-K", "createdAt": "2020-02-18T17:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjE1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected ThingHandler createHandler(Thing thing) {\n          \n          \n            \n                protected @Nullable ThingHandler createHandler(Thing thing) {", "author": "J-N-K", "createdAt": "2020-02-16T11:36:51Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link AirthingsHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.airthings\")\n+public class AirthingsHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n+            .singleton(AirthingsBindingConstants.THING_TYPE_AIRTHINGS_WAVE_PLUS);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected ThingHandler createHandler(Thing thing) {", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjM2NA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896364", "bodyText": "What could happen here that you need to catch RuntimeException?", "author": "J-N-K", "createdAt": "2020-02-16T11:39:53Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusDataParser.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link AirthingsWavePlusDataParser} is responsible for parsing data from Wave Plus device format.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusDataParser {\n+    private static final int EXPECTED_DATA_LEN = 20;\n+    private static final int EXPECTED_VER = 1;\n+\n+    private double humidity;\n+    private int radonShortTermAvg;\n+    private int radonLongTermAvg;\n+    private double temperature;\n+    private double pressure;\n+    private int co2;\n+    private int tvoc;\n+\n+    public AirthingsWavePlusDataParser(int[] data) throws AirthingsParserException {\n+        parseData(data);\n+    }\n+\n+    public double getHumidity() {\n+        return humidity;\n+    }\n+\n+    public int getRadonShortTermAvg() {\n+        return radonShortTermAvg;\n+    }\n+\n+    public int getRadonLongTermAvg() {\n+        return radonLongTermAvg;\n+    }\n+\n+    public double getTemperature() {\n+        return temperature;\n+    }\n+\n+    public double getPressure() {\n+        return pressure;\n+    }\n+\n+    public int getCo2() {\n+        return co2;\n+    }\n+\n+    public int getTvoc() {\n+        return tvoc;\n+    }\n+\n+    private void parseData(int[] data) throws AirthingsParserException {\n+        try {\n+            if (data.length == EXPECTED_DATA_LEN) {\n+                final int version = data[0];\n+\n+                if (version == EXPECTED_VER) {\n+                    humidity = data[1] / 2D;\n+                    radonShortTermAvg = intFromBytes(data[4], data[5]);\n+                    radonLongTermAvg = intFromBytes(data[6], data[7]);\n+                    temperature = intFromBytes(data[8], data[9]) / 100D;\n+                    pressure = intFromBytes(data[10], data[11]) / 50D;\n+                    co2 = intFromBytes(data[12], data[13]);\n+                    tvoc = intFromBytes(data[14], data[15]);\n+                } else {\n+                    throw new AirthingsParserException(\n+                            String.format(\"Unsupported data structure version '%d'\", version));\n+                }\n+            } else {\n+                throw new AirthingsParserException(String.format(\"Illegal data structure length '%d'\", data.length));\n+            }\n+        } catch (RuntimeException e) {", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjQ4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896487", "bodyText": "It has been agreed that using @NonNullByDefault({}) should not be used in these cases. You could use an Optional and configuration.ifPresent(...); instead of @Nullable and a null-check.", "author": "J-N-K", "createdAt": "2020-02-16T11:41:47Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNTIzNA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379905234", "bodyText": "ConfigMapper does not support Optionals, so how those should be then handled? Is there an example?", "author": "paulianttila", "createdAt": "2020-02-16T13:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjgwMw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906803", "bodyText": "This is not complete, I  just wanted to explain the pattern.", "author": "J-N-K", "createdAt": "2020-02-16T14:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjUwMA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896500", "bodyText": "Please make this @Nullable and apply null-checks where necessary.", "author": "J-N-K", "createdAt": "2020-02-16T11:42:11Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896703", "bodyText": "I think you can omit this check (or is getServices expensive?).\nand\ndevice.getServices().forEach(service -> logger.debug(\"Device {} Service '{}'\", address, service));", "author": "J-N-K", "createdAt": "2020-02-16T11:44:48Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            logger.debug(\"Start scheduled task to read device in every {} seconds\", configuration.refreshInterval);\n+            scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, configuration.refreshInterval,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {\n+                    if (servicesResolved) {\n+                        read();\n+                    } else {\n+                        discoverServices();\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void discoverServices() {\n+        logger.debug(\"Discover services for device {}\", address);\n+        if (!device.discoverServices()) {\n+            logger.debug(\"Discovering services failed\");\n+            disconnect();\n+        }\n+    }\n+\n+    private void read() {\n+        logger.debug(\"Read data from device {}...\", address);\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Read data from device {} failed\", address);\n+            disconnect();\n+        }\n+    }\n+\n+    private void printServices() {\n+        if (logger.isDebugEnabled()) {", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjE0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906147", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) AirthingsConfiguration configuration;\n          \n          \n            \n                private Optional<AirthingsConfiguration> configuration = Optional.empty();", "author": "J-N-K", "createdAt": "2020-02-16T14:11:09Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjE3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    configuration = getConfigAs(AirthingsConfiguration.class);\n          \n          \n            \n                    configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));", "author": "J-N-K", "createdAt": "2020-02-16T14:11:27Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjUxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906511", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, configuration.refreshInterval,\n          \n          \n            \n                        configuration.ifPresent(cfg -> {\n          \n          \n            \n                             logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n          \n          \n            \n                             scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval, TimeUnit.SECONDS);\n          \n          \n            \n                            });", "author": "J-N-K", "createdAt": "2020-02-16T14:16:14Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            logger.debug(\"Start scheduled task to read device in every {} seconds\", configuration.refreshInterval);\n+            scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, configuration.refreshInterval,", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906611", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Using configuration: {}\", configuration);\n          \n          \n            \n                    configuration.ifPresent(cfg -> logger.debug(\"Using configuration: {}\", cfg));", "author": "J-N-K", "createdAt": "2020-02-16T14:17:59Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);", "originalCommit": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNDE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380934187", "bodyText": "In the Bluez binding, there is no way initiate a service discovery manually, instead this happens automatically when a device is connected to. As such, the discoverServices implementation always returns false. So you cant rely on a return of false as meaning something failed.", "author": "cpmeister", "createdAt": "2020-02-18T21:05:27Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            configuration.ifPresent(cfg -> {\n+                logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n+                scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval,\n+                        TimeUnit.SECONDS);\n+            });\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {\n+                    if (servicesResolved) {\n+                        read();\n+                    } else {\n+                        discoverServices();\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void discoverServices() {\n+        logger.debug(\"Discover services for device {}\", address);\n+        if (!device.discoverServices()) {\n+            logger.debug(\"Discovering services failed\");\n+            disconnect();\n+        }", "originalCommit": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2MTgyNw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381361827", "bodyText": "Will Bluez send event when services are discovered (onServicesDiscovered)?", "author": "paulianttila", "createdAt": "2020-02-19T15:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381502563", "bodyText": "Yep, in Bluez onServicesDiscovered will always get called after a successful connection (assuming the services get discovered properly)", "author": "cpmeister", "createdAt": "2020-02-19T19:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNDE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTk5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380939999", "bodyText": "Why not use primitive boolean?", "author": "cpmeister", "createdAt": "2020-02-18T21:17:15Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;", "originalCommit": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0OTc1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381349759", "bodyText": "It's used also for synchronisation, which primitive type doesn't support.", "author": "paulianttila", "createdAt": "2020-02-19T15:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDg5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380940899", "bodyText": "Wouldn't the Thing status almost immediately switch back to ONLINE when BeaconBluetoothHandler receives the next scanned rssi value?", "author": "cpmeister", "createdAt": "2020-02-18T21:19:08Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            configuration.ifPresent(cfg -> {\n+                logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n+                scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval,\n+                        TimeUnit.SECONDS);\n+            });\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {\n+                    if (servicesResolved) {\n+                        read();\n+                    } else {\n+                        discoverServices();\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void discoverServices() {\n+        logger.debug(\"Discover services for device {}\", address);\n+        if (!device.discoverServices()) {\n+            logger.debug(\"Discovering services failed\");\n+            disconnect();\n+        }\n+    }\n+\n+    private void read() {\n+        logger.debug(\"Read data from device {}...\", address);\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Read data from device {} failed\", address);\n+            disconnect();\n+        }\n+    }\n+\n+    private void printServices() {\n+        device.getServices().forEach(service -> logger.debug(\"Device {} Service '{}'\", address, service));\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        synchronized (servicesResolved) {\n+            servicesResolved = true;\n+        }\n+        logger.debug(\"Service discovery completed for device {}\", address);\n+        printServices();\n+        execute();\n+    }\n+\n+    @Override\n+    public void onConnectionStateChange(BluetoothConnectionStatusNotification connectionNotification) {\n+        switch (connectionNotification.getConnectionState()) {\n+            case DISCOVERED:\n+                logger.debug(\"Device {} DISCOVERED\", address);\n+                startScheduledTask();\n+                break;\n+            case CONNECTED:\n+                logger.debug(\"Device {} CONNECTED\", address);\n+                execute();\n+                break;\n+            case DISCONNECTED:\n+                logger.debug(\"Device {} DISCONNECTED\", address);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        try {\n+            if (status == BluetoothCompletionStatus.SUCCESS) {\n+                logger.debug(\"Characteristic {} from device {}: {}\", characteristic.getUuid(), address,\n+                        characteristic.getValue());\n+                updateStatus(ThingStatus.ONLINE);\n+                try {\n+                    updateChannels(new AirthingsWavePlusDataParser(characteristic.getValue()));\n+                } catch (AirthingsParserException e) {\n+                    logger.warn(\"Data parsing error occured, when parsing data from device {}, cause {}\", address,\n+                            e.getMessage(), e);\n+                }\n+            } else {\n+                logger.debug(\"Characteristic {} from device {} failed\", characteristic.getUuid(), address);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No response from device\");", "originalCommit": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1MDc0NA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381350744", "bodyText": "Sure, if scan result is received.", "author": "paulianttila", "createdAt": "2020-02-19T15:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODkzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380948939", "bodyText": "I would suggest calling super.dispose() last to give tasks that you might be running at the moment a cleaner shutdown. Disposing the super first is like pulling the rug out from under any asynchronous tasks your handler might be running.", "author": "cpmeister", "createdAt": "2020-02-18T21:35:47Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }", "originalCommit": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxODQxNA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381018414", "bodyText": "Slipped through my attention. I agree.", "author": "J-N-K", "createdAt": "2020-02-19T00:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDc4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380950789", "bodyText": "why isn't this called during initialization?", "author": "cpmeister", "createdAt": "2020-02-18T21:39:25Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {", "originalCommit": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM1NTE2MA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381355160", "bodyText": "If device is not yet discovered (which is not happened during initialisation), first task execution will \"fail\". If user have configured poll intervall e.g. for an hour, next/first poll will happen rather late.", "author": "paulianttila", "createdAt": "2020-02-19T15:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMDI1NA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381500254", "bodyText": "You only start the scheduled task when the handler receives a connections state change to the DISCOVERED state. Which requires two things to happen:\n\nThat the device must switch to the DISCOVERED state, which only happens when the device is initially seen by an adapter. Also, almost all device immediately switch from DISCOVERED to DISCONNECTED, so simply checking if the device is in the DISCOVERED state will often not work.\nThat the handler must be listening to the device when it changes to its DISCOVERED state. This requires that the handler be initialized and running before the device is discovered by a bluetooth adapter. Which means that the handler will not work if the user tries to create the handler from an inbox discovery; If it is in the inbox, that means it was already discovered!\n\nNot to mention that there is no guarantee on openhab startup that the Airthings handler will be started before the bluetooth device handlers. In fact, by virtue of the bluetooth handlers using the bluetooth adapters as a bridge, it is almost guaranteed that the adapters will start first. If the device is in range during that time your handler could very well miss the DISCOVERED event.\nTo summarize: make sure that your scheduled task lifecycle is tied to the handler and not dependent on device state.\nNote: you can always check the device connection state inside your scheduled task", "author": "cpmeister", "createdAt": "2020-02-19T19:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNzEyMA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381507120", "bodyText": "You REALLY shouldn't be synchronizing on a Boolean instance.\nThis post gives an elegant description of why.", "author": "cpmeister", "createdAt": "2020-02-19T19:50:47Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            configuration.ifPresent(cfg -> {\n+                logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n+                scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval,\n+                        TimeUnit.SECONDS);\n+            });\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {", "originalCommit": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4f5a920fc98290e745cf45ab89206dedd37a96de", "url": "https://github.com/openhab/openhab-addons/commit/4f5a920fc98290e745cf45ab89206dedd37a96de", "message": "[airthings] Improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-02-22T12:55:58Z", "type": "forcePushed"}, {"oid": "173d0ef1888394304b7bfaf592de72b5c22c46ac", "url": "https://github.com/openhab/openhab-addons/commit/173d0ef1888394304b7bfaf592de72b5c22c46ac", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-02-25T07:05:22Z", "type": "forcePushed"}, {"oid": "4babdbf9adc7c84be06ea37a42210a5d98bd4bb3", "url": "https://github.com/openhab/openhab-addons/commit/4babdbf9adc7c84be06ea37a42210a5d98bd4bb3", "message": "[airthings] Airthings bluetooth binding initial contribution\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:41:23Z", "type": "commit"}, {"oid": "59214158d74169cb78651f59f5cbecbe97f8bef1", "url": "https://github.com/openhab/openhab-addons/commit/59214158d74169cb78651f59f5cbecbe97f8bef1", "message": "Finalize\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:41:24Z", "type": "commit"}, {"oid": "e0a67cc7f2ac921dc48639169278c01fb9c6edb9", "url": "https://github.com/openhab/openhab-addons/commit/e0a67cc7f2ac921dc48639169278c01fb9c6edb9", "message": "Finalize\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:41:25Z", "type": "commit"}, {"oid": "feca6a41b7912dbbdb76e183cad681e9b7d6afd4", "url": "https://github.com/openhab/openhab-addons/commit/feca6a41b7912dbbdb76e183cad681e9b7d6afd4", "message": "Changed variable visibility\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:41:27Z", "type": "commit"}, {"oid": "7e202d0f59ea3986f214eb2ef6a2ddb765299aa0", "url": "https://github.com/openhab/openhab-addons/commit/7e202d0f59ea3986f214eb2ef6a2ddb765299aa0", "message": "Typo fixes and more annotations\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:41:28Z", "type": "commit"}, {"oid": "22f3aba1eec9ac8415f7d2dbd17806b4e764ba3e", "url": "https://github.com/openhab/openhab-addons/commit/22f3aba1eec9ac8415f7d2dbd17806b4e764ba3e", "message": "Updated notice\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:41:29Z", "type": "commit"}, {"oid": "a15a4f9252cd70a18397da09f8fdb26bdc9931ee", "url": "https://github.com/openhab/openhab-addons/commit/a15a4f9252cd70a18397da09f8fdb26bdc9931ee", "message": "Updated codeowners and parent pom files\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:15Z", "type": "commit"}, {"oid": "08daa9140936bc0080af479950147485e60c2e59", "url": "https://github.com/openhab/openhab-addons/commit/08daa9140936bc0080af479950147485e60c2e59", "message": "Updated to 2.5.2 snapshot\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:16Z", "type": "commit"}, {"oid": "4a7c95b45e5e40c310efedc3ae540cde566a78cc", "url": "https://github.com/openhab/openhab-addons/commit/4a7c95b45e5e40c310efedc3ae540cde566a78cc", "message": "Start scheduled task when device discovered\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:17Z", "type": "commit"}, {"oid": "abaf9a866ec11d2c38569e0b0a08e975a8e9f4f0", "url": "https://github.com/openhab/openhab-addons/commit/abaf9a866ec11d2c38569e0b0a08e975a8e9f4f0", "message": "Simplification\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:19Z", "type": "commit"}, {"oid": "6be2f5e616bab9620c788e79d168c18f82581fe0", "url": "https://github.com/openhab/openhab-addons/commit/6be2f5e616bab9620c788e79d168c18f82581fe0", "message": "Simplified\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:20Z", "type": "commit"}, {"oid": "7fddc5d9e68dd43e68eb27d6aaa08b79021e42fd", "url": "https://github.com/openhab/openhab-addons/commit/7fddc5d9e68dd43e68eb27d6aaa08b79021e42fd", "message": "[airthings] Code review fixes\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:21Z", "type": "commit"}, {"oid": "797b01e5f4a94a3aeaf091faeadd290194bd93f8", "url": "https://github.com/openhab/openhab-addons/commit/797b01e5f4a94a3aeaf091faeadd290194bd93f8", "message": "[airthings] Improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:22Z", "type": "commit"}, {"oid": "57f04498cf70a5635570560c7cd081141d845a7b", "url": "https://github.com/openhab/openhab-addons/commit/57f04498cf70a5635570560c7cd081141d845a7b", "message": "[airthings] Removed timeout functionality\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:23Z", "type": "commit"}, {"oid": "c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "url": "https://github.com/openhab/openhab-addons/commit/c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:24Z", "type": "commit"}, {"oid": "c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "url": "https://github.com/openhab/openhab-addons/commit/c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T10:45:24Z", "type": "forcePushed"}, {"oid": "6a541ed9ef36bbf6658776c149280a0e3d554384", "url": "https://github.com/openhab/openhab-addons/commit/6a541ed9ef36bbf6658776c149280a0e3d554384", "message": "[airthings] Renamed thing name from Plus to +\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T11:21:44Z", "type": "commit"}, {"oid": "d2eaee6db46bd43b47e869c4ca74c5a430fcec8a", "url": "https://github.com/openhab/openhab-addons/commit/d2eaee6db46bd43b47e869c4ca74c5a430fcec8a", "message": "[airthings] Added airthings binding to pom\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T11:26:35Z", "type": "commit"}, {"oid": "f98c92ecf64a632b80d19c9b2903540cb1716180", "url": "https://github.com/openhab/openhab-addons/commit/f98c92ecf64a632b80d19c9b2903540cb1716180", "message": "[airthings] Fixed pom\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T11:35:38Z", "type": "commit"}, {"oid": "95275e302408334730227fa1cf38eb5f60ba2334", "url": "https://github.com/openhab/openhab-addons/commit/95275e302408334730227fa1cf38eb5f60ba2334", "message": "[airthings] Added missing NonNullByDefault\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-07T11:47:23Z", "type": "commit"}, {"oid": "d796fa65dbc02e5d163115dc22b77dc40dea184d", "url": "https://github.com/openhab/openhab-addons/commit/d796fa65dbc02e5d163115dc22b77dc40dea184d", "message": "[airthings] Fixed test data version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-08T07:39:13Z", "type": "commit"}, {"oid": "150358827eee764de52b13788e4538e511a1d6bc", "url": "https://github.com/openhab/openhab-addons/commit/150358827eee764de52b13788e4538e511a1d6bc", "message": "[airthings] Fixed configuration logging\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-08T07:43:13Z", "type": "commit"}, {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887", "url": "https://github.com/openhab/openhab-addons/commit/a7fb2812f94e46f907e51c2fc1be583699a9f887", "message": "[airthings] Use same units than introduced to the core\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>", "committedDate": "2020-03-08T08:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzNDI5OA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389434298", "bodyText": "Small change but much easier to read\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1000000000)));\n          \n          \n            \n                        new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1_000_000_000)));", "author": "cpmeister", "createdAt": "2020-03-09T02:00:01Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsBindingConstants.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import java.math.BigInteger;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.dimension.Density;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link AirthingsBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsBindingConstants {\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_AIRTHINGS_WAVE_PLUS = new ThingTypeUID(\n+            BluetoothBindingConstants.BINDING_ID, \"airthings_wave_plus\");\n+\n+    // Channel IDs\n+    public static final String CHANNEL_ID_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_ID_TEMPERATURE = \"temperature\";\n+    public static final String CHANNEL_ID_PRESSURE = \"pressure\";\n+    public static final String CHANNEL_ID_CO2 = \"co2\";\n+    public static final String CHANNEL_ID_TVOC = \"tvoc\";\n+    public static final String CHANNEL_ID_RADON_ST_AVG = \"radon_st_avg\";\n+    public static final String CHANNEL_ID_RADON_LT_AVG = \"radon_lt_avg\";\n+\n+    public static final Unit<Dimensionless> PARTS_PER_BILLION = new TransformedUnit<>(SmartHomeUnits.ONE,\n+            new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1000000000)));", "originalCommit": "a7fb2812f94e46f907e51c2fc1be583699a9f887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MjQ1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389492455", "bodyText": "These are all ready merged to the OH core, so I like to use same. These will be removed from the binding when 3.0 is published.", "author": "paulianttila", "createdAt": "2020-03-09T07:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzNDI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTkyMg==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389891922", "bodyText": "understood", "author": "cpmeister", "createdAt": "2020-03-09T18:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzNDI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjM2OA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389462368", "bodyText": "Couldn't these be merged into a single state machine?", "author": "cpmeister", "createdAt": "2020-03-09T04:51:01Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+    private static final int CHECK_PERIOD_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private AtomicInteger sinceLastReadSec = new AtomicInteger();\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    private volatile int refreshInterval;\n+\n+    private volatile ServiceState serviceState = ServiceState.NOT_RESOLVED;\n+    private volatile ReadState readState = ReadState.IDLE;\n+\n+    private enum ServiceState {\n+        NOT_RESOLVED,\n+        RESOLVING,\n+        RESOLVED,\n+    }\n+\n+    private enum ReadState {\n+        IDLE,\n+        READING,\n+    }", "originalCommit": "a7fb2812f94e46f907e51c2fc1be583699a9f887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5NjA3OA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389896078", "bodyText": "Most probably yes, but I think that service resolving shouldn't be even duty of the bindings but handled automatically by the BluetoothDevice after connect. Now, every binding need to handle it, which doesn't make sense to me. As you are now simplifying and refactoring BluetoothDevice, I propose that you consider that and we could remove whole service resolving staff out from the binding(s).", "author": "paulianttila", "createdAt": "2020-03-09T18:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2ODc0OA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389968748", "bodyText": "I agree and am completely on board with that. One potential issue that would need to be eventually addressed though are bluetooth devices that might not support the GATT protocol at all.\nSo do you want this binding to be merged before or after the refactoring PR?", "author": "cpmeister", "createdAt": "2020-03-09T21:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyOTg1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r390129851", "bodyText": "My wish is that binding will be merged before refactoring PR.", "author": "paulianttila", "createdAt": "2020-03-10T07:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2NDA5NA==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389464094", "bodyText": "I don't know what purpose this is serving that executing periodic already doesn't. Couldn't this be replaced with a boolean flag?\nSet it to true at the start of the scheduled task.\nSet it to false when value data is successfully read.\nBut even that boolean flag could be replaced as states in an overall state machine.", "author": "cpmeister", "createdAt": "2020-03-09T05:00:22Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+    private static final int CHECK_PERIOD_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private AtomicInteger sinceLastReadSec = new AtomicInteger();", "originalCommit": "a7fb2812f94e46f907e51c2fc1be583699a9f887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1MzMxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389553315", "bodyText": "State machine is updated every 10 second by the scheduler. If polling period is e.g. set to one hour by the user, first read (or second actually) is done after hour and so on. But if poll fails, retry is done after 10 second not after one hour. This functionality can't be implemented by boolean flag or state.", "author": "paulianttila", "createdAt": "2020-03-09T09:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NTQzNw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389975437", "bodyText": "Guess you are right. It didn't occur to me that the scheduler period and read period were different.", "author": "cpmeister", "createdAt": "2020-03-09T21:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2NDA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MjM3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389492373", "bodyText": "You've made a rather complex state machine and I think it should be simplified.\n\nI wouldn't say that this is complex.", "author": "paulianttila", "createdAt": "2020-03-09T07:15:40Z", "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+    private static final int CHECK_PERIOD_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private AtomicInteger sinceLastReadSec = new AtomicInteger();\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    private volatile int refreshInterval;\n+\n+    private volatile ServiceState serviceState = ServiceState.NOT_RESOLVED;\n+    private volatile ReadState readState = ReadState.IDLE;\n+\n+    private enum ServiceState {\n+        NOT_RESOLVED,\n+        RESOLVING,\n+        RESOLVED,\n+    }\n+\n+    private enum ReadState {\n+        IDLE,\n+        READING,\n+    }\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initialize\");\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration.get());\n+        cancelScheduledTask();\n+        configuration.ifPresent(cfg -> {\n+            refreshInterval = cfg.refreshInterval;\n+            logger.debug(\"Start scheduled task to read device in every {} seconds\", refreshInterval);\n+            scheduledTask = scheduler.scheduleWithFixedDelay(this::executePeridioc, CHECK_PERIOD_SEC, CHECK_PERIOD_SEC,\n+                    TimeUnit.SECONDS);\n+        });\n+        sinceLastReadSec.set(refreshInterval); // update immediately\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Dispose\");\n+        cancelScheduledTask();\n+        serviceState = ServiceState.NOT_RESOLVED;\n+        readState = ReadState.IDLE;\n+        super.dispose();\n+    }\n+\n+    private void cancelScheduledTask() {\n+        if (scheduledTask != null) {\n+            scheduledTask.cancel(true);\n+            scheduledTask = null;\n+        }\n+    }\n+\n+    private void executePeridioc() {\n+        sinceLastReadSec.addAndGet(CHECK_PERIOD_SEC);\n+        execute();\n+    }\n+\n+    private synchronized void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}, serviceState {}, readState {}\", address, connectionState, serviceState,\n+                readState);\n+\n+        switch (connectionState) {\n+            case DISCOVERED:\n+            case DISCONNECTED:\n+                if (isTimeToRead()) {\n+                    connect();\n+                }\n+                break;\n+            case CONNECTED:\n+                read();\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void read() {\n+        switch (serviceState) {\n+            case NOT_RESOLVED:\n+                discoverServices();\n+                break;\n+            case RESOLVED:\n+                switch (readState) {\n+                    case IDLE:\n+                        logger.debug(\"Read data from device {}...\", address);\n+                        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+                        if (device.readCharacteristic(characteristic)) {\n+                            readState = ReadState.READING;\n+                        } else {\n+                            logger.debug(\"Read data from device {} failed\", address);\n+                            disconnect();\n+                        }\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            default:\n+                break;\n+        }\n+    }", "originalCommit": "a7fb2812f94e46f907e51c2fc1be583699a9f887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDEwNw==", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389494107", "bodyText": "Maybe complex is the wrong word. Let's just say the code can't be understood at a glance.", "author": "cpmeister", "createdAt": "2020-03-09T07:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MjM3Mw=="}], "type": "inlineReview"}]}