{"pr_number": 8595, "pr_title": "[VolvoOnCall] OH3 update", "pr_createdAt": "2020-09-28T11:05:13Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8595", "timeline": [{"oid": "d0ad7b1a28b3c04e5da861f66aade39b9023f94f", "url": "https://github.com/openhab/openhab-addons/commit/d0ad7b1a28b3c04e5da861f66aade39b9023f94f", "message": "[VolvoOnCall] OH3 update\n\nSolving issue #  and issue #\nSome code corrections and enhancements.\nIntroduced new trigger channels.", "committedDate": "2020-09-28T10:59:50Z", "type": "commit"}, {"oid": "cf1fa3621ed66ab4f3ad0936d1d1a9fb63d90a6b", "url": "https://github.com/openhab/openhab-addons/commit/cf1fa3621ed66ab4f3ad0936d1d1a9fb63d90a6b", "message": "Doing spotless apply", "committedDate": "2020-09-28T11:18:37Z", "type": "commit"}, {"oid": "d526ce85f6737d963cd7bf4de8f2869350da94ae", "url": "https://github.com/openhab/openhab-addons/commit/d526ce85f6737d963cd7bf4de8f2869350da94ae", "message": "Some other code improvements", "committedDate": "2020-09-28T16:14:15Z", "type": "commit"}, {"oid": "507f365c6c2e92d7d8b73c3ab2408f11574b73ab", "url": "https://github.com/openhab/openhab-addons/commit/507f365c6c2e92d7d8b73c3ab2408f11574b73ab", "message": "Moving back to Jetty HttpClient\nIntroduced Expiring cache for request to avoid flooding voc servers\nReduced the number of requests emitted\nChanged  user agent identification\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-02T15:55:02Z", "type": "commit"}, {"oid": "2580359f951cdf5965c69577bcd6e59c6ae2bc54", "url": "https://github.com/openhab/openhab-addons/commit/2580359f951cdf5965c69577bcd6e59c6ae2bc54", "message": "Correcting spotless\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-02T16:03:48Z", "type": "commit"}, {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "url": "https://github.com/openhab/openhab-addons/commit/b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "message": "Pleasing Travis\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-02T17:12:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Mzk5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499093998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ActionResultControler implements Runnable {\n          \n          \n            \n            public class ActionResultController implements Runnable {", "author": "cpmeister", "createdAt": "2020-10-03T00:06:25Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDAyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094022", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PostResponse postResponse;\n          \n          \n            \n                private final PostResponse postResponse;", "author": "cpmeister", "createdAt": "2020-10-03T00:06:35Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ThingHandler vehicle;\n          \n          \n            \n                private final ThingHandler vehicle;", "author": "cpmeister", "createdAt": "2020-10-03T00:06:45Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;\n+\n+    private ThingHandler vehicle;", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDExNg==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.info(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType.toString(),\n          \n          \n            \n                                    postResponse.vehicleId, postResponse.status.toString());\n          \n          \n            \n                            logger.debug(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType,\n          \n          \n            \n                                    postResponse.vehicleId, postResponse.status);", "author": "cpmeister", "createdAt": "2020-10-03T00:07:18Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;\n+\n+    private ThingHandler vehicle;\n+\n+    public ActionResultControler(VocHttpApi service, PostResponse postResponse, ScheduledExecutorService scheduler,\n+            ThingHandler vehicle) {\n+        this.postResponse = postResponse;\n+        this.service = service;\n+        this.scheduler = scheduler;\n+        this.vehicle = vehicle;\n+    }\n+\n+    @Override\n+    public void run() {\n+        switch (postResponse.status) {\n+            case SUCCESSFULL:\n+            case FAILED:\n+                logger.info(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType.toString(),\n+                        postResponse.vehicleId, postResponse.status.toString());", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDI2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094261", "bodyText": "If you received an interrupt you shouldn't schedule more things. Typically an interrupt indicates a shutdown is occurring.", "author": "cpmeister", "createdAt": "2020-10-03T00:08:22Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;\n+\n+    private ThingHandler vehicle;\n+\n+    public ActionResultControler(VocHttpApi service, PostResponse postResponse, ScheduledExecutorService scheduler,\n+            ThingHandler vehicle) {\n+        this.postResponse = postResponse;\n+        this.service = service;\n+        this.scheduler = scheduler;\n+        this.vehicle = vehicle;\n+    }\n+\n+    @Override\n+    public void run() {\n+        switch (postResponse.status) {\n+            case SUCCESSFULL:\n+            case FAILED:\n+                logger.info(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType.toString(),\n+                        postResponse.vehicleId, postResponse.status.toString());\n+                vehicle.handleCommand(vehicle.getThing().getChannels().get(0).getUID(), RefreshType.REFRESH);\n+                break;\n+            default:\n+                try {\n+                    postResponse = service.getURL(postResponse.serviceURL, PostResponse.class);\n+                    scheduler.schedule(this, 10000, TimeUnit.MILLISECONDS);\n+                } catch (VolvoOnCallException e) {\n+                    if (e.getType() == ErrorType.SERVICE_UNAVAILABLE || e.getType() == ErrorType.INTERRUPTED) {\n+                        scheduler.schedule(this, 10000, TimeUnit.MILLISECONDS);", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDk5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094993", "bodyText": "If this actually works then I have no problem with this change.", "author": "cpmeister", "createdAt": "2020-10-03T00:13:34Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/dto/HvBattery.java", "diffHunk": "@@ -26,7 +27,7 @@\n public class HvBattery {\n     public int hvBatteryLevel = UNDEFINED;\n     public int distanceToHVBatteryEmpty = UNDEFINED;\n-    public @NonNullByDefault({}) String hvBatteryChargeStatusDerived;\n+    public @NonNullByDefault({}) StringType hvBatteryChargeStatusDerived;", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMTk1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499121956", "bodyText": "Yes, it works, it's taken in charge by gson jsonDeserializer declaration.", "author": "clinique", "createdAt": "2020-10-03T06:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjMzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499096331", "bodyText": "Please catch specific exceptions, or at the very least catch RuntimeException instead.", "author": "cpmeister", "createdAt": "2020-10-03T00:23:17Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/handler/VolvoOnCallBridgeHandler.java", "diffHunk": "@@ -58,144 +42,60 @@\n  */\n @NonNullByDefault\n public class VolvoOnCallBridgeHandler extends BaseBridgeHandler {\n-    private static final int REQUEST_TIMEOUT = (int) TimeUnit.SECONDS.toMillis(20);\n+\n     private final Logger logger = LoggerFactory.getLogger(VolvoOnCallBridgeHandler.class);\n-    private final Properties httpHeader = new Properties();\n-    private final List<ScheduledFuture<?>> pendingActions = new Stack<>();\n     private final Gson gson;\n+    private final HttpClient httpClient;\n \n-    private @NonNullByDefault({}) CustomerAccounts customerAccount;\n+    private @Nullable VocHttpApi api;\n \n-    public VolvoOnCallBridgeHandler(Bridge bridge) {\n+    public VolvoOnCallBridgeHandler(Bridge bridge, Gson gson, HttpClient httpClient) {\n         super(bridge);\n-\n-        httpHeader.put(\"cache-control\", \"no-cache\");\n-        httpHeader.put(\"content-type\", JSON_CONTENT_TYPE);\n-        httpHeader.put(\"x-device-id\", \"Device\");\n-        httpHeader.put(\"x-originator-type\", \"App\");\n-        httpHeader.put(\"x-os-type\", \"Android\");\n-        httpHeader.put(\"x-os-version\", \"22\");\n-        httpHeader.put(\"Accept\", \"*/*\");\n-\n-        gson = new GsonBuilder()\n-                .registerTypeAdapter(ZonedDateTime.class,\n-                        (JsonDeserializer<ZonedDateTime>) (json, type, jsonDeserializationContext) -> ZonedDateTime\n-                                .parse(json.getAsJsonPrimitive().getAsString().replaceAll(\"\\\\+0000\", \"Z\")))\n-                .registerTypeAdapter(OpenClosedType.class,\n-                        (JsonDeserializer<OpenClosedType>) (json, type,\n-                                jsonDeserializationContext) -> json.getAsBoolean() ? OpenClosedType.OPEN\n-                                        : OpenClosedType.CLOSED)\n-                .registerTypeAdapter(OnOffType.class,\n-                        (JsonDeserializer<OnOffType>) (json, type,\n-                                jsonDeserializationContext) -> json.getAsBoolean() ? OnOffType.ON : OnOffType.OFF)\n-                .create();\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing VolvoOnCall API bridge handler.\");\n-        VolvoOnCallBridgeConfiguration configuration = getConfigAs(VolvoOnCallBridgeConfiguration.class);\n+        ApiBridgeConfiguration configuration = getConfigAs(ApiBridgeConfiguration.class);\n \n-        httpHeader.setProperty(\"Authorization\", configuration.getAuthorization());\n         try {\n-            customerAccount = getURL(SERVICE_URL + \"customeraccounts/\", CustomerAccounts.class);\n-            if (customerAccount.username != null) {\n-                updateStatus(ThingStatus.ONLINE);\n+            api = new VocHttpApi(configuration, gson, httpClient);\n+            CustomerAccounts account = api.getURL(\"customeraccounts/\", CustomerAccounts.class);\n+            if (account.username != null) {\n+                updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, account.username);\n             } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"Incorrect username or password\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Incorrect login credentials\");\n             }\n-        } catch (JsonSyntaxException | VolvoOnCallException e) {\n+        } catch (Exception e) {", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjQ0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499096445", "bodyText": "orphan semicolon", "author": "cpmeister", "createdAt": "2020-10-03T00:24:04Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/handler/VehicleHandler.java", "diffHunk": "@@ -80,20 +82,77 @@\n     private final Logger logger = LoggerFactory.getLogger(VehicleHandler.class);\n     private final Map<String, String> activeOptions = new HashMap<>();\n     private @Nullable ScheduledFuture<?> refreshJob;\n+    private final List<ScheduledFuture<?>> pendingActions = new Stack<>();\n \n     private Vehicles vehicle = new Vehicles();\n     private VehiclePositionWrapper vehiclePosition = new VehiclePositionWrapper(new Position());\n     private Status vehicleStatus = new Status();\n     private @NonNullByDefault({}) VehicleConfiguration configuration;\n-    private Integer lastTripId = 0;\n+    private @NonNullByDefault({}) VolvoOnCallBridgeHandler bridgeHandler;\n+    private long lastTripId;\n \n     public VehicleHandler(Thing thing, VehicleStateDescriptionProvider stateDescriptionProvider) {\n         super(thing);\n     }\n \n-    private Map<String, String> discoverAttributes(VolvoOnCallBridgeHandler bridgeHandler)\n-            throws JsonSyntaxException, IOException, VolvoOnCallException {\n-        Attributes attributes = bridgeHandler.getURL(vehicle.attributesURL, Attributes.class);\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Initializing the Volvo On Call handler for {}\", getThing().getUID());\n+\n+        Bridge bridge = getBridge();\n+        initializeBridge(bridge == null ? null : bridge.getHandler(), bridge == null ? null : bridge.getStatus());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"bridgeStatusChanged {} for thing {}\", bridgeStatusInfo, getThing().getUID());\n+\n+        Bridge bridge = getBridge();\n+        initializeBridge(bridge == null ? null : bridge.getHandler(), bridgeStatusInfo.getStatus());\n+    }\n+\n+    private void initializeBridge(@Nullable ThingHandler thingHandler, @Nullable ThingStatus bridgeStatus) {\n+        logger.debug(\"initializeBridge {} for thing {}\", bridgeStatus, getThing().getUID());\n+\n+        if (thingHandler != null && bridgeStatus != null) {\n+            bridgeHandler = (VolvoOnCallBridgeHandler) thingHandler;\n+            if (bridgeStatus == ThingStatus.ONLINE) {\n+                configuration = getConfigAs(VehicleConfiguration.class);\n+                VocHttpApi api = bridgeHandler.getApi();\n+                if (api != null) {\n+                    try {\n+                        vehicle = api.getURL(\"vehicles/\" + configuration.vin, Vehicles.class);\n+                        if (thing.getProperties().isEmpty()) {\n+                            Map<String, String> properties = discoverAttributes(api);\n+                            updateProperties(properties);\n+                        }\n+\n+                        activeOptions.putAll(\n+                                thing.getProperties().entrySet().stream().filter(p -> \"true\".equals(p.getValue()))\n+                                        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n+\n+                        if (thing.getProperties().containsKey(LAST_TRIP_ID)) {\n+                            lastTripId = Long.parseLong(thing.getProperties().get(LAST_TRIP_ID));\n+                        }\n+\n+                        updateStatus(ThingStatus.ONLINE);\n+                        startAutomaticRefresh(configuration.refresh, api);\n+                    } catch (VolvoOnCallException e) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR, e.getMessage());\n+                    }\n+\n+                }\n+                ;", "originalCommit": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "76a4c9c9947b62af47d82fc4cd26203db772b70c", "url": "https://github.com/openhab/openhab-addons/commit/76a4c9c9947b62af47d82fc4cd26203db772b70c", "message": "Code review corrections\n\nSigned-off-by: clinique <gael@lhopital.org>", "committedDate": "2020-10-03T06:44:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MzEzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499143134", "bodyText": "Don't lose track of the source exception.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new VolvoOnCallException(new IOException(\"Unable to start Jetty HttpClient\"));\n          \n          \n            \n                        throw new VolvoOnCallException(new IOException(\"Unable to start Jetty HttpClient\", e));", "author": "cpmeister", "createdAt": "2020-10-03T12:18:52Z", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/VocHttpApi.java", "diffHunk": "@@ -60,14 +60,19 @@\n     private final HttpClient httpClient;\n     private final ApiBridgeConfiguration configuration;\n \n-    public VocHttpApi(ApiBridgeConfiguration configuration, Gson gson, HttpClient httpClient) throws Exception {\n+    public VocHttpApi(ApiBridgeConfiguration configuration, Gson gson, HttpClient httpClient)\n+            throws VolvoOnCallException {\n         this.gson = gson;\n         this.cache = new ExpiringCacheMap<>(120 * 1000);\n         this.configuration = configuration;\n         this.httpClient = httpClient;\n \n         httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, \"openhab/voc_binding/\" + InstanceUUID.get()));\n-        httpClient.start();\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new VolvoOnCallException(new IOException(\"Unable to start Jetty HttpClient\"));", "originalCommit": "76a4c9c9947b62af47d82fc4cd26203db772b70c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2d6363db6ad56a364ba502c404ea59fc98da8f46", "url": "https://github.com/openhab/openhab-addons/commit/2d6363db6ad56a364ba502c404ea59fc98da8f46", "message": "Adressing cpmeister code review", "committedDate": "2020-10-03T14:48:42Z", "type": "commit"}]}