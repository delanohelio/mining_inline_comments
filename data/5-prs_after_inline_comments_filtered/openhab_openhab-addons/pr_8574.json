{"pr_number": 8574, "pr_title": "[kostalinverter] Add Second Generation (Piko10-20) type inverters", "pr_createdAt": "2020-09-24T19:24:46Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8574", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NDE2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501054163", "bodyText": "There's also a ONE unit. Same for the S0 counter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            SecondGenerationBindingConstants.CHANNEL_CHARGECYCLES, \"td\", 124, SmartHomeUnits.PERCENT, \"33556228\"));\n          \n          \n            \n                    channelConfigurationExt.add(new SecondGenerationChannelConfiguration(\n          \n          \n            \n                            SecondGenerationBindingConstants.CHANNEL_CHARGECYCLES, \"td\", 124, SmartHomeUnits.ONE, \"33556228\"));\n          \n          \n            \n                    channelConfigurationExt.add(new SecondGenerationChannelConfiguration(", "author": "fwolter", "createdAt": "2020-10-07T14:22:50Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationChannelConfiguration.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+/**\n+ * The {@link SecondGenerationChannelConfiguration} class defines methods, which set up channel configuration,\n+ * used in the second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Added methods for channel configuration (Piko1020, Piko New Generation)\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationChannelConfiguration {\n+    public String id;\n+    public String tag;\n+    public int num;\n+    public Unit<?> unit;\n+    public String dxsEntries;\n+\n+    public SecondGenerationChannelConfiguration(String id, String tag, int num, Unit<?> unit, String dxsEntries) {\n+        this.id = id;\n+        this.tag = tag;\n+        this.num = num;\n+        this.unit = unit;\n+        this.dxsEntries = dxsEntries;\n+    }\n+\n+    public static List<SecondGenerationChannelConfiguration> getChannelConfiguration() {\n+        final List<SecondGenerationChannelConfiguration> channelConfiguration = new ArrayList<>();\n+\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDOUTPUTPOWER, \"td\", 4, SmartHomeUnits.WATT, \"67109120\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_YIELD_DAY, \"td\", 7, SmartHomeUnits.WATT_HOUR, \"251658754\"));\n+        channelConfiguration\n+                .add(new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_YIELD_TOTAL,\n+                        \"td\", 10, SmartHomeUnits.KILOWATT_HOUR, \"251658753\"));\n+        channelConfiguration\n+                .add(new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_OPERATING_STATUS,\n+                        \"td\", 13, SmartHomeUnits.PERCENT, \"16780032\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDVOLTAGEL1, \"td\", 16, SmartHomeUnits.VOLT, \"67109378\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDCURRENTL1, \"td\", 19, SmartHomeUnits.AMPERE, \"67109377\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDPOWERL1, \"td\", 22, SmartHomeUnits.WATT, \"67109377\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDVOLTAGEL2, \"td\", 25, SmartHomeUnits.VOLT, \"67109634\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDCURRENTL2, \"td\", 28, SmartHomeUnits.AMPERE, \"67109633\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDPOWERL2, \"td\", 31, SmartHomeUnits.WATT, \"67109635\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDVOLTAGEL3, \"td\", 34, SmartHomeUnits.VOLT, \"67109890\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDCURRENTL3, \"td\", 37, SmartHomeUnits.AMPERE, \"67109889\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDPOWERL3, \"td\", 40, SmartHomeUnits.WATT, \"67109891\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DCPOWERPV, \"td\", 43, SmartHomeUnits.WATT, \"33556736\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC1VOLTAGE, \"td\", 46, SmartHomeUnits.VOLT, \"33555202\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC1CURRENT, \"td\", 49, SmartHomeUnits.AMPERE, \"33555201\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC1POWER, \"td\", 52, SmartHomeUnits.WATT, \"33555203\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC2VOLTAGE, \"td\", 55, SmartHomeUnits.VOLT, \"33555458\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC2CURRENT, \"td\", 58, SmartHomeUnits.AMPERE, \"33555457\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC2POWER, \"td\", 61, SmartHomeUnits.WATT, \"33555459\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC3VOLTAGE, \"td\", 64, SmartHomeUnits.VOLT, \"33555714\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC3CURRENT, \"td\", 67, SmartHomeUnits.AMPERE, \"33555713\"));\n+        channelConfiguration.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_DC3POWER, \"td\", 70, SmartHomeUnits.WATT, \"33555715\"));\n+\n+        return channelConfiguration;\n+    }\n+\n+    public static List<SecondGenerationChannelConfiguration> getChannelConfigurationExt() {\n+        final List<SecondGenerationChannelConfiguration> channelConfigurationExt = new ArrayList<>();\n+\n+        channelConfigurationExt.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_AKTHOMECONSUMTIONSOLAR, \"td\", 73, SmartHomeUnits.WATT,\n+                \"83886336\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_AKTHOMECONSUMPTIONBAT,\n+                        \"td\", 76, SmartHomeUnits.WATT, \"83886592\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_AKTHOMECONSUMPTIONBAT,\n+                        \"td\", 79, SmartHomeUnits.WATT_HOUR, \"83886848\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_PHASESELHOMECONSUMPL1,\n+                        \"td\", 82, SmartHomeUnits.WATT, \"83887106\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_PHASESELHOMECONSUMPL2,\n+                        \"td\", 85, SmartHomeUnits.WATT, \"83887362\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_PHASESELHOMECONSUMPL3,\n+                        \"td\", 88, SmartHomeUnits.WATT, \"83887618\"));\n+        channelConfigurationExt.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_GRIDFREQ, \"td\", 91, SmartHomeUnits.HERTZ, \"67110400\"));\n+        channelConfigurationExt\n+                .add(new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_GRIDCOSPHI, \"td\",\n+                        94, SmartHomeUnits.DEGREE_ANGLE, \"67110656\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_HOMECONSUMPTION_DAY,\n+                        \"td\", 97, SmartHomeUnits.WATT_HOUR, \"251659010\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_OWNCONSUMPTION_DAY,\n+                        \"td\", 100, SmartHomeUnits.WATT_HOUR, \"251659266\"));\n+        channelConfigurationExt\n+                .add(new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_OWNCONSRATE_DAY,\n+                        \"td\", 103, SmartHomeUnits.PERCENT, \"251659278\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_AUTONOMYDEGREE_DAY,\n+                        \"td\", 106, SmartHomeUnits.PERCENT, \"251659279\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_HOMECONSUMPTION_TOTAL,\n+                        \"td\", 109, SmartHomeUnits.WATT_HOUR, \"251659009\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_OWNCONSUMPTION_TOTAL,\n+                        \"td\", 112, SmartHomeUnits.WATT_HOUR, \"251659265\"));\n+        channelConfigurationExt.add(\n+                new SecondGenerationChannelConfiguration(SecondGenerationBindingConstants.CHANNEL_TOTALOPERATINGTIME,\n+                        \"td\", 115, SmartHomeUnits.HOUR, \"251658496\"));\n+        channelConfigurationExt.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_CURRENT, \"td\", 118, SmartHomeUnits.AMPERE, \"33556238\"));\n+        channelConfigurationExt.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_CURRENTDIR, \"td\", 121, SmartHomeUnits.AMPERE, \"33556230\"));\n+        channelConfigurationExt.add(new SecondGenerationChannelConfiguration(\n+                SecondGenerationBindingConstants.CHANNEL_CHARGECYCLES, \"td\", 124, SmartHomeUnits.PERCENT, \"33556228\"));\n+        channelConfigurationExt.add(new SecondGenerationChannelConfiguration(", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1ODAxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501058016", "bodyText": "This could be moved to the handler or the constants class. Also, it's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "author": "fwolter", "createdAt": "2020-10-07T14:27:37Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationConfiguration.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link SecondGenerationConfiguration} class contains fields mapping thing configuration parameters,\n+ * used in the second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ *\n+ */\n+@NonNullByDefault\n+public class SecondGenerationConfiguration {\n+\n+    public static final long REFRESHINTERVAL = 60;", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1ODEyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501058120", "bodyText": "Can this be String?", "author": "fwolter", "createdAt": "2020-10-07T14:27:44Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationConfiguration.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link SecondGenerationConfiguration} class contains fields mapping thing configuration parameters,\n+ * used in the second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ *\n+ */\n+@NonNullByDefault\n+public class SecondGenerationConfiguration {\n+\n+    public static final long REFRESHINTERVAL = 60;\n+\n+    public Object url = \"\";", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MzIwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501063201", "bodyText": "These could be merged to a single if. Can you handle the REFRESH command? You could use ExpiringCache to reduce the invocations of refresh(), as REFRESH is triggered for each Channel.", "author": "fwolter", "createdAt": "2020-10-07T14:34:10Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2NDQ1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501064459", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "author": "fwolter", "createdAt": "2020-10-07T14:35:39Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationConfiguration handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationConfiguration.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                updateStatus(ThingStatus.ONLINE);\n+                refresh();\n+            } catch (RuntimeException scheduleWithFixedDelayException) {", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNTA5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518805099", "bodyText": "Can you comment on this?", "author": "fwolter", "createdAt": "2020-11-06T14:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2NDQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2NTYyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501065622", "bodyText": "Better set the Thing to ONLINE after the communication has succeeded. This avoids flickering of the state.", "author": "fwolter", "createdAt": "2020-10-07T14:37:06Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationConfiguration handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationConfiguration.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                updateStatus(ThingStatus.ONLINE);", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2ODAwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501068002", "bodyText": "DTOs don't need to be annotated. You could append DTO to the class name to avoid the checkstyle warning. Then, you can also remove @SuppressWarnings of refresh() in the handler.", "author": "fwolter", "createdAt": "2020-10-07T14:40:06Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationDxsEntriesContainer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link SecondGenerationDxsEntriesContainer} class defines an Container, which is\n+ * used in the second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2OTA5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501069090", "bodyText": "You should specify the concrete exception you want to catch, since catching Exception catches also all runtime exceptions.", "author": "fwolter", "createdAt": "2020-10-07T14:41:33Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationConfiguration handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationConfiguration.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                updateStatus(ThingStatus.ONLINE);\n+                refresh();\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error refreshing source = {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            }\n+        }, 0, SecondGenerationConfiguration.REFRESHINTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void refresh() {\n+        final @Nullable SecondGenerationConfiguration refreshConfig;\n+        refreshConfig = getConfigAs(SecondGenerationConfiguration.class);\n+        String dxsEntriesCall = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        String dxsEntriesCallExt = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries;\n+\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+            dxsEntriesCallExt += (\"&dxsEntries=\" + channelConfigsExt.get(i).dxsEntries);\n+        }\n+\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        String jsonDxsEntriesResponseExt = callURL(dxsEntriesCallExt);\n+        String jsonDxsEntriesResponseExtExt = callURL(refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries + \"&dxsEntries=\" + channelConfigsExt.get(1).dxsEntries\n+                + \"&dxsEntries=\" + channelConfigsExt.get(2).dxsEntries);\n+\n+        // Get Gson object\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+        // Parse result\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainer = gson.fromJson(jsonDxsEntriesResponse,\n+                SecondGenerationDxsEntriesContainer.class);\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainerExt = gson.fromJson(jsonDxsEntriesResponseExt,\n+                SecondGenerationDxsEntriesContainer.class);\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainerExtExt = gson.fromJson(jsonDxsEntriesResponseExtExt,\n+                SecondGenerationDxsEntriesContainer.class);\n+\n+        // Create channel-posts array's\n+        String[] channelPosts = new String[23];\n+        String[] channelPostsExt = new String[23];\n+        String[] channelPostsExtExt = new String[3];\n+\n+        // Fill channelPosts with each item value\n+        int channelPostsCounter = 0;\n+        for (SecondGenerationDxsEntries dxsentries : dxsEntriesContainer.dxsEntries) {\n+            channelPosts[channelPostsCounter] = dxsentries.getName();\n+            channelPostsCounter++;\n+        }\n+\n+        // Fill channelPostsExt with each item value\n+        int channelPostsCounterExt = 0;\n+        for (SecondGenerationDxsEntries dxsentriesExt : dxsEntriesContainerExt.dxsEntries) {\n+            channelPostsExt[channelPostsCounterExt] = dxsentriesExt.getName();\n+            channelPostsCounterExt++;\n+        }\n+\n+        // Fill channelPostsExtExt with each item value\n+        int channelPostsCounterExtExt = 0;\n+        for (SecondGenerationDxsEntries dxsentriesExtExt : dxsEntriesContainerExtExt.dxsEntries) {\n+            channelPostsExtExt[channelPostsCounterExtExt] = dxsentriesExtExt.getName();\n+            channelPostsCounterExtExt++;\n+        }\n+\n+        // Create and update actual values for each channelPost\n+        int channelValuesCounter = 0;\n+\n+        for (SecondGenerationChannelConfiguration cConfig : channelConfigs) {\n+            Channel channel = getThing().getChannel(cConfig.id);\n+            State state = getState(channelPosts[channelValuesCounter], cConfig.unit);\n+\n+            // Update the channel\n+            if (state != null) {\n+                updateState(channel.getUID().getId(), state);\n+                channelValuesCounter++;\n+            }\n+        }\n+\n+        // Create and update actual values for each channelPostExt\n+        int channelValuesCounterExt = 0;\n+        for (SecondGenerationChannelConfiguration cConfig : channelConfigsExt) {\n+            Channel channel = getThing().getChannel(cConfig.id);\n+            State state = getState(channelPostsExt[channelValuesCounterExt], cConfig.unit);\n+\n+            // Update the channel\n+            if (state != null) {\n+                updateState(channel.getUID().getId(), state);\n+                channelValuesCounterExt++;\n+            }\n+        }\n+\n+        // Create and update actual values for each channelPostExtExt\n+        int channelValuesCounterExtExt = 0;\n+        for (SecondGenerationChannelConfiguration cConfig : channelConfigsExtExt) {\n+            Channel channel = getThing().getChannel(cConfig.id);\n+            State state = getState(channelPostsExtExt[channelValuesCounterExtExt], cConfig.unit);\n+\n+            // Update the channel\n+            if (state != null) {\n+                updateState(channel.getUID().getId(), state);\n+                channelValuesCounterExtExt++;\n+            }\n+        }\n+    }\n+\n+    // Helper method to handleCommand method\n+    public final void preSetExecuteConfigurationChanges(HttpClient httpClient, String url, String username,\n+            String password, String dxsEntriesConf, String valueConfiguration) {\n+        try {\n+            SecondGenerationConfigurationHandler.executeConfigurationChanges(httpClient, url, username, password,\n+                    dxsEntriesConf, valueConfiguration);\n+        } catch (Exception handleCommandException) {", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNzUxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518807518", "bodyText": "Can you comment on this?", "author": "fwolter", "createdAt": "2020-11-06T15:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2OTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MDI4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501070289", "bodyText": "Is there a reason why you don't use the httpClient?", "author": "fwolter", "createdAt": "2020-10-07T14:43:02Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationConfiguration handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationConfiguration.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                updateStatus(ThingStatus.ONLINE);\n+                refresh();\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error refreshing source = {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            }\n+        }, 0, SecondGenerationConfiguration.REFRESHINTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void refresh() {\n+        final @Nullable SecondGenerationConfiguration refreshConfig;\n+        refreshConfig = getConfigAs(SecondGenerationConfiguration.class);\n+        String dxsEntriesCall = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        String dxsEntriesCallExt = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries;\n+\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+            dxsEntriesCallExt += (\"&dxsEntries=\" + channelConfigsExt.get(i).dxsEntries);\n+        }\n+\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        String jsonDxsEntriesResponseExt = callURL(dxsEntriesCallExt);\n+        String jsonDxsEntriesResponseExtExt = callURL(refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries + \"&dxsEntries=\" + channelConfigsExt.get(1).dxsEntries\n+                + \"&dxsEntries=\" + channelConfigsExt.get(2).dxsEntries);\n+\n+        // Get Gson object\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+        // Parse result\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainer = gson.fromJson(jsonDxsEntriesResponse,\n+                SecondGenerationDxsEntriesContainer.class);\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainerExt = gson.fromJson(jsonDxsEntriesResponseExt,\n+                SecondGenerationDxsEntriesContainer.class);\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainerExtExt = gson.fromJson(jsonDxsEntriesResponseExtExt,\n+                SecondGenerationDxsEntriesContainer.class);\n+\n+        // Create channel-posts array's\n+        String[] channelPosts = new String[23];\n+        String[] channelPostsExt = new String[23];\n+        String[] channelPostsExtExt = new String[3];\n+\n+        // Fill channelPosts with each item value\n+        int channelPostsCounter = 0;\n+        for (SecondGenerationDxsEntries dxsentries : dxsEntriesContainer.dxsEntries) {\n+            channelPosts[channelPostsCounter] = dxsentries.getName();\n+            channelPostsCounter++;\n+        }\n+\n+        // Fill channelPostsExt with each item value\n+        int channelPostsCounterExt = 0;\n+        for (SecondGenerationDxsEntries dxsentriesExt : dxsEntriesContainerExt.dxsEntries) {\n+            channelPostsExt[channelPostsCounterExt] = dxsentriesExt.getName();\n+            channelPostsCounterExt++;\n+        }\n+\n+        // Fill channelPostsExtExt with each item value\n+        int channelPostsCounterExtExt = 0;\n+        for (SecondGenerationDxsEntries dxsentriesExtExt : dxsEntriesContainerExtExt.dxsEntries) {\n+            channelPostsExtExt[channelPostsCounterExtExt] = dxsentriesExtExt.getName();\n+            channelPostsCounterExtExt++;\n+        }\n+\n+        // Create and update actual values for each channelPost\n+        int channelValuesCounter = 0;\n+\n+        for (SecondGenerationChannelConfiguration cConfig : channelConfigs) {\n+            Channel channel = getThing().getChannel(cConfig.id);\n+            State state = getState(channelPosts[channelValuesCounter], cConfig.unit);\n+\n+            // Update the channel\n+            if (state != null) {\n+                updateState(channel.getUID().getId(), state);\n+                channelValuesCounter++;\n+            }\n+        }\n+\n+        // Create and update actual values for each channelPostExt\n+        int channelValuesCounterExt = 0;\n+        for (SecondGenerationChannelConfiguration cConfig : channelConfigsExt) {\n+            Channel channel = getThing().getChannel(cConfig.id);\n+            State state = getState(channelPostsExt[channelValuesCounterExt], cConfig.unit);\n+\n+            // Update the channel\n+            if (state != null) {\n+                updateState(channel.getUID().getId(), state);\n+                channelValuesCounterExt++;\n+            }\n+        }\n+\n+        // Create and update actual values for each channelPostExtExt\n+        int channelValuesCounterExtExt = 0;\n+        for (SecondGenerationChannelConfiguration cConfig : channelConfigsExtExt) {\n+            Channel channel = getThing().getChannel(cConfig.id);\n+            State state = getState(channelPostsExtExt[channelValuesCounterExtExt], cConfig.unit);\n+\n+            // Update the channel\n+            if (state != null) {\n+                updateState(channel.getUID().getId(), state);\n+                channelValuesCounterExtExt++;\n+            }\n+        }\n+    }\n+\n+    // Helper method to handleCommand method\n+    public final void preSetExecuteConfigurationChanges(HttpClient httpClient, String url, String username,\n+            String password, String dxsEntriesConf, String valueConfiguration) {\n+        try {\n+            SecondGenerationConfigurationHandler.executeConfigurationChanges(httpClient, url, username, password,\n+                    dxsEntriesConf, valueConfiguration);\n+        } catch (Exception handleCommandException) {\n+            logger.debug(\"Handle command for {} on channel {}: {}: {}: {}: {}\", thing.getUID(), httpClient, url,\n+                    dxsEntriesConf, valueConfiguration, handleCommandException.getMessage());\n+        }\n+    }\n+\n+    public final String callURL(String myURL) {", "originalCommit": "b246c14fc937cf5a260588d0d6505c65433607e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTIxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501939213", "bodyText": "Please save the Future returned here in a field then cancel it when this handler is disposed.", "author": "cpmeister", "createdAt": "2020-10-08T18:47:24Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {", "originalCommit": "a23cb96524f25000440822cab4ca9f2b22523662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzOTY1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501939655", "bodyText": "Please save this gson object in a static final field so that you can reuse it.", "author": "cpmeister", "createdAt": "2020-10-08T18:48:15Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                updateStatus(ThingStatus.ONLINE);\n+                refresh();\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error refreshing source = {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            }\n+        }, 0, SecondGenerationBindingConstants.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void refresh() {\n+        final @Nullable SecondGenerationBindingConstants refreshConfig;\n+        refreshConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+        String dxsEntriesCall = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        String dxsEntriesCallExt = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries;\n+\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+            dxsEntriesCallExt += (\"&dxsEntries=\" + channelConfigsExt.get(i).dxsEntries);\n+        }\n+\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        String jsonDxsEntriesResponseExt = callURL(dxsEntriesCallExt);\n+        String jsonDxsEntriesResponseExtExt = callURL(refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries + \"&dxsEntries=\" + channelConfigsExt.get(1).dxsEntries\n+                + \"&dxsEntries=\" + channelConfigsExt.get(2).dxsEntries);\n+\n+        // Get Gson object\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();", "originalCommit": "a23cb96524f25000440822cab4ca9f2b22523662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDQxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501944419", "bodyText": "Why aren't these just concatenated into a single String[]?", "author": "cpmeister", "createdAt": "2020-10-08T18:56:29Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+        if (command instanceof RefreshType) {\n+            logger.debug(\"Handle command for {} on channel {}: {}\", thing.getUID(), channelUID, command);\n+        }\n+\n+        if (command == RefreshType.REFRESH) {\n+            return;\n+        }\n+\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                updateStatus(ThingStatus.ONLINE);\n+                refresh();\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error refreshing source = {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            }\n+        }, 0, SecondGenerationBindingConstants.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void refresh() {\n+        final @Nullable SecondGenerationBindingConstants refreshConfig;\n+        refreshConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+        String dxsEntriesCall = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        String dxsEntriesCallExt = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries;\n+\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+            dxsEntriesCallExt += (\"&dxsEntries=\" + channelConfigsExt.get(i).dxsEntries);\n+        }\n+\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        String jsonDxsEntriesResponseExt = callURL(dxsEntriesCallExt);\n+        String jsonDxsEntriesResponseExtExt = callURL(refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries + \"&dxsEntries=\" + channelConfigsExt.get(1).dxsEntries\n+                + \"&dxsEntries=\" + channelConfigsExt.get(2).dxsEntries);\n+\n+        // Get Gson object\n+        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+        // Parse result\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainer = gson.fromJson(jsonDxsEntriesResponse,\n+                SecondGenerationDxsEntriesContainer.class);\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainerExt = gson.fromJson(jsonDxsEntriesResponseExt,\n+                SecondGenerationDxsEntriesContainer.class);\n+        SecondGenerationDxsEntriesContainer dxsEntriesContainerExtExt = gson.fromJson(jsonDxsEntriesResponseExtExt,\n+                SecondGenerationDxsEntriesContainer.class);\n+\n+        // Create channel-posts array's\n+        String[] channelPosts = new String[23];\n+        String[] channelPostsExt = new String[23];\n+        String[] channelPostsExtExt = new String[3];\n+\n+        // Fill channelPosts with each item value\n+        int channelPostsCounter = 0;\n+        for (SecondGenerationDxsEntries dxsentries : dxsEntriesContainer.dxsEntries) {\n+            channelPosts[channelPostsCounter] = dxsentries.getName();\n+            channelPostsCounter++;\n+        }\n+\n+        // Fill channelPostsExt with each item value\n+        int channelPostsCounterExt = 0;\n+        for (SecondGenerationDxsEntries dxsentriesExt : dxsEntriesContainerExt.dxsEntries) {\n+            channelPostsExt[channelPostsCounterExt] = dxsentriesExt.getName();\n+            channelPostsCounterExt++;\n+        }\n+\n+        // Fill channelPostsExtExt with each item value\n+        int channelPostsCounterExtExt = 0;\n+        for (SecondGenerationDxsEntries dxsentriesExtExt : dxsEntriesContainerExtExt.dxsEntries) {\n+            channelPostsExtExt[channelPostsCounterExtExt] = dxsentriesExtExt.getName();\n+            channelPostsCounterExtExt++;\n+        }", "originalCommit": "a23cb96524f25000440822cab4ca9f2b22523662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzU5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501967598", "bodyText": "It's only possible to scrape maximum 23 values (dxsId's)  each time from the inverter.", "author": "basse04", "createdAt": "2020-10-08T19:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MTg4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501981888", "bodyText": "I wasn't talking about scraping the values, I was referring to aggregating the retrieved values into a single array/list.\nSomething like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] channelPosts = new String[23];\n          \n          \n            \n                    String[] channelPostsExt = new String[23];\n          \n          \n            \n                    String[] channelPostsExtExt = new String[3];\n          \n          \n            \n            \n          \n          \n            \n                    // Fill channelPosts with each item value\n          \n          \n            \n                    int channelPostsCounter = 0;\n          \n          \n            \n                    for (SecondGenerationDxsEntries dxsentries : dxsEntriesContainer.dxsEntries) {\n          \n          \n            \n                        channelPosts[channelPostsCounter] = dxsentries.getName();\n          \n          \n            \n                        channelPostsCounter++;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // Fill channelPostsExt with each item value\n          \n          \n            \n                    int channelPostsCounterExt = 0;\n          \n          \n            \n                    for (SecondGenerationDxsEntries dxsentriesExt : dxsEntriesContainerExt.dxsEntries) {\n          \n          \n            \n                        channelPostsExt[channelPostsCounterExt] = dxsentriesExt.getName();\n          \n          \n            \n                        channelPostsCounterExt++;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // Fill channelPostsExtExt with each item value\n          \n          \n            \n                    int channelPostsCounterExtExt = 0;\n          \n          \n            \n                    for (SecondGenerationDxsEntries dxsentriesExtExt : dxsEntriesContainerExtExt.dxsEntries) {\n          \n          \n            \n                        channelPostsExtExt[channelPostsCounterExtExt] = dxsentriesExtExt.getName();\n          \n          \n            \n                        channelPostsCounterExtExt++;\n          \n          \n            \n                    }\n          \n          \n            \n                    List<String> channelPosts = Stream.concat(dxsEntriesContainer.dxsEntries.stream(),\n          \n          \n            \n                    dxsEntriesContainerExt.dxsEntries.stream(),dxsEntriesContainerExtExt.dxsEntries.stream())\n          \n          \n            \n                    .map(SecondGenerationDxsEntries::getName)\n          \n          \n            \n                    .collect(Collectors.toList());", "author": "cpmeister", "createdAt": "2020-10-08T20:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjA5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r501986092", "bodyText": "Sorry, for the misunderstanding. I will have a look and be back asap.", "author": "basse04", "createdAt": "2020-10-08T20:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMDg4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518800885", "bodyText": "Can you specify the encoding you expect? E.g. StandardCharsets.UTF_8", "author": "fwolter", "createdAt": "2020-11-06T14:52:07Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationConfigurationHandler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link SecondGenerationConfigurationHandler} is responsible for configuration changes,\n+ * regarded to second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationConfigurationHandler {\n+\n+    public static void executeConfigurationChanges(HttpClient httpClient, String url, String username, String password,\n+            String dxsId, String value)\n+            throws InterruptedException, ExecutionException, TimeoutException, NoSuchAlgorithmException {\n+        String urlLogin = url + \"/api/login.json?\";\n+        String salt = \"\";\n+        String sessionId = \"\";\n+\n+        Logger logger = LoggerFactory.getLogger(SecondGenerationConfigurationHandler.class);\n+\n+        String getAuthenticateResponse = httpClient.GET(urlLogin).getContentAsString();\n+\n+        try {\n+            JsonObject getAuthenticateResponseJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(getAuthenticateResponse));\n+\n+            sessionId = extractSessionId(getAuthenticateResponseJsonObject);\n+\n+            JsonObject authenticateJsonObject = new JsonParser().parse(getAuthenticateResponse.toString())\n+                    .getAsJsonObject();\n+            salt = authenticateJsonObject.get(\"salt\").getAsString();\n+\n+            String saltedPassword = new StringBuilder(password).append(salt).toString();\n+            MessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+\n+            byte[] mDigestedPassword = mDigest.digest(saltedPassword.getBytes(StandardCharsets.UTF_8));\n+            StringBuilder loginPostStringBuilder = new StringBuilder();\n+            for (int i = 0; i < mDigestedPassword.length; i++) {\n+                loginPostStringBuilder.append(Integer.toString((mDigestedPassword[i] & 0xff) + 0x100, 16).substring(1));\n+            }\n+            String saltedmDigestedPwd = Base64.getEncoder().encodeToString(mDigest.digest(saltedPassword.getBytes()));\n+\n+            String loginPostJsonData = \"{\\\"mode\\\":1,\\\"userId\\\":\\\"\" + username + \"\\\",\\\"pwh\\\":\\\"\" + saltedmDigestedPwd\n+                    + \"\\\"}\";\n+\n+            Request loginPostJsonResponse = httpClient.POST(urlLogin + \"?sessionId=\" + sessionId);\n+            loginPostJsonResponse.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            loginPostJsonResponse.content(new StringContentProvider(loginPostJsonData));\n+            ContentResponse loginPostJsonDataContentResponse = loginPostJsonResponse.send();\n+\n+            String loginPostResponse = new String(loginPostJsonDataContentResponse.getContent());", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMTYwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518801606", "bodyText": "InterruptedException and ExecutionException are never thrown here.", "author": "fwolter", "createdAt": "2020-11-06T14:53:10Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationConfigurationHandler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link SecondGenerationConfigurationHandler} is responsible for configuration changes,\n+ * regarded to second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationConfigurationHandler {\n+\n+    public static void executeConfigurationChanges(HttpClient httpClient, String url, String username, String password,\n+            String dxsId, String value)\n+            throws InterruptedException, ExecutionException, TimeoutException, NoSuchAlgorithmException {\n+        String urlLogin = url + \"/api/login.json?\";\n+        String salt = \"\";\n+        String sessionId = \"\";\n+\n+        Logger logger = LoggerFactory.getLogger(SecondGenerationConfigurationHandler.class);\n+\n+        String getAuthenticateResponse = httpClient.GET(urlLogin).getContentAsString();\n+\n+        try {\n+            JsonObject getAuthenticateResponseJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(getAuthenticateResponse));\n+\n+            sessionId = extractSessionId(getAuthenticateResponseJsonObject);\n+\n+            JsonObject authenticateJsonObject = new JsonParser().parse(getAuthenticateResponse.toString())\n+                    .getAsJsonObject();\n+            salt = authenticateJsonObject.get(\"salt\").getAsString();\n+\n+            String saltedPassword = new StringBuilder(password).append(salt).toString();\n+            MessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+\n+            byte[] mDigestedPassword = mDigest.digest(saltedPassword.getBytes(StandardCharsets.UTF_8));\n+            StringBuilder loginPostStringBuilder = new StringBuilder();\n+            for (int i = 0; i < mDigestedPassword.length; i++) {\n+                loginPostStringBuilder.append(Integer.toString((mDigestedPassword[i] & 0xff) + 0x100, 16).substring(1));\n+            }\n+            String saltedmDigestedPwd = Base64.getEncoder().encodeToString(mDigest.digest(saltedPassword.getBytes()));\n+\n+            String loginPostJsonData = \"{\\\"mode\\\":1,\\\"userId\\\":\\\"\" + username + \"\\\",\\\"pwh\\\":\\\"\" + saltedmDigestedPwd\n+                    + \"\\\"}\";\n+\n+            Request loginPostJsonResponse = httpClient.POST(urlLogin + \"?sessionId=\" + sessionId);\n+            loginPostJsonResponse.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            loginPostJsonResponse.content(new StringContentProvider(loginPostJsonData));\n+            ContentResponse loginPostJsonDataContentResponse = loginPostJsonResponse.send();\n+\n+            String loginPostResponse = new String(loginPostJsonDataContentResponse.getContent());\n+\n+            JsonObject loginPostJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(loginPostResponse));\n+\n+            sessionId = extractSessionId(loginPostJsonObject);\n+\n+            // Part to sending data to Inverter\n+            String postJsonData = \"\";\n+\n+            if (dxsId.contentEquals(\"16777984\")) {\n+                // Works with inverterName, name will be changed, due to \"\" around value\n+                postJsonData = \"{\\\"dxsEntries\\\":[{\\\"dxsId\\\":\" + dxsId + \",\\\"value\\\":\\\"\" + value + \"\\\"}]}\";\n+            } else {\n+                // Works not with inverterName, name will not be changed, due to \"\" around value, but the other\n+                // configuration options will be changed.\n+                postJsonData = \"{\\\"dxsEntries\\\":[{\\\"dxsId\\\":\" + dxsId + \",\\\"value\\\":\" + value + \"}]}\";\n+            }\n+\n+            Request postJsonDataRequest = httpClient.POST(url + \"/api/dxs.json?sessionId=\" + sessionId);\n+            postJsonDataRequest.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            postJsonDataRequest.content(new StringContentProvider(postJsonData));\n+\n+            ContentResponse postJsonDataContentResponse = postJsonDataRequest.send();\n+            String postResponse = new String(postJsonDataContentResponse.getContent());\n+\n+            JsonObject postJsonObject = (JsonObject) new JsonParser().parse(transformJsonResponse(postResponse));\n+            sessionId = extractSessionId(postJsonObject);\n+        } catch (JsonIOException getAuthenticateResponseException) {\n+            logger.debug(\"Could not read the response: {}\", getAuthenticateResponseException.getMessage());\n+        }\n+    }\n+\n+    static String transformJsonResponse(String jsonResponse) {\n+        // Method transformJsonResponse converts response,due to missing [] in JSON getAuthenticateResponse.\n+\n+        int sessionStartPosition = jsonResponse.indexOf(\"session\");\n+        StringBuilder transformStringBuilder = new StringBuilder();\n+\n+        transformStringBuilder.append(jsonResponse);\n+\n+        transformStringBuilder.insert(sessionStartPosition + 9, '[');\n+        int codeStartPosition = jsonResponse.indexOf(\"roleId\");\n+        transformStringBuilder.insert(codeStartPosition + 11, ']');\n+\n+        String transformJsonObject = transformStringBuilder.toString();\n+\n+        return transformJsonObject;\n+    }\n+\n+    static String extractSessionId(JsonObject extractJsonObject)\n+            throws InterruptedException, ExecutionException, TimeoutException {", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMjY3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518802674", "bodyText": "As getConfigAs() is an expensive operation, it's better to call it once in initialize().", "author": "fwolter", "createdAt": "2020-11-06T14:54:45Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNDE4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518804181", "bodyText": "Classes used with getConfigAs() should only contain the fields existing in the XML file. You could move these fields to a dedicated class.", "author": "fwolter", "createdAt": "2020-11-06T14:57:04Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationBindingConstants.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link SecondGenerationBindingConstants} class defines channel constants, which are\n+ * used in the second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ */\n+\n+@NonNullByDefault\n+public class SecondGenerationBindingConstants {\n+\n+    private static final String BINDING_ID = \"kostalinverter\";\n+\n+    public static final long REFRESHINTERVAL_SEC = 60;\n+\n+    public String url = \"\";\n+    public String username = \"\";\n+    public String password = \"\";\n+    public String dxsIdConf = \"\";\n+    public String valueConf = \"\";", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNTQ5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518805499", "bodyText": "No harm in canceling a task that is already cancelled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (secondGenerationLocalPoller != null && !secondGenerationLocalPoller.isCancelled()) {\n          \n          \n            \n                    if (secondGenerationLocalPoller != null) {", "author": "fwolter", "createdAt": "2020-11-06T14:59:05Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());\n+            }\n+        }, 0, SecondGenerationBindingConstants.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> secondGenerationLocalPoller = secondGenerationPoller;\n+\n+        if (secondGenerationLocalPoller != null && !secondGenerationLocalPoller.isCancelled()) {", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNjU3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518806570", "bodyText": "See above. Call in initialize().", "author": "fwolter", "createdAt": "2020-11-06T15:00:39Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());\n+            }\n+        }, 0, SecondGenerationBindingConstants.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> secondGenerationLocalPoller = secondGenerationPoller;\n+\n+        if (secondGenerationLocalPoller != null && !secondGenerationLocalPoller.isCancelled()) {\n+            secondGenerationLocalPoller.cancel(true);\n+            secondGenerationPoller = null;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void refresh() throws InterruptedException, ExecutionException, TimeoutException {\n+        final @Nullable SecondGenerationBindingConstants refreshConfig;\n+        refreshConfig = getConfigAs(SecondGenerationBindingConstants.class);", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwNjgwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r518806802", "bodyText": "You could make this a field to make it initialize once to save resources.", "author": "fwolter", "createdAt": "2020-11-06T15:01:03Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.internal.kostal.inverter.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        final @Nullable SecondGenerationBindingConstants handleCommandConfig;\n+        handleCommandConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String url = handleCommandConfig.url.toString();\n+        String username = handleCommandConfig.username;\n+        String password = handleCommandConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        switch (channelUID.getId()) {\n+            case SecondGenerationBindingConstants.CHANNEL_CHARGETIMEEND:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556236\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYTYPE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556252\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTION:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556249\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGY:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"83888896\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL:\n+                valueConfiguration = \"\";\n+                if (command == OnOffType.ON) {\n+                    valueConfiguration = \"True\";\n+                }\n+                if (command == OnOffType.OFF) {\n+                    valueConfiguration = \"False\";\n+                }\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROL_TEXT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556484\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROM:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556239\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETO:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556240\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGE:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556247\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENT:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556483\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROL:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"33556482\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+            case SecondGenerationBindingConstants.CHANNEL_INVERTERNAME:\n+                valueConfiguration = command.toString();\n+                dxsEntriesConf = \"16777984\";\n+                preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                        valueConfiguration);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());\n+            }\n+        }, 0, SecondGenerationBindingConstants.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> secondGenerationLocalPoller = secondGenerationPoller;\n+\n+        if (secondGenerationLocalPoller != null && !secondGenerationLocalPoller.isCancelled()) {\n+            secondGenerationLocalPoller.cancel(true);\n+            secondGenerationPoller = null;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void refresh() throws InterruptedException, ExecutionException, TimeoutException {\n+        final @Nullable SecondGenerationBindingConstants refreshConfig;\n+        refreshConfig = getConfigAs(SecondGenerationBindingConstants.class);\n+\n+        String dxsEntriesCall = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        String dxsEntriesCallExt = refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExt.get(0).dxsEntries;\n+\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+            dxsEntriesCallExt += (\"&dxsEntries=\" + channelConfigsExt.get(i).dxsEntries);\n+        }\n+\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        String jsonDxsEntriesResponseExt = callURL(dxsEntriesCallExt);\n+        String jsonDxsEntriesResponseExtExt = callURL(refreshConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigsExtExt.get(0).dxsEntries + \"&dxsEntries=\" + channelConfigsExtExt.get(1).dxsEntries\n+                + \"&dxsEntries=\" + channelConfigsExtExt.get(2).dxsEntries);\n+\n+        // Get Gson object\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();", "originalCommit": "0e4193840d7464142150f71ebfedb6e446022072", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c91ad9c37bc48b9ae3f04dc20d74d90f9ca2cdfb", "url": "https://github.com/openhab/openhab-addons/commit/c91ad9c37bc48b9ae3f04dc20d74d90f9ca2cdfb", "message": "Binding redesigned 20200923 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter], regarded OH3.\n[WIP]\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "721350e928548f5c6ed6c8fb3f174ff71bdc44e2", "url": "https://github.com/openhab/openhab-addons/commit/721350e928548f5c6ed6c8fb3f174ff71bdc44e2", "message": "Binding redesigned 20200923 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter] regarded oH3\n[WIP]\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "8c1d999f88722634f751f0058e380aa3e7e8e411", "url": "https://github.com/openhab/openhab-addons/commit/8c1d999f88722634f751f0058e380aa3e7e8e411", "message": "Binding redesigned 20200923 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter] regarded oH3\n[WIP]\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "98df35a49f9dc13db8b1cbbc69b8e3d87ee66217", "url": "https://github.com/openhab/openhab-addons/commit/98df35a49f9dc13db8b1cbbc69b8e3d87ee66217", "message": "Binding redesigned 20200923 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter] regarded oH3\n[WIP]\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "4f20990700058d92d8057263f883c4201db85c16", "url": "https://github.com/openhab/openhab-addons/commit/4f20990700058d92d8057263f883c4201db85c16", "message": "Binding redesigned 20200924 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter] regarded oH3\n[WIP]\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "94b90bceafe72130df1563fc510b5e07d9e859a8", "url": "https://github.com/openhab/openhab-addons/commit/94b90bceafe72130df1563fc510b5e07d9e859a8", "message": "Binding redesigned 20200924 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\nChanges made in\norg.openhab.binding.internal.kostal.inverter.secondgeneration.SecondGenerationHandler.java\nfound by Travis tests.\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "b927fc9bab77f4caf442d861035fb4574917d8eb", "url": "https://github.com/openhab/openhab-addons/commit/b927fc9bab77f4caf442d861035fb4574917d8eb", "message": "Binding redesigned 20201007 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\nDone changes in:\nChannels.xml\nPIKO1020.xml\nREADME.md\nSecondGeneration.xml\nSecondGenerationChannelConfiguration.java\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "b56b6d2e43d30f648670a118cb2a4298610c68cd", "url": "https://github.com/openhab/openhab-addons/commit/b56b6d2e43d30f648670a118cb2a4298610c68cd", "message": "Binding redesigned 20201008 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "934f26e573dda393b6050e953f26fe59c15e05fd", "url": "https://github.com/openhab/openhab-addons/commit/934f26e573dda393b6050e953f26fe59c15e05fd", "message": "Binding redesigned 20201012 by \u00d6rjan Backsell, regarded to @fwolter\nrequested changes\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "2ffeeea75f4022b4f8e692c74660438f83cc67df", "url": "https://github.com/openhab/openhab-addons/commit/2ffeeea75f4022b4f8e692c74660438f83cc67df", "message": "Binding redesigned 20201028 by \u00d6rjan Backsell, regarded to @cpmeister\nrequested changes.\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "cac39e581353d5d9911e3c35cc348a6638376b79", "url": "https://github.com/openhab/openhab-addons/commit/cac39e581353d5d9911e3c35cc348a6638376b79", "message": "Binding redesigned 20201105 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "f0e72a226959ab1afb7092a611fbdbe8344d3b31", "url": "https://github.com/openhab/openhab-addons/commit/f0e72a226959ab1afb7092a611fbdbe8344d3b31", "message": "Binding redesigned 20200923 by \u00d6rjan Backsell\n\n'\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n'\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "c7ee03c1134d92d7b869d2e2f48a9533ae636500", "url": "https://github.com/openhab/openhab-addons/commit/c7ee03c1134d92d7b869d2e2f48a9533ae636500", "message": "Binding redesigned 20201111 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "419b20265ea7953dd4b663c124d9fb57e88fda73", "url": "https://github.com/openhab/openhab-addons/commit/419b20265ea7953dd4b663c124d9fb57e88fda73", "message": "Binding redesigned 20201117 by \u00d6rjan Backsell\n\n'\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter]\n[WIP]\n'\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "1e24ad493d4aeeefc7352ab88274618ad9e1a544", "url": "https://github.com/openhab/openhab-addons/commit/1e24ad493d4aeeefc7352ab88274618ad9e1a544", "message": "Binding redesigned 20201119 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"oid": "fd19749c1f354edaa37db5f9f460c1ade0a6316b", "url": "https://github.com/openhab/openhab-addons/commit/fd19749c1f354edaa37db5f9f460c1ade0a6316b", "message": "Binding redesigned 20201125 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-25T17:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY1NzA0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r532657046", "bodyText": "Leftover", "author": "fwolter", "createdAt": "2020-11-30T14:55:49Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -282,6 +282,7 @@ private void refresh() throws InterruptedException, ExecutionException, TimeoutE\n             // Update the channels\n             if (state != null) {\n                 updateState(channel, state);\n+                System.out.println(channel + \"  \" + state);", "originalCommit": "fa08c346c95733b57361b68ced11b0e9dc0da8bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY1NzQzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r532657432", "bodyText": "Thing Type IDs should be lower case.", "author": "fwolter", "createdAt": "2020-11-30T14:56:20Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/internal/kostal/inverter/secondgeneration/SecondGenerationBindingConstants.java", "diffHunk": "@@ -29,8 +29,7 @@\n     private static final String BINDING_ID = \"kostalinverter\";\n \n     // List of all Thing Type UIDs\n-    public static final ThingTypeUID SECOND_GENERATION_INVERTER = new ThingTypeUID(BINDING_ID,\n-            \"kostalinverterpiko1020\");\n+    public static final ThingTypeUID SECOND_GENERATION_INVERTER = new ThingTypeUID(BINDING_ID, \"PIKO1020\");", "originalCommit": "fa08c346c95733b57361b68ced11b0e9dc0da8bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2b66c5d36a2dd73b9792966a188443295f1e02d", "url": "https://github.com/openhab/openhab-addons/commit/f2b66c5d36a2dd73b9792966a188443295f1e02d", "message": "Binding redesigned 20201130 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-30T15:29:48Z", "type": "commit"}, {"oid": "1a18b5e53690dc09613d60c128a1bebeb225e70c", "url": "https://github.com/openhab/openhab-addons/commit/1a18b5e53690dc09613d60c128a1bebeb225e70c", "message": "Binding redesigned 20201130, 1630 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-11-30T15:35:37Z", "type": "commit"}, {"oid": "826e70393cdd8fcb17fcca3f15ca77c8b074ce46", "url": "https://github.com/openhab/openhab-addons/commit/826e70393cdd8fcb17fcca3f15ca77c8b074ce46", "message": "Binding redesigned 20201202 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-12-02T12:36:29Z", "type": "commit"}, {"oid": "d92edc3203de8bfc339d23d0355bbe0d594a6f6d", "url": "https://github.com/openhab/openhab-addons/commit/d92edc3203de8bfc339d23d0355bbe0d594a6f6d", "message": "Binding redesigned 20201204 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-12-04T09:58:40Z", "type": "commit"}, {"oid": "1a2a7fbea3a82064b4d45a8712ffc2a068b20fff", "url": "https://github.com/openhab/openhab-addons/commit/1a2a7fbea3a82064b4d45a8712ffc2a068b20fff", "message": "Redesigned 20201204 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-12-04T12:43:51Z", "type": "commit"}, {"oid": "67a057542756232dd64d9bc68ab10b53fff083f8", "url": "https://github.com/openhab/openhab-addons/commit/67a057542756232dd64d9bc68ab10b53fff083f8", "message": "Binding redesigned 20201010 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2020-12-10T18:41:30Z", "type": "commit"}, {"oid": "00424f4efbd96f09ee403ed6448dcfb186c6bc67", "url": "https://github.com/openhab/openhab-addons/commit/00424f4efbd96f09ee403ed6448dcfb186c6bc67", "message": "Binding redesigned 20210112 by \u00d6rjan Backsell\n\n'\nSigned-off-by: basse04 orjan.backsell@gmail.com\nAlso-by: Christian Schneider <>\nAlso-by: Ren\u00e9 Stakemeier <>\nAlso-by: Christoph Weitkamp <>\n\nThis is the upgraded version of Kostal Inverter extended with\nfunctionality for the Inverter type of Second generation PIKO 10-20\n[kostalinverter]\n'\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2021-01-12T10:30:47Z", "type": "commit"}, {"oid": "d09fc9bb989736e2869b0caf021922d4f2e3345a", "url": "https://github.com/openhab/openhab-addons/commit/d09fc9bb989736e2869b0caf021922d4f2e3345a", "message": "Binding redesigned 20210114 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2021-01-14T17:34:42Z", "type": "commit"}, {"oid": "b75c116a169a17773b28b675b27c9b3321a2a54b", "url": "https://github.com/openhab/openhab-addons/commit/b75c116a169a17773b28b675b27c9b3321a2a54b", "message": "Binding redesigned 20210119 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2021-01-19T15:53:56Z", "type": "commit"}, {"oid": "4c4c5eedc17899a5b3835ce25a30ae72a07a75f3", "url": "https://github.com/openhab/openhab-addons/commit/4c4c5eedc17899a5b3835ce25a30ae72a07a75f3", "message": "Binding (KostalInverterFactory.java)redesigned 20210119 by \u00d6rjan\nBacksell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2021-01-19T18:30:12Z", "type": "commit"}, {"oid": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "url": "https://github.com/openhab/openhab-addons/commit/0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "message": "Merge branch 'main' into main", "committedDate": "2021-01-20T09:09:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA4ODU4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561088589", "bodyText": "The field inverterConfig can be null at this point. To mitigate this, you can store the field to a local variable before checking it:\n\nFuture<?> localInverterConfig = inverterConfig;\nif (localInverterConfig != null) {\n    localInverterConfig .cancel(true);\n}\n\nThen, you can remove the supression.", "author": "fwolter", "createdAt": "2021-01-20T16:12:12Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA5MDA3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561090078", "bodyText": "This exception is never thrown and can therefore be removed:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static String extractSessionId(JsonObject extractJsonObjectSessionId) throws TimeoutException {\n          \n          \n            \n                static String extractSessionId(JsonObject extractJsonObjectSessionId) {", "author": "fwolter", "createdAt": "2021-01-20T16:14:25Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationConfigurationHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link SecondGenerationConfigurationHandler} is responsible for configuration changes,\n+ * regarded to second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationConfigurationHandler {\n+\n+    public static void executeConfigurationChanges(HttpClient httpClient, String url, String username, String password,\n+            String dxsId, String value)\n+            throws InterruptedException, ExecutionException, TimeoutException, NoSuchAlgorithmException {\n+        String urlLogin = url + \"/api/login.json?\";\n+        String salt = \"\";\n+        String sessionId = \"\";\n+\n+        Logger logger = LoggerFactory.getLogger(SecondGenerationConfigurationHandler.class);\n+\n+        String getAuthenticateResponse = httpClient.GET(urlLogin).getContentAsString();\n+\n+        try {\n+            JsonObject getAuthenticateResponseJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(getAuthenticateResponse));\n+\n+            sessionId = extractSessionId(getAuthenticateResponseJsonObject);\n+\n+            JsonObject authenticateJsonObject = new JsonParser().parse(getAuthenticateResponse.toString())\n+                    .getAsJsonObject();\n+            salt = authenticateJsonObject.get(\"salt\").getAsString();\n+\n+            String saltedPassword = new StringBuilder(password).append(salt).toString();\n+            MessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+\n+            byte[] mDigestedPassword = mDigest.digest(saltedPassword.getBytes(StandardCharsets.UTF_8));\n+            StringBuilder loginPostStringBuilder = new StringBuilder();\n+            for (int i = 0; i < mDigestedPassword.length; i++) {\n+                loginPostStringBuilder.append(Integer.toString((mDigestedPassword[i] & 0xff) + 0x100, 16).substring(1));\n+            }\n+            String saltedmDigestedPwd = Base64.getEncoder().encodeToString(mDigest.digest(saltedPassword.getBytes()));\n+\n+            String loginPostJsonData = \"{\\\"mode\\\":1,\\\"userId\\\":\\\"\" + username + \"\\\",\\\"pwh\\\":\\\"\" + saltedmDigestedPwd\n+                    + \"\\\"}\";\n+\n+            Request loginPostJsonResponse = httpClient.POST(urlLogin + \"?sessionId=\" + sessionId);\n+            loginPostJsonResponse.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            loginPostJsonResponse.content(new StringContentProvider(loginPostJsonData));\n+            ContentResponse loginPostJsonDataContentResponse = loginPostJsonResponse.send();\n+\n+            String loginPostResponse = new String(loginPostJsonDataContentResponse.getContent(),\n+                    StandardCharsets.UTF_8);\n+\n+            JsonObject loginPostJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(loginPostResponse));\n+\n+            sessionId = extractSessionId(loginPostJsonObject);\n+\n+            // Part for sending data to Inverter\n+            String postJsonData = \"{\\\"dxsEntries\\\":[{\\\"dxsId\\\":\" + dxsId + \",\\\"value\\\":\" + value + \"}]}\";\n+\n+            Request postJsonDataRequest = httpClient.POST(url + \"/api/dxs.json?sessionId=\" + sessionId);\n+            postJsonDataRequest.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            postJsonDataRequest.content(new StringContentProvider(postJsonData));\n+            postJsonDataRequest.send();\n+        } catch (JsonIOException getAuthenticateResponseException) {\n+            logger.debug(\"Could not read the response: {}\", getAuthenticateResponseException.getMessage());\n+        }\n+    }\n+\n+    static String transformJsonResponse(String jsonResponse) {\n+        // Method transformJsonResponse converts response,due to missing [] in ContentResponse\n+        // postJsonDataContentResponse.\n+\n+        int sessionStartPosition = jsonResponse.indexOf(\"session\");\n+        int statusStartPosition = jsonResponse.indexOf(\"status\");\n+\n+        StringBuilder transformStringBuilder = new StringBuilder();\n+\n+        transformStringBuilder.append(jsonResponse);\n+\n+        transformStringBuilder.insert(sessionStartPosition + 9, '[');\n+        int roleIdStartPosition = jsonResponse.indexOf(\"roleId\");\n+        transformStringBuilder.insert(roleIdStartPosition + 11, ']');\n+\n+        transformStringBuilder.insert(statusStartPosition + 10, '[');\n+        int codeStartPosition = jsonResponse.indexOf(\"code\");\n+        transformStringBuilder.insert(codeStartPosition + 11, ']');\n+\n+        String transformJsonObject = transformStringBuilder.toString();\n+\n+        return transformJsonObject;\n+    }\n+\n+    // Method extractSessionId extracts sessionId from JsonObject\n+    static String extractSessionId(JsonObject extractJsonObjectSessionId) throws TimeoutException {", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA5MDM0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561090345", "bodyText": "See above.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static String extractCode(JsonObject extractJsonObjectCode) throws TimeoutException {\n          \n          \n            \n                static String extractCode(JsonObject extractJsonObjectCode) {", "author": "fwolter", "createdAt": "2021-01-20T16:14:41Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationConfigurationHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link SecondGenerationConfigurationHandler} is responsible for configuration changes,\n+ * regarded to second generation part of the binding.\n+ *\n+ * @author \u00d6rjan Backsell - Initial contribution Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationConfigurationHandler {\n+\n+    public static void executeConfigurationChanges(HttpClient httpClient, String url, String username, String password,\n+            String dxsId, String value)\n+            throws InterruptedException, ExecutionException, TimeoutException, NoSuchAlgorithmException {\n+        String urlLogin = url + \"/api/login.json?\";\n+        String salt = \"\";\n+        String sessionId = \"\";\n+\n+        Logger logger = LoggerFactory.getLogger(SecondGenerationConfigurationHandler.class);\n+\n+        String getAuthenticateResponse = httpClient.GET(urlLogin).getContentAsString();\n+\n+        try {\n+            JsonObject getAuthenticateResponseJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(getAuthenticateResponse));\n+\n+            sessionId = extractSessionId(getAuthenticateResponseJsonObject);\n+\n+            JsonObject authenticateJsonObject = new JsonParser().parse(getAuthenticateResponse.toString())\n+                    .getAsJsonObject();\n+            salt = authenticateJsonObject.get(\"salt\").getAsString();\n+\n+            String saltedPassword = new StringBuilder(password).append(salt).toString();\n+            MessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+\n+            byte[] mDigestedPassword = mDigest.digest(saltedPassword.getBytes(StandardCharsets.UTF_8));\n+            StringBuilder loginPostStringBuilder = new StringBuilder();\n+            for (int i = 0; i < mDigestedPassword.length; i++) {\n+                loginPostStringBuilder.append(Integer.toString((mDigestedPassword[i] & 0xff) + 0x100, 16).substring(1));\n+            }\n+            String saltedmDigestedPwd = Base64.getEncoder().encodeToString(mDigest.digest(saltedPassword.getBytes()));\n+\n+            String loginPostJsonData = \"{\\\"mode\\\":1,\\\"userId\\\":\\\"\" + username + \"\\\",\\\"pwh\\\":\\\"\" + saltedmDigestedPwd\n+                    + \"\\\"}\";\n+\n+            Request loginPostJsonResponse = httpClient.POST(urlLogin + \"?sessionId=\" + sessionId);\n+            loginPostJsonResponse.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            loginPostJsonResponse.content(new StringContentProvider(loginPostJsonData));\n+            ContentResponse loginPostJsonDataContentResponse = loginPostJsonResponse.send();\n+\n+            String loginPostResponse = new String(loginPostJsonDataContentResponse.getContent(),\n+                    StandardCharsets.UTF_8);\n+\n+            JsonObject loginPostJsonObject = (JsonObject) new JsonParser()\n+                    .parse(transformJsonResponse(loginPostResponse));\n+\n+            sessionId = extractSessionId(loginPostJsonObject);\n+\n+            // Part for sending data to Inverter\n+            String postJsonData = \"{\\\"dxsEntries\\\":[{\\\"dxsId\\\":\" + dxsId + \",\\\"value\\\":\" + value + \"}]}\";\n+\n+            Request postJsonDataRequest = httpClient.POST(url + \"/api/dxs.json?sessionId=\" + sessionId);\n+            postJsonDataRequest.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            postJsonDataRequest.content(new StringContentProvider(postJsonData));\n+            postJsonDataRequest.send();\n+        } catch (JsonIOException getAuthenticateResponseException) {\n+            logger.debug(\"Could not read the response: {}\", getAuthenticateResponseException.getMessage());\n+        }\n+    }\n+\n+    static String transformJsonResponse(String jsonResponse) {\n+        // Method transformJsonResponse converts response,due to missing [] in ContentResponse\n+        // postJsonDataContentResponse.\n+\n+        int sessionStartPosition = jsonResponse.indexOf(\"session\");\n+        int statusStartPosition = jsonResponse.indexOf(\"status\");\n+\n+        StringBuilder transformStringBuilder = new StringBuilder();\n+\n+        transformStringBuilder.append(jsonResponse);\n+\n+        transformStringBuilder.insert(sessionStartPosition + 9, '[');\n+        int roleIdStartPosition = jsonResponse.indexOf(\"roleId\");\n+        transformStringBuilder.insert(roleIdStartPosition + 11, ']');\n+\n+        transformStringBuilder.insert(statusStartPosition + 10, '[');\n+        int codeStartPosition = jsonResponse.indexOf(\"code\");\n+        transformStringBuilder.insert(codeStartPosition + 11, ']');\n+\n+        String transformJsonObject = transformStringBuilder.toString();\n+\n+        return transformJsonObject;\n+    }\n+\n+    // Method extractSessionId extracts sessionId from JsonObject\n+    static String extractSessionId(JsonObject extractJsonObjectSessionId) throws TimeoutException {\n+\n+        Logger sessionIdLogger = LoggerFactory.getLogger(SecondGenerationConfigurationHandler.class);\n+        String extractSessionId = \"\";\n+        JsonArray extractJsonArraySessionId = extractJsonObjectSessionId.getAsJsonArray(\"session\");\n+\n+        int size = extractJsonArraySessionId.size();\n+        if (size > 0) {\n+            extractSessionId = extractJsonArraySessionId.get(size - 1).getAsJsonObject().get(\"sessionId\").getAsString();\n+        }\n+        if (extractSessionId == \"0\") {\n+            sessionIdLogger.debug(\" Login Post Json Reponse not OK! , inverter answered with sessionId like: {}\",\n+                    extractSessionId);\n+        }\n+        return extractSessionId;\n+    }\n+\n+    // Method extractCode extracts code from JsonObject\n+    static String extractCode(JsonObject extractJsonObjectCode) throws TimeoutException {", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA5MzE1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561093154", "bodyText": "You might want to set the Thing offline when the connection fails.", "author": "fwolter", "createdAt": "2021-01-20T16:16:27Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;\n+        String username = inverterConfig.username;\n+        String password = inverterConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        if (inverterConfig.invertertype.equals(\"withBattery\")) {\n+            switch (channelUID.getId()) {\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTIONSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556249\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGYSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"83888896\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROLSET:\n+                    if (command.toString().equals(\"ON\")) {\n+                        valueConfiguration = \"true\";\n+                    }\n+                    if (command.toString().equals(\"OFF\")) {\n+                        valueConfiguration = \"false\";\n+                    }\n+                    dxsEntriesConf = \"33556484\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROMSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationFromTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556239\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationFromTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETOSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationToTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556240\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationToTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGESET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556247\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENTSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556483\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROLSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556482\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Set channel configuration parameters\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+        channelConfigsConfigurable = SecondGenerationChannelConfiguration.getChannelConfigurationConfigurable();\n+\n+        // Set inverter configuration parameters\n+        final SecondGenerationInverterConfig inverterConfig = getConfigAs(SecondGenerationInverterConfig.class);\n+        this.inverterConfig = inverterConfig;\n+\n+        // Initialize Gson object gson\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        this.gson = gson;\n+\n+        // Temporary value during initializing\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Start update as configured\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA5NDI5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561094292", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "author": "fwolter", "createdAt": "2021-01-20T16:17:11Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;\n+        String username = inverterConfig.username;\n+        String password = inverterConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        if (inverterConfig.invertertype.equals(\"withBattery\")) {\n+            switch (channelUID.getId()) {\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTIONSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556249\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGYSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"83888896\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROLSET:\n+                    if (command.toString().equals(\"ON\")) {\n+                        valueConfiguration = \"true\";\n+                    }\n+                    if (command.toString().equals(\"OFF\")) {\n+                        valueConfiguration = \"false\";\n+                    }\n+                    dxsEntriesConf = \"33556484\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROMSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationFromTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556239\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationFromTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETOSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationToTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556240\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationToTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGESET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556247\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENTSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556483\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROLSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556482\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Set channel configuration parameters\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+        channelConfigsConfigurable = SecondGenerationChannelConfiguration.getChannelConfigurationConfigurable();\n+\n+        // Set inverter configuration parameters\n+        final SecondGenerationInverterConfig inverterConfig = getConfigAs(SecondGenerationInverterConfig.class);\n+        this.inverterConfig = inverterConfig;\n+\n+        // Initialize Gson object gson\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        this.gson = gson;\n+\n+        // Temporary value during initializing\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Start update as configured\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA5Nzg3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561097870", "bodyText": "You could initialize this in the constructor to get rid of the compiler warning about null values. You don't see them currently as you supressed them in refresh().", "author": "fwolter", "createdAt": "2021-01-20T16:19:53Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;\n+        String username = inverterConfig.username;\n+        String password = inverterConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        if (inverterConfig.invertertype.equals(\"withBattery\")) {\n+            switch (channelUID.getId()) {\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTIONSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556249\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGYSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"83888896\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROLSET:\n+                    if (command.toString().equals(\"ON\")) {\n+                        valueConfiguration = \"true\";\n+                    }\n+                    if (command.toString().equals(\"OFF\")) {\n+                        valueConfiguration = \"false\";\n+                    }\n+                    dxsEntriesConf = \"33556484\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROMSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationFromTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556239\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationFromTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETOSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationToTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556240\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationToTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGESET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556247\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENTSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556483\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROLSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556482\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Set channel configuration parameters\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+        channelConfigsConfigurable = SecondGenerationChannelConfiguration.getChannelConfigurationConfigurable();\n+\n+        // Set inverter configuration parameters\n+        final SecondGenerationInverterConfig inverterConfig = getConfigAs(SecondGenerationInverterConfig.class);\n+        this.inverterConfig = inverterConfig;\n+\n+        // Initialize Gson object gson\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        this.gson = gson;", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA5OTE5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561099199", "bodyText": "This generates a compiler warning, which is currently suppressed. You could store inverterConfig to a local variable and do a null check on that to get rid of the warning.", "author": "fwolter", "createdAt": "2021-01-20T16:21:51Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;\n+        String username = inverterConfig.username;\n+        String password = inverterConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        if (inverterConfig.invertertype.equals(\"withBattery\")) {\n+            switch (channelUID.getId()) {\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTIONSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556249\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGYSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"83888896\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROLSET:\n+                    if (command.toString().equals(\"ON\")) {\n+                        valueConfiguration = \"true\";\n+                    }\n+                    if (command.toString().equals(\"OFF\")) {\n+                        valueConfiguration = \"false\";\n+                    }\n+                    dxsEntriesConf = \"33556484\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROMSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationFromTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556239\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationFromTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETOSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationToTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556240\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationToTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGESET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556247\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENTSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556483\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROLSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556482\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Set channel configuration parameters\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+        channelConfigsConfigurable = SecondGenerationChannelConfiguration.getChannelConfigurationConfigurable();\n+\n+        // Set inverter configuration parameters\n+        final SecondGenerationInverterConfig inverterConfig = getConfigAs(SecondGenerationInverterConfig.class);\n+        this.inverterConfig = inverterConfig;\n+\n+        // Initialize Gson object gson\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        this.gson = gson;\n+\n+        // Temporary value during initializing\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Start update as configured\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());\n+            }\n+        }, 0, SecondGenerationInverterConfig.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> secondGenerationLocalPoller = secondGenerationPoller;\n+\n+        if (secondGenerationLocalPoller != null) {\n+            secondGenerationLocalPoller.cancel(true);\n+            secondGenerationPoller = null;\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"null\", \"unchecked\" })\n+    private void refresh() throws InterruptedException, ExecutionException, TimeoutException {\n+        // dxsEntries part\n+        String dxsEntriesCall = inverterConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTEwNDkwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561104900", "bodyText": "Syntactical sugar. Same for the others.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> channelPostsTemp = new ArrayList<String>(Arrays.asList(channelPosts));\n          \n          \n            \n                    List<String> channelPostsTemp = List.of(channelPosts);", "author": "fwolter", "createdAt": "2021-01-20T16:29:08Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;\n+        String username = inverterConfig.username;\n+        String password = inverterConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        if (inverterConfig.invertertype.equals(\"withBattery\")) {\n+            switch (channelUID.getId()) {\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTIONSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556249\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGYSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"83888896\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROLSET:\n+                    if (command.toString().equals(\"ON\")) {\n+                        valueConfiguration = \"true\";\n+                    }\n+                    if (command.toString().equals(\"OFF\")) {\n+                        valueConfiguration = \"false\";\n+                    }\n+                    dxsEntriesConf = \"33556484\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROMSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationFromTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556239\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationFromTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETOSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationToTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556240\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationToTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGESET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556247\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENTSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556483\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROLSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556482\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Set channel configuration parameters\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+        channelConfigsConfigurable = SecondGenerationChannelConfiguration.getChannelConfigurationConfigurable();\n+\n+        // Set inverter configuration parameters\n+        final SecondGenerationInverterConfig inverterConfig = getConfigAs(SecondGenerationInverterConfig.class);\n+        this.inverterConfig = inverterConfig;\n+\n+        // Initialize Gson object gson\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        this.gson = gson;\n+\n+        // Temporary value during initializing\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Start update as configured\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());\n+            }\n+        }, 0, SecondGenerationInverterConfig.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> secondGenerationLocalPoller = secondGenerationPoller;\n+\n+        if (secondGenerationLocalPoller != null) {\n+            secondGenerationLocalPoller.cancel(true);\n+            secondGenerationPoller = null;\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"null\", \"unchecked\" })\n+    private void refresh() throws InterruptedException, ExecutionException, TimeoutException {\n+        // dxsEntries part\n+        String dxsEntriesCall = inverterConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+        }\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        SecondGenerationDxsEntriesContainerDTO dxsEntriesContainer = gson.fromJson(jsonDxsEntriesResponse,\n+                SecondGenerationDxsEntriesContainerDTO.class);\n+\n+        String[] channelPosts = new String[23];\n+        int channelPostsCounter = 0;\n+        for (SecondGenerationDxsEntries dxsentries : dxsEntriesContainer.dxsEntries) {\n+            channelPosts[channelPostsCounter] = dxsentries.getName();\n+            channelPostsCounter++;\n+        }\n+        List<String> channelPostsTemp = new ArrayList<String>(Arrays.asList(channelPosts));", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTEwNTM4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561105381", "bodyText": "toString() is called implicitly and could therefore be removed. Please check all.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String dxsEntriesCallExt = inverterConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n          \n          \n            \n                    String dxsEntriesCallExt = inverterConfig.url + \"/api/dxs.json?dxsEntries=\"", "author": "fwolter", "createdAt": "2021-01-20T16:29:50Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private @Nullable SecondGenerationInverterConfig inverterConfig;\n+\n+    private @Nullable Gson gson;\n+\n+    public SecondGenerationHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String url = inverterConfig.url;\n+        String username = inverterConfig.username;\n+        String password = inverterConfig.password;\n+        String valueConfiguration = \"\";\n+        String dxsEntriesConf = \"\";\n+\n+        if (inverterConfig.invertertype.equals(\"withBattery\")) {\n+            switch (channelUID.getId()) {\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGECONSUMPTIONSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556249\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYUSAGESTRATEGYSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"83888896\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SMARTBATTERYCONTROLSET:\n+                    if (command.toString().equals(\"ON\")) {\n+                        valueConfiguration = \"true\";\n+                    }\n+                    if (command.toString().equals(\"OFF\")) {\n+                        valueConfiguration = \"false\";\n+                    }\n+                    dxsEntriesConf = \"33556484\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMEFROMSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationFromTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556239\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationFromTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_BATTERYCHARGETIMETOSET:\n+                    valueConfiguration = command.toString();\n+                    String valueConfigurationToTransformed = String.valueOf(stringToSeconds(valueConfiguration));\n+                    dxsEntriesConf = \"33556240\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfigurationToTransformed);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_MAXDEPTHOFDISCHARGESET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556247\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_SHADOWMANAGEMENTSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556483\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+                case SecondGenerationBindingConstants.CHANNEL_EXTERNALMODULECONTROLSET:\n+                    valueConfiguration = command.toString();\n+                    dxsEntriesConf = \"33556482\";\n+                    preSetExecuteConfigurationChanges(httpClient, url, username, password, dxsEntriesConf,\n+                            valueConfiguration);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Set channel configuration parameters\n+        channelConfigs = SecondGenerationChannelConfiguration.getChannelConfiguration();\n+        channelConfigsExt = SecondGenerationChannelConfiguration.getChannelConfigurationExt();\n+        channelConfigsExtExt = SecondGenerationChannelConfiguration.getChannelConfigurationExtExt();\n+        channelConfigsConfigurable = SecondGenerationChannelConfiguration.getChannelConfigurationConfigurable();\n+\n+        // Set inverter configuration parameters\n+        final SecondGenerationInverterConfig inverterConfig = getConfigAs(SecondGenerationInverterConfig.class);\n+        this.inverterConfig = inverterConfig;\n+\n+        // Initialize Gson object gson\n+        final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+        this.gson = gson;\n+\n+        // Temporary value during initializing\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        // Start update as configured\n+        secondGenerationPoller = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                refresh();\n+                updateStatus(ThingStatus.ONLINE);\n+            } catch (RuntimeException scheduleWithFixedDelayException) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        scheduleWithFixedDelayException.getClass().getName() + \":\"\n+                                + scheduleWithFixedDelayException.getMessage());\n+                logger.debug(\"Error when connecting to inverter, {}: {}\", getThing().getUID(),\n+                        scheduleWithFixedDelayException.getMessage());\n+            } catch (InterruptedException e) {\n+                logger.debug(\"Communication with inverter interrupted, exception {}\", e.getMessage());\n+            } catch (ExecutionException e) {\n+                logger.debug(\"Communication with inverter failed, exception {}\", e.getMessage());\n+            } catch (TimeoutException e) {\n+                logger.debug(\"Communication with inverter timed out, exception {}\", e.getMessage());\n+            }\n+        }, 0, SecondGenerationInverterConfig.REFRESHINTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> secondGenerationLocalPoller = secondGenerationPoller;\n+\n+        if (secondGenerationLocalPoller != null) {\n+            secondGenerationLocalPoller.cancel(true);\n+            secondGenerationPoller = null;\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"null\", \"unchecked\" })\n+    private void refresh() throws InterruptedException, ExecutionException, TimeoutException {\n+        // dxsEntries part\n+        String dxsEntriesCall = inverterConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"\n+                + channelConfigs.get(0).dxsEntries;\n+        for (int i = 1; i < channelConfigs.size(); i++) {\n+            dxsEntriesCall += (\"&dxsEntries=\" + channelConfigs.get(i).dxsEntries);\n+        }\n+        String jsonDxsEntriesResponse = callURL(dxsEntriesCall);\n+        SecondGenerationDxsEntriesContainerDTO dxsEntriesContainer = gson.fromJson(jsonDxsEntriesResponse,\n+                SecondGenerationDxsEntriesContainerDTO.class);\n+\n+        String[] channelPosts = new String[23];\n+        int channelPostsCounter = 0;\n+        for (SecondGenerationDxsEntries dxsentries : dxsEntriesContainer.dxsEntries) {\n+            channelPosts[channelPostsCounter] = dxsentries.getName();\n+            channelPostsCounter++;\n+        }\n+        List<String> channelPostsTemp = new ArrayList<String>(Arrays.asList(channelPosts));\n+\n+        // dxsEntriesExt part\n+        String dxsEntriesCallExt = inverterConfig.url.toString() + \"/api/dxs.json?dxsEntries=\"", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTExNjc0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r561116740", "bodyText": "Seems like there had been something wrong during merge. This produces a compiler error.", "author": "fwolter", "createdAt": "2021-01-20T16:46:22Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/KostalInverterFactory.java", "diffHunk": "@@ -81,7 +85,9 @@ public KostalInverterFactory(@Reference final HttpClientFactory httpClientFactor\n \n     @Override\n     public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n-        return thingTypeUID.equals(FIRST_GENERATION_INVERTER)\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {", "originalCommit": "0fea81d2052dc7c645cfd79ebbe1da82a03c3213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "36c4d023a11f5ec95f93d33f9fdcc582f02d882b", "url": "https://github.com/openhab/openhab-addons/commit/36c4d023a11f5ec95f93d33f9fdcc582f02d882b", "message": "Binding redesigned 20210125 by \u00d6rjan Backsell", "committedDate": "2021-01-25T13:20:45Z", "type": "commit"}, {"oid": "74951735d3589a3a88433650c89fa95963f31990", "url": "https://github.com/openhab/openhab-addons/commit/74951735d3589a3a88433650c89fa95963f31990", "message": "Binding redesigned 20200923 by \u00d6rjan Backsell\n\n(KostalInverterFactory.java)\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2021-01-25T13:32:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg5MTE3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r563891173", "bodyText": "You could initialize the field with an empty config. Then, you can remove the null annotation.", "author": "fwolter", "createdAt": "2021-01-25T17:09:29Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private List<String> channelPostsTemp = new ArrayList<>();\n+    private List<String> channelPostsTempExt = new ArrayList<>();\n+    private List<String> channelPostsTempExtExt = new ArrayList<>();\n+    private List<String> channelPostsTempAll = new ArrayList<>();\n+\n+    private @NonNullByDefault({}) SecondGenerationInverterConfig inverterConfig;", "originalCommit": "74951735d3589a3a88433650c89fa95963f31990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg5MTYzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8574#discussion_r563891636", "bodyText": "You could initialize the field to remove the null annoation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) Gson gson;\n          \n          \n            \n                private Gson gson = new GsonBuilder().setPrettyPrinting().create();", "author": "fwolter", "createdAt": "2021-01-25T17:10:06Z", "path": "bundles/org.openhab.binding.kostalinverter/src/main/java/org/openhab/binding/kostalinverter/internal/secondgeneration/SecondGenerationHandler.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.kostalinverter.internal.secondgeneration;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * The {@link SecondGenerationHandler} is responsible for handling commands, which are\n+ * sent to one of the channels, and initiation and refreshing regarded to second generation part of the binding.\n+ *\n+ *\n+ * @author Christian Schneider - Initial contribution\n+ * @author Christoph Weitkamp - Incorporated new QuantityType (Units of Measurement)\n+ * @author \u00d6rjan Backsell - Redesigned regarding Piko1020, Piko New Generation\n+ */\n+@NonNullByDefault\n+public class SecondGenerationHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SecondGenerationHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> secondGenerationPoller;\n+\n+    private final HttpClient httpClient;\n+\n+    private List<SecondGenerationChannelConfiguration> channelConfigs = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsExtExt = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsConfigurable = new ArrayList<>();\n+    private List<SecondGenerationChannelConfiguration> channelConfigsAll = new ArrayList<>();\n+\n+    private List<String> channelPostsTemp = new ArrayList<>();\n+    private List<String> channelPostsTempExt = new ArrayList<>();\n+    private List<String> channelPostsTempExtExt = new ArrayList<>();\n+    private List<String> channelPostsTempAll = new ArrayList<>();\n+\n+    private @NonNullByDefault({}) SecondGenerationInverterConfig inverterConfig;\n+    private @NonNullByDefault({}) Gson gson;", "originalCommit": "74951735d3589a3a88433650c89fa95963f31990", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "58a63525f2d39ec92a47fa6c2752dc26a2966076", "url": "https://github.com/openhab/openhab-addons/commit/58a63525f2d39ec92a47fa6c2752dc26a2966076", "message": "Binding redesigned 20210125 by \u00d6rjan Backsell\n\nSigned-off-by: basse04 <orjan.backsell@gmail.com>", "committedDate": "2021-01-26T09:32:13Z", "type": "commit"}]}