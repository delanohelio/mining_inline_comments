{"pr_number": 7514, "pr_title": "[enigma2] Initial Contribution", "pr_createdAt": "2020-05-01T17:55:30Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7514", "timeline": [{"oid": "72dd115e758c11c8cc152a69e2029ab7d062745f", "url": "https://github.com/openhab/openhab-addons/commit/72dd115e758c11c8cc152a69e2029ab7d062745f", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-01T17:58:44Z", "type": "forcePushed"}, {"oid": "766620b3b8f65dc5abec1210a7b3bc87975a650e", "url": "https://github.com/openhab/openhab-addons/commit/766620b3b8f65dc5abec1210a7b3bc87975a650e", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-01T18:06:58Z", "type": "forcePushed"}, {"oid": "f7f66a8bb20c3d38e8391829182cd55d54a990b6", "url": "https://github.com/openhab/openhab-addons/commit/f7f66a8bb20c3d38e8391829182cd55d54a990b6", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-01T18:12:18Z", "type": "forcePushed"}, {"oid": "db336908da16e4b524bf3de359993dcf4e638d9f", "url": "https://github.com/openhab/openhab-addons/commit/db336908da16e4b524bf3de359993dcf4e638d9f", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-01T20:42:34Z", "type": "forcePushed"}, {"oid": "58e78cbb8a656ee44e18363b390566e1a1b50ff9", "url": "https://github.com/openhab/openhab-addons/commit/58e78cbb8a656ee44e18363b390566e1a1b50ff9", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-02T10:07:12Z", "type": "forcePushed"}, {"oid": "f3cff09008bb6a98d2a1ffa6bcaebacd0f33dff7", "url": "https://github.com/openhab/openhab-addons/commit/f3cff09008bb6a98d2a1ffa6bcaebacd0f33dff7", "message": "Added a new configuration parameter for defining a custom read timeout\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-03T11:43:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzOTU5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420339599", "bodyText": "What if config.refreshInterval has an invalid value? I think it would make sense to validate the configuration once you read it for the first time.", "author": "t2000", "createdAt": "2020-05-05T19:03:29Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNTUzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420415531", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzOTU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MDQzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420340437", "bodyText": "Your handler instance might be reused at some point, so its IMHO better to read the config within \"initialize\".", "author": "t2000", "createdAt": "2020-05-05T19:04:46Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNTYzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420415638", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MDQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MTkzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420341931", "bodyText": "A Thinghandler should not use the ThingStatus.UNINITIALIZED because this is used by the core framework only to express that the handler has not been initialized.\nPlease set the Thing to \"OFFLINE\" instead, and provide some \"ThingStatusDetail\", maybe configuration error and/or an error message (if it would be helpful for and ordinary enduser only, otherwise omit the message).", "author": "t2000", "createdAt": "2020-05-05T19:07:21Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        try {\n+            boolean online = getEnigma2Client().refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, getEnigma2Client().isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, getEnigma2Client().isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(getEnigma2Client().getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(getEnigma2Client().getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(getEnigma2Client().getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(getEnigma2Client().getDescription()));\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNINITIALIZED);", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMzYyNg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420413626", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MTkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420342907", "bodyText": "Please move the job canceling into the dispose method, that is the better place according the the ThingHandler lifecycle. If you have moved it to \"dispose\", please also do\nif(refreshJob != null) {\n   if(!refreshJob.isCanceled()) {\n        refreshJob.cancel(true);\n   }\n   refreshJob = null;\n}\n\nAlso: This might be a possible null pointer exception, please check refreshJob != null before accessing it.", "author": "t2000", "createdAt": "2020-05-05T19:09:10Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        try {\n+            boolean online = getEnigma2Client().refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, getEnigma2Client().isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, getEnigma2Client().isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(getEnigma2Client().getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(getEnigma2Client().getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(getEnigma2Client().getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(getEnigma2Client().getDescription()));\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNINITIALIZED);\n+            getLogger().warn(\"Error on refreshing {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void handleRemoval() {\n+        refreshJob.cancel(true);", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNTc1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420415750", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MzcwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420343704", "bodyText": "No need to implement this method, see my comment below.", "author": "t2000", "createdAt": "2020-05-05T19:10:36Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        try {\n+            boolean online = getEnigma2Client().refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, getEnigma2Client().isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, getEnigma2Client().isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(getEnigma2Client().getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(getEnigma2Client().getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(getEnigma2Client().getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(getEnigma2Client().getDescription()));\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNINITIALIZED);\n+            getLogger().warn(\"Error on refreshing {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void handleRemoval() {", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNTc5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420415797", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MzcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0ODU0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420348544", "bodyText": "Its in general a bad habit to catch Exception directly (besides other things this will also swallow RuntimeExceptions like NPEs for example), please catch the more specific ones.", "author": "t2000", "createdAt": "2020-05-05T19:19:20Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import java.io.StringReader;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservice?sRef=\";\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        refreshPower();\n+        refreshAllServices();\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).ifPresent(name -> {\n+                transmit(PATH_EPG + name).ifPresent(this::processEpgResult);\n+            });\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (Exception e) {", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNTg2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420415863", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0ODU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MTQ3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420351475", "bodyText": "Is this a copy&paste error? because below you implement the type \"_http._tcp.local.\", not \"_ssh._tcp.local.\"", "author": "t2000", "createdAt": "2020-05-05T19:24:28Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _ssh._tcp.local. and finding a webinterface", "originalCommit": "2ca982e190ac5fcf4a519c691ebe29e77267de98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNTkzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420415935", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-05T21:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MTQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTE3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420929171", "bodyText": "initialize should not throw any exceptions, please set the thing to OFFLINE with the apropriate ThingStatusDetail and maybe a message for the user.", "author": "t2000", "createdAt": "2020-05-06T16:33:03Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -47,22 +48,35 @@\n @NonNullByDefault\n public class Enigma2Handler extends BaseThingHandler {\n     private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    @Nullable\n     private Enigma2Configuration config;\n+    @Nullable\n     private Enigma2Client enigma2Client;\n     @Nullable\n     private ScheduledFuture<?> refreshJob;\n \n     public Enigma2Handler(Thing thing) {\n         super(thing);\n-        config = getConfigAs(Enigma2Configuration.class);\n-        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n     }\n \n     @Override\n+    @SuppressWarnings(\"null\")\n     public void initialize() {\n+        config = getConfigAs(Enigma2Configuration.class);\n+        if(config.host == null || config.host.isEmpty()) {\n+            throw new IllegalArgumentException(\"host must not be null or empty\");", "originalCommit": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxOTcwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r421719703", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-07T18:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTgyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420929821", "bodyText": "I think i mentioned this elsewhere in the code already, so i might have overlooked this one. Please catch a specific exception instead.", "author": "t2000", "createdAt": "2020-05-06T16:33:53Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -78,16 +92,20 @@ private void refresh() {\n                 updateStatus(ThingStatus.OFFLINE);\n             }\n         } catch (Exception e) {", "originalCommit": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMDM1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r421720351", "bodyText": "Fixed, the Exception was already caught in Enigma2Client#transmit() so it never coulf appear here", "author": "gdolfen", "createdAt": "2020-05-07T18:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMDc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420930795", "bodyText": "You seem to add this everywhere, but I don't know what the current coding guidelines are. because I would rather expect to do the proper null checks and not ignore the warnings (unless its a false positive reported by the annotation checker).", "author": "t2000", "createdAt": "2020-05-06T16:35:21Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -47,22 +48,35 @@\n @NonNullByDefault\n public class Enigma2Handler extends BaseThingHandler {\n     private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    @Nullable\n     private Enigma2Configuration config;\n+    @Nullable\n     private Enigma2Client enigma2Client;\n     @Nullable\n     private ScheduledFuture<?> refreshJob;\n \n     public Enigma2Handler(Thing thing) {\n         super(thing);\n-        config = getConfigAs(Enigma2Configuration.class);\n-        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n     }\n \n     @Override\n+    @SuppressWarnings(\"null\")", "originalCommit": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMDY4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r421720680", "bodyText": "Fixed, I changed the nullable Fields to Optionals", "author": "gdolfen", "createdAt": "2020-05-07T18:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMDc5NQ=="}], "type": "inlineReview"}, {"oid": "4e49675aa22bf2aba8eb41809066d35e87d30c6d", "url": "https://github.com/openhab/openhab-addons/commit/4e49675aa22bf2aba8eb41809066d35e87d30c6d", "message": "[energenie] Initial contribution (#6461)\n\n* [energenie] oh1 migration\r\n\r\nSigned-off-by: Hans-J\u00f6rg Merk <hans-joerg.merk@t-online.de>\r\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>", "committedDate": "2020-05-07T19:55:39Z", "type": "forcePushed"}, {"oid": "a9114be0275e6c8fd0d813596806c4ce562a781c", "url": "https://github.com/openhab/openhab-addons/commit/a9114be0275e6c8fd0d813596806c4ce562a781c", "message": "[energenie] Initial contribution (#6461)\n\n* [energenie] oh1 migration\r\n\r\nSigned-off-by: Hans-J\u00f6rg Merk <hans-joerg.merk@t-online.de>\r\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-07T20:01:25Z", "type": "forcePushed"}, {"oid": "22f92f23727b6da656a83e96d87508771006bd6d", "url": "https://github.com/openhab/openhab-addons/commit/22f92f23727b6da656a83e96d87508771006bd6d", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-07T20:42:32Z", "type": "forcePushed"}, {"oid": "71f51ee9b2ac13239da37b598a6f06d90a64d466", "url": "https://github.com/openhab/openhab-addons/commit/71f51ee9b2ac13239da37b598a6f06d90a64d466", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-09T10:05:52Z", "type": "forcePushed"}, {"oid": "cdbac9e6c9482d3a9052092827a9484057c93df6", "url": "https://github.com/openhab/openhab-addons/commit/cdbac9e6c9482d3a9052092827a9484057c93df6", "message": "[enigma2] Initial contribution #7514\n\n- Performance enhancement\n- Added support for questions\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-09T13:28:18Z", "type": "forcePushed"}, {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "url": "https://github.com/openhab/openhab-addons/commit/a4a53907dbd63d6ec024e6d73fad86e7060235fc", "message": "[enigma2] Initial contribution #7514\n\n- Performance enhancement\n- Added support for questions\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-09T13:37:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDg1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r422650850", "bodyText": "What about an exception which can be thrown here due to text having an unexpected format?", "author": "t2000", "createdAt": "2020-05-10T14:12:11Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -203,6 +222,22 @@ private void processPowerResult(Document document) {\n \n     private void processChannelResult(Document document) {\n         channel = getString(document, \"e2servicename\");\n+        // Add channel-Reference-ID if not known\n+        if(!channels.containsKey(channel)) {\n+            channels.put(channel, getString(document, \"e2servicereference\"));\n+        }\n+    }\n+\n+    private void processAnswerResult(Document document) {\n+        if(asking) {\n+            boolean state = getBoolean(document, \"e2state\");\n+            if (state) {\n+                String[] text = getString(document, \"e2statetext\").split(\" \");\n+                answer = text[text.length - 1].replace(\"!\", \"\");", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4NDY2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r422684663", "bodyText": "I think there couldn't occur an exception:\n\nthe result auf getString(document, \"e2statetext\") is never null\nther result of  split(\" \") always returns an array with at least one item, also if there is no blank in the string, or the string has no characters\nso text.length - 1 ist always greater or equals zero\nthe index of the text-array is always in range\nthe result of text[text.length - 1] is never null\nreplace(\"!\", \"\") has no effect if there is no ! in the string\n\nI did some tests with several formats including zero length strings and everythings works as expected.", "author": "gdolfen", "createdAt": "2020-05-10T18:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0NDQ5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423144491", "bodyText": "thanks for the explanation, I wasn't sure about the \"the result auf getString(document, \"e2statetext\") is never null\".", "author": "t2000", "createdAt": "2020-05-11T15:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxOTgxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423319814", "bodyText": "Why are you testing logs? I would prefer if all the code used the logger field directly.", "author": "cpmeister", "createdAt": "2020-05-11T21:06:32Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Optional<Enigma2Configuration> configuration = Optional.empty();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        configuration = Optional.ofNullable(getConfigAs(Enigma2Configuration.class));\n+        configuration.ifPresent(config -> {\n+            if(config.host.isEmpty()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"host must not be empty\");\n+            } else if(config.timeout <= 0 || config.timeout > 300) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"timeout must be between 0 and 300 seconds\");\n+            } else if(config.refreshInterval <= 0 || config.refreshInterval > 3600) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"refreshInterval must be between 0 and 3600 seconds\");\n+            }\n+            enigma2Client = Optional.of(new Enigma2Client(config.host, config.user, config.password, config.timeout));\n+            refreshJob = Optional.of(scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS));\n+        });\n+    }\n+\n+    private void refresh() {\n+        getEnigma2Client().ifPresent(client -> {\n+            boolean online = client.refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(client.getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(client.getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(client.getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(client.getDescription()));\n+                if(lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                    lastAnswerTime = client.getLastAnswerTime();\n+                    updateState(CHANNEL_ANSWER, new StringType(client.getAnswer()));\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        refreshJob.ifPresent( job -> {\n+            if(!job.isCancelled()) {\n+                job.cancel(true);\n+            }\n+        });\n+        refreshJob = Optional.empty();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        getLogger().debug(\"handleCommand({},{})\", channelUID, command);\n+        getEnigma2Client().ifPresent(client -> {\n+            if (CHANNEL_POWER.equals(channelUID.getId())) {\n+                handlePower(channelUID, command, client);\n+            } else if (CHANNEL_CHANNEL.equals(channelUID.getId())) {\n+                handleChannel(channelUID, command, client);\n+            } else if (CHANNEL_MEDIA_PLAYER.equals(channelUID.getId())) {\n+                handleMediaPlayer(channelUID, command);\n+            } else if (CHANNEL_MEDIA_STOP.equals(channelUID.getId())) {\n+                handleMediaStop(channelUID, command);\n+            } else if (CHANNEL_MUTE.equals(channelUID.getId())) {\n+                handleMute(channelUID, command, client);\n+            } else if (CHANNEL_VOLUME.equals(channelUID.getId())) {\n+                handleVolume(channelUID, command, client);\n+            } else if (CHANNEL_TITLE.equals(channelUID.getId())) {\n+                handleTitle(channelUID, command, client);\n+            } else if (CHANNEL_DESCRIPTION.equals(channelUID.getId())) {\n+                handleDescription(channelUID, command, client);\n+            } else if (CHANNEL_ANSWER.equals(channelUID.getId())) {\n+                handleAnswer(channelUID, command, client);\n+            }\n+        });\n+    }\n+\n+    private void handleVolume(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshVolume();\n+            updateState(channelUID, new PercentType(client.getVolume()));\n+        } else if (command instanceof PercentType) {\n+            client.setVolume(((PercentType)command).intValue());\n+        } else if (command instanceof DecimalType) {\n+            client.setVolume(((DecimalType)command).intValue());\n+        }  else {\n+            getLogger().info(\"Channel {} only accepts PercentType, DecimalType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleMute(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshVolume();\n+            updateState(channelUID, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+        } else if (OnOffType.ON.equals(command)) {\n+            client.setMute(true);\n+        } else if (OnOffType.OFF.equals(command)) {\n+            client.setMute(false);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts OnOffType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleAnswer(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshAnswer();\n+            if(lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                lastAnswerTime = client.getLastAnswerTime();\n+                updateState(channelUID, new StringType(client.getAnswer()));\n+            }\n+        } else {\n+            getLogger().info(\"Channel {} only accepts RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleMediaStop(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        } else if (command instanceof OnOffType) {\n+            sendRcCommand(Enigma2RemoteKey.STOP);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts OnOffType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleMediaPlayer(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            return;\n+        } else if (PlayPauseType.PLAY == command) {\n+            sendRcCommand(Enigma2RemoteKey.PLAY);\n+        } else if (PlayPauseType.PAUSE == command) {\n+            sendRcCommand(Enigma2RemoteKey.PAUSE);\n+        } else if (NextPreviousType.NEXT == command) {\n+            sendRcCommand(Enigma2RemoteKey.FAST_FORWARD);\n+        } else if (NextPreviousType.PREVIOUS == command) {\n+            sendRcCommand(Enigma2RemoteKey.FAST_BACKWARD);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts PlayPauseType, NextPreviousType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleChannel(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshChannel();\n+            updateState(channelUID, new StringType(client.getChannel()));\n+        } else if (command instanceof StringType) {\n+            client.setChannel(command.toString());\n+        } else {\n+            getLogger().info(\"Channel {} only accepts StringType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleTitle(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshEpg();\n+            updateState(channelUID, new StringType(client.getTitle()));\n+        } else {\n+            getLogger().info(\"Channel {} only accepts RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleDescription(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshEpg();\n+            updateState(channelUID, new StringType(client.getDescription()));\n+        } else {\n+            getLogger().info(\"Channel {} only accepts RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handlePower(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (RefreshType.REFRESH == command) {\n+            client.refreshPower();\n+            updateState(channelUID, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            client.setPower(true);\n+        } else if (OnOffType.OFF == command) {\n+            client.setPower(false);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts OnOffType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    public void sendRcCommand(String rcButton) {\n+        getLogger().debug(\"sendRcCommand({})\", rcButton);\n+        try {\n+            Enigma2RemoteKey remoteKey = Enigma2RemoteKey.valueOf(rcButton);\n+            sendRcCommand(remoteKey);\n+        } catch (IllegalArgumentException ex) {\n+            getLogger().warn(\"{} is not a valid value for button - available are: {}\", rcButton,\n+                    Stream.of(Enigma2RemoteKey.values()).map(b -> b.name()).collect(Collectors.joining(\", \")));\n+        }\n+    }\n+\n+    private void sendRcCommand(Enigma2RemoteKey remoteKey) {\n+        getEnigma2Client().ifPresent(client -> client.sendRcCommand(remoteKey.getValue()));\n+    }\n+\n+    public void sendInfo(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendInfo(timeout, text));\n+    }\n+\n+    public void sendWarning(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendWarning(timeout, text));\n+    }\n+\n+    public void sendError(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendError(timeout, text));\n+    }\n+\n+    public void sendQuestion(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendQuestion(timeout, text));\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(Enigma2Actions.class);\n+    }\n+\n+    /**\n+     * Getter for Test-Injection\n+     * @return Enigma2Client.\n+     */\n+    Optional<Enigma2Client> getEnigma2Client() {\n+        return enigma2Client;\n+    }\n+\n+    /**\n+     * Getter for Test-Injection\n+     * @return Enigma2Client.\n+     */\n+    Logger getLogger() {\n+        return logger;\n+    }", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNDM3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423934376", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxOTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjE2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423322169", "bodyText": "can you make this final?", "author": "cpmeister", "createdAt": "2020-05-11T21:11:17Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNDUwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423934503", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjczNw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423322737", "bodyText": "If there is no configuration present shouldn't that put the thing offline?", "author": "cpmeister", "createdAt": "2020-05-11T21:12:25Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Optional<Enigma2Configuration> configuration = Optional.empty();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        configuration = Optional.ofNullable(getConfigAs(Enigma2Configuration.class));\n+        configuration.ifPresent(config -> {", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0ODU1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423948558", "bodyText": "Fixed, because of changing to a default Enigma2Configuration the configuration never clould be null. If it is only the default, there are missing parameters and so the thing would go offline in case of parameter validation", "author": "gdolfen", "createdAt": "2020-05-12T18:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423326319", "bodyText": "I would prefer initializing to a default configuration instance instead of using an Optional.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Optional<Enigma2Configuration> configuration = Optional.empty();\n          \n          \n            \n                private Enigma2Configuration configuration = new Enigma2Configuration();", "author": "cpmeister", "createdAt": "2020-05-11T21:19:23Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Optional<Enigma2Configuration> configuration = Optional.empty();", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0Njc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423946762", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjcwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423326700", "bodyText": "can this be made final?\nAlso this field should be renamed to reduce confusion between it and timeout parameters in other methods.", "author": "cpmeister", "createdAt": "2020-05-11T21:20:10Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNDgzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423934839", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODgwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423328802", "bodyText": "This line needs to be formatted", "author": "cpmeister", "createdAt": "2020-05-11T21:24:35Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );\n+        }\n+    }\n+\n+    public void setPower(boolean power) {\n+        refreshPower();\n+        if(this.power != power) {\n+            transmit(PATH_TOGGLE_POWER).ifPresent( this::processPowerResult );\n+        }\n+    }\n+\n+    public void setVolume(int volume) {\n+        transmit(PATH_SET_VOLUME + volume).ifPresent(this::processVolumeResult);\n+    }\n+\n+    public void setChannel(String name) {\n+        if(channels.containsKey(name)) {\n+            String id = channels.get(name);\n+            transmit(PATH_ZAP + UrlEncoded.encodeString(id)).ifPresent(document -> channel = name);\n+        } else {\n+            getLogger().warn(\"Channel {} not found.\", name);\n+        }\n+    }\n+\n+    public void sendRcCommand(int key) {\n+        transmit(PATH_REMOTE_CONTROL + key);\n+    }\n+\n+    public void sendError(int timeout, String text) {\n+        sendMessage(TYPE_ERROR, timeout, text);\n+    }\n+\n+    public void sendWarning(int timeout, String text) {\n+        sendMessage(TYPE_WARNING, timeout, text);\n+    }\n+\n+    public void sendInfo(int timeout, String text) {\n+        sendMessage(TYPE_INFO, timeout, text);\n+    }\n+\n+    public void sendQuestion(int timeout, String text) {\n+        asking = true;\n+        sendMessage(TYPE_QUESTION, timeout, text);\n+    }\n+\n+    private void sendMessage(int type, int timeout, String text) {\n+        transmit(PATH_MESSAGE + type + \"&timeout=\" + timeout + \"&text=\" + UrlEncoded.encodeString(text));\n+    }\n+\n+    private void processPowerResult(Document document) {\n+        power = !getBoolean(document, \"e2instandby\");\n+        if(!power) {\n+            title = \"\";\n+            description = \"\";\n+            channel = \"\";\n+        }\n+    }\n+\n+    private void processChannelResult(Document document) {\n+        channel = getString(document, \"e2servicename\");\n+        // Add channel-Reference-ID if not known\n+        if(!channels.containsKey(channel)) {\n+            channels.put(channel, getString(document, \"e2servicereference\"));\n+        }\n+    }\n+\n+    private void processAnswerResult(Document document) {\n+        if(asking) {\n+            boolean state = getBoolean(document, \"e2state\");\n+            if (state) {\n+                String[] text = getString(document, \"e2statetext\").split(\" \");\n+                answer = text[text.length - 1].replace(\"!\", \"\");\n+                asking = false;\n+                lastAnswerTime = LocalDateTime.now();\n+            }\n+        }\n+    }\n+\n+    private void processVolumeResult(Document document) {\n+        volume = getInt( document,\"e2current\");\n+        mute = getBoolean(document, \"e2ismuted\");\n+    }\n+\n+    private void processEpgResult(Document document) {\n+        title = getString(document, \"e2eventtitle\");\n+        description = getString(document, \"e2eventdescription\");\n+    }\n+\n+    private void processAllServicesResult(Document document) {\n+        NodeList bouquetList = document.getElementsByTagName(\"e2bouquet\");\n+        channels.clear();\n+        for(int i = 0; i < bouquetList.getLength(); i++) {\n+            Element bouquet = (Element)bouquetList.item(i);\n+            NodeList serviceList = bouquet.getElementsByTagName(\"e2service\");\n+            for(int j = 0; j < serviceList.getLength(); j++) {\n+                Element service = (Element) serviceList.item(j);\n+                String id = service.getElementsByTagName(\"e2servicereference\").item(0).getTextContent();\n+                String name = service.getElementsByTagName(\"e2servicename\").item(0).getTextContent();\n+                channels.put(name, id);\n+            }\n+        }\n+    }\n+\n+    private String getString(Document document, String elementId) {\n+        return Optional.ofNullable(document.getElementsByTagName(elementId)).map(nodeList -> nodeList.item(0)).map(Node::getTextContent).map(String::trim).orElse(\"\");", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNjI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423936270", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMDQ3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423330474", "bodyText": "I see why this needs to be its own class. You could replace this class with a static method get(String url, int timeout).", "author": "cpmeister", "createdAt": "2020-05-11T21:28:15Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2HttpClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * The {@link Enigma2HttpClient} class is responsible for sending HTTP-Get requests to the Enigma2 device.\n+ * It is devided from {@link Enigma2Client} for better testing purpose.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2HttpClient {\n+    private int timeout;\n+\n+    public Enigma2HttpClient(int timeout) {\n+        this.timeout = timeout;\n+    }\n+\n+    public String get(String url) throws IOException, IllegalArgumentException {\n+        String xml = HttpUtil.executeUrl( \"GET\", url, timeout * 1000);\n+        // remove some unsupported xml-characters\n+        Pattern p = Pattern.compile(\"[^\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\u10000-\\\\u10FFF]+\");\n+        return p.matcher(xml).replaceAll(\"\");\n+    }", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNzQxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423937419", "bodyText": "If it is a static method, I could not mock it with Mockito. In case of that, I'm not able to test the code because I should not send a real HTTP request in test cases. Any suggestions?", "author": "gdolfen", "createdAt": "2020-05-12T18:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMDQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMDc4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423330786", "bodyText": "This pattern should be a static field so you can reuse it", "author": "cpmeister", "createdAt": "2020-05-11T21:28:57Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2HttpClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * The {@link Enigma2HttpClient} class is responsible for sending HTTP-Get requests to the Enigma2 device.\n+ * It is devided from {@link Enigma2Client} for better testing purpose.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2HttpClient {\n+    private int timeout;\n+\n+    public Enigma2HttpClient(int timeout) {\n+        this.timeout = timeout;\n+    }\n+\n+    public String get(String url) throws IOException, IllegalArgumentException {\n+        String xml = HttpUtil.executeUrl( \"GET\", url, timeout * 1000);\n+        // remove some unsupported xml-characters\n+        Pattern p = Pattern.compile(\"[^\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\u10000-\\\\u10FFF]+\");", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNzUyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423937521", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMDc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMTc0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423331743", "bodyText": "It seems wasteful to create a new object each time. In fact per my ealier suggestion you could get rid of this client class entirely and just call a static method directly instead.", "author": "cpmeister", "createdAt": "2020-05-11T21:30:57Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );\n+        }\n+    }\n+\n+    public void setPower(boolean power) {\n+        refreshPower();\n+        if(this.power != power) {\n+            transmit(PATH_TOGGLE_POWER).ifPresent( this::processPowerResult );\n+        }\n+    }\n+\n+    public void setVolume(int volume) {\n+        transmit(PATH_SET_VOLUME + volume).ifPresent(this::processVolumeResult);\n+    }\n+\n+    public void setChannel(String name) {\n+        if(channels.containsKey(name)) {\n+            String id = channels.get(name);\n+            transmit(PATH_ZAP + UrlEncoded.encodeString(id)).ifPresent(document -> channel = name);\n+        } else {\n+            getLogger().warn(\"Channel {} not found.\", name);\n+        }\n+    }\n+\n+    public void sendRcCommand(int key) {\n+        transmit(PATH_REMOTE_CONTROL + key);\n+    }\n+\n+    public void sendError(int timeout, String text) {\n+        sendMessage(TYPE_ERROR, timeout, text);\n+    }\n+\n+    public void sendWarning(int timeout, String text) {\n+        sendMessage(TYPE_WARNING, timeout, text);\n+    }\n+\n+    public void sendInfo(int timeout, String text) {\n+        sendMessage(TYPE_INFO, timeout, text);\n+    }\n+\n+    public void sendQuestion(int timeout, String text) {\n+        asking = true;\n+        sendMessage(TYPE_QUESTION, timeout, text);\n+    }\n+\n+    private void sendMessage(int type, int timeout, String text) {\n+        transmit(PATH_MESSAGE + type + \"&timeout=\" + timeout + \"&text=\" + UrlEncoded.encodeString(text));\n+    }\n+\n+    private void processPowerResult(Document document) {\n+        power = !getBoolean(document, \"e2instandby\");\n+        if(!power) {\n+            title = \"\";\n+            description = \"\";\n+            channel = \"\";\n+        }\n+    }\n+\n+    private void processChannelResult(Document document) {\n+        channel = getString(document, \"e2servicename\");\n+        // Add channel-Reference-ID if not known\n+        if(!channels.containsKey(channel)) {\n+            channels.put(channel, getString(document, \"e2servicereference\"));\n+        }\n+    }\n+\n+    private void processAnswerResult(Document document) {\n+        if(asking) {\n+            boolean state = getBoolean(document, \"e2state\");\n+            if (state) {\n+                String[] text = getString(document, \"e2statetext\").split(\" \");\n+                answer = text[text.length - 1].replace(\"!\", \"\");\n+                asking = false;\n+                lastAnswerTime = LocalDateTime.now();\n+            }\n+        }\n+    }\n+\n+    private void processVolumeResult(Document document) {\n+        volume = getInt( document,\"e2current\");\n+        mute = getBoolean(document, \"e2ismuted\");\n+    }\n+\n+    private void processEpgResult(Document document) {\n+        title = getString(document, \"e2eventtitle\");\n+        description = getString(document, \"e2eventdescription\");\n+    }\n+\n+    private void processAllServicesResult(Document document) {\n+        NodeList bouquetList = document.getElementsByTagName(\"e2bouquet\");\n+        channels.clear();\n+        for(int i = 0; i < bouquetList.getLength(); i++) {\n+            Element bouquet = (Element)bouquetList.item(i);\n+            NodeList serviceList = bouquet.getElementsByTagName(\"e2service\");\n+            for(int j = 0; j < serviceList.getLength(); j++) {\n+                Element service = (Element) serviceList.item(j);\n+                String id = service.getElementsByTagName(\"e2servicereference\").item(0).getTextContent();\n+                String name = service.getElementsByTagName(\"e2servicename\").item(0).getTextContent();\n+                channels.put(name, id);\n+            }\n+        }\n+    }\n+\n+    private String getString(Document document, String elementId) {\n+        return Optional.ofNullable(document.getElementsByTagName(elementId)).map(nodeList -> nodeList.item(0)).map(Node::getTextContent).map(String::trim).orElse(\"\");\n+    }\n+\n+    private boolean getBoolean(Document document, String elementId) {\n+        return Boolean.parseBoolean(getString(document, elementId));\n+    }\n+\n+    private int getInt(Document document, String elementId) {\n+        try {\n+            return Integer.parseInt(getString(document, elementId));\n+        } catch (NumberFormatException e) {\n+            return 0;\n+        }\n+    }\n+\n+    public int getVolume() {\n+        return volume;\n+    }\n+\n+    public boolean isMute() {\n+        return mute;\n+    }\n+\n+    public boolean isPower() {\n+        return power;\n+    }\n+\n+    public LocalDateTime getLastAnswerTime() {\n+        return lastAnswerTime;\n+    }\n+\n+    public String getChannel() {\n+        return channel;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getAnswer() {\n+        return answer;\n+    }\n+\n+    public Collection<String> getChannels() {\n+        return channels.keySet();\n+    }\n+\n+    /**\n+     * Getter for Test-Injection\n+     * @return HttpGet.\n+     */\n+    Enigma2HttpClient getEnigma2HttpClient() {\n+        return new Enigma2HttpClient(timeout);", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0OTAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423949015", "bodyText": "Fixed, but not with a static method because of testability", "author": "gdolfen", "createdAt": "2020-05-12T18:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMTc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMjc1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423332750", "bodyText": "this doesn't look formatted correctly", "author": "cpmeister", "createdAt": "2020-05-11T21:33:09Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );\n+        }\n+    }\n+\n+    public void setPower(boolean power) {\n+        refreshPower();\n+        if(this.power != power) {\n+            transmit(PATH_TOGGLE_POWER).ifPresent( this::processPowerResult );", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzOTU5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423939591", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMjc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMjgwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423332804", "bodyText": "here too", "author": "cpmeister", "createdAt": "2020-05-11T21:33:14Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MDY5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423940696", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMjgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNDkzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423334934", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int value;\n          \n          \n            \n                private final int value;", "author": "cpmeister", "createdAt": "2020-05-11T21:37:54Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2RemoteKey.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link Enigma2RemoteKey} class defines the remote keys of an enigma2 device\n+ * used across the whole binding.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum Enigma2RemoteKey {\n+    POWER(116),\n+\n+    KEY_0(11),\n+    KEY_1(2),\n+    KEY_2(3),\n+    KEY_3(4),\n+    KEY_4(5),\n+    KEY_5(6),\n+    KEY_6(7),\n+    KEY_7(8),\n+    KEY_8(9),\n+    KEY_9(10),\n+\n+    ARROW_LEFT(412),\n+    ARROW_RIGHT(407),\n+\n+    VOLUME_DOWN(114),\n+    VOLUME_UP(115),\n+    MUTE(113),\n+\n+    CHANNEL_UP(402),\n+    CHANNEL_DOWN(403),\n+\n+    LEFT(105),\n+    RIGHT(106),\n+    UP(103),\n+    DOWN(108),\n+    OK(352),\n+    EXIT(174),\n+\n+    RED(398),\n+    GREEN(399),\n+    YELLOW(400),\n+    BLUE(401),\n+\n+    PLAY(207),\n+    PAUSE(119),\n+    STOP(128),\n+    RECORD(167),\n+    FAST_FORWARD(208),\n+    FAST_BACKWARD(168),\n+\n+    TV(377),\n+    RADIO(385),\n+    AUDIO(392),\n+    VIDEO(393),\n+    TEXT(388),\n+    INFO(358),\n+    MENU(139),\n+    HELP(138),\n+    SUBTITLE(370),\n+    EPG(358);\n+\n+\n+    private int value;", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MDg0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423940845", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNDkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNTAyMw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423335023", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);", "author": "cpmeister", "createdAt": "2020-05-11T21:38:07Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MDk3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423940977", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNjE2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423336166", "bodyText": "Trying to set the initial size of a HashMap often doesn't work as you would expect and is hard to get right. It is better to just let it initialize to the default value.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<String, Object> properties = new HashMap<>(2);\n          \n          \n            \n                        Map<String, Object> properties = new HashMap<>();", "author": "cpmeister", "createdAt": "2020-05-11T21:40:46Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        getLogger().debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>(2);", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNDk1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423934953", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNjE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzODMwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423338301", "bodyText": "This isn't formatted correctly", "author": "cpmeister", "createdAt": "2020-05-11T21:45:21Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNTI3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423935272", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T18:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzODMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MTM2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423341360", "bodyText": "Since not all transmit calls even care about the return result, and parsing xml is very computationally heavy, I think it would be better to allow the caller to pass in a Consumer instead. That way the transmit method can skip parsing the result for callers that don't care about it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Optional<Document> transmit(String path) {\n          \n          \n            \n                private Optional<Document> transmit(String path, @Nullable Consumer<Document> consumer) {", "author": "cpmeister", "createdAt": "2020-05-11T21:52:14Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {", "originalCommit": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkzNTgyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423935820", "bodyText": "Fixed, but not with a Consumer. Instead I divided it into two methods.", "author": "gdolfen", "createdAt": "2020-05-12T18:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MTM2MA=="}], "type": "inlineReview"}, {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "url": "https://github.com/openhab/openhab-addons/commit/a420585ed4948594640ddbdb3b4cbba04a0e24c8", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review findings\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-12T19:14:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTgwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423985805", "bodyText": "you should use a switch statement here", "author": "cpmeister", "createdAt": "2020-05-12T19:37:38Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Enigma2Configuration configurationFromProperties = getConfigAs(Enigma2Configuration.class);\n+        if (configurationFromProperties != null) {\n+            configuration = configurationFromProperties;\n+        }\n+        if (configuration.host.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"host must not be empty\");\n+        } else if (configuration.timeout <= 0 || configuration.timeout > 300) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"timeout must be between 0 and 300 seconds\");\n+        } else if (configuration.refreshInterval <= 0 || configuration.refreshInterval > 3600) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"refreshInterval must be between 0 and 3600 seconds\");\n+        }\n+        enigma2Client = Optional.of(new Enigma2Client(configuration.host, configuration.user, configuration.password,\n+                configuration.timeout));\n+        refreshJob = Optional.of(\n+                scheduler.scheduleWithFixedDelay(this::refresh, 2, configuration.refreshInterval, TimeUnit.SECONDS));\n+    }\n+\n+    private void refresh() {\n+        getEnigma2Client().ifPresent(client -> {\n+            boolean online = client.refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(client.getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(client.getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(client.getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(client.getDescription()));\n+                if (lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                    lastAnswerTime = client.getLastAnswerTime();\n+                    updateState(CHANNEL_ANSWER, new StringType(client.getAnswer()));\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        refreshJob.ifPresent(job -> {\n+            if (!job.isCancelled()) {\n+                job.cancel(true);\n+            }\n+        });\n+        refreshJob = Optional.empty();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand({},{})\", channelUID, command);\n+        getEnigma2Client().ifPresent(client -> {\n+            if (CHANNEL_POWER.equals(channelUID.getId())) {", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1OTQzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424059431", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MDIwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423990200", "bodyText": "Just letting you know in case you are not aware, but there is a current outstanding bug regarding actions that currently requires a workaround.\nopenhab/openhab-core#1265\nIf you feel like implementing the workaround you can use this as a example:\nhttps://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/action/EcobeeActions.java#L89", "author": "cpmeister", "createdAt": "2020-05-12T19:45:57Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/actions/Enigma2Actions.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.actions;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.enigma2.handler.Enigma2Handler;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+\n+/**\n+ * This is the automation engine actions handler service for the\n+ * enigma2 actions.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@ThingActionsScope(name = \"enigma2\")\n+@NonNullByDefault\n+public class Enigma2Actions implements ThingActions {", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1OTY2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424059663", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MDIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MTA0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423991042", "bodyText": "Making the Future fields nullable is the pattern used in other bindings.", "author": "cpmeister", "createdAt": "2020-05-12T19:47:28Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1OTc2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424059766", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MTA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NzU1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423997558", "bodyText": "It would be better to declare these variables only when needed.\nAlso, it should be safe to cache a DocumentBuilderFactory instance for reuse. Though I can't say the same for DocumentBuilder since there are mixed reports on whether it is thread-safe or not...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(xml.isPresent()) {\n          \n          \n            \n                            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n          \n          \n            \n                        if(xml.isPresent()) {\n          \n          \n            \n                            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n          \n          \n            \n                            DocumentBuilder builder = factory.newDocumentBuilder();\n          \n          \n            \n                            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));", "author": "cpmeister", "createdAt": "2020-05-12T19:59:30Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -114,75 +117,92 @@ public void refreshPower() {\n     }\n \n     public void refreshAllServices() {\n-        if(power || channels.isEmpty()) {\n-            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n         }\n     }\n \n     public void refreshChannel() {\n-        if(power) {\n-            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n         }\n     }\n \n     public void refreshAnswer() {\n-        if(asking) {\n-            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n         }\n     }\n \n     public void refreshVolume() {\n-        if(power) {\n-            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n         }\n     }\n \n     public void refreshEpg() {\n-        if(power) {\n-            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n         }\n     }\n \n-    private Optional<Document> transmit(String path) {\n+    private Optional<Document> transmitWithResult(String path) {\n         try {\n             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n             DocumentBuilder builder = factory.newDocumentBuilder();\n-            getLogger().debug(\"Transmitting {}\", host + path);\n-            String xml = getEnigma2HttpClient().get(host + path);\n-            getLogger().debug(\"Transmitting result is {}\", xml);\n-            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1OTg1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424059858", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NzU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5ODA4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423998088", "bodyText": "You should cache host+path in a local variable so it can be reused.", "author": "cpmeister", "createdAt": "2020-05-12T20:00:27Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -114,75 +117,92 @@ public void refreshPower() {\n     }\n \n     public void refreshAllServices() {\n-        if(power || channels.isEmpty()) {\n-            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n         }\n     }\n \n     public void refreshChannel() {\n-        if(power) {\n-            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n         }\n     }\n \n     public void refreshAnswer() {\n-        if(asking) {\n-            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n         }\n     }\n \n     public void refreshVolume() {\n-        if(power) {\n-            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n         }\n     }\n \n     public void refreshEpg() {\n-        if(power) {\n-            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n         }\n     }\n \n-    private Optional<Document> transmit(String path) {\n+    private Optional<Document> transmitWithResult(String path) {\n         try {\n             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n             DocumentBuilder builder = factory.newDocumentBuilder();\n-            getLogger().debug(\"Transmitting {}\", host + path);\n-            String xml = getEnigma2HttpClient().get(host + path);\n-            getLogger().debug(\"Transmitting result is {}\", xml);\n-            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n+            }\n+            return Optional.empty();\n         } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n             if (online || !initialized) {\n-                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+                logger.debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private Optional<String> transmit(String path) {\n+        try {\n+            logger.debug(\"Transmitting {}\", host + path);", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1OTkzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424059935", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5ODA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjkwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424002908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"Error on transmit {}.\", host + path, e);\n          \n          \n            \n                            logger.debug(\"Error on transmit {}{}.\", host, path, e);", "author": "cpmeister", "createdAt": "2020-05-12T20:09:08Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new LinkedHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmitWithResult(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n+            }\n+            return Optional.empty();\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                logger.debug(\"Error on transmit {}.\", host + path, e);", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDA3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424060072", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNDcxMg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424004712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (configurationFromProperties != null) {\n          \n          \n            \n                        configuration = configurationFromProperties;\n          \n          \n            \n                    }\n          \n          \n            \n                    configuration = configurationFromProperties;", "author": "cpmeister", "createdAt": "2020-05-12T20:12:19Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Enigma2Configuration configurationFromProperties = getConfigAs(Enigma2Configuration.class);\n+        if (configurationFromProperties != null) {\n+            configuration = configurationFromProperties;\n+        }", "originalCommit": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDM1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424060357", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-12T22:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNDcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTA0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424101040", "bodyText": "Just to deal with the null check warnings. Also, no harm in cancelling something twice.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(refreshJob != null) {\n          \n          \n            \n                        if (!refreshJob.isCancelled()) {\n          \n          \n            \n                            refreshJob.cancel(true);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    refreshJob = null;\n          \n          \n            \n                    ScheduledFuture<?> refreshJob = this.refreshJob;\n          \n          \n            \n                    if(refreshJob != null) {\n          \n          \n            \n                        refreshJob.cancel(true);\n          \n          \n            \n                    }\n          \n          \n            \n                    this.refreshJob = null;", "author": "cpmeister", "createdAt": "2020-05-13T00:03:38Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(Enigma2Configuration.class);\n+        if (configuration.host.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"host must not be empty\");\n+        } else if (configuration.timeout <= 0 || configuration.timeout > 300) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"timeout must be between 0 and 300 seconds\");\n+        } else if (configuration.refreshInterval <= 0 || configuration.refreshInterval > 3600) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"refreshInterval must be between 0 and 3600 seconds\");\n+        }\n+        enigma2Client = Optional.of(new Enigma2Client(configuration.host, configuration.user, configuration.password,\n+                configuration.timeout));\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, configuration.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        getEnigma2Client().ifPresent(client -> {\n+            boolean online = client.refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(client.getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(client.getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(client.getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(client.getDescription()));\n+                if (lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                    lastAnswerTime = client.getLastAnswerTime();\n+                    updateState(CHANNEL_ANSWER, new StringType(client.getAnswer()));\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void dispose() {\n+        if(refreshJob != null) {\n+            if (!refreshJob.isCancelled()) {\n+                refreshJob.cancel(true);\n+            }\n+        }\n+        refreshJob = null;", "originalCommit": "745e4744e53247fb3277f098b99127e09af46ea1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NTk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424645995", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-13T18:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjI1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424102252", "bodyText": "Might want to be sure that this won't be called concurrently, otherwise change this to a ConcurrentHashMap. Sadly I'm not aware of a thread-safe version of LinkedHashMap other than using Collections.synchronizedMap();", "author": "cpmeister", "createdAt": "2020-05-13T00:08:18Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new LinkedHashMap<>();", "originalCommit": "745e4744e53247fb3277f098b99127e09af46ea1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NTkxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424645915", "bodyText": "Fixed, I use the ConcurrentHashMap because there is no need for the entries to be ordered", "author": "gdolfen", "createdAt": "2020-05-13T18:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTM3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424695374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> refreshJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> refreshJob;", "author": "cpmeister", "createdAt": "2020-05-13T19:57:44Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;", "originalCommit": "11729a83391827eabbfe1a6309b5632da03bf90a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0NDEwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424744104", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-13T21:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODA3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429258075", "bodyText": "I think this should be a debug statement. Bindings should quite under normal operations.\nAre you by the way sure the Arrays.toString is needed, I would hope/expect that the logging implementation is smart enough for that, but for normal printing, it is definitely needed.\nA (small) drawback is that when people would have info logging disable it would still convert it to a string, but it's not that likely that people will have INFO logging off, however, if we don't need I would love have it gone.", "author": "martinvw", "createdAt": "2020-05-22T13:51:00Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));\n+            properties.put(Enigma2BindingConstants.CONFIG_TIMEOUT, new BigDecimal(5));\n+            return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(info.getName()).build();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ThingUID getThingUID(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        Validate.notNull(ipAddress);\n+        return new ThingUID(Enigma2BindingConstants.THING_TYPE_DEVICE, ipAddress.replace(\".\", \"_\"));\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_http._tcp.local.\";\n+    }\n+\n+    private boolean isEnigma2Device(String ipAddress) {\n+        try {\n+            return getEnigma2HttpClient().get(\"http://\" + ipAddress + \"/web/about\").contains(\"e2enigmaversion\");\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n+    @Nullable\n+    private String getIPAddress(ServiceInfo info) {\n+        InetAddress[] addresses = info.getInet4Addresses();\n+        if (addresses.length > 1) {\n+            logger.info(\"Enigma2 device {} reports multiple addresses - using the first one! {}\", info.getName(),\n+                    Arrays.toString(addresses));", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDQzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344439", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODQ1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429258453", "bodyText": "Consider calling the e ignore this makes the intention to ignore it more clear and a lot of tools support it as well.", "author": "martinvw", "createdAt": "2020-05-22T13:51:39Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));\n+            properties.put(Enigma2BindingConstants.CONFIG_TIMEOUT, new BigDecimal(5));\n+            return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(info.getName()).build();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ThingUID getThingUID(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        Validate.notNull(ipAddress);\n+        return new ThingUID(Enigma2BindingConstants.THING_TYPE_DEVICE, ipAddress.replace(\".\", \"_\"));\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_http._tcp.local.\";\n+    }\n+\n+    private boolean isEnigma2Device(String ipAddress) {\n+        try {\n+            return getEnigma2HttpClient().get(\"http://\" + ipAddress + \"/web/about\").contains(\"e2enigmaversion\");\n+        } catch (IOException e) {", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDUwNg==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344506", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MTI2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429261267", "bodyText": "This will throw Exception's on null values, given you are already using nullable annotations I would rather not see these calls especially because we try to get rid of commons.lang.\nAnd if you really insist on such a method you could/should use Objects.requireNonNull. However, I do think that also the usage of that should not be combined with our nullable annotations.\nSo please remove all occurrences of Validate.notNull and/or similar methods, and please check that these classes contain the correct nullable annotation", "author": "martinvw", "createdAt": "2020-05-22T13:56:25Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));\n+            properties.put(Enigma2BindingConstants.CONFIG_TIMEOUT, new BigDecimal(5));\n+            return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(info.getName()).build();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ThingUID getThingUID(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDU2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344565", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MTI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MjM5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429262397", "bodyText": "Please apply the Nullable annotations on the correct location and apply it to all occurrences.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DiscoveryResult createResult(ServiceInfo info) {\n          \n          \n            \n                public@Nullable DiscoveryResult createResult(ServiceInfo info) {", "author": "martinvw", "createdAt": "2020-05-22T13:58:12Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDY4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344685", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MjM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2Mjk5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429262993", "bodyText": "This field could be final", "author": "martinvw", "createdAt": "2020-05-22T13:59:13Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2HttpClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * The {@link Enigma2HttpClient} class is responsible for sending HTTP-Get requests to the Enigma2 device.\n+ * It is devided from {@link Enigma2Client} for better testing purpose.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2HttpClient {\n+    public static final Pattern PATTERN = Pattern.compile(\"[^\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\u10000-\\\\u10FFF]+\");\n+    private int timeout;", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDc0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344745", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2Mjk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MzgwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429263800", "bodyText": "Is there a specific reason to pass a BigDecimal here, the field of the configuration is an int, would just 5 also work here? Same applies to the next line :-)", "author": "martinvw", "createdAt": "2020-05-22T14:00:31Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDgxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344811", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MzgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NTQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429265478", "bodyText": "I do believe the point of this factory is that you do not need to create it each time, I would suggest to either construct it in the constructor or lazy on calling some method but please do not recreate the factory each time.", "author": "martinvw", "createdAt": "2020-05-22T14:03:13Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmitWithResult(String path) {\n+        try {\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NDg4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429344885", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NTQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NjIxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429266215", "bodyText": "Would you really want to ignore the exceptions in other cases, why?", "author": "martinvw", "createdAt": "2020-05-22T14:04:21Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmitWithResult(String path) {\n+        try {\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n+            }\n+            return Optional.empty();\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NjQ1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429346458", "bodyText": "Yes, I have to ignore them because this methode is called every refresh interval. If the thing change to offline, there is no availabe HTTP-Connection and the log will be flooded with Connection-Excpetions. The Excpetions should only be logged the first time, when the thing changes from offline to online (!initialized) or if it is online.", "author": "gdolfen", "createdAt": "2020-05-22T16:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NjIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2Njg2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429266866", "bodyText": "All the boolean's here will have the same value but some explicit and others implicit, consider making it consistent.", "author": "martinvw", "createdAt": "2020-05-22T14:05:34Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NjU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429346553", "bodyText": "Fixed", "author": "gdolfen", "createdAt": "2020-05-22T16:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2Njg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2ODA5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429268095", "bodyText": "Is there a reason to have power separate from online. They seem to be highly correlated?", "author": "martinvw", "createdAt": "2020-05-22T14:07:45Z", "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;", "originalCommit": "7d16bbd875bd69282dd9a35adab920b527c1bb7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0NzUxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429347519", "bodyText": "There is a different between power an online. Power is off if the thing is in standby, but the it is still online, because tehre is an available HTTP-Connection an the binding is able to change the power state. If the thing is offline, there is no available HTTP-Connection.", "author": "gdolfen", "createdAt": "2020-05-22T16:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2ODA5NQ=="}], "type": "inlineReview"}, {"oid": "55660caa26b52f996ff2419a9726f57dab77908c", "url": "https://github.com/openhab/openhab-addons/commit/55660caa26b52f996ff2419a9726f57dab77908c", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-22T17:27:41Z", "type": "commit"}, {"oid": "d9e568c46aa5e1289a1138987a0907d238ae4831", "url": "https://github.com/openhab/openhab-addons/commit/d9e568c46aa5e1289a1138987a0907d238ae4831", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review finding\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-22T17:27:43Z", "type": "commit"}, {"oid": "d9e568c46aa5e1289a1138987a0907d238ae4831", "url": "https://github.com/openhab/openhab-addons/commit/d9e568c46aa5e1289a1138987a0907d238ae4831", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review finding\n\nSigned-off-by: gdolfen <gdolfen@web.de>", "committedDate": "2020-05-22T17:27:43Z", "type": "forcePushed"}]}