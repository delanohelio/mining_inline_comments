{"pr_number": 9314, "pr_title": "[powermax] Improve debugging in message classes", "pr_createdAt": "2020-12-10T06:32:16Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9314", "timeline": [{"oid": "92034cd7c8db8ba23333408b1f7f937d99145c4f", "url": "https://github.com/openhab/openhab-addons/commit/92034cd7c8db8ba23333408b1f7f937d99145c4f", "message": "Improve debugging in message classes\n\nEach PowermaxBaseMessage subclass had its own toString() which added\nuseful debug info but duplicated a lot of the logic in the message\nhandler. I've moved the debug info inline and removed the duplication,\nand also added decoding for more values to the debug output.\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-10T06:43:58Z", "type": "commit"}, {"oid": "92034cd7c8db8ba23333408b1f7f937d99145c4f", "url": "https://github.com/openhab/openhab-addons/commit/92034cd7c8db8ba23333408b1f7f937d99145c4f", "message": "Improve debugging in message classes\n\nEach PowermaxBaseMessage subclass had its own toString() which added\nuseful debug info but duplicated a lot of the logic in the message\nhandler. I've moved the debug info inline and removed the duplication,\nand also added decoding for more values to the debug output.\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-10T06:43:58Z", "type": "forcePushed"}, {"oid": "e4251fa0f31f830bb11f1efb6696a53cbbc6eb71", "url": "https://github.com/openhab/openhab-addons/commit/e4251fa0f31f830bb11f1efb6696a53cbbc6eb71", "message": "Fix for 0xFF byte values, which convert to int -1\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-11T01:21:04Z", "type": "forcePushed"}, {"oid": "ac1cdf5f397f8007949b414e7c7d5004437bbb83", "url": "https://github.com/openhab/openhab-addons/commit/ac1cdf5f397f8007949b414e7c7d5004437bbb83", "message": "Fix for 0xFF byte values, which convert to int -1\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-13T05:12:30Z", "type": "commit"}, {"oid": "ac1cdf5f397f8007949b414e7c7d5004437bbb83", "url": "https://github.com/openhab/openhab-addons/commit/ac1cdf5f397f8007949b414e7c7d5004437bbb83", "message": "Fix for 0xFF byte values, which convert to int -1\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-13T05:12:30Z", "type": "forcePushed"}, {"oid": "e067938068159395970c547c0d714e9a23a6dc48", "url": "https://github.com/openhab/openhab-addons/commit/e067938068159395970c547c0d714e9a23a6dc48", "message": "Merge remote-tracking branch 'upstream/main' into powermax_improve_debugging", "committedDate": "2020-12-21T03:45:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3NzM2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547877362", "bodyText": "You don't need to mention String.", "author": "lolodomo", "createdAt": "2020-12-23T10:03:32Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -30,13 +33,15 @@\n     private int code;\n     private PowermaxSendType sendType;\n     private PowermaxReceiveType receiveType;\n+    private List<String> debugInfo;\n \n     /**\n      * Constructor.\n      *\n      * @param message the message as a buffer of bytes\n      */\n     public PowermaxBaseMessage(byte[] message) {\n+        this.debugInfo = new ArrayList<String>();", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3NzQxNA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547877414", "bodyText": "You don't need to mention String.", "author": "lolodomo", "createdAt": "2020-12-23T10:03:39Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -57,6 +62,7 @@ public PowermaxBaseMessage(PowermaxSendType sendType) {\n      * @param param the dynamic part of a message to be sent; null if no dynamic part\n      */\n     public PowermaxBaseMessage(PowermaxSendType sendType, byte[] param) {\n+        this.debugInfo = new ArrayList<String>();", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3ODgyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547878828", "bodyText": "Suggestion: reduce the number of parenthesis like if (decoded != null && !decoded.isBlank()) {", "author": "lolodomo", "createdAt": "2020-12-23T10:06:45Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -147,17 +164,55 @@ public boolean isAckRequired() {\n         return receiveType == null || receiveType.isAckRequired();\n     }\n \n+    // Debugging helpers\n+\n+    public void addDebugInfo(String name, String info, String decoded) {\n+        StringBuilder debugLine = new StringBuilder();\n+\n+        debugLine.append(name);\n+        debugLine.append(\" = \");\n+        debugLine.append(info);\n+\n+        if ((decoded != null) && !(decoded.isBlank())) {", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3OTY2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547879663", "bodyText": "Even if null annotation is not implemented for this  binding, could you please add @Nullable to the decoded parameter.", "author": "lolodomo", "createdAt": "2020-12-23T10:08:23Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -147,17 +164,55 @@ public boolean isAckRequired() {\n         return receiveType == null || receiveType.isAckRequired();\n     }\n \n+    // Debugging helpers\n+\n+    public void addDebugInfo(String name, String info, String decoded) {", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4MjcwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547882702", "bodyText": "Please add @Nullable to the decoded parameter.", "author": "lolodomo", "createdAt": "2020-12-23T10:15:30Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -147,17 +164,55 @@ public boolean isAckRequired() {\n         return receiveType == null || receiveType.isAckRequired();\n     }\n \n+    // Debugging helpers\n+\n+    public void addDebugInfo(String name, String info, String decoded) {\n+        StringBuilder debugLine = new StringBuilder();\n+\n+        debugLine.append(name);\n+        debugLine.append(\" = \");\n+        debugLine.append(info);\n+\n+        if ((decoded != null) && !(decoded.isBlank())) {\n+            debugLine.append(\" - \" + decoded);\n+        }\n+\n+        debugInfo.add(debugLine.toString());\n+    }\n+\n+    public void addDebugInfo(String name, String info) {\n+        addDebugInfo(name, info, null);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data, String decoded) {", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4NTk4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547885985", "bodyText": "Please add @Nullable to the decoded parameter.", "author": "lolodomo", "createdAt": "2020-12-23T10:22:59Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -147,17 +164,55 @@ public boolean isAckRequired() {\n         return receiveType == null || receiveType.isAckRequired();\n     }\n \n+    // Debugging helpers\n+\n+    public void addDebugInfo(String name, String info, String decoded) {\n+        StringBuilder debugLine = new StringBuilder();\n+\n+        debugLine.append(name);\n+        debugLine.append(\" = \");\n+        debugLine.append(info);\n+\n+        if ((decoded != null) && !(decoded.isBlank())) {\n+            debugLine.append(\" - \" + decoded);\n+        }\n+\n+        debugInfo.add(debugLine.toString());\n+    }\n+\n+    public void addDebugInfo(String name, String info) {\n+        addDebugInfo(name, info, null);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data, String decoded) {\n+        String hex = \"0x\" + HexUtils.bytesToHex(data);\n+        addDebugInfo(name, hex, decoded);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data) {\n+        addDebugInfo(name, data, null);\n+    }\n+\n+    public void addDebugInfo(String name, int data, String decoded) {", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4NjczNA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547886734", "bodyText": "Looks a little weird...", "author": "lolodomo", "createdAt": "2020-12-23T10:24:30Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -147,17 +164,55 @@ public boolean isAckRequired() {\n         return receiveType == null || receiveType.isAckRequired();\n     }\n \n+    // Debugging helpers\n+\n+    public void addDebugInfo(String name, String info, String decoded) {\n+        StringBuilder debugLine = new StringBuilder();\n+\n+        debugLine.append(name);\n+        debugLine.append(\" = \");\n+        debugLine.append(info);\n+\n+        if ((decoded != null) && !(decoded.isBlank())) {\n+            debugLine.append(\" - \" + decoded);\n+        }\n+\n+        debugInfo.add(debugLine.toString());\n+    }\n+\n+    public void addDebugInfo(String name, String info) {\n+        addDebugInfo(name, info, null);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data, String decoded) {\n+        String hex = \"0x\" + HexUtils.bytesToHex(data);\n+        addDebugInfo(name, hex, decoded);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data) {\n+        addDebugInfo(name, data, null);\n+    }\n+\n+    public void addDebugInfo(String name, int data, String decoded) {\n+        String len = data <= 0xFF ? \"02\" : data <= 0xFFFF ? \"04\" : \"08\";\n+        String hex = String.format(\"0x%\" + len + \"X\", data);", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODYxNzk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548617962", "bodyText": "Ha, this isn't really necessary, just trying to line up the hex output nicely to make it more readable by only printing hex strings of consistent lengths. I can simplify.", "author": "ronisaacson", "createdAt": "2020-12-24T16:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4NjczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTQ1OA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547895458", "bodyText": "Please add addDebugInfo with data parameter of type byte. It will be used at several places.", "author": "lolodomo", "createdAt": "2020-12-23T10:45:46Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxBaseMessage.java", "diffHunk": "@@ -147,17 +164,55 @@ public boolean isAckRequired() {\n         return receiveType == null || receiveType.isAckRequired();\n     }\n \n+    // Debugging helpers\n+\n+    public void addDebugInfo(String name, String info, String decoded) {\n+        StringBuilder debugLine = new StringBuilder();\n+\n+        debugLine.append(name);\n+        debugLine.append(\" = \");\n+        debugLine.append(info);\n+\n+        if ((decoded != null) && !(decoded.isBlank())) {\n+            debugLine.append(\" - \" + decoded);\n+        }\n+\n+        debugInfo.add(debugLine.toString());\n+    }\n+\n+    public void addDebugInfo(String name, String info) {\n+        addDebugInfo(name, info, null);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data, String decoded) {\n+        String hex = \"0x\" + HexUtils.bytesToHex(data);\n+        addDebugInfo(name, hex, decoded);\n+    }\n+\n+    public void addDebugInfo(String name, byte[] data) {\n+        addDebugInfo(name, data, null);\n+    }\n+\n+    public void addDebugInfo(String name, int data, String decoded) {\n+        String len = data <= 0xFF ? \"02\" : data <= 0xFFFF ? \"04\" : \"08\";\n+        String hex = String.format(\"0x%\" + len + \"X\", data);\n+        addDebugInfo(name, hex, decoded);\n+    }\n+\n+    public void addDebugInfo(String name, int data) {\n+        addDebugInfo(name, data, null);\n+    }\n+", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODYxMTUxNA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548611514", "bodyText": "You can call addDebugInfo(String, byte) and it will happily promote the byte to an int and use this variant. This is already being done in some places and it seems to work fine. I didn't add a byte variant to avoid unnecessary duplication, but I can if you think it's important?", "author": "ronisaacson", "createdAt": "2020-12-24T16:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0NzYyMA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548847620", "bodyText": "Is it called sometimes with an int or is it always with a byte as parameter ?", "author": "lolodomo", "createdAt": "2020-12-25T09:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NzE0OA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548887148", "bodyText": "Yes, in PowermaxStatusMessage for example:\n        byte[] message = getRawData();\n        byte eventType = message[3];\n        String eventTypeStr = PowermaxMessageConstants.getMessageTypeString(eventType & 0x000000FF);\n\n        addDebugInfo(\"Event type\", eventType, eventTypeStr);\n\nand in PowermaxPanelMessage:\n        byte[] message = getRawData();\n        int msgCnt = message[2] & 0x000000FF;\n\n        addDebugInfo(\"Event count\", msgCnt);\n\nSo the int variant works for both byte and int.", "author": "ronisaacson", "createdAt": "2020-12-25T15:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTc0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547895742", "bodyText": "You could use your new variable panelTypeNr", "author": "lolodomo", "createdAt": "2020-12-23T10:46:22Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxInfoMessage.java", "diffHunk": "@@ -37,25 +37,28 @@ public PowermaxInfoMessage(byte[] message) {\n     }\n \n     @Override\n-    public PowermaxState handleMessage(PowermaxCommManager commManager) {\n-        super.handleMessage(commManager);\n-\n+    protected PowermaxState handleMessageInternal(PowermaxCommManager commManager) {\n         if (commManager == null) {\n             return null;\n         }\n \n         PowermaxState updatedState = commManager.createNewState();\n \n         byte[] message = getRawData();\n+        byte panelTypeNr = message[7];\n+        String panelTypeStr;\n \n         PowermaxPanelType panelType = null;\n         try {\n             panelType = PowermaxPanelType.fromCode(message[7]);", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTkxOA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547895918", "bodyText": "Why suppressing this log ?", "author": "lolodomo", "createdAt": "2020-12-23T10:46:46Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxInfoMessage.java", "diffHunk": "@@ -37,25 +37,28 @@ public PowermaxInfoMessage(byte[] message) {\n     }\n \n     @Override\n-    public PowermaxState handleMessage(PowermaxCommManager commManager) {\n-        super.handleMessage(commManager);\n-\n+    protected PowermaxState handleMessageInternal(PowermaxCommManager commManager) {\n         if (commManager == null) {\n             return null;\n         }\n \n         PowermaxState updatedState = commManager.createNewState();\n \n         byte[] message = getRawData();\n+        byte panelTypeNr = message[7];\n+        String panelTypeStr;\n \n         PowermaxPanelType panelType = null;\n         try {\n             panelType = PowermaxPanelType.fromCode(message[7]);\n+            panelTypeStr = panelType.toString();\n         } catch (IllegalArgumentException e) {\n-            logger.debug(\"Powermax alarm binding: unknwon panel type for code {}\", message[7] & 0x000000FF);", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODYyMTkxMg==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548621912", "bodyText": "Because immediately below is an unconditional call to addDebugInfo(\"Panel type\", panelTypeNr, panelTypeStr); and panelTypeStr in that case will be UNKNOWN, so I didn't see the need to log the same message twice.", "author": "ronisaacson", "createdAt": "2020-12-24T17:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0Nzc2NA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548847764", "bodyText": "Ok", "author": "lolodomo", "createdAt": "2020-12-25T09:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NTkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjI0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547896245", "bodyText": "Put your name as author of this class.", "author": "lolodomo", "createdAt": "2020-12-23T10:47:24Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxMessageConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.powermax.internal.message;\n+\n+/**\n+ * Constants used in Powermax messages\n+ *\n+ * @author Laurent Garnier - Initial contribution", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwMjEyMA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547902120", "bodyText": "This should be moved in the next if", "author": "lolodomo", "createdAt": "2020-12-23T11:01:42Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxPowerlinkMessage.java", "diffHunk": "@@ -50,37 +48,29 @@ public PowermaxState handleMessage(PowermaxCommManager commManager) {\n \n         if (subType == 0x03) {\n             // keep alive message\n+\n+            addDebugInfo(\"Subtype\", subType, \"Keep Alive\");\n+\n             commManager.sendAck(this, (byte) 0x02);\n             updatedState = commManager.createNewState();\n             updatedState.setLastKeepAlive(System.currentTimeMillis());\n-        } else if (subType == 0x0A && message[4] == 0x01) {\n-            logger.debug(\"Powermax alarm binding: Enrolling Powerlink\");\n-            commManager.enrollPowerlink();\n-            updatedState = commManager.createNewState();\n-            updatedState.setDownloadSetupRequired(true);\n-        } else {\n-            commManager.sendAck(this, (byte) 0x02);\n-        }\n-\n-        return updatedState;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        String str = super.toString();\n+        } else if (subType == 0x0A) {\n+            byte enroll = message[4];\n \n-        byte[] message = getRawData();\n-        byte subType = message[2];\n+            addDebugInfo(\"Subtype\", subType, \"Enroll\");\n+            addDebugInfo(\"Enroll\", enroll);", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODYyMzc2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548623769", "bodyText": "Can enroll be anything other than 0x01? Does it send a 0x00 for an unenrollment for example? There's another message inside the conditional, so I kept this one out to always log the value of the enroll parameter.", "author": "ronisaacson", "createdAt": "2020-12-24T17:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwMjEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0ODAzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548848039", "bodyText": "I don't know if enroll can be other than 1. But it is safer t consider it can be.", "author": "lolodomo", "createdAt": "2020-12-25T10:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwMjEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwNDA5MA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547904090", "bodyText": "Missing else sending ACK.", "author": "lolodomo", "createdAt": "2020-12-23T11:06:09Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxPowerlinkMessage.java", "diffHunk": "@@ -50,37 +48,29 @@ public PowermaxState handleMessage(PowermaxCommManager commManager) {\n \n         if (subType == 0x03) {\n             // keep alive message\n+\n+            addDebugInfo(\"Subtype\", subType, \"Keep Alive\");\n+\n             commManager.sendAck(this, (byte) 0x02);\n             updatedState = commManager.createNewState();\n             updatedState.setLastKeepAlive(System.currentTimeMillis());\n-        } else if (subType == 0x0A && message[4] == 0x01) {\n-            logger.debug(\"Powermax alarm binding: Enrolling Powerlink\");\n-            commManager.enrollPowerlink();\n-            updatedState = commManager.createNewState();\n-            updatedState.setDownloadSetupRequired(true);\n-        } else {\n-            commManager.sendAck(this, (byte) 0x02);\n-        }\n-\n-        return updatedState;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        String str = super.toString();\n+        } else if (subType == 0x0A) {\n+            byte enroll = message[4];\n \n-        byte[] message = getRawData();\n-        byte subType = message[2];\n+            addDebugInfo(\"Subtype\", subType, \"Enroll\");\n+            addDebugInfo(\"Enroll\", enroll);\n \n-        if (subType == 0x03) {\n-            str += \"\\n - sub type = keep alive\";\n-        } else if (subType == 0x0A) {\n-            str += \"\\n - sub type = enroll\";\n-            str += \"\\n - enroll = \" + String.format(\"%02X\", message[4]);\n+            if (enroll == 0x01) {\n+                logger.debug(\"Powermax alarm binding: Enrolling Powerlink\");\n+                commManager.enrollPowerlink();\n+                updatedState = commManager.createNewState();\n+                updatedState.setDownloadSetupRequired(true);\n+            }", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODYyNzQ4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548627486", "bodyText": "You're right, I missed the case where subType == 0x0A but enroll != 0x01. I'll add an ack for that case.", "author": "ronisaacson", "createdAt": "2020-12-24T17:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwNDA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwODM1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r547908353", "bodyText": "I don't know if the result is the same as before.\nI hope you have seriously tested this code.", "author": "lolodomo", "createdAt": "2020-12-23T11:16:47Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxStatusMessage.java", "diffHunk": "@@ -24,10 +28,34 @@\n  */\n public class PowermaxStatusMessage extends PowermaxBaseMessage {\n \n-    private static final String[] EVENT_TYPE_TABLE = new String[] { \"None\", \"Tamper Alarm\", \"Tamper Restore\", \"Open\",\n-            \"Closed\", \"Violated (Motion)\", \"Panic Alarm\", \"RF Jamming\", \"Tamper Open\", \"Communication Failure\",\n-            \"Line Failure\", \"Fuse\", \"Not Active\", \"Low Battery\", \"AC Failure\", \"Fire Alarm\", \"Emergency\",\n-            \"Siren Tamper\", \"Siren Tamper Restore\", \"Siren Low Battery\", \"Siren AC Fail\" };\n+    private static byte[] zoneBytes(byte zones1, byte zones9, byte zones17, byte zones25) {\n+        return new byte[] { zones25, zones17, zones9, zones1 };\n+    }\n+\n+    private static boolean[] zoneBits(byte[] zoneBytes) {\n+        boolean[] zones = new boolean[32];\n+        char[] binary = new BigInteger(zoneBytes).toString(2).toCharArray();\n+        int len = binary.length - 1;\n+\n+        for (int i = len; i >= 0; i--) {\n+            zones[len - i + 1] = (binary[i] == '1');\n+        }\n+\n+        return zones;\n+    }\n+\n+    private static String zoneList(byte[] zoneBytes) {\n+        boolean[] zones = zoneBits(zoneBytes);\n+        List<String> names = new ArrayList<>();\n+\n+        for (int i = 1; i < zones.length; i++) {\n+            if (zones[i]) {\n+                names.add(String.format(\"Zone %d\", i));\n+            }\n+        }", "originalCommit": "e067938068159395970c547c0d714e9a23a6dc48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODYzMDgzMA==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r548630830", "bodyText": "Yeah, this was my attempt to simplify the copy-and-paste instances of bit math. It's wordy but personally I find this approach (array of booleans) more readable than the previous:\n            int zoneBypass = (message[8] & 0x000000FF) | ((message[9] << 8) & 0x0000FF00)\n                    | ((message[10] << 16) & 0x00FF0000) | ((message[11] << 24) & 0xFF000000);\n\n            for (int i = 1; i <= panelSettings.getNbZones(); i++) {\n                updatedState.setSensorBypassed(i, ((zoneBypass >> (i - 1)) & 0x1) > 0);\n            }\n\nI've tested this pretty extensively and the result is the same. I'm open to suggestions though.", "author": "ronisaacson", "createdAt": "2020-12-24T17:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwODM1Mw=="}], "type": "inlineReview"}, {"oid": "48d1a22a4715f869f18ada59ab2a54d8469205d2", "url": "https://github.com/openhab/openhab-addons/commit/48d1a22a4715f869f18ada59ab2a54d8469205d2", "message": "Incorporate review feedback from lolodomo\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-24T17:23:04Z", "type": "commit"}, {"oid": "a9ebac90987cd110f57c832f78f2d743a8d60fa7", "url": "https://github.com/openhab/openhab-addons/commit/a9ebac90987cd110f57c832f78f2d743a8d60fa7", "message": "Change to inline debug messages\n\nSigned-off-by: Ron Isaacson <isaacson.ron@gmail.com>", "committedDate": "2020-12-26T19:32:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxNTU5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9314#discussion_r550915593", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "author": "Hilbrand", "createdAt": "2021-01-02T19:58:52Z", "path": "bundles/org.openhab.binding.powermax/src/main/java/org/openhab/binding/powermax/internal/message/PowermaxMessageConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "originalCommit": "a9ebac90987cd110f57c832f78f2d743a8d60fa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b32f3c3d776319925cd3c4c6a2548cec5ceaf7f6", "url": "https://github.com/openhab/openhab-addons/commit/b32f3c3d776319925cd3c4c6a2548cec5ceaf7f6", "message": "Update copyright year", "committedDate": "2021-01-02T19:59:19Z", "type": "commit"}]}