{"pr_number": 8909, "pr_title": "[remoteopenhab] Introduce things for the remote things and add support for HTTPS", "pr_createdAt": "2020-10-30T18:59:37Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8909", "timeline": [{"oid": "8aef20e8ed5c31277cd777f226da03c8664f7e47", "url": "https://github.com/openhab/openhab-addons/commit/8aef20e8ed5c31277cd777f226da03c8664f7e47", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-10-30T23:39:31Z", "type": "forcePushed"}, {"oid": "5dd5a90b8acf806f0581f44f034a3896e316c574", "url": "https://github.com/openhab/openhab-addons/commit/5dd5a90b8acf806f0581f44f034a3896e316c574", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-10-31T12:44:10Z", "type": "forcePushed"}, {"oid": "c9e4b2be68424ab4d9f3c58c3348e004c8da1238", "url": "https://github.com/openhab/openhab-addons/commit/c9e4b2be68424ab4d9f3c58c3348e004c8da1238", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-10-31T19:55:43Z", "type": "forcePushed"}, {"oid": "3f0a6f14b6d97824d0ff3497457d5f956f12fb75", "url": "https://github.com/openhab/openhab-addons/commit/3f0a6f14b6d97824d0ff3497457d5f956f12fb75", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-10-31T21:57:02Z", "type": "forcePushed"}, {"oid": "4a92a5d08b5da04501936eb563a364a4b61d4e5c", "url": "https://github.com/openhab/openhab-addons/commit/4a92a5d08b5da04501936eb563a364a4b61d4e5c", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-10-31T22:45:32Z", "type": "forcePushed"}, {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111", "url": "https://github.com/openhab/openhab-addons/commit/13bbe622cfedb4d3194f83d6b90af769dbee3111", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-01T10:17:22Z", "type": "commit"}, {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111", "url": "https://github.com/openhab/openhab-addons/commit/13bbe622cfedb4d3194f83d6b90af769dbee3111", "message": "[remoteopenhab] Introduce things for the remote things\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-01T10:17:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTMwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r517015302", "bodyText": "I suggest that you change your discovery service into a ThingHandlerService so that you don't have to manage osgi registration of this class. It is a bit verbose to explain how to make the change but I've found another PR that shows exactly the changes that are required: https://github.com/openhab/openhab-addons/pull/6396/files", "author": "cpmeister", "createdAt": "2020-11-03T23:29:32Z", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/discovery/RemoteopenhabDiscoveryService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.discovery;\n+\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration.THING_UID;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.handler.RemoteopenhabBridgeHandler;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabDiscoveryService} is responsible for discovering all the remote things\n+ * available in the remote openHAB server.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabDiscoveryService extends AbstractDiscoveryService implements RemoteopenhabThingsDataListener {", "originalCommit": "13bbe622cfedb4d3194f83d6b90af769dbee3111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMDQ3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r518030474", "bodyText": "Looks like a great feature.\nLots of bindings are not using this feature.", "author": "lolodomo", "createdAt": "2020-11-05T12:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0ODQyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r518248424", "bodyText": "Done", "author": "lolodomo", "createdAt": "2020-11-05T17:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNjM2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r517016367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                scheduler.schedule(() -> {\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        RemoteopenhabThing thing = client.getRemoteThing(uid);\n          \n          \n            \n                                        createTriggerChannels(thing, config.buildChannels);\n          \n          \n            \n                                        RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n          \n          \n            \n                                        if (statusInfo != null) {\n          \n          \n            \n                                            updateThingStatus(uid, statusInfo);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } catch (RemoteopenhabException e) {\n          \n          \n            \n                                        logger.debug(\"{}\", e.getMessage(), e);\n          \n          \n            \n                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                                    }\n          \n          \n            \n                                }, 0, TimeUnit.SECONDS);\n          \n          \n            \n                                scheduler.execute(() -> {\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        RemoteopenhabThing thing = client.getRemoteThing(uid);\n          \n          \n            \n                                        createTriggerChannels(thing, config.buildChannels);\n          \n          \n            \n                                        RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n          \n          \n            \n                                        if (statusInfo != null) {\n          \n          \n            \n                                            updateThingStatus(uid, statusInfo);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } catch (RemoteopenhabException e) {\n          \n          \n            \n                                        logger.debug(\"{}\", e.getMessage(), e);\n          \n          \n            \n                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                                    }\n          \n          \n            \n                                });", "author": "cpmeister", "createdAt": "2020-11-03T23:32:46Z", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/handler/RemoteopenhabThingHandler.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.handler;\n+\n+import static org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants.*;\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabTriggerChannelConfiguration.CHANNEL_UID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabChannel;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabThingHandler} is responsible for handling status updates associated to\n+ * any remote thing.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabThingHandler extends BaseThingHandler implements RemoteopenhabThingsDataListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RemoteopenhabThingHandler.class);\n+\n+    private @Nullable RemoteopenhabRestClient restClient;\n+\n+    private @NonNullByDefault({}) RemoteopenhabThingConfiguration config;\n+\n+    public RemoteopenhabThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // No state channel defined for this thing type and so no command to handle\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing remote openHAB handler for thing {}\", getThing().getUID());\n+        Bridge bridge = getBridge();\n+        initializeThing(bridge != null ? bridge.getStatus() : null);\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"bridgeStatusChanged {} for thing {}\", bridgeStatusInfo, getThing().getUID());\n+        initializeThing(bridgeStatusInfo.getStatus());\n+    }\n+\n+    private void initializeThing(@Nullable ThingStatus bridgeStatus) {\n+        Bridge bridge = getBridge();\n+        BridgeHandler bridgeHandler = bridge != null ? bridge.getHandler() : null;\n+        RemoteopenhabRestClient oldClient = this.restClient;\n+        if (oldClient != null) {\n+            oldClient.removeThingsDataListener(this);\n+            this.restClient = null;\n+        }\n+        if (bridgeHandler != null && bridgeStatus != null) {\n+            if (bridgeStatus == ThingStatus.ONLINE) {\n+                config = getConfigAs(RemoteopenhabThingConfiguration.class);\n+\n+                String uid = getConfigThingUID();\n+                if (uid.length() == 0) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Undefined thing UID setting in the thing configuration\");\n+                } else {\n+                    RemoteopenhabRestClient client = ((RemoteopenhabBridgeHandler) bridgeHandler).gestRestClient();\n+                    client.addThingsDataListener(this);\n+                    this.restClient = client;\n+\n+                    updateStatus(ThingStatus.UNKNOWN);\n+\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            RemoteopenhabThing thing = client.getRemoteThing(uid);\n+                            createTriggerChannels(thing, config.buildChannels);\n+                            RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n+                            if (statusInfo != null) {\n+                                updateThingStatus(uid, statusInfo);\n+                            }\n+                        } catch (RemoteopenhabException e) {\n+                            logger.debug(\"{}\", e.getMessage(), e);\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        }\n+                    }, 0, TimeUnit.SECONDS);", "originalCommit": "13bbe622cfedb4d3194f83d6b90af769dbee3111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTk4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r517541988", "bodyText": "Done", "author": "lolodomo", "createdAt": "2020-11-04T18:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNjM2Nw=="}], "type": "inlineReview"}, {"oid": "d8697747f6900c3d0acbabaac2ed889e738a5d5f", "url": "https://github.com/openhab/openhab-addons/commit/d8697747f6900c3d0acbabaac2ed889e738a5d5f", "message": "Adapt code to change in core\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-04T18:10:31Z", "type": "commit"}, {"oid": "b3e7bf0c77855325fb62d26a8dd0a43ce5f164cc", "url": "https://github.com/openhab/openhab-addons/commit/b3e7bf0c77855325fb62d26a8dd0a43ce5f164cc", "message": "Review comment: scheduler.execute\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-04T18:13:04Z", "type": "commit"}, {"oid": "dbaee5a8b9ec963b4093fa691c0403dfbf9b2417", "url": "https://github.com/openhab/openhab-addons/commit/dbaee5a8b9ec963b4093fa691c0403dfbf9b2417", "message": "Fixed tables in README\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-04T18:17:46Z", "type": "commit"}, {"oid": "332e8daf1900a05a7d5fcaf2ec0a56a86378c0a6", "url": "https://github.com/openhab/openhab-addons/commit/332e8daf1900a05a7d5fcaf2ec0a56a86378c0a6", "message": "Review comment: ThingHandlerService\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-05T17:52:58Z", "type": "commit"}, {"oid": "9bedb6d57d2cb77fddea73ae09ad245b2753e4f8", "url": "https://github.com/openhab/openhab-addons/commit/9bedb6d57d2cb77fddea73ae09ad245b2753e4f8", "message": "Add support for HTTPS communication\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-07T14:01:03Z", "type": "commit"}, {"oid": "5358f40bc6bb4db36d9305ae06465859f3968da3", "url": "https://github.com/openhab/openhab-addons/commit/5358f40bc6bb4db36d9305ae06465859f3968da3", "message": "Few changes to satisfy build\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-07T14:24:19Z", "type": "commit"}, {"oid": "bc3059b3e32176e34a8d19bae68560d7100e5f2c", "url": "https://github.com/openhab/openhab-addons/commit/bc3059b3e32176e34a8d19bae68560d7100e5f2c", "message": "Avoid SSE timeout exception after one minute when no event received\n\nFix #8977\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-09T18:25:05Z", "type": "commit"}, {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe", "url": "https://github.com/openhab/openhab-addons/commit/c8ec5ad2f6ca3e15034af7794a684355f681cafe", "message": "Check connection job: do nothing when the thing was ONLINE and the REST API is still reachable\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-09T18:39:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MDIxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520040214", "bodyText": "super.deactivate should be called last", "author": "cpmeister", "createdAt": "2020-11-09T18:51:40Z", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -44,22 +63,103 @@\n @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.remoteopenhab\")\n public class RemoteopenhabHandlerFactory extends BaseThingHandlerFactory {\n \n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Stream\n+            .concat(RemoteopenhabBindingConstants.SUPPORTED_BRIDGE_TYPES_UIDS.stream(),\n+                    RemoteopenhabBindingConstants.SUPPORTED_THING_TYPES_UIDS.stream())\n+            .collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(RemoteopenhabHandlerFactory.class);\n+\n+    private final HttpClient httpClient;\n     private final ClientBuilder clientBuilder;\n     private final SseEventSourceFactory eventSourceFactory;\n     private final RemoteopenhabChannelTypeProvider channelTypeProvider;\n     private final RemoteopenhabStateDescriptionOptionProvider stateDescriptionProvider;\n     private final Gson jsonParser;\n \n+    private HttpClient httpClientTrustingCert;\n+\n     @Activate\n-    public RemoteopenhabHandlerFactory(final @Reference ClientBuilder clientBuilder,\n-            final @Reference SseEventSourceFactory eventSourceFactory,\n+    public RemoteopenhabHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n+            final @Reference ClientBuilder clientBuilder, final @Reference SseEventSourceFactory eventSourceFactory,\n             final @Reference RemoteopenhabChannelTypeProvider channelTypeProvider,\n             final @Reference RemoteopenhabStateDescriptionOptionProvider stateDescriptionProvider) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+        this.httpClientTrustingCert = httpClientFactory.createHttpClient(RemoteopenhabBindingConstants.BINDING_ID);\n         this.clientBuilder = clientBuilder;\n         this.eventSourceFactory = eventSourceFactory;\n         this.channelTypeProvider = channelTypeProvider;\n         this.stateDescriptionProvider = stateDescriptionProvider;\n-        jsonParser = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create();\n+        this.jsonParser = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create();\n+\n+        try {\n+            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n+\n+            TrustManager[] trustAllCerts = new TrustManager[] { new X509ExtendedTrustManager() {\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType)\n+                        throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType)\n+                        throws CertificateException {\n+                }\n+\n+                @Override\n+                public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable Socket socket) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable Socket socket) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable SSLEngine engine) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable SSLEngine engine) throws CertificateException {\n+                }\n+            } };\n+            sslContext.init(null, trustAllCerts, null);\n+\n+            this.httpClientTrustingCert.getSslContextFactory().setSslContext(sslContext);\n+        } catch (NoSuchAlgorithmException e) {\n+            logger.warn(\"An exception occurred while requesting the SSL encryption algorithm : '{}'\", e.getMessage(),\n+                    e);\n+        } catch (KeyManagementException e) {\n+            logger.warn(\"An exception occurred while initialising the SSL context : '{}'\", e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        try {\n+            httpClientTrustingCert.start();\n+        } catch (Exception e) {\n+            logger.warn(\"Unable to start Jetty HttpClient\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected void deactivate(ComponentContext componentContext) {\n+        super.deactivate(componentContext);", "originalCommit": "c8ec5ad2f6ca3e15034af7794a684355f681cafe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3MjU2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520072560", "bodyText": "Ok", "author": "lolodomo", "createdAt": "2020-11-09T19:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MDIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTg2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520041869", "bodyText": "What is the benefit of overriding this method?", "author": "cpmeister", "createdAt": "2020-11-09T18:54:24Z", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -70,16 +170,36 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n         return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n     }\n \n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,\n+            @Nullable ThingUID thingUID, @Nullable ThingUID bridgeUID) {", "originalCommit": "c8ec5ad2f6ca3e15034af7794a684355f681cafe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NjgxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520096812", "bodyText": "The purpose is to inject the bridgeId in the thing UID. You can find the same method in a lot of bindings. Is it something no more needed because already done by the core framework ?", "author": "lolodomo", "createdAt": "2020-11-09T20:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTU5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520109592", "bodyText": "It is still needed I think. I was just curious.", "author": "cpmeister", "createdAt": "2020-11-09T20:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTg2OQ=="}], "type": "inlineReview"}, {"oid": "85f8adb346ad7043554a9d9d90a121becee8742f", "url": "https://github.com/openhab/openhab-addons/commit/85f8adb346ad7043554a9d9d90a121becee8742f", "message": "Review comment: super.deactivate\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-09T19:40:39Z", "type": "commit"}, {"oid": "610e5ea5d2a88c2e2d7856c9c831087dc9535bd0", "url": "https://github.com/openhab/openhab-addons/commit/610e5ea5d2a88c2e2d7856c9c831087dc9535bd0", "message": "Review comments: README\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-09T19:57:05Z", "type": "commit"}, {"oid": "9e48052ca7a5bde82f03f7780a62e750483816c5", "url": "https://github.com/openhab/openhab-addons/commit/9e48052ca7a5bde82f03f7780a62e750483816c5", "message": "Review comment: buildChannels parameter renamed\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-09T20:07:23Z", "type": "commit"}, {"oid": "7d89d98762f4917c0e540fb06f742abd154fe48e", "url": "https://github.com/openhab/openhab-addons/commit/7d89d98762f4917c0e540fb06f742abd154fe48e", "message": "Imrpoved logging when the REST API is failing\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-14T11:18:02Z", "type": "commit"}, {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be", "url": "https://github.com/openhab/openhab-addons/commit/acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be", "message": "Merge branch 'main' into remoteoh_things", "committedDate": "2020-11-14T12:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMTU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523731553", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String url = String.format(\"%s?recursive=fasle\", getRestApiUrl(\"items\"));\n          \n          \n            \n                        String url = String.format(\"%s?recursive=false\", getRestApiUrl(\"items\"));", "author": "fwolter", "createdAt": "2020-11-15T09:19:22Z", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/rest/RemoteopenhabRestClient.java", "diffHunk": "@@ -62,124 +75,150 @@\n     private final ClientBuilder clientBuilder;\n     private final SseEventSourceFactory eventSourceFactory;\n     private final Gson jsonParser;\n-    private String accessToken;\n-    private final String restUrl;\n \n     private final Object startStopLock = new Object();\n     private final List<RemoteopenhabStreamingDataListener> listeners = new CopyOnWriteArrayList<>();\n+    private final List<RemoteopenhabItemsDataListener> itemsListeners = new CopyOnWriteArrayList<>();\n+    private final List<RemoteopenhabThingsDataListener> thingsListeners = new CopyOnWriteArrayList<>();\n \n+    private HttpClient httpClient;\n+    private @Nullable String restUrl;\n     private @Nullable String restApiVersion;\n-    private @Nullable String restApiItems;\n-    private @Nullable String restApiEvents;\n+    private Map<String, @Nullable String> apiEndPointsUrls = new HashMap<>();\n     private @Nullable String topicNamespace;\n+    private String accessToken;\n+    private boolean trustedCertificate;\n     private boolean connected;\n \n     private @Nullable SseEventSource eventSource;\n     private long lastEventTimestamp;\n \n-    public RemoteopenhabRestClient(final ClientBuilder clientBuilder, final SseEventSourceFactory eventSourceFactory,\n-            final Gson jsonParser, final String accessToken, final String restUrl) {\n+    public RemoteopenhabRestClient(final HttpClient httpClient, final ClientBuilder clientBuilder,\n+            final SseEventSourceFactory eventSourceFactory, final Gson jsonParser) {\n+        this.httpClient = httpClient;\n         this.clientBuilder = clientBuilder;\n         this.eventSourceFactory = eventSourceFactory;\n         this.jsonParser = jsonParser;\n-        this.accessToken = accessToken;\n+        this.accessToken = \"\";\n+    }\n+\n+    public void setHttpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public String getRestUrl() throws RemoteopenhabException {\n+        String url = restUrl;\n+        if (url == null) {\n+            throw new RemoteopenhabException(\"REST client not correctly setup\");\n+        }\n+        return url;\n+    }\n+\n+    public void setRestUrl(String restUrl) {\n         this.restUrl = restUrl;\n     }\n \n+    public void setAccessToken(String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    public void setTrustedCertificate(boolean trustedCertificate) {\n+        this.trustedCertificate = trustedCertificate;\n+    }\n+\n     public void tryApi() throws RemoteopenhabException {\n         try {\n-            Properties httpHeaders = new Properties();\n-            if (!accessToken.isEmpty()) {\n-                httpHeaders.put(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken);\n-            }\n-            httpHeaders.put(HttpHeaders.ACCEPT, \"application/json\");\n-            String jsonResponse = HttpUtil.executeUrl(\"GET\", restUrl, httpHeaders, null, null, REQUEST_TIMEOUT);\n+            String jsonResponse = executeUrl(HttpMethod.GET, getRestUrl(), \"application/json\", null, null);\n             if (jsonResponse.isEmpty()) {\n-                throw new RemoteopenhabException(\"Failed to execute the root REST API\");\n+                throw new RemoteopenhabException(\"JSON response is empty\");\n             }\n-            RestApi restApi = jsonParser.fromJson(jsonResponse, RestApi.class);\n+            RemoteopenhabRestApi restApi = jsonParser.fromJson(jsonResponse, RemoteopenhabRestApi.class);\n             restApiVersion = restApi.version;\n             logger.debug(\"REST API version = {}\", restApiVersion);\n-            restApiItems = null;\n+            apiEndPointsUrls.clear();\n             for (int i = 0; i < restApi.links.length; i++) {\n-                if (\"items\".equals(restApi.links[i].type)) {\n-                    restApiItems = restApi.links[i].url;\n-                } else if (\"events\".equals(restApi.links[i].type)) {\n-                    restApiEvents = restApi.links[i].url;\n-                }\n+                apiEndPointsUrls.put(restApi.links[i].type, restApi.links[i].url);\n             }\n-            logger.debug(\"REST API items = {}\", restApiItems);\n-            logger.debug(\"REST API events = {}\", restApiEvents);\n+            logger.debug(\"REST API items = {}\", apiEndPointsUrls.get(\"items\"));\n+            logger.debug(\"REST API things = {}\", apiEndPointsUrls.get(\"things\"));\n+            logger.debug(\"REST API events = {}\", apiEndPointsUrls.get(\"events\"));\n             topicNamespace = restApi.runtimeInfo != null ? \"openhab\" : \"smarthome\";\n             logger.debug(\"topic namespace = {}\", topicNamespace);\n-        } catch (RemoteopenhabException e) {\n-            throw new RemoteopenhabException(e.getMessage());\n-        } catch (JsonSyntaxException e) {\n-            throw new RemoteopenhabException(\"Failed to parse the result of the root REST API\", e);\n-        } catch (IOException e) {\n-            throw new RemoteopenhabException(\"Failed to execute the root REST API\", e);\n+        } catch (RemoteopenhabException | JsonSyntaxException e) {\n+            throw new RemoteopenhabException(\"Failed to execute the root REST API: \" + e.getMessage(), e);\n         }\n     }\n \n-    public List<Item> getRemoteItems() throws RemoteopenhabException {\n+    public List<RemoteopenhabItem> getRemoteItems() throws RemoteopenhabException {\n         try {\n-            Properties httpHeaders = new Properties();\n-            if (!accessToken.isEmpty()) {\n-                httpHeaders.put(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken);\n+            String url = String.format(\"%s?recursive=fasle\", getRestApiUrl(\"items\"));", "originalCommit": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMzY0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523733649", "bodyText": "Woohhhh, bravo to find that tipo.", "author": "lolodomo", "createdAt": "2020-11-15T09:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMTU1Mw=="}], "type": "inlineReview"}, {"oid": "6a6101784c6ec57ad8f0222759424a18032756e5", "url": "https://github.com/openhab/openhab-addons/commit/6a6101784c6ec57ad8f0222759424a18032756e5", "message": "Review comment: fasle\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-15T09:36:51Z", "type": "commit"}, {"oid": "a1ac98c234171c77a6a78c50558815558c641f6c", "url": "https://github.com/openhab/openhab-addons/commit/a1ac98c234171c77a6a78c50558815558c641f6c", "message": "Review comment: deprecated \"required\" tag for channel parameter\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>", "committedDate": "2020-11-15T09:45:09Z", "type": "commit"}]}