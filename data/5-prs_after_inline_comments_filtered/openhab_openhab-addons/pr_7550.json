{"pr_number": 7550, "pr_title": "[smartthings] Initial contribution", "pr_createdAt": "2020-05-04T21:50:10Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7550", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNzk3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434817977", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-06-03T19:55:35Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODAxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438388014", "bodyText": "Removed", "author": "BobRak", "createdAt": "2020-06-10T20:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNzk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTMyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434821322", "bodyText": "This leads to a ClassCastException if more than this binding is installed. You should check the type with instanceof.", "author": "fwolter", "createdAt": "2020-06-03T20:02:27Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NzQxMw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444447413", "bodyText": "Fixed. I didn't realize this method could be called from another binding. I actually had a user who downloaded the binding from my github report an exception here.", "author": "BobRak", "createdAt": "2020-06-23T19:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTg3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434821876", "bodyText": "Can this message be replaced by using the debugger? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-06-03T20:03:28Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjE4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444446187", "bodyText": "removed", "author": "BobRak", "createdAt": "2020-06-23T19:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzA4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434823085", "bodyText": "activate() of the base class is invoked implicitly. You could remove this.", "author": "fwolter", "createdAt": "2020-06-03T20:05:52Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODM4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438388389", "bodyText": "removed", "author": "BobRak", "createdAt": "2020-06-10T20:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyOTI3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434829273", "bodyText": "Did you check if thingHandlers need to be thread-safe? If I see correctly, handleEvent() is invoked from another thread than createHandler() and I see no synchronization in the framework's handleEvent() callers.", "author": "fwolter", "createdAt": "2020-06-03T20:18:33Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.info(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String topic = event.getTopic();\n+            String data = (String) event.getProperty(\"data\");\n+            logger.trace(\"Event received on topic: {}\", topic);\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTcyOA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442371728", "bodyText": "I made this method synchronized.", "author": "BobRak", "createdAt": "2020-06-18T16:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyOTI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDQ4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434834480", "bodyText": "You might want to throw an exception if you received an unexpected status code. You could remove the @Nullable from the method signature, then.", "author": "fwolter", "createdAt": "2020-06-03T20:28:34Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.info(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MDg1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442370857", "bodyText": "I have never seen any result other that 202 but I expect a 500 could be returned if the hub was having a problem. I change the log level to warn. I think this is adequate.", "author": "BobRak", "createdAt": "2020-06-18T16:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDQ4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTIyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434835220", "bodyText": "Is this an error or normal behavior? If program execution is reached here, result would be null. Is this intended behavior?", "author": "fwolter", "createdAt": "2020-06-03T20:30:00Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NDg4OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442364888", "bodyText": "I removed the code related to status == 200 as it will never happen. 202 is the normal response code. The actual response message is sent by Smartthings as a separate message.", "author": "BobRak", "createdAt": "2020-06-18T16:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434835962", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void unsetHttpClientFactory() {\n          \n          \n            \n                protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {", "author": "fwolter", "createdAt": "2020-06-03T20:31:31Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.info(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String topic = event.getTopic();\n+            String data = (String) event.getProperty(\"data\");\n+            logger.trace(\"Event received on topic: {}\", topic);\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {\n+            // There have been some reports of handler.getSmartthingsName() returning a null.\n+            // Need to find out where null is coming from\n+            if (handler.getSmartthingsName() == null) {\n+                logger.warn(\n+                        \"A thing handler \\\"smartthings name\\\" is unexpectedly null: for thing {} with display name: {} and with attribute: {}\",\n+                        handler.toString(), stateData.deviceDisplayName, stateData.capabilityAttribute);\n+                return null;\n+            }\n+            if (handler.getSmartthingsName().equals(stateData.deviceDisplayName)) {\n+                for (Channel ch : handler.getThing().getChannels()) {\n+                    String chId = ch.getUID().getId();\n+                    if (chId.equals(stateData.capabilityAttribute)) {\n+                        return handler;\n+                    }\n+                }\n+            }\n+        }\n+\n+        logger.warn(\n+                \"Unable to locate handler for display name: {} with attribute: {}. If this thing is included in your OpenHabAppV2 SmartApp in the Smartthings App on your phone it must also be configured in openHAB\",\n+                stateData.deviceDisplayName, stateData.capabilityAttribute);\n+        return null;\n+    }\n+\n+    @Reference\n+    public void setChannelTypeService(ChannelTypeRegistry registry) {\n+        channelTypeRegistry = registry;\n+    }\n+\n+    public void unsetChannelTypeService(ChannelTypeRegistry registry) {\n+        channelTypeRegistry = null;\n+    }\n+\n+    public ChannelTypeRegistry getChannelTypeRegistry() {\n+        return channelTypeRegistry;\n+    }\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        logger.debug(\"setHttpClientFactory this: {}\", this.toString());\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+    }\n+\n+    protected void unsetHttpClientFactory() {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDA0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442410040", "bodyText": "Changed", "author": "BobRak", "createdAt": "2020-06-18T18:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434836917", "bodyText": "You could instantiate gson here or in the constructor. Then, you could remove the @Nullable.", "author": "fwolter", "createdAt": "2020-06-03T20:33:28Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2ODQxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442468418", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-18T19:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODc4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434838785", "bodyText": "If you want to catch the exceptions thrown by registerServlet(), you should explicitly specify them, since Exception catches also RuntimeException.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (ServletException | NamespaceException e) {", "author": "fwolter", "createdAt": "2020-06-03T20:37:30Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODkzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434838938", "bodyText": "Please heed the null compiler warning here. Since httpService is set by the framework, you could also annotate the field with @NonNullByDefault({}).", "author": "fwolter", "createdAt": "2020-06-03T20:37:48Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MDM2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434840368", "bodyText": "Can you remove these?", "author": "fwolter", "createdAt": "2020-06-03T20:40:37Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3MTY5MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442471690", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-18T20:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MDM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MjQ2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434842467", "bodyText": "You can do this more easier by rdr.lines().collect(Collectors.joining()). rdr must be of type BufferedReader, then.", "author": "fwolter", "createdAt": "2020-06-03T20:44:52Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.info(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+        logger.debug(\"Smartthings servlet service() called with: {}: {} {}\", req.getRemoteAddr(), req.getMethod(),\n+                path);\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        logger.debug(\"Smartthing servlet function requested: {} with Method: {}\", pathParts[0], req.getMethod());\n+\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet recieved a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        if (pathParts[0].equals(\"state\")) {\n+            // This is device state info returned from Smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MjgwNg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434842806", "bodyText": "Better use switch here.", "author": "fwolter", "createdAt": "2020-06-03T20:45:29Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.info(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+        logger.debug(\"Smartthings servlet service() called with: {}: {} {}\", req.getRemoteAddr(), req.getMethod(),\n+                path);\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        logger.debug(\"Smartthing servlet function requested: {} with Method: {}\", pathParts[0], req.getMethod());\n+\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet recieved a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        if (pathParts[0].equals(\"state\")) {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDIzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434844237", "bodyText": "What is your intention with the StringBuffer?", "author": "fwolter", "createdAt": "2020-06-03T20:48:15Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.info(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+        logger.debug(\"Smartthings servlet service() called with: {}: {} {}\", req.getRemoteAddr(), req.getMethod(),\n+                path);\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        logger.debug(\"Smartthing servlet function requested: {} with Method: {}\", pathParts[0], req.getMethod());\n+\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet recieved a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        if (pathParts[0].equals(\"state\")) {\n+            // This is device state info returned from Smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();\n+            logger.trace(\"Smartthing servlet processing \\\"state\\\" request. data: {}\", sb);\n+            publishEvent(STATE_EVENT_TOPIC, \"data\", sb.toString());\n+        } else if (pathParts[0].equals(\"discovery\")) {\n+            // This is discovery data returned from Smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();\n+            logger.trace(\"Smartthing servlet processing \\\"discovery\\\" request. data: {}\", sb);\n+            publishEvent(DISCOVERY_EVENT_TOPIC, \"data\", sb.toString());\n+        } else if (pathParts[0].equals(\"error\")) {\n+            // This is an error message from smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();\n+            logger.trace(\"Smartthing servlet processing \\\"error\\\" request. data: {}\", sb);\n+            Map<String, Object> map = new HashMap<String, Object>();\n+            map = gson.fromJson(sb.toString(), map.getClass());\n+            StringBuffer msg = new StringBuffer(\"Error message from Smartthings: \");\n+            msg.append(map.get(\"message\"));\n+            logger.warn(\"{}\", msg);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NTI4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442485287", "bodyText": "Building an error message to show the user. I am guessing you think it should be done differently?", "author": "BobRak", "createdAt": "2020-06-18T20:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4OTU5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442489597", "bodyText": "You could build the log message simply inline. Would simplify code and improve performance a bit.", "author": "fwolter", "createdAt": "2020-06-18T20:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NzEwNA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434847104", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        double hue = (hsb.getHue().doubleValue() / 3.60) + 0.5; // add .5 to round\n          \n          \n            \n                        double hue = Math.round((hsb.getHue().doubleValue() / 3.60));", "author": "fwolter", "createdAt": "2020-06-03T20:53:35Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsColor100Converter.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Color Control.\n+ * This can't use the default because when closing the door the command that comes in is \"closed\" but \"close\" need to be\n+ * sent to Smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsColor100Converter extends SmartthingsConverter {\n+\n+    private Pattern rgbInputPattern = Pattern.compile(\"^#[0-9a-fA-F]{6}\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsColor100Converter.class);\n+\n+    public SmartthingsColor100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+        // The command should be of HSBType. The hue component needs to be divided by 3.6 to convert 0-360 degrees to\n+        // 0-100 percent\n+        // The easiest way to do this is to create a new HSBType with the hue component changed.\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = (hsb.getHue().doubleValue() / 3.60) + 0.5; // add .5 to round", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NjQzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442486435", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-18T20:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NzEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0OTc4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434849782", "bodyText": "Suggestion: You already used regex here. Use it to split the hex code into parts, too. See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#group-int-", "author": "fwolter", "createdAt": "2020-06-03T20:58:39Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsColor100Converter.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Color Control.\n+ * This can't use the default because when closing the door the command that comes in is \"closed\" but \"close\" need to be\n+ * sent to Smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsColor100Converter extends SmartthingsConverter {\n+\n+    private Pattern rgbInputPattern = Pattern.compile(\"^#[0-9a-fA-F]{6}\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsColor100Converter.class);\n+\n+    public SmartthingsColor100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+        // The command should be of HSBType. The hue component needs to be divided by 3.6 to convert 0-360 degrees to\n+        // 0-100 percent\n+        // The easiest way to do this is to create a new HSBType with the hue component changed.\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = (hsb.getHue().doubleValue() / 3.60) + 0.5; // add .5 to round\n+            long hueInt = (long) hue;\n+            HSBType hsb100 = new HSBType(new DecimalType(hueInt), hsb.getSaturation(), hsb.getBrightness());\n+            // now use the default converter to convert to a JSON string\n+            jsonMsg = defaultConvertToSmartthings(channelUid, hsb100);\n+        } else {\n+            jsonMsg = defaultConvertToSmartthings(channelUid, command);\n+        }\n+        return jsonMsg;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n+     * @see org.openhab.binding.smartthings.internal.converter.SmartthingsConverter#convertToOpenHab(java.lang.String,\n+     * org.openhab.binding.smartthings.internal.SmartthingsStateData)\n+     */\n+    @Override\n+    public State convertToOpenHab(@Nullable String acceptedChannelType, SmartthingsStateData dataFromSmartthings) {\n+        // The color value from Smartthings will look like \"#123456\" which is the RGB color\n+        // This needs to be converted into HSB type\n+        String value = dataFromSmartthings.value;\n+        if (value == null) {\n+            logger.warn(\"Failed to convert color {} because Smartthings returned a null value.\",\n+                    dataFromSmartthings.deviceDisplayName);\n+            return UnDefType.UNDEF;\n+        }\n+\n+        // If the bulb is off the value maybe null, so better check\n+        State state;\n+        // First verify the format the string is valid\n+        Matcher matcher = rgbInputPattern.matcher(value);\n+        if (!matcher.matches()) {\n+            logger.warn(\n+                    \"The \\\"value\\\" in the following message is not a valid color. Expected a value like \\\"#123456\\\" instead of {}\",\n+                    dataFromSmartthings.toString());\n+            return UnDefType.UNDEF;\n+        }\n+\n+        // Get the RGB colors\n+        int rgb[] = new int[3];\n+        for (int i = 0, pos = 1; i < 3; i++, pos += 2) {\n+            String c = value.substring(pos, pos + 2);\n+            rgb[i] = Integer.parseInt(c, 16);\n+        }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MDU0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434850542", "bodyText": "The javadoc doesn't suite to this class", "author": "fwolter", "createdAt": "2020-06-03T20:59:53Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsColorConverter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Door Control.\n+ * This can't use the default because when closing the door the command that comes in is \"closed\" but \"close\" need to be\n+ * sent to Smartthings", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNDE2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r443804163", "bodyText": "I've gone through all of the Color related converters and updated the javadoc to fit the class and better explain when they are used.", "author": "BobRak", "createdAt": "2020-06-22T20:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MDU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MjQ4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434852489", "bodyText": "Is this annotation necessary?", "author": "fwolter", "createdAt": "2020-06-03T21:02:12Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwNDgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r443804832", "bodyText": "removed", "author": "BobRak", "createdAt": "2020-06-22T20:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MjQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1ODM2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434858363", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n          \n          \n            \n                    smartthingsName = thing.getConfigAs(SmartthingsThingConfig.class).smartthingsName;", "author": "fwolter", "createdAt": "2020-06-03T21:09:22Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNDY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r443814645", "bodyText": "Not sure what you want here. It seems the other possibility is:\nsmartthingsName = (String)thing.getConfiguration().get(\"smartthingsName\");\nIs that what you want or am I missing something?", "author": "BobRak", "createdAt": "2020-06-22T20:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1ODM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNjU0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444316541", "bodyText": "Sorry, mixed it up with BaseThingHandler.getConfigAs(). Please ignore my comment.", "author": "fwolter", "createdAt": "2020-06-23T15:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1ODM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1OTk2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434859966", "bodyText": "Can you remove this?", "author": "fwolter", "createdAt": "2020-06-03T21:11:36Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.\n+            // String commandStr = (command.toString().equalsIgnoreCase(\"open\")) ? \"open\" : \"close\";\n+            // value = surroundWithQuotes(commandStr.toLowerCase());", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNTUzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r443815531", "bodyText": "removed", "author": "BobRak", "createdAt": "2020-06-22T20:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1OTk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDM2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434860369", "bodyText": "Is it handled here or can this comment be (re)moved?", "author": "fwolter", "createdAt": "2020-06-03T21:12:14Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNTM4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r443815387", "bodyText": "removed", "author": "BobRak", "createdAt": "2020-06-22T20:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MTE2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434861160", "bodyText": "Maybe you want to ignore this type and log it?", "author": "fwolter", "createdAt": "2020-06-03T21:13:48Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.\n+            // String commandStr = (command.toString().equalsIgnoreCase(\"open\")) ? \"open\" : \"close\";\n+            // value = surroundWithQuotes(commandStr.toLowerCase());\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof PercentType) {\n+            value = command.toString();\n+        } else if (command instanceof PointType) { // Not really sure how to deal with this one and don't see a use for", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxOTc5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444419796", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T18:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjA2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434862068", "bodyText": "Is \"Contol\" correct?", "author": "fwolter", "createdAt": "2020-06-03T21:15:43Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.\n+            // String commandStr = (command.toString().equalsIgnoreCase(\"open\")) ? \"open\" : \"close\";\n+            // value = surroundWithQuotes(commandStr.toLowerCase());\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof PercentType) {\n+            value = command.toString();\n+        } else if (command instanceof PointType) { // Not really sure how to deal with this one and don't see a use for\n+                                                   // it in Smartthings right now\n+            value = command.toFullString();\n+        } else if (command instanceof RefreshType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof RewindFastforwardType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof StopMoveType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof PlayPauseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof StringListType) {\n+            value = surroundWithQuotes(command.toString());\n+        } else if (command instanceof StringType) {\n+            value = surroundWithQuotes(command.toString());\n+        } else if (command instanceof UpDownType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else {\n+            value = command.toString().toLowerCase();\n+        }\n+\n+        String jsonMsg = String.format(\n+                \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"value\\\": %s}\",\n+                thingTypeId, smartthingsName, channelUid.getId(), value);\n+\n+        return jsonMsg;\n+    }\n+\n+    private String surroundWithQuotes(String param) {\n+        return (new StringBuilder()).append('\"').append(param).append('\"').toString();\n+    }\n+\n+    protected State defaultConvertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings) {\n+        // If there is no stateMap the just return null State\n+        if (acceptedChannelType == null) {\n+            return UnDefType.NULL;\n+        }\n+\n+        String deviceType = dataFromSmartthings.capabilityAttribute;\n+        Object deviceValue = dataFromSmartthings.value;\n+\n+        // deviceValue can be null, handle that up front\n+        if (deviceValue == null) {\n+            return UnDefType.NULL;\n+        }\n+\n+        switch (acceptedChannelType) {\n+            case \"Color\":\n+                logger.warn(\n+                        \"Conversion of Color Contol-color is not currently supported. Need to provide support for message {}.\",", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNzczNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444427737", "bodyText": "Updated message", "author": "BobRak", "createdAt": "2020-06-23T18:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTgxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434869816", "bodyText": "I like this approach. You don't have to justify. IMHO you can remove this comment.", "author": "fwolter", "createdAt": "2020-06-03T21:31:58Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsDefaultConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+\n+/**\n+ * This \"Converter\" is assigned to a channel when a special converter is not needed.\n+ * A channel specific converter is specified in the thing-type channel property smartthings-converter then that channel\n+ * is used.\n+ * If a channel specific converter is not found a convert based on the channel ID is used.\n+ * If there is no convert found then this Default converter is used.\n+ * Yes, it would be possible to change the SamrtthingsConverter class to not being abstract and implement these methods\n+ * there. But, this makes it explicit that the default converter is being used.", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMDY4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444430687", "bodyText": "Thank you for liking and agreeing with my approach here. The previous reviewer recommended combining SmartthingsConverter and SmarttingDefaultConverter. But, I preferred having them separate. That is the purpose for the comment.  Therefore I would prefer to leave it.", "author": "BobRak", "createdAt": "2020-06-23T18:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MTA0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434871041", "bodyText": "What does Smartthings do with a command which could not be converted? Should this be logged?", "author": "fwolter", "createdAt": "2020-06-03T21:34:34Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsHue100Converter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Special converter for Smartthings hue values in the 0-100% range. OH2 uses 0-360 degrees\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsHue100Converter extends SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHue100Converter.class);\n+\n+    public SmartthingsHue100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = hsb.getHue().doubleValue() / 3.60;\n+            String value = String.format(\"[%.0f, %d, %d ]\", hue, hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+            // debug message\n+            String logMsg = String.format(\"OpenHAB HSB = %s, Smartthings HSB = %s, RGB = #%6X (%.0f, %.0f, %.0f)\",\n+                    hsb.toString(), value, hsb.getRGB(), hsb.getRed().doubleValue() * 3.6,\n+                    hsb.getGreen().doubleValue() * 3.6, hsb.getBlue().doubleValue() * 3.6);\n+            logger.debug(\"{}\", logMsg);\n+\n+            jsonMsg = String.format(\n+                    \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"value\\\": %s}\",\n+                    thingTypeId, smartthingsName, channelUid.getId(), value);\n+\n+        } else {\n+            jsonMsg = defaultConvertToSmartthings(channelUid, command);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444436917", "bodyText": "Yes, it should be logged. I added a log message in the SmartthingsConverter.defaultConvertToSmarttings method. All of the custom converters fall back to that method for things they can not convert.", "author": "BobRak", "createdAt": "2020-06-23T18:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MTk1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434871956", "bodyText": "It's good practice to add the unit to the variable name e.g. INITIAL_DELAY_SEC", "author": "fwolter", "createdAt": "2020-06-03T21:36:37Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0MDg1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444440858", "bodyText": "Changed", "author": "BobRak", "createdAt": "2020-06-23T18:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MTk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MzY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434873672", "bodyText": "If I see correctly, super.activate() is invoked without this code, too.", "author": "fwolter", "createdAt": "2020-06-03T21:40:42Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NTY1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444445658", "bodyText": "I'm sorry, I don't understand your comment.", "author": "BobRak", "createdAt": "2020-06-23T19:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MzY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MDg3MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444480870", "bodyText": "super.activate() should be invoked by the framework. So, you could remove the code above.", "author": "fwolter", "createdAt": "2020-06-23T20:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MzY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzI5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444487293", "bodyText": "Removed", "author": "BobRak", "createdAt": "2020-06-23T20:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MzY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3NjI1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434876257", "bodyText": "Where is this map populated?", "author": "fwolter", "createdAt": "2020-06-03T21:46:48Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzMyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438387327", "bodyText": "This map has been removed. It was left over from an earlier implementation", "author": "BobRak", "createdAt": "2020-06-10T20:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3NjI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3NjU0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434876549", "bodyText": "Map.get() can return null, if the key is not found. You should check for null here.", "author": "fwolter", "createdAt": "2020-06-03T21:47:31Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MTE3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434881178", "bodyText": "If I see correctly, this method is invoked also if another binding is stopped. You should check for identity here handlerFactory == smartthingsHandlerFactory, before setting it to null.", "author": "fwolter", "createdAt": "2020-06-03T21:58:23Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MTY4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444451686", "bodyText": "Done. Wish I had better understanding of the underlying OSGi framework.", "author": "BobRak", "createdAt": "2020-06-23T19:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MzUwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434883509", "bodyText": "Is there a case where this can be null?", "author": "fwolter", "createdAt": "2020-06-03T22:04:11Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"SmartthingsDiscoveryService Starting background scan\");\n+        if (scanningJob == null || scanningJob.isCancelled()) {\n+            logger.debug(\"Starting background scanning job\");\n+            if (scanningRunnable != null) {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1OTY0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444459646", "bodyText": "Removed", "author": "BobRak", "createdAt": "2020-06-23T19:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MzUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NDM1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434884353", "bodyText": "The compiler complains, because this is not thread-safe: scanningJob could be set to null between the null check and the invocation of cancel(). You could store a reference to scanningJob in a local variable.\nYou don't need to check if the job is already cancelled.", "author": "fwolter", "createdAt": "2020-06-03T22:06:24Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"SmartthingsDiscoveryService Starting background scan\");\n+        if (scanningJob == null || scanningJob.isCancelled()) {\n+            logger.debug(\"Starting background scanning job\");\n+            if (scanningRunnable != null) {\n+                this.scanningJob = scheduler.scheduleWithFixedDelay(this.scanningRunnable, INITIAL_DELAY, SCAN_INTERVAL,\n+                        TimeUnit.SECONDS);\n+                logger.debug(\"Background scanning job started\");\n+            } else {\n+                logger.debug(\"Background scanning job NOT started because the runnable has not been started yet\");\n+            }\n+        } else {\n+            logger.debug(\"ScanningJob active\");\n+        }\n+    }\n+\n+    /**\n+     * Stops background scanning for attached devices.\n+     */\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        if (scanningJob != null && !scanningJob.isCancelled()) {\n+            scanningJob.cancel(false);\n+            scanningJob = null;\n+        }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MzA3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444463071", "bodyText": "Updated.", "author": "BobRak", "createdAt": "2020-06-23T19:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NDM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NTkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434885902", "bodyText": "Syntactical sugar. Then, you could remove the inner class SmartthingsScan completely.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.scanningJob = scheduler.scheduleWithFixedDelay(this.scanningRunnable, INITIAL_DELAY, SCAN_INTERVAL,\n          \n          \n            \n                            this.scanningJob = scheduler.scheduleWithFixedDelay(this::sendSmartthingsDiscoveryRequest, INITIAL_DELAY, SCAN_INTERVAL,", "author": "fwolter", "createdAt": "2020-06-03T22:10:18Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"SmartthingsDiscoveryService Starting background scan\");\n+        if (scanningJob == null || scanningJob.isCancelled()) {\n+            logger.debug(\"Starting background scanning job\");\n+            if (scanningRunnable != null) {\n+                this.scanningJob = scheduler.scheduleWithFixedDelay(this.scanningRunnable, INITIAL_DELAY, SCAN_INTERVAL,", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1OTc5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444459794", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T19:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NTkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzQ1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434887453", "bodyText": "Since this is a DTO class, you don't need null annotations at all. See https://www.openhab.org/docs/developer/guidelines.html#null-annotations", "author": "fwolter", "createdAt": "2020-06-03T22:14:25Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/dto/SmartthingsDeviceData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.dto;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Mapping object for data returned from smartthings hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsDeviceData {\n+    @Nullable\n+    public String capability;\n+    @Nullable\n+    public String attribute;\n+    @Nullable\n+    public String name;\n+    @Nullable\n+    public String id;\n+\n+    // This is a hack that seems to make the null checking work\n+    public String getNonNullId() {\n+        if (id == null) {\n+            return \"\";\n+        } else {\n+            /* Note for code reviewer about the following retun statement:\n+                Code analysis says There is no need for a @NonNull annotation because it is set as default. Only @Nullable should be used\n+                But without it I get: Null type mismatch (type annotations): required '@NonNull String' but this expression has type '@Nullable String'\n+                Better suggestions?\n+            */", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MTkzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444481934", "bodyText": "Done.", "author": "BobRak", "createdAt": "2020-06-23T20:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzkwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434887909", "bodyText": "Can you remove the commented out code?", "author": "fwolter", "createdAt": "2020-06-03T22:15:33Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/dto/SmartthingsDiscoveryData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.dto;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Mapping object for data returned from smartthings hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsDiscoveryData {\n+    // private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryData.class);\n+    public long openHabStartTime;\n+    public long hubTime;\n+    // @Nullable\n+    // public String @Nullable [] data;", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MjI0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444482243", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T20:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4ODIyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434888221", "bodyText": "Can you remove this?", "author": "fwolter", "createdAt": "2020-06-03T22:16:17Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.osgi.framework.BundleContext;\n+//import org.eclipse.equinox.event.", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MjU4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444482586", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T20:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4ODIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0ODQ4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435448481", "bodyText": "Can you remove this?", "author": "fwolter", "createdAt": "2020-06-04T18:04:32Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.osgi.framework.BundleContext;\n+//import org.eclipse.equinox.event.\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SmartthingsBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsBridgeHandler extends ConfigStatusBridgeHandler {\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsBridgeHandler.class);\n+\n+    private SmartthingsBridgeConfig config;\n+\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private BundleContext bundleContext;\n+    // private SmartthingsDiscoveryService smartthingsDiscoveryService;", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mjg5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444482895", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T20:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0ODQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NTE5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435455196", "bodyText": "What happens with bridgeHandler if the user configures more than one Bridge?", "author": "fwolter", "createdAt": "2020-06-04T18:16:38Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MTM3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r442361371", "bodyText": "I have added code to only allow one bridge to be configured. And, I have added a statement in the README.md file stating only one bridge is allowed. The Smartthings hub has to be connected to a Location in a Samsung account. Only one hub is allowed per location.", "author": "BobRak", "createdAt": "2020-06-18T16:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2MTIyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435461227", "bodyText": "Do you log the stack trace by intention (last parameter) or would logging the exception's message be sufficient? If this is a serious error, you should log to warn.", "author": "fwolter", "createdAt": "2020-06-04T18:24:52Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NDE3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444484175", "bodyText": "Changed to warn and just log message", "author": "BobRak", "createdAt": "2020-06-23T20:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2MTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2OTY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435469691", "bodyText": "Is this useful for any user? Can it be removed?", "author": "fwolter", "createdAt": "2020-06-04T18:36:41Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MDI4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435470283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (converterName == null || converterName.length() == 0) {\n          \n          \n            \n                        if (converterName == null || converterName.isEmpty()) {", "author": "fwolter", "createdAt": "2020-06-04T18:37:27Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDE3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444490174", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T20:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MDI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Mjg3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435472877", "bodyText": "getConverter() returns Nullable, so this could be removed.", "author": "fwolter", "createdAt": "2020-06-04T18:40:59Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDc4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444490783", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T20:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Mjg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NDY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435474672", "bodyText": "You might want to make the string a constant. This is less error-prone when it comes to refactoring.", "author": "fwolter", "createdAt": "2020-06-04T18:43:04Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzgwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435477807", "bodyText": "When exceptions like these are raised, it would point to a bug in your code, right? Better log to warn, then.", "author": "fwolter", "createdAt": "2020-06-04T18:47:37Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable\n+            SmartthingsConverter cvtr = getConverter(converterName);\n+            if (cvtr == null) {\n+                // If there is no channel specific converter the get the \"default\" converter\n+                cvtr = getConverter(\"default\");\n+            }\n+\n+            if (cvtr != null) {\n+                // cvtr should never be null because there should always be a \"default\" converter\n+                converters.put(ch.getUID(), cvtr);\n+            }\n+\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    private @Nullable SmartthingsConverter getConverter(String converterName) {\n+        // Converter name will be a name such as \"switch\" which has to be converted into the full class name such as\n+        // org.openhab.binding.smartthings.internal.converter.SmartthingsSwitchConveter\n+        StringBuffer converterClassName = new StringBuffer(\n+                \"org.openhab.binding.smartthings.internal.converter.Smartthings\");\n+        converterClassName.append(Character.toUpperCase(converterName.charAt(0)));\n+        converterClassName.append(converterName.substring(1));\n+        converterClassName.append(\"Converter\");\n+        try {\n+            Constructor<?> constr = Class.forName(converterClassName.toString()).getDeclaredConstructor(Thing.class);\n+            constr.setAccessible(true);\n+            SmartthingsConverter cvtr = (SmartthingsConverter) constr.newInstance(thing);\n+            logger.debug(\"Using converter {}\", converterName);\n+            return cvtr;\n+        } catch (ClassNotFoundException e) {\n+            // Most of the time there is no channel specific converter, the default converter is all that is needed.\n+            logger.trace(\"No Custom converter exists for {} ({})\", converterName, converterClassName);\n+        } catch (NoSuchMethodException e) {\n+            logger.info(\"NoSuchMethodException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            logger.info(\"InvocationTargetException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            logger.info(\"IllegalAccessException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InstantiationException e) {\n+            logger.info(\"InstantiationException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        }", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MjEyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r444492124", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-06-23T20:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTI5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435479299", "bodyText": "Should these be warn?", "author": "fwolter", "createdAt": "2020-06-04T18:50:23Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable\n+            SmartthingsConverter cvtr = getConverter(converterName);\n+            if (cvtr == null) {\n+                // If there is no channel specific converter the get the \"default\" converter\n+                cvtr = getConverter(\"default\");\n+            }\n+\n+            if (cvtr != null) {\n+                // cvtr should never be null because there should always be a \"default\" converter\n+                converters.put(ch.getUID(), cvtr);\n+            }\n+\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    private @Nullable SmartthingsConverter getConverter(String converterName) {\n+        // Converter name will be a name such as \"switch\" which has to be converted into the full class name such as\n+        // org.openhab.binding.smartthings.internal.converter.SmartthingsSwitchConveter\n+        StringBuffer converterClassName = new StringBuffer(\n+                \"org.openhab.binding.smartthings.internal.converter.Smartthings\");\n+        converterClassName.append(Character.toUpperCase(converterName.charAt(0)));\n+        converterClassName.append(converterName.substring(1));\n+        converterClassName.append(\"Converter\");\n+        try {\n+            Constructor<?> constr = Class.forName(converterClassName.toString()).getDeclaredConstructor(Thing.class);\n+            constr.setAccessible(true);\n+            SmartthingsConverter cvtr = (SmartthingsConverter) constr.newInstance(thing);\n+            logger.debug(\"Using converter {}\", converterName);\n+            return cvtr;\n+        } catch (ClassNotFoundException e) {\n+            // Most of the time there is no channel specific converter, the default converter is all that is needed.\n+            logger.trace(\"No Custom converter exists for {} ({})\", converterName, converterClassName);\n+        } catch (NoSuchMethodException e) {\n+            logger.info(\"NoSuchMethodException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            logger.info(\"InvocationTargetException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            logger.info(\"IllegalAccessException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InstantiationException e) {\n+            logger.info(\"InstantiationException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Handle an update to the configuration\n+     */\n+    @Override\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\n+        logger.debug(\"Received configuration update for thing: {}\", thing.getUID().getAsString());\n+\n+        boolean configChanged = false;\n+\n+        Configuration configuration = editConfiguration();\n+        // Examine each new config parameter and if it is different than the existing then update it\n+        for (Entry<String, Object> configurationParameter : configurationParameters.entrySet()) {\n+            String paramName = configurationParameter.getKey();\n+            Object valueObject = configurationParameter.getValue();\n+            Object existingValue = configuration.get(paramName);\n+\n+            // Only 2 parameters to check and verify: smartthingsName and smartthingsLocation which is optional\n+            if (paramName.equals(\"smartthingsName\")) {\n+                if (!(valueObject instanceof String)) {\n+                    logger.info(", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNDM1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435504356", "bodyText": "The handler object can be re-used after configuration updates. So, to have the most recent configuration stored in config, it should be retrieved in initialize(), which is invoked on every config update.", "author": "fwolter", "createdAt": "2020-06-04T19:38:44Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjc0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r436306746", "bodyText": "configuration moved", "author": "BobRak", "createdAt": "2020-06-06T22:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNDM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mzc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485243762", "bodyText": "I think you forgot to remove this.\nFrom BobRak: What is it that you think should be removed? Line 63, 64 or both. Without those lines it won't compile because both smartthingsName and config are NonNull and it won't compile. Is there a better solution?\nFrom cpmeister: I suggested a solution in my next review.", "author": "cpmeister", "createdAt": "2020-09-08T23:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwODM5NA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435508394", "bodyText": "If I see correctly, in this method, the configuration is validated. This is already done in initialize(). Does this method has any other purpose?", "author": "fwolter", "createdAt": "2020-06-04T19:46:22Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable\n+            SmartthingsConverter cvtr = getConverter(converterName);\n+            if (cvtr == null) {\n+                // If there is no channel specific converter the get the \"default\" converter\n+                cvtr = getConverter(\"default\");\n+            }\n+\n+            if (cvtr != null) {\n+                // cvtr should never be null because there should always be a \"default\" converter\n+                converters.put(ch.getUID(), cvtr);\n+            }\n+\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    private @Nullable SmartthingsConverter getConverter(String converterName) {\n+        // Converter name will be a name such as \"switch\" which has to be converted into the full class name such as\n+        // org.openhab.binding.smartthings.internal.converter.SmartthingsSwitchConveter\n+        StringBuffer converterClassName = new StringBuffer(\n+                \"org.openhab.binding.smartthings.internal.converter.Smartthings\");\n+        converterClassName.append(Character.toUpperCase(converterName.charAt(0)));\n+        converterClassName.append(converterName.substring(1));\n+        converterClassName.append(\"Converter\");\n+        try {\n+            Constructor<?> constr = Class.forName(converterClassName.toString()).getDeclaredConstructor(Thing.class);\n+            constr.setAccessible(true);\n+            SmartthingsConverter cvtr = (SmartthingsConverter) constr.newInstance(thing);\n+            logger.debug(\"Using converter {}\", converterName);\n+            return cvtr;\n+        } catch (ClassNotFoundException e) {\n+            // Most of the time there is no channel specific converter, the default converter is all that is needed.\n+            logger.trace(\"No Custom converter exists for {} ({})\", converterName, converterClassName);\n+        } catch (NoSuchMethodException e) {\n+            logger.info(\"NoSuchMethodException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            logger.info(\"InvocationTargetException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            logger.info(\"IllegalAccessException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InstantiationException e) {\n+            logger.info(\"InstantiationException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Handle an update to the configuration\n+     */\n+    @Override\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {", "originalCommit": "09540b50b6b7c7130cfcb60b60d8c006569abd38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzI4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r436307289", "bodyText": "I removed it", "author": "BobRak", "createdAt": "2020-06-06T23:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwODM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzMzE0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449533140", "bodyText": "Loggers should be final. Please check the other occurrences, too.", "author": "fwolter", "createdAt": "2020-07-03T11:25:50Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMDIwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449810200", "bodyText": "Done in all classes", "author": "BobRak", "createdAt": "2020-07-04T22:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzMzE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzODE1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449538152", "bodyText": "Is there a reason why you disabled the null annotations? Can these be Nullable?", "author": "fwolter", "createdAt": "2020-07-03T11:38:59Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMDYwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449810609", "bodyText": "Changed to Nullable", "author": "BobRak", "createdAt": "2020-07-04T22:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzODE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MTAyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449541022", "bodyText": "createHandler() and handleEvent() can be invoked concurrently, so this List should be thread-safe.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n          \n          \n            \n                private List<SmartthingsThingHandler> thingHandlers = Collections.synchronizedList(new ArrayList<>());", "author": "fwolter", "createdAt": "2020-07-03T11:46:12Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMDc0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449810748", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-07-04T22:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MTQxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449541416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (SmartthingsThingHandler handler : thingHandlers) {\n          \n          \n            \n                    synchronized (thingHandlers) {\n          \n          \n            \n                    for (SmartthingsThingHandler handler : thingHandlers) {", "author": "fwolter", "createdAt": "2020-07-03T11:47:17Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            // This binding only supports one bridge. If the user tries to add a second bridge register and error and\n+            // ignore\n+            if (bridgeHandler != null) {\n+                logger.warn(\n+                        \"The Smartthings binding only supports one bridge. Please change your configuration to only use one Bridge. This bridge {} will be ignored.\",\n+                        thing.getUID().getAsString());\n+                return null;\n+            }\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            bridgeUID = thing.getUID();\n+            logger.debug(\"SmartthingsHandlerFactory created BridgeHandler for {}\", thingTypeUID.getAsString());\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            // Make sure this thing belongs to the registered Bridge\n+            if (bridgeUID != null && !bridgeUID.equals(thing.getBridgeUID())) {\n+                logger.warn(\"Thing: {} is being ignored because it does not belong to the registered bridge.\",\n+                        thing.getLabel());\n+                return null;\n+            }\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            logger.debug(\"SmartthingsHandlerFactory created ThingHandler for {}, {}\",\n+                    thing.getConfiguration().get(\"smartthingsName\"), thing.getUID().getAsString());\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public void sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        int status = response.getStatus();\n+        if (status == 202) {\n+            logger.debug(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.warn(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public synchronized void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String data = (String) event.getProperty(\"data\");\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0Mjg0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449542840", "bodyText": "I don't see any reason why this could be null. Are you sure this happens with the current implementation?", "author": "fwolter", "createdAt": "2020-07-03T11:50:51Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            // This binding only supports one bridge. If the user tries to add a second bridge register and error and\n+            // ignore\n+            if (bridgeHandler != null) {\n+                logger.warn(\n+                        \"The Smartthings binding only supports one bridge. Please change your configuration to only use one Bridge. This bridge {} will be ignored.\",\n+                        thing.getUID().getAsString());\n+                return null;\n+            }\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            bridgeUID = thing.getUID();\n+            logger.debug(\"SmartthingsHandlerFactory created BridgeHandler for {}\", thingTypeUID.getAsString());\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            // Make sure this thing belongs to the registered Bridge\n+            if (bridgeUID != null && !bridgeUID.equals(thing.getBridgeUID())) {\n+                logger.warn(\"Thing: {} is being ignored because it does not belong to the registered bridge.\",\n+                        thing.getLabel());\n+                return null;\n+            }\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            logger.debug(\"SmartthingsHandlerFactory created ThingHandler for {}, {}\",\n+                    thing.getConfiguration().get(\"smartthingsName\"), thing.getUID().getAsString());\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public void sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        int status = response.getStatus();\n+        if (status == 202) {\n+            logger.debug(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.warn(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public synchronized void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String data = (String) event.getProperty(\"data\");\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {\n+            // There have been some reports of handler.getSmartthingsName() returning a null.\n+            // Need to find out where null is coming from\n+            if (handler.getSmartthingsName() != null) {", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTA3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811075", "bodyText": "No I have not seen this exception in a very long time. I removed the null check. Certainly makes the code cleaner.", "author": "BobRak", "createdAt": "2020-07-04T22:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0Mjg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzczNg==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449543736", "bodyText": "Logging to info should be used rarely. This could be debug. Can you check the other occurrences, too?", "author": "fwolter", "createdAt": "2020-07-03T11:53:11Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @NonNullByDefault({}) HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private Gson gson = new Gson();\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        if (httpService == null) {\n+            logger.info(\"SmartthingsServlet.activate: httpService is unexpectedly null\");\n+            return;\n+        }\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTM3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811379", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-07-04T22:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzgyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449543825", "bodyText": "This could be warn.", "author": "fwolter", "createdAt": "2020-07-03T11:53:24Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @NonNullByDefault({}) HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private Gson gson = new Gson();\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        if (httpService == null) {\n+            logger.info(\"SmartthingsServlet.activate: httpService is unexpectedly null\");", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTQzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811430", "bodyText": "done", "author": "BobRak", "createdAt": "2020-07-04T22:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1OTM5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449559393", "bodyText": "This doesn't need to be logged, since this is the normal case if other bindings beside yours are installed.", "author": "fwolter", "createdAt": "2020-07-03T12:32:42Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, DISCOVERY_TIMEOUT_SEC);\n+        gson = new Gson();\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        if (handlerFactory instanceof SmartthingsHandlerFactory) {\n+            smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+        } else {\n+            logger.debug(\"Ignoring setThingHandlerFactory for {}\", handlerFactory.getClass().getName());", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTQ2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811460", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-07-04T22:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1OTM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2MzkyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449563927", "bodyText": "The representation property is the name of the property.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(new ThingUID(uidStr)).withProperties(properties)\n          \n          \n            \n                            .withRepresentationProperty(deviceData.id).withBridge(bridgeUid).withLabel(name).build();\n          \n          \n            \n                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(new ThingUID(uidStr)).withProperties(properties)\n          \n          \n            \n                            .withRepresentationProperty(\"deviceId\").withBridge(bridgeUid).withLabel(name).build();", "author": "fwolter", "createdAt": "2020-07-03T12:43:01Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, DISCOVERY_TIMEOUT_SEC);\n+        gson = new Gson();\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        if (handlerFactory instanceof SmartthingsHandlerFactory) {\n+            smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+        } else {\n+            logger.debug(\"Ignoring setThingHandlerFactory for {}\", handlerFactory.getClass().getName());\n+        }\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        // Make sure it is this handleFactory that should be unset\n+        if (handlerFactory == smartthingsHandlerFactory) {\n+            this.smartthingsHandlerFactory = null;\n+        }\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        if (scanningJob == null) {\n+            this.scanningJob = scheduler.scheduleWithFixedDelay(this::sendSmartthingsDiscoveryRequest,\n+                    INITIAL_DELAY_SEC, SCAN_INTERVAL_SEC, TimeUnit.SECONDS);\n+            logger.debug(\"Discovery background scanning job started\");\n+        }\n+    }\n+\n+    /**\n+     * Stops background scanning for attached devices.\n+     */\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        final ScheduledFuture<?> currentScanningJob = scanningJob;\n+        if (currentScanningJob != null) {\n+            currentScanningJob.cancel(false);\n+            scanningJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Start the discovery process by sending a discovery request to the Smartthings Hub\n+     */\n+    private void sendSmartthingsDiscoveryRequest() {\n+        final SmartthingsHandlerFactory currentSmartthingsHandlerFactory = smartthingsHandlerFactory;\n+        if (currentSmartthingsHandlerFactory != null) {\n+            try {\n+                String discoveryMsg = String.format(\"{\\\"discovery\\\": \\\"yes\\\", \\\"openHabStartTime\\\": %d}\",\n+                        System.currentTimeMillis());\n+                currentSmartthingsHandlerFactory.sendDeviceCommand(\"/discovery\", discoveryMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"Attempt to send command to the Smartthings hub failed with: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handle discovery data returned from the Smartthings hub.\n+     * The data is delivered into the SmartthingServlet. From there it is sent here via the Event service\n+     */\n+    @Override\n+    public void handleEvent(@Nullable Event event) {\n+        if (event == null) {\n+            logger.info(\"SmartthingsDiscoveryService.handleEvent: event is uexpectedly null\");\n+            return;\n+        }\n+        String topic = event.getTopic();\n+        String data = (String) event.getProperty(\"data\");\n+        if (data == null) {\n+            logger.debug(\"Event received on topic: {} but the data field is null\", topic);\n+            return;\n+        } else {\n+            logger.debug(\"Event received on topic: {}\", topic);\n+        }\n+\n+        // Two classes are required.\n+        // 1. SmarthingsDiscoveryData contains timing info and the discovery data which is sent as an array of Strings\n+        // 2. SmartthingDeviceData contains the device data for one device.\n+        // First the SmarthingsDiscoveryData is converted from json to java. Then each data string is converted into\n+        // device data\n+        SmartthingsDiscoveryData discoveryData = gson.fromJson(data, SmartthingsDiscoveryData.class);\n+\n+        if (discoveryData.data != null) {\n+            for (String deviceStr : discoveryData.data) {\n+                SmartthingsDeviceData deviceData = gson.fromJson(deviceStr, SmartthingsDeviceData.class);\n+                createDevice(deviceData);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Create a device with the data from the Smartthings hub\n+     *\n+     * @param deviceData Device data from the hub\n+     */\n+    private void createDevice(SmartthingsDeviceData deviceData) {\n+        logger.trace(\"Discovery: Creating device: ThingType {} with name {}\", deviceData.capability, deviceData.name);\n+\n+        // Build the UID as a string smartthings:{ThingType}:{BridgeName}:{DeviceName}\n+        String name = deviceData.name; // Note: this is necessary for null analysis to work\n+        if (name == null) {\n+            logger.info(\n+                    \"Unexpectedly received data for a device with no name. Check the Smartthings hub devices and make sure every device has a name\");\n+            return;\n+        }\n+        String deviceNameNoSpaces = name.replaceAll(\"\\\\s\", \"_\");\n+        String smartthingsDeviceName = findIllegalChars.matcher(deviceNameNoSpaces).replaceAll(\"\");\n+        final SmartthingsHandlerFactory currentSmartthingsHandlerFactory = smartthingsHandlerFactory;\n+        if (currentSmartthingsHandlerFactory == null) {\n+            logger.info(\n+                    \"SmartthingsDiscoveryService: smartthingshandlerfactory is unexpectedly null, could not create device {}\",\n+                    deviceData);\n+            return;\n+        }\n+        ThingUID bridgeUid = currentSmartthingsHandlerFactory.getBridgeHandler().getThing().getUID();\n+        String bridgeId = bridgeUid.getId();\n+        String uidStr = String.format(\"smartthings:%s:%s:%s\", deviceData.capability, bridgeId, smartthingsDeviceName);\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"smartthingsName\", name);\n+        properties.put(\"deviceId\", deviceData.id);\n+\n+        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(new ThingUID(uidStr)).withProperties(properties)\n+                .withRepresentationProperty(deviceData.id).withBridge(bridgeUid).withLabel(name).build();", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTUxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811510", "bodyText": "Changed", "author": "BobRak", "createdAt": "2020-07-04T22:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2MzkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2NTExMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449565110", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nThen, the whole method could be removed.", "author": "fwolter", "createdAt": "2020-07-03T12:45:40Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.osgi.framework.BundleContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SmartthingsBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsBridgeHandler extends ConfigStatusBridgeHandler {\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsBridgeHandler.class);\n+\n+    private SmartthingsBridgeConfig config;\n+\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private BundleContext bundleContext;\n+\n+    public SmartthingsBridgeHandler(Bridge bridge, SmartthingsHandlerFactory smartthingsHandlerFactory,\n+            BundleContext bundleContext) {\n+        super(bridge);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        this.bundleContext = bundleContext;\n+        config = getThing().getConfiguration().as(SmartthingsBridgeConfig.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // Commands are handled by the \"Things\"\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Validate the config\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"Smartthings Handler disposed.\");", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTU4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811589", "bodyText": "Removed", "author": "BobRak", "createdAt": "2020-07-04T22:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2NTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2ODMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449568319", "bodyText": "If you write the comment in a separate line, it won't be garbled by the auto formatter.", "author": "fwolter", "createdAt": "2020-07-03T12:53:07Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    private final String smartthingsConverterName = \"smartthings-converter\";\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"Attempt to send command to the Smartthings hub failed with exception: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.trace(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+        if (!validateConfig(config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(smartthingsConverterName); // Will be null if no\n+                                                                                     // explicit\n+            // converter was specified", "originalCommit": "c4358054660ea626c7f635598e720fd26011c9dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxMTY4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449811685", "bodyText": "Changed", "author": "BobRak", "createdAt": "2020-07-04T22:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2ODMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MTM3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485241377", "bodyText": "I think that just checking for Number instances would be a safer catchall\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (deviceValue instanceof Double) {\n          \n          \n            \n                            double d = ((Double) deviceValue).doubleValue();\n          \n          \n            \n                            d *= 3.6;\n          \n          \n            \n                            return new DecimalType(d);\n          \n          \n            \n                        } else if (deviceValue instanceof Long) {\n          \n          \n            \n                            double d = ((Long) deviceValue).longValue();\n          \n          \n            \n                            d *= 3.6;\n          \n          \n            \n                            return new DecimalType(d);\n          \n          \n            \n                        } else if (deviceValue instanceof Number) {\n          \n          \n            \n                            double d = ((Number) deviceValue).doubleValue();\n          \n          \n            \n                            d *= 3.6;\n          \n          \n            \n                            return new DecimalType(d);\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nYou should also make a similar change in the SmartthingsConverter class.", "author": "cpmeister", "createdAt": "2020-09-08T23:01:15Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsHue100Converter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Smartthings capability \"Color Control\".\n+ * The Smartthings \"Color Control\" capability represents the hue values in the 0-100% range. OH2 uses 0-360 degrees\n+ * For this converter only the hue is coming into openHAB and it is a number\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsHue100Converter extends SmartthingsConverter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsHue100Converter.class);\n+\n+    public SmartthingsHue100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = hsb.getHue().doubleValue() / 3.60;\n+            String value = String.format(\"[%.0f, %d, %d ]\", hue, hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+            jsonMsg = String.format(\n+                    \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"value\\\": %s}\",\n+                    thingTypeId, smartthingsName, channelUid.getId(), value);\n+        } else {\n+            jsonMsg = defaultConvertToSmartthings(channelUid, command);\n+        }\n+\n+        return jsonMsg;\n+    }\n+\n+    @Override\n+    public State convertToOpenHab(@Nullable String acceptedChannelType, SmartthingsStateData dataFromSmartthings) {\n+        // Here we have to multiply the value from Smartthings by 3.6 to convert from 0-100 to 0-360\n+        String deviceType = dataFromSmartthings.capabilityAttribute;\n+        Object deviceValue = dataFromSmartthings.value;\n+\n+        if (deviceValue == null) {\n+            logger.warn(\"Failed to convert Number {} because Smartthings returned a null value.\", deviceType);\n+            return UnDefType.UNDEF;\n+        }\n+\n+        if (\"Number\".contentEquals(acceptedChannelType)) {\n+            if (deviceValue instanceof String) {\n+                double d = Double.parseDouble((String) deviceValue);\n+                d *= 3.6;\n+                return new DecimalType(d);\n+            } else if (deviceValue instanceof Double) {\n+                double d = ((Double) deviceValue).doubleValue();\n+                d *= 3.6;\n+                return new DecimalType(d);\n+            } else if (deviceValue instanceof Long) {\n+                double d = ((Long) deviceValue).longValue();\n+                d *= 3.6;\n+                return new DecimalType(d);", "originalCommit": "7cbd5280440b712f1c13d1c2df22032ad9adab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5Mjc2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r488192765", "bodyText": "OK to the change to SmartthingsHue100Converter\nIn SmartthingsConverter are you recommending changing:\n            case \"Number\":\n                if (deviceValue instanceof String) {\n                    return new DecimalType(Double.parseDouble((String) deviceValue));\n                } else if (deviceValue instanceof Double) {\n                    return new DecimalType((Double) deviceValue);\n                } else if (deviceValue instanceof Long) {\n                    return new DecimalType((Long) deviceValue);\n                } else {\n                    logger.warn(\"Failed to convert Number {} with a value of {} from class {} to an appropriate type.\",\n                            deviceType, deviceValue, deviceValue.getClass().getName());\n                    return UnDefType.UNDEF;\n                }\n\n\nTo:\n            case \"Number\":\n                if (deviceValue instanceof String) {\n                    return new DecimalType(Double.parseDouble((String) deviceValue));\n                } else if (deviceValue instanceof Number) {\n                    return new DecimalType((Number) deviceValue);\n                } else if (deviceValue instanceof Long) {\n                    return new DecimalType((Long) deviceValue);\n                } else {\n                    logger.warn(\"Failed to convert Number {} with a value of {} from class {} to an appropriate type.\",\n                            deviceType, deviceValue, deviceValue.getClass().getName());\n                    return UnDefType.UNDEF;\n                }\n\n\nThis doesn't compile because there is no constructor for Number. Or am I missing something?", "author": "BobRak", "createdAt": "2020-09-14T20:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MTM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MzU5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r488853593", "bodyText": "Since DecimalType doesn't have a Number constructor you would need to use one of the other ones.\n            case \"Number\":\n                if (deviceValue instanceof String) {\n                    return new DecimalType(Double.parseDouble((String) deviceValue));\n                } else if (deviceValue instanceof Long) {//we catch Long separately to maintain precision if necessary\n                    return new DecimalType((Long) deviceValue);\n                } else if (deviceValue instanceof Number) {\n                    return new DecimalType(((Number) deviceValue).doubleValue());\n                } else {\n                    logger.warn(\"Failed to convert Number {} with a value of {} from class {} to an appropriate type.\",\n                            deviceType, deviceValue, deviceValue.getClass().getName());\n                    return UnDefType.UNDEF;\n                }\n\nIf you find it necessary, then you might want add another catch between the Long and Number catches for handling BigDecimal instances.", "author": "cpmeister", "createdAt": "2020-09-15T17:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MTM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NTEzMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r491095130", "bodyText": "Sorry, I a little lost was tro what you want. I have changed the code to be:\n        if (\"Number\".contentEquals(acceptedChannelType)) {\n            if (deviceValue instanceof String) {\n                double d = Double.parseDouble((String) deviceValue);\n                d *= 3.6;\n                return new DecimalType(d);\n            } else if (deviceValue instanceof Long) {\n                double d = ((Long) deviceValue).longValue();\n                d *= 3.6;\n                return new DecimalType(d);\n            } else if (deviceValue instanceof BigDecimal) {\n                double d = ((BigDecimal) deviceValue).doubleValue();\n                d *= 3.6;\n                return new DecimalType(d);\n            } else if (deviceValue instanceof Number) {\n                double d = ((Number) deviceValue).doubleValue();\n                d *= 3.6;\n                return new DecimalType(d);\n            } else {\n                logger.warn(\"Failed to convert Number {} with a value of {} from class {} to an appropriate type.\",\n                        deviceType, deviceValue, deviceValue.getClass().getName());\n                return UnDefType.UNDEF;\n            }\n        } else {\n\n\nIf this isn't right please let me know and I'll change it again.", "author": "BobRak", "createdAt": "2020-09-18T17:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MTM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjA2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242065", "bodyText": "if surroundWithQuotes was protected instead of private then you could reuse it here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    smartthingsValue = (new StringBuilder()).append('\"').append(smartthingsValue).append('\"').toString();\n          \n          \n            \n                    smartthingsValue = surroundWithQuotes(smartthingsValue);", "author": "cpmeister", "createdAt": "2020-09-08T23:03:30Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsOpenCloseControlConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+\n+/**\n+ * Converter class for Door Control.\n+ * This can't use the default because when closing the door the command that comes in as \"closed\" but \"close\" needs to\n+ * be\n+ * sent to Smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsOpenCloseControlConverter extends SmartthingsConverter {\n+\n+    public SmartthingsOpenCloseControlConverter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String smartthingsValue = (command.toString().toLowerCase().equals(\"open\")) ? \"open\" : \"close\";\n+        smartthingsValue = (new StringBuilder()).append('\"').append(smartthingsValue).append('\"').toString();", "originalCommit": "7cbd5280440b712f1c13d1c2df22032ad9adab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5NDQxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r488194419", "bodyText": "Good idea. Done", "author": "BobRak", "createdAt": "2020-09-14T20:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjcwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private SmartthingsHandlerFactory smartthingsHandlerFactory;\n          \n          \n            \n                private @Nullable SmartthingsHandlerFactory smartthingsHandlerFactory;", "author": "cpmeister", "createdAt": "2020-09-08T23:05:26Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;", "originalCommit": "7cbd5280440b712f1c13d1c2df22032ad9adab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4MTgyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r491081824", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-09-18T17:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mjc0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242749", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> scanningJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> scanningJob;", "author": "cpmeister", "createdAt": "2020-09-08T23:05:36Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;", "originalCommit": "7cbd5280440b712f1c13d1c2df22032ad9adab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4MTk1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r491081954", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-09-18T17:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mjc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mjg4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242883", "bodyText": "Can you make this private and final?", "author": "cpmeister", "createdAt": "2020-09-08T23:06:05Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;", "originalCommit": "7cbd5280440b712f1c13d1c2df22032ad9adab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5NTc0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r488195743", "bodyText": "OK, done", "author": "BobRak", "createdAt": "2020-09-14T20:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mjg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjEwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485246109", "bodyText": "Does gson allow you to convert json into a Map<String, Object>? How would that even work, what class is it using for the Object values?", "author": "cpmeister", "createdAt": "2020-09-08T23:16:23Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @NonNullByDefault({}) HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private Gson gson = new Gson();\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        if (httpService == null) {\n+            logger.warn(\"SmartthingsServlet.activate: httpService is unexpectedly null\");\n+            return;\n+        }\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+        } catch (ServletException | NamespaceException e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        if (httpService != null) {\n+            try {\n+                httpService.unregister(PATH);\n+            } catch (IllegalArgumentException ignored) {\n+            }\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.debug(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet received a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        BufferedReader rdr = new BufferedReader(req.getReader());\n+        String s = rdr.lines().collect(Collectors.joining());\n+        switch (pathParts[0]) {\n+            case \"state\":\n+                // This is device state info returned from Smartthings\n+                logger.debug(\"Smartthing servlet processing \\\"state\\\" request. data: {}\", s);\n+                publishEvent(STATE_EVENT_TOPIC, \"data\", s);\n+                break;\n+            case \"discovery\":\n+                // This is discovery data returned from Smartthings\n+                logger.trace(\"Smartthing servlet processing \\\"discovery\\\" request. data: {}\", s);\n+                publishEvent(DISCOVERY_EVENT_TOPIC, \"data\", s);\n+                break;\n+            case \"error\":\n+                // This is an error message from smartthings\n+                Map<String, Object> map = new HashMap<String, Object>();\n+                map = gson.fromJson(s, map.getClass());", "originalCommit": "7cbd5280440b712f1c13d1c2df22032ad9adab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0NDkxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r491044914", "bodyText": "Yes this did work. The value (Object type) is a String. But, I changed it to <String, String>", "author": "BobRak", "createdAt": "2020-09-18T15:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NjQxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r489796410", "bodyText": "The configuration might not be valid at construction, so instead use a default config instance to make the nonnull annotation happy.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n          \n          \n            \n                    config = new SmartthingsThingConfig();", "author": "cpmeister", "createdAt": "2020-09-16T22:50:23Z", "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    private final String smartthingsConverterName = \"smartthings-converter\";\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);", "originalCommit": "3c1ccff8e948ded227e39048c1ffd79e624a9db4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NTI3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r491075273", "bodyText": "Done", "author": "BobRak", "createdAt": "2020-09-18T16:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NjQxMA=="}], "type": "inlineReview"}, {"oid": "b224141a7f6bbd95de3663bc45dfaf2ffb12c75f", "url": "https://github.com/openhab/openhab-addons/commit/b224141a7f6bbd95de3663bc45dfaf2ffb12c75f", "message": "Initial Smartthings commit\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:15Z", "type": "commit"}, {"oid": "fa7459a3df196d8a453f5ff208a6347de1b90122", "url": "https://github.com/openhab/openhab-addons/commit/fa7459a3df196d8a453f5ff208a6347de1b90122", "message": "Added support for washing machines\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:15Z", "type": "commit"}, {"oid": "7fefa15e8fde89edd14f9bce99c32115c9519b35", "url": "https://github.com/openhab/openhab-addons/commit/7fefa15e8fde89edd14f9bce99c32115c9519b35", "message": "Update bundles/org.openhab.binding.smartthings/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:15Z", "type": "commit"}, {"oid": "677e933d2d684531d6adfb046ccfafd0891e3354", "url": "https://github.com/openhab/openhab-addons/commit/677e933d2d684531d6adfb046ccfafd0891e3354", "message": "Commit changes requested by code review\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:16Z", "type": "commit"}, {"oid": "01353e89c75809b813c6d397656cbbfb8eb14edc", "url": "https://github.com/openhab/openhab-addons/commit/01353e89c75809b813c6d397656cbbfb8eb14edc", "message": "Updates to smartthings based on second code review\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:16Z", "type": "commit"}, {"oid": "1250ea5074e191a02eaa23db561f1d006f96a160", "url": "https://github.com/openhab/openhab-addons/commit/1250ea5074e191a02eaa23db561f1d006f96a160", "message": "Make bundles/pom.xml look like original\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:16Z", "type": "commit"}, {"oid": "97956a034454958a8edf593c99f8a5aed2ce64d9", "url": "https://github.com/openhab/openhab-addons/commit/97956a034454958a8edf593c99f8a5aed2ce64d9", "message": "Minor logging changes:\n1. Reduced discovery logging as it was the majority of what was logged.\n2. Changed log level from TRACE to DEBUG for \"state\" messages from Smartthings. These are useful to confirm Smartthings is sending data.\n\nUpdated the 2 Smartthings groovy files to remove timing data since it has been removed from the openHAB code\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:31:16Z", "type": "commit"}, {"oid": "ddde0393e8993f6053aa69d8bc15a5bf351378c4", "url": "https://github.com/openhab/openhab-addons/commit/ddde0393e8993f6053aa69d8bc15a5bf351378c4", "message": "Hopefully final code review changes and added the ability to update Thing network timeout\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>", "committedDate": "2020-09-18T19:32:32Z", "type": "commit"}]}