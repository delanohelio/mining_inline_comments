{"pr_number": 4199, "pr_title": "WFCORE-4967 fix: RequestController drops queued tasks randomly during server start.", "pr_createdAt": "2020-05-14T09:06:48Z", "pr_url": "https://github.com/wildfly/wildfly-core/pull/4199", "timeline": [{"oid": "c87ca81e921d8890eb41dd5d14c99143c83dce24", "url": "https://github.com/wildfly/wildfly-core/commit/c87ca81e921d8890eb41dd5d14c99143c83dce24", "message": "WFCORE-4967 multithreaded test of paused RequestController", "committedDate": "2020-05-14T08:35:00Z", "type": "commit"}, {"oid": "bb573cfc223eb9af9a253dc99933a4cef6ed8ca5", "url": "https://github.com/wildfly/wildfly-core/commit/bb573cfc223eb9af9a253dc99933a4cef6ed8ca5", "message": "WFCORE-4967 make findForcedTask method synchronised", "committedDate": "2020-05-14T08:39:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODIxOA==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r425518218", "bodyText": "So AIUI the basic problem is that one or more of the threads that called rc.requestComplete() when paused == true  is executing findForcedTask and has drained some tasks from taskQueue into the 'storage' list. And at the same time rc.resume is called and it therefore finds the queue empty and returns.  When the thread in findForcedTask puts its 'storage' tasks back in the queue there is nothing to execute them.\nIs that a correct summary?", "author": "bstansberry", "createdAt": "2020-05-15T01:34:39Z", "path": "request-controller/src/test/java/org/wildfly/extension/requestcontroller/WFCORE4967_TestCase.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.wildfly.extension.requestcontroller;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.concurrent.CountDownLatch;\r\n+import java.util.concurrent.atomic.AtomicInteger;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class WFCORE4967_TestCase {\r\n+    private static final int TASKS_QTY = 10;\r\n+    private static final int THREADS_QTY = 20;\r\n+\r\n+    @Test\r\n+    public void noQueuedTasksLossWhenRunningRequestCompleteOnSuspendedRC() throws InterruptedException {\r\n+        final AtomicInteger executedTaskCount = new AtomicInteger();\r\n+\r\n+        RequestController rc = suspendedRCWithQueuedTasks(TASKS_QTY, () -> {\r\n+            executedTaskCount.incrementAndGet();\r\n+        });\r\n+\r\n+        CountDownLatch latch = new CountDownLatch(THREADS_QTY);\r\n+        createSynchronisedThreads(latch, () -> {\r\n+            rc.requestComplete();\r\n+        }).forEach(Thread::start);\r\n+        latch.await();\r\n+\r\n+        rc.resume();\r", "originalCommit": "bb573cfc223eb9af9a253dc99933a4cef6ed8ca5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDE5Mg==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r425734192", "bodyText": "Correct but not full in-depth. This tmp 'storage' list is problematic in multithreading context.\nIt causes problems before rc.resume() is called as well.\nWe can get\njava.lang.NullPointerException\n\tat org.wildfly.extension.requestcontroller.RequestController$QueuedTask.access$1(RequestController.java:457)\n\tat org.wildfly.extension.requestcontroller.RequestController.findForcedTask(RequestController.java:404)\n\tat org.wildfly.extension.requestcontroller.RequestController.runQueuedTask(RequestController.java:386)\n\tat org.wildfly.extension.requestcontroller.RequestController.requestComplete(RequestController.java:238)\n\nas an example", "author": "khroolick", "createdAt": "2020-05-15T11:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgyNjI2MQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r425826261", "bodyText": "@khroolick.  Yes, I saw the NPE potential and was hoping preventing that would be sufficient to fix the bug without adding the synchronized.  But your test quickly demonstrated that wasn't the case.\nThe synchronized makes me nervous because of possible interaction between the current synchronization on the RequestController object, which involve the server management layer manipulating the RC, and this new one which involves users of the RC queuing or completing tasks. For example the 'suspended' method holds the lock while the 'requestCountListener.done()' callback does its thing, and meanwhile threads trying to queue/complete tasks are blocking.\nTBH that concern might be excessive.\nI thought about instead synchronizing on the taskQueue where necessary but I don't know if that is better. With that you've got two separate locks being taken in some cases, which can have its own problems.  I didn't think hard about it though. WDYT?", "author": "bstansberry", "createdAt": "2020-05-15T14:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDE5MQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r426410191", "bodyText": "I had similar thinking, but I was not afraid of these server management layer operations as in our case we do not use them often. I didn't think too hard as well and just went with \u201csimplest\u201d fix I could apply.\nIn fact, if there is a fear of unnecessary blocking, we can improve the implementation of the findForcedTask method and avoid synchronization. It looks good after static analysis.\n\nIf a thread has drained some tasks from taskQueue into the 'storage' list when resume() has been called, these tasks will return to taskQueue eventually and will run under requestComplete() invocations.\nThe only risk I see: Very unusual coincidence in which there will be too few calls to requestComplete() after server is resumed and timers schedule will be delayed until server will receive some traffic.\n\nThis is very very unlikely if not possible at all, as if we are already in this scenario of high concurrent access to taskQueue via findForcedTask.\nfixed code (NPE potential eliminated)\n    private QueuedTask findForcedTask() {\n        QueuedTask _ret = null;\n        QueuedTask task;\n        List<QueuedTask> storage = new ArrayList<>();\n        while ((task = taskQueue.poll()) != null) {\n            if(task.forceRun) {\n                _ret = task;\n            } else {\n                storage.add(task);\n            }\n        }\n        //this screws the order somewhat, but the container is suspending anyway, and the order\n        //was never guarenteed. if we push them back onto the front we will need to just go through them again\n        taskQueue.addAll(storage);\n        return _ret;\n    }\nI will give it a try", "author": "khroolick", "createdAt": "2020-05-18T07:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNjk2NA==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r426436964", "bodyText": "I've extended unit test to simulate some additional requests after rc.resume() is called.\nTested above change with both\no minimal example project\no our complex EAR application\n\nLGTM, please review this change again @bstansberry", "author": "khroolick", "createdAt": "2020-05-18T08:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNzk5NQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r431517995", "bodyText": "I'm unresolving this just so the discussion stays visible in the github ui as it may be useful in the future.", "author": "bstansberry", "createdAt": "2020-05-28T00:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODIxOA=="}], "type": "inlineReview"}, {"oid": "16d8e8861ed65ac574eb36dd9ccdff6f61e08e35", "url": "https://github.com/wildfly/wildfly-core/commit/16d8e8861ed65ac574eb36dd9ccdff6f61e08e35", "message": "WFCORE-4967 fix NPE potential in findForcedTask\n\nThat makes this method thread safe without locking on RequestController\ninstance but doesn't guarantee that all tasks will be run on resume()\nfrom `Controller Boot Thread`", "committedDate": "2020-05-18T07:52:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3MjYxMg==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r430372612", "bodyText": "I'll let @bstansberry review your changes as he already reviewed your PR\nHowever could you please rename this variable? WildFly code convention do not use _ to prefix variables? thanks", "author": "jmesnil", "createdAt": "2020-05-26T12:26:14Z", "path": "request-controller/src/main/java/org/wildfly/extension/requestcontroller/RequestController.java", "diffHunk": "@@ -397,20 +397,20 @@ private boolean runQueuedTask(boolean hasPermit) {\n     }\n \n     private QueuedTask findForcedTask() {\n-        QueuedTask task = null;\n+        QueuedTask _ret = null;", "originalCommit": "16d8e8861ed65ac574eb36dd9ccdff6f61e08e35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzUzMg==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r430393532", "bodyText": "done.\nOne additional thing I noticed when I saw this code once again after a while @bstansberry :\nThere is a potential problem but as I'm not sure what forced task really is I'm not sure is it intended or just another bug:\nThis code:\n        while ((task = taskQueue.poll()) != null) {\n            if (task.forceRun) {\n                forcedTask = task;\n            } else {\n                storage.add(task);\n            }\n        }\nwill go trough all tasks in taskQueue so there is potential problem of dropping forced tasks if there is more than one. Only last forced task will be returned to a caller, previous ones are not added to a storage collection so they are just lost.", "author": "khroolick", "createdAt": "2020-05-26T13:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3MjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNzgxNw==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r431517817", "bodyText": "Apologies @khroolick, I got distracted. This should fix that:\nwhile (forcedTask == null && (task = taskQueue.poll()) != null) {\nWith that the code looks much as it did before though, with different variable names, the NPE fixed and pretty redundant taskQueue.isEmpty() call removed. If that resolves the issue you were seeing though, it's fine with me.", "author": "bstansberry", "createdAt": "2020-05-28T00:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3MjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNzk3Nw==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r448517977", "bodyText": "Same on my side, it takes longer than it should :-)\nI fully agree with you @bstansberry, applied suggested change and I'm happy to merge it in the current shape.", "author": "khroolick", "createdAt": "2020-07-01T17:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM3MjYxMg=="}], "type": "inlineReview"}, {"oid": "21f7026a62ab6f0000b5da5ba856f6583e9d56ee", "url": "https://github.com/wildfly/wildfly-core/commit/21f7026a62ab6f0000b5da5ba856f6583e9d56ee", "message": "WFCORE-4967 fix problem of dropping forced tasks introduced in previous\ncommit", "committedDate": "2020-07-01T17:34:48Z", "type": "forcePushed"}, {"oid": "b7c3f834389f3947d8495e44c83744f11d9a8b1c", "url": "https://github.com/wildfly/wildfly-core/commit/b7c3f834389f3947d8495e44c83744f11d9a8b1c", "message": "WFCORE-4967 fix problem of dropping forced tasks introduced in previous\ncommit", "committedDate": "2020-07-01T17:40:11Z", "type": "commit"}, {"oid": "b7c3f834389f3947d8495e44c83744f11d9a8b1c", "url": "https://github.com/wildfly/wildfly-core/commit/b7c3f834389f3947d8495e44c83744f11d9a8b1c", "message": "WFCORE-4967 fix problem of dropping forced tasks introduced in previous\ncommit", "committedDate": "2020-07-01T17:40:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5NzM2MA==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r495797360", "bodyText": "could you please rename all _ret variables ? that's the only remaining request before I can merge this PR.\nthanks", "author": "jmesnil", "createdAt": "2020-09-28T09:13:05Z", "path": "request-controller/src/test/java/org/wildfly/extension/requestcontroller/WFCORE4967_TestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.wildfly.extension.requestcontroller;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.concurrent.CountDownLatch;\r\n+import java.util.concurrent.atomic.AtomicInteger;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class WFCORE4967_TestCase {\r\n+    private static final int TASKS_QTY = 10;\r\n+    private static final int THREADS_QTY = 20;\r\n+\r\n+    @Test\r\n+    public void noQueuedTasksLossWhenRunningRequestCompleteOnSuspendedRC() throws InterruptedException {\r\n+        final AtomicInteger executedTaskCount = new AtomicInteger();\r\n+\r\n+        RequestController rc = suspendedRCWithQueuedTasks(TASKS_QTY, () -> {\r\n+            executedTaskCount.incrementAndGet();\r\n+        });\r\n+\r\n+        CountDownLatch latch = new CountDownLatch(THREADS_QTY);\r\n+        List<Thread> threads = createSynchronisedThreads(latch, () -> {\r\n+            rc.requestComplete();\r\n+        });\r\n+        threads.forEach(Thread::start);\r\n+        // wait until all above threads ready to fire rc.requestComplete() together with bellow rc.resume()\r\n+        latch.await();\r\n+        rc.resume();\r\n+\r\n+        for (Thread t : threads) {\r\n+            t.join();\r\n+        }\r\n+\r\n+        // simulate just enough requests after server is resumed to drain potential outstanding tasks from taskQueue\r\n+        for (int requestNo = 0; requestNo < TASKS_QTY; requestNo++) {\r\n+            rc.requestComplete();\r\n+        }\r\n+\r\n+        assertEquals(TASKS_QTY, executedTaskCount.intValue());\r\n+    }\r\n+\r\n+    private RequestController suspendedRCWithQueuedTasks(int i, Runnable whenExecuted) {\r\n+        RequestController _ret = new RequestController(false);\r\n+        _ret.suspended(() -> {\r", "originalCommit": "b7c3f834389f3947d8495e44c83744f11d9a8b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAyNDM4OA==", "url": "https://github.com/wildfly/wildfly-core/pull/4199#discussion_r498024388", "bodyText": "Sure, done.", "author": "khroolick", "createdAt": "2020-10-01T07:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5NzM2MA=="}], "type": "inlineReview"}, {"oid": "48a1eb12cba448860e0d194a521bc2a14e3c4e4a", "url": "https://github.com/wildfly/wildfly-core/commit/48a1eb12cba448860e0d194a521bc2a14e3c4e4a", "message": "WFCORE4967 avoid _ret variable name (test code)", "committedDate": "2020-10-01T07:01:48Z", "type": "commit"}]}