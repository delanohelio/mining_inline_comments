{"pr_number": 509, "pr_title": "ServiceDiscoveryEnricher from FMP", "pr_createdAt": "2020-12-02T16:10:10Z", "pr_url": "https://github.com/eclipse/jkube/pull/509", "timeline": [{"oid": "ba3d8ea1b2b302601d3730b349273876b0df1ad2", "url": "https://github.com/eclipse/jkube/commit/ba3d8ea1b2b302601d3730b349273876b0df1ad2", "message": "ServiceDiscoveryEnricher from FMP", "committedDate": "2020-12-03T14:04:50Z", "type": "forcePushed"}, {"oid": "6eeedfb0341b4a22e59f8774fa1a5e07e181fa25", "url": "https://github.com/eclipse/jkube/commit/6eeedfb0341b4a22e59f8774fa1a5e07e181fa25", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2020-12-03T14:38:10Z", "type": "forcePushed"}, {"oid": "8e945681f542441debaf94ad9ccb0756a30bad73", "url": "https://github.com/eclipse/jkube/commit/8e945681f542441debaf94ad9ccb0756a30bad73", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-12T10:14:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzkwMQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555703901", "bodyText": "This is reported as a vulnerability in Sonar (https://sonarcloud.io/project/issues?id=jkubeio_jkube&open=AXbM866k_aOP8HqgEQPC&pullRequest=509&resolved=false&types=VULNERABILITY):\n\nCould you check if the following changes would still be compliant with the implementation:\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\nDocument doc = df.newDocumentBuilder().parse(camelContextXmlFile)", "author": "manusa", "createdAt": "2021-01-12T11:32:04Z", "path": "jkube-kit/enricher/specific/src/main/java/org/eclipse/jkube/kit/enricher/specific/ServiceDiscoveryEnricher.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.enricher.specific;\n+\n+import io.fabric8.kubernetes.api.builder.TypedVisitor;\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ServiceBuilder;\n+import io.fabric8.kubernetes.api.model.ServicePort;\n+import org.eclipse.jkube.kit.common.Configs;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.eclipse.jkube.kit.enricher.api.BaseEnricher;\n+import org.eclipse.jkube.kit.enricher.api.JKubeEnricherContext;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ServiceDiscoveryEnricher extends BaseEnricher {\n+    static final String ENRICHER_NAME = \"jkube-service-discovery\";\n+\n+    //Default Prefix\n+    static final String PREFIX = \"discovery.3scale.net\";\n+    //Service Annotations\n+    static final String DISCOVERY_VERSION = \"discovery-version\";\n+    static final String SCHEME            = \"scheme\";\n+    static final String PATH              = \"path\";\n+    static final String PORT              = \"port\";\n+    static final String DESCRIPTION_PATH  = \"description-path\";\n+\n+    private File springConfigDir;\n+    private String path             = null;\n+    private String port             = \"80\";\n+    private String scheme           = \"http\";\n+    private String descriptionPath  = null;\n+    private String discoverable     = null;\n+    private String discoveryVersion = \"v1\";\n+\n+    private enum Config implements Configs.Config {\n+        descriptionPath,\n+        discoverable,\n+        discoveryVersion,\n+        path,\n+        port,\n+        scheme,\n+        springDir;\n+    }\n+\n+    public ServiceDiscoveryEnricher(JKubeEnricherContext buildContext) {\n+        super(buildContext, ENRICHER_NAME);\n+\n+        File baseDir = getContext().getProjectDirectory();\n+        springConfigDir = new File(getConfig(Config.springDir, baseDir + \"/src/main/resources/spring\"));\n+        discoverable = getConfig(Config.discoverable, null);\n+    }\n+\n+    @Override\n+    public void create(PlatformMode platformMode, final KubernetesListBuilder listBuilder) {\n+        listBuilder.accept(new TypedVisitor<ServiceBuilder>() {\n+\n+            @Override\n+            public void visit(ServiceBuilder serviceBuilder) {\n+                addAnnotations(serviceBuilder);\n+            }\n+\n+        });\n+    }\n+\n+    protected void addAnnotations(ServiceBuilder serviceBuilder) {\n+        if (serviceBuilder.buildSpec() != null) {\n+            List<ServicePort> ports = serviceBuilder.buildSpec().getPorts();\n+            if (! ports.isEmpty()) {\n+                ServicePort firstServicePort = ports.iterator().next();\n+                port = firstServicePort.getPort().toString();\n+                log.info(\"Using first mentioned service port '%s' \" , port);\n+            } else {\n+                log.warn(\"No service port was found\");\n+            }\n+        }\n+\n+        tryCamelDSLProject();\n+\n+        if (discoverable != null) {\n+            String labelName = PREFIX;\n+            String labelValue = getConfig(Config.discoverable, discoverable);\n+            serviceBuilder.editOrNewMetadata().addToLabels(labelName, labelValue).and().buildMetadata();\n+\n+            log.info(\"Add %s label: \\\"%s\\\" : \\\"%s\\\"\", PREFIX, labelName, labelValue);\n+\n+            Map<String, String> annotations = new HashMap<>();\n+            annotations.put(PREFIX + \"/\" + DISCOVERY_VERSION, getConfig(Config.discoveryVersion, discoveryVersion));\n+            annotations.put(PREFIX + \"/\" + SCHEME, getConfig(Config.scheme, scheme));\n+\n+            String resolvedPath = getConfig(Config.path, path);\n+            if (resolvedPath != null) {\n+                if (! resolvedPath.startsWith(\"/\")) {\n+                    resolvedPath = \"/\" + resolvedPath;\n+                }\n+                annotations.put(PREFIX + \"/\" + PATH, resolvedPath);\n+            }\n+            annotations.put(PREFIX + \"/\" + PORT, getConfig(Config.port, port));\n+\n+            String resolvedDescriptionPath = getConfig(Config.descriptionPath, descriptionPath);\n+            if (resolvedDescriptionPath != null) {\n+                if (! resolvedDescriptionPath.toLowerCase().startsWith(\"http\") && ! resolvedDescriptionPath.startsWith(\"/\")) {\n+                    resolvedDescriptionPath = \"/\" + resolvedDescriptionPath;\n+                }\n+                annotations.put(PREFIX + \"/\" + DESCRIPTION_PATH , resolvedDescriptionPath);\n+            }\n+            for (String annotationName : annotations.keySet()) {\n+                log.info(\"Add %s annotation: \\\"%s\\\" : \\\"%s\\\"\", PREFIX, annotationName, annotations.get(annotationName));\n+            }\n+            serviceBuilder.editMetadata().addToAnnotations(annotations).and().buildMetadata();\n+        }\n+    }\n+\n+    public void tryCamelDSLProject(){\n+        File camelContextXmlFile = new File(springConfigDir.getAbsoluteFile() + \"/camel-context.xml\");\n+        if (camelContextXmlFile.exists()) {\n+            try {\n+                Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(camelContextXmlFile);", "originalCommit": "8e945681f542441debaf94ad9ccb0756a30bad73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc0NDc1OA==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555744758", "bodyText": "Done.", "author": "rnetuka", "createdAt": "2021-01-12T12:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzkwMQ=="}], "type": "inlineReview"}, {"oid": "7c5bb77f9f63c8770f1adfb586cb57efd2b65dd9", "url": "https://github.com/eclipse/jkube/commit/7c5bb77f9f63c8770f1adfb586cb57efd2b65dd9", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-12T12:48:23Z", "type": "forcePushed"}, {"oid": "89bf47fcc09317a6fe599b00a61cf34ce40ff281", "url": "https://github.com/eclipse/jkube/commit/89bf47fcc09317a6fe599b00a61cf34ce40ff281", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-12T12:53:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2MDY0NQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r555960645", "bodyText": "I'm sorry but I'm a little confused. Why do you have variables with the same name but one on uppercase/lowercase?", "author": "rohanKanojia", "createdAt": "2021-01-12T17:47:18Z", "path": "jkube-kit/enricher/specific/src/main/java/org/eclipse/jkube/kit/enricher/specific/ServiceDiscoveryEnricher.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.enricher.specific;\n+\n+import io.fabric8.kubernetes.api.builder.TypedVisitor;\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ServiceBuilder;\n+import io.fabric8.kubernetes.api.model.ServicePort;\n+import org.eclipse.jkube.kit.common.Configs;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.eclipse.jkube.kit.enricher.api.BaseEnricher;\n+import org.eclipse.jkube.kit.enricher.api.JKubeEnricherContext;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ServiceDiscoveryEnricher extends BaseEnricher {\n+    static final String ENRICHER_NAME = \"jkube-service-discovery\";\n+\n+    //Default Prefix\n+    static final String PREFIX = \"discovery.3scale.net\";\n+    //Service Annotations\n+    static final String DISCOVERY_VERSION = \"discovery-version\";\n+    static final String SCHEME            = \"scheme\";\n+    static final String PATH              = \"path\";\n+    static final String PORT              = \"port\";\n+    static final String DESCRIPTION_PATH  = \"description-path\";\n+\n+    private File springConfigDir;\n+    private String path             = null;\n+    private String port             = \"80\";\n+    private String scheme           = \"http\";\n+    private String descriptionPath  = null;\n+    private String discoverable     = null;\n+    private String discoveryVersion = \"v1\";", "originalCommit": "89bf47fcc09317a6fe599b00a61cf34ce40ff281", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NzY2NQ==", "url": "https://github.com/eclipse/jkube/pull/509#discussion_r556387665", "bodyText": "The variables from the capture are default values. The ones in uppercase are property names (in order to avoid repetition of string literals).", "author": "rnetuka", "createdAt": "2021-01-13T09:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2MDY0NQ=="}], "type": "inlineReview"}, {"oid": "e2d7cee051aad7a562056f111eae9608363544c1", "url": "https://github.com/eclipse/jkube/commit/e2d7cee051aad7a562056f111eae9608363544c1", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-13T09:47:23Z", "type": "forcePushed"}, {"oid": "e2d7cee051aad7a562056f111eae9608363544c1", "url": "https://github.com/eclipse/jkube/commit/e2d7cee051aad7a562056f111eae9608363544c1", "message": "ServiceDiscoveryEnricher from FMP\n\nSigned-off-by: rnetuka <rnetuka@redhat.com>", "committedDate": "2021-01-13T09:47:23Z", "type": "commit"}]}