{"pr_number": 899, "pr_title": "Issue 887", "pr_createdAt": "2020-03-02T13:19:19Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/899", "timeline": [{"oid": "7a5102bf48fe75ac00d8d31c0a151766ae22b116", "url": "https://github.com/resilience4j/resilience4j/commit/7a5102bf48fe75ac00d8d31c0a151766ae22b116", "message": "Issue#887 merging the divided packages between spring boot 2 and spring boot common modules", "committedDate": "2020-02-26T13:40:53Z", "type": "commit"}, {"oid": "1b642b07573d94665b665093f34e05422d0b5e96", "url": "https://github.com/resilience4j/resilience4j/commit/1b642b07573d94665b665093f34e05422d0b5e96", "message": "Issue#887 fix sonar issues", "committedDate": "2020-02-26T14:23:13Z", "type": "commit"}, {"oid": "e91ec57f1d9e0af824a22923f186e753d1732c50", "url": "https://github.com/resilience4j/resilience4j/commit/e91ec57f1d9e0af824a22923f186e753d1732c50", "message": "Merge remote-tracking branch 'upstream/master' into issue-887", "committedDate": "2020-03-02T12:41:22Z", "type": "commit"}, {"oid": "34b09eaf8b7c507edbe99484f0f6864e0f1c0033", "url": "https://github.com/resilience4j/resilience4j/commit/34b09eaf8b7c507edbe99484f0f6864e0f1c0033", "message": "Issue#887 merge spring cloud common with spring cloud module", "committedDate": "2020-03-02T13:18:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTk5OA==", "url": "https://github.com/resilience4j/resilience4j/pull/899#discussion_r386419998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @org.springframework.cloud.context.config.annotation.RefreshScope\n          \n          \n            \n                @RefreshScope\n          \n      \n    \n    \n  \n\nand Please import RefreshScope. Others are same too.", "author": "dlsrb6342", "createdAt": "2020-03-02T14:21:45Z", "path": "resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java", "diffHunk": "@@ -1,19 +1,78 @@\n package io.github.resilience4j.bulkhead.autoconfigure;\n \n import io.github.resilience4j.bulkhead.Bulkhead;\n+import io.github.resilience4j.bulkhead.BulkheadRegistry;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkhead;\n+import io.github.resilience4j.bulkhead.ThreadPoolBulkheadRegistry;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.configure.BulkheadConfigurationProperties;\n+import io.github.resilience4j.bulkhead.configure.threadpool.ThreadPoolBulkheadConfiguration;\n+import io.github.resilience4j.bulkhead.event.BulkheadEvent;\n+import io.github.resilience4j.common.CompositeCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.BulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigCustomizer;\n+import io.github.resilience4j.common.bulkhead.configuration.ThreadPoolBulkheadConfigurationProperties;\n+import io.github.resilience4j.consumer.EventConsumerRegistry;\n+import io.github.resilience4j.core.registry.RegistryEventConsumer;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;\n import org.springframework.cloud.context.scope.refresh.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n \n @Configuration\n @ConditionalOnClass({Bulkhead.class, RefreshScope.class})\n @AutoConfigureAfter(RefreshAutoConfiguration.class)\n @AutoConfigureBefore(BulkheadAutoConfiguration.class)\n-public class RefreshScopedBulkheadAutoConfiguration extends\n-    AbstractRefreshScopedBulkheadConfiguration {\n+public class RefreshScopedBulkheadAutoConfiguration {\n+    protected final BulkheadConfiguration bulkheadConfiguration;\n+    protected final ThreadPoolBulkheadConfiguration threadPoolBulkheadConfiguration;\n \n+    protected RefreshScopedBulkheadAutoConfiguration() {\n+        this.threadPoolBulkheadConfiguration = new ThreadPoolBulkheadConfiguration();\n+        this.bulkheadConfiguration = new BulkheadConfiguration();\n+    }\n+\n+    /**\n+     * @param bulkheadConfigurationProperties bulkhead spring configuration properties\n+     * @param bulkheadEventConsumerRegistry   the bulkhead event consumer registry\n+     * @return the RefreshScoped BulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope\n+    @ConditionalOnMissingBean\n+    public BulkheadRegistry bulkheadRegistry(\n+        BulkheadConfigurationProperties bulkheadConfigurationProperties,\n+        EventConsumerRegistry<BulkheadEvent> bulkheadEventConsumerRegistry,\n+        RegistryEventConsumer<Bulkhead> bulkheadRegistryEventConsumer,\n+        @Qualifier(\"compositeBulkheadCustomizer\") CompositeCustomizer<BulkheadConfigCustomizer> compositeBulkheadCustomizer) {\n+        return bulkheadConfiguration\n+            .bulkheadRegistry(bulkheadConfigurationProperties, bulkheadEventConsumerRegistry,\n+                bulkheadRegistryEventConsumer, compositeBulkheadCustomizer);\n+    }\n+\n+    /**\n+     * @param threadPoolBulkheadConfigurationProperties thread pool bulkhead spring configuration\n+     *                                                  properties\n+     * @param bulkheadEventConsumerRegistry             the bulk head event consumer registry\n+     * @return the RefreshScoped ThreadPoolBulkheadRegistry\n+     */\n+    @Bean\n+    @org.springframework.cloud.context.config.annotation.RefreshScope", "originalCommit": "34b09eaf8b7c507edbe99484f0f6864e0f1c0033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3OTkyNg==", "url": "https://github.com/resilience4j/resilience4j/pull/899#discussion_r386879926", "bodyText": "I can not as there are 2 RefreshScope in the same class , one for the context imple and one for the annotation so u need to differentiate between them otherwise u will have import conflict", "author": "Romeh", "createdAt": "2020-03-03T09:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4NTY2Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/899#discussion_r386885667", "bodyText": "resilience4j/resilience4j-spring-cloud2/src/main/java/io/github/resilience4j/bulkhead/autoconfigure/RefreshScopedBulkheadAutoConfiguration.java\n    \n    \n         Line 13\n      in\n      577025d\n    \n    \n    \n    \n\n        \n          \n           @ConditionalOnClass({Bulkhead.class, RefreshScope.class}) \n        \n    \n  \n\n\nOh You mean this line, right?  I missed it.", "author": "dlsrb6342", "createdAt": "2020-03-03T09:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxOTk5OA=="}], "type": "inlineReview"}]}