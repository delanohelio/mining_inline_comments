{"pr_number": 1225, "pr_title": "Issue #1221: Implement a RegistryStore backed by JCache implementation", "pr_createdAt": "2020-10-24T16:15:57Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1225", "timeline": [{"oid": "1dada9b7df65c215a54da0df5aff97537cbdfcff", "url": "https://github.com/resilience4j/resilience4j/commit/1dada9b7df65c215a54da0df5aff97537cbdfcff", "message": "Issue #891: Make Circuit Breaker state transition calls idempotent", "committedDate": "2020-02-28T19:53:49Z", "type": "commit"}, {"oid": "36a46515a1fe96f8a04aa14effd743db234dfd25", "url": "https://github.com/resilience4j/resilience4j/commit/36a46515a1fe96f8a04aa14effd743db234dfd25", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-03-02T21:01:18Z", "type": "commit"}, {"oid": "dfd221513257749b0a4f661800df63f30f27f588", "url": "https://github.com/resilience4j/resilience4j/commit/dfd221513257749b0a4f661800df63f30f27f588", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-03-28T12:05:00Z", "type": "commit"}, {"oid": "706f5cd7d56042e8d20f98528e25f9013cd10f0c", "url": "https://github.com/resilience4j/resilience4j/commit/706f5cd7d56042e8d20f98528e25f9013cd10f0c", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-05-03T14:17:13Z", "type": "commit"}, {"oid": "2c52151126fa13cc415ce7dd762d1064a019d225", "url": "https://github.com/resilience4j/resilience4j/commit/2c52151126fa13cc415ce7dd762d1064a019d225", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-21T17:03:39Z", "type": "commit"}, {"oid": "c9fecab9b0cbd695d3401d3716ae9d0fe2dd675b", "url": "https://github.com/resilience4j/resilience4j/commit/c9fecab9b0cbd695d3401d3716ae9d0fe2dd675b", "message": "Merge remote-tracking branch 'upstream/master' into master", "committedDate": "2020-10-18T16:10:20Z", "type": "commit"}, {"oid": "215af1f86683b5000cf0115da5102df4f618a90c", "url": "https://github.com/resilience4j/resilience4j/commit/215af1f86683b5000cf0115da5102df4f618a90c", "message": "Issue #1221: Implement a RegistryStore backed by JCache implementation", "committedDate": "2020-10-24T16:08:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5Nzg3MQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1225#discussion_r512497871", "bodyText": "I think we should throw a custom exception:\nInstead of wrapping it in a RuntimeException or CacheException, we could define a CacheRegistryStoreException.", "author": "RobWin", "createdAt": "2020-10-27T08:30:38Z", "path": "resilience4j-cache/src/main/java/io/github/resilience4j/cache/CacheRegistryStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package io.github.resilience4j.cache;\n+\n+import io.github.resilience4j.core.RegistryStore;\n+\n+import javax.cache.Cache;\n+import javax.cache.processor.EntryProcessor;\n+import javax.cache.processor.EntryProcessorException;\n+import javax.cache.processor.MutableEntry;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+public class CacheRegistryStore<E> implements RegistryStore<E> {\n+\n+    private final Cache<String, E> cacheStore;\n+\n+    public CacheRegistryStore(Cache<String, E> cacheStore) {\n+        this.cacheStore = cacheStore;\n+    }\n+\n+    @Override\n+    public E computeIfAbsent(String key, Function<? super String, ? extends E> mappingFunction) {\n+        try {\n+            return cacheStore.invoke(key, new AtomicComputeProcessor<>(), mappingFunction);\n+        } catch (EntryProcessorException e) {\n+            throw new RuntimeException(e.getCause());", "originalCommit": "215af1f86683b5000cf0115da5102df4f618a90c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMjY4Mw==", "url": "https://github.com/resilience4j/resilience4j/pull/1225#discussion_r512612683", "bodyText": "Thanks for the review!\nI didn't create a new type to keep the behavior in sync with the in-memory store that throws underlying ConcurrentHashMap exception type: \n  \n    \n      resilience4j/resilience4j-core/src/main/java/io/github/resilience4j/core/registry/InMemoryRegistryStore.java\n    \n    \n         Line 35\n      in\n      3dc2ead\n    \n    \n    \n    \n\n        \n          \n           this.entryMap = new ConcurrentHashMap<>(); \n        \n    \n  \n\n\nDo you think it makes sense to create a RegistryStoreException that can be used by all store implementations?", "author": "laksnv", "createdAt": "2020-10-27T11:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5Nzg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNTQyNA==", "url": "https://github.com/resilience4j/resilience4j/pull/1225#discussion_r512615424", "bodyText": "@throws RuntimeException or Error if the remappingFunction does so, in which case the mapping is unchanged\n\n\nYes, you are right. Then let's keep it as it is.", "author": "RobWin", "createdAt": "2020-10-27T11:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5Nzg3MQ=="}], "type": "inlineReview"}]}