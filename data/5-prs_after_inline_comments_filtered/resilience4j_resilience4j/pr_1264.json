{"pr_number": 1264, "pr_title": "rate limiter - drain permissions on result config option", "pr_createdAt": "2020-12-05T17:07:25Z", "pr_url": "https://github.com/resilience4j/resilience4j/pull/1264", "timeline": [{"oid": "89b4986aed67f68096f410c9e9658cf26082e5fa", "url": "https://github.com/resilience4j/resilience4j/commit/89b4986aed67f68096f410c9e9658cf26082e5fa", "message": "rate limiter - drain permissions on result config option", "committedDate": "2020-12-05T17:05:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MjczMg==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r537392732", "bodyText": "Please introduce and use an onResult hook", "author": "RobWin", "createdAt": "2020-12-07T10:25:43Z", "path": "resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/RateLimiter.java", "diffHunk": "@@ -185,7 +191,14 @@ static RateLimiter ofDefaults(String name) {\n     ) {\n         return () -> {\n             waitForPermission(rateLimiter, permits);\n-            return supplier.get();\n+            try {\n+                F result = supplier.get();\n+                drainIfNeeded(rateLimiter, CallsResult.success(result));", "originalCommit": "89b4986aed67f68096f410c9e9658cf26082e5fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MTEzNw==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r551571137", "bodyText": "where should I introduce it? in RateLimiterEventProcessor ?\nif so then how should I pass the event to it from a static method? event processors are privet fields in rate limiters implementations", "author": "walec51", "createdAt": "2021-01-04T21:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3MTQxMg==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r551771412", "bodyText": "See #1264 (comment)\nI'm talking about new public methods in the RateLimiter interface analog to the design of the CircuitBreaker, Bulkhead and Retry.\nMethods like onResult or onError are better extensible by new functionality. We don't have to touch every RateLimiter decorator method again, if we want to introduce further functionality in the future.", "author": "RobWin", "createdAt": "2021-01-05T08:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5MjAwNQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r552992005", "bodyText": "done", "author": "walec51", "createdAt": "2021-01-06T22:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MjczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5Mjk5MA==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r537392990", "bodyText": "Please introduce and use an onError hook", "author": "RobWin", "createdAt": "2020-12-07T10:26:08Z", "path": "resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/RateLimiter.java", "diffHunk": "@@ -185,7 +191,14 @@ static RateLimiter ofDefaults(String name) {\n     ) {\n         return () -> {\n             waitForPermission(rateLimiter, permits);\n-            return supplier.get();\n+            try {\n+                F result = supplier.get();\n+                drainIfNeeded(rateLimiter, CallsResult.success(result));\n+                return result;\n+            } catch (Exception exception) {\n+                drainIfNeeded(rateLimiter, CallsResult.failure(exception));", "originalCommit": "89b4986aed67f68096f410c9e9658cf26082e5fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwODQ0OA==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r553008448", "bodyText": "done", "author": "walec51", "createdAt": "2021-01-06T23:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5Mjk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MzU0OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r537393549", "bodyText": "Please use Either<Throwable, Object> instead of CallsResult", "author": "RobWin", "createdAt": "2020-12-07T10:26:58Z", "path": "resilience4j-ratelimiter/src/main/java/io/github/resilience4j/ratelimiter/RateLimiterConfig.java", "diffHunk": "@@ -161,6 +173,21 @@ public Builder writableStackTraceEnabled(boolean writableStackTraceEnabled) {\n             return this;\n         }\n \n+        /**\n+         * Allows you to check the result of a call decorated by this rate limiter and make a decision\n+         * should we drain all the permissions left it the current period. Useful in situations when\n+         * despite using a RateLimiter the underlining called service will say that you passed the maximum number of calls for a given period.\n+         *\n+         * @param drainPermissionsOnResult your function should return true when the permissions drain\n+         *                                 should happen\n+         * @return the RateLimiterConfig.Builder\n+         * @see RateLimiter#drainPermissions()\n+         */\n+        public Builder drainPermissionsOnResult(Function<CallsResult, Boolean> drainPermissionsOnResult) {", "originalCommit": "89b4986aed67f68096f410c9e9658cf26082e5fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzNzQyNQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r544537425", "bodyText": "are you sure? CallsResult has a nicer API (more specialized) which enables cleaner configuration\nplease take a look at my unit test:\nresilience4j-ratelimiter/src/test/java/io/github/resilience4j/ratelimiter/RateLimiterWithConditionalDrainIntegrationTest.java\nthe configuration part would not look so simple if I used Either<Throwable, Object>", "author": "walec51", "createdAt": "2020-12-16T18:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MzU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTAyNzY3MQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r545027671", "bodyText": "Yes, I would prefer to use Either for now.\nWe are working on a 2.0 branch which uses Java 11 and has no Vavr dependency anymore. We will replace Either by our own implementation at many places.  This would be the best time to introduce a simpler API.", "author": "RobWin", "createdAt": "2020-12-17T11:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MzU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDM0OQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r551564349", "bodyText": "I've tried refactoring the code to Either but Either cannot handle a successful call return of a function that returns void\nthis is needed in situations like\n    static CheckedRunnable decorateCheckedRunnable(RateLimiter rateLimiter, int permits,\n        CheckedRunnable runnable) {\n\n        return () -> {\n            waitForPermission(rateLimiter, permits);\n            try {\n                runnable.run();\n                drainIfNeeded(rateLimiter, CallsResult.success());\n            } catch (Exception exception) {\n                drainIfNeeded(rateLimiter, CallsResult.failure(exception));\n                throw exception;\n            }\n        };\n    }\n\nwhat should I use here? Either.right(null) ?\nand then in the application code which check for a certain condition should I do this:\nif (result.isRigth() && result.get() != null) {\n\n?\nbesides that the API started looking ugly with template mayhem such as:\nprivate final Function<Either<? extends Throwable, Object>, Boolean> drainPermissionsOnResult;\n\nI do not think this is the right approach.\nFurthermore where should I put helper methods like isSuccessfulAndReturned:\n        RateLimiter limiter = RateLimiter.of(\"someLimiter\", RateLimiterConfig.custom()\n            .limitForPeriod(5)\n            .limitRefreshPeriod(Duration.ofHours(1))\n            .drainPermissionsOnResult(\n                callsResult -> callsResult.isSuccessfulAndReturned(\n                    ResponseWithOverloadIndication.class,\n                    response -> response.isPotentialOverload()))\n            .build());\n\n?", "author": "walec51", "createdAt": "2021-01-04T20:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MzU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5MTk2Mw==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r551791963", "bodyText": "We could add a ResultUtil class.\nResultUtil.isSuccessfulAndReturned(eitherResult, responseWithOverloadIndication.class,  response -> response.isPotentialOverload())\n\nAs I said, when we remove Vavr from Resilience4j 2.0, we will have a look at the whole code base and might introduce a CallResult class as you suggested. But then we will use it everywhere and consistently.\nIn v1.x, we are using Either when a user needs to check if the call was a sucess or failure. In v1.x a new ResultUtil helper class could also be utilized in IntervalBiFunction.\nIf you don't like it, as an alternative we could introduce:\nRateLimiterConfig.drainPermissionsOnResult and RateLimiterConfig.drainPermissionsOnException comparable to RetryConfig.retryOnException and RetryConfig.retryOnResult.", "author": "RobWin", "createdAt": "2021-01-05T08:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MzU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5MjIyOQ==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r552992229", "bodyText": "removed CallsResult introduced Either", "author": "walec51", "createdAt": "2021-01-06T22:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM5MzU0OQ=="}], "type": "inlineReview"}, {"oid": "0fee707e81a22a60f31b2632443c9455e16d5da2", "url": "https://github.com/resilience4j/resilience4j/commit/0fee707e81a22a60f31b2632443c9455e16d5da2", "message": "Merge remote-tracking branch 'upstream/master' into ratelimiter-drain-on-exception", "committedDate": "2021-01-06T21:23:45Z", "type": "commit"}, {"oid": "0e41b75315e1bce4267ec32c95c2f79a2ac26db0", "url": "https://github.com/resilience4j/resilience4j/commit/0e41b75315e1bce4267ec32c95c2f79a2ac26db0", "message": "review fixes", "committedDate": "2021-01-06T22:14:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE2Mjc3Nw==", "url": "https://github.com/resilience4j/resilience4j/pull/1264#discussion_r553162777", "bodyText": "Please add the Apache Licence Header", "author": "RobWin", "createdAt": "2021-01-07T07:57:12Z", "path": "resilience4j-core/src/main/java/io/github/resilience4j/core/ResultUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.github.resilience4j.core;", "originalCommit": "0e41b75315e1bce4267ec32c95c2f79a2ac26db0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e644d1dbe1b02a0d499df87a9fb4772c6551608f", "url": "https://github.com/resilience4j/resilience4j/commit/e644d1dbe1b02a0d499df87a9fb4772c6551608f", "message": "license header", "committedDate": "2021-01-09T11:31:14Z", "type": "commit"}]}