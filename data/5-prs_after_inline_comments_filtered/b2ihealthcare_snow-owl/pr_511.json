{"pr_number": 511, "pr_title": "Feature: Generic Concept Request API", "pr_createdAt": "2020-03-06T11:23:06Z", "pr_url": "https://github.com/b2ihealthcare/snow-owl/pull/511", "timeline": [{"oid": "03db897ab143f06a73ee82ab5b2a83ae5169bf01", "url": "https://github.com/b2ihealthcare/snow-owl/commit/03db897ab143f06a73ee82ab5b2a83ae5169bf01", "message": "[api] add Enum keyed accessor methods to Options", "committedDate": "2020-03-05T18:52:48Z", "type": "commit"}, {"oid": "df225731f82382ce50dc3202738f31e5c47d8edc", "url": "https://github.com/b2ihealthcare/snow-owl/commit/df225731f82382ce50dc3202738f31e5c47d8edc", "message": "[api] add generic Concept model and ConceptSearchRequest and its Builder", "committedDate": "2020-03-05T18:54:57Z", "type": "commit"}, {"oid": "5dc4fa65dd4b0a1c3b7c2c59cbca22825fd38cf0", "url": "https://github.com/b2ihealthcare/snow-owl/commit/5dc4fa65dd4b0a1c3b7c2c59cbca22825fd38cf0", "message": "[core] refactor TerminologyRepositoryPlugin initialization\n\nRemove type specific builder methods from RepositoryBuilder.\nAdd generic bind(type, instance) method to bind any service to the\nrepository context.", "committedDate": "2020-03-05T18:55:47Z", "type": "commit"}, {"oid": "051d8f363514a0c09a4d1ccccce0893d32b2b82f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/051d8f363514a0c09a4d1ccccce0893d32b2b82f", "message": "[api] initial version of SNOMED CT specific search request evaluator", "committedDate": "2020-03-05T18:56:20Z", "type": "commit"}, {"oid": "1e90ce4c6acd3df29347c0d9f51e1429b8537f72", "url": "https://github.com/b2ihealthcare/snow-owl/commit/1e90ce4c6acd3df29347c0d9f51e1429b8537f72", "message": "[tests] add generic access test to SNOMED CT api tests", "committedDate": "2020-03-05T18:56:53Z", "type": "commit"}, {"oid": "45858ba6df8d8cfb3a23a35290fc584b1b07de2e", "url": "https://github.com/b2ihealthcare/snow-owl/commit/45858ba6df8d8cfb3a23a35290fc584b1b07de2e", "message": "[api] add filterByQuery test and fix remaining issues with filters", "committedDate": "2020-03-06T11:20:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3ODE2OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/511#discussion_r388878168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * key.equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.)\n          \n          \n            \n            \t * key.name().equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.)", "author": "apeteri", "createdAt": "2020-03-06T12:35:08Z", "path": "commons/com.b2international.commons/src/com/b2international/commons/options/Options.java", "diffHunk": "@@ -67,9 +67,24 @@\n \t *             if the specified key is <code>null</code>\n \t */\n \tObject get(String key);\n+\t\n+\t/**\n+\t * Returns the value to which the specified Enum key's name is mapped, or {@code null} if this map contains no mapping for the key.\n+\t *\n+\t * <p>\n+\t * More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n+\t * key.equals(k))}, then this method returns {@code v}; otherwise it returns {@code null}. (There can be at most one such mapping.)", "originalCommit": "45858ba6df8d8cfb3a23a35290fc584b1b07de2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3OTgwOQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/511#discussion_r388879809", "bodyText": "I don't know if we ever call put twice for the same key, but null effectively removed the previous value in the method's \"before\" form, and now it doesn't.", "author": "apeteri", "createdAt": "2020-03-06T12:38:56Z", "path": "commons/com.b2international.commons/src/com/b2international/commons/options/OptionsBuilder.java", "diffHunk": "@@ -30,10 +30,20 @@\n \tOptionsBuilder() {}\n \t\n \tpublic OptionsBuilder put(String key, Object value) {\n-\t\toptions.put(key, value);\n+\t\tif (value != null) {", "originalCommit": "45858ba6df8d8cfb3a23a35290fc584b1b07de2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MDcyNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/511#discussion_r388880725", "bodyText": "This option key is not explained.", "author": "apeteri", "createdAt": "2020-03-06T12:41:08Z", "path": "core/com.b2international.snowowl.datastore/src/com/b2international/snowowl/core/request/ConceptSearchRequestEvaluator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import com.b2international.commons.options.Options;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.Concept;\n+import com.b2international.snowowl.core.domain.Concepts;\n+\n+/**\n+ * @since 7.5\n+ */\n+public interface ConceptSearchRequestEvaluator {\n+\n+\tpublic enum OptionKey {\n+\n+\t\t/**\n+\t\t * Explicit ID filter to return all concepts that have any of the given IDs.\n+\t\t */\n+\t\tID,\n+\n+\t\t/**\n+\t\t * A term filter that matches concepts having a term match. The exact semantics of how a term match works depends on the given code system,\n+\t\t * but usually it supports exact, partial word and prefix matches.\n+\t\t */\n+\t\tTERM,\n+\n+\t\t/**\n+\t\t * A term filter that matches concepts having an exact term match regardless of case.\n+\t\t */\n+\t\tTERM_EXACT,\n+\n+\t\t/**\n+\t\t * A query expression defined in the target code system's query language\n+\t\t */\n+\t\tQUERY,\n+\n+\t\t/**\n+\t\t * ", "originalCommit": "45858ba6df8d8cfb3a23a35290fc584b1b07de2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "02dee687b0c1d7e6fabd8e61bd6bde0fa31f130d", "url": "https://github.com/b2ihealthcare/snow-owl/commit/02dee687b0c1d7e6fabd8e61bd6bde0fa31f130d", "message": "Update javadoc\r\n\r\nThanks @apeteri!\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-03-06T12:45:26Z", "type": "commit"}, {"oid": "a88f9acb2a75be83ef77e8375dfa4a1f3b07ac95", "url": "https://github.com/b2ihealthcare/snow-owl/commit/a88f9acb2a75be83ef77e8375dfa4a1f3b07ac95", "message": "[api] add javadoc to MUST_NOT_QUERY optionkey", "committedDate": "2020-03-06T12:49:12Z", "type": "commit"}, {"oid": "49e901302df046a1fb6d62e2965e1a7a6586537a", "url": "https://github.com/b2ihealthcare/snow-owl/commit/49e901302df046a1fb6d62e2965e1a7a6586537a", "message": "[commons] remove existing mapping if the new value is null (Options)", "committedDate": "2020-03-06T12:57:49Z", "type": "commit"}]}