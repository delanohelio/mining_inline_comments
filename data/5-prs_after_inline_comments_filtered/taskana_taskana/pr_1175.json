{"pr_number": 1175, "pr_title": "TSK-1333: Add history events for cancelled/terminated tasks", "pr_createdAt": "2020-07-14T12:40:33Z", "pr_url": "https://github.com/Taskana/taskana/pull/1175", "timeline": [{"oid": "287fec9438973926ba3337697cee2856f2288b77", "url": "https://github.com/Taskana/taskana/commit/287fec9438973926ba3337697cee2856f2288b77", "message": "TSK-1333: Add history events for cancelled/terminated tasks", "committedDate": "2020-07-14T19:16:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459383826", "bodyText": "I don't know what the good practice is. I personally prefer to separate action from assertion to make it more readable. By maybe Sonar complains?\nWhat do you think?", "author": "holgerhagen", "createdAt": "2020-07-23T11:32:37Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCancellationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCancellationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCancelledHistoryEvent_When_TaskIsCancelled() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "originalCommit": "287fec9438973926ba3337697cee2856f2288b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDUzMg==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459384532", "bodyText": "BTW: do we need the task to be in state CLAIMED to cancel it?", "author": "holgerhagen", "createdAt": "2020-07-23T11:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzA0Nw==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459413047", "bodyText": "Sonar is not complaining. Personally I think as long as the assert fits into 1 LOC the readability should be granted. For me this is similar to returning something from a method. You can instantly return something or declare it as a variable before returning. Sonar tends to not like creating extra variables before returning. What do you think @mustaphazorgati ?\nNo the task state can be anything as long as it is not an end state. I could probably remove the check for the task state before terminating the task if you want me to.", "author": "gitgoodjhe", "createdAt": "2020-07-23T12:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MjQzOQ==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r462072439", "bodyText": "Maybe we should discuss it in the CoP meeting?\nRegarding the status: in this case we do not neet the claim and the check for it. But we should have tests for both cancel operations: one from ready state and one from claimed state.", "author": "holgerhagen", "createdAt": "2020-07-29T06:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MzgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDg2NA==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459384864", "bodyText": "see above", "author": "holgerhagen", "createdAt": "2020-07-23T11:35:07Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskTerminationAccTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskTerminationAccTest extends AbstractAccTest {\n+\n+  private final TaskService taskService = taskanaEngine.getTaskService();\n+  private final SimpleHistoryServiceImpl historyService = getHistoryService();\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateTerminatedHistoryEvent_When_TaskIsTerminated() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    List<HistoryEventImpl> listEvents = historyService.createHistoryQuery().taskIdIn(taskId).list();\n+\n+    assertThat(listEvents).isEmpty();\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);", "originalCommit": "287fec9438973926ba3337697cee2856f2288b77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459385448", "bodyText": "correct would be to use the completed timestamp, which should be identical.", "author": "holgerhagen", "createdAt": "2020-07-23T11:36:21Z", "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/api/events/task/CancelledEvent.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package pro.taskana.spi.history.api.events.task;\n+\n+import pro.taskana.task.api.models.Task;\n+\n+/** Event fired if a task is cancelled. */\n+public class CancelledEvent extends TaskEvent {\n+\n+  public CancelledEvent(String id, Task task, String userId) {\n+    super(id, task, userId, null);\n+    eventType = \"TASK_CANCELLED\";\n+    created = task.getModified();", "originalCommit": "287fec9438973926ba3337697cee2856f2288b77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzQ4Mg==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r459413482", "bodyText": "The timestamp is identical, but I will change it to task.getCompleted()", "author": "gitgoodjhe", "createdAt": "2020-07-23T12:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzAxNg==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r462073016", "bodyText": "You will but you haven't done it yet, correct? Or is this just an displaying issue?", "author": "holgerhagen", "createdAt": "2020-07-29T06:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MzU1Ng==", "url": "https://github.com/Taskana/taskana/pull/1175#discussion_r462073556", "bodyText": "I have this changed but not pushed yet, since the changes in the asserts are not yet agreed upon. I'm going to push everything together", "author": "gitgoodjhe", "createdAt": "2020-07-29T06:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NTQ0OA=="}], "type": "inlineReview"}, {"oid": "c0414fcdf299633151dbda69f67ce3ac6f2f0821", "url": "https://github.com/Taskana/taskana/commit/c0414fcdf299633151dbda69f67ce3ac6f2f0821", "message": "TSK-1333: Review findings", "committedDate": "2020-08-05T09:56:20Z", "type": "commit"}]}