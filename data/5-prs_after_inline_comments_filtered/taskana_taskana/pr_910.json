{"pr_number": 910, "pr_title": "Tsk1031: Update to Spring Boot 2.2.4 and Spring 5.2.3", "pr_createdAt": "2020-02-07T19:57:06Z", "pr_url": "https://github.com/Taskana/taskana/pull/910", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTc3Ng==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376801776", "bodyText": "Why is the diff so big?", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:50:17Z", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/jobs/WorkbasketCleanupJob.java", "diffHunk": "@@ -1,149 +1,146 @@\n-package pro.taskana.common.internal.jobs;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTc4NQ==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376801785", "bodyText": "Please reformat.", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTgyMA==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376801820", "bodyText": "Why did you add this property?", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:50:54Z", "path": "lib/taskana-spring-example/src/test/java/pro/taskana/TaskanaTransactionIntTest.java", "diffHunk": "@@ -45,19 +40,20 @@\n import pro.taskana.workbasket.api.WorkbasketType;\n import pro.taskana.workbasket.api.exceptions.InvalidWorkbasketException;\n import pro.taskana.workbasket.api.exceptions.WorkbasketAlreadyExistException;\n+import pro.taskana.workbasket.api.exceptions.WorkbasketInUseException;\n import pro.taskana.workbasket.api.exceptions.WorkbasketNotFoundException;\n import pro.taskana.workbasket.internal.WorkbasketImpl;\n \n /** Test for internal transaction management. */\n @ExtendWith(SpringExtension.class)\n @SpringBootTest(\n     classes = TaskanaConfigTestApplication.class,\n-    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+    properties = \"spring.main.allow-bean-definition-overriding=true\")", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTk2MA==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376801960", "bodyText": "And why is it here and not in the application.properties file?", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMTkwNw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376801907", "bodyText": "Please reformat.", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:52:15Z", "path": "rest/taskana-rest-spring-example-boot/src/main/java/pro/taskana/rest/ExampleRestApplication.java", "diffHunk": "@@ -1,74 +1,73 @@\n-package pro.taskana.rest;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjAwNA==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802004", "bodyText": "Please reformat", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:53:48Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/RestHelper.java", "diffHunk": "@@ -1,70 +1,80 @@\n-package pro.taskana;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjAyMw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802023", "bodyText": "Please reformat.", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:54:02Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/jobs/AsyncUpdateJobIntTest.java", "diffHunk": "@@ -1,168 +1,168 @@\n-package pro.taskana.jobs;\n-\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.time.Instant;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.core.ParameterizedTypeReference;\n-import org.springframework.hateoas.Link;\n-import org.springframework.http.HttpEntity;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.test.context.ActiveProfiles;\n-import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import org.springframework.web.client.RestTemplate;\n-\n-import pro.taskana.RestHelper;\n-import pro.taskana.classification.api.Classification;\n-import pro.taskana.common.api.exceptions.InvalidArgumentException;\n-import pro.taskana.rest.Mapping;\n-import pro.taskana.rest.RestConfiguration;\n-import pro.taskana.rest.resource.ClassificationResource;\n-import pro.taskana.rest.resource.ClassificationResourceAssembler;\n-import pro.taskana.rest.resource.TaskResource;\n-import pro.taskana.rest.resource.TaskResourceAssembler;\n-import pro.taskana.task.api.Task;\n-\n-/** Test async updates. */\n-@ActiveProfiles({\"test\"})\n-@ExtendWith(SpringExtension.class)\n-@SpringBootTest(\n-    classes = RestConfiguration.class,\n-    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n-class AsyncUpdateJobIntTest {\n-\n-  private static final String CLASSIFICATION_ID = \"CLI:100000000000000000000000000000000003\";\n-\n-  static RestTemplate template;\n-\n-  @Autowired ClassificationResourceAssembler classificationResourceAssembler;\n-  @Autowired TaskResourceAssembler taskResourceAssembler;\n-  @Autowired JobScheduler jobScheduler;\n-  @Autowired RestHelper restHelper;\n-\n-  @BeforeAll\n-  static void init() {\n-    template = RestHelper.getRestTemplate();\n-  }\n-\n-  @Test\n-  void testUpdateClassificationPrioServiceLevel() throws Exception {\n-\n-    // 1st step: get old classification :\n-    final Instant before = Instant.now();\n-    final ObjectMapper mapper = new ObjectMapper();\n-\n-    ResponseEntity<ClassificationResource> response =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, CLASSIFICATION_ID),\n-            HttpMethod.GET,\n-            new HttpEntity<String>(restHelper.getHeaders()),\n-            ParameterizedTypeReference.forType(ClassificationResource.class));\n-\n-    assertNotNull(response.getBody());\n-    ClassificationResource classification = response.getBody();\n-    assertNotNull(classification.getLink(Link.REL_SELF));\n-\n-    // 2nd step: modify classification and trigger update\n-    classification.removeLinks();\n-    classification.setServiceLevel(\"P5D\");\n-    classification.setPriority(1000);\n-\n-    template.put(\n-        restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, CLASSIFICATION_ID),\n-        new HttpEntity<>(mapper.writeValueAsString(classification), restHelper.getHeaders()));\n-\n-    // trigger jobs twice to refresh all entries. first entry on the first call and follow up on the\n-    // seconds call\n-    jobScheduler.triggerJobs();\n-    jobScheduler.triggerJobs();\n-\n-    // verify the classification modified timestamp is after 'before'\n-    ResponseEntity<ClassificationResource> repeatedResponse =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS_ID, CLASSIFICATION_ID),\n-            HttpMethod.GET,\n-            new HttpEntity<String>(restHelper.getHeaders()),\n-            ParameterizedTypeReference.forType(ClassificationResource.class));\n-\n-    assertNotNull(repeatedResponse.getBody());\n-\n-    ClassificationResource modifiedClassificationResource = repeatedResponse.getBody();\n-    Classification modifiedClassification =\n-        classificationResourceAssembler.toModel(modifiedClassificationResource);\n-\n-    assertFalse(before.isAfter(modifiedClassification.getModified()));\n-\n-    List<String> affectedTasks =\n-        new ArrayList<>(\n-            Arrays.asList(\n-                \"TKI:000000000000000000000000000000000003\",\n-                \"TKI:000000000000000000000000000000000004\",\n-                \"TKI:000000000000000000000000000000000005\",\n-                \"TKI:000000000000000000000000000000000006\",\n-                \"TKI:000000000000000000000000000000000007\",\n-                \"TKI:000000000000000000000000000000000008\",\n-                \"TKI:000000000000000000000000000000000009\",\n-                \"TKI:000000000000000000000000000000000010\",\n-                \"TKI:000000000000000000000000000000000011\",\n-                \"TKI:000000000000000000000000000000000012\",\n-                \"TKI:000000000000000000000000000000000013\",\n-                \"TKI:000000000000000000000000000000000014\",\n-                \"TKI:000000000000000000000000000000000015\",\n-                \"TKI:000000000000000000000000000000000016\",\n-                \"TKI:000000000000000000000000000000000017\",\n-                \"TKI:000000000000000000000000000000000018\",\n-                \"TKI:000000000000000000000000000000000019\",\n-                \"TKI:000000000000000000000000000000000020\",\n-                \"TKI:000000000000000000000000000000000021\",\n-                \"TKI:000000000000000000000000000000000022\",\n-                \"TKI:000000000000000000000000000000000023\",\n-                \"TKI:000000000000000000000000000000000024\",\n-                \"TKI:000000000000000000000000000000000025\",\n-                \"TKI:000000000000000000000000000000000026\",\n-                \"TKI:000000000000000000000000000000000027\",\n-                \"TKI:000000000000000000000000000000000028\",\n-                \"TKI:000000000000000000000000000000000029\",\n-                \"TKI:000000000000000000000000000000000030\",\n-                \"TKI:000000000000000000000000000000000031\",\n-                \"TKI:000000000000000000000000000000000032\",\n-                \"TKI:000000000000000000000000000000000033\",\n-                \"TKI:000000000000000000000000000000000034\",\n-                \"TKI:000000000000000000000000000000000035\",\n-                \"TKI:000000000000000000000000000000000100\",\n-                \"TKI:000000000000000000000000000000000101\",\n-                \"TKI:000000000000000000000000000000000102\",\n-                \"TKI:000000000000000000000000000000000103\"));\n-    for (String taskId : affectedTasks) {\n-      verifyTaskIsModifiedAfterOrEquals(taskId, before);\n-    }\n-  }\n-\n-  private void verifyTaskIsModifiedAfterOrEquals(String taskId, Instant before)\n-      throws InvalidArgumentException {\n-\n-    ResponseEntity<TaskResource> taskResponse =\n-        template.exchange(\n-            restHelper.toUrl(Mapping.URL_TASKS_ID, taskId),\n-            HttpMethod.GET,\n-            new HttpEntity<>(restHelper.getHeadersAdmin()),", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjAzMg==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802032", "bodyText": "Please reformat", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:54:11Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/ldap/LdapTest.java", "diffHunk": "@@ -1,36 +1,37 @@\n-package pro.taskana.ldap;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjA0OQ==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802049", "bodyText": "Where did these tests go?", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:54:33Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/rest/AccessIdValidationControllerIntTest.java", "diffHunk": "@@ -1,86 +0,0 @@\n-package pro.taskana.rest;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjA1Nw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802057", "bodyText": "Please reformat.", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:54:43Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/rest/ExampleRestApplication.java", "diffHunk": "@@ -1,74 +1,73 @@\n-package pro.taskana.rest;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjA3Mw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802073", "bodyText": "Please reformat", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:55:01Z", "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/TaskanaWildFlyApplication.java", "diffHunk": "@@ -1,122 +1,121 @@\n-package pro.taskana;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjA4OQ==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802089", "bodyText": "Please reformat", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:55:10Z", "path": "rest/taskana-rest-spring-example-wildfly/src/main/java/pro/taskana/wildfly/security/WildflyWebSecurityConfig.java", "diffHunk": "@@ -1,203 +1,203 @@\n-package pro.taskana.wildfly.security;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjE3Ng==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802176", "bodyText": "Please reformat", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:56:27Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/ClassificationController.java", "diffHunk": "@@ -1,324 +1,325 @@\n-package pro.taskana.rest;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjIzOQ==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802239", "bodyText": "Please reformat.", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:57:14Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/RestConfiguration.java", "diffHunk": "@@ -1,77 +1,78 @@\n-package pro.taskana.rest;", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgwMjI3Ng==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r376802276", "bodyText": "This should not have happened. Reformat please :)", "author": "mustaphazorgati", "createdAt": "2020-02-09T17:57:48Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/WorkbasketController.java", "diffHunk": "@@ -82,8 +83,7 @@\n \n   private WorkbasketAccessItemResourceAssembler workbasketAccessItemResourceAssembler;\n \n-  WorkbasketController(", "originalCommit": "a2255627b878cae0214c5b0df259ca9f9536ee6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "487382c7e388bfcae160a6e54026398e6a83df84", "url": "https://github.com/Taskana/taskana/commit/487382c7e388bfcae160a6e54026398e6a83df84", "message": "TSK-1031: removed unnecessary throws statements", "committedDate": "2020-02-11T13:41:40Z", "type": "commit"}, {"oid": "add2992addaccef50058b415a5e4fd757a8f8df0", "url": "https://github.com/Taskana/taskana/commit/add2992addaccef50058b415a5e4fd757a8f8df0", "message": "TSK-1031: update Spring Boot to 2.2.4.RELEASE except Hateoas.", "committedDate": "2020-02-11T13:43:37Z", "type": "commit"}, {"oid": "baf7761f452bbb60dca079cde8169c765bdbe545", "url": "https://github.com/Taskana/taskana/commit/baf7761f452bbb60dca079cde8169c765bdbe545", "message": "TSK-1031: add printing of surefire plugin in case of failure.", "committedDate": "2020-02-11T13:43:37Z", "type": "commit"}, {"oid": "ea872aea0b260c57a7a2d472a8e6e8857052ec94", "url": "https://github.com/Taskana/taskana/commit/ea872aea0b260c57a7a2d472a8e6e8857052ec94", "message": "TSK-1031: required changes to wildfly/arquillian config", "committedDate": "2020-02-11T13:43:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NTU0Mw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377665543", "bodyText": "assertThat(response.getBody().getContent()).hasSize(17)", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:25:34Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -68,15 +76,11 @@ void testGetAllClassificationsKeepingFilters() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(ClassificationSummaryListResource.class));\n-    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-    assertTrue(\n-        response\n-            .getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(\"/api/v1/classifications?domain=DOMAIN_A&sort-by=key&order=asc\"));\n-    assertEquals(17, response.getBody().getContent().size());\n-    assertEquals(\"A12\", response.getBody().getContent().iterator().next().key);\n+    assertThat(response.getBody().getLink(Link.REL_SELF)).isNotNull();\n+    assertThat(response.getBody().getLink(Link.REL_SELF).getHref())\n+        .endsWith(\"/api/v1/classifications?domain=DOMAIN_A&sort-by=key&order=asc\");\n+    assertThat(response.getBody().getContent().size()).isEqualTo(17);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NTk2Nw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377665967", "bodyText": "hasSize()", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:26:13Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -36,7 +39,7 @@ void testQueryGroupsByDn() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertEquals(1, response.getBody().size());\n+    assertThat(response.getBody().size()).isEqualTo(1);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NjEyMQ==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377666121", "bodyText": "hasSize()", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:26:27Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -47,6 +50,42 @@ void testQueryGroupsByCn() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertEquals(1, response.getBody().size());\n+    assertThat(response.getBody().size()).isEqualTo(1);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NjI5NA==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377666294", "bodyText": "hasSize()", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:26:44Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/ldap/LdapTest.java", "diffHunk": "@@ -30,7 +30,7 @@ void testFindUsers() throws InvalidArgumentException {\n     if (ldapClient.useLdap()) {\n       List<AccessIdResource> usersAndGroups = ldapClient.searchUsersAndGroups(\"ser0\");\n       System.out.println(\"#### found \" + LoggerUtils.listToString(usersAndGroups));\n-      assertEquals(50, usersAndGroups.size());\n+      assertThat(usersAndGroups.size()).isEqualTo(50);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NjUyNg==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377666526", "bodyText": "hasSize()", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:27:06Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -47,6 +50,42 @@ void testQueryGroupsByCn() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertEquals(1, response.getBody().size());\n+    assertThat(response.getBody().size()).isEqualTo(1);\n   }\n+\n+  @Test\n+  void testGetMatches() {\n+    ResponseEntity<List<AccessIdResource>> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=ali\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n+\n+    List<AccessIdResource> body = response.getBody();\n+    assertThat(body).isNotNull();\n+    assertThat(body.size()).isEqualTo(3);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NjcwNw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377666707", "bodyText": "hasSize()", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:27:23Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -55,8 +63,8 @@ void testGetAllClassificationsFilterByCustomAttribute() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(ClassificationSummaryListResource.class));\n-    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-    assertEquals(13, response.getBody().getContent().size());\n+    assertThat(response.getBody().getLink(Link.REL_SELF)).isNotNull();\n+    assertThat(response.getBody().getContent().size()).isEqualTo(13);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2Njg2OA==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377666868", "bodyText": "hasSize()", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:27:37Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -88,21 +92,17 @@ void testGetSecondPageSortedByKey() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(ClassificationSummaryListResource.class));\n-    assertEquals(5, response.getBody().getContent().size());\n-    assertEquals(\"L1050\", response.getBody().getContent().iterator().next().key);\n-    assertNotNull(response.getBody().getLink(Link.REL_SELF));\n-    assertTrue(\n-        response\n-            .getBody()\n-            .getLink(Link.REL_SELF)\n-            .getHref()\n-            .endsWith(\n-                \"/api/v1/classifications?\"\n-                    + \"domain=DOMAIN_A&sort-by=key&order=asc&page=2&page-size=5\"));\n-    assertNotNull(response.getBody().getLink(Link.REL_FIRST));\n-    assertNotNull(response.getBody().getLink(Link.REL_LAST));\n-    assertNotNull(response.getBody().getLink(Link.REL_NEXT));\n-    assertNotNull(response.getBody().getLink(Link.REL_PREVIOUS));\n+    assertThat(response.getBody().getContent().size()).isEqualTo(5);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzA0OQ==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377667049", "bodyText": "Pls use extracting method to have a consistent approach with the other tests", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:27:55Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/ClassificationControllerIntTest.java", "diffHunk": "@@ -213,52 +212,46 @@ void testCreateClassificationWithParentKeyInDomain_aShouldCreateAClassificationI\n       }\n     }\n \n-    assertEquals(true, foundClassificationCreated);\n+    assertThat(foundClassificationCreated).isTrue();\n   }\n \n   @Test\n   @DirtiesContext\n-  void testReturn400IfCreateClassificationWithIncompatibleParentIdAndKey() throws IOException {\n+  void testReturn400IfCreateClassificationWithIncompatibleParentIdAndKey() {\n     String newClassification =\n         \"{\\\"classificationId\\\":\\\"\\\",\\\"category\\\":\\\"MANUAL\\\",\\\"domain\\\":\\\"DOMAIN_B\\\",\"\n             + \"\\\"key\\\":\\\"NEW_CLASS_P3\\\",\\\"name\\\":\\\"new classification\\\",\"\n             + \"\\\"type\\\":\\\"TASK\\\",\\\"parentId\\\":\\\"CLI:200000000000000000000000000000000015\\\",\"\n             + \"\\\"parentKey\\\":\\\"T2000\\\"}\";\n-\n-    HttpClientErrorException e =\n-        Assertions.assertThrows(\n-            HttpClientErrorException.class,\n-            () ->\n-                template.exchange(\n-                    restHelper.toUrl(Mapping.URL_CLASSIFICATIONS),\n-                    HttpMethod.POST,\n-                    new HttpEntity<>(newClassification, restHelper.getHeaders()),\n-                    ParameterizedTypeReference.forType(ClassificationResource.class)));\n-\n-    assertNotNull(e);\n-    assertEquals(HttpStatus.BAD_REQUEST, e.getStatusCode());\n+    \n+    assertThatThrownBy(\n+        () ->\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_CLASSIFICATIONS),\n+            HttpMethod.POST,\n+            new HttpEntity<>(newClassification, restHelper.getHeaders()),\n+            ParameterizedTypeReference.forType(ClassificationResource.class)))\n+        .isInstanceOf(HttpClientErrorException.class)\n+        .hasFieldOrPropertyWithValue(\"statusCode\", HttpStatus.BAD_REQUEST);", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3NjMwNw==", "url": "https://github.com/Taskana/taskana/pull/910#discussion_r377676307", "bodyText": "Pls use the assertThatThrownBy-pattern to be consistent with other tests", "author": "gitgoodjhe", "createdAt": "2020-02-11T14:42:15Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/AccessIdControllerIntTest.java", "diffHunk": "@@ -47,6 +50,42 @@ void testQueryGroupsByCn() {\n             HttpMethod.GET,\n             restHelper.defaultRequest(),\n             ParameterizedTypeReference.forType(List.class));\n-    assertEquals(1, response.getBody().size());\n+    assertThat(response.getBody().size()).isEqualTo(1);\n   }\n+\n+  @Test\n+  void testGetMatches() {\n+    ResponseEntity<List<AccessIdResource>> response =\n+        template.exchange(\n+            restHelper.toUrl(Mapping.URL_ACCESSID) + \"?search-for=ali\",\n+            HttpMethod.GET,\n+            restHelper.defaultRequest(),\n+            ParameterizedTypeReference.forType(AccessIdListResource.class));\n+\n+    List<AccessIdResource> body = response.getBody();\n+    assertThat(body).isNotNull();\n+    assertThat(body.size()).isEqualTo(3);\n+    assertThat(body)\n+        .extracting(AccessIdResource::getName)\n+        .containsExactlyInAnyOrder(\"Tralisch, Thea\", \"Bert, Ali\", \"Mente, Ali\");\n+  }\n+\n+  @Test\n+  void testBadRequestWhenSearchForIsTooShort() {\n+    try {\n+      template.exchange(", "originalCommit": "a82b2bae5509a6c1ee09bfe39159b67a6c70e47e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a94219820188f8152312fb8d6da6836733f964d", "url": "https://github.com/Taskana/taskana/commit/3a94219820188f8152312fb8d6da6836733f964d", "message": "TSK-1031: formatting issues fixed.", "committedDate": "2020-02-11T15:26:48Z", "type": "commit"}]}