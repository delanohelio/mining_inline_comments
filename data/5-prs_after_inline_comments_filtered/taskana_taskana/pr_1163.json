{"pr_number": 1163, "pr_title": "TSK-1318: replaced all declared Exceptions with Exception.class in all our test classes", "pr_createdAt": "2020-07-01T22:25:58Z", "pr_url": "https://github.com/Taskana/taskana/pull/1163", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MjI5NQ==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448882295", "bodyText": "Can be simplified to:\nfinal String propertiesFileName = System.getProperty(\"user.home\") + \"/taskanaUnitTest.properties\";\nOr instantiate as final var, and re-use it at line 80.", "author": "nkolytschew", "createdAt": "2020-07-02T09:46:02Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/AbstractAccTest.java", "diffHunk": "@@ -24,33 +23,26 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(AbstractAccTest.class);\n   private static final int POOL_TIME_TO_WAIT = 50;\n-\n+  private static final DataSource DATA_SOURCE;\n   private static SimpleHistoryServiceImpl historyService;\n-\n-  private static DataSource dataSource;\n   private static String schemaName = null;\n \n   static {\n-    String userHomeDirectroy = System.getProperty(\"user.home\");\n-    String propertiesFileName = userHomeDirectroy + \"/taskanaUnitTest.properties\";\n+    String userHomeDirectory = System.getProperty(\"user.home\");", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI4ODQxNA==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449288414", "bodyText": "done", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4MjI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1Njg3NA==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448956874", "bodyText": "Advantage of Junit5 and package-private as default is, that you don't have to write 'public' anymore... you benefit from writing less :-)\nSo with an IDE you can keep the auto-generated \"public\" modifier.\nChanging every public method to \"default\", just increases the LoC to be checked for the PR.\nI would recommend, changing only the modifier of classes/methods you actually have worked on, to keep PR simple :-)", "author": "nkolytschew", "createdAt": "2020-07-02T12:13:24Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/query/QueryHistoryAccTest.java", "diffHunk": "@@ -16,14 +16,14 @@\n import pro.taskana.spi.history.api.events.TaskanaHistoryEvent;\n \n /** Test for History queries. */\n-public class QueryHistoryAccTest extends AbstractAccTest {\n+class QueryHistoryAccTest extends AbstractAccTest {\n \n   public QueryHistoryAccTest() {\n     super();\n   }\n \n   @Test\n-  public void should_ConfirmEquality_When_UsingListValuesAscendingAndDescending() {\n+  void should_ConfirmEquality_When_UsingListValuesAscendingAndDescending() {", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDE2Mg==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449290162", "bodyText": "true. Sonarcloud would otherwise raise an issue and ask us to remove the modifier. In order to reduce round trips for the future I simply removed them everywhere via replace in path", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:18:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1Njg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NzM2Mw==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448977363", "bodyText": "In test-cases it's perfectly fine to use Setter-Injection.\nAlso you don't have to use the autowired annotation explicitly.", "author": "nkolytschew", "createdAt": "2020-07-02T12:50:52Z", "path": "history/taskana-simplehistory-rest-spring/src/test/java/pro/taskana/TaskHistoryEventResourceAssemblerTest.java", "diffHunk": "@@ -20,12 +20,12 @@\n @SpringBootTest(\n     classes = {TaskHistoryRestConfiguration.class},\n     webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n-public class TaskHistoryEventResourceAssemblerTest {\n+class TaskHistoryEventResourceAssemblerTest {\n \n   private final TaskHistoryEventResourceAssembler taskHistoryEventResourceAssembler;\n \n   @Autowired", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDU2OQ==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449290569", "bodyText": "In our Guidelines we agreed on always using the constructor injection.\nregarding the autowired annotation: There's an entry in our cop", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NzM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDI0NA==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448980244", "bodyText": "Boilerplate, IFF not actually used for a HashSet/Map/List or object comparison.", "author": "nkolytschew", "createdAt": "2020-07-02T12:55:27Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/models/MinimalTaskSummary.java", "diffHunk": "@@ -101,6 +102,42 @@ public void setCallbackState(CallbackState callbackState) {\n     this.callbackState = callbackState;\n   }\n \n+  @Override", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MDgwMw==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449290803", "bodyText": "necessary for our PojoTest to detect this class and test getters and setters.", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MTAwMg==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449291002", "bodyText": "Do you have any other idea on how to identify Pojos? See: PojoTest#getPojoClasses()", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxMTY2Ng==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449511666", "bodyText": "Don't fix!", "author": "nkolytschew", "createdAt": "2020-07-03T10:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MjkyMQ==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r448992921", "bodyText": "You can also add the \"final\" modifier here.", "author": "nkolytschew", "createdAt": "2020-07-02T13:15:12Z", "path": "lib/taskana-core/src/test/java/acceptance/AbstractAccTest.java", "diffHunk": "@@ -94,7 +92,7 @@ protected Attachment createAttachment(\n             .asSummary());\n     attachment.setObjectReference(objRef);\n     attachment.setChannel(channel);\n-    Instant receivedTimestamp = null;\n+    Instant receivedTimestamp;", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MTMxOQ==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449291319", "bodyText": "done", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MjkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1Mjk4Mw==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449052983", "bodyText": "Do you want to log test-logs?", "author": "nkolytschew", "createdAt": "2020-07-02T14:42:42Z", "path": "lib/taskana-core/src/test/java/acceptance/report/ProvideTaskStatusReportAccTest.java", "diffHunk": "@@ -35,29 +33,42 @@\n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(ProvideWorkbasketReportAccTest.class);\n \n+  MonitorService monitorService = taskanaEngine.getMonitorService();\n+\n   @BeforeEach\n-  public void reset() throws Exception {\n+  void reset() throws Exception {\n     resetDb();\n   }\n \n   @Test\n-  void testRoleCheck() {\n-    MonitorService monitorService = taskanaEngine.getMonitorService();\n-    ThrowingCallable call =\n-        () -> {\n-          monitorService.createTaskStatusReportBuilder().buildReport();\n-        };\n-    assertThatThrownBy(call).isInstanceOf(NotAuthorizedException.class);\n+  void should_ThrowException_IfUserIsNotAuthorized() {\n+    assertThatThrownBy(() -> monitorService.createTaskStatusReportBuilder().buildReport())\n+        .isInstanceOf(NotAuthorizedException.class);\n+  }\n+\n+  @WithAccessId(user = \"unknown\")\n+  @WithAccessId(user = \"user-1-1\")\n+  @WithAccessId(user = \"businessadmin\")\n+  @WithAccessId(user = \"taskadmin\")\n+  @TestTemplate\n+  void should_ThrowException_IfUserIsNotAdminOrMonitor() {\n+    assertThatThrownBy(() -> monitorService.createTaskStatusReportBuilder().buildReport())\n+        .isInstanceOf(NotAuthorizedException.class);\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @WithAccessId(user = \"monitor\")\n+  @TestTemplate\n+  void should_BuildReport_IfUserIsAdminOrMonitor() {\n+    assertThatCode(() -> monitorService.createTaskStatusReportBuilder().buildReport())\n+        .doesNotThrowAnyException();\n   }\n \n   @WithAccessId(user = \"monitor\")\n   @Test\n-  void testCompleteTaskStatusReport() throws NotAuthorizedException, InvalidArgumentException {\n-    // given\n-    MonitorService monitorService = taskanaEngine.getMonitorService();\n-    // when\n+  void testCompleteTaskStatusReport() throws Exception {\n     TaskStatusReport report = monitorService.createTaskStatusReportBuilder().buildReport();\n-    // then\n+\n     if (LOGGER.isDebugEnabled()) {", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5MjE3NQ==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449292175", "bodyText": "They were there before. Don't ask me :D", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1Mjk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxMTg1OA==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449511858", "bodyText": "Don't fix!", "author": "nkolytschew", "createdAt": "2020-07-03T10:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1Mjk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTY5NA==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449055694", "bodyText": "I think it would be better if you stick to one style... Either\nassertThatThrownBy(() -> TASK_SERVICE.claim(\"TKI:000000000000000000000000000000000035\")).isInstanceOf(InvalidOwnerException.class);\nor\nThrowingCallable call =() -> TASK_SERVICE.forceCancelClaim(\"TKI:000000000000000000000000000000000036\"); assertThatThrownBy(call).isInstanceOf(InvalidStateException.class);", "author": "nkolytschew", "createdAt": "2020-07-02T14:46:42Z", "path": "lib/taskana-core/src/test/java/acceptance/task/CompleteTaskAccTest.java", "diffHunk": "@@ -229,49 +197,35 @@ void testForceClaimTaskFromOtherUser()\n   @WithAccessId(user = \"user-1-1\")\n   @Test\n   void testClaimTaskNotExisting() {\n-    ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.claim(\"NOT_EXISTING\");\n-        };\n-    assertThatThrownBy(call).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(() -> TASK_SERVICE.claim(\"NOT_EXISTING\"))\n+        .isInstanceOf(TaskNotFoundException.class);\n   }\n \n   @WithAccessId(user = \"user-1-2\")\n   @Test\n   void testClaimTaskWithInvalidState() {\n-    ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.forceClaim(\"TKI:000000000000000000000000000000000036\");\n-        };\n-    assertThatThrownBy(call).isInstanceOf(InvalidStateException.class);\n+    assertThatThrownBy(() -> TASK_SERVICE.forceClaim(\"TKI:000000000000000000000000000000000036\"))\n+        .isInstanceOf(InvalidStateException.class);\n   }\n \n   @WithAccessId(user = \"user-1-2\")\n   @Test\n   void testClaimTaskWithInvalidOwner() {\n-    ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.claim(\"TKI:000000000000000000000000000000000035\");\n-        };\n-    assertThatThrownBy(call).isInstanceOf(InvalidOwnerException.class);\n+    assertThatThrownBy(() -> TASK_SERVICE.claim(\"TKI:000000000000000000000000000000000035\"))\n+        .isInstanceOf(InvalidOwnerException.class);\n   }\n \n   @WithAccessId(user = \"user-1-2\")\n   @Test\n   void testCancelClaimForcedWithInvalidState() {\n     ThrowingCallable call =\n-        () -> {\n-          TASK_SERVICE.forceCancelClaim(\"TKI:000000000000000000000000000000000036\");\n-        };\n+        () -> TASK_SERVICE.forceCancelClaim(\"TKI:000000000000000000000000000000000036\");", "originalCommit": "e5da887f190e68e18e34686030eb55204c483dbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5Mjg1MA==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449292850", "bodyText": "The issue here: bottom one can't be formatted correctly. The formatter plugin and checkstyle don't work identical with this special case.", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI5Mjk0OQ==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449292949", "bodyText": "What do you want me to do? Leave this as is or revert the rest to the top version?", "author": "mustaphazorgati", "createdAt": "2020-07-02T22:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUxMjI2Nw==", "url": "https://github.com/Taskana/taskana/pull/1163#discussion_r449512267", "bodyText": "Just a recommendation, to keep a specific type style and not change between :-)\nDon't fix if not necessary!", "author": "nkolytschew", "createdAt": "2020-07-03T10:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NTY5NA=="}], "type": "inlineReview"}, {"oid": "a699758daa2fd31fe408a8b85e880f5af301b886", "url": "https://github.com/Taskana/taskana/commit/a699758daa2fd31fe408a8b85e880f5af301b886", "message": "TSK-1318: replaced all declared Exceptions with Exception.class in all our test classes", "committedDate": "2020-07-02T22:40:16Z", "type": "commit"}]}