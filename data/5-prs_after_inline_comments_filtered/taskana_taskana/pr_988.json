{"pr_number": 988, "pr_title": "Tsk 1160", "pr_createdAt": "2020-03-24T14:33:10Z", "pr_url": "https://github.com/Taskana/taskana/pull/988", "timeline": [{"oid": "6cefb1a7f9612688d2315571fc14b9af5245c751", "url": "https://github.com/Taskana/taskana/commit/6cefb1a7f9612688d2315571fc14b9af5245c751", "message": "TSK-1143C mismatch between forward and backward calculation between planned and due", "committedDate": "2020-03-26T10:10:36Z", "type": "commit"}, {"oid": "47c87cd6ba012fca2c3651e69420d2498aefa88f", "url": "https://github.com/Taskana/taskana/commit/47c87cd6ba012fca2c3651e69420d2498aefa88f", "message": "TSK-1143 UpdateTask with Planned sometimes fails", "committedDate": "2020-03-26T10:10:37Z", "type": "commit"}, {"oid": "9b9335f41566846d89ba5723b8f6735e2a8db341", "url": "https://github.com/Taskana/taskana/commit/9b9335f41566846d89ba5723b8f6735e2a8db341", "message": "TSK-442 improve task refresh on classification update", "committedDate": "2020-03-26T10:10:37Z", "type": "commit"}, {"oid": "900aa2c5821f1a153acbf6b7d7565660a1e34623", "url": "https://github.com/Taskana/taskana/commit/900aa2c5821f1a153acbf6b7d7565660a1e34623", "message": "TSK-1143b - fix error in testcase UpdateObjectsUseUtcTimeStampsAccTest.", "committedDate": "2020-03-26T10:10:37Z", "type": "commit"}, {"oid": "7bfa207d0836a1bb71ba650ae969af708d3853f7", "url": "https://github.com/Taskana/taskana/commit/7bfa207d0836a1bb71ba650ae969af708d3853f7", "message": "TSK-442 improve task refresh on classification update", "committedDate": "2020-03-26T10:10:37Z", "type": "commit"}, {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "url": "https://github.com/Taskana/taskana/commit/bd4c775504f5e3a173976af21226bad2b2f0e02e", "message": "TSK-1160 TaskStates CANCELLED and TERMINATED", "committedDate": "2020-03-26T10:10:38Z", "type": "commit"}, {"oid": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "url": "https://github.com/Taskana/taskana/commit/bd4c775504f5e3a173976af21226bad2b2f0e02e", "message": "TSK-1160 TaskStates CANCELLED and TERMINATED", "committedDate": "2020-03-26T10:10:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MDc3Nw==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398650777", "bodyText": "Cancels a task.\nCancellation means a task is obsolete from a business perspective an does not need to be completed anymore.", "author": "holgerhagen", "createdAt": "2020-03-26T15:12:02Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -490,4 +490,28 @@ TaskComment getTaskComment(String taskCommentId)\n    */\n   BulkOperationResults<String, TaskanaException> setPlannedPropertyOfTasks(\n       Instant planned, List<String> taskIds);\n+\n+  /**\n+   * Cancels a task.", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNTk1Mw==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398715953", "bodyText": "I added the description", "author": "BerndBreier", "createdAt": "2020-03-26T16:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MDc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MjU4Ng==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398652586", "bodyText": "Terminates a task.\nTermination is a administrative action to complete a task. This is typically done by an administration to correct any technical issue.", "author": "holgerhagen", "createdAt": "2020-03-26T15:14:16Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskService.java", "diffHunk": "@@ -490,4 +490,28 @@ TaskComment getTaskComment(String taskCommentId)\n    */\n   BulkOperationResults<String, TaskanaException> setPlannedPropertyOfTasks(\n       Instant planned, List<String> taskIds);\n+\n+  /**\n+   * Cancels a task.\n+   *\n+   * @param taskId the id of the task to cancel.\n+   * @return the updated task.\n+   * @throws TaskNotFoundException if the Task with Id TaskId is not found\n+   * @throws InvalidStateException if the task is not in state READY or CLAIMED\n+   * @throws NotAuthorizedException if the current user is not authorized to see the task\n+   */\n+  Task cancelTask(String taskId)\n+      throws TaskNotFoundException, InvalidStateException, NotAuthorizedException;\n+\n+  /**\n+   * Terminates a task.", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNjA1NA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398716054", "bodyText": "I added the description", "author": "BerndBreier", "createdAt": "2020-03-26T16:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MjU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NDI1Ng==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398654256", "bodyText": "Maybe just \"in\" as it is a well known operator for this? Just an idea.", "author": "holgerhagen", "createdAt": "2020-03-26T15:16:25Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskState.java", "diffHunk": "@@ -4,5 +4,20 @@\n public enum TaskState {\n   READY,\n   CLAIMED,\n-  COMPLETED\n+  COMPLETED,\n+  CANCELLED,\n+  TERMINATED;\n+\n+  public boolean isInStates(TaskState... states) {", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTM3OA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399161378", "bodyText": "You don't like that? Or you has overseen this ons?", "author": "holgerhagen", "createdAt": "2020-03-27T10:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NDI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NzI0Nw==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399287247", "bodyText": "Ok, I didn't see this one. No problem, I'll change it to 'in'", "author": "BerndBreier", "createdAt": "2020-03-27T14:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NDI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NTM4Mg==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398655382", "bodyText": "Why don't we provide the converter on engine level and initialize it during startup according to the configuration?", "author": "holgerhagen", "createdAt": "2020-03-26T15:17:49Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -48,14 +46,9 @@\n     this.taskanaEngine = taskanaEngine;\n     this.taskMapper = taskMapper;\n     this.attachmentMapper = attachmentMapper;\n-    DaysToWorkingDaysConverter.setGermanPublicHolidaysEnabled(\n-        taskanaEngine.getEngine().getConfiguration().isGermanPublicHolidaysEnabled());\n-    try {\n-      converter = DaysToWorkingDaysConverter.initialize();\n-    } catch (InvalidArgumentException e) {\n-      LOGGER.error(ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER);\n-      throw new SystemException(\n-          ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER, e.getCause());\n+    this.converter = WorkingDaysToDaysConverter.initialize();\n+    if (taskanaEngine.getEngine().getConfiguration().isGermanPublicHolidaysEnabled()) {", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NzQ0OA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398747448", "bodyText": "Apart from the DaysToWorkingDaysReportConverter, the converter is only needed in ServiceLevelHandler. I think, we should maintain and supply classes / objects there where they are needed. But if you insist to provide it on engine level, I can do that.\nWith respect to configuration: I introduce the configuration property taskana.german.holidays.enabled and set it to true in taskana.properties. Then I initialize this property in TaskanaEngineConfiguration and use it in the constructor of TaskanaEngineImpl to set that (static) property on WorkingDaysToDaysConverter.", "author": "BerndBreier", "createdAt": "2020-03-26T17:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NTM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NzQ0Nw==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398657447", "bodyText": "We should retain this timestamp even if the task is terminated/cancelled.", "author": "holgerhagen", "createdAt": "2020-03-26T15:20:22Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -951,6 +979,29 @@ private TaskImpl checkConcurrencyAndSetModified(TaskImpl newTaskImpl, TaskImpl o\n     return newTaskImpl;\n   }\n \n+  private TaskImpl terminateCancelCommonActions(String taskId, TaskState targetState)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    if (taskId == null || taskId.isEmpty()) {\n+      throw new TaskNotFoundException(taskId, String.format(TASK_WITH_ID_WAS_NOT_FOUND, taskId));\n+    }\n+    TaskImpl task = (TaskImpl) getTask(taskId);\n+    TaskState state = task.getState();\n+    if (state.isEndState()) {\n+      throw new InvalidStateException(String.format(TASK_WITH_ID_IS_ALREADY_IN_END_STATE, taskId));\n+    }\n+\n+    Instant now = Instant.now();\n+    task.setOwner(null);\n+    task.setModified(now);\n+    task.setCompleted(now);\n+    task.setClaimed(null);", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0ODU5Ng==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398748596", "bodyText": "ok, retained the claimed timestamp", "author": "BerndBreier", "createdAt": "2020-03-26T17:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NzQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1Nzc5Mw==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398657793", "bodyText": "Why this. We don't know if the task has been read, do we?", "author": "holgerhagen", "createdAt": "2020-03-26T15:20:47Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -951,6 +979,29 @@ private TaskImpl checkConcurrencyAndSetModified(TaskImpl newTaskImpl, TaskImpl o\n     return newTaskImpl;\n   }\n \n+  private TaskImpl terminateCancelCommonActions(String taskId, TaskState targetState)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    if (taskId == null || taskId.isEmpty()) {\n+      throw new TaskNotFoundException(taskId, String.format(TASK_WITH_ID_WAS_NOT_FOUND, taskId));\n+    }\n+    TaskImpl task = (TaskImpl) getTask(taskId);\n+    TaskState state = task.getState();\n+    if (state.isEndState()) {\n+      throw new InvalidStateException(String.format(TASK_WITH_ID_IS_ALREADY_IN_END_STATE, taskId));\n+    }\n+\n+    Instant now = Instant.now();\n+    task.setOwner(null);\n+    task.setModified(now);\n+    task.setCompleted(now);\n+    task.setClaimed(null);\n+    task.setRead(true);", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTM3Mw==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398749373", "bodyText": "ok, retained also the read timestamp", "author": "BerndBreier", "createdAt": "2020-03-26T17:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1Nzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MzMyMQ==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398663321", "bodyText": "Maybe we should add an assertion isEqualTo(5) before cancelTask to make it more clear?", "author": "holgerhagen", "createdAt": "2020-03-26T15:27:45Z", "path": "lib/taskana-core/src/test/java/acceptance/task/CancelTaskAccTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class CancelTaskAccTest extends AbstractAccTest {\n+  private TaskService taskService;\n+\n+  CancelTaskAccTest() {\n+    super();\n+    taskService = taskanaEngine.getTaskService();\n+  }\n+\n+  @BeforeEach\n+  public static void setupTest() throws Exception {\n+    resetDb(false);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testQeryCancelledTasks() {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CANCELLED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(5);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCancelReadyTask()\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    List<TaskSummary> taskSummaries = taskService.createTaskQuery().stateIn(TaskState.READY).list();\n+    assertThat(taskSummaries.size()).isEqualTo(47);\n+    Task task = taskService.getTask(taskSummaries.get(0).getId());\n+    taskService.cancelTask(taskSummaries.get(0).getId());\n+    long numTasks = taskService.createTaskQuery().stateIn(TaskState.READY).count();\n+    assertThat(numTasks).isEqualTo(46);\n+    numTasks = taskService.createTaskQuery().stateIn(TaskState.CANCELLED).count();\n+    assertThat(numTasks).isEqualTo(6);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCancelClaimedTask()\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CLAIMED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(19);\n+    Task task = taskService.getTask(taskSummaries.get(0).getId());\n+    taskService.cancelTask(taskSummaries.get(0).getId());\n+    long numTasks = taskService.createTaskQuery().stateIn(TaskState.CLAIMED).count();\n+    assertThat(numTasks).isEqualTo(18);\n+    numTasks = taskService.createTaskQuery().stateIn(TaskState.CANCELLED).count();\n+    assertThat(numTasks).isEqualTo(6);", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NDgzNQ==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398754835", "bodyText": "Done", "author": "BerndBreier", "createdAt": "2020-03-26T17:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MzMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NDU5OA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398664598", "bodyText": "Is it a good idea to do all these tests as admin?", "author": "holgerhagen", "createdAt": "2020-03-26T15:29:16Z", "path": "lib/taskana-core/src/test/java/acceptance/task/CancelTaskAccTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class CancelTaskAccTest extends AbstractAccTest {\n+  private TaskService taskService;\n+\n+  CancelTaskAccTest() {\n+    super();\n+    taskService = taskanaEngine.getTaskService();\n+  }\n+\n+  @BeforeEach\n+  public static void setupTest() throws Exception {\n+    resetDb(false);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testQeryCancelledTasks() {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CANCELLED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(5);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NjMwMQ==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398766301", "bodyText": "Changed it ...", "author": "BerndBreier", "createdAt": "2020-03-26T17:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Njg1NQ==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398666855", "bodyText": "Did we decide that everybody is allowed to cancel a claimed task? I wonder if it would be better to allow only the owner to cancel claimed tasks.", "author": "holgerhagen", "createdAt": "2020-03-26T15:32:00Z", "path": "lib/taskana-core/src/test/java/acceptance/task/CancelTaskAccTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class CancelTaskAccTest extends AbstractAccTest {\n+  private TaskService taskService;\n+\n+  CancelTaskAccTest() {\n+    super();\n+    taskService = taskanaEngine.getTaskService();\n+  }\n+\n+  @BeforeEach\n+  public static void setupTest() throws Exception {\n+    resetDb(false);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"user_1_1\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testQeryCancelledTasks() {\n+    List<TaskSummary> taskSummaries =\n+        taskService.createTaskQuery().stateIn(TaskState.CANCELLED).list();\n+    assertThat(taskSummaries.size()).isEqualTo(5);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",\n+      groupNames = {\"group_1\"})\n+  @Test\n+  void testCancelReadyTask()\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    List<TaskSummary> taskSummaries = taskService.createTaskQuery().stateIn(TaskState.READY).list();\n+    assertThat(taskSummaries.size()).isEqualTo(47);\n+    Task task = taskService.getTask(taskSummaries.get(0).getId());\n+    taskService.cancelTask(taskSummaries.get(0).getId());\n+    long numTasks = taskService.createTaskQuery().stateIn(TaskState.READY).count();\n+    assertThat(numTasks).isEqualTo(46);\n+    numTasks = taskService.createTaskQuery().stateIn(TaskState.CANCELLED).count();\n+    assertThat(numTasks).isEqualTo(6);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"admin\",", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTk5MA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398769990", "bodyText": "The ticket says : \" terminateTask() and cancelTask bay be called by every user that is allowed to see the task \"\nI agree, that it is strange that everybody is allowed to cancel / terminate a task. On the other hand, if you think about the adapter scenario: if a task has been cancelled / terminated in camunda, the adapter should be able to cancel / terminate it in taskana. And this without being the owner. And probably also without having admin authority. So before I change anything with respect to this, we should carefully think about what is the correct solution ....", "author": "BerndBreier", "createdAt": "2020-03-26T17:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Njg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2ODA2Ng==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398668066", "bodyText": "See comments on cancel task test.", "author": "holgerhagen", "createdAt": "2020-03-26T15:33:35Z", "path": "lib/taskana-core/src/test/java/acceptance/task/TerminateTaskAccTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.exceptions.InvalidStateException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.Task;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+/** Acceptance tests for all claim and complete scenarios. */\n+@ExtendWith(JaasExtension.class)\n+class TerminateTaskAccTest extends AbstractAccTest {", "originalCommit": "bd4c775504f5e3a173976af21226bad2b2f0e02e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MjcwMQ==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r398782701", "bodyText": "done", "author": "BerndBreier", "createdAt": "2020-03-26T18:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2ODA2Ng=="}], "type": "inlineReview"}, {"oid": "4c65a6087e83b85e44118a754cf749a23cac5250", "url": "https://github.com/Taskana/taskana/commit/4c65a6087e83b85e44118a754cf749a23cac5250", "message": "TSK-1160 - terminate/cancel task Holger's comments", "committedDate": "2020-03-26T18:22:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTA2NA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399161064", "bodyText": "Why don't we move this to the engine as well?", "author": "holgerhagen", "createdAt": "2020-03-27T10:15:24Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/ServiceLevelHandler.java", "diffHunk": "@@ -48,15 +46,7 @@\n     this.taskanaEngine = taskanaEngine;\n     this.taskMapper = taskMapper;\n     this.attachmentMapper = attachmentMapper;\n-    DaysToWorkingDaysConverter.setGermanPublicHolidaysEnabled(\n-        taskanaEngine.getEngine().getConfiguration().isGermanPublicHolidaysEnabled());\n-    try {\n-      converter = DaysToWorkingDaysConverter.initialize();\n-    } catch (InvalidArgumentException e) {\n-      LOGGER.error(ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER);\n-      throw new SystemException(\n-          ERROR_CANNOT_INITIALIZE_DAYS_TO_WORKING_DAYS_CONVERTER, e.getCause());\n-    }\n+    this.converter = WorkingDaysToDaysConverter.initialize();", "originalCommit": "4c65a6087e83b85e44118a754cf749a23cac5250", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNzYzOA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399307638", "bodyText": "The engine calls only WorkingDaysToDaysConverter.setGermanPublicHolidaysEnabled() which is a static method. The initialize() call is a factory method that creates an instance of WorkingDaysToDaysConverter.\nSince the WorkingDaysToDaysConverter is only needed inside ServiceLevelHandler, I made it an instance variable of this class.\nTo make things consistent, I'll also move the setGermanPublicHolidaysEnabled() call to the ctor of ServiceLevelHandler.", "author": "BerndBreier", "createdAt": "2020-03-27T14:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjAwOA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399162008", "bodyText": "Sorry, haven't seen this one right away. As we don't reset the claimed timestamp, we shouldn't reset the owner as well.", "author": "holgerhagen", "createdAt": "2020-03-27T10:17:10Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -951,6 +979,27 @@ private TaskImpl checkConcurrencyAndSetModified(TaskImpl newTaskImpl, TaskImpl o\n     return newTaskImpl;\n   }\n \n+  private TaskImpl terminateCancelCommonActions(String taskId, TaskState targetState)\n+      throws NotAuthorizedException, TaskNotFoundException, InvalidStateException {\n+    if (taskId == null || taskId.isEmpty()) {\n+      throw new TaskNotFoundException(taskId, String.format(TASK_WITH_ID_WAS_NOT_FOUND, taskId));\n+    }\n+    TaskImpl task = (TaskImpl) getTask(taskId);\n+    TaskState state = task.getState();\n+    if (state.isEndState()) {\n+      throw new InvalidStateException(String.format(TASK_WITH_ID_IS_ALREADY_IN_END_STATE, taskId));\n+    }\n+\n+    Instant now = Instant.now();\n+    task.setOwner(null);", "originalCommit": "4c65a6087e83b85e44118a754cf749a23cac5250", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI5NTQxOA==", "url": "https://github.com/Taskana/taskana/pull/988#discussion_r399295418", "bodyText": "Done", "author": "BerndBreier", "createdAt": "2020-03-27T14:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjAwOA=="}], "type": "inlineReview"}, {"oid": "62d58b32c908be3bf05b5068497e4be5a20002e6", "url": "https://github.com/Taskana/taskana/commit/62d58b32c908be3bf05b5068497e4be5a20002e6", "message": "TSK-1160 - terminate/cancel task more comments from Holger", "committedDate": "2020-03-27T14:36:46Z", "type": "commit"}]}