{"pr_number": 1013, "pr_title": "TSK-1188 Enable combo filter for tasks", "pr_createdAt": "2020-04-14T13:07:11Z", "pr_url": "https://github.com/Taskana/taskana/pull/1013", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NjI2Mw==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410146263", "bodyText": "Better \"WildcardSearchField\"?", "author": "holgerhagen", "createdAt": "2020-04-17T10:51:23Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/WildcardSearchFields.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package pro.taskana.task.api;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+public enum WildcardSearchFields {", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NjQ4Nw==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410146487", "bodyText": "this could potentially be implemented easier?\n(see https://stackoverflow.com/questions/604424/how-to-get-an-enum-value-from-a-string-value-in-java)", "author": "holgerhagen", "createdAt": "2020-04-17T10:51:54Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/WildcardSearchFields.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package pro.taskana.task.api;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+public enum WildcardSearchFields {\n+  NAME(\"NAME\"),\n+  DESCRIPTION(\"DESCRIPTION\"),\n+  CUSTOM_1(\"CUSTOM_1\"),\n+  CUSTOM_2(\"CUSTOM_2\"),\n+  CUSTOM_3(\"CUSTOM_3\"),\n+  CUSTOM_4(\"CUSTOM_4\"),\n+  CUSTOM_5(\"CUSTOM_5\"),\n+  CUSTOM_6(\"CUSTOM_6\"),\n+  CUSTOM_7(\"CUSTOM_7\"),\n+  CUSTOM_8(\"CUSTOM_8\"),\n+  CUSTOM_9(\"CUSTOM_9\"),\n+  CUSTOM_10(\"CUSTOM_10\"),\n+  CUSTOM_11(\"CUSTOM_11\"),\n+  CUSTOM_12(\"CUSTOM_12\"),\n+  CUSTOM_13(\"CUSTOM_13\"),\n+  CUSTOM_14(\"CUSTOM_14\"),\n+  CUSTOM_15(\"CUSTOM_15\"),\n+  CUSTOM_16(\"CUSTOM_16\");\n+\n+  WildcardSearchFields(String name) {\n+    this.name = name;\n+  }\n+\n+  private static final Map<String, WildcardSearchFields> STRING_TO_ENUM =\n+      Arrays.stream(values())\n+          .collect(\n+              Collectors.toMap(\n+                  WildcardSearchFields::toString,\n+                  e -> e,\n+                  (first, second) -> first,\n+                  () -> new TreeMap<>(String.CASE_INSENSITIVE_ORDER)));\n+  private String name;\n+\n+  public static WildcardSearchFields fromString(String name) {", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0Nzk4Ng==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410147986", "bodyText": "Don't we need brackets to group the or conditions?", "author": "holgerhagen", "createdAt": "2020-04-17T10:55:11Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskQueryMapper.java", "diffHunk": "@@ -133,6 +133,7 @@\n           + \"<if test='attachmentReferenceIn != null'>AND a.REF_VALUE IN(<foreach item='item' collection='attachmentReferenceIn' separator=',' >#{item}</foreach>)</if> \"\n           + \"<if test='attachmentReferenceLike != null'>AND (<foreach item='item' collection='attachmentReferenceLike' separator=' OR '>UPPER(a.REF_VALUE) LIKE #{item}</foreach>)</if> \"\n           + \"<if test='attachmentReceivedIn !=null'> AND ( <foreach item='item' collection='attachmentReceivedIn' separator=' OR ' > ( <if test='item.begin!=null'> a.RECEIVED &gt;= #{item.begin} </if> <if test='item.begin!=null and item.end!=null'> AND </if><if test='item.end!=null'> a.RECEIVED &lt;=#{item.end} </if>)</foreach>)</if> \"\n+          + \"<if test='wildcardSearchValueLike != null and wildcardSearchFieldsIn != null'>AND (<foreach item='item' collection='wildcardSearchFieldsIn' separator=' OR '>t.${item} LIKE #{wildcardSearchValueLike}</foreach>)</if> \"", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0OTMyNQ==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410149325", "bodyText": "I was expecting that we always have to specify both, fields and values. What is the sense of this query? Return everything?", "author": "holgerhagen", "createdAt": "2020-04-17T10:58:06Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksByWildcardSearchAccTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.WildcardSearchFields;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+@ExtendWith(JaasExtension.class)\n+public class QueryTasksByWildcardSearchAccTest extends AbstractAccTest {\n+\n+  @WithAccessId(\n+      userName = \"teamlead_1\",\n+      groupNames = {\"group_1\", \"group_2\"})\n+  @Test\n+  void should_ReturnAllTasksByWildcardSearch_For_ProvidedSearchValue() {\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    WildcardSearchFields[] wildcards = {\n+      WildcardSearchFields.CUSTOM_3, WildcardSearchFields.CUSTOM_4, WildcardSearchFields.NAME\n+    };\n+\n+    List<TaskSummary> foundTasks =\n+        taskService\n+            .createTaskQuery()\n+            .wildcardSearchFieldsIn(wildcards)\n+            .wildcardSearchValueLike(\"%99%\")\n+            .orderByName(SortDirection.ASCENDING)\n+            .list();\n+\n+    assertThat(foundTasks).hasSize(4);\n+  }\n+\n+  @WithAccessId(\n+      userName = \"teamlead_1\",\n+      groupNames = {\"group_1\", \"group_2\"})\n+  @Test\n+  void should_ReturnAllTasks_When_ProvidingNoSearchFieldsOrValue() {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    WildcardSearchFields[] wildcards = {\n+      WildcardSearchFields.CUSTOM_3, WildcardSearchFields.CUSTOM_4, WildcardSearchFields.NAME\n+    };\n+\n+    List<TaskSummary> foundTasks =\n+        taskService\n+            .createTaskQuery()\n+            .wildcardSearchFieldsIn(wildcards)", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0OTc0MA==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410149740", "bodyText": "We should also add a test, which combines the wildcard filter with another one (to test the AND / OR structure of the query, see above)", "author": "holgerhagen", "createdAt": "2020-04-17T10:59:04Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTasksByWildcardSearchAccTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package acceptance.task;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.common.api.BaseQuery.SortDirection;\n+import pro.taskana.security.JaasExtension;\n+import pro.taskana.security.WithAccessId;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.WildcardSearchFields;\n+import pro.taskana.task.api.models.TaskSummary;\n+\n+@ExtendWith(JaasExtension.class)\n+public class QueryTasksByWildcardSearchAccTest extends AbstractAccTest {", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MDc0Ng==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410150746", "bodyText": "I think the message would be more understandable if you only point out that both parameters have to be present if used.", "author": "holgerhagen", "createdAt": "2020-04-17T11:01:18Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskController.java", "diffHunk": "@@ -442,6 +468,22 @@ private void checkForIllegalParamCombinations(MultiValueMap<String, String> para\n               + PLANNED_UNTIL\n               + \"\\\"\");\n     }\n+\n+    if (params.containsKey(WILDCARD_SEARCH_FIELDS) && !params.containsKey(WILDCARD_SEARCH_VALUE)\n+        || !params.containsKey(WILDCARD_SEARCH_FIELDS)\n+            && params.containsKey(WILDCARD_SEARCH_VALUE)) {\n+\n+      throw new IllegalArgumentException(\n+          \"It is prohibited to use the params \"", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NDI2Ng==", "url": "https://github.com/Taskana/taskana/pull/1013#discussion_r410154266", "bodyText": "Maybe we should add a hint that both parameters need to be applied in parallel?", "author": "holgerhagen", "createdAt": "2020-04-17T11:09:52Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/api/TaskQuery.java", "diffHunk": "@@ -611,6 +611,23 @@ TaskQuery customAttributeLike(String num, String... searchArguments)\n    */\n   TaskQuery orderByClassificationName(SortDirection sortDirection);\n \n+  /**\n+   * Add your wildcard search value for pattern matching to your query. It will be compared in SQL\n+   * with the LIKE operator. You may use a wildcard like % to specify the pattern.\n+   *\n+   * @param wildcardSearchValue the wildcard search value\n+   * @return the query\n+   */\n+  TaskQuery wildcardSearchValueLike(String wildcardSearchValue);\n+\n+  /**\n+   * Add the values of the wildcard search fields for exact matching to your query.", "originalCommit": "8a47079908a969797b592ea4b6e7855de71eeb4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ece0a9021334d079139502cdbd0b011307a11810", "url": "https://github.com/Taskana/taskana/commit/ece0a9021334d079139502cdbd0b011307a11810", "message": "TSK-1188 Enable combo filter for tasks", "committedDate": "2020-04-20T13:50:48Z", "type": "commit"}, {"oid": "0a6bf7e05954c60739eb0218055f9b392264005e", "url": "https://github.com/Taskana/taskana/commit/0a6bf7e05954c60739eb0218055f9b392264005e", "message": "Comments from Holger Hagen", "committedDate": "2020-04-21T11:53:06Z", "type": "commit"}]}