{"pr_number": 1118, "pr_title": "TSK-1250 On demand deletion of historical data", "pr_createdAt": "2020-06-10T15:42:12Z", "pr_url": "https://github.com/Taskana/taskana/pull/1118", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDU2MA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439744560", "bodyText": "Do this before you open the connection", "author": "mustaphazorgati", "createdAt": "2020-06-13T14:47:41Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImpl.java", "diffHunk": "@@ -54,6 +58,32 @@ public void create(TaskanaHistoryEvent event) {\n     }\n   }\n \n+  @Override\n+  public void deleteHistoryEventsByTaskIds(List<String> taskIds)\n+      throws InvalidArgumentException, NotAuthorizedException {\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"entry to deleteHistoryEventsByTaskIds(taskIds = {})\", taskIds);\n+    }\n+\n+    taskanaHistoryEngine.checkRoleMembership(TaskanaRole.ADMIN);\n+\n+    try {\n+      taskanaHistoryEngine.openConnection();\n+      if (taskIds == null) {\n+        throw new InvalidArgumentException(\"List of taskIds must not be null.\");\n+      }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDU5Nw==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439744597", "bodyText": "Is there a reason why we deviate from our BulkOperation api in taskana-core and thus not return a BulkOperationResults?", "author": "mustaphazorgati", "createdAt": "2020-06-13T14:48:11Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/SimpleHistoryServiceImpl.java", "diffHunk": "@@ -54,6 +58,32 @@ public void create(TaskanaHistoryEvent event) {\n     }\n   }\n \n+  @Override\n+  public void deleteHistoryEventsByTaskIds(List<String> taskIds)", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDc1NQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439744755", "bodyText": "This exists in TaskanaEngineImpl => move to configuration?", "author": "mustaphazorgati", "createdAt": "2020-06-13T14:50:09Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/TaskanaHistoryEngineImpl.java", "diffHunk": "@@ -52,6 +60,38 @@ public TaskanaHistory getTaskanaHistoryService() {\n     return this.taskanaHistoryService;\n   }\n \n+  public boolean isUserInRole(TaskanaRole... roles) {\n+    if (!getConfiguration().isSecurityEnabled()) {\n+      return true;\n+    }\n+\n+    Set<String> rolesMembers =\n+        Arrays.stream(roles)\n+            .map(role -> getConfiguration().getRoleMap().get(role))\n+            .collect(HashSet::new, Set::addAll, Set::addAll);\n+\n+    return CurrentUserContext.getAccessIds().stream()\n+        .anyMatch(rolesMembers::contains);\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDc3MQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439744771", "bodyText": "Is there a reason why we don't extend tha TaskanaEngine? This would resolve the comments below.", "author": "mustaphazorgati", "createdAt": "2020-06-13T14:50:26Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/TaskanaHistoryEngineImpl.java", "diffHunk": "@@ -23,7 +31,7 @@\n public class TaskanaHistoryEngineImpl implements TaskanaHistoryEngine {", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NDgzNA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439744834", "bodyText": "This exists in TaskanaEngineImpl => move to configuration?", "author": "mustaphazorgati", "createdAt": "2020-06-13T14:51:06Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/TaskanaHistoryEngineImpl.java", "diffHunk": "@@ -52,6 +60,38 @@ public TaskanaHistory getTaskanaHistoryService() {\n     return this.taskanaHistoryService;\n   }\n \n+  public boolean isUserInRole(TaskanaRole... roles) {\n+    if (!getConfiguration().isSecurityEnabled()) {\n+      return true;\n+    }\n+\n+    Set<String> rolesMembers =\n+        Arrays.stream(roles)\n+            .map(role -> getConfiguration().getRoleMap().get(role))\n+            .collect(HashSet::new, Set::addAll, Set::addAll);\n+\n+    return CurrentUserContext.getAccessIds().stream()\n+        .anyMatch(rolesMembers::contains);\n+  }\n+\n+  public void checkRoleMembership(TaskanaRole... roles) throws NotAuthorizedException {\n+    if (!isUserInRole(roles)) {\n+      if (LOGGER.isDebugEnabled()) {\n+        LOGGER.debug(\n+            \"Throwing NotAuthorizedException because accessIds {} are not member of roles {}\",\n+            CurrentUserContext.getAccessIds(),\n+            Arrays.toString(roles));\n+      }\n+      throw new NotAuthorizedException(\n+          \"current user is not member of role(s) \" + Arrays.toString(roles),\n+          CurrentUserContext.getUserid());\n+    }\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTM5MA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745390", "bodyText": "generate the id and then manually set it? Why's that?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:00:29Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/AbstractAccTest.java", "diffHunk": "@@ -109,13 +125,17 @@ public static String getSchemaName() {\n    * @return History event object created.\n    */\n   public static HistoryEventImpl createHistoryEvent(\n+      String id,\n       String workbasketKey,\n       String taskId,\n       String type,\n       String previousWorkbasketId,\n       String userid,\n       String details) {\n-    HistoryEventImpl historyEvent = new HistoryEventImpl(userid, details);\n+    HistoryEventImpl historyEvent =\n+        new HistoryEventImpl(\n+            IdGenerator.generateWithPrefix(ID_PREFIX_HISTORY_EVENT), userid, details);\n+    historyEvent.setId(id);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTYxNA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745614", "bodyText": "why do we do this before each test? => initalize fields directly", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:03:09Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnCancelClaimAccTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnCancelClaimAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTY2NQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745665", "bodyText": "initalize fields directly", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:04:17Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnClaimAccTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnClaimAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTc0MQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745741", "bodyText": "initialize field directly", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:05:26Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnCompletionAccTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnCompletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTgwNQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745805", "bodyText": "like the other tests please verify that the task is completed.", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:06:19Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnCompletionAccTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.TaskState;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnCompletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_CreateCompletedHistoryEvent_When_TaskIsCompleted() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000001\";\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+\n+    assertThat(listEvents).hasSize(0);\n+\n+    assertThat(taskService.getTask(taskId).getState()).isEqualTo(TaskState.CLAIMED);\n+    taskService.forceCompleteTask(taskId);\n+", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTgxNQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745815", "bodyText": "Initialize fields directly :)", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:06:33Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCreationAccTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.TaskImpl;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCreationAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTg5NQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745895", "bodyText": "please move to AbstractAccTest", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:07:49Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCreationAccTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.TaskImpl;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCreationAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  protected ObjectReference createObjectRef(\n+      String company, String system, String systemInstance, String type, String value) {\n+    ObjectReference objectRef = new ObjectReference();\n+    objectRef.setCompany(company);\n+    objectRef.setSystem(system);\n+    objectRef.setSystemInstance(systemInstance);\n+    objectRef.setType(type);\n+    objectRef.setValue(value);\n+    return objectRef;\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTk3Ng==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745976", "bodyText": "Why do you have to cast here? Is this the regular usage for the user aswell?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:08:57Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskCreationAccTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.ObjectReference;\n+import pro.taskana.task.internal.models.TaskImpl;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskCreationAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  protected ObjectReference createObjectRef(\n+      String company, String system, String systemInstance, String type, String value) {\n+    ObjectReference objectRef = new ObjectReference();\n+    objectRef.setCompany(company);\n+    objectRef.setSystem(system);\n+    objectRef.setSystemInstance(systemInstance);\n+    objectRef.setType(type);\n+    objectRef.setValue(value);\n+    return objectRef;\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateCreatedHistoryEvent_When_TaskIsCreated() throws Exception {\n+\n+    TaskImpl newTask = (TaskImpl) taskService.newTask(\"WBI:100000000000000000000000000000000006\");\n+    newTask.setClassificationKey(\"T2100\");\n+    ObjectReference objectReference =\n+        createObjectRef(\"COMPANY_A\", \"SYSTEM_A\", \"INSTANCE_A\", \"VNR\", \"1234567\");\n+    newTask.setPrimaryObjRef(objectReference);\n+    taskService.createTask(newTask);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(newTask.getId()));", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NTk5MQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439745991", "bodyText": "Initialize fields directly", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:09:17Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskUpdateAccTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskUpdateAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjAyOQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746029", "bodyText": "should we (in general) specify the asserts a little more?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:10:02Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTaskUpdateAccTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.models.Task;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTaskUpdateAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_CreateUpdatedHistoryEvent_When_TaskIsCreated() throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000000\";\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+\n+    assertThat(listEvents).hasSize(2);\n+\n+    Task task = taskService.getTask(taskId);\n+    task.setName(\"someUpdatedName\");\n+    taskService.updateTask(task);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+\n+    assertThat(listEvents).hasSize(3);\n+    assertThat(listEvents.get(2).getEventType()).isEqualTo(\"TASK_UPDATED\");\n+\n+    assertThat(historyService.getHistoryEvent(listEvents.get(2).getId()).getDetails())\n+        .contains(\"someUpdatedName\");", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjA0Ng==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746046", "bodyText": "Initialize fields directly", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:10:19Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/CreateHistoryEventOnTransferAccTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+\n+@ExtendWith(JaasExtension.class)\n+class CreateHistoryEventOnTransferAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjEyMg==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746122", "bodyText": "Initialize fields directly", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:11:13Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjIxNQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746215", "bodyText": "why are you testing that delete works?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:12:24Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskid = \"TKI:000000000000000000000000000000000036\";\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskid);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskid);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjMwMA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746300", "bodyText": "why are you testing that the task got deleted?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:13:41Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskid = \"TKI:000000000000000000000000000000000036\";\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskid);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskid);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000037\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000038\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(3);\n+\n+    taskService.deleteTasks(Arrays.asList(taskId_1, taskId_2));\n+\n+    // make sure the tasks got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId_1);\n+        };\n+    ThrowingCallable getDeletedTaskCall2 =\n+        () -> {\n+          taskService.getTask(taskId_2);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(getDeletedTaskCall2).isInstanceOf(TaskNotFoundException.class);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjM3OQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746379", "bodyText": "why are you doing this here? this belongs to should_deleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionEnabled and should be disabled after that test (in order to not make the tests dependent from each other)", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:15:06Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskid = \"TKI:000000000000000000000000000000000036\";\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskid);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskid);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000037\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000038\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(3);\n+\n+    taskService.deleteTasks(Arrays.asList(taskId_1, taskId_2));\n+\n+    // make sure the tasks got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId_1);\n+        };\n+    ThrowingCallable getDeletedTaskCall2 =\n+        () -> {\n+          taskService.getTask(taskId_2);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(getDeletedTaskCall2).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_notDeleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionDisabled()\n+      throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000039\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(false);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjM5OQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746399", "bodyText": "why are you testing that delete works?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:15:19Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskid = \"TKI:000000000000000000000000000000000036\";\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskid);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskid);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000037\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000038\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(3);\n+\n+    taskService.deleteTasks(Arrays.asList(taskId_1, taskId_2));\n+\n+    // make sure the tasks got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId_1);\n+        };\n+    ThrowingCallable getDeletedTaskCall2 =\n+        () -> {\n+          taskService.getTask(taskId_2);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(getDeletedTaskCall2).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_notDeleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionDisabled()\n+      throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000039\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(false);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskId);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjQxMg==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746412", "bodyText": "remove this.", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:15:34Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskid = \"TKI:000000000000000000000000000000000036\";\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskid);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskid);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000037\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000038\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(3);\n+\n+    taskService.deleteTasks(Arrays.asList(taskId_1, taskId_2));\n+\n+    // make sure the tasks got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId_1);\n+        };\n+    ThrowingCallable getDeletedTaskCall2 =\n+        () -> {\n+          taskService.getTask(taskId_2);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(getDeletedTaskCall2).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_notDeleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionDisabled()\n+      throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000039\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(false);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskId);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+    assertThat(listEvents).hasSize(2);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_notDeleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionDisabled()\n+      throws Exception {\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000040\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000068\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(false);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NjQ1Mw==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439746453", "bodyText": "why are you testing that the deletion works?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:16:03Z", "path": "history/taskana-simplehistory-provider/src/test/java/acceptance/events/DeleteHistoryEventsOnTaskDeletionAccTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package acceptance.events;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import acceptance.AbstractAccTest;\n+import acceptance.security.JaasExtension;\n+import acceptance.security.WithAccessId;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import pro.taskana.simplehistory.impl.HistoryEventImpl;\n+import pro.taskana.simplehistory.impl.HistoryQueryImpl;\n+import pro.taskana.simplehistory.impl.SimpleHistoryServiceImpl;\n+import pro.taskana.simplehistory.impl.mappings.HistoryQueryMapper;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+\n+@ExtendWith(JaasExtension.class)\n+class DeleteHistoryEventsOnTaskDeletionAccTest extends AbstractAccTest {\n+\n+  private TaskService taskService;\n+  private SimpleHistoryServiceImpl historyService;\n+\n+  @BeforeEach\n+  public void setUp() {\n+\n+    taskService = taskanaEngine.getTaskService();\n+    historyService = getHistoryService();\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskid = \"TKI:000000000000000000000000000000000036\";\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskid);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskid);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskid));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_deleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionEnabled()\n+      throws Exception {\n+\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000037\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000038\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(true);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(3);\n+\n+    taskService.deleteTasks(Arrays.asList(taskId_1, taskId_2));\n+\n+    // make sure the tasks got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId_1);\n+        };\n+    ThrowingCallable getDeletedTaskCall2 =\n+        () -> {\n+          taskService.getTask(taskId_2);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(getDeletedTaskCall2).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(0);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_notDeleteHistoryEvents_When_TaskIsDeleted_With_HistoryDeletionDisabled()\n+      throws Exception {\n+\n+    final String taskId = \"TKI:000000000000000000000000000000000039\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(false);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTask(taskId);\n+\n+    // make sure the task got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+\n+    listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId));\n+    assertThat(listEvents).hasSize(2);\n+  }\n+\n+  @Test\n+  @WithAccessId(user = \"admin\")\n+  void should_notDeleteHistoryEvents_When_TasksAreDeleted_With_HistoryDeletionDisabled()\n+      throws Exception {\n+    final String taskId_1 = \"TKI:000000000000000000000000000000000040\";\n+    final String taskId_2 = \"TKI:000000000000000000000000000000000068\";\n+\n+    taskanaEngineConfiguration.setDeleteHistoryOnTaskDeletionEnabled(false);\n+\n+    HistoryQueryMapper historyQueryMapper = getHistoryQueryMapper();\n+\n+    List<HistoryEventImpl> listEvents =\n+        historyQueryMapper.queryHistoryEvent(\n+            (HistoryQueryImpl) historyService.createHistoryQuery().taskIdIn(taskId_1, taskId_2));\n+    assertThat(listEvents).hasSize(2);\n+\n+    taskService.deleteTasks(Arrays.asList(taskId_1, taskId_2));\n+\n+    // make sure the tasks got deleted\n+    ThrowingCallable getDeletedTaskCall =\n+        () -> {\n+          taskService.getTask(taskId_1);\n+        };\n+    ThrowingCallable getDeletedTaskCall2 =\n+        () -> {\n+          taskService.getTask(taskId_2);\n+        };\n+\n+    assertThatThrownBy(getDeletedTaskCall).isInstanceOf(TaskNotFoundException.class);\n+    assertThatThrownBy(getDeletedTaskCall2).isInstanceOf(TaskNotFoundException.class);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzUwNA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439747504", "bodyText": "I like this method a lot :)\nThanks for this!", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:34:26Z", "path": "lib/taskana-core/src/main/java/pro/taskana/TaskanaEngineConfiguration.java", "diffHunk": "@@ -362,24 +374,21 @@ public static boolean shouldUseLowerCaseForAccessIds() {\n     return true;\n   }\n \n-  private void initGermanHolidaysEnabled(Properties props) {\n-    String enabled = props.getProperty(TASKANA_GERMAN_HOLIDAYS_ENABLED);\n+  private void initBooleanFlag(Properties props, String propName) {\n+    String enabled = props.getProperty(propName);\n     if (enabled != null && !enabled.isEmpty()) {\n-      germanPublicHolidaysEnabled = Boolean.parseBoolean(enabled);\n-    } else {\n-      germanPublicHolidaysEnabled = false;\n+      boolean isEnabled = Boolean.parseBoolean(enabled);\n+      if (propName.equals(TASKANA_GERMAN_HOLIDAYS_ENABLED)) {\n+        germanPublicHolidaysEnabled = isEnabled;\n+      } else if (propName.equals(TASKANA_GERMAN_HOLIDAYS_CORPUS_CHRISTI_ENABLED)) {\n+        corpusChristiEnabled = isEnabled;\n+      } else if (propName.equals(TASKANA_HISTORY_DELETION_ON_TASK_DELETION_ENABLED)) {\n+        deleteHistoryOnTaskDeletionEnabled = isEnabled;\n+      }\n     }\n-    LOGGER.debug(\"GermanPublicHolidaysEnabled = {}\", germanPublicHolidaysEnabled);\n-  }\n-\n-  private void initCorpusChristiEnabled(Properties props) {\n-    String enabled = props.getProperty(TASKANA_GERMAN_HOLIDAYS_CORPUS_CHRISTI_ENABLED);\n-    if (enabled != null && !enabled.isEmpty()) {\n-      corpusChristiEnabled = Boolean.parseBoolean(enabled);\n-    } else {\n-      corpusChristiEnabled = false;\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(String.format(\"%s = %b\", propName, Boolean.parseBoolean(enabled)));\n     }\n-    LOGGER.debug(\"CorpusChristiEnabled = {}\", corpusChristiEnabled);\n   }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzcwMw==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439747703", "bodyText": "should't we throw this error?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:36:36Z", "path": "lib/taskana-core/src/main/java/pro/taskana/spi/history/internal/HistoryEventManager.java", "diffHunk": "@@ -45,4 +50,15 @@ public void createEvent(TaskanaHistoryEvent event) {\n     LOGGER.debug(\"Sending event to history service providers: {}\", event);\n     serviceLoader.forEach(historyProvider -> historyProvider.create(event));\n   }\n+\n+  public void deleteEvents(List<String> taskIds) {\n+    LOGGER.debug(\"Sending taskIds to history service providers: {}\", taskIds);\n+    serviceLoader.forEach(historyProvider -> {\n+      try {\n+        historyProvider.deleteHistoryEventsByTaskIds(taskIds);\n+      } catch (InvalidArgumentException | NotAuthorizedException e) {\n+        LOGGER.warn(\"Caught an exception while trying to delete HistoryEvents\", e);\n+      }", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0Nzc4MA==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439747780", "bodyText": "Collections.singletonList() ;)", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:37:50Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskServiceImpl.java", "diffHunk": "@@ -1328,7 +1358,14 @@ private void deleteTask(String taskId, boolean forceDelete)\n         throw new InvalidStateException(String.format(TASK_WITH_ID_CALLBACK_NOT_PROCESSED, taskId));\n       }\n \n+      attachmentMapper.deleteMultipleByTaskIds(Arrays.asList(taskId));\n       taskMapper.delete(taskId);\n+\n+      if (taskanaEngine.getEngine().isHistoryEnabled()\n+          && taskanaEngine.getEngine().getConfiguration().isDeleteHistoryOnTaskDeletionEnabled()) {\n+        historyEventManager.deleteEvents(Arrays.asList(taskId));", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0NzkzMQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439747931", "bodyText": "please open and close the connection.", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:40:26Z", "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskAccTest.java", "diffHunk": "@@ -43,6 +47,54 @@ void testDeleteSingleTaskNotAuthorized() {\n     assertThatThrownBy(call).isInstanceOf(NotAuthorizedException.class);\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_deleteAttachments_When_MultipleTasksAreDeleted()\n+      throws NotAuthorizedException, InvalidArgumentException, NoSuchFieldException,\n+                 IllegalAccessException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    TaskanaEngineProxyForTest engineProxy = new TaskanaEngineProxyForTest(taskanaEngine);\n+    AttachmentMapper attachmentMapper =\n+        engineProxy.getEngine().getSqlSession().getMapper(AttachmentMapper.class);\n+\n+    assertThat(attachmentMapper.findAttachmentSummariesByTaskIds(Arrays.asList(\n+        \"TKI:000000000000000000000000000000000067\", \"TKI:000000000000000000000000000000000068\")))\n+        .hasSize(4);\n+\n+    taskService.deleteTasks(Arrays.asList(\"TKI:000000000000000000000000000000000067\",\n+        \"TKI:000000000000000000000000000000000068\"));\n+\n+    assertThat(attachmentMapper.findAttachmentSummariesByTaskIds(Arrays.asList(\n+        \"TKI:000000000000000000000000000000000067\", \"TKI:000000000000000000000000000000000068\")))\n+        .hasSize(0);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0Nzk1NQ==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439747955", "bodyText": "please open and close the connection.", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:40:53Z", "path": "lib/taskana-core/src/test/java/acceptance/task/DeleteTaskAccTest.java", "diffHunk": "@@ -43,6 +47,54 @@ void testDeleteSingleTaskNotAuthorized() {\n     assertThatThrownBy(call).isInstanceOf(NotAuthorizedException.class);\n   }\n \n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_deleteAttachments_When_MultipleTasksAreDeleted()\n+      throws NotAuthorizedException, InvalidArgumentException, NoSuchFieldException,\n+                 IllegalAccessException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    TaskanaEngineProxyForTest engineProxy = new TaskanaEngineProxyForTest(taskanaEngine);\n+    AttachmentMapper attachmentMapper =\n+        engineProxy.getEngine().getSqlSession().getMapper(AttachmentMapper.class);\n+\n+    assertThat(attachmentMapper.findAttachmentSummariesByTaskIds(Arrays.asList(\n+        \"TKI:000000000000000000000000000000000067\", \"TKI:000000000000000000000000000000000068\")))\n+        .hasSize(4);\n+\n+    taskService.deleteTasks(Arrays.asList(\"TKI:000000000000000000000000000000000067\",\n+        \"TKI:000000000000000000000000000000000068\"));\n+\n+    assertThat(attachmentMapper.findAttachmentSummariesByTaskIds(Arrays.asList(\n+        \"TKI:000000000000000000000000000000000067\", \"TKI:000000000000000000000000000000000068\")))\n+        .hasSize(0);\n+\n+  }\n+\n+  @WithAccessId(user = \"admin\")\n+  @Test\n+  void should_deleteAttachments_When_SingleTaskIsDeleted()\n+      throws NotAuthorizedException, NoSuchFieldException,\n+                 IllegalAccessException, InvalidStateException, TaskNotFoundException {\n+\n+    TaskService taskService = taskanaEngine.getTaskService();\n+\n+    TaskanaEngineProxyForTest engineProxy = new TaskanaEngineProxyForTest(taskanaEngine);\n+    AttachmentMapper attachmentMapper =\n+        engineProxy.getSqlSession().getMapper(AttachmentMapper.class);\n+\n+    assertThat(attachmentMapper.findAttachmentsByTaskId(\"TKI:000000000000000000000000000000000069\"))\n+        .hasSize(1);\n+\n+    taskService.deleteTask(\n+        \"TKI:000000000000000000000000000000000069\");\n+\n+    assertThat(attachmentMapper.findAttachmentsByTaskId(\"TKI:000000000000000000000000000000000069\"))\n+        .hasSize(0);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODY5Mw==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439748693", "bodyText": "@gitgoodjhe: for some reason the ordering changed (and is somehow different running the tests on travis compared to my local machine.. This is a really weird behaviour, but ignoring the order of elements works \ud83d\udc4d )", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:50:50Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTaskWithAttachmentAccTest.java", "diffHunk": "@@ -84,8 +84,7 @@ void should_ConfirmIfAttachmentSummariesAreCorrect_When_UsingTaskQueryAndGetTask\n             .collect(Collectors.toList());\n \n     assertThat(queryAttachmentSummaries)\n-        .hasSize(originalAttachments.size())\n-        .containsExactlyElementsOf(originalAttachments) // same values\n+        .containsExactlyInAnyOrderElementsOf(originalAttachments) // same values", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODg3Mg==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439748872", "bodyText": "we are not using the CollectionModel. Please use the TaskanaPaginModel.", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:53:18Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java", "diffHunk": "@@ -132,6 +138,41 @@\n     return response;\n   }\n \n+  @DeleteMapping(path = Mapping.URL_TASKS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<CollectionModel<TaskSummaryRepresentationModel>> deleteTasks(\n+      @RequestParam MultiValueMap<String, String> params)\n+      throws InvalidArgumentException, NotAuthorizedException {\n+\n+    LOGGER.debug(\"Entry to deleteTasks(params= {})\", params);\n+\n+    TaskQuery query = taskService.createTaskQuery();\n+    query = applyFilterParams(query, params);\n+    validateNoInvalidParameterIsLeft(params);\n+\n+    List<TaskSummary> taskSummaries = getQueryList(query, null);\n+\n+    List<String> taskIdsToDelete =\n+        taskSummaries.stream().map(TaskSummary::getId).collect(Collectors.toList());\n+\n+    BulkOperationResults<String, TaskanaException> result =\n+        taskService.deleteTasks(taskIdsToDelete);\n+\n+    List<TaskSummary> successfullyDeletedTaskSummaries =\n+        taskSummaries.stream()\n+            .filter(summary -> !result.getFailedIds().contains(summary.getId()))\n+            .collect(Collectors.toList());\n+\n+    ResponseEntity<CollectionModel<TaskSummaryRepresentationModel>> response =\n+        ResponseEntity.ok(\n+            taskSummaryRepresentationModelAssembler.toCollectionModel(\n+                successfullyDeletedTaskSummaries));\n+\n+    LOGGER.debug(\"Exit from deleteTasks(), returning {}\", response);", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0ODk1Ng==", "url": "https://github.com/Taskana/taskana/pull/1118#discussion_r439748956", "bodyText": "Is this documented?", "author": "mustaphazorgati", "createdAt": "2020-06-13T15:54:50Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/TaskController.java", "diffHunk": "@@ -132,6 +138,41 @@\n     return response;\n   }\n \n+  @DeleteMapping(path = Mapping.URL_TASKS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<CollectionModel<TaskSummaryRepresentationModel>> deleteTasks(", "originalCommit": "c60d23b03bef2ed18d6854a69ea315a34a6e0981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f6954f88e41cefaf731a0bf5b7d37b1b54f0c3f", "url": "https://github.com/Taskana/taskana/commit/1f6954f88e41cefaf731a0bf5b7d37b1b54f0c3f", "message": "TSK-1250 On demand deletion of historical data", "committedDate": "2020-07-08T10:20:51Z", "type": "commit"}, {"oid": "23f2250aaf0a8b193eda4a158e93631884b6eb37", "url": "https://github.com/Taskana/taskana/commit/23f2250aaf0a8b193eda4a158e93631884b6eb37", "message": "Review findings", "committedDate": "2020-07-08T12:09:20Z", "type": "commit"}]}