{"pr_number": 989, "pr_title": "Task/tsk 1168", "pr_createdAt": "2020-03-24T17:03:59Z", "pr_url": "https://github.com/Taskana/taskana/pull/989", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNzY5OA==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397637698", "bodyText": "please make this constructor private. The code segment which is using the constructor should use the new clone method instead.", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:46:34Z", "path": "lib/taskana-core/src/main/java/pro/taskana/classification/internal/models/ClassificationImpl.java", "diffHunk": "@@ -16,30 +16,12 @@\n \n   public ClassificationImpl() {}\n \n-  public ClassificationImpl(ClassificationImpl classification) {\n-    this.id = classification.getId();\n-    this.key = classification.getKey();\n-    this.parentId = classification.getParentId();\n-    this.parentKey = classification.getParentKey();\n-    this.category = classification.getCategory();\n-    this.type = classification.getType();\n-    this.domain = classification.getDomain();\n-    this.isValidInDomain = classification.getIsValidInDomain();\n-    this.created = classification.getCreated();\n-    this.modified = classification.getModified();\n-    this.name = classification.getName();\n-    this.description = classification.getDescription();\n-    this.priority = classification.getPriority();\n-    this.serviceLevel = classification.getServiceLevel();\n-    this.applicationEntryPoint = classification.getApplicationEntryPoint();\n-    this.custom1 = classification.getCustom1();\n-    this.custom2 = classification.getCustom2();\n-    this.custom3 = classification.getCustom3();\n-    this.custom4 = classification.getCustom4();\n-    this.custom5 = classification.getCustom5();\n-    this.custom6 = classification.getCustom6();\n-    this.custom7 = classification.getCustom7();\n-    this.custom8 = classification.getCustom8();\n+  public ClassificationImpl(ClassificationImpl copyFrom) {", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDA1Mg==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640052", "bodyText": "our convention is Test. Here it would be ClassificationTest", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:54:03Z", "path": "lib/taskana-core/src/test/java/pro/taskana/classification/api/models/ClassificationApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package pro.taskana.classification.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.classification.internal.models.ClassificationImpl;\n+\n+class ClassificationApiModelsCloneTest {", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDI2Mw==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640263", "bodyText": "TaskTest", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:54:44Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskApiModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskApiModelsCloneTest {", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDQ3NA==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640474", "bodyText": "I need a second opinion on this test structure :)", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:55:30Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskApiModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskApiModelsCloneTest {\n+\n+  @Test\n+  void testCloneInTaskSummary() {\n+    Task dummyTaskForSummaryTest =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    TaskSummary dummyTaskSummary = dummyTaskForSummaryTest.asSummary();\n+    TaskSummary dummyTaskSummaryCloned = dummyTaskSummary.clone();\n+    assertThat(dummyTaskSummaryCloned).isEqualTo(dummyTaskSummary);\n+  }\n+\n+  @Test\n+  void testCloneInTask() {\n+    Task dummyTask =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    Task dummyTaskCloned = dummyTask.clone();\n+    assertThat(dummyTaskCloned).isEqualTo(dummyTask);\n+  }\n+\n+  @Test\n+  void testCloneInTaskComment() {\n+    TaskComment dummyComment = new TaskCommentImpl();\n+    dummyComment.setTextField(\"dummyTextField\");\n+    TaskComment dummyCommentCloned = dummyComment.clone();\n+    assertThat(dummyCommentCloned).isEqualTo(dummyComment);\n+  }\n+\n+  @Test\n+  void testCloneInObjectReference() {\n+    ObjectReference dummyReference = new ObjectReference();\n+    dummyReference.setId(\"dummyId\");\n+    dummyReference.setSystem(\"dummySystem\");\n+    dummyReference.setCompany(\"dummyCompany\");\n+    dummyReference.setSystemInstance(\"dummySystemInstance\");\n+    dummyReference.setType(\"dummyType\");\n+    dummyReference.setValue(\"dummyValue\");\n+    ObjectReference dummyReferenceCloned = dummyReference.clone();\n+    assertThat(dummyReferenceCloned).isEqualTo(dummyReference);\n+    assertThat(dummyReferenceCloned != dummyReference);\n+  }\n+\n+  @Test\n+  void testCloneInAttachmentSummary() {\n+    Attachment dummyAttachmentForSummaryTest =\n+        CreateTaskApiModelHelper.createAttachment(\"dummyAttachmentId\", \"dummyTaskId\");\n+    AttachmentSummary dummyAttachmentSummary = dummyAttachmentForSummaryTest.asSummary();\n+    AttachmentSummary dummyAttachmentSummaryCloned = dummyAttachmentSummary.clone();\n+    assertThat(dummyAttachmentSummaryCloned).isEqualTo(dummyAttachmentSummary);\n+    assertThat(dummyAttachmentSummaryCloned != dummyAttachmentSummary);\n+  }\n+\n+  @Test\n+  void testCloneInAttachment() {\n+    Attachment dummyAttachment =\n+        CreateTaskApiModelHelper.createAttachment(\"dummyAttachmentId\", \"dummyTaskId\");\n+    Attachment dummyAttachmentCloned = dummyAttachment.clone();\n+    assertThat(dummyAttachmentCloned).isEqualTo(dummyAttachment);\n+    assertThat(dummyAttachmentCloned != dummyAttachment);\n+  }\n+}", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MDg3Mg==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397640872", "bodyText": "Is there a reason you removed the annotation?", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:56:45Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskAttachmentTest.java", "diffHunk": "@@ -28,13 +26,13 @@\n @ExtendWith(MockitoExtension.class)\n class TaskAttachmentTest {\n \n-  @InjectMocks private TaskImpl cut;\n+  private TaskImpl cut = new TaskImpl();", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MDE4NQ==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397650185", "bodyText": "please also remove this.", "author": "mustaphazorgati", "createdAt": "2020-03-25T07:24:41Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/internal/TaskAttachmentTest.java", "diffHunk": "@@ -28,13 +26,13 @@\n @ExtendWith(MockitoExtension.class)", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MzQxMg==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397683412", "bodyText": "assertThat(dummyREferenceCloned).isNotSameAs(dummyRefernce);", "author": "mustaphazorgati", "createdAt": "2020-03-25T08:38:12Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskApiModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+class TaskApiModelsCloneTest {\n+\n+  @Test\n+  void testCloneInTaskSummary() {\n+    Task dummyTaskForSummaryTest =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    TaskSummary dummyTaskSummary = dummyTaskForSummaryTest.asSummary();\n+    TaskSummary dummyTaskSummaryCloned = dummyTaskSummary.clone();\n+    assertThat(dummyTaskSummaryCloned).isEqualTo(dummyTaskSummary);\n+  }\n+\n+  @Test\n+  void testCloneInTask() {\n+    Task dummyTask =\n+        CreateTaskApiModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskApiModelHelper.createDummyClassification());\n+    Task dummyTaskCloned = dummyTask.clone();\n+    assertThat(dummyTaskCloned).isEqualTo(dummyTask);\n+  }\n+\n+  @Test\n+  void testCloneInTaskComment() {\n+    TaskComment dummyComment = new TaskCommentImpl();\n+    dummyComment.setTextField(\"dummyTextField\");\n+    TaskComment dummyCommentCloned = dummyComment.clone();\n+    assertThat(dummyCommentCloned).isEqualTo(dummyComment);\n+  }\n+\n+  @Test\n+  void testCloneInObjectReference() {\n+    ObjectReference dummyReference = new ObjectReference();\n+    dummyReference.setId(\"dummyId\");\n+    dummyReference.setSystem(\"dummySystem\");\n+    dummyReference.setCompany(\"dummyCompany\");\n+    dummyReference.setSystemInstance(\"dummySystemInstance\");\n+    dummyReference.setType(\"dummyType\");\n+    dummyReference.setValue(\"dummyValue\");\n+    ObjectReference dummyReferenceCloned = dummyReference.clone();\n+    assertThat(dummyReferenceCloned).isEqualTo(dummyReference);\n+    assertThat(dummyReferenceCloned != dummyReference);", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NDMxOA==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r397684318", "bodyText": "Please remove Api", "author": "mustaphazorgati", "createdAt": "2020-03-25T08:39:50Z", "path": "lib/taskana-core/src/test/java/pro/taskana/workbasket/api/models/WorkbasketApiModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package pro.taskana.workbasket.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.workbasket.internal.models.WorkbasketAccessItemImpl;\n+import pro.taskana.workbasket.internal.models.WorkbasketImpl;\n+\n+class WorkbasketApiModelsCloneTest {", "originalCommit": "c716535a8074c36c4afb8b5569f2258a620340ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9edff90f4253471d6e69b0ba17bd805cb33c2eb", "url": "https://github.com/Taskana/taskana/commit/b9edff90f4253471d6e69b0ba17bd805cb33c2eb", "message": "TSK-1168: Fullfilled additional requirements of the review", "committedDate": "2020-03-26T09:56:31Z", "type": "forcePushed"}, {"oid": "ea1708a0281357ada21ef793d99cab9e95da6ccb", "url": "https://github.com/Taskana/taskana/commit/ea1708a0281357ada21ef793d99cab9e95da6ccb", "message": "TSK-1168: Fullfilled additional requirements of the review", "committedDate": "2020-03-26T10:14:03Z", "type": "forcePushed"}, {"oid": "696ed37e21361318666cfa2a2734c7c3eb475988", "url": "https://github.com/Taskana/taskana/commit/696ed37e21361318666cfa2a2734c7c3eb475988", "message": "TSK-1168: A copy method now makes all entities clonable and added tests to confirm this", "committedDate": "2020-03-26T13:45:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwNzc2Ng==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r398607766", "bodyText": "Please remove this //Compliant //Compliant", "author": "gitgoodjhe", "createdAt": "2020-03-26T14:17:49Z", "path": "lib/taskana-core/src/main/java/pro/taskana/workbasket/internal/models/WorkbasketSummaryImpl.java", "diffHunk": "@@ -231,6 +250,11 @@ public void setMarkedForDeletion(boolean markedForDeletion) {\n     this.markedForDeletion = markedForDeletion;\n   }\n \n+  @Override\n+  public WorkbasketSummaryImpl copy() { // Compliant// Compliant", "originalCommit": "696ed37e21361318666cfa2a2734c7c3eb475988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwODgwNw==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r398608807", "bodyText": "Please change this back to dummyComment.clone()", "author": "gitgoodjhe", "createdAt": "2020-03-26T14:19:07Z", "path": "lib/taskana-core/src/test/java/pro/taskana/task/api/models/TaskModelsCloneTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package pro.taskana.task.api.models;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.jupiter.api.Test;\n+\n+import pro.taskana.task.internal.CreateTaskModelHelper;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+import pro.taskana.task.internal.models.TaskSummaryImpl;\n+\n+class TaskModelsCloneTest {\n+\n+  @Test\n+  void testCloneInTaskSummary() {\n+    TaskSummaryImpl dummyTaskSummary = new TaskSummaryImpl();\n+\n+    Attachment dummyAttachmentForSummaryTestPreClone =\n+        CreateTaskModelHelper.createAttachment(\"uniqueIdForDeepTest\", \"uniqueTaskIdForDeepTest\");\n+    AttachmentSummary dummyAttachmentSummary = dummyAttachmentForSummaryTestPreClone.asSummary();\n+    ArrayList<AttachmentSummary> attachmentSummaries = new ArrayList<>();\n+    attachmentSummaries.add(dummyAttachmentSummary);\n+    dummyTaskSummary.setAttachmentSummaries(attachmentSummaries);\n+\n+    TaskSummary dummyTaskSummaryCloned = dummyTaskSummary.copy();\n+    assertThat(dummyTaskSummaryCloned).isEqualTo(dummyTaskSummary);\n+    assertThat(dummyTaskSummaryCloned).isNotSameAs(dummyTaskSummary);\n+\n+    Attachment dummyAttachmentForSummaryTestPostClone =\n+        CreateTaskModelHelper.createAttachment(\n+            \"differentIdForDeepTest\", \"differentTaskIdForDeepTest\");\n+    AttachmentSummary dummyAttachmentSummary2 = dummyAttachmentForSummaryTestPostClone.asSummary();\n+    attachmentSummaries.add(dummyAttachmentSummary2);\n+    assertThat(dummyTaskSummaryCloned).isNotEqualTo(dummyTaskSummary);\n+  }\n+\n+  @Test\n+  void testCloneInTask() {\n+    Task dummyTask =\n+        CreateTaskModelHelper.createUnitTestTask(\n+            \"dummyTaskId\",\n+            \"dummyTaskName\",\n+            \"workbasketKey\",\n+            CreateTaskModelHelper.createDummyClassification());\n+    Map<String, String> dummyCustomAttributesPreClone = new HashMap<>();\n+    dummyCustomAttributesPreClone.put(\"dummyAttributeKey\", \"dummyAttributeValue\");\n+    dummyTask.setCustomAttributes(dummyCustomAttributesPreClone);\n+    Map<String, String> dummyCallbackInfoPreClone = new HashMap<>();\n+    dummyCallbackInfoPreClone.put(\"dummyCallbackKey\", \"dummyCallbackValue\");\n+    dummyTask.setCallbackInfo(dummyCallbackInfoPreClone);\n+\n+    Task dummyTaskCloned = dummyTask.copy();\n+    assertThat(dummyTaskCloned).isEqualTo(dummyTask);\n+    assertThat(dummyTaskCloned).isNotSameAs(dummyTask);\n+\n+    dummyCustomAttributesPreClone.put(\"deepTestAttributeKey\", \"deepTestAttributeValue\");\n+    dummyCallbackInfoPreClone.put(\"deepTestCallbackKey\", \"deepTestCallbackValue\");\n+    assertThat(dummyTaskCloned).isNotEqualTo(dummyTask);\n+  }\n+\n+  @Test\n+  void testCloneInTaskComment() {\n+    TaskCommentImpl dummyComment = new TaskCommentImpl();\n+    dummyComment.setTextField(\"dummyTextField\");\n+    TaskComment dummyCommentCloned = new TaskCommentImpl(dummyComment);", "originalCommit": "696ed37e21361318666cfa2a2734c7c3eb475988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2177b3df8e7fa3830fb7efa181a88cd03eae0ce5", "url": "https://github.com/Taskana/taskana/commit/2177b3df8e7fa3830fb7efa181a88cd03eae0ce5", "message": "TSK-1168: made interfaces clonable with a new \"copy()\" method, added tests", "committedDate": "2020-03-26T14:33:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3MzM2Mg==", "url": "https://github.com/Taskana/taskana/pull/989#discussion_r403973362", "bodyText": "Please comment that the id will not be duplicated.\n(and do this for every entity)", "author": "mustaphazorgati", "createdAt": "2020-04-06T10:04:26Z", "path": "lib/taskana-core/src/main/java/pro/taskana/classification/api/models/Classification.java", "diffHunk": "@@ -36,6 +36,27 @@\n    */\n   String getDomain();\n \n+  /**\n+   * Get the logical name of the associated application entry point.\n+   *\n+   * @return applicationEntryPoint\n+   */\n+  String getApplicationEntryPoint();\n+\n+  /**\n+   * Set the logical name of the associated application entry point.\n+   *\n+   * @param applicationEntryPoint The application entry point\n+   */\n+  void setApplicationEntryPoint(String applicationEntryPoint);\n+\n+  /**\n+   * Duplicates this Classification.", "originalCommit": "1ad8e97e5e4c09026aae4c86e46132521c94d351", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04e8b798dd3c79219f2a06edceeb61c86c5ae0b1", "url": "https://github.com/Taskana/taskana/commit/04e8b798dd3c79219f2a06edceeb61c86c5ae0b1", "message": "TSK-1168: made interfaces of entities clonable", "committedDate": "2020-04-06T10:14:03Z", "type": "commit"}, {"oid": "360db7cff36fd4181ab3d31182b5cc0d9a550f41", "url": "https://github.com/Taskana/taskana/commit/360db7cff36fd4181ab3d31182b5cc0d9a550f41", "message": "TSK-1168: made interfaces clonable with a new \"copy()\" method, added tests", "committedDate": "2020-04-06T10:18:00Z", "type": "commit"}, {"oid": "02766da94eb1ad6bf7d77d8e1778903ea01052b4", "url": "https://github.com/Taskana/taskana/commit/02766da94eb1ad6bf7d77d8e1778903ea01052b4", "message": "broken commit, beware", "committedDate": "2020-04-06T11:07:29Z", "type": "forcePushed"}, {"oid": "279c2c3bb1e656ee99afd50dc33e18888bc3477e", "url": "https://github.com/Taskana/taskana/commit/279c2c3bb1e656ee99afd50dc33e18888bc3477e", "message": "TSK-1168: added acceptance test to show that you can create new task after copy", "committedDate": "2020-04-06T18:19:19Z", "type": "forcePushed"}, {"oid": "a98897906823fd4d2dd527a94bad3252eb37024d", "url": "https://github.com/Taskana/taskana/commit/a98897906823fd4d2dd527a94bad3252eb37024d", "message": "TSK-1168: added acceptance test to show that you can create new task after copy", "committedDate": "2020-04-07T08:22:50Z", "type": "forcePushed"}, {"oid": "3ac99e7f57d69c2bdfc5d2724d7ea8660f974c94", "url": "https://github.com/Taskana/taskana/commit/3ac99e7f57d69c2bdfc5d2724d7ea8660f974c94", "message": "TSK-1168: Removed Id from CopyConstructor", "committedDate": "2020-04-07T08:27:43Z", "type": "commit"}, {"oid": "f9543b1208f41d14c598d61ebc03d142312f0bbf", "url": "https://github.com/Taskana/taskana/commit/f9543b1208f41d14c598d61ebc03d142312f0bbf", "message": "TSK-1168: added acceptance test to show that you can create new task after copy", "committedDate": "2020-04-07T08:27:43Z", "type": "forcePushed"}, {"oid": "f93f520d90c3da7ca856c6e0bb14c25f8bb74d2e", "url": "https://github.com/Taskana/taskana/commit/f93f520d90c3da7ca856c6e0bb14c25f8bb74d2e", "message": "TSK-1168: added acceptance test to show that you can create new task after copy", "committedDate": "2020-04-07T15:04:50Z", "type": "forcePushed"}, {"oid": "6ca417f8a7de56af76c42846d9c12892de0fd9c4", "url": "https://github.com/Taskana/taskana/commit/6ca417f8a7de56af76c42846d9c12892de0fd9c4", "message": "TSK-1168: added acceptance tests to show that you can create entities after copy", "committedDate": "2020-04-09T07:49:30Z", "type": "commit"}, {"oid": "6ca417f8a7de56af76c42846d9c12892de0fd9c4", "url": "https://github.com/Taskana/taskana/commit/6ca417f8a7de56af76c42846d9c12892de0fd9c4", "message": "TSK-1168: added acceptance tests to show that you can create entities after copy", "committedDate": "2020-04-09T07:49:30Z", "type": "forcePushed"}]}