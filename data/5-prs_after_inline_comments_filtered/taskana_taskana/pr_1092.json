{"pr_number": 1092, "pr_title": "Tsk 1265", "pr_createdAt": "2020-05-29T09:10:33Z", "pr_url": "https://github.com/Taskana/taskana/pull/1092", "timeline": [{"oid": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "url": "https://github.com/Taskana/taskana/commit/9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "message": "TASK-1265: Removal of constructors from the representationModels", "committedDate": "2020-05-30T10:05:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyODkwMQ==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r432828901", "bodyText": "Personally i'd move the link creation after creating the repModel. But this is fine for now.", "author": "mustaphazorgati", "createdAt": "2020-05-30T10:08:31Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/classification/rest/assembler/ClassificationRepresentationModelAssembler.java", "diffHunk": "@@ -36,18 +35,41 @@ public ClassificationRepresentationModelAssembler(ClassificationService classifi\n   @NonNull\n   @Override\n   public ClassificationRepresentationModel toModel(@NonNull Classification classification) {\n-    ClassificationRepresentationModel resource =\n-        new ClassificationRepresentationModel(classification);\n+    ClassificationRepresentationModel repModel =\n+        new ClassificationRepresentationModel();\n     try {\n-      resource.add(\n+      repModel.add(\n           WebMvcLinkBuilder.linkTo(\n-                  methodOn(ClassificationController.class)\n-                      .getClassification(classification.getId()))\n+              methodOn(ClassificationController.class)\n+                  .getClassification(classification.getId()))\n               .withSelfRel());\n     } catch (ClassificationNotFoundException e) {\n       throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n     }", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyODk4Mw==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r432828983", "bodyText": "URL_WORKBASKET_DEFINITIONS would be cooler", "author": "mustaphazorgati", "createdAt": "2020-05-30T10:10:03Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/Mapping.java", "diffHunk": "@@ -43,7 +43,7 @@\n       URL_WORKBASKET_ID + \"/workbasketAccessItems\";\n   public static final String URL_WORKBASKET_ID_DISTRIBUTION =\n       URL_WORKBASKET_ID + \"/distribution-targets\";\n-  public static final String URL_WORKBASKETDEFIITIONS = PRE + \"workbasket-definitions\";\n+  public static final String URL_WORKBASKETDEFINITIONS = PRE + \"workbasket-definitions\";", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyOTA1Nw==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r432829057", "bodyText": "This should be an instant aswell :)", "author": "mustaphazorgati", "createdAt": "2020-05-30T10:11:06Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/TaskCommentRepresentationModelAssembler.java", "diffHunk": "@@ -39,34 +38,37 @@ public TaskCommentRepresentationModelAssembler(TaskService taskService) {\n   @NonNull\n   @Override\n   public TaskCommentRepresentationModel toModel(@NonNull TaskComment taskComment) {\n-    TaskCommentRepresentationModel taskCommentRepresentationModel =\n-        new TaskCommentRepresentationModel(taskComment);\n+    TaskCommentRepresentationModel repModel =\n+        new TaskCommentRepresentationModel();\n+    repModel.setTaskCommentId(taskComment.getId());\n+    repModel.setTaskId(taskComment.getTaskId());\n+    repModel.setTextField(taskComment.getTextField());\n+    repModel.setCreator(taskComment.getCreator());\n+    repModel.setCreated(taskComment.getCreated().toString());\n+    repModel.setModified(taskComment.getModified().toString());\n     try {\n-      taskCommentRepresentationModel.add(\n+      repModel.add(\n           linkTo(methodOn(TaskCommentController.class).getTaskComment(taskComment.getId()))\n               .withSelfRel());\n     } catch (Exception e) {\n       throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n     }\n-\n-    return taskCommentRepresentationModel;\n+    return repModel;\n   }\n \n-  public TaskComment toEntityModel(TaskCommentRepresentationModel taskCommentRepresentationModel) {\n+  public TaskComment toEntityModel(TaskCommentRepresentationModel repModel) {\n \n     TaskCommentImpl taskComment =\n-        (TaskCommentImpl) taskService.newTaskComment(taskCommentRepresentationModel.getTaskId());\n-    taskComment.setId(taskCommentRepresentationModel.getTaskCommentId());\n-\n-    BeanUtils.copyProperties(taskCommentRepresentationModel, taskComment);\n-\n-    if (taskCommentRepresentationModel.getCreated() != null) {\n-      taskComment.setCreated(Instant.parse(taskCommentRepresentationModel.getCreated()));\n+        (TaskCommentImpl) taskService.newTaskComment(repModel.getTaskId());\n+    taskComment.setId(repModel.getTaskCommentId());\n+    taskComment.setTextField(repModel.getTextField());\n+    taskComment.setCreator(repModel.getCreator());\n+    if (repModel.getCreated() != null) {\n+      taskComment.setCreated(Instant.parse(repModel.getCreated()));\n     }\n-    if (taskCommentRepresentationModel.getModified() != null) {\n-      taskComment.setModified(Instant.parse(taskCommentRepresentationModel.getModified()));\n+    if (repModel.getModified() != null) {\n+      taskComment.setModified(Instant.parse(repModel.getModified()));\n     }", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyOTIxOQ==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r432829219", "bodyText": "Please refactor TaskRepresentationModel.CustomAttribute aswell", "author": "mustaphazorgati", "createdAt": "2020-05-30T10:13:35Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssembler.java", "diffHunk": "@@ -36,61 +35,138 @@\n   private final ClassificationSummaryRepresentationModelAssembler classificationAssembler;\n \n   private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n+      workbasketAssembler;\n \n   private final AttachmentRepresentationModelAssembler attachmentAssembler;\n \n   @Autowired\n   public TaskRepresentationModelAssembler(\n       TaskService taskService,\n       ClassificationSummaryRepresentationModelAssembler classificationAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n+      WorkbasketSummaryRepresentationModelAssembler workbasketAssembler,\n       AttachmentRepresentationModelAssembler attachmentAssembler) {\n     this.taskService = taskService;\n     this.classificationAssembler = classificationAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler\n-        = workbasketSummaryRepresentationModelAssembler;\n+    this.workbasketAssembler\n+        = workbasketAssembler;\n     this.attachmentAssembler = attachmentAssembler;\n   }\n \n   @NonNull\n   @Override\n   public TaskRepresentationModel toModel(@NonNull Task task) {\n-    TaskRepresentationModel resource;\n+    TaskRepresentationModel repModel = new TaskRepresentationModel();\n+    repModel.setTaskId(task.getId());\n+    repModel.setExternalId(task.getExternalId());\n+    repModel.setCreated(task.getCreated());\n+    repModel.setClaimed(task.getClaimed());\n+    repModel.setCompleted(task.getCompleted());\n+    repModel.setModified(task.getModified());\n+    repModel.setPlanned(task.getPlanned());\n+    repModel.setDue(task.getDue());\n+    repModel.setName(task.getName());\n+    repModel.setCreator(task.getCreator());\n+    repModel.setNote(task.getNote());\n+    repModel.setDescription(task.getDescription());\n+    repModel.setPriority(task.getPriority());\n+    repModel.setState(task.getState());\n+    repModel.setClassificationSummary(\n+        classificationAssembler.toModel(task.getClassificationSummary()));\n+    repModel.setWorkbasketSummary(workbasketAssembler.toModel(task.getWorkbasketSummary()));\n+    repModel.setBusinessProcessId(task.getBusinessProcessId());\n+    repModel.setParentBusinessProcessId(task.getParentBusinessProcessId());\n+    repModel.setOwner(task.getOwner());\n+    repModel.setPrimaryObjRef(task.getPrimaryObjRef());\n+    repModel.setRead(task.isRead());\n+    repModel.setTransferred(task.isTransferred());\n+    repModel.setAttachments(\n+        task.getAttachments().stream()\n+            .map(attachmentAssembler::toModel)\n+            .collect(Collectors.toList()));\n+    repModel.setCustomAttributes(\n+        task.getCustomAttributes().entrySet().stream()\n+            .map(e -> new TaskRepresentationModel.CustomAttribute(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList()));\n+    repModel.setCallbackInfo(\n+        task.getCallbackInfo().entrySet().stream()\n+            .map(e -> new TaskRepresentationModel.CustomAttribute(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList()));", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgyOTI1MA==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r432829250", "bodyText": "creating the repModel should be done outside the try-catch block", "author": "mustaphazorgati", "createdAt": "2020-05-30T10:14:11Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/TaskRepresentationModelAssembler.java", "diffHunk": "@@ -36,61 +35,138 @@\n   private final ClassificationSummaryRepresentationModelAssembler classificationAssembler;\n \n   private final WorkbasketSummaryRepresentationModelAssembler\n-      workbasketSummaryRepresentationModelAssembler;\n+      workbasketAssembler;\n \n   private final AttachmentRepresentationModelAssembler attachmentAssembler;\n \n   @Autowired\n   public TaskRepresentationModelAssembler(\n       TaskService taskService,\n       ClassificationSummaryRepresentationModelAssembler classificationAssembler,\n-      WorkbasketSummaryRepresentationModelAssembler workbasketSummaryRepresentationModelAssembler,\n+      WorkbasketSummaryRepresentationModelAssembler workbasketAssembler,\n       AttachmentRepresentationModelAssembler attachmentAssembler) {\n     this.taskService = taskService;\n     this.classificationAssembler = classificationAssembler;\n-    this.workbasketSummaryRepresentationModelAssembler\n-        = workbasketSummaryRepresentationModelAssembler;\n+    this.workbasketAssembler\n+        = workbasketAssembler;\n     this.attachmentAssembler = attachmentAssembler;\n   }\n \n   @NonNull\n   @Override\n   public TaskRepresentationModel toModel(@NonNull Task task) {\n-    TaskRepresentationModel resource;\n+    TaskRepresentationModel repModel = new TaskRepresentationModel();\n+    repModel.setTaskId(task.getId());\n+    repModel.setExternalId(task.getExternalId());\n+    repModel.setCreated(task.getCreated());\n+    repModel.setClaimed(task.getClaimed());\n+    repModel.setCompleted(task.getCompleted());\n+    repModel.setModified(task.getModified());\n+    repModel.setPlanned(task.getPlanned());\n+    repModel.setDue(task.getDue());\n+    repModel.setName(task.getName());\n+    repModel.setCreator(task.getCreator());\n+    repModel.setNote(task.getNote());\n+    repModel.setDescription(task.getDescription());\n+    repModel.setPriority(task.getPriority());\n+    repModel.setState(task.getState());\n+    repModel.setClassificationSummary(\n+        classificationAssembler.toModel(task.getClassificationSummary()));\n+    repModel.setWorkbasketSummary(workbasketAssembler.toModel(task.getWorkbasketSummary()));\n+    repModel.setBusinessProcessId(task.getBusinessProcessId());\n+    repModel.setParentBusinessProcessId(task.getParentBusinessProcessId());\n+    repModel.setOwner(task.getOwner());\n+    repModel.setPrimaryObjRef(task.getPrimaryObjRef());\n+    repModel.setRead(task.isRead());\n+    repModel.setTransferred(task.isTransferred());\n+    repModel.setAttachments(\n+        task.getAttachments().stream()\n+            .map(attachmentAssembler::toModel)\n+            .collect(Collectors.toList()));\n+    repModel.setCustomAttributes(\n+        task.getCustomAttributes().entrySet().stream()\n+            .map(e -> new TaskRepresentationModel.CustomAttribute(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList()));\n+    repModel.setCallbackInfo(\n+        task.getCallbackInfo().entrySet().stream()\n+            .map(e -> new TaskRepresentationModel.CustomAttribute(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList()));\n     try {\n-      resource = new TaskRepresentationModel(task);\n-      resource.add(linkTo(methodOn(TaskController.class).getTask(task.getId())).withSelfRel());\n+      repModel.add(linkTo(methodOn(TaskController.class).getTask(task.getId())).withSelfRel());\n+      repModel.setCustom1(task.getCustomAttribute(\"1\"));\n+      repModel.setCustom2(task.getCustomAttribute(\"2\"));\n+      repModel.setCustom3(task.getCustomAttribute(\"3\"));\n+      repModel.setCustom4(task.getCustomAttribute(\"4\"));\n+      repModel.setCustom5(task.getCustomAttribute(\"5\"));\n+      repModel.setCustom6(task.getCustomAttribute(\"6\"));\n+      repModel.setCustom7(task.getCustomAttribute(\"7\"));\n+      repModel.setCustom8(task.getCustomAttribute(\"8\"));\n+      repModel.setCustom9(task.getCustomAttribute(\"9\"));\n+      repModel.setCustom10(task.getCustomAttribute(\"10\"));\n+      repModel.setCustom11(task.getCustomAttribute(\"11\"));\n+      repModel.setCustom12(task.getCustomAttribute(\"12\"));\n+      repModel.setCustom13(task.getCustomAttribute(\"13\"));\n+      repModel.setCustom14(task.getCustomAttribute(\"14\"));\n+      repModel.setCustom15(task.getCustomAttribute(\"15\"));\n+      repModel.setCustom16(task.getCustomAttribute(\"16\"));", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MzQ0OA==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r433593448", "bodyText": "Use the Interface TaskanaPaging :)", "author": "mustaphazorgati", "createdAt": "2020-06-02T02:56:04Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/assembler/TaskSummaryRepresentationModelAssembler.java", "diffHunk": "@@ -4,43 +4,159 @@\n \n import java.util.List;\n import java.util.stream.Collectors;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.hateoas.PagedModel.PageMetadata;\n import org.springframework.hateoas.server.RepresentationModelAssembler;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n \n+import pro.taskana.classification.rest.assembler.ClassificationSummaryRepresentationModelAssembler;\n import pro.taskana.common.api.exceptions.InvalidArgumentException;\n import pro.taskana.common.api.exceptions.SystemException;\n import pro.taskana.common.rest.Mapping;\n import pro.taskana.common.rest.models.TaskanaPagedModel;\n import pro.taskana.resource.rest.PageLinks;\n+import pro.taskana.task.api.TaskService;\n import pro.taskana.task.api.models.TaskSummary;\n+import pro.taskana.task.internal.models.TaskImpl;\n import pro.taskana.task.rest.models.TaskSummaryRepresentationModel;\n+import pro.taskana.workbasket.rest.assembler.WorkbasketSummaryRepresentationModelAssembler;\n \n-/** EntityModel assembler for {@link TaskSummaryRepresentationModel}. */\n+/**\n+ * EntityModel assembler for {@link TaskSummaryRepresentationModel}.\n+ */\n @Component\n public class TaskSummaryRepresentationModelAssembler\n     implements RepresentationModelAssembler<TaskSummary, TaskSummaryRepresentationModel> {\n \n+  private final ClassificationSummaryRepresentationModelAssembler classificationAssembler;\n+  private final WorkbasketSummaryRepresentationModelAssembler workbasketAssembler;\n+  private final AttachmentSummaryRepresentationModelAssembler attachmentAssembler;\n+  private final TaskService taskService;\n+\n+  @Autowired\n+  public TaskSummaryRepresentationModelAssembler(\n+      ClassificationSummaryRepresentationModelAssembler classificationAssembler,\n+      WorkbasketSummaryRepresentationModelAssembler workbasketAssembler,\n+      AttachmentSummaryRepresentationModelAssembler attachmentAssembler,\n+      TaskService taskService) {\n+    this.classificationAssembler = classificationAssembler;\n+    this.workbasketAssembler = workbasketAssembler;\n+    this.attachmentAssembler = attachmentAssembler;\n+    this.taskService = taskService;\n+  }\n+\n   @NonNull\n   @Override\n   public TaskSummaryRepresentationModel toModel(@NonNull TaskSummary taskSummary) {\n-    TaskSummaryRepresentationModel resource;\n+    TaskSummaryRepresentationModel repModel = new TaskSummaryRepresentationModel();\n+    repModel.setTaskId(taskSummary.getId());\n+    repModel.setExternalId(taskSummary.getExternalId());\n+    repModel.setCreated(taskSummary.getCreated());\n+    repModel.setClaimed(taskSummary.getClaimed());\n+    repModel.setCompleted(taskSummary.getCompleted());\n+    repModel.setModified(taskSummary.getModified());\n+    repModel.setPlanned(taskSummary.getPlanned());\n+    repModel.setDue(taskSummary.getDue());\n+    repModel.setName(taskSummary.getName());\n+    repModel.setCreator(taskSummary.getCreator());\n+    repModel.setNote(taskSummary.getNote());\n+    repModel.setDescription(taskSummary.getDescription());\n+    repModel.setPriority(taskSummary.getPriority());\n+    repModel.setState(taskSummary.getState());\n+    repModel.setClassificationSummary(\n+        classificationAssembler.toModel(taskSummary.getClassificationSummary()));\n+    repModel.setWorkbasketSummary(workbasketAssembler.toModel(taskSummary.getWorkbasketSummary()));\n+    repModel.setBusinessProcessId(taskSummary.getBusinessProcessId());\n+    repModel.setParentBusinessProcessId(taskSummary.getParentBusinessProcessId());\n+    repModel.setOwner(taskSummary.getOwner());\n+    repModel.setPrimaryObjRef(taskSummary.getPrimaryObjRef());\n+    repModel.setRead(taskSummary.isRead());\n+    repModel.setTransferred(taskSummary.isTransferred());\n+    repModel.setAttachmentSummaries(\n+        taskSummary.getAttachmentSummaries().stream()\n+            .map(attachmentAssembler::toModel)\n+            .collect(Collectors.toList()));\n     try {\n-      resource = new TaskSummaryRepresentationModel(taskSummary);\n-      return resource;\n+      repModel.setCustom1(taskSummary.getCustomAttribute(\"1\"));\n+      repModel.setCustom2(taskSummary.getCustomAttribute(\"2\"));\n+      repModel.setCustom3(taskSummary.getCustomAttribute(\"3\"));\n+      repModel.setCustom4(taskSummary.getCustomAttribute(\"4\"));\n+      repModel.setCustom5(taskSummary.getCustomAttribute(\"5\"));\n+      repModel.setCustom6(taskSummary.getCustomAttribute(\"6\"));\n+      repModel.setCustom7(taskSummary.getCustomAttribute(\"7\"));\n+      repModel.setCustom8(taskSummary.getCustomAttribute(\"8\"));\n+      repModel.setCustom9(taskSummary.getCustomAttribute(\"9\"));\n+      repModel.setCustom10(taskSummary.getCustomAttribute(\"10\"));\n+      repModel.setCustom11(taskSummary.getCustomAttribute(\"11\"));\n+      repModel.setCustom12(taskSummary.getCustomAttribute(\"12\"));\n+      repModel.setCustom13(taskSummary.getCustomAttribute(\"13\"));\n+      repModel.setCustom14(taskSummary.getCustomAttribute(\"14\"));\n+      repModel.setCustom15(taskSummary.getCustomAttribute(\"15\"));\n+      repModel.setCustom16(taskSummary.getCustomAttribute(\"16\"));\n     } catch (InvalidArgumentException e) {\n       throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n     }\n+    return repModel;\n+  }\n+\n+  public TaskSummary toEntityModel(TaskSummaryRepresentationModel repModel) {\n+    TaskImpl taskSummary = (TaskImpl) taskService.newTask();\n+    taskSummary.setId(repModel.getTaskId());\n+    taskSummary.setExternalId(repModel.getExternalId());\n+    taskSummary.setCreated(repModel.getCreated());\n+    taskSummary.setClaimed(repModel.getClaimed());\n+    taskSummary.setCompleted(repModel.getCompleted());\n+    taskSummary.setModified(repModel.getModified());\n+    taskSummary.setPlanned(repModel.getPlanned());\n+    taskSummary.setDue(repModel.getDue());\n+    taskSummary.setName(repModel.getName());\n+    taskSummary.setCreator(repModel.getCreator());\n+    taskSummary.setNote(repModel.getNote());\n+    taskSummary.setDescription(repModel.getDescription());\n+    taskSummary.setPriority(repModel.getPriority());\n+    taskSummary.setState(repModel.getState());\n+    taskSummary.setClassificationSummary(\n+        classificationAssembler.toEntityModel(repModel.getClassificationSummary()));\n+    taskSummary\n+        .setWorkbasketSummary(workbasketAssembler.toEntityModel(repModel.getWorkbasketSummary()));\n+    taskSummary.setBusinessProcessId(repModel.getBusinessProcessId());\n+    taskSummary.setParentBusinessProcessId(repModel.getParentBusinessProcessId());\n+    taskSummary.setOwner(repModel.getOwner());\n+    taskSummary.setPrimaryObjRef(repModel.getPrimaryObjRef());\n+    taskSummary.setRead(repModel.isRead());\n+    taskSummary.setTransferred(repModel.isTransferred());\n+    taskSummary.setAttachmentSummaries(\n+        repModel.getAttachmentSummaries().stream()\n+            .map(attachmentAssembler::toEntityModel)\n+            .collect(Collectors.toList()));\n+    taskSummary.setCustom1(repModel.getCustom1());\n+    taskSummary.setCustom2(repModel.getCustom2());\n+    taskSummary.setCustom3(repModel.getCustom3());\n+    taskSummary.setCustom4(repModel.getCustom4());\n+    taskSummary.setCustom5(repModel.getCustom5());\n+    taskSummary.setCustom6(repModel.getCustom6());\n+    taskSummary.setCustom7(repModel.getCustom7());\n+    taskSummary.setCustom8(repModel.getCustom8());\n+    taskSummary.setCustom9(repModel.getCustom9());\n+    taskSummary.setCustom10(repModel.getCustom10());\n+    taskSummary.setCustom11(repModel.getCustom11());\n+    taskSummary.setCustom12(repModel.getCustom12());\n+    taskSummary.setCustom13(repModel.getCustom13());\n+    taskSummary.setCustom14(repModel.getCustom14());\n+    taskSummary.setCustom15(repModel.getCustom15());\n+    taskSummary.setCustom16(repModel.getCustom16());\n+    return taskSummary;\n   }\n \n   @PageLinks(Mapping.URL_TASKS)\n   public TaskanaPagedModel<TaskSummaryRepresentationModel> toPageModel(\n       List<TaskSummary> taskSummaries, PageMetadata pageMetadata) {\n     return taskSummaries.stream()\n-        .map(this::toModel)\n-        .collect(\n-            Collectors.collectingAndThen(\n-                Collectors.toList(), list -> new TaskanaPagedModel<>(TASKS, list, pageMetadata)));\n+               .map(this::toModel)\n+               .collect(\n+                   Collectors.collectingAndThen(\n+                       Collectors.toList(),\n+                       list -> new TaskanaPagedModel<>(TASKS, list, pageMetadata)));", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MzYyNA==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r433593624", "bodyText": "CustomAttribute has to be refactored aswell", "author": "mustaphazorgati", "createdAt": "2020-06-02T02:56:50Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/task/rest/models/TaskRepresentationModel.java", "diffHunk": "@@ -125,9 +73,5 @@ public String getValue() {\n       return value;\n     }\n \n-    @Override\n-    public String toString() {\n-      return \"CustomAttribute [\" + \"key= \" + this.key + \"value= \" + this.value + \"]\";\n-    }", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5Mzg0OQ==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r433593849", "bodyText": "Why is this done so overly complicated?", "author": "mustaphazorgati", "createdAt": "2020-06-02T02:57:47Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/WorkbasketDefinitionController.java", "diffHunk": "@@ -212,7 +216,7 @@\n   }\n \n   private Workbasket removeId(Workbasket importedWb) {\n-    WorkbasketRepresentationModel wbRes = new WorkbasketRepresentationModel(importedWb);\n+    WorkbasketRepresentationModel wbRes = workbasketAssembler.toModel(importedWb);\n     wbRes.setWorkbasketId(null);\n     return workbasketDefinitionAssembler.toEntityModel(wbRes);\n   }", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5Mzk4Mw==", "url": "https://github.com/Taskana/taskana/pull/1092#discussion_r433593983", "bodyText": "weird formatting", "author": "mustaphazorgati", "createdAt": "2020-06-02T02:58:16Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/workbasket/rest/assembler/WorkbasketDefinitionRepresentationModelAssembler.java", "diffHunk": "@@ -35,46 +34,79 @@\n   private final WorkbasketService workbasketService;\n \n   @Autowired\n-  public WorkbasketDefinitionRepresentationModelAssembler(WorkbasketService workbasketService) {\n+  public WorkbasketDefinitionRepresentationModelAssembler(WorkbasketService workbasketService,\n+      WorkbasketRepresentationModelAssembler workbasketAssembler\n+  ) {\n     this.workbasketService = workbasketService;", "originalCommit": "9d0335ba93c75cd4fcd406e0f4ae61b2f2e84645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c5353804d52875fb7898b56e5685a2b63a9109fc", "url": "https://github.com/Taskana/taskana/commit/c5353804d52875fb7898b56e5685a2b63a9109fc", "message": "TASK-1265: Removal of constructors from the representationModels", "committedDate": "2020-06-02T03:00:36Z", "type": "forcePushed"}, {"oid": "c0270ea26a57d9abc5ccfa166900976f8cd3ecb7", "url": "https://github.com/Taskana/taskana/commit/c0270ea26a57d9abc5ccfa166900976f8cd3ecb7", "message": "TSK-1265: wip", "committedDate": "2020-06-02T03:23:28Z", "type": "forcePushed"}, {"oid": "650f5cf98e135d852caa6b85215f0a79a183cc89", "url": "https://github.com/Taskana/taskana/commit/650f5cf98e135d852caa6b85215f0a79a183cc89", "message": "TSK-1265: Removal of constructors from the representationModels", "committedDate": "2020-06-02T03:52:49Z", "type": "commit"}, {"oid": "693c05f2050470f79cb9ada759517f06ff2e9249", "url": "https://github.com/Taskana/taskana/commit/693c05f2050470f79cb9ada759517f06ff2e9249", "message": "TSK-1265: further cleanup of representationModelAssemblers", "committedDate": "2020-06-02T03:52:49Z", "type": "commit"}, {"oid": "693c05f2050470f79cb9ada759517f06ff2e9249", "url": "https://github.com/Taskana/taskana/commit/693c05f2050470f79cb9ada759517f06ff2e9249", "message": "TSK-1265: further cleanup of representationModelAssemblers", "committedDate": "2020-06-02T03:52:49Z", "type": "forcePushed"}]}