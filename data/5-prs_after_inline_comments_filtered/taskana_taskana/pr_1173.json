{"pr_number": 1173, "pr_title": "TSK-1332: Add HistoryCleanupJob", "pr_createdAt": "2020-07-14T08:40:23Z", "pr_url": "https://github.com/Taskana/taskana/pull/1173", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Nzc5NQ==", "url": "https://github.com/Taskana/taskana/pull/1173#discussion_r464467795", "bodyText": "Why did you change the TaskCleanupJob?", "author": "holgerhagen", "createdAt": "2020-08-03T14:56:34Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/jobs/TaskCleanupJob.java", "diffHunk": "@@ -98,45 +99,41 @@ public static void initializeSchedule(TaskanaEngine taskanaEngine) {\n     if (allCompletedSameParentBusiness) {\n       Map<String, Long> numberParentTasksShouldHave = new HashMap<>();\n       Map<String, Long> countParentTask = new HashMap<>();\n-      for (TaskSummary task : taskList) {\n-        numberParentTasksShouldHave.put(\n-            task.getParentBusinessProcessId(),\n-            taskanaEngineImpl\n-                .getTaskService()\n-                .createTaskQuery()\n-                .parentBusinessProcessIdIn(task.getParentBusinessProcessId())\n-                .count());\n-        countParentTask.merge(task.getParentBusinessProcessId(), 1L, Long::sum);\n-      }\n \n-      List<String> idsList = new ArrayList<>();\n-      numberParentTasksShouldHave.forEach(\n-          (k, v) -> {\n-            if (v.compareTo(countParentTask.get(k)) == 0) {\n-              idsList.add(k);\n+      tasksToDelete.forEach(", "originalCommit": "bf18bb18d6a50cb34796e8f11c2bb38aad40baf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2ODIwMw==", "url": "https://github.com/Taskana/taskana/pull/1173#discussion_r464468203", "bodyText": "Didn't we agree to change this mechanism to reflection to prevent this kind of hard dependency?", "author": "holgerhagen", "createdAt": "2020-08-03T14:57:09Z", "path": "lib/taskana-core/src/main/java/pro/taskana/common/internal/jobs/AbstractTaskanaJob.java", "diffHunk": "@@ -42,6 +45,14 @@ public static TaskanaJob createFromScheduledJob(\n         return new TaskCleanupJob(engine, txProvider, job);\n       case WORKBASKETCLEANUPJOB:\n         return new WorkbasketCleanupJob(engine, txProvider, job);\n+      case HISTORYCLEANUPJOB:", "originalCommit": "bf18bb18d6a50cb34796e8f11c2bb38aad40baf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2ODg3Ng==", "url": "https://github.com/Taskana/taskana/pull/1173#discussion_r464468876", "bodyText": "All other jobs reside in a package \"jobs\". Maybe we should stick to this structure for the history as well?", "author": "holgerhagen", "createdAt": "2020-08-03T14:58:12Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/HistoryCleanupJob.java", "diffHunk": "@@ -0,0 +1,337 @@\n+package pro.taskana.simplehistory.impl;", "originalCommit": "bf18bb18d6a50cb34796e8f11c2bb38aad40baf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2OTcwMA==", "url": "https://github.com/Taskana/taskana/pull/1173#discussion_r464469700", "bodyText": "I don't think that this is correct. We do want to delete all events for the tasks and not just the completed event.", "author": "holgerhagen", "createdAt": "2020-08-03T14:59:32Z", "path": "history/taskana-simplehistory-provider/src/main/java/pro/taskana/simplehistory/impl/HistoryCleanupJob.java", "diffHunk": "@@ -0,0 +1,337 @@\n+package pro.taskana.simplehistory.impl;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import pro.taskana.TaskanaEngineConfiguration;\n+import pro.taskana.common.api.ScheduledJob;\n+import pro.taskana.common.api.ScheduledJob.Type;\n+import pro.taskana.common.api.TaskanaEngine;\n+import pro.taskana.common.api.TimeInterval;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.api.exceptions.TaskanaException;\n+import pro.taskana.common.internal.jobs.AbstractTaskanaJob;\n+import pro.taskana.common.internal.transaction.TaskanaTransactionProvider;\n+\n+public class HistoryCleanupJob extends AbstractTaskanaJob {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(HistoryCleanupJob.class);\n+\n+  private static final String TASKANA_PROPERTIES = \"/taskana.properties\";\n+\n+  private static final String TASKANA_JOB_HISTORY_BATCH_SIZE = \"taskana.jobs.history.batchSize\";\n+  private static final String TASKANA_JOB_HISTORY_CLEANUP_RUN_EVERY =\n+      \"taskana.jobs.history.cleanup.runEvery\";\n+  private static final String TASKANA_JOB_HISTORY_CLEANUP_FIRST_RUN =\n+      \"taskana.jobs.history.cleanup.firstRunAt\";\n+  private static final String TASKANA_JOB_HISTORY_CLEANUP_MINIMUM_AGE =\n+      \"taskana.jobs.history.cleanup.minimumAge\";\n+\n+  TaskanaHistoryEngineImpl taskanaHistoryEngine =\n+      TaskanaHistoryEngineImpl.createTaskanaEngine(taskanaEngineImpl.getConfiguration());\n+\n+  private Instant firstRun;\n+  private Duration runEvery;\n+  private Duration minimumAge;\n+  private int batchSize;\n+  private boolean allCompletedSameParentBusiness;\n+\n+  public HistoryCleanupJob(\n+      TaskanaEngine taskanaEngine,\n+      TaskanaTransactionProvider<Object> txProvider,\n+      ScheduledJob scheduledJob) {\n+    super(taskanaEngine, txProvider, scheduledJob);\n+    allCompletedSameParentBusiness =\n+        taskanaEngine.getConfiguration().isTaskCleanupJobAllCompletedSameParentBusiness();\n+    Properties props = readPropertiesFromFile(TASKANA_PROPERTIES);\n+    initJobParameters(props);\n+  }\n+\n+  @Override\n+  public void run() throws TaskanaException {\n+\n+    Instant createdBefore = Instant.now().minus(minimumAge);\n+\n+    LOGGER.info(\"Running job to delete all history events created before ({})\", createdBefore);\n+\n+    try {\n+\n+      SimpleHistoryServiceImpl simpleHistoryService =\n+          (SimpleHistoryServiceImpl) taskanaHistoryEngine.getTaskanaHistoryService();\n+\n+      List<HistoryEventImpl> historyEventsToClean =\n+          simpleHistoryService\n+              .createHistoryQuery()\n+              .createdWithin(new TimeInterval(null, createdBefore))\n+              .eventTypeIn(\"TASK_COMPLETED\")", "originalCommit": "bf18bb18d6a50cb34796e8f11c2bb38aad40baf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c25aa9f4512f369e7248b07c882b2c69d21ae49", "url": "https://github.com/Taskana/taskana/commit/0c25aa9f4512f369e7248b07c882b2c69d21ae49", "message": "TSK-1332: Add HistoryCleanupJob", "committedDate": "2020-09-04T09:10:22Z", "type": "commit"}, {"oid": "6a68911d7161d31c4ff11917f5aa8a59e73f8199", "url": "https://github.com/Taskana/taskana/commit/6a68911d7161d31c4ff11917f5aa8a59e73f8199", "message": "TSK-1332: Reworked logic after review", "committedDate": "2020-09-04T09:16:54Z", "type": "commit"}]}