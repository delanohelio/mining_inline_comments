{"pr_number": 351, "pr_title": "Map existing Tomcat properties to Spring Boot", "pr_createdAt": "2020-05-01T16:17:11Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/351", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTYwMA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418671600", "bodyText": "are these not exposed via server. namespace so that we have to redefine them here ?", "author": "denalex", "createdAt": "2020-05-01T18:23:47Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/configuration/PxfServerProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.greenplum.pxf.api.configuration;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Pattern;\n+\n+@ConfigurationProperties(prefix = PxfServerProperties.PROPERTY_PREFIX)\n+@Getter\n+@Setter\n+@Validated\n+public class PxfServerProperties {\n+\n+    /**\n+     * The property prefix for all properties in this group.\n+     */\n+    public static final String PROPERTY_PREFIX = \"pxf\";\n+\n+    /**\n+     * The path for the server configuration. If the configuration has not\n+     * been initialized, it will be set to NOT_INITIALIZED. This will cause\n+     * the application to fail during start up.\n+     */\n+    @NotBlank\n+    @Pattern(regexp = \"^(?!NOT_INITIALIZED).*$\")\n+    private String conf;\n+\n+    /**\n+     * Enable caching of metadata calls from a single JVM\n+     */\n+    private boolean metadataCache = true;\n+\n+    /**\n+     * Customizable settings for tomcat through PXF\n+     */\n+    private Tomcat tomcat;\n+\n+    @Getter\n+    @Setter\n+    public static class Tomcat {\n+\n+        /**\n+         * Maximum number of headers allowed in the request\n+         */\n+        private int maxHeaderCount = 30000;\n+\n+        /**\n+         * Maximum size of the HTTP message header.\n+         */\n+        private int maxHeaderSize = 1048576;", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MjQzOA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418682438", "bodyText": "they are not, that's why we expose them. They have some properties exposed but some of the other ones are not", "author": "frankgh", "createdAt": "2020-05-01T18:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mjg0OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418672848", "bodyText": "In general, what is our new design ? Do we rely solely on application.properties and ask users to change values there or do we have an overrides property file that users should manage. I'd like to see all user-manageable properties go into an override file (similar to how we have default and override pxf-env.sh files now). Will .sh files still be there, if yes, why, if not, how will we migrate the values ?", "author": "denalex", "createdAt": "2020-05-01T18:26:19Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/configuration/PxfServerProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.greenplum.pxf.api.configuration;", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTkzMg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418681932", "bodyText": "not really, we support existing environment variables from our pxf-env-default.sh file. For example:\nexport PXF_PORT=${PXF_PORT:=5888}\nwill map to the server.port property automatically. I am adding unit tests now", "author": "frankgh", "createdAt": "2020-05-01T18:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mjg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDIxMQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r420210211", "bodyText": "thanks to @oliverralbertini for providing this info regarding Spring Boot:\n\nprecedence\nrelaxed binding", "author": "frankgh", "createdAt": "2020-05-05T15:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mjg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mzk5OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418673998", "bodyText": "not sure what this is for", "author": "denalex", "createdAt": "2020-05-01T18:28:50Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/configuration/PxfServerProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.greenplum.pxf.api.configuration;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Pattern;\n+\n+@ConfigurationProperties(prefix = PxfServerProperties.PROPERTY_PREFIX)\n+@Getter\n+@Setter\n+@Validated\n+public class PxfServerProperties {\n+\n+    /**\n+     * The property prefix for all properties in this group.\n+     */\n+    public static final String PROPERTY_PREFIX = \"pxf\";\n+\n+    /**\n+     * The path for the server configuration. If the configuration has not\n+     * been initialized, it will be set to NOT_INITIALIZED. This will cause\n+     * the application to fail during start up.\n+     */\n+    @NotBlank\n+    @Pattern(regexp = \"^(?!NOT_INITIALIZED).*$\")\n+    private String conf;", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MjE3NA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418682174", "bodyText": "this maps to the PXF_CONF property", "author": "frankgh", "createdAt": "2020-05-01T18:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mzk5OA=="}], "type": "inlineReview"}, {"oid": "83fccf83f73c727948a8fa63dffdfb420ee8cf4d", "url": "https://github.com/greenplum-db/pxf/commit/83fccf83f73c727948a8fa63dffdfb420ee8cf4d", "message": "Map existing Tomcat properties to Spring Boot #351\n\nMap the following properties used by tomcat\n\n- PXF_PORT\n- PXF_SHUTDOWN_PORT (NO LONGER NEEDED)\n- PXF_JVM_OPTS\n- PXF_MAX_THREADS\n- PXF_DEBUG\n- PXF_OOM_KILL\n\nAlso mapped properties from web.xml\n\nFrom:\n\n           <Connector acceptCount=\"100\"\n                   connectionTimeout=\"20000\"\n                   executor=\"tomcatThreadPool\"\n                   maxKeepAliveRequests=\"15\"\n                   maxHeaderCount=\"30000\"\n                   maxHttpHeaderSize=\"1048576\"\n                   port=\"${connector.http.port}\"\n                   protocol=\"org.apache.coyote.http11.Http11Protocol\"\n                   redirectPort=\"${connector.https.port}\"/>\n\nTo:\n\n    # Settings migrated from web.xml\n    server.server-header=PXF Server\n    server.tomcat.accept-count=100\n    server.tomcat.connection-timeout=20000\n    server.max-http-header-size=1048576\n    pxf.tomcat.max-header-count=30000\n    pxf.tomcat.max-header-size=1048576", "committedDate": "2020-05-11T14:38:12Z", "type": "commit"}, {"oid": "4d17bbdee59da79334501e5a49debc07ad690f48", "url": "https://github.com/greenplum-db/pxf/commit/4d17bbdee59da79334501e5a49debc07ad690f48", "message": "PXF Logging\n\nImplement log4j2 logging configuration", "committedDate": "2020-05-11T14:39:23Z", "type": "commit"}, {"oid": "ea201ae8d426a66550bcd5775fff05e516480ec9", "url": "https://github.com/greenplum-db/pxf/commit/ea201ae8d426a66550bcd5775fff05e516480ec9", "message": "Migrate unit tests to JUnit 5\n\n- Make the project compile", "committedDate": "2020-05-11T14:45:00Z", "type": "commit"}, {"oid": "476faf320f00bcac4e8eb8b9c112deac38bba595", "url": "https://github.com/greenplum-db/pxf/commit/476faf320f00bcac4e8eb8b9c112deac38bba595", "message": "Change REST endpoints when to switch the server to spring boot\n\n- demo profile is fully functional\n- migrated the following endpoints:\n\n  - BridgeResource\n  - FragmenterResource\n  - WritableResource", "committedDate": "2020-05-11T14:52:33Z", "type": "commit"}, {"oid": "5d87c6e123901f59b65af7270ce177ca70c56fef", "url": "https://github.com/greenplum-db/pxf/commit/5d87c6e123901f59b65af7270ce177ca70c56fef", "message": "Update CLI scripts when to switch the server to spring boot\n\nCLI script changes (only change implementation and not the API)\n\n* Remove tomcat download from Makefile\n* Update starts scripts\n* Update stop scripts\n* Update status scripts\n* Update init scripts\n\nWhen we have a working pxf-service. We can start migrating the scripts to start spring boot instead of tomcat", "committedDate": "2020-05-11T14:52:40Z", "type": "commit"}, {"oid": "5d87c6e123901f59b65af7270ce177ca70c56fef", "url": "https://github.com/greenplum-db/pxf/commit/5d87c6e123901f59b65af7270ce177ca70c56fef", "message": "Update CLI scripts when to switch the server to spring boot\n\nCLI script changes (only change implementation and not the API)\n\n* Remove tomcat download from Makefile\n* Update starts scripts\n* Update stop scripts\n* Update status scripts\n* Update init scripts\n\nWhen we have a working pxf-service. We can start migrating the scripts to start spring boot instead of tomcat", "committedDate": "2020-05-11T14:52:40Z", "type": "forcePushed"}, {"oid": "e3fd098d2855cd36c11669852929c730e81ecce8", "url": "https://github.com/greenplum-db/pxf/commit/e3fd098d2855cd36c11669852929c730e81ecce8", "message": "Ensure /usr/local/gpdb6/pxf exists during make install", "committedDate": "2020-05-11T16:13:13Z", "type": "commit"}, {"oid": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "url": "https://github.com/greenplum-db/pxf/commit/6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "message": "Small fixes for Ubuntu", "committedDate": "2020-05-11T17:01:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODU3OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423218579", "bodyText": "should we also check pxf.tomcat.max-header-size=1024", "author": "denalex", "createdAt": "2020-05-11T17:58:13Z", "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/configuration/PxfServerPropertiesTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.greenplum.pxf.api.configuration;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(SpringExtension.class)\n+@EnableConfigurationProperties(value = PxfServerProperties.class)\n+@TestPropertySource(\"classpath:server-config-test.properties\")\n+class PxfServerPropertiesTest {\n+\n+    @Autowired\n+    PxfServerProperties properties;\n+\n+    @Test\n+    public void testPxfConfIsSet() {\n+        assertNotNull(properties.getConf());\n+        assertEquals(\"/path/to/pxf/conf\", properties.getConf());\n+\n+        assertNotNull(properties.getTomcat());\n+        assertEquals(50, properties.getTomcat().getMaxHeaderCount());", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MzYxMA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423643610", "bodyText": "pxf.tomcat.max-header-size is an alias for server.max-http-header-size. It's defined as follows\nserver.max-http-header-size=${pxf.tomcat.max-header-size:1048576}", "author": "frankgh", "createdAt": "2020-05-12T10:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MDE1OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423390159", "bodyText": "this used to be buildProperties.get(\"protocol_version\") in FilterRegistrationBean", "author": "denalex", "createdAt": "2020-05-12T00:12:45Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResource.java", "diffHunk": "@@ -27,35 +27,34 @@\n import org.greenplum.pxf.service.bridge.Bridge;\n import org.greenplum.pxf.service.bridge.BridgeFactory;\n import org.greenplum.pxf.service.bridge.SimpleBridgeFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;\n \n-import javax.servlet.ServletContext;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.StreamingOutput;\n import java.io.DataOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.util.concurrent.locks.ReentrantLock;\n \n /*\n  * This class handles the subpath /<version>/Bridge/ of this\n  * REST component\n  */\n-@Path(\"/\" + Version.PXF_PROTOCOL_VERSION + \"/Bridge/\")\n+@RestController\n+@RequestMapping(\"/pxf/\" + Version.PXF_PROTOCOL_VERSION)", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MzU3MQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423943571", "bodyText": "Removing protocol_version for now until we need it", "author": "frankgh", "createdAt": "2020-05-12T18:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MDE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MDQ3NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423390475", "bodyText": "we are not using jetty either, might update the comment", "author": "denalex", "createdAt": "2020-05-12T00:13:43Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResource.java", "diffHunk": "@@ -27,35 +27,34 @@\n import org.greenplum.pxf.service.bridge.Bridge;\n import org.greenplum.pxf.service.bridge.BridgeFactory;\n import org.greenplum.pxf.service.bridge.SimpleBridgeFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;\n \n-import javax.servlet.ServletContext;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.StreamingOutput;\n import java.io.DataOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.util.concurrent.locks.ReentrantLock;\n \n /*\n  * This class handles the subpath /<version>/Bridge/ of this\n  * REST component\n  */\n-@Path(\"/\" + Version.PXF_PROTOCOL_VERSION + \"/Bridge/\")\n+@RestController\n+@RequestMapping(\"/pxf/\" + Version.PXF_PROTOCOL_VERSION)\n public class BridgeResource extends BaseResource {\n \n     private BridgeFactory bridgeFactory;\n \n     /**\n      * Lock is needed here in the case of a non-thread-safe plugin. Using\n      * synchronized methods is not enough because the bridge work is called by\n-     * jetty ({@link StreamingOutput}), after we are getting out of this class's\n+     * jetty ({@link StreamingResponseBody}), after we are getting out of this class's", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDk1Mg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423394952", "bodyText": "are we sure getDataSource will return the value of path query param ?", "author": "denalex", "createdAt": "2020-05-12T00:29:07Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java", "diffHunk": "@@ -175,10 +163,10 @@ public Response getFragmentsStats(@Context final ServletContext servletContext,\n         FragmentStats fragmentStats = fragmenter.getFragmentStats();\n         String response = FragmentStats.dataToJSON(fragmentStats);\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(FragmentStats.dataToString(fragmentStats, path));\n+            LOG.debug(FragmentStats.dataToString(fragmentStats, context.getDataSource()));", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NTg3Mg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423645872", "bodyText": "we changed the c-client a while ago to send the datasource as part of the headers, and removed it from the query string. Currently, the c-client doesn't implement getFragmentStats, so it's up to us how to implement it.", "author": "frankgh", "createdAt": "2020-05-12T11:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NTUwOQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423395509", "bodyText": "how is it gonna get replaced during build ?", "author": "denalex", "createdAt": "2020-05-12T00:30:53Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/Version.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.greenplum.pxf.service.rest;\n+\n+/**\n+ * PXF protocol version. Any call to PXF resources should include the current\n+ * version e.g. {@code ...pxf/v15/Bridge}\n+ */\n+public class Version {\n+    /**\n+     * Constant which holds current protocol version. Getting replaced with\n+     * actual value on build stage, using pxfProtocolVersion parameter from\n+     * gradle.properties\n+     */\n+    public final static String PXF_PROTOCOL_VERSION = \"v15\";", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NTg0NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423955845", "bodyText": "this will remain constant", "author": "frankgh", "createdAt": "2020-05-12T18:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NTUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODk4MA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423398980", "bodyText": "I like using @Mock better, is it not supported anymore ?", "author": "denalex", "createdAt": "2020-05-12T00:43:30Z", "path": "server/pxf-service/src/test/java/org/greenplum/pxf/service/servlet/SecurityServletFilterTest.java", "diffHunk": "@@ -25,115 +25,109 @@\n import org.greenplum.pxf.api.security.SecureLogin;\n import org.greenplum.pxf.service.SessionId;\n import org.greenplum.pxf.service.UGICache;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Matchers;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.ArgumentMatchers;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n-\n import java.security.PrivilegedExceptionAction;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.eq;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-@RunWith(MockitoJUnitRunner.class)\n public class SecurityServletFilterTest {\n \n-    @Rule\n-    public ExpectedException expectedException = ExpectedException.none();\n-\n     private SecurityServletFilter filter;\n \n-    @Mock\n     private HttpServletRequest mockServletRequest;\n-    @Mock\n     private ServletResponse mockServletResponse;\n-    @Mock\n     private FilterChain mockFilterChain;\n-    @Mock\n     private ConfigurationFactory mockConfigurationFactory;\n-    @Mock\n     private SecureLogin mockSecureLogin;\n-    @Mock\n     private UGICache mockUGICache;\n-    @Mock\n     private Configuration mockConfiguration;\n-    @Mock\n     private UserGroupInformation mockLoginUGI;\n-    @Mock\n     private UserGroupInformation mockProxyUGI;\n \n-    @Captor\n     private ArgumentCaptor<SessionId> session;\n \n-    @Before\n+    @BeforeEach\n     public void setup() {\n+        mockServletRequest = mock(HttpServletRequest.class);\n+        mockServletResponse = mock(ServletResponse.class);\n+        mockFilterChain = mock(FilterChain.class);\n+        mockConfigurationFactory = mock(ConfigurationFactory.class);\n+        mockSecureLogin = mock(SecureLogin.class);\n+        mockUGICache = mock(UGICache.class);\n+        mockConfiguration = mock(Configuration.class);\n+        mockLoginUGI = mock(UserGroupInformation.class);\n+        mockProxyUGI = mock(UserGroupInformation.class);", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0NA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423649144", "bodyText": "it is , but we need to bring new dependencies, I wanted to keep it as simple as possible", "author": "frankgh", "createdAt": "2020-05-12T11:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODk4MA=="}], "type": "inlineReview"}, {"oid": "d0842f8559b0c7414601dd8629831ac6202138cb", "url": "https://github.com/greenplum-db/pxf/commit/d0842f8559b0c7414601dd8629831ac6202138cb", "message": "Address PR feedback", "committedDate": "2020-05-12T17:23:38Z", "type": "commit"}, {"oid": "99b849843a33850bbb59f54855b4da0208b67026", "url": "https://github.com/greenplum-db/pxf/commit/99b849843a33850bbb59f54855b4da0208b67026", "message": "Remove RUN_AS_USER feature", "committedDate": "2020-05-12T17:23:59Z", "type": "commit"}, {"oid": "9dab710ec1140de57bd0b9c127e6438b8bcac357", "url": "https://github.com/greenplum-db/pxf/commit/9dab710ec1140de57bd0b9c127e6438b8bcac357", "message": "Fix reset. Remove version from endpoint (we can add it later if we need it)", "committedDate": "2020-05-12T18:14:37Z", "type": "commit"}, {"oid": "1407b9694a841635f65cad4acc86eca7a18b4588", "url": "https://github.com/greenplum-db/pxf/commit/1407b9694a841635f65cad4acc86eca7a18b4588", "message": "Add version dynamically to pxf-service file", "committedDate": "2020-05-12T21:11:14Z", "type": "commit"}]}