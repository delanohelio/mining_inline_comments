{"pr_number": 112, "pr_title": "feat: sample - add col load append", "pr_createdAt": "2020-01-16T16:42:41Z", "pr_url": "https://github.com/googleapis/java-bigquery/pull/112", "timeline": [{"oid": "2aad0c0b3c58a8920460f4f4cec51ec46f4f52ec", "url": "https://github.com/googleapis/java-bigquery/commit/2aad0c0b3c58a8920460f4f4cec51ec46f4f52ec", "message": "feat: new sample - Add Column Load Append", "committedDate": "2020-01-15T16:25:18Z", "type": "commit"}, {"oid": "65fe0ffce612c4624ca6be42fd9cbebde0640255", "url": "https://github.com/googleapis/java-bigquery/commit/65fe0ffce612c4624ca6be42fd9cbebde0640255", "message": "feat: add column load append work in progress", "committedDate": "2020-01-16T16:40:22Z", "type": "commit"}, {"oid": "d14cd875526d11327546979590c4f0b88c62daab", "url": "https://github.com/googleapis/java-bigquery/commit/d14cd875526d11327546979590c4f0b88c62daab", "message": "update comment", "committedDate": "2020-01-16T17:04:36Z", "type": "commit"}, {"oid": "2ae7b17300cfd8685766bf89516837695524a144", "url": "https://github.com/googleapis/java-bigquery/commit/2ae7b17300cfd8685766bf89516837695524a144", "message": "updates", "committedDate": "2020-01-17T17:00:28Z", "type": "commit"}, {"oid": "8ef1443581108c803599f5fa595335b6d22f9869", "url": "https://github.com/googleapis/java-bigquery/commit/8ef1443581108c803599f5fa595335b6d22f9869", "message": "updates", "committedDate": "2020-01-17T20:20:52Z", "type": "commit"}, {"oid": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324", "url": "https://github.com/googleapis/java-bigquery/commit/fa6459ec25d93f874ef739b01ecd23fcb2bf0324", "message": "fix build issue", "committedDate": "2020-01-17T21:08:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjY4MQ==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r368182681", "bodyText": "nit: Probably InvalidStateException would make more sense?\nRuntimeException is unchecked, making it a bad choice to suggest to users.", "author": "kurtisvg", "createdAt": "2020-01-17T23:57:53Z", "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        throw new RuntimeException(\"Job no longer exists\");", "originalCommit": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0NTQ5MQ==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r368245491", "bodyText": "InvalidStateException is not available so I will print out the error message instead", "author": "stephaniewang526", "createdAt": "2020-01-18T19:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM2MjQ2NA==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369362464", "bodyText": "I think there's a miscommunication on error handling here.\nIf something goes wrong, we definitely want to throw an exception - but we want a checked exception vs unchecked.\nCheck out this article for a breakdown of checked v unchecked.", "author": "kurtisvg", "createdAt": "2020-01-22T04:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2Nzc2OQ==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369667769", "bodyText": "Throwing Exception so that it's checked.", "author": "stephaniewang526", "createdAt": "2020-01-22T16:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r368182838", "bodyText": "nit: It there error throwable? e.g. throw loadJob.getStatus().getError().toString()? Else use a checked error.", "author": "kurtisvg", "createdAt": "2020-01-17T23:58:44Z", "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        throw new RuntimeException(\"Job no longer exists\");\n+      } else if (completedJob.getStatus().getError() != null) {\n+        // You can also look at queryJob.getStatus().getExecutionErrors() for all\n+        // errors, not just the latest one.\n+        throw new RuntimeException(loadJob.getStatus().getError().toString());", "originalCommit": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0NTU1MA==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r368245550", "bodyText": "yes - in fact, it helped me debug when I wasn't able to figure out what was wrong with the job.", "author": "stephaniewang526", "createdAt": "2020-01-18T19:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNTE1MQ==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369125151", "bodyText": "What I meant was can you throw the Error directly - using throw loadJob.getStatus().getError()?\nOtherwise you really shouldn't throw a unchecked exceptions like this - checked exceptions are preferred. (A regular Exception is considered checked, while RuntimeExceptions are unchecked.)", "author": "kurtisvg", "createdAt": "2020-01-21T16:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2NTgxNg==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369165816", "bodyText": "Oh I see... I'm updating this to be print it out since loadJob.getStatus().getError() is a String instead of Throwable.", "author": "stephaniewang526", "createdAt": "2020-01-21T18:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM2MjYxNw==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369362617", "bodyText": "We want to throw - it should just be a checked exception.", "author": "kurtisvg", "createdAt": "2020-01-22T04:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA=="}], "type": "inlineReview"}, {"oid": "e721562377559e2b699cb068bd56f9afb3527aed", "url": "https://github.com/googleapis/java-bigquery/commit/e721562377559e2b699cb068bd56f9afb3527aed", "message": "update based on comments", "committedDate": "2020-01-18T20:00:16Z", "type": "commit"}, {"oid": "b67c04a2822a6758ad8f85ee54cdde4258f74a56", "url": "https://github.com/googleapis/java-bigquery/commit/b67c04a2822a6758ad8f85ee54cdde4258f74a56", "message": "update based on comments", "committedDate": "2020-01-21T18:21:56Z", "type": "commit"}, {"oid": "c3dc47cb2c7c331401c39cdbe59e00d0978746eb", "url": "https://github.com/googleapis/java-bigquery/commit/c3dc47cb2c7c331401c39cdbe59e00d0978746eb", "message": "update exception handling", "committedDate": "2020-01-22T16:31:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzE0Nw==", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369673147", "bodyText": "nit: This should probably throw an Exception as well.", "author": "kurtisvg", "createdAt": "2020-01-22T16:41:36Z", "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        System.out.println(\"Job not executed since it no longer exists.\");", "originalCommit": "c3dc47cb2c7c331401c39cdbe59e00d0978746eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "02e53702f478a7b92b80690fe415e7760a6fc28a", "url": "https://github.com/googleapis/java-bigquery/commit/02e53702f478a7b92b80690fe415e7760a6fc28a", "message": "update exception handling", "committedDate": "2020-01-22T16:45:05Z", "type": "commit"}]}