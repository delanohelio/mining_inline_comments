{"pr_number": 13161, "pr_title": "[WFLY-13316]: MicroProfile OpenTracing integration requires scope request.", "pr_createdAt": "2020-04-01T08:38:21Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13161", "timeline": [{"oid": "80e053595bf4cdd61857e446404a7ef07df4626e", "url": "https://github.com/wildfly/wildfly/commit/80e053595bf4cdd61857e446404a7ef07df4626e", "message": "[WFLY-13316]: MicroProfile OpenTracing integration requires scope request.\n\n * Removing the producer and using a CDI extension injecting\n    'synthetic' beans into the deployments.\n * ServletContext for CDI injection is no longer used.\n\nJira: https://issues.redhat.com/browse/WFLY-13316", "committedDate": "2020-04-01T09:00:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MzEyMA==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401473120", "bodyText": "Remove this TODO, according to the log message, it is intentional to remove any other Trace implementation.", "author": "manovotn", "createdAt": "2020-04-01T09:21:07Z", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -19,26 +19,45 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n-\n package org.wildfly.microprofile.opentracing.smallrye;\n \n import io.opentracing.Tracer;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n \n import javax.enterprise.event.Observes;\n-import javax.enterprise.inject.spi.BeanManager;\n-import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.AfterBeanDiscovery;\n+import javax.enterprise.inject.spi.BeforeShutdown;\n import javax.enterprise.inject.spi.Extension;\n import javax.enterprise.inject.spi.ProcessAnnotatedType;\n \n public class TracingCDIExtension implements Extension {\n \n-    public void observeBeforeBeanDiscovery(@Observes BeforeBeanDiscovery bbd, BeanManager manager) {\n-        String extensionName = TracingCDIExtension.class.getName();\n-        bbd.addAnnotatedType(manager.createAnnotatedType(TracerProducer.class), extensionName + \"-\" + TracerProducer.class.getName());\n+    private static final Map<ClassLoader, Tracer> TRACERS = Collections.synchronizedMap(new WeakHashMap<>());\n+\n+    public static void registerApplicationTracer(ClassLoader classLoader, Tracer tracerInstance) {\n+        TRACERS.put(classLoader, tracerInstance);\n+    }\n+\n+    public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n+        abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n+            return TRACERS.get(Thread.currentThread().getContextClassLoader());\n+        });\n     }\n \n+    // TODO I suppose this somehow prevents other tracer impls from being picked up? Needs confirmation", "originalCommit": "80e053595bf4cdd61857e446404a7ef07df4626e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3Nzk4NA==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401477984", "bodyText": "You could probably remove this now, the only usage is in TracerDynamicFeature which again needs req. context active (not sure if it can be a problem there). Instead, you could either @Inject the Tracer if that's supported (not sure now, I might just be confused from Quarkus) or use CDI.current() to grab it.", "author": "manovotn", "createdAt": "2020-04-01T09:28:37Z", "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/TracingDeploymentProcessor.java", "diffHunk": "@@ -210,6 +211,7 @@ private void injectTracer(DeploymentPhaseContext deploymentPhaseContext, Capabil\n                 tracer = WildFlyTracerFactory.getTracer(tracerConfigurationName, serviceName);\n             }\n         }\n+        TracingCDIExtension.registerApplicationTracer(moduleCL, tracer);\n         deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(SMALLRYE_OPENTRACING_SERVICE_NAME, serviceName));\n         deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(SMALLRYE_OPENTRACING_TRACER, tracer));", "originalCommit": "80e053595bf4cdd61857e446404a7ef07df4626e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMjQwNw==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401602407", "bodyText": "It broke a lot of tests related to CDI", "author": "ehsavoie", "createdAt": "2020-04-01T13:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3Nzk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTE4Nw==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401481187", "bodyText": "Maybe also add .scope(ApplicationScoped.class). This won't have any functional impact (apart from using proxy) as you are already sharing the instance, but it is a \"cleaner\" way to declare a bean that in fact is app-wide.", "author": "manovotn", "createdAt": "2020-04-01T09:33:27Z", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -19,26 +19,45 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n-\n package org.wildfly.microprofile.opentracing.smallrye;\n \n import io.opentracing.Tracer;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n \n import javax.enterprise.event.Observes;\n-import javax.enterprise.inject.spi.BeanManager;\n-import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.AfterBeanDiscovery;\n+import javax.enterprise.inject.spi.BeforeShutdown;\n import javax.enterprise.inject.spi.Extension;\n import javax.enterprise.inject.spi.ProcessAnnotatedType;\n \n public class TracingCDIExtension implements Extension {\n \n-    public void observeBeforeBeanDiscovery(@Observes BeforeBeanDiscovery bbd, BeanManager manager) {\n-        String extensionName = TracingCDIExtension.class.getName();\n-        bbd.addAnnotatedType(manager.createAnnotatedType(TracerProducer.class), extensionName + \"-\" + TracerProducer.class.getName());\n+    private static final Map<ClassLoader, Tracer> TRACERS = Collections.synchronizedMap(new WeakHashMap<>());\n+\n+    public static void registerApplicationTracer(ClassLoader classLoader, Tracer tracerInstance) {\n+        TRACERS.put(classLoader, tracerInstance);\n+    }\n+\n+    public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n+        abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {", "originalCommit": "80e053595bf4cdd61857e446404a7ef07df4626e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MjI5OQ==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401592299", "bodyText": "@ehsavoie Did this input get dropped?", "author": "bstansberry", "createdAt": "2020-04-01T12:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NzIyMw==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401597223", "bodyText": "We talked on zulip. Apparently the proxy interferes with some places where the contextual instance is needed.", "author": "manovotn", "createdAt": "2020-04-01T13:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMTkyNg==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401601926", "bodyText": "I'm currently trying to fix the test suite which is talking more time then I thought", "author": "ehsavoie", "createdAt": "2020-04-01T13:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NDEyNQ==", "url": "https://github.com/wildfly/wildfly/pull/13161#discussion_r401654125", "bodyText": "This change breaks with ear as the tracer will now be shared across all the ear and so all its wars", "author": "ehsavoie", "createdAt": "2020-04-01T14:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4MTE4Nw=="}], "type": "inlineReview"}, {"oid": "46dfa6fbaf9b4439994f6af0de7450d6f0a9d90b", "url": "https://github.com/wildfly/wildfly/commit/46dfa6fbaf9b4439994f6af0de7450d6f0a9d90b", "message": "[WFLY-13316]: MicroProfile OpenTracing integration requires scope request.\n\n * Removing the producer and using a CDI extension injecting 'synthetic' beans into the deployments.\n * ServletContext for CDI injection is no longer used.\n\nJira: https://issues.redhat.com/browse/WFLY-13316", "committedDate": "2020-04-01T14:33:17Z", "type": "commit"}, {"oid": "46dfa6fbaf9b4439994f6af0de7450d6f0a9d90b", "url": "https://github.com/wildfly/wildfly/commit/46dfa6fbaf9b4439994f6af0de7450d6f0a9d90b", "message": "[WFLY-13316]: MicroProfile OpenTracing integration requires scope request.\n\n * Removing the producer and using a CDI extension injecting 'synthetic' beans into the deployments.\n * ServletContext for CDI injection is no longer used.\n\nJira: https://issues.redhat.com/browse/WFLY-13316", "committedDate": "2020-04-01T14:33:17Z", "type": "forcePushed"}]}