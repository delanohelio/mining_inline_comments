{"pr_number": 13716, "pr_title": " [WFLY-9213]: Implement the Pause method for a Topic via Management APIs", "pr_createdAt": "2020-11-17T14:22:54Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13716", "timeline": [{"oid": "5102f743d198dfe6a6e2f0e1a42921a955160b97", "url": "https://github.com/wildfly/wildfly/commit/5102f743d198dfe6a6e2f0e1a42921a955160b97", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-11-17T17:09:45Z", "type": "forcePushed"}, {"oid": "42adb5e6b64f11ef50a47221c50b78329c1b5d84", "url": "https://github.com/wildfly/wildfly/commit/42adb5e6b64f11ef50a47221c50b78329c1b5d84", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-11-20T17:59:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzQzNw==", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r530583437", "bodyText": "Perhaps add a separate catch for RuntimeException and just rethrow it instead of wrapping?\nSame comment applies to resume and isPaused.", "author": "bstansberry", "createdAt": "2020-11-25T18:54:17Z", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSTopicControlHandler.java", "diffHunk": "@@ -388,6 +407,30 @@ private String listSubscribersInfosAsJSON(final DurabilityType durability, Addre\n       }\n    }\n \n+   private void pause(AddressControl control, boolean persist) {\n+       try {\n+       control.pause(persist);\n+       } catch (Exception e) {\n+         throw new RuntimeException(e);", "originalCommit": "42adb5e6b64f11ef50a47221c50b78329c1b5d84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNDM3MQ==", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r531704371", "bodyText": "There is actually a way to rethrow both without wrapping in a RuntimeException - see https://github.com/resteasy/Resteasy/blob/43f46228bbf8278a96648b48309f71d5ccad1e4c/resteasy-core/src/main/java/org/jboss/resteasy/core/SynchronousDispatcher.java#L186", "author": "kabir", "createdAt": "2020-11-27T17:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTc2NQ==", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r531719765", "bodyText": "ok, using Kabir's trick. This should be applied to the rest of the code though in a separate commit", "author": "ehsavoie", "createdAt": "2020-11-27T18:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzQzNw=="}], "type": "inlineReview"}, {"oid": "ccfa2a33f76710327fb66d734ff56cd71a831003", "url": "https://github.com/wildfly/wildfly/commit/ccfa2a33f76710327fb66d734ff56cd71a831003", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-11-26T17:33:43Z", "type": "forcePushed"}, {"oid": "f98af993c53a12f086c6b781f5b15f80260d232f", "url": "https://github.com/wildfly/wildfly/commit/f98af993c53a12f086c6b781f5b15f80260d232f", "message": "Using the rethrow method", "committedDate": "2020-11-27T18:24:17Z", "type": "forcePushed"}, {"oid": "db1876254f38586a3123a863f7c8ca1c6bfd60ec", "url": "https://github.com/wildfly/wildfly/commit/db1876254f38586a3123a863f7c8ca1c6bfd60ec", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n* Using the rethrow method trick\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-12-03T18:20:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNzEzMw==", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r536037133", "bodyText": "isTopicPaused would IMHO improve readability. WDYT?", "author": "honza-kasik", "createdAt": "2020-12-04T11:37:53Z", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/RuntimeJMSTopicManagementTestCase.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Copyright 2020 JBoss by Red Hat.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import static javax.jms.JMSContext.AUTO_ACKNOWLEDGE;\n+import static org.jboss.as.controller.client.helpers.ClientConstants.NAME;\n+import static org.jboss.as.controller.client.helpers.ClientConstants.VALUE;\n+import static org.jboss.as.controller.client.helpers.ClientConstants.WRITE_ATTRIBUTE_OPERATION;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.Properties;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+import javax.jms.Topic;\n+import javax.jms.TopicSubscriber;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.helpers.ClientConstants;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunAsClient()\n+@RunWith(Arquillian.class)\n+public class RuntimeJMSTopicManagementTestCase {\n+\n+    private static final String EXPORTED_PREFIX = \"java:jboss/exported/\";\n+\n+    private static long count = System.currentTimeMillis();\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas\";\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    @Test\n+    public void testPauseAndResumePersisted() throws IOException, NamingException, JMSException, InterruptedException {\n+        count = System.currentTimeMillis();\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        InitialContext remoteContext = createJNDIContext();\n+        ManagementClient managementClient = createManagementClient();\n+        JMSOperations adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.createJmsTopic(getTopicName(), EXPORTED_PREFIX + getTopicJndiName());\n+        addSecuritySettings(adminSupport);\n+        assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+        ConnectionFactory cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        Topic topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+\n+        final String subscriptionName = \"pauseJMSTopicPersisted\";\n+        try (Connection conn = cf.createConnection(\"guest\", \"guest\")) {\n+            conn.setClientID(\"sender\");\n+            try (Session session = conn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                conn.start();\n+                try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+                    consumerConn.setClientID(\"consumer\");\n+                    try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                        consumerConn.start();\n+                        TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                        pauseTopic(managementClient, true);\n+                        MessageProducer producer = session.createProducer(topic);\n+                        producer.send(session.createTextMessage(\"A\"));\n+\n+                        TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                        Assert.assertNull(\"The message was received by the consumer, this is wrong as the connection is paused\", message);\n+                        Assert.assertEquals(1, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+                    }\n+                }\n+            }\n+        }\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        remoteContext = createJNDIContext();\n+        managementClient = createManagementClient();\n+        assertTrue(\"Topic should be paused\", readTopicStatus(managementClient));\n+        cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+        try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+            consumerConn.setClientID(\"consumer\");\n+            try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE);) {\n+                consumerConn.start();\n+                TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNull(\"The message was received by the consumer, this is wrong as the connection is paused\", message);\n+                Assert.assertEquals(1, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+                resumeTopic(managementClient);\n+                assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+                message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNotNull(\"The message was not received by the consumer, this is wrong as the connection is resumed\", message);\n+                Assert.assertEquals(\"A\", message.getText());\n+                Thread.sleep(TimeoutUtil.adjust(500));\n+                Assert.assertEquals(0, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+            }\n+        }\n+        adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.removeJmsTopic(getTopicName());\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+    }\n+\n+    @Test\n+    public void testPauseAndResume() throws IOException, NamingException, JMSException, InterruptedException {\n+        count = System.currentTimeMillis();\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        InitialContext remoteContext = createJNDIContext();\n+        ManagementClient managementClient = createManagementClient();\n+        JMSOperations adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.createJmsTopic(getTopicName(), EXPORTED_PREFIX + getTopicJndiName());\n+        addSecuritySettings(adminSupport);\n+        assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+        ConnectionFactory cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        Topic topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+\n+        final String subscriptionName = \"pauseJMSTopic\";\n+        try (Connection conn = cf.createConnection(\"guest\", \"guest\")) {\n+            conn.setClientID(\"sender\");\n+            try (Session session = conn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                conn.start();\n+                try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+                    consumerConn.setClientID(\"consumer\");\n+                    try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                        consumerConn.start();\n+                        TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                        pauseTopic(managementClient, false);\n+                        MessageProducer producer = session.createProducer(topic);\n+                        producer.send(session.createTextMessage(\"A\"));\n+\n+                        TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                        Assert.assertNull(\"The message was received by the consumer, this is wrong as the connection is paused\", message);\n+                        Assert.assertEquals(1, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+                        consumer.close();\n+                        producer.close();\n+                    }\n+                }\n+            }\n+        }\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        remoteContext = createJNDIContext();\n+        managementClient = createManagementClient();\n+        assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+        cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+        try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+            consumerConn.setClientID(\"consumer\");\n+            try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE);) {\n+                consumerConn.start();\n+                TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNotNull(\"The message was not received by the consumer, this is wrong as the connection is resumed\", message);\n+                Assert.assertEquals(\"A\", message.getText());\n+                Thread.sleep(TimeoutUtil.adjust(500));\n+                Assert.assertEquals(0, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+            }\n+        }\n+        adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.removeJmsTopic(getTopicName());\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+    }\n+\n+    private ModelNode getTopicAddress() {\n+        return PathAddress.parseCLIStyleAddress(\"/subsystem=messaging-activemq/server=default/jms-topic=\" + getTopicName()).toModelNode();\n+    }\n+\n+    private String getTopicName() {\n+        return getClass().getSimpleName() + count;\n+    }\n+\n+    private String getTopicJndiName() {\n+        return \"topic/\" + getTopicName();\n+    }\n+\n+    private ModelNode pauseTopic(ManagementClient managementClient, boolean persist) throws IOException {\n+        ModelNode operation = Operations.createOperation(\"pause\", getTopicAddress());\n+        operation.get(\"persist\").set(persist);\n+        return execute(managementClient.getControllerClient(), operation, true);\n+    }\n+\n+    private int countMessageSubscriptions(ManagementClient managementClient, String clientID, String subscriptionName) throws IOException {\n+        ModelNode operation = Operations.createOperation(\"count-messages-for-subscription\", getTopicAddress());\n+        operation.get(\"client-id\").set(clientID);\n+        operation.get(\"subscription-name\").set(subscriptionName);\n+        return execute(managementClient.getControllerClient(), operation, true).asInt();\n+    }\n+\n+    private ModelNode resumeTopic(ManagementClient managementClient) throws IOException {\n+        return execute(managementClient.getControllerClient(), Operations.createOperation(\"resume\", getTopicAddress()), true);\n+    }\n+\n+    private ModelNode execute(final ModelControllerClient client, final ModelNode op, final boolean expectSuccess) throws IOException {\n+        ModelNode response = client.execute(op);\n+        if (expectSuccess) {\n+            assertTrue(response.toJSONString(true), Operations.isSuccessfulOutcome(response));\n+            return Operations.readResult(response);\n+        }\n+        assertEquals(\"failed\", response.get(\"outcome\").asString());\n+        return response.get(\"failure-description\");\n+    }\n+\n+    private boolean readTopicStatus(ManagementClient managementClient) throws IOException {", "originalCommit": "db1876254f38586a3123a863f7c8ca1c6bfd60ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95a6264d5961acfedd7488aebd04c49ed736191d", "url": "https://github.com/wildfly/wildfly/commit/95a6264d5961acfedd7488aebd04c49ed736191d", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n* Using the rethrow method trick\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-12-04T14:59:24Z", "type": "forcePushed"}, {"oid": "e628d4d90df0da31a67d3108993668d99ae5efaf", "url": "https://github.com/wildfly/wildfly/commit/e628d4d90df0da31a67d3108993668d99ae5efaf", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n* Using the rethrow method trick\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-12-07T15:43:38Z", "type": "forcePushed"}, {"oid": "d83d85e93208f3141a1ef2a049d44bf348a2c5b6", "url": "https://github.com/wildfly/wildfly/commit/d83d85e93208f3141a1ef2a049d44bf348a2c5b6", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n* Using the rethrow method trick\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-12-11T10:44:53Z", "type": "commit"}, {"oid": "d83d85e93208f3141a1ef2a049d44bf348a2c5b6", "url": "https://github.com/wildfly/wildfly/commit/d83d85e93208f3141a1ef2a049d44bf348a2c5b6", "message": "[WFLY-9213]: Implement the Pause method for a Topic via Management APIs\n\n* Adding a `pause` method on JMS Topics\n* Adding a `resume` method on JMS Topics\n* Adding a `paused` runtime attribute on JMS Topics\n* Using the rethrow method trick\n\nJira: https://issues.jboss.org/browse/WFLY-9213", "committedDate": "2020-12-11T10:44:53Z", "type": "forcePushed"}]}