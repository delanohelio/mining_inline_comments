{"pr_number": 13745, "pr_title": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer", "pr_createdAt": "2020-11-27T14:27:03Z", "pr_url": "https://github.com/wildfly/wildfly/pull/13745", "timeline": [{"oid": "858df5bcdcbcd9baae67c59d01f4e539a853e6a3", "url": "https://github.com/wildfly/wildfly/commit/858df5bcdcbcd9baae67c59d01f4e539a853e6a3", "message": "[WFLY-13959]: WildFly management API should allow configuration of Apache Artemis broker's critical analyzer.\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2020-11-27T17:31:56Z", "type": "forcePushed"}, {"oid": "aeda60809ecedf249dbb7621cc2db1388040761d", "url": "https://github.com/wildfly/wildfly/commit/aeda60809ecedf249dbb7621cc2db1388040761d", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-01-22T14:29:37Z", "type": "forcePushed"}, {"oid": "fab9bd3c6baeba97e836418184d8341a728915c9", "url": "https://github.com/wildfly/wildfly/commit/fab9bd3c6baeba97e836418184d8341a728915c9", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-01-22T14:35:12Z", "type": "forcePushed"}, {"oid": "499108560dcda4ba737c343362d3b9857bbd2f1e", "url": "https://github.com/wildfly/wildfly/commit/499108560dcda4ba737c343362d3b9857bbd2f1e", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-02T14:54:50Z", "type": "forcePushed"}, {"oid": "14e595f3b3855a0c476377c0eec4c308e541ed43", "url": "https://github.com/wildfly/wildfly/commit/14e595f3b3855a0c476377c0eec4c308e541ed43", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-08T11:29:51Z", "type": "forcePushed"}, {"oid": "a35f13d2a467b98fb37ce927d18d8e1c974a4a61", "url": "https://github.com/wildfly/wildfly/commit/a35f13d2a467b98fb37ce927d18d8e1c974a4a61", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-08T11:30:55Z", "type": "forcePushed"}, {"oid": "bf2da0eff1f79cc2d7cb1a52880a8ed72ef67993", "url": "https://github.com/wildfly/wildfly/commit/bf2da0eff1f79cc2d7cb1a52880a8ed72ef67993", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-09T18:36:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY2Nzk0OQ==", "url": "https://github.com/wildfly/wildfly/pull/13745#discussion_r573667949", "bodyText": "removeRules already seems to ignore exceptions. Is there a reason for try-catch block?", "author": "honza-kasik", "createdAt": "2021-02-10T11:54:30Z", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CriticalAnalyzerTestCase.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2021 JBoss by Red Hat.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.UnknownHostException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Properties;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSProducer;\n+import javax.jms.Queue;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestLogHandlerSetupTask;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.util.LoggingUtil;\n+import org.jboss.byteman.agent.submit.Submit;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class CriticalAnalyzerTestCase {\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas-byteman\";\n+    private static final String EXPORTED_PREFIX = \"java:jboss/exported/\";\n+    private static final ModelNode AIO_DISABLED_ADDRESS = Operations.createAddress(\"system-property\", \"org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory.DISABLED\");\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    private LoggerSetup loggerSetup;\n+    private ManagementClient managementClient;\n+\n+    private final Submit bytemanSubmit = new Submit(\n+            System.getProperty(\"byteman.server.ipaddress\", Submit.DEFAULT_ADDRESS),\n+            Integer.getInteger(\"byteman.server.port\", Submit.DEFAULT_PORT));\n+\n+    private void deployRules() throws Exception {\n+        bytemanSubmit.addRulesFromResources(Collections.singletonList(\n+                CriticalAnalyzerTestCase.class.getClassLoader().getResourceAsStream(\"byteman/CriticalAnalyzerTestCase.btm\")));\n+    }\n+\n+    private void removeRules() {\n+        try {\n+            bytemanSubmit.deleteAllRules();\n+        } catch (Exception ex) {\n+\n+        }\n+    }\n+\n+    @Before\n+    public void setup() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        loggerSetup = new LoggerSetup();\n+        managementClient = createManagementClient();\n+        loggerSetup.setup(managementClient, DEFAULT_FULL_JBOSSAS);\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.createJmsQueue(\"critical\", EXPORTED_PREFIX + \"queue/critical\");\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-policy\", \"SHUTDOWN\"));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-enabled\", ModelNode.TRUE));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-check-period\", new ModelNode(100L)));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-timeout\", new ModelNode(1000L)));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        managementClient = createManagementClient();\n+    }\n+\n+    @After\n+    public void cleanAll() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        try {\n+            removeRules();", "originalCommit": "bf2da0eff1f79cc2d7cb1a52880a8ed72ef67993", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY3MTQwMQ==", "url": "https://github.com/wildfly/wildfly/pull/13745#discussion_r573671401", "bodyText": "Can you please add a short description?", "author": "honza-kasik", "createdAt": "2021-02-10T12:00:12Z", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CriticalAnalyzerTestCase.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2021 JBoss by Red Hat.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.UnknownHostException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Properties;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSProducer;\n+import javax.jms.Queue;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestLogHandlerSetupTask;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.util.LoggingUtil;\n+import org.jboss.byteman.agent.submit.Submit;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class CriticalAnalyzerTestCase {\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas-byteman\";\n+    private static final String EXPORTED_PREFIX = \"java:jboss/exported/\";\n+    private static final ModelNode AIO_DISABLED_ADDRESS = Operations.createAddress(\"system-property\", \"org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory.DISABLED\");\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    private LoggerSetup loggerSetup;\n+    private ManagementClient managementClient;\n+\n+    private final Submit bytemanSubmit = new Submit(\n+            System.getProperty(\"byteman.server.ipaddress\", Submit.DEFAULT_ADDRESS),\n+            Integer.getInteger(\"byteman.server.port\", Submit.DEFAULT_PORT));\n+\n+    private void deployRules() throws Exception {\n+        bytemanSubmit.addRulesFromResources(Collections.singletonList(\n+                CriticalAnalyzerTestCase.class.getClassLoader().getResourceAsStream(\"byteman/CriticalAnalyzerTestCase.btm\")));\n+    }\n+\n+    private void removeRules() {\n+        try {\n+            bytemanSubmit.deleteAllRules();\n+        } catch (Exception ex) {\n+\n+        }\n+    }\n+\n+    @Before\n+    public void setup() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        loggerSetup = new LoggerSetup();\n+        managementClient = createManagementClient();\n+        loggerSetup.setup(managementClient, DEFAULT_FULL_JBOSSAS);\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.createJmsQueue(\"critical\", EXPORTED_PREFIX + \"queue/critical\");\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-policy\", \"SHUTDOWN\"));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-enabled\", ModelNode.TRUE));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-check-period\", new ModelNode(100L)));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-timeout\", new ModelNode(1000L)));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        managementClient = createManagementClient();\n+    }\n+\n+    @After\n+    public void cleanAll() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        try {\n+            removeRules();\n+        } catch (Exception e) {\n+        }\n+        loggerSetup.tearDown(managementClient, DEFAULT_FULL_JBOSSAS);\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.removeJmsQueue(\"critical\");\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-policy\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-enabled\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-check-period\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-timeout\"));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+    }\n+\n+    private static ManagementClient createManagementClient() throws UnknownHostException {\n+        return new ManagementClient(\n+                TestSuiteEnvironment.getModelControllerClient(),\n+                TestSuiteEnvironment.formatPossibleIpv6Address(TestSuiteEnvironment.getServerAddress()),\n+                TestSuiteEnvironment.getServerPort(),\n+                \"remote+http\");\n+    }\n+\n+    @Test\n+    public void testCriticalAnalyzer() throws Exception {", "originalCommit": "bf2da0eff1f79cc2d7cb1a52880a8ed72ef67993", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY3MTUyNQ==", "url": "https://github.com/wildfly/wildfly/pull/13745#discussion_r573671525", "bodyText": "Can you please add a short description?", "author": "honza-kasik", "createdAt": "2021-02-10T12:00:24Z", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CriticalAnalyzerTestCase.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2021 JBoss by Red Hat.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.UnknownHostException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Properties;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSProducer;\n+import javax.jms.Queue;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestLogHandlerSetupTask;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.util.LoggingUtil;\n+import org.jboss.byteman.agent.submit.Submit;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class CriticalAnalyzerTestCase {\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas-byteman\";\n+    private static final String EXPORTED_PREFIX = \"java:jboss/exported/\";\n+    private static final ModelNode AIO_DISABLED_ADDRESS = Operations.createAddress(\"system-property\", \"org.apache.activemq.artemis.core.io.aio.AIOSequentialFileFactory.DISABLED\");\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    private LoggerSetup loggerSetup;\n+    private ManagementClient managementClient;\n+\n+    private final Submit bytemanSubmit = new Submit(\n+            System.getProperty(\"byteman.server.ipaddress\", Submit.DEFAULT_ADDRESS),\n+            Integer.getInteger(\"byteman.server.port\", Submit.DEFAULT_PORT));\n+\n+    private void deployRules() throws Exception {\n+        bytemanSubmit.addRulesFromResources(Collections.singletonList(\n+                CriticalAnalyzerTestCase.class.getClassLoader().getResourceAsStream(\"byteman/CriticalAnalyzerTestCase.btm\")));\n+    }\n+\n+    private void removeRules() {\n+        try {\n+            bytemanSubmit.deleteAllRules();\n+        } catch (Exception ex) {\n+\n+        }\n+    }\n+\n+    @Before\n+    public void setup() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        loggerSetup = new LoggerSetup();\n+        managementClient = createManagementClient();\n+        loggerSetup.setup(managementClient, DEFAULT_FULL_JBOSSAS);\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.createJmsQueue(\"critical\", EXPORTED_PREFIX + \"queue/critical\");\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-policy\", \"SHUTDOWN\"));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-enabled\", ModelNode.TRUE));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-check-period\", new ModelNode(100L)));\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-timeout\", new ModelNode(1000L)));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        managementClient = createManagementClient();\n+    }\n+\n+    @After\n+    public void cleanAll() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        try {\n+            removeRules();\n+        } catch (Exception e) {\n+        }\n+        loggerSetup.tearDown(managementClient, DEFAULT_FULL_JBOSSAS);\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.removeJmsQueue(\"critical\");\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-policy\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-enabled\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-check-period\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"critical-analyzer-timeout\"));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+    }\n+\n+    private static ManagementClient createManagementClient() throws UnknownHostException {\n+        return new ManagementClient(\n+                TestSuiteEnvironment.getModelControllerClient(),\n+                TestSuiteEnvironment.formatPossibleIpv6Address(TestSuiteEnvironment.getServerAddress()),\n+                TestSuiteEnvironment.getServerPort(),\n+                \"remote+http\");\n+    }\n+\n+    @Test\n+    public void testCriticalAnalyzer() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        InitialContext remoteContext = createJNDIContext();\n+        managementClient = createManagementClient();\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        ConnectionFactory cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        Queue queue = (Queue) remoteContext.lookup(\"queue/critical\");\n+        deployRules();\n+        try (JMSContext context = cf.createContext(\"guest\", \"guest\", JMSContext.AUTO_ACKNOWLEDGE)) {\n+            JMSProducer producer = context.createProducer();\n+            for (int i = 0; i < 20; i++) {\n+                TextMessage message = context.createTextMessage(RandomStringUtils.randomAlphabetic(10));\n+                producer.send(queue, message);\n+            }\n+            Assert.fail(\"Critical analyzer should have kicked in\");\n+        } catch (javax.jms.JMSRuntimeException ex) {\n+            Assert.assertTrue(\"Log should contains ActiveMQ connection failure error log message: [AMQ219016]\", ex.getMessage().contains(\"AMQ219016\"));\n+            Assert.assertTrue(\"Log should contains ActiveMQ critical measure \", LoggingUtil.hasLogMessage(managementClient, \"artemis-log\", \"\",\n+                    (line) -> (line.contains(\"[org.apache.activemq.artemis.utils.critical.CriticalMeasure]\"))));\n+            Assert.assertTrue(\"Log should contains ActiveMQ AMQ224080 : critical analyzer is stopping the broker\", LoggingUtil.hasLogMessage(managementClient, \"artemis-log\", \"\",\n+                    (line) -> (line.contains(\"AMQ224080\"))));\n+            Assert.assertTrue(\"Log should contains ActiveMQ AMQ222199 : Thread dump \", LoggingUtil.hasLogMessage(managementClient, \"artemis-log\", \"\",\n+                    (line) -> (line.contains(\"AMQ222199\"))));\n+        }\n+        remoteContext.close();\n+        ModelNode response = managementClient.getControllerClient().execute(Operations.createReadAttributeOperation(jmsOperations.getServerAddress(), \"started\"));\n+        assertTrue(response.toJSONString(true), Operations.isSuccessfulOutcome(response));\n+        assertFalse(Operations.readResult(response).asBoolean());\n+    }\n+\n+    @Test\n+    public void testCriticalAnalyzerDisabled() throws Exception {", "originalCommit": "bf2da0eff1f79cc2d7cb1a52880a8ed72ef67993", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY3MjU1MA==", "url": "https://github.com/wildfly/wildfly/pull/13745#discussion_r573672550", "bodyText": "Can you please include a short description?", "author": "honza-kasik", "createdAt": "2021-02-10T12:02:14Z", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/messaging/mgmt/CriticalAnalyzerTestCase.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2012, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.integration.messaging.mgmt;\n+\n+import java.io.IOException;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.cli.Util;\n+import org.jboss.as.controller.client.helpers.Operations;\n+\n+import static org.jboss.as.controller.client.helpers.Operations.isSuccessfulOutcome;\n+\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.integration.management.base.ContainerResourceMgmtTestBase;\n+import org.jboss.as.test.integration.management.util.MgmtOperationException;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class CriticalAnalyzerTestCase extends ContainerResourceMgmtTestBase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @Test\n+    public void testCriticalAnalyzerWrite() throws Exception {", "originalCommit": "bf2da0eff1f79cc2d7cb1a52880a8ed72ef67993", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a41aaa6cbd0860eba4a2615e4cb1e44e32790f50", "url": "https://github.com/wildfly/wildfly/commit/a41aaa6cbd0860eba4a2615e4cb1e44e32790f50", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-10T13:04:42Z", "type": "forcePushed"}, {"oid": "ec7a9dce1cecb83bb73907c0ee88f6aebab0bf93", "url": "https://github.com/wildfly/wildfly/commit/ec7a9dce1cecb83bb73907c0ee88f6aebab0bf93", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-10T13:18:37Z", "type": "forcePushed"}, {"oid": "391a72046020099b3e52c04f6b0175ed2f559de4", "url": "https://github.com/wildfly/wildfly/commit/391a72046020099b3e52c04f6b0175ed2f559de4", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-11T10:55:07Z", "type": "forcePushed"}, {"oid": "732a7ea698e34353f694b99bae61e2f80c42a447", "url": "https://github.com/wildfly/wildfly/commit/732a7ea698e34353f694b99bae61e2f80c42a447", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-15T10:49:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyMTE0MA==", "url": "https://github.com/wildfly/wildfly/pull/13745#discussion_r576521140", "bodyText": "These NETWORK_CHECK attributes were all in WF 22 and are handled in registerTransformers_WF_22.", "author": "bstansberry", "createdAt": "2021-02-16T03:03:17Z", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/MessagingTransformerRegistration.java", "diffHunk": "@@ -83,10 +84,27 @@ public void registerTransformers(SubsystemTransformerRegistration registration)\n         registerTransformers_EAP_7_1_0(builder.createBuilder(MessagingExtension.VERSION_3_0_0, MessagingExtension.VERSION_2_0_0));\n         registerTransformers_EAP_7_0_0(builder.createBuilder(MessagingExtension.VERSION_2_0_0, MessagingExtension.VERSION_1_0_0));\n \n-        builder.buildAndRegister(registration, new ModelVersion[] { MessagingExtension.VERSION_1_0_0, MessagingExtension.VERSION_2_0_0,\n+        builder.buildAndRegister(registration, new ModelVersion[]{MessagingExtension.VERSION_1_0_0, MessagingExtension.VERSION_2_0_0,\n             MessagingExtension.VERSION_3_0_0, MessagingExtension.VERSION_4_0_0, MessagingExtension.VERSION_5_0_0,\n             MessagingExtension.VERSION_6_0_0, MessagingExtension.VERSION_7_0_0, MessagingExtension.VERSION_8_0_0,\n-            MessagingExtension.VERSION_9_0_0, MessagingExtension.VERSION_10_0_0, MessagingExtension.VERSION_11_0_0, MessagingExtension.VERSION_12_0_0});\n+            MessagingExtension.VERSION_9_0_0, MessagingExtension.VERSION_10_0_0, MessagingExtension.VERSION_11_0_0,\n+            MessagingExtension.VERSION_12_0_0, MessagingExtension.VERSION_13_0_0});\n+    }\n+\n+    private static void registerTransformers_WF_23(ResourceTransformationDescriptionBuilder subsystem) {\n+        ResourceTransformationDescriptionBuilder server = subsystem.addChildResource(MessagingExtension.SERVER_PATH);\n+        rejectDefinedAttributeWithDefaultValue(server,\n+                ServerDefinition.NETWORK_CHECK_LIST,\n+                ServerDefinition.NETWORK_CHECK_NIC,\n+                ServerDefinition.NETWORK_CHECK_PERIOD,\n+                ServerDefinition.NETWORK_CHECK_PING6_COMMAND,\n+                ServerDefinition.NETWORK_CHECK_PING_COMMAND,\n+                ServerDefinition.NETWORK_CHECK_TIMEOUT,\n+                ServerDefinition.NETWORK_CHECK_URL_LIST,", "originalCommit": "732a7ea698e34353f694b99bae61e2f80c42a447", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e1e47a5e491db24105c57de490b3c1dec9151d5", "url": "https://github.com/wildfly/wildfly/commit/4e1e47a5e491db24105c57de490b3c1dec9151d5", "message": "[WFLY-14332]: Upgrade messaging schema version to 13.0\n\n* Upgrading messaging subsystem version for WildFly 23.\n\nJira: https://issues.redhat.com/browse/WFLY-14332", "committedDate": "2021-02-16T09:04:57Z", "type": "commit"}, {"oid": "3fe3f2e43fda0557b746d3823a3c5edfdb44e38e", "url": "https://github.com/wildfly/wildfly/commit/3fe3f2e43fda0557b746d3823a3c5edfdb44e38e", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-16T09:08:29Z", "type": "forcePushed"}, {"oid": "59e8ecc51f72d919ebc3aefa90d27b85586fcd35", "url": "https://github.com/wildfly/wildfly/commit/59e8ecc51f72d919ebc3aefa90d27b85586fcd35", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-17T09:59:01Z", "type": "commit"}, {"oid": "59e8ecc51f72d919ebc3aefa90d27b85586fcd35", "url": "https://github.com/wildfly/wildfly/commit/59e8ecc51f72d919ebc3aefa90d27b85586fcd35", "message": "[WFLY-13959]: WildFly management API should allow configuration of Artemis broker's critical analyzer\n\n* Adding critical-analyzer-enabled attribute\n* Adding critical-analyzer-timeout attribute\n* Adding critical-analyzer-check-period attribute\n* Adding critical-analyzer-policy attribute\n* Adding test for it\n\nJira: https://issues.redhat.com/browse/WFLY-13959", "committedDate": "2021-02-17T09:59:01Z", "type": "forcePushed"}]}