{"pr_number": 2079, "pr_title": "Support in DataFetchingFieldSelectionSet for Unions and Interfaces", "pr_createdAt": "2020-10-20T11:30:10Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2079", "timeline": [{"oid": "f89996c47e6f9bf23baea912861e1caa89b3f192", "url": "https://github.com/graphql-java/graphql-java/commit/f89996c47e6f9bf23baea912861e1caa89b3f192", "message": "make normalized field available to a DFE", "committedDate": "2020-06-21T01:12:26Z", "type": "commit"}, {"oid": "a28f70c0b243079ed4f995ca0de8709221c8bc4b", "url": "https://github.com/graphql-java/graphql-java/commit/a28f70c0b243079ed4f995ca0de8709221c8bc4b", "message": "fix tests", "committedDate": "2020-06-21T23:36:21Z", "type": "commit"}, {"oid": "80299a67e6eabb71defb33a4895203c2545c1931", "url": "https://github.com/graphql-java/graphql-java/commit/80299a67e6eabb71defb33a4895203c2545c1931", "message": "lookup ahead with normalized fields", "committedDate": "2020-06-22T00:09:16Z", "type": "commit"}, {"oid": "f1591746cf33f6c00d97d5312afacd967e8a806c", "url": "https://github.com/graphql-java/graphql-java/commit/f1591746cf33f6c00d97d5312afacd967e8a806c", "message": "Merge branch 'master' into add-normalized-field-to-dfe", "committedDate": "2020-06-22T11:30:45Z", "type": "commit"}, {"oid": "0077bc63facd5002a1bff9edff256b9aa2889645", "url": "https://github.com/graphql-java/graphql-java/commit/0077bc63facd5002a1bff9edff256b9aa2889645", "message": "fix after merge problems", "committedDate": "2020-06-22T22:30:09Z", "type": "commit"}, {"oid": "2c0688807bf3beee9c4947c8b6519c848ea77bd3", "url": "https://github.com/graphql-java/graphql-java/commit/2c0688807bf3beee9c4947c8b6519c848ea77bd3", "message": "use strong memoizer for the normalized query", "committedDate": "2020-06-23T06:58:31Z", "type": "commit"}, {"oid": "c02c60b5734b4a0420c8d27eff1757a5da54f603", "url": "https://github.com/graphql-java/graphql-java/commit/c02c60b5734b4a0420c8d27eff1757a5da54f603", "message": "Merge remote-tracking branch 'origin/master' into add-normalized-field-to-dfe\n\n# Conflicts:\n#\tsrc/main/java/graphql/util/WeakMemoizedSupplier.java", "committedDate": "2020-10-07T08:19:37Z", "type": "commit"}, {"oid": "c27fc79b4bdfb3c2ee477a38e4f37cdfe608eead", "url": "https://github.com/graphql-java/graphql-java/commit/c27fc79b4bdfb3c2ee477a38e4f37cdfe608eead", "message": "Renamed memoizing functions", "committedDate": "2020-10-07T08:26:18Z", "type": "commit"}, {"oid": "e431f1d222d58e6e71902e122e2e039df4b523f9", "url": "https://github.com/graphql-java/graphql-java/commit/e431f1d222d58e6e71902e122e2e039df4b523f9", "message": "Work on better NormalisedField support", "committedDate": "2020-10-18T22:13:11Z", "type": "commit"}, {"oid": "ea8e404d679b5e3f47fb849c921e09a8d97cb0b6", "url": "https://github.com/graphql-java/graphql-java/commit/ea8e404d679b5e3f47fb849c921e09a8d97cb0b6", "message": "renamed the factory", "committedDate": "2020-10-20T00:49:06Z", "type": "commit"}, {"oid": "728dbb0eaa1952913426c862baf4e693ba9ea7f4", "url": "https://github.com/graphql-java/graphql-java/commit/728dbb0eaa1952913426c862baf4e693ba9ea7f4", "message": "Got most of the code now working and tested", "committedDate": "2020-10-20T11:28:38Z", "type": "commit"}, {"oid": "7da953c19e46535a61428799ce754bfc3a458fab", "url": "https://github.com/graphql-java/graphql-java/commit/7da953c19e46535a61428799ce754bfc3a458fab", "message": "Merge remote-tracking branch 'origin/master' into better-normalised-field-support\n\n# Conflicts:\n#\tsrc/main/java/graphql/util/FpKit.java", "committedDate": "2020-10-20T11:32:13Z", "type": "commit"}, {"oid": "37cd41470c1f9a301ac00ac7078b545373cf70b7", "url": "https://github.com/graphql-java/graphql-java/commit/37cd41470c1f9a301ac00ac7078b545373cf70b7", "message": "PR tweaks", "committedDate": "2020-10-20T11:43:46Z", "type": "commit"}, {"oid": "afff1acc44d5fb51eca6066e7b209a4c8b2befa7", "url": "https://github.com/graphql-java/graphql-java/commit/afff1acc44d5fb51eca6066e7b209a4c8b2befa7", "message": "PR tweaks", "committedDate": "2020-10-20T11:45:07Z", "type": "commit"}, {"oid": "3f3a7b4834c5cfcfee99341b786922445e6c20b6", "url": "https://github.com/graphql-java/graphql-java/commit/3f3a7b4834c5cfcfee99341b786922445e6c20b6", "message": "PR tweaks based on review", "committedDate": "2020-10-20T12:27:17Z", "type": "commit"}, {"oid": "d588e8301e37370bc71b8ff604773b0b41b3fe43", "url": "https://github.com/graphql-java/graphql-java/commit/d588e8301e37370bc71b8ff604773b0b41b3fe43", "message": "PR tweaks based on review", "committedDate": "2020-10-20T12:31:13Z", "type": "commit"}, {"oid": "05cbebf50aa8d21c45ff99184e8344a94a29f38d", "url": "https://github.com/graphql-java/graphql-java/commit/05cbebf50aa8d21c45ff99184e8344a94a29f38d", "message": "PR tweaks based on review", "committedDate": "2020-10-20T12:37:45Z", "type": "commit"}, {"oid": "bb9153ff9427f36f3b95e82fc22dfae960f9768f", "url": "https://github.com/graphql-java/graphql-java/commit/bb9153ff9427f36f3b95e82fc22dfae960f9768f", "message": "PR tweaks based on review", "committedDate": "2020-10-20T12:39:00Z", "type": "commit"}, {"oid": "2143f581943b96309d4267a05d4f9bc802833b52", "url": "https://github.com/graphql-java/graphql-java/commit/2143f581943b96309d4267a05d4f9bc802833b52", "message": "removed failing test because its now done better in the other places", "committedDate": "2020-10-20T22:17:39Z", "type": "commit"}, {"oid": "1dc1d7a10fa7b67e40c7a97ba63a12b9052bbb83", "url": "https://github.com/graphql-java/graphql-java/commit/1dc1d7a10fa7b67e40c7a97ba63a12b9052bbb83", "message": "removed failing test because its now done better in the other places - this is another one that should die", "committedDate": "2020-10-21T05:21:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzMTEzNg==", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508431136", "bodyText": "All made as Supplier to ensure its super lazy - lets not pay any cost unless some one asks for this.", "author": "bbakerman", "createdAt": "2020-10-20T11:42:49Z", "path": "src/main/java/graphql/execution/ExecutionStrategy.java", "diffHunk": "@@ -293,6 +297,11 @@ protected ExecutionStrategy(DataFetcherExceptionHandler dataFetcherExceptionHand\n                 .thenApply(result -> unboxPossibleDataFetcherResult(executionContext, parameters, result));\n     }\n \n+    protected Supplier<NormalizedField> getNormalizedField(ExecutionContext executionContext, ExecutionStrategyParameters parameters, Supplier<ExecutionStepInfo> executionStepInfo) {\n+        Supplier<NormalizedQueryTree> normalizedQuery = executionContext.getNormalizedQuery();\n+        return () -> normalizedQuery.get().getNormalizedField(parameters.getField(), executionStepInfo.get().getFieldContainer(), executionStepInfo.get().getPath());\n+    }", "originalCommit": "7da953c19e46535a61428799ce754bfc3a458fab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1Mjg4OA==", "url": "https://github.com/graphql-java/graphql-java/pull/2079#discussion_r508452888", "bodyText": "This is part of the breaking changes - these no longer make sense because we have multiple SelectedFields to a named path", "author": "bbakerman", "createdAt": "2020-10-20T12:20:25Z", "path": "src/main/java/graphql/schema/DataFetchingFieldSelectionSet.java", "diffHunk": "@@ -28,82 +26,120 @@\n  *  }\n  * }\n  * </pre>\n- *\n+ * <p>\n  * The selection set in the case above consists of the fields \"name, age, weight, friends and friends/name\".\n- *\n+ * <p>\n  * You can use this selection set perhaps to \"peek\" ahead and decide that field values you might need\n  * from the underlying data system.  Imagine a SQL system where this might represent the SQL 'projection'\n  * of columns say.\n+ * <p>\n+ * However composite types such as Interfaces and Unions add some complexity.  You cant know\n+ * ahead of time the exact field and object types involved.  There in fact be multiple possible `conditional` fields.\n+ * <p>\n+ * This class represents this by returning a list of fields and having two addressing mechanisms,\n+ * a simple `x/y` one and the more specific `Foo.x/Bar.y` mechanism.\n+ * <p>\n+ * For example imagine a `Pet` interface type that has `Cat` and `Dog` object type implementations.  The query might\n+ * be:\n+ *\n+ * <pre>\n+ * {@code\n+ *  {\n+ *      pet {\n+ *          name\n+ *      }\n+ *  }\n+ * }\n+ * </pre>\n+ * <p>\n+ * In the example above you have a `Cat.name`and `Dog.name` as possible sub selections of the `pet` field.  They are can be addressed by\n+ * either `name` or `Dog.name` or `Cat.name`\n+ *\n+ * <pre>\n+ * {@code\n+ *  selectionSet.contains(\"name\") == true\n+ *  selectionSet.contains(\"Dog.name\", \"Cat.name\") == true\n+ *\n+ *  List<SelectedField> petNames = selectionSet.getFields(\"name\")\n+ *  petNames.size() == 2\n+ *\n+ *  List<SelectedField> dogNames = selectionSet.getFields(\"Dog.name\")\n+ *  dogNames.size() == 1\n+ * }\n+ * </pre>\n+ * <p>\n+ * The simple naming is easier to work with but the type prefixed naming is more precise.\n+ * <p>\n+ * Another complication is any field aliasing that a client can specify.\n+ *\n+ * <pre>\n+ * {@code\n+ *  {\n+ *      pet {\n+ *          name(arg : \"foo\")\n+ *          ... on Dog {\n+ *             aliasedName : name(arg : \"bar\")\n+ *          }\n+ *     }\n+ *  }\n+ * }\n+ * </pre>\n+ * <p>\n+ * In the example above the `selectionSet.getFields(\"name\")` actually returns three {@link graphql.schema.SelectedField}s,\n+ * one for `Dog.name`, one for `Cat.name` and one for `Dog.name` with an alias of `aliasedName`.  The arguments can\n+ * differ on {@link graphql.schema.SelectedField}s that have different {@link SelectedField#getResultKey()}s, hence the multiple\n+ * selected fields returned.\n+ * <p>\n+ * To help you there is the {@link #getFieldsGroupedByResultKey()} that returns a {@code Map<String,List<SelectedField>>} keyed\n+ * by result key, that is by the field alias or by the field name.\n  */\n @PublicApi\n-public interface DataFetchingFieldSelectionSet extends Supplier<MergedSelectionSet> {\n-\n-    /**\n-     * @return a map of the fields that represent the selection set\n-     */\n-    @Override\n-    MergedSelectionSet get();\n-\n-    /**\n-     * @return a map of the arguments for each field in the selection set\n-     */\n-    Map<String, Map<String, Object>> getArguments();\n-\n-    /**\n-     * @return a map of the {@link graphql.schema.GraphQLFieldDefinition}s for each field in the selection set\n-     */\n-    Map<String, GraphQLFieldDefinition> getDefinitions();", "originalCommit": "7da953c19e46535a61428799ce754bfc3a458fab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6401f124bf5d726f4cf04fcd7129b56d49c685b9", "url": "https://github.com/graphql-java/graphql-java/commit/6401f124bf5d726f4cf04fcd7129b56d49c685b9", "message": "PR feedback - added getImmediate fields", "committedDate": "2020-10-22T04:17:41Z", "type": "commit"}]}