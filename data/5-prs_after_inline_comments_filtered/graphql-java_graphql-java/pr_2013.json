{"pr_number": 2013, "pr_title": "Persisted query support in graphql-java", "pr_createdAt": "2020-08-28T11:27:20Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2013", "timeline": [{"oid": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3", "url": "https://github.com/graphql-java/graphql-java/commit/59fbe685e124d0878eb5380b33c6f0d14f7b31b3", "message": "Persisted query support", "committedDate": "2020-08-28T11:24:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3NTMxNA==", "url": "https://github.com/graphql-java/graphql-java/pull/2013#discussion_r479175314", "bodyText": "This is a much better name for the callback parameter because that's what it does", "author": "bbakerman", "createdAt": "2020-08-28T11:39:36Z", "path": "src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java", "diffHunk": "@@ -7,20 +7,23 @@\n import java.util.function.Function;\n \n /**\n- * Interface that allows clients to hook in Document caching and/or the whitelisting of queries\n+ * Interface that allows clients to hook in Document caching and/or the whitelisting of queries.\n  */\n @PublicSpi\n public interface PreparsedDocumentProvider {\n     /**\n-     * This is called to get a \"cached\" pre-parsed query and if its not present, then the computeFunction\n-     * can be called to parse and validate the query\n-     *\n-     * @param executionInput  The {@link graphql.ExecutionInput} containing the query\n-     * @param computeFunction If the query has not be pre-parsed, this function can be called to parse it\n+     * This is called to get a \"cached\" pre-parsed query and if its not present, then the \"parseAndValidateFunction\"\n+     * can be called to parse and validate the query.\n+     * <p>\n+     * Note - the \"parseAndValidateFunction\" MUST be called if you dont have a per parsed version of the query because it not only parses\n+     * and validates the query, it invokes {@link graphql.execution.instrumentation.Instrumentation} calls as well for parsing and validation.\n+     * if you dont make a call back on this then these wont happen.\n      *\n+     * @param executionInput           The {@link graphql.ExecutionInput} containing the query\n+     * @param parseAndValidateFunction If the query has not be pre-parsed, this function MUST be called to parse and validate it\n      * @return an instance of {@link PreparsedDocumentEntry}\n      */\n-    PreparsedDocumentEntry getDocument(ExecutionInput executionInput, Function<ExecutionInput, PreparsedDocumentEntry> computeFunction);\n+    PreparsedDocumentEntry getDocument(ExecutionInput executionInput, Function<ExecutionInput, PreparsedDocumentEntry> parseAndValidateFunction);", "originalCommit": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3NTk5Mg==", "url": "https://github.com/graphql-java/graphql-java/pull/2013#discussion_r479175992", "bodyText": "Later if there is a V2, we can update this", "author": "bbakerman", "createdAt": "2020-08-28T11:40:11Z", "path": "src/main/java/graphql/execution/preparsed/persisted/ApolloPersistedQuerySupport.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package graphql.execution.preparsed.persisted;\n+\n+import graphql.ExecutionInput;\n+import graphql.PublicApi;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * This persisted query support class supports the Apollo scheme where the persisted\n+ * query id is in {@link graphql.ExecutionInput#getExtensions()}.\n+ * <p>\n+ * You need to provide a {@link PersistedQueryCache} cache implementation\n+ * as the backing cache.\n+ * <p>\n+ * See <a href=\"https://www.apollographql.com/docs/apollo-server/performance/apq/\">Apollo Persisted Queries</a>\n+ * <p>\n+ * The Apollo client sends a hash of the persisted query in the input extensions in the following form\n+ * <p>\n+ * <pre>\n+ *     {\n+ *      \"extensions\":{\n+ *       \"persistedQuery\":{\n+ *        \"version\":1,\n+ *        \"sha256Hash\":\"fcf31818e50ac3e818ca4bdbc433d6ab73176f0b9d5f9d5ad17e200cdab6fba4\"\n+ *      }\n+ *    }\n+ *  }\n+ * </pre>\n+ *\n+ * @see graphql.ExecutionInput#getExtensions()\n+ */\n+@PublicApi\n+public class ApolloPersistedQuerySupport extends PersistedQuerySupport {\n+\n+    public ApolloPersistedQuerySupport(PersistedQueryCache persistedQueryCache) {\n+        super(persistedQueryCache);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected Optional<Object> getPersistedQueryId(ExecutionInput executionInput) {\n+        Map<String, Object> extensions = executionInput.getExtensions();\n+        Map<String, Object> persistedQuery = (Map<String, Object>) extensions.get(\"persistedQuery\");\n+        if (persistedQuery != null) {\n+            Object sha256Hash = persistedQuery.get(\"sha256Hash\");\n+            return Optional.ofNullable(sha256Hash);\n+        }\n+        return Optional.empty();\n+    }\n+}", "originalCommit": "59fbe685e124d0878eb5380b33c6f0d14f7b31b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}