{"pr_number": 2110, "pr_title": "Improve AstPrinter performance", "pr_createdAt": "2020-11-24T00:52:02Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2110", "timeline": [{"oid": "133b617d0b079e6cea79b9c82ffb32cc2447928a", "url": "https://github.com/graphql-java/graphql-java/commit/133b617d0b079e6cea79b9c82ffb32cc2447928a", "message": "Add new AST Printer and benchmark", "committedDate": "2020-11-24T00:05:38Z", "type": "commit"}, {"oid": "3c2127596b6b1705a54d2bda4f1f1296cb24b087", "url": "https://github.com/graphql-java/graphql-java/commit/3c2127596b6b1705a54d2bda4f1f1296cb24b087", "message": "Migrate to new AST printer", "committedDate": "2020-11-24T00:05:39Z", "type": "commit"}, {"oid": "299778c5edc12cb0210712ecc7410d8c1fb0d89e", "url": "https://github.com/graphql-java/graphql-java/commit/299778c5edc12cb0210712ecc7410d8c1fb0d89e", "message": "Fix method signature", "committedDate": "2020-11-24T00:59:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyODQwNA==", "url": "https://github.com/graphql-java/graphql-java/pull/2110#discussion_r529228404", "bodyText": "Seems fair enough", "author": "bbakerman", "createdAt": "2020-11-24T06:22:20Z", "path": "src/main/java/graphql/language/AstPrinter.java", "diffHunk": "@@ -4,9 +4,7 @@\n import graphql.PublicApi;", "originalCommit": "299778c5edc12cb0210712ecc7410d8c1fb0d89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAwMzkxOA==", "url": "https://github.com/graphql-java/graphql-java/pull/2110#discussion_r532003918", "bodyText": "Nice test example!", "author": "bbakerman", "createdAt": "2020-11-28T08:12:26Z", "path": "src/test/java/benchmark/AstPrinterBenchmark.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package benchmark;\n+\n+import graphql.language.AstPrinter;\n+import graphql.language.Document;\n+import graphql.parser.Parser;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * See http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ for more samples\n+ * on what you can do with JMH\n+ * <p>\n+ * You MUST have the JMH plugin for IDEA in place for this to work :  https://github.com/artyushov/idea-jmh-plugin\n+ * <p>\n+ * Install it and then just hit \"Run\" on a certain benchmark method\n+ */\n+@Warmup(iterations = 2, time = 5, batchSize = 3)\n+@Measurement(iterations = 3, time = 10, batchSize = 4)\n+public class AstPrinterBenchmark {", "originalCommit": "299778c5edc12cb0210712ecc7410d8c1fb0d89e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}