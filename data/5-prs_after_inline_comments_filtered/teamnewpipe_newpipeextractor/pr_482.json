{"pr_number": 482, "pr_title": "Mock mix pl tests", "pr_createdAt": "2020-12-15T15:11:00Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTEwOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469108", "bodyText": "The base resource path should be put in some central class, like in DownloaderFactory. The root path should in that case be \"src/test/resources/org/schabi/newpipe/extractor/\"", "author": "Stypox", "createdAt": "2021-01-09T20:26:44Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -41,6 +43,7 @@\n     private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n     private static final String VIDEO_TITLE =\n             \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+    private static final String RESOURCE_PATH = \"src/test/resources/org/schabi/newpipe/extractor/services/youtube/mix/\";", "originalCommit": "2883e4a65180cdcddb00ae730f9ac8decd52a362", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNDQ0Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554614443", "bodyText": "done", "author": "XiangRongLin", "createdAt": "2021-01-10T19:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTMzNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469335", "bodyText": "Maybe you could also add a method to DownloaderFactory replacing these two lines, so that they don't have to be repeated every time. Something like DownloaderFactory.initNewPipeWithDownloader(RESOURCE_PATH + \"mix\"), and put the .getAbsolutePath() inside there, too.", "author": "Stypox", "createdAt": "2021-01-09T20:29:09Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -50,7 +53,8 @@\n \n         @BeforeClass\n         public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n+            final File file = new File(RESOURCE_PATH + \"mix\");\n+            NewPipe.init(new DownloaderFactory().getDownloader(file.getAbsolutePath()));", "originalCommit": "2883e4a65180cdcddb00ae730f9ac8decd52a362", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNDM5Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554614393", "bodyText": "I found that creating the file object itself is unnecessary. without that the line its already a single liner.", "author": "XiangRongLin", "createdAt": "2021-01-10T19:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTQzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469439", "bodyText": "Can this even happen? Doesn't Java disallow this impossible cases, since there are only three possible instances of the enum?", "author": "Stypox", "createdAt": "2021-01-09T20:30:26Z", "path": "extractor/src/test/java/org/schabi/newpipe/downloader/DownloaderFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.schabi.newpipe.downloader;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+\n+import java.io.IOException;\n+\n+public class DownloaderFactory {\n+\n+    private final static DownloaderType DEFAULT_DOWNLOADER = DownloaderType.REAL;\n+\n+    public Downloader getDownloader(String path) throws IOException {\n+        DownloaderType type;\n+        try {\n+            type = DownloaderType.valueOf(System.getProperty(\"downloader\"));\n+        } catch (Exception e) {\n+            type = DEFAULT_DOWNLOADER;\n+        }\n+\n+        switch (type) {\n+            case REAL:\n+                return DownloaderTestImpl.getInstance();\n+            case MOCK:\n+                return new MockDownloader(path);\n+            case RECORDING:\n+                return new RecordingDownloader(path);\n+            default:\n+                throw new UnsupportedOperationException(\"Unknown downloader type: \" + type.toString());", "originalCommit": "2883e4a65180cdcddb00ae730f9ac8decd52a362", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNTE2OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554615168", "bodyText": "It can not, but the compiler doesn't know it.\nFirst SO hit: https://stackoverflow.com/q/5013194", "author": "XiangRongLin", "createdAt": "2021-01-10T19:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3MDMxMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554470311", "bodyText": "I am not sure, but maybe here you should catch errors, so that if we put some files of a different format in the same folder there are no issues (we may want to do that at some point, maybe)", "author": "Stypox", "createdAt": "2021-01-09T20:39:30Z", "path": "extractor/src/test/java/org/schabi/newpipe/downloader/MockDownloader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+\n+class MockDownloader extends Downloader {\n+\n+    private final String path;\n+    private final Map<Request, Response> mocks;\n+\n+    public MockDownloader(@Nonnull String path) throws IOException {\n+        this.path = path;\n+        this.mocks = new HashMap<>();\n+        File folder = new File(path);\n+        for (File file : folder.listFiles()) {\n+            final FileReader reader = new FileReader(file);\n+            final TestRequestResponse response = new GsonBuilder()\n+                    .create()\n+                    .fromJson(reader, TestRequestResponse.class);", "originalCommit": "2883e4a65180cdcddb00ae730f9ac8decd52a362", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNDI3Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554614276", "bodyText": "I resolved this by prefixing the files and only writing/reading from those.", "author": "XiangRongLin", "createdAt": "2021-01-10T19:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3MDMxMQ=="}], "type": "inlineReview"}, {"oid": "4dad3d60d65e33e012a1d853fc0128dd6287abae", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4dad3d60d65e33e012a1d853fc0128dd6287abae", "message": "Move DownloaderTestImpl into downloader package", "committedDate": "2021-01-10T18:36:21Z", "type": "commit"}, {"oid": "1bcb9c76a7c62628d66d2aa5a9fe97e199f5a7a5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1bcb9c76a7c62628d66d2aa5a9fe97e199f5a7a5", "message": "Generate equals and hashCode for Request", "committedDate": "2021-01-10T18:36:24Z", "type": "commit"}, {"oid": "7c40fb8bf70d225e553c7b0095d3929ade57fe65", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7c40fb8bf70d225e553c7b0095d3929ade57fe65", "message": "Add additional downloader implementations\n\nRecordingDownloader relies on the real downloader and saves the request/response pair into a json file.\nMockDownloader uses json files from above and mocks responses for specific requests.", "committedDate": "2021-01-10T18:36:24Z", "type": "commit"}, {"oid": "e6e8e39def57f71b635c2a47d078125adf8ea6f5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e6e8e39def57f71b635c2a47d078125adf8ea6f5", "message": "Add DownloaderFactory to return a specific downloader based on 2 variables.\n\nIf the system property 'downloader' is set that use that specific downloader. This is used from gradle by appending `-Ddownloader=ABCD to the command.\nABCD is one of DownloaderType.\nThe other variable is the static property `DEFAULT_DOWNLOADER` in DownloaderFactory, which can be easily changed as needed inside the IDE according to development needs`.\n\nNormal workflow would be to first use the recording downloader and afterwards only use mocks, if the requests are always staying the same.", "committedDate": "2021-01-10T18:36:24Z", "type": "commit"}, {"oid": "285c26eafa1df069a0e665a88d38ff460573a379", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/285c26eafa1df069a0e665a88d38ff460573a379", "message": "Adjust YoutubeMixPlaylistExtractorTest to use DownloaderFactory", "committedDate": "2021-01-10T18:38:41Z", "type": "commit"}, {"oid": "f8aa989c42b20f7433dadd4c71c4277243b85e72", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f8aa989c42b20f7433dadd4c71c4277243b85e72", "message": "Add generated json and manually copy client_version.json", "committedDate": "2021-01-10T18:38:47Z", "type": "commit"}, {"oid": "f447a7a4500f34006f671407e68deea3b2255749", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f447a7a4500f34006f671407e68deea3b2255749", "message": "fix import due to downloader package move", "committedDate": "2021-01-10T18:49:14Z", "type": "commit"}, {"oid": "35e299759ecd09c020b93f59f2f94ad1c3d58b7e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/35e299759ecd09c020b93f59f2f94ad1c3d58b7e", "message": "Add method to allow resetting youtube client version and key\n\nThis is needed so that a request is made for each test class when running multiple at once. This way RecordingDownloader records all necessary requests.\nThis works as long as tests are run sequentially and not in parallel.", "committedDate": "2021-01-10T19:24:50Z", "type": "commit"}, {"oid": "255c726f20254112e6459d58a979f0a136ad2503", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/255c726f20254112e6459d58a979f0a136ad2503", "message": "Add resource path base to DownloaderFactory", "committedDate": "2021-01-10T19:27:34Z", "type": "commit"}, {"oid": "f91916c017addeaa49ce15da8f6b37419b1ec649", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f91916c017addeaa49ce15da8f6b37419b1ec649", "message": "Remove unnecessary file object creation", "committedDate": "2021-01-10T19:39:22Z", "type": "commit"}, {"oid": "1ea6c6ce543ae129423397f1e646abe2fee2a64d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1ea6c6ce543ae129423397f1e646abe2fee2a64d", "message": "Prefix mock file from RecordingDownloader with \"generated_mock_\"\n\nOnly read those files in MockDownloader", "committedDate": "2021-01-10T19:46:42Z", "type": "commit"}, {"oid": "e82cb1efeaf34a87072b6424aad4671796697396", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e82cb1efeaf34a87072b6424aad4671796697396", "message": "Remove dependency to commons-io", "committedDate": "2021-01-10T19:50:38Z", "type": "commit"}, {"oid": "e82cb1efeaf34a87072b6424aad4671796697396", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e82cb1efeaf34a87072b6424aad4671796697396", "message": "Remove dependency to commons-io", "committedDate": "2021-01-10T19:50:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMDQwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554620403", "bodyText": "Todo for me", "author": "XiangRongLin", "createdAt": "2021-01-10T20:45:10Z", "path": "extractor/src/test/java/org/schabi/newpipe/downloader/RecordingDownloader.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.annotation.Nonnull;\n+\n+class RecordingDownloader extends Downloader {\n+\n+    public final static String FILE_NAME_PREFIX = \"generated_mock_\";\n+\n+    private int index = 0;\n+    private final String path;\n+\n+    public RecordingDownloader(String stringPath) throws IOException {\n+        this.path = stringPath;\n+        Path path = Paths.get(stringPath);\n+        File folder = path.toFile();\n+        if (folder.exists()) {\n+            for (File file : folder.listFiles()) {\n+                if (file.getName().startsWith(RecordingDownloader.FILE_NAME_PREFIX)) {\n+                    file.delete();\n+                }\n+            }\n+        }\n+        Files.createDirectories(path);", "originalCommit": "e82cb1efeaf34a87072b6424aad4671796697396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63c237db411f9f989527ffc17d817ba95c6bbd81", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63c237db411f9f989527ffc17d817ba95c6bbd81", "message": "Only create directories if they do not exist", "committedDate": "2021-01-11T06:57:11Z", "type": "commit"}, {"oid": "3455f0f23c6e34a16e23bdb687037ea3849697f8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3455f0f23c6e34a16e23bdb687037ea3849697f8", "message": "Add documentation to testing with mocks", "committedDate": "2021-01-12T08:37:48Z", "type": "commit"}, {"oid": "4af50c68709c96a3c57e5041f43520c319577609", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4af50c68709c96a3c57e5041f43520c319577609", "message": "Use @link for downloader", "committedDate": "2021-01-12T08:41:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557557904", "bodyText": "Maybe add a comment saying that this is only to be used for tests.", "author": "Stypox", "createdAt": "2021-01-14T17:14:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -353,6 +353,11 @@ public static String getKey() throws IOException, ExtractionException {\n         return key;\n     }\n \n+    static void resetClientVersionAndKey() {", "originalCommit": "4af50c68709c96a3c57e5041f43520c319577609", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4NzkwOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557587909", "bodyText": "I wouldn't add it, since android studio can already show you where a method is used. In this case it's only tests.\nAdditionally i did not make it public to only allow usage inside the extractor", "author": "XiangRongLin", "createdAt": "2021-01-14T18:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNzY3Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557617672", "bodyText": "Ok, but I'd like to be able to tell just by looking at it that the method should not be used except for tests", "author": "Stypox", "createdAt": "2021-01-14T18:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYyMzM2NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557623365", "bodyText": "added", "author": "XiangRongLin", "createdAt": "2021-01-14T19:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA=="}], "type": "inlineReview"}, {"oid": "6ca7123d5d87a19b17f2fd6f595e5b884b3bec73", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6ca7123d5d87a19b17f2fd6f595e5b884b3bec73", "message": "Add comment for usage of YoutubeParsingHelper.resetClientVersionAndKey", "committedDate": "2021-01-14T19:01:52Z", "type": "commit"}, {"oid": "4f81d9d6891fc34c85301487802fb0b5030e85ab", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4f81d9d6891fc34c85301487802fb0b5030e85ab", "message": "Regenerate mock files", "committedDate": "2021-01-15T08:51:23Z", "type": "commit"}]}