{"pr_number": 451, "pr_title": "Extract stream and search meta info for YouTube", "pr_createdAt": "2020-11-01T14:55:35Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTQ5Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r515635492", "bodyText": "This will fail if there is no expected metadata info.", "author": "Stypox", "createdAt": "2020-11-01T15:28:17Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -382,4 +386,20 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    public void testMetadataInfo() throws Exception {\n+        final MetaInfo metaInfo = extractor().getMetaInfo().get(0);\n+        final MetaInfo expectedMetaInfo = expectedMetadataInfo().get(0);", "originalCommit": "05675c9a90215abc23fe2b0b6355b855b7ab3304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNjM1NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r515636355", "bodyText": "i know. that's what i meant on irc :)", "author": "TobiGr", "createdAt": "2020-11-01T15:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTQ5Mg=="}], "type": "inlineReview"}, {"oid": "daa6e980ef0ee30f714224ddd060d712ea8f0127", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/daa6e980ef0ee30f714224ddd060d712ea8f0127", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.", "committedDate": "2020-11-18T16:21:27Z", "type": "forcePushed"}, {"oid": "7def8d85194f7d5c53278ce67867777b7f8f06ea", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7def8d85194f7d5c53278ce67867777b7f8f06ea", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.", "committedDate": "2020-11-18T16:25:01Z", "type": "forcePushed"}, {"oid": "c7cf58bed632eec9b9322eb4b86a35fe22ea139d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c7cf58bed632eec9b9322eb4b86a35fe22ea139d", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes\n\n\nNull checks", "committedDate": "2020-11-24T10:38:07Z", "type": "forcePushed"}, {"oid": "5a0dc24d6ac219dfb682d64daf1b24b87d3d6887", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5a0dc24d6ac219dfb682d64daf1b24b87d3d6887", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes", "committedDate": "2020-11-24T10:42:08Z", "type": "forcePushed"}, {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f3764c5948cb731f5a674f714b302a52b66ebe68", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes", "committedDate": "2020-11-24T10:54:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Mzc3MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541573771", "bodyText": "This code should only add <br> in between paragraphs, not also at the end, or shouldn't it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n          \n          \n            \n                        if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n          \n          \n            \n                            sb.append(\"<br>\");\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!sb.isEmpty()) {\n          \n          \n            \n                            sb.append(\"<br>\");\n          \n          \n            \n                        }\n          \n          \n            \n                        sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));", "author": "Stypox", "createdAt": "2020-12-12T13:12:26Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjkwNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541582904", "bodyText": "Good idea. sb.isEmpty() does not exist, I'll use sb.length() != 0 instead", "author": "TobiGr", "createdAt": "2020-12-12T14:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Mzc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDE4NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541574184", "bodyText": "This should be avove the @", "author": "Stypox", "createdAt": "2020-12-12T13:15:23Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "diffHunk": "@@ -41,4 +50,32 @@ public void testSearchSuggestion() throws Exception {\n     public void testSearchCorrected() throws Exception {\n         assertEquals(isCorrectedSearch(), extractor().isCorrectedSearch());\n     }\n+\n+    @Test\n+    /**\n+     * @see DefaultStreamExtractorTest#testMetaInfo()\n+     */", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDIxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541574214", "bodyText": "Also here", "author": "Stypox", "createdAt": "2020-12-12T13:15:36Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -379,4 +384,33 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    /**\n+     * @see DefaultSearchExtractorTest#testMetaInfo()\n+     */", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541575730", "bodyText": "This is not true, at least for me the secondary endpoint for e.g. covid 19 points to Learn about vaccine progress from the WHO. So I think you should add another url and another urlText. You could check with a rule of thumb if it is a google search or not (e.g. by looking for google inside the url), and only add it if it is not.", "author": "Stypox", "createdAt": "2020-12-12T13:25:14Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }\n+        }\n+        metaInfo.setText(sb.toString());\n+        if (infoPanelContentRenderer.has(\"sourceEndpoint\")) {\n+            final String metaInfoLinkUrl = YoutubeParsingHelper.getUrlFromNavigationEndpoint(\n+                    infoPanelContentRenderer.getObject(\"sourceEndpoint\"));\n+            try {\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(metaInfoLinkUrl))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    infoPanelContentRenderer.getObject(\"inlineSource\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getClarificationRendererContent(final JsonObject clarificationRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+\n+        final String title = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"contentTitle\"));\n+        final String text = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"text\"));\n+        if (title == null || text ==  null) {\n+            throw new ParsingException(\"Could not extract clarification renderer content\");\n+        }\n+        metaInfo.setTitle(title);\n+        metaInfo.setText(text);\n+\n+        if (clarificationRenderer.has(\"actionButton\")) {\n+            final JsonObject actionButton = clarificationRenderer.getObject(\"actionButton\")\n+                    .getObject(\"buttonRenderer\");\n+            try {\n+                final String url = YoutubeParsingHelper.getUrlFromNavigationEndpoint(actionButton.getObject(\"command\"));\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(url))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    actionButton.getObject(\"text\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        if (clarificationRenderer.has(\"secondaryEndpoint\")) {\n+            // TODO: implement\n+            // These URLs point to a Google search of the topic", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MTA5Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541581092", "bodyText": "I cannot reproduce that. Can you provide a JSON for me?", "author": "TobiGr", "createdAt": "2020-12-12T13:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0Mzk2Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r543243966", "bodyText": "I opened YouTube in a Private Window and this is what I get.\n{\n\t\"clarificationRenderer\": {\n\t\t\"text\": {\n\t\t\t\"runs\": [\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"Get the latest information from the WHO about coronavirus.\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"endpoint\": {\n\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\"commandMetadata\": {\n\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"urlEndpoint\": {\n\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t}\n\t\t},\n\t\t\"menu\": {\n\t\t\t\"menuRenderer\": {\n\t\t\t\t\"items\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"menuNavigationItemRenderer\": {\n\t\t\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\t\t\"runs\": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"text\": \"Why am I seeing this?\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"icon\": {\n\t\t\t\t\t\t\t\t\"iconType\": \"INFO\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"navigationEndpoint\": {\n\t\t\t\t\t\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\t\"commandMetadata\": {\n\t\t\t\t\t\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\t\t\t\t\t\"url\": \"//support.google.com/youtube/answer/9004474?hl=en-GB\",\n\t\t\t\t\t\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"urlEndpoint\": {\n\t\t\t\t\t\t\t\t\t\"url\": \"//support.google.com/youtube/answer/9004474?hl=en-GB\",\n\t\t\t\t\t\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\"accessibility\": {\n\t\t\t\t\t\t\t\t\"accessibilityData\": {\n\t\t\t\t\t\t\t\t\t\"label\": \"Why am I seeing this?\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"menuNavigationItemRenderer\": {\n\t\t\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\t\t\"runs\": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"text\": \"Send feedback\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"icon\": {\n\t\t\t\t\t\t\t\t\"iconType\": \"FEEDBACK\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"navigationEndpoint\": {\n\t\t\t\t\t\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\t\"commandMetadata\": {\n\t\t\t\t\t\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\t\t\t\t\t\"ignoreNavigation\": true\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"userFeedbackEndpoint\": {\n\t\t\t\t\t\t\t\t\t\"additionalDatas\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"userFeedbackEndpointProductSpecificValueData\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"key\": \"clarify_id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/g/11j2cc_qll\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"bucketIdentifier\": \"clarify_box\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\"accessibility\": {\n\t\t\t\t\t\t\t\t\"accessibilityData\": {\n\t\t\t\t\t\t\t\t\t\"label\": \"Send feedback\",\n\t\t\t\t\t\t\t\t\t\"identifier\": {\n\t\t\t\t\t\t\t\t\t\t\"accessibilityIdType\": \"MENU_FEEDBACK\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\"accessibility\": {\n\t\t\t\t\t\"accessibilityData\": {\n\t\t\t\t\t\t\"label\": \"Action menu\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"source\": {\n\t\t\t\"simpleText\": \"Learn about vaccine progress from the WHO\"\n\t\t},\n\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\"style\": \"CLARIFICATION_RENDERER_STYLE_MEDIUM\",\n\t\t\"contentTitle\": {\n\t\t\t\"runs\": [\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"COVID-19\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"secondaryEndpoint\": {\n\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\"commandMetadata\": {\n\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/covid-19-vaccines\",\n\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"urlEndpoint\": {\n\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/covid-19-vaccines\",\n\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t}\n\t\t},\n\t\t\"actionButton\": {\n\t\t\t\"buttonRenderer\": {\n\t\t\t\t\"style\": \"STYLE_SUGGESTIVE\",\n\t\t\t\t\"size\": \"SIZE_DEFAULT\",\n\t\t\t\t\"isDisabled\": false,\n\t\t\t\t\"text\": {\n\t\t\t\t\t\"simpleText\": \"LEARN MORE\"\n\t\t\t\t},\n\t\t\t\t\"trackingParams\": \"CLoBEPBbIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\"command\": {\n\t\t\t\t\t\"clickTrackingParams\": \"CLoBEPBbIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\"commandMetadata\": {\n\t\t\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"urlEndpoint\": {\n\t\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"background\": \"CLARIFICATION_RENDERER_BACKGROUND_INFO\",\n\t\t\"secondarySource\": {\n\t\t\t\"simpleText\": \"Learn about vaccine progress from the WHO\"\n\t\t},\n\t\t\"loggingDirectives\": {\n\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\"visibility\": {\n\t\t\t\t\"types\": \"12\"\n\t\t\t},\n\t\t\t\"gestures\": {\n\t\t\t\t\"types\": \"4\"\n\t\t\t}\n\t\t}\n\t}\n}", "author": "Stypox", "createdAt": "2020-12-15T10:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNTYwMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r543505602", "bodyText": "thanks. Implemented", "author": "TobiGr", "createdAt": "2020-12-15T16:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njc1MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541576751", "bodyText": "I think this Javadoc is outdated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return  The meta info of the stream or an empty String if not provided. If the info contains a link, the String\n          \n          \n            \n                 *          is HTML formatted.\n          \n          \n            \n                 * @return  The meta info of the stream or an empty List if not provided. If the info contains a link, the String\n          \n          \n            \n                 *          is HTML formatted.", "author": "Stypox", "createdAt": "2020-12-12T13:31:35Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -476,4 +477,19 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n      */\n     @Nonnull\n     public abstract String getSupportInfo() throws ParsingException;\n+\n+    /**\n+     * Meta information about the stream.\n+     * <p>\n+     * This can be information about the stream creator (e.g. if the creator is a public broadcaster)\n+     * or further information on the topic (e.g. hints that the video might contain conspiracy theories\n+     * or contains information about a current health situation like the Covid-19 pandemic).\n+     * </p>\n+ *     The meta information often contains links to external sources like Wikipedia or the WHO.\n+     * @return  The meta info of the stream or an empty String if not provided. If the info contains a link, the String\n+     *          is HTML formatted.", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njk3NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541576974", "bodyText": "Maybe the format of the text should be pointed out (like with video description)", "author": "Stypox", "createdAt": "2020-12-12T13:32:29Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MetaInfo.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.schabi.newpipe.extractor;\n+\n+import java.io.Serializable;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+public class MetaInfo implements Serializable {\n+\n+    private String title = \"\";\n+    private String text = \"\";", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NzI1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541577258", "bodyText": "Make this return an empty list by default, to prevent having to point it out manually every time, like with DefaultStreamExtractorTest", "author": "Stypox", "createdAt": "2020-12-12T13:34:20Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "diffHunk": "@@ -20,6 +27,8 @@ public boolean isCorrectedSearch() {\n         return false;\n     }\n \n+    public abstract List<MetaInfo> expectedMetaInfo() throws MalformedURLException;", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NzI4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541577281", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {return Collections.emptyList(); } // default: no metadata info available\n          \n          \n            \n                public List<MetaInfo> expectedMetaInfo() throws MalformedURLException { return Collections.emptyList(); } // default: no metadata info available", "author": "Stypox", "createdAt": "2020-12-12T13:34:29Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -66,6 +70,7 @@\n     public Locale expectedLanguageInfo() { return null; } // default: no language info available\n     public List<String> expectedTags() { return Collections.emptyList(); } // default: no tags\n     public String expectedSupportInfo() { return \"\"; } // default: no support info available\n+    public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {return Collections.emptyList(); } // default: no metadata info available", "originalCommit": "f3764c5948cb731f5a674f714b302a52b66ebe68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63e89db979092e62dfa667de6e91b21d1ee03683", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63e89db979092e62dfa667de6e91b21d1ee03683", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes", "committedDate": "2020-12-12T14:25:00Z", "type": "forcePushed"}, {"oid": "79b5aa9760da52020821b68e2af41a9238943304", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/79b5aa9760da52020821b68e2af41a9238943304", "message": "Make some vars final and add annotations to methods", "committedDate": "2020-12-15T16:28:15Z", "type": "forcePushed"}, {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/31a6fe1b9016dc0d02dc48580464b5599708c1da", "message": "Make some vars final and add annotations to methods", "committedDate": "2020-12-19T13:30:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MzQ0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r546383449", "bodyText": "These should also contain the other link", "author": "Stypox", "createdAt": "2020-12-20T14:20:04Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorTest.java", "diffHunk": "@@ -211,4 +215,33 @@ public void duplicatedItemsCheck() throws Exception {\n             assertNoDuplicatedItems(YouTube, page1, page2);\n         }\n     }\n+\n+    public static class MetaInfoTest extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"Covid\";\n+\n+        @Test\n+        public void clarificationTest() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(VIDEOS), \"\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Override public String expectedSearchSuggestion() { return null; }\n+        @Override public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {\n+            return Collections.singletonList(new MetaInfo(\n+                    \"COVID-19\",\n+                    new Description(\"Get the latest information from the WHO about coronavirus.\", Description.PLAIN_TEXT),\n+                    Collections.singletonList(new URL(\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\")),\n+                    Collections.singletonList(\"LEARN MORE\")", "originalCommit": "31a6fe1b9016dc0d02dc48580464b5599708c1da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MzUxNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r546383517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return  The meta info of the stream or an empty List if not provided.\n          \n          \n            \n                 * @return The meta info of the stream or an empty List if not provided.", "author": "Stypox", "createdAt": "2020-12-20T14:20:50Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -486,4 +487,18 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n      */\n     @Nonnull\n     public abstract List<StreamSegment> getStreamSegments() throws ParsingException;\n+\n+    /**\n+     * Meta information about the stream.\n+     * <p>\n+     * This can be information about the stream creator (e.g. if the creator is a public broadcaster)\n+     * or further information on the topic (e.g. hints that the video might contain conspiracy theories\n+     * or contains information about a current health situation like the Covid-19 pandemic).\n+     * </p>\n+ *     The meta information often contains links to external sources like Wikipedia or the WHO.\n+     * @return  The meta info of the stream or an empty List if not provided.", "originalCommit": "31a6fe1b9016dc0d02dc48580464b5599708c1da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17d48b26e3e7859440bc5d29a6576db49b740c61", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/17d48b26e3e7859440bc5d29a6576db49b740c61", "message": "Make some vars final and add annotations to methods", "committedDate": "2020-12-20T18:54:43Z", "type": "forcePushed"}, {"oid": "bc6de149527fabb235068bfed538194316054ddb", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bc6de149527fabb235068bfed538194316054ddb", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.", "committedDate": "2020-12-22T17:19:26Z", "type": "commit"}, {"oid": "41a8ed625d6dfbddc1c29f99586211e69207d662", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/41a8ed625d6dfbddc1c29f99586211e69207d662", "message": "Make some vars final and add annotations to methods", "committedDate": "2020-12-22T17:19:26Z", "type": "commit"}, {"oid": "41a8ed625d6dfbddc1c29f99586211e69207d662", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/41a8ed625d6dfbddc1c29f99586211e69207d662", "message": "Make some vars final and add annotations to methods", "committedDate": "2020-12-22T17:19:26Z", "type": "forcePushed"}]}