{"pr_number": 1014, "pr_title": "Android - auth server implementation setup", "pr_createdAt": "2020-09-22T18:05:30Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014", "timeline": [{"oid": "a9c94896e206632571b2a736957fa156ab133364", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/a9c94896e206632571b2a736957fa156ab133364", "message": "auth server implementation setup", "committedDate": "2020-09-22T17:45:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3OTkzOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493779938", "bodyText": "why is this needed?", "author": "zohrehj", "createdAt": "2020-09-23T17:51:59Z", "path": "Android/app/src/main/java/com/harvard/FdaApplication.java", "diffHunk": "@@ -159,7 +160,11 @@ public static String getCodeChallenge(String codeVerifier) {\n     try {\n       MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n       byte[] digest = md.digest(codeVerifier.getBytes(StandardCharsets.US_ASCII));\n-      codeChallenge = Base64.encodeToString(digest, Base64.NO_PADDING);\n+      codeChallenge =\n+          Base64.encodeToString(digest, Base64.NO_PADDING)\n+              .replace(\"+\", \"-\")", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjgwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r494366807", "bodyText": "This method is used to CodeChallenge using Base64 and Base64 encoded string should not contain the following characters: \"=\", \"+\", or \"/\". you can find the details in the following link.\nhttps://tools.ietf.org/html/rfc7636#appendix-A", "author": "naveenr-btc", "createdAt": "2020-09-24T14:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3OTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0Nzk0Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r495047943", "bodyText": "You are already using a no_padding strategy, so the result should not include the padding characters in the first place.", "author": "zohrehj", "createdAt": "2020-09-25T15:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3OTkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2ODM1MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r495468351", "bodyText": "Sorry my bad. i've changed it.", "author": "naveenr-btc", "createdAt": "2020-09-26T15:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3OTkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MjcyNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493782725", "bodyText": "can you explain what is the purpose of this class? I can't see where it is used.\nMaybe add a test that uses this class.\nThe fact that It is supposedly a usermodules, and named Error does not make sense to me.", "author": "zohrehj", "createdAt": "2020-09-23T17:56:31Z", "path": "Android/app/src/main/java/com/harvard/usermodule/Error.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.harvard.AppConfig;\n+import com.harvard.R;\n+import com.harvard.gatewaymodule.GatewayActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+\n+public class Error extends AppCompatActivity {", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0NDIxNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r494344214", "bodyText": "This class is used as a fallback from any error that happens on hydra auth server. The hydra auth server gives a deeplink and this class handles it. I can change the class name if you want me to.", "author": "naveenr-btc", "createdAt": "2020-09-24T14:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyNDMwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r494524306", "bodyText": "we've added a test", "author": "naveenr-btc", "createdAt": "2020-09-24T18:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0ODU0Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r495048542", "bodyText": "thanks for adding the test. Let's change the class to something that better described it's purpose as well", "author": "zohrehj", "createdAt": "2020-09-25T15:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MjcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjAwNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493786006", "bodyText": "only google copyright should be added for new files.", "author": "zohrehj", "createdAt": "2020-09-23T18:01:41Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjI4NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493786285", "bodyText": "only google copyright should be added for new files", "author": "zohrehj", "createdAt": "2020-09-23T18:02:06Z", "path": "Android/app/src/main/java/com/harvard/usermodule/Error.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0ODc1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r495048750", "bodyText": "please fix", "author": "zohrehj", "createdAt": "2020-09-25T15:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMTUzNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r495131537", "bodyText": "This is already fixed but due to some reasons github is not showing it. i'll anyway change the file name and push this file again.", "author": "naveenr-btc", "createdAt": "2020-09-25T17:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTM0NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498441345", "bodyText": "I've updated the class name", "author": "naveenr-btc", "createdAt": "2020-10-01T18:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493787805", "bodyText": "why is this exception ignored?", "author": "zohrehj", "createdAt": "2020-09-23T18:04:47Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing\n+      AppController.getHelperSharedPreference()\n+          .writePreference(LoginCallbackActivity.this, getString(R.string.json_object_filter), \"\");\n+\n+      userAuth = tokenData.getAccess_token();\n+      AppController.getHelperSharedPreference()\n+          .writePreference(\n+              LoginCallbackActivity.this,\n+              getString(R.string.refreshToken),\n+              tokenData.getRefresh_token());\n+      if (accountStatus != null && accountStatus.equalsIgnoreCase(\"3\")) {\n+        Intent changePasswordIntent =\n+            new Intent(LoginCallbackActivity.this, ChangePasswordActivity.class);\n+        changePasswordIntent.putExtra(\"userid\", userId);\n+        changePasswordIntent.putExtra(\"auth\", userAuth);\n+        startActivity(changePasswordIntent);\n+        finish();\n+      } else {\n+        new GetFcmRefreshToken().execute();\n+      }\n+    } else if (responseCode == UPDATE_USER_PROFILE) {\n+      UpdateUserProfileData updateUserProfileData = (UpdateUserProfileData) response;\n+      if (updateUserProfileData != null) {\n+        callUserProfileWebService();\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    } else if (responseCode == USER_PROFILE_REQUEST) {\n+      userProfileData = (UserProfileData) response;\n+      if (userProfileData != null) {\n+        if (userProfileData.getSettings().isPasscode()) {\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this, getString(R.string.initialpasscodeset), \"no\");\n+\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this,\n+                  getString(R.string.email),\n+                  \"\" + userProfileData.getProfile().getEmailId());\n+\n+          Intent intent = new Intent(LoginCallbackActivity.this, NewPasscodeSetupActivity.class);\n+          intent.putExtra(\"from\", \"signin\");\n+          startActivityForResult(intent, PASSCODE_RESPONSE);\n+        } else {\n+          login();\n+        }\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    }\n+  }\n+\n+  private void login() {\n+    AppController.getHelperProgressDialog().dismissDialog();\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(\n+            LoginCallbackActivity.this,\n+            getString(R.string.email),\n+            \"\" + userProfileData.getProfile().getEmailId());\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.verified), \"true\");\n+    if (userProfileData != null\n+        && (!userProfileData.getSettings().isLocalNotifications()\n+            || userProfileData.getSettings().isRemoteNotifications())) {\n+      NotificationModuleSubscriber notificationModuleSubscriber =\n+          new NotificationModuleSubscriber(null, null);\n+      notificationModuleSubscriber.generateNotificationTurnOffNotification(\n+          Calendar.getInstance().getTime(), LoginCallbackActivity.this);\n+    }\n+    if (SharedPreferenceHelper.readPreference(\n+            LoginCallbackActivity.this, getString(R.string.loginflow), \"\")\n+        .equalsIgnoreCase(\"StudyInfo\")) {\n+      Intent intent = new Intent(LoginCallbackActivity.this, StudyInfoActivity.class);\n+      intent.putExtra(\"flow\", \"login_callback\");\n+      intent.putExtra(\n+          \"studyId\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyId\", \"\"));\n+      intent.putExtra(\n+          \"title\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_title\", \"\"));\n+      intent.putExtra(\n+          \"bookmark\",\n+          Boolean.parseBoolean(\n+              SharedPreferenceHelper.readPreference(\n+                  LoginCallbackActivity.this, \"login_studyinfo_bookmark\", \"\")));\n+      intent.putExtra(\n+          \"status\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_status\", \"\"));\n+      intent.putExtra(\n+          \"studyStatus\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyStatus\", \"\"));\n+      intent.putExtra(\n+          \"position\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_position\", \"\"));\n+      intent.putExtra(\n+          \"enroll\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_enroll\", \"\"));\n+      intent.putExtra(\n+          \"rejoin\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_rejoin\", \"\"));\n+      startActivity(intent);\n+    } else {\n+      if (AppConfig.AppType.equalsIgnoreCase(getString(R.string.app_gateway))) {\n+        Intent intent = new Intent(LoginCallbackActivity.this, StudyActivity.class);\n+        ComponentName cn = intent.getComponent();\n+        Intent mainIntent = Intent.makeRestartActivityTask(cn);\n+        startActivity(mainIntent);\n+        finish();\n+      } else {\n+        Intent intent = new Intent(LoginCallbackActivity.this, StandaloneActivity.class);\n+        ComponentName cn = intent.getComponent();\n+        Intent mainIntent = Intent.makeRestartActivityTask(cn);\n+        mainIntent.putExtra(\"flow\", \"login_callback\");\n+        startActivity(mainIntent);\n+        finish();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void asyncResponseFailure(int responseCode, String errormsg, String statusCode) {\n+    AppController.getHelperProgressDialog().dismissDialog();\n+    Toast.makeText(this, errormsg, Toast.LENGTH_SHORT).show();\n+    finish();\n+  }\n+\n+  private class GetFcmRefreshToken extends AsyncTask<String, String, String> {\n+\n+    @Override\n+    protected String doInBackground(String... params) {\n+      String token = \"\";\n+      if (FirebaseInstanceId.getInstance().getToken() == null\n+          || FirebaseInstanceId.getInstance().getToken().isEmpty()) {\n+        boolean regIdStatus = false;\n+        while (!regIdStatus) {\n+          token =\n+              AppController.getHelperSharedPreference()\n+                  .readPreference(LoginCallbackActivity.this, \"deviceToken\", \"\");\n+          if (!token.isEmpty()) {\n+            regIdStatus = true;\n+          }\n+        }\n+      } else {\n+        AppController.getHelperSharedPreference()\n+            .writePreference(\n+                LoginCallbackActivity.this,\n+                \"deviceToken\",\n+                FirebaseInstanceId.getInstance().getToken());\n+        token =\n+            AppController.getHelperSharedPreference()\n+                .readPreference(LoginCallbackActivity.this, \"deviceToken\", \"\");\n+      }\n+      return token;\n+    }\n+\n+    @Override\n+    protected void onPostExecute(String token) {\n+      callUpdateProfileWebService(token);\n+    }\n+\n+    @Override\n+    protected void onPreExecute() {\n+      AppController.getHelperProgressDialog()\n+          .showProgress(LoginCallbackActivity.this, \"\", \"\", false);\n+    }\n+  }\n+\n+  private void callUpdateProfileWebService(String deviceToken) {\n+    AppController.getHelperProgressDialog().showProgress(LoginCallbackActivity.this, \"\", \"\", false);\n+    HashMap<String, String> headers = new HashMap<>();\n+    headers.put(\"Authorization\", \"Bearer \" + userAuth);\n+    headers.put(\"userId\", userId);\n+\n+    JSONObject jsonObjBody = new JSONObject();\n+    JSONObject infoJson = new JSONObject();\n+    try {\n+      infoJson.put(\"os\", \"android\");\n+      infoJson.put(\"appVersion\", BuildConfig.VERSION_NAME + \".\" + BuildConfig.VERSION_CODE);\n+      infoJson.put(\"deviceToken\", deviceToken);\n+\n+      jsonObjBody.put(\"info\", infoJson);\n+    } catch (JSONException e) {\n+      Logger.log(e);", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTQ5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498441490", "bodyText": "JSONObject normally throws exception when trying to parse the json, but here we create the json manually and we know the values will always will be populated.", "author": "naveenr-btc", "createdAt": "2020-10-01T18:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MzY3OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498483678", "bodyText": "More reason to expose it when it happens :-)", "author": "zohrehj", "createdAt": "2020-10-01T20:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NjE4Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502576186", "bodyText": "Here it is safe to ignore the exception because the situations mentioned in the following link are never met here.\nhttps://developer.android.com/reference/org/json/JSONException", "author": "naveenr-btc", "createdAt": "2020-10-09T17:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTIyNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502581226", "bodyText": "then don't catch the exception", "author": "zohrehj", "createdAt": "2020-10-09T17:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODM2OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r516908368", "bodyText": "@zohrehj Is it fine to throw a run time exception in this case or you are expecting anything else?", "author": "rohitn-boston", "createdAt": "2020-11-03T19:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwNDcwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r518204705", "bodyText": "As discussed, it's save to ignore exception here.", "author": "naveenr-btc", "createdAt": "2020-11-05T16:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NzgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODM2OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493788368", "bodyText": "same here, why is it safe to ignore?", "author": "zohrehj", "createdAt": "2020-09-23T18:05:39Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing\n+      AppController.getHelperSharedPreference()\n+          .writePreference(LoginCallbackActivity.this, getString(R.string.json_object_filter), \"\");\n+\n+      userAuth = tokenData.getAccess_token();\n+      AppController.getHelperSharedPreference()\n+          .writePreference(\n+              LoginCallbackActivity.this,\n+              getString(R.string.refreshToken),\n+              tokenData.getRefresh_token());\n+      if (accountStatus != null && accountStatus.equalsIgnoreCase(\"3\")) {\n+        Intent changePasswordIntent =\n+            new Intent(LoginCallbackActivity.this, ChangePasswordActivity.class);\n+        changePasswordIntent.putExtra(\"userid\", userId);\n+        changePasswordIntent.putExtra(\"auth\", userAuth);\n+        startActivity(changePasswordIntent);\n+        finish();\n+      } else {\n+        new GetFcmRefreshToken().execute();\n+      }\n+    } else if (responseCode == UPDATE_USER_PROFILE) {\n+      UpdateUserProfileData updateUserProfileData = (UpdateUserProfileData) response;\n+      if (updateUserProfileData != null) {\n+        callUserProfileWebService();\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    } else if (responseCode == USER_PROFILE_REQUEST) {\n+      userProfileData = (UserProfileData) response;\n+      if (userProfileData != null) {\n+        if (userProfileData.getSettings().isPasscode()) {\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this, getString(R.string.initialpasscodeset), \"no\");\n+\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this,\n+                  getString(R.string.email),\n+                  \"\" + userProfileData.getProfile().getEmailId());\n+\n+          Intent intent = new Intent(LoginCallbackActivity.this, NewPasscodeSetupActivity.class);\n+          intent.putExtra(\"from\", \"signin\");\n+          startActivityForResult(intent, PASSCODE_RESPONSE);\n+        } else {\n+          login();\n+        }\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    }\n+  }\n+\n+  private void login() {\n+    AppController.getHelperProgressDialog().dismissDialog();\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(\n+            LoginCallbackActivity.this,\n+            getString(R.string.email),\n+            \"\" + userProfileData.getProfile().getEmailId());\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.verified), \"true\");\n+    if (userProfileData != null\n+        && (!userProfileData.getSettings().isLocalNotifications()\n+            || userProfileData.getSettings().isRemoteNotifications())) {\n+      NotificationModuleSubscriber notificationModuleSubscriber =\n+          new NotificationModuleSubscriber(null, null);\n+      notificationModuleSubscriber.generateNotificationTurnOffNotification(\n+          Calendar.getInstance().getTime(), LoginCallbackActivity.this);\n+    }\n+    if (SharedPreferenceHelper.readPreference(\n+            LoginCallbackActivity.this, getString(R.string.loginflow), \"\")\n+        .equalsIgnoreCase(\"StudyInfo\")) {\n+      Intent intent = new Intent(LoginCallbackActivity.this, StudyInfoActivity.class);\n+      intent.putExtra(\"flow\", \"login_callback\");\n+      intent.putExtra(\n+          \"studyId\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyId\", \"\"));\n+      intent.putExtra(\n+          \"title\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_title\", \"\"));\n+      intent.putExtra(\n+          \"bookmark\",\n+          Boolean.parseBoolean(\n+              SharedPreferenceHelper.readPreference(\n+                  LoginCallbackActivity.this, \"login_studyinfo_bookmark\", \"\")));\n+      intent.putExtra(\n+          \"status\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_status\", \"\"));\n+      intent.putExtra(\n+          \"studyStatus\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyStatus\", \"\"));\n+      intent.putExtra(\n+          \"position\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_position\", \"\"));\n+      intent.putExtra(\n+          \"enroll\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_enroll\", \"\"));\n+      intent.putExtra(\n+          \"rejoin\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_rejoin\", \"\"));\n+      startActivity(intent);\n+    } else {\n+      if (AppConfig.AppType.equalsIgnoreCase(getString(R.string.app_gateway))) {\n+        Intent intent = new Intent(LoginCallbackActivity.this, StudyActivity.class);\n+        ComponentName cn = intent.getComponent();\n+        Intent mainIntent = Intent.makeRestartActivityTask(cn);\n+        startActivity(mainIntent);\n+        finish();\n+      } else {\n+        Intent intent = new Intent(LoginCallbackActivity.this, StandaloneActivity.class);\n+        ComponentName cn = intent.getComponent();\n+        Intent mainIntent = Intent.makeRestartActivityTask(cn);\n+        mainIntent.putExtra(\"flow\", \"login_callback\");\n+        startActivity(mainIntent);\n+        finish();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void asyncResponseFailure(int responseCode, String errormsg, String statusCode) {\n+    AppController.getHelperProgressDialog().dismissDialog();\n+    Toast.makeText(this, errormsg, Toast.LENGTH_SHORT).show();\n+    finish();\n+  }\n+\n+  private class GetFcmRefreshToken extends AsyncTask<String, String, String> {\n+\n+    @Override\n+    protected String doInBackground(String... params) {\n+      String token = \"\";\n+      if (FirebaseInstanceId.getInstance().getToken() == null\n+          || FirebaseInstanceId.getInstance().getToken().isEmpty()) {\n+        boolean regIdStatus = false;\n+        while (!regIdStatus) {\n+          token =\n+              AppController.getHelperSharedPreference()\n+                  .readPreference(LoginCallbackActivity.this, \"deviceToken\", \"\");\n+          if (!token.isEmpty()) {\n+            regIdStatus = true;\n+          }\n+        }\n+      } else {\n+        AppController.getHelperSharedPreference()\n+            .writePreference(\n+                LoginCallbackActivity.this,\n+                \"deviceToken\",\n+                FirebaseInstanceId.getInstance().getToken());\n+        token =\n+            AppController.getHelperSharedPreference()\n+                .readPreference(LoginCallbackActivity.this, \"deviceToken\", \"\");\n+      }\n+      return token;\n+    }\n+\n+    @Override\n+    protected void onPostExecute(String token) {\n+      callUpdateProfileWebService(token);\n+    }\n+\n+    @Override\n+    protected void onPreExecute() {\n+      AppController.getHelperProgressDialog()\n+          .showProgress(LoginCallbackActivity.this, \"\", \"\", false);\n+    }\n+  }\n+\n+  private void callUpdateProfileWebService(String deviceToken) {\n+    AppController.getHelperProgressDialog().showProgress(LoginCallbackActivity.this, \"\", \"\", false);\n+    HashMap<String, String> headers = new HashMap<>();\n+    headers.put(\"Authorization\", \"Bearer \" + userAuth);\n+    headers.put(\"userId\", userId);\n+\n+    JSONObject jsonObjBody = new JSONObject();\n+    JSONObject infoJson = new JSONObject();\n+    try {\n+      infoJson.put(\"os\", \"android\");\n+      infoJson.put(\"appVersion\", BuildConfig.VERSION_NAME + \".\" + BuildConfig.VERSION_CODE);\n+      infoJson.put(\"deviceToken\", deviceToken);\n+\n+      jsonObjBody.put(\"info\", infoJson);\n+    } catch (JSONException e) {\n+      Logger.log(e);\n+    }\n+    if (SharedPreferenceHelper.readPreference(LoginCallbackActivity.this, \"logintype\", \"\")\n+        .equalsIgnoreCase(\"signUp\")) {\n+      JSONObject settingJson = new JSONObject();\n+      try {\n+        settingJson.put(\"passcode\", true);\n+        settingJson.put(\"remoteNotifications\", true);\n+        settingJson.put(\"localNotifications\", true);\n+        jsonObjBody.put(\"settings\", settingJson);\n+      } catch (JSONException e) {\n+        Logger.log(e);", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzOTg2Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r494339862", "bodyText": "JSONObject normally throws exception when trying to parse the json, but here we create the json manually and we know the values will always will be populated.", "author": "naveenr-btc", "createdAt": "2020-09-24T13:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4NDAzMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498484033", "bodyText": "Exceptions are just that exceptions and not the norm. Which is why we need to expose them when they happen.", "author": "zohrehj", "createdAt": "2020-10-01T20:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NjM2Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502576362", "bodyText": "Here it is safe to ignore the exception because the situations mentioned in the following link are never met here.\nhttps://developer.android.com/reference/org/json/JSONException", "author": "naveenr-btc", "createdAt": "2020-10-09T17:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTQ2MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502581460", "bodyText": "as I said, if you don't expect an exception happen, it should not be caught", "author": "zohrehj", "createdAt": "2020-10-09T17:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwNDc5OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r518204799", "bodyText": "As discussed, it's save to ignore exception here.", "author": "naveenr-btc", "createdAt": "2020-11-05T16:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4ODM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MDcxMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493790710", "bodyText": "nit: these can all be generated by looping over the properties {\"studyId\", \"title\", \"bookmark\", ...}", "author": "zohrehj", "createdAt": "2020-09-23T18:09:51Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing\n+      AppController.getHelperSharedPreference()\n+          .writePreference(LoginCallbackActivity.this, getString(R.string.json_object_filter), \"\");\n+\n+      userAuth = tokenData.getAccess_token();\n+      AppController.getHelperSharedPreference()\n+          .writePreference(\n+              LoginCallbackActivity.this,\n+              getString(R.string.refreshToken),\n+              tokenData.getRefresh_token());\n+      if (accountStatus != null && accountStatus.equalsIgnoreCase(\"3\")) {\n+        Intent changePasswordIntent =\n+            new Intent(LoginCallbackActivity.this, ChangePasswordActivity.class);\n+        changePasswordIntent.putExtra(\"userid\", userId);\n+        changePasswordIntent.putExtra(\"auth\", userAuth);\n+        startActivity(changePasswordIntent);\n+        finish();\n+      } else {\n+        new GetFcmRefreshToken().execute();\n+      }\n+    } else if (responseCode == UPDATE_USER_PROFILE) {\n+      UpdateUserProfileData updateUserProfileData = (UpdateUserProfileData) response;\n+      if (updateUserProfileData != null) {\n+        callUserProfileWebService();\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    } else if (responseCode == USER_PROFILE_REQUEST) {\n+      userProfileData = (UserProfileData) response;\n+      if (userProfileData != null) {\n+        if (userProfileData.getSettings().isPasscode()) {\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this, getString(R.string.initialpasscodeset), \"no\");\n+\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this,\n+                  getString(R.string.email),\n+                  \"\" + userProfileData.getProfile().getEmailId());\n+\n+          Intent intent = new Intent(LoginCallbackActivity.this, NewPasscodeSetupActivity.class);\n+          intent.putExtra(\"from\", \"signin\");\n+          startActivityForResult(intent, PASSCODE_RESPONSE);\n+        } else {\n+          login();\n+        }\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    }\n+  }\n+\n+  private void login() {\n+    AppController.getHelperProgressDialog().dismissDialog();\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(\n+            LoginCallbackActivity.this,\n+            getString(R.string.email),\n+            \"\" + userProfileData.getProfile().getEmailId());\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.verified), \"true\");\n+    if (userProfileData != null\n+        && (!userProfileData.getSettings().isLocalNotifications()\n+            || userProfileData.getSettings().isRemoteNotifications())) {\n+      NotificationModuleSubscriber notificationModuleSubscriber =\n+          new NotificationModuleSubscriber(null, null);\n+      notificationModuleSubscriber.generateNotificationTurnOffNotification(\n+          Calendar.getInstance().getTime(), LoginCallbackActivity.this);\n+    }\n+    if (SharedPreferenceHelper.readPreference(\n+            LoginCallbackActivity.this, getString(R.string.loginflow), \"\")\n+        .equalsIgnoreCase(\"StudyInfo\")) {\n+      Intent intent = new Intent(LoginCallbackActivity.this, StudyInfoActivity.class);\n+      intent.putExtra(\"flow\", \"login_callback\");\n+      intent.putExtra(\n+          \"studyId\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyId\", \"\"));\n+      intent.putExtra(\n+          \"title\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_title\", \"\"));\n+      intent.putExtra(\n+          \"bookmark\",\n+          Boolean.parseBoolean(\n+              SharedPreferenceHelper.readPreference(\n+                  LoginCallbackActivity.this, \"login_studyinfo_bookmark\", \"\")));\n+      intent.putExtra(\n+          \"status\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_status\", \"\"));\n+      intent.putExtra(\n+          \"studyStatus\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyStatus\", \"\"));\n+      intent.putExtra(\n+          \"position\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_position\", \"\"));\n+      intent.putExtra(\n+          \"enroll\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_enroll\", \"\"));\n+      intent.putExtra(\n+          \"rejoin\",\n+          SharedPreferenceHelper.readPreference(", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MTczMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493791730", "bodyText": "nit: comment is confusing.", "author": "zohrehj", "createdAt": "2020-09-23T18:11:32Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MjE0OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r493792148", "bodyText": "why are events passed as integer, and not string?", "author": "zohrehj", "createdAt": "2020-09-23T18:12:14Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * Copyright \u00a9 2017-2019 Harvard Pilgrim Health Care Institute (HPHCI) and its Contributors.\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n+ * associated documentation files (the \"Software\"), to deal in the Software without restriction, including\n+ * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial\n+ * portions of the Software.\n+ *\n+ * Funding Source: Food and Drug Administration (\u201cFunding Agency\u201d) effective 18 September 2014 as Contract no. HHSF22320140030I/HHSF22301006T (the \u201cPrime Contract\u201d).\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;", "originalCommit": "a9c94896e206632571b2a736957fa156ab133364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzODExNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r494338115", "bodyText": "Android generally handles Responsecode callbacks as integer.  These are responsecode are for individual API calls.", "author": "naveenr-btc", "createdAt": "2020-09-24T13:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MjE0OA=="}], "type": "inlineReview"}, {"oid": "77e57a82583bd768d4841f803757081876baae75", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/77e57a82583bd768d4841f803757081876baae75", "message": "copyright updated", "committedDate": "2020-09-24T15:20:55Z", "type": "commit"}, {"oid": "ebbe8328e8fa433df7ad5c5ada49998e27f0ed92", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/ebbe8328e8fa433df7ad5c5ada49998e27f0ed92", "message": "added test case for hydra auth server error class", "committedDate": "2020-09-24T18:01:11Z", "type": "commit"}, {"oid": "89081e490e561882a8faea3287b0b5e268f9255a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/89081e490e561882a8faea3287b0b5e268f9255a", "message": "Renamed Error.java to AuthServerErrorHandler.java", "committedDate": "2020-09-26T14:39:38Z", "type": "commit"}, {"oid": "f94e22b59520c2a8736ecb30d0527d6e3ea28c83", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f94e22b59520c2a8736ecb30d0527d6e3ea28c83", "message": "Base64 url encoding corrected for code challenge.", "committedDate": "2020-09-26T15:37:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MTUxMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498481512", "bodyText": "urls should be coming from configs, this activation link doesn't seem to correspond to any of the components, is it even the correct path and should it be hardcoded in the code?", "author": "zohrehj", "createdAt": "2020-10-01T19:57:34Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {", "originalCommit": "f94e22b59520c2a8736ecb30d0527d6e3ea28c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NjcxNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502566714", "bodyText": "i've updated", "author": "naveenr-btc", "createdAt": "2020-10-09T17:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MTUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MjAzMA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498482030", "bodyText": "what is 3? please move into a constant and name appropriately.", "author": "zohrehj", "createdAt": "2020-10-01T19:58:37Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing\n+      AppController.getHelperSharedPreference()\n+          .writePreference(LoginCallbackActivity.this, getString(R.string.json_object_filter), \"\");\n+\n+      userAuth = tokenData.getAccess_token();\n+      AppController.getHelperSharedPreference()\n+          .writePreference(\n+              LoginCallbackActivity.this,\n+              getString(R.string.refreshToken),\n+              tokenData.getRefresh_token());\n+      if (accountStatus != null && accountStatus.equalsIgnoreCase(\"3\")) {", "originalCommit": "f94e22b59520c2a8736ecb30d0527d6e3ea28c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2Njc1NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502566755", "bodyText": "i've updated", "author": "naveenr-btc", "createdAt": "2020-10-09T17:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MjAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MjQ2MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498482461", "bodyText": "these string values should ideally be moved into shared constants", "author": "zohrehj", "createdAt": "2020-10-01T19:59:31Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing\n+      AppController.getHelperSharedPreference()\n+          .writePreference(LoginCallbackActivity.this, getString(R.string.json_object_filter), \"\");\n+\n+      userAuth = tokenData.getAccess_token();\n+      AppController.getHelperSharedPreference()\n+          .writePreference(\n+              LoginCallbackActivity.this,\n+              getString(R.string.refreshToken),\n+              tokenData.getRefresh_token());\n+      if (accountStatus != null && accountStatus.equalsIgnoreCase(\"3\")) {\n+        Intent changePasswordIntent =\n+            new Intent(LoginCallbackActivity.this, ChangePasswordActivity.class);\n+        changePasswordIntent.putExtra(\"userid\", userId);\n+        changePasswordIntent.putExtra(\"auth\", userAuth);\n+        startActivity(changePasswordIntent);\n+        finish();\n+      } else {\n+        new GetFcmRefreshToken().execute();\n+      }\n+    } else if (responseCode == UPDATE_USER_PROFILE) {\n+      UpdateUserProfileData updateUserProfileData = (UpdateUserProfileData) response;\n+      if (updateUserProfileData != null) {\n+        callUserProfileWebService();\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    } else if (responseCode == USER_PROFILE_REQUEST) {\n+      userProfileData = (UserProfileData) response;\n+      if (userProfileData != null) {\n+        if (userProfileData.getSettings().isPasscode()) {\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this, getString(R.string.initialpasscodeset), \"no\");\n+\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this,\n+                  getString(R.string.email),\n+                  \"\" + userProfileData.getProfile().getEmailId());\n+\n+          Intent intent = new Intent(LoginCallbackActivity.this, NewPasscodeSetupActivity.class);\n+          intent.putExtra(\"from\", \"signin\");", "originalCommit": "f94e22b59520c2a8736ecb30d0527d6e3ea28c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NjgxOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502566819", "bodyText": "i've updated", "author": "naveenr-btc", "createdAt": "2020-10-09T17:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MjQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MzA4Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r498483087", "bodyText": "please move all these keys, e.g. \"login_studyinfo_status\" into constants. Also add a comment or test file that contains expected format of the response.", "author": "zohrehj", "createdAt": "2020-10-01T20:00:53Z", "path": "Android/app/src/main/java/com/harvard/usermodule/LoginCallbackActivity.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.harvard.usermodule;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.support.annotation.Nullable;\n+import android.support.v7.app.AppCompatActivity;\n+import android.widget.Toast;\n+import com.google.firebase.iid.FirebaseInstanceId;\n+import com.harvard.AppConfig;\n+import com.harvard.BuildConfig;\n+import com.harvard.FdaApplication;\n+import com.harvard.R;\n+import com.harvard.notificationmodule.NotificationModuleSubscriber;\n+import com.harvard.studyappmodule.ChangePasswordActivity;\n+import com.harvard.studyappmodule.StandaloneActivity;\n+import com.harvard.studyappmodule.StudyActivity;\n+import com.harvard.studyappmodule.StudyInfoActivity;\n+import com.harvard.usermodule.event.GetUserProfileEvent;\n+import com.harvard.usermodule.event.LoginEvent;\n+import com.harvard.usermodule.event.UpdateUserProfileEvent;\n+import com.harvard.usermodule.webservicemodel.TokenData;\n+import com.harvard.usermodule.webservicemodel.UpdateUserProfileData;\n+import com.harvard.usermodule.webservicemodel.UserProfileData;\n+import com.harvard.utils.AppController;\n+import com.harvard.utils.Logger;\n+import com.harvard.utils.SharedPreferenceHelper;\n+import com.harvard.utils.Urls;\n+import com.harvard.webservicemodule.apihelper.ApiCall;\n+import com.harvard.webservicemodule.events.AuthServerConfigEvent;\n+import com.harvard.webservicemodule.events.RegistrationServerConfigEvent;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class LoginCallbackActivity extends AppCompatActivity\n+    implements ApiCall.OnAsyncRequestComplete {\n+  private static final int TOKENS_REQUEST = 100;\n+  private static final int UPDATE_USER_PROFILE = 101;\n+  private static final int USER_PROFILE_REQUEST = 102;\n+  private String userId;\n+  private String userAuth;\n+  private String code;\n+  private String accountStatus;\n+  private String emailId;\n+  UserProfileData userProfileData;\n+  private static final int PASSCODE_RESPONSE = 103;\n+  private static final int STUDYINFO_REQUEST = 100;\n+\n+  @Override\n+  protected void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    setContentView(R.layout.activity_standalone);\n+    handleIntent(getIntent());\n+  }\n+\n+  public void handleIntent(Intent intent) {\n+    String appLinkAction = intent.getAction();\n+    Uri appLinkData = intent.getData();\n+    if (Intent.ACTION_VIEW.equals(appLinkAction) && appLinkData != null) {\n+      Uri uri = intent.getData();\n+      if (uri != null) {\n+        userId = uri.getQueryParameter(\"userId\");\n+        if (uri.getPath().equalsIgnoreCase(\"/mystudies/callback\")) {\n+          code = uri.getQueryParameter(\"code\");\n+          accountStatus = uri.getQueryParameter(\"accountStatus\");\n+          AppController.getHelperProgressDialog().showProgress(this, \"\", \"\", false);\n+\n+          HashMap<String, String> headers = new HashMap<>();\n+          headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+          headers.put(\"correlationId\", FdaApplication.getRandomString());\n+          headers.put(\"appId\", BuildConfig.APP_ID);\n+          headers.put(\"mobilePlatform\", \"ANDROID\");\n+\n+          HashMap<String, String> params = new HashMap<>();\n+          params.put(\"grant_type\", \"authorization_code\");\n+          params.put(\"scope\", \"openid offline\");\n+          params.put(\"redirect_uri\", Urls.AUTH_SERVER_REDIRECT_URL);\n+          params.put(\"code_verifier\", FdaApplication.getRandomString());\n+          params.put(\"code\", code);\n+          params.put(\"userId\", userId);\n+\n+          AuthServerConfigEvent authServerConfigEvent =\n+              new AuthServerConfigEvent(\n+                  \"post\",\n+                  Urls.TOKENS,\n+                  TOKENS_REQUEST,\n+                  this,\n+                  TokenData.class,\n+                  params,\n+                  headers,\n+                  null,\n+                  false,\n+                  this);\n+          LoginEvent loginEvent = new LoginEvent();\n+          loginEvent.setAuthServerConfigEvent(authServerConfigEvent);\n+          UserModulePresenter userModulePresenter = new UserModulePresenter();\n+          userModulePresenter.performLogin(loginEvent);\n+        } else if (uri.getPath().equalsIgnoreCase(\"/mystudies/activation\")) {\n+          emailId = uri.getQueryParameter(\"email\");\n+          Intent verificationIntent =\n+              new Intent(LoginCallbackActivity.this, VerificationStepActivity.class);\n+          verificationIntent.putExtra(\"email\", uri.getQueryParameter(\"email\"));\n+          verificationIntent.putExtra(\"type\", \"signin\");\n+          startActivity(verificationIntent);\n+          finish();\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public <T> void asyncResponse(T response, int responseCode) {\n+    if (responseCode == TOKENS_REQUEST) {\n+      TokenData tokenData = (TokenData) response;\n+      // FilterActivity Screen json object clearing\n+      AppController.getHelperSharedPreference()\n+          .writePreference(LoginCallbackActivity.this, getString(R.string.json_object_filter), \"\");\n+\n+      userAuth = tokenData.getAccess_token();\n+      AppController.getHelperSharedPreference()\n+          .writePreference(\n+              LoginCallbackActivity.this,\n+              getString(R.string.refreshToken),\n+              tokenData.getRefresh_token());\n+      if (accountStatus != null && accountStatus.equalsIgnoreCase(\"3\")) {\n+        Intent changePasswordIntent =\n+            new Intent(LoginCallbackActivity.this, ChangePasswordActivity.class);\n+        changePasswordIntent.putExtra(\"userid\", userId);\n+        changePasswordIntent.putExtra(\"auth\", userAuth);\n+        startActivity(changePasswordIntent);\n+        finish();\n+      } else {\n+        new GetFcmRefreshToken().execute();\n+      }\n+    } else if (responseCode == UPDATE_USER_PROFILE) {\n+      UpdateUserProfileData updateUserProfileData = (UpdateUserProfileData) response;\n+      if (updateUserProfileData != null) {\n+        callUserProfileWebService();\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    } else if (responseCode == USER_PROFILE_REQUEST) {\n+      userProfileData = (UserProfileData) response;\n+      if (userProfileData != null) {\n+        if (userProfileData.getSettings().isPasscode()) {\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this, getString(R.string.initialpasscodeset), \"no\");\n+\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+          AppController.getHelperSharedPreference()\n+              .writePreference(\n+                  LoginCallbackActivity.this,\n+                  getString(R.string.email),\n+                  \"\" + userProfileData.getProfile().getEmailId());\n+\n+          Intent intent = new Intent(LoginCallbackActivity.this, NewPasscodeSetupActivity.class);\n+          intent.putExtra(\"from\", \"signin\");\n+          startActivityForResult(intent, PASSCODE_RESPONSE);\n+        } else {\n+          login();\n+        }\n+      } else {\n+        Toast.makeText(\n+                this, getResources().getString(R.string.not_able_to_login), Toast.LENGTH_SHORT)\n+            .show();\n+        finish();\n+      }\n+    }\n+  }\n+\n+  private void login() {\n+    AppController.getHelperProgressDialog().dismissDialog();\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.userid), \"\" + userId);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.auth), \"\" + userAuth);\n+    AppController.getHelperSharedPreference()\n+        .writePreference(\n+            LoginCallbackActivity.this,\n+            getString(R.string.email),\n+            \"\" + userProfileData.getProfile().getEmailId());\n+    AppController.getHelperSharedPreference()\n+        .writePreference(LoginCallbackActivity.this, getString(R.string.verified), \"true\");\n+    if (userProfileData != null\n+        && (!userProfileData.getSettings().isLocalNotifications()\n+            || userProfileData.getSettings().isRemoteNotifications())) {\n+      NotificationModuleSubscriber notificationModuleSubscriber =\n+          new NotificationModuleSubscriber(null, null);\n+      notificationModuleSubscriber.generateNotificationTurnOffNotification(\n+          Calendar.getInstance().getTime(), LoginCallbackActivity.this);\n+    }\n+    if (SharedPreferenceHelper.readPreference(\n+            LoginCallbackActivity.this, getString(R.string.loginflow), \"\")\n+        .equalsIgnoreCase(\"StudyInfo\")) {\n+      Intent intent = new Intent(LoginCallbackActivity.this, StudyInfoActivity.class);\n+      intent.putExtra(\"flow\", \"login_callback\");\n+      intent.putExtra(\n+          \"studyId\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_studyId\", \"\"));\n+      intent.putExtra(\n+          \"title\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_title\", \"\"));\n+      intent.putExtra(\n+          \"bookmark\",\n+          Boolean.parseBoolean(\n+              SharedPreferenceHelper.readPreference(\n+                  LoginCallbackActivity.this, \"login_studyinfo_bookmark\", \"\")));\n+      intent.putExtra(\n+          \"status\",\n+          SharedPreferenceHelper.readPreference(\n+              LoginCallbackActivity.this, \"login_studyinfo_status\", \"\"));", "originalCommit": "f94e22b59520c2a8736ecb30d0527d6e3ea28c83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2Njk1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/1014#discussion_r502566953", "bodyText": "i've updated them into string files", "author": "naveenr-btc", "createdAt": "2020-10-09T17:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4MzA4Nw=="}], "type": "inlineReview"}, {"oid": "e66c2f45fd60847c53bd54275151feb3f97ee444", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/e66c2f45fd60847c53bd54275151feb3f97ee444", "message": "review comment updated", "committedDate": "2020-10-09T17:11:46Z", "type": "commit"}, {"oid": "91ec68a000d417f6226b5fbf606caff19361abe8", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/91ec68a000d417f6226b5fbf606caff19361abe8", "message": "Merge branch 'develop' into Android-auth-server-implementation-setup", "committedDate": "2020-11-06T09:53:01Z", "type": "commit"}]}