{"pr_number": 673, "pr_title": "Participant Manager Service: PUT /sites/{siteId}/decommission endpoint implementation", "pr_createdAt": "2020-07-24T13:43:59Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673", "timeline": [{"oid": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "message": "PUT //sites/{siteId}/decommission endpoint implementation\n\nPUT //sites/{siteId}/decommission endpoint implementation", "committedDate": "2020-07-24T13:37:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3NzE1Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462077156", "bodyText": "\"Yet to Join\" ?", "author": "saminguyen", "createdAt": "2020-07-29T06:52:36Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/CommonConstants.java", "diffHunk": "@@ -38,4 +38,10 @@ private CommonConstants() {}\n   public static final String ENROLLED_STATUS = \"Enrolled\";\n \n   public static final String YET_TO_ENROLL = \"Yet to Enroll\";\n+\n+  public static final String YET_TO_JOIN = \"yetToJoin\";", "originalCommit": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNjMyMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462216322", "bodyText": "Changed to \"Yet to Join\".", "author": "Kantharajut-btc", "createdAt": "2020-07-29T11:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3NzE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3NzMxMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462077311", "bodyText": "typo - successfully", "author": "saminguyen", "createdAt": "2020-07-29T06:52:59Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java", "diffHunk": "@@ -45,7 +45,11 @@\n \n   ADD_PARTICIPANT_SUCCESS(HttpStatus.CREATED, \"MSG-0016\", \"Participant added successfully\"),\n \n-  GET_APPS_DETAILS_SUCCESS(HttpStatus.OK, \"MSG-0018\", \"Get App Details successfull\");\n+  GET_APPS_DETAILS_SUCCESS(HttpStatus.OK, \"MSG-0018\", \"Get App Details successfull\"),", "originalCommit": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNjQ2OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462216469", "bodyText": "typo corrected", "author": "Kantharajut-btc", "createdAt": "2020-07-29T11:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3NzMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwMjYyNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462102625", "bodyText": "TODO: throw Exceptions here", "author": "saminguyen", "createdAt": "2020-07-29T07:43:18Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -337,4 +343,152 @@ private void addRegistryParticipants(\n       participantRegistry.getRegistryParticipants().add(participant);\n     }\n   }\n+\n+  private boolean isEditPermissionAllowed(String studyId, String userId) {\n+    logger.entry(\"isEditPermissionAllowed(siteRequest)\");\n+    Optional<StudyPermissionEntity> optStudyPermissionEntity =\n+        studyPermissionRepository.findByStudyIdAndUserId(studyId, userId);\n+\n+    if (optStudyPermissionEntity.isPresent()) {\n+      StudyPermissionEntity studyPermission = optStudyPermissionEntity.get();\n+      String appInfoId = studyPermission.getAppInfo().getId();\n+      Optional<AppPermissionEntity> optAppPermissionEntity =\n+          appPermissionRepository.findByUserIdAndAppId(userId, appInfoId);\n+      if (optAppPermissionEntity.isPresent()) {\n+        AppPermissionEntity appPermission = optAppPermissionEntity.get();\n+        logger.exit(String.format(\"editValue=%d\", Permission.READ_EDIT.value()));\n+        return studyPermission.getEdit() == Permission.READ_EDIT.value()\n+            || appPermission.getEdit() == Permission.READ_EDIT.value();\n+      }\n+    }\n+    logger.exit(\"default permission is edit, return true\");\n+    return true;\n+  }\n+\n+  @Override\n+  @Transactional\n+  public SiteStatusResponse toggleSiteStatus(String userId, String siteId) {\n+    logger.entry(\"toggleSiteStatus()\");\n+\n+    ErrorCode errorCode = validateDecommissionSiteRequest(userId, siteId);\n+    if (errorCode != null) {\n+      logger.exit(errorCode);\n+      return new SiteStatusResponse(errorCode);\n+    }\n+\n+    Optional<SiteEntity> optSiteEntity = siteRepository.findById(siteId);\n+\n+    SiteEntity site = optSiteEntity.get();\n+    if (SiteStatus.DEACTIVE == SiteStatus.fromValue(site.getStatus())) {\n+      site.setStatus(SiteStatus.ACTIVE.value());\n+      site = siteRepository.saveAndFlush(site);\n+\n+      logger.exit(String.format(\" Site status changed to ACTIVE for siteId=%s\", site.getId()));\n+      return new SiteStatusResponse(\n+          site.getId(), site.getStatus(), MessageCode.RECOMMISSION_SITE_SUCCESS);\n+    }\n+\n+    site.setStatus(SiteStatus.DEACTIVE.value());\n+    siteRepository.saveAndFlush(site);\n+    setPermissions(siteId);\n+\n+    logger.exit(String.format(\"Site status changed to DEACTIVE for siteId=%s\", site.getId()));\n+    return new SiteStatusResponse(\n+        site.getId(), site.getStatus(), MessageCode.DECOMMISSION_SITE_SUCCESS);\n+  }\n+\n+  private ErrorCode validateDecommissionSiteRequest(String userId, String siteId) {\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+    if (!optSitePermission.isPresent()) {\n+      return ErrorCode.SITE_NOT_FOUND;", "originalCommit": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNzYzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462217634", "bodyText": "#702 issue created to address this comment", "author": "Kantharajut-btc", "createdAt": "2020-07-29T11:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwMjYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNTg0NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462115844", "bodyText": "Please rename this method. This is more of a general clean up of site permissions and participant - site registry, right? Not sure what best to call it but please make some suggestions in the comment reply", "author": "saminguyen", "createdAt": "2020-07-29T08:07:06Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -337,4 +343,152 @@ private void addRegistryParticipants(\n       participantRegistry.getRegistryParticipants().add(participant);\n     }\n   }\n+\n+  private boolean isEditPermissionAllowed(String studyId, String userId) {\n+    logger.entry(\"isEditPermissionAllowed(siteRequest)\");\n+    Optional<StudyPermissionEntity> optStudyPermissionEntity =\n+        studyPermissionRepository.findByStudyIdAndUserId(studyId, userId);\n+\n+    if (optStudyPermissionEntity.isPresent()) {\n+      StudyPermissionEntity studyPermission = optStudyPermissionEntity.get();\n+      String appInfoId = studyPermission.getAppInfo().getId();\n+      Optional<AppPermissionEntity> optAppPermissionEntity =\n+          appPermissionRepository.findByUserIdAndAppId(userId, appInfoId);\n+      if (optAppPermissionEntity.isPresent()) {\n+        AppPermissionEntity appPermission = optAppPermissionEntity.get();\n+        logger.exit(String.format(\"editValue=%d\", Permission.READ_EDIT.value()));\n+        return studyPermission.getEdit() == Permission.READ_EDIT.value()\n+            || appPermission.getEdit() == Permission.READ_EDIT.value();\n+      }\n+    }\n+    logger.exit(\"default permission is edit, return true\");\n+    return true;\n+  }\n+\n+  @Override\n+  @Transactional\n+  public SiteStatusResponse toggleSiteStatus(String userId, String siteId) {\n+    logger.entry(\"toggleSiteStatus()\");\n+\n+    ErrorCode errorCode = validateDecommissionSiteRequest(userId, siteId);\n+    if (errorCode != null) {\n+      logger.exit(errorCode);\n+      return new SiteStatusResponse(errorCode);\n+    }\n+\n+    Optional<SiteEntity> optSiteEntity = siteRepository.findById(siteId);\n+\n+    SiteEntity site = optSiteEntity.get();\n+    if (SiteStatus.DEACTIVE == SiteStatus.fromValue(site.getStatus())) {\n+      site.setStatus(SiteStatus.ACTIVE.value());\n+      site = siteRepository.saveAndFlush(site);\n+\n+      logger.exit(String.format(\" Site status changed to ACTIVE for siteId=%s\", site.getId()));\n+      return new SiteStatusResponse(\n+          site.getId(), site.getStatus(), MessageCode.RECOMMISSION_SITE_SUCCESS);\n+    }\n+\n+    site.setStatus(SiteStatus.DEACTIVE.value());\n+    siteRepository.saveAndFlush(site);\n+    setPermissions(siteId);\n+\n+    logger.exit(String.format(\"Site status changed to DEACTIVE for siteId=%s\", site.getId()));\n+    return new SiteStatusResponse(\n+        site.getId(), site.getStatus(), MessageCode.DECOMMISSION_SITE_SUCCESS);\n+  }\n+\n+  private ErrorCode validateDecommissionSiteRequest(String userId, String siteId) {\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+    if (!optSitePermission.isPresent()) {\n+      return ErrorCode.SITE_NOT_FOUND;\n+    }\n+\n+    SitePermissionEntity sitePermission = optSitePermission.get();\n+    if (OPEN.equalsIgnoreCase(sitePermission.getStudy().getType())) {\n+      return ErrorCode.CANNOT_DECOMMISSION_SITE_FOR_OPEN_STUDY;\n+    }\n+\n+    String studyId = sitePermission.getStudy().getId();\n+    boolean canEdit = isEditPermissionAllowed(studyId, userId);\n+    if (!canEdit) {\n+      return ErrorCode.SITE_PERMISSION_ACEESS_DENIED;\n+    }\n+\n+    List<String> status = Arrays.asList(ENROLLED_STATUS, STATUS_ACTIVE);\n+    Optional<Long> optParticipantStudyCount =\n+        participantStudyRepository.findByStudyIdAndStatus(status, studyId);\n+\n+    if (optParticipantStudyCount.isPresent() && optParticipantStudyCount.get() > 0) {\n+      return ErrorCode.CANNOT_DECOMMISSION_SITE_FOR_ENROLLED_ACTIVE_STATUS;\n+    }\n+\n+    return null;\n+  }\n+\n+  private void setPermissions(String siteId) {", "originalCommit": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNzMxNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462217316", "bodyText": "Changed method name to updateSitePermissions.", "author": "Kantharajut-btc", "createdAt": "2020-07-29T11:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNTg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzI1NA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462117254", "bodyText": "Typo here. Please update the error code name", "author": "saminguyen", "createdAt": "2020-07-29T08:09:42Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java", "diffHunk": "@@ -337,4 +343,152 @@ private void addRegistryParticipants(\n       participantRegistry.getRegistryParticipants().add(participant);\n     }\n   }\n+\n+  private boolean isEditPermissionAllowed(String studyId, String userId) {\n+    logger.entry(\"isEditPermissionAllowed(siteRequest)\");\n+    Optional<StudyPermissionEntity> optStudyPermissionEntity =\n+        studyPermissionRepository.findByStudyIdAndUserId(studyId, userId);\n+\n+    if (optStudyPermissionEntity.isPresent()) {\n+      StudyPermissionEntity studyPermission = optStudyPermissionEntity.get();\n+      String appInfoId = studyPermission.getAppInfo().getId();\n+      Optional<AppPermissionEntity> optAppPermissionEntity =\n+          appPermissionRepository.findByUserIdAndAppId(userId, appInfoId);\n+      if (optAppPermissionEntity.isPresent()) {\n+        AppPermissionEntity appPermission = optAppPermissionEntity.get();\n+        logger.exit(String.format(\"editValue=%d\", Permission.READ_EDIT.value()));\n+        return studyPermission.getEdit() == Permission.READ_EDIT.value()\n+            || appPermission.getEdit() == Permission.READ_EDIT.value();\n+      }\n+    }\n+    logger.exit(\"default permission is edit, return true\");\n+    return true;\n+  }\n+\n+  @Override\n+  @Transactional\n+  public SiteStatusResponse toggleSiteStatus(String userId, String siteId) {\n+    logger.entry(\"toggleSiteStatus()\");\n+\n+    ErrorCode errorCode = validateDecommissionSiteRequest(userId, siteId);\n+    if (errorCode != null) {\n+      logger.exit(errorCode);\n+      return new SiteStatusResponse(errorCode);\n+    }\n+\n+    Optional<SiteEntity> optSiteEntity = siteRepository.findById(siteId);\n+\n+    SiteEntity site = optSiteEntity.get();\n+    if (SiteStatus.DEACTIVE == SiteStatus.fromValue(site.getStatus())) {\n+      site.setStatus(SiteStatus.ACTIVE.value());\n+      site = siteRepository.saveAndFlush(site);\n+\n+      logger.exit(String.format(\" Site status changed to ACTIVE for siteId=%s\", site.getId()));\n+      return new SiteStatusResponse(\n+          site.getId(), site.getStatus(), MessageCode.RECOMMISSION_SITE_SUCCESS);\n+    }\n+\n+    site.setStatus(SiteStatus.DEACTIVE.value());\n+    siteRepository.saveAndFlush(site);\n+    setPermissions(siteId);\n+\n+    logger.exit(String.format(\"Site status changed to DEACTIVE for siteId=%s\", site.getId()));\n+    return new SiteStatusResponse(\n+        site.getId(), site.getStatus(), MessageCode.DECOMMISSION_SITE_SUCCESS);\n+  }\n+\n+  private ErrorCode validateDecommissionSiteRequest(String userId, String siteId) {\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(userId, siteId);\n+    if (!optSitePermission.isPresent()) {\n+      return ErrorCode.SITE_NOT_FOUND;\n+    }\n+\n+    SitePermissionEntity sitePermission = optSitePermission.get();\n+    if (OPEN.equalsIgnoreCase(sitePermission.getStudy().getType())) {\n+      return ErrorCode.CANNOT_DECOMMISSION_SITE_FOR_OPEN_STUDY;\n+    }\n+\n+    String studyId = sitePermission.getStudy().getId();\n+    boolean canEdit = isEditPermissionAllowed(studyId, userId);\n+    if (!canEdit) {\n+      return ErrorCode.SITE_PERMISSION_ACEESS_DENIED;", "originalCommit": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNzg1MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462217850", "bodyText": "typo corrected", "author": "Kantharajut-btc", "createdAt": "2020-07-29T11:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzQzMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462117433", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Step 2: call API and expect SITE_PERMISSION_ACEESS_DENIED error\n          \n          \n            \n                // Step 2: call API and expect SITE_PERMISSION_ACCESS_DENIED error", "author": "saminguyen", "createdAt": "2020-07-29T08:09:58Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/SitesControllerTest.java", "diffHunk": "@@ -422,6 +428,155 @@ public void shouldReturnSiteParticipantsRegistry() throws Exception {\n             jsonPath(\"$.message\", is(MessageCode.GET_PARTICIPANT_REGISTRY_SUCCESS.getMessage())));\n   }\n \n+  @Test\n+  public void shouldReturnNotFoundForDecomissionSite() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    // Call API and expect SITE_NOT_FOUND error\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.DECOMISSION_SITE.getPath(), IdGenerator.id())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andExpect(status().isNotFound())\n+        .andExpect(jsonPath(\"$.error_description\", is(ErrorCode.SITE_NOT_FOUND.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldRecomissionSite() throws Exception {\n+    // Step 1: Set the status to DEACTIVE\n+    siteEntity.setStatus(SiteStatus.DEACTIVE.value());\n+    siteEntity = testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: call API and expect RECOMMISSION_SITE_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    result =\n+        mockMvc\n+            .perform(\n+                put(ApiEndpoint.DECOMISSION_SITE.getPath(), siteEntity.getId())\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.siteId\", notNullValue()))\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.RECOMMISSION_SITE_SUCCESS.getMessage())))\n+            .andExpect(jsonPath(\"$.status\", is(SiteStatus.ACTIVE.value())))\n+            .andReturn();\n+\n+    String siteId = JsonPath.read(result.getResponse().getContentAsString(), \"$.siteId\");\n+\n+    // Step 3: verify updated values\n+    Optional<SiteEntity> optSiteEntity = siteRepository.findById(siteId);\n+    SiteEntity siteEntity = optSiteEntity.get();\n+    assertNotNull(siteEntity);\n+    assertEquals(DECOMMISSION_SITE_NAME, siteEntity.getName());\n+  }\n+\n+  @Test\n+  public void shouldDecomissionSite() throws Exception {\n+    // Step 1: set status to ACTIVE\n+    siteEntity.setStatus(SiteStatus.ACTIVE.value());\n+    siteEntity = testDataHelper.getSiteRepository().saveAndFlush(siteEntity);\n+\n+    // Step 2: Call API and expect DECOMMISSION_SITE_SUCCESS message\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+    result =\n+        mockMvc\n+            .perform(\n+                put(ApiEndpoint.DECOMISSION_SITE.getPath(), siteEntity.getId())\n+                    .headers(headers)\n+                    .contextPath(getContextPath()))\n+            .andExpect(status().isOk())\n+            .andExpect(jsonPath(\"$.siteId\", notNullValue()))\n+            .andExpect(jsonPath(\"$.status\", is(SiteStatus.DEACTIVE.value())))\n+            .andExpect(\n+                jsonPath(\"$.message\", is(MessageCode.DECOMMISSION_SITE_SUCCESS.getMessage())))\n+            .andReturn();\n+\n+    String siteId = JsonPath.read(result.getResponse().getContentAsString(), \"$.siteId\");\n+\n+    // Step 3: verify updated values\n+    Optional<SiteEntity> optSiteEntity = siteRepository.findById(siteId);\n+    SiteEntity siteEntity = optSiteEntity.get();\n+    assertNotNull(siteEntity);\n+    assertEquals(DECOMMISSION_SITE_NAME, siteEntity.getName());\n+  }\n+\n+  @Test\n+  public void shouldReturnCannotDecommissionSiteForOpenStudyError() throws Exception {\n+    // Step 1: set studyType to open\n+    studyEntity.setType(OPEN);\n+    studyEntity = testDataHelper.getStudyRepository().saveAndFlush(studyEntity);\n+\n+    // Step 2: call API and expect CANNOT_DECOMMISSION_SITE_FOR_OPEN_STUDY error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.DECOMISSION_SITE.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\",\n+                is(ErrorCode.CANNOT_DECOMMISSION_SITE_FOR_OPEN_STUDY.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnCannotDecomissionSiteForEnrolledAndActiveStatus() throws Exception {\n+    // Step 1: Set status to enrolled\n+    participantStudyEntity.setStatus(ENROLLED_STATUS);\n+    testDataHelper.getParticipantStudyRepository().saveAndFlush(participantStudyEntity);\n+\n+    // Step 2: call API and expect CANNOT_DECOMMISSION_SITE_FOR_ENROLLED_ACTIVE_STATUS error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            put(ApiEndpoint.DECOMISSION_SITE.getPath(), siteEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\",\n+                is(\n+                    ErrorCode.CANNOT_DECOMMISSION_SITE_FOR_ENROLLED_ACTIVE_STATUS\n+                        .getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnSitePermissionAccessDeniedForDecommissionSite() throws Exception {\n+    // Step 1: Set permission to read only\n+    StudyPermissionEntity studyPermissionEntity = studyEntity.getStudyPermissions().get(0);\n+    studyPermissionEntity.setEdit(Permission.READ_VIEW.value());\n+    studyEntity = testDataHelper.getStudyRepository().saveAndFlush(studyEntity);\n+\n+    AppPermissionEntity appPermissionEntity = appEntity.getAppPermissions().get(0);\n+    appPermissionEntity.setEdit(Permission.READ_VIEW.value());\n+    appEntity = testDataHelper.getAppRepository().saveAndFlush(appEntity);\n+\n+    // Step 2: call API and expect SITE_PERMISSION_ACEESS_DENIED error", "originalCommit": "f85d1e785ca83fa39258a31eb1d2dbb8fa7d5aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxODA5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/673#discussion_r462218090", "bodyText": "typo corrected", "author": "Kantharajut-btc", "createdAt": "2020-07-29T11:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjExNzQzMw=="}], "type": "inlineReview"}, {"oid": "9430d11880d7a9552399dbb30f152a6578a5d47d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9430d11880d7a9552399dbb30f152a6578a5d47d", "message": "Fixed PR comments\n\nFixed PR comments", "committedDate": "2020-07-29T11:00:47Z", "type": "commit"}, {"oid": "86c2a3d3973a38f0db86e7a342df4a465219f735", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/86c2a3d3973a38f0db86e7a342df4a465219f735", "message": "Merge branch 'participant-manager-site-getParticipant-endpoint' into participant-manager-decommission-endpoint", "committedDate": "2020-07-29T11:07:36Z", "type": "commit"}, {"oid": "c3f804695ca4a3365a417e0e88d8bb58d50ed639", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/c3f804695ca4a3365a417e0e88d8bb58d50ed639", "message": "Merge branch 'develop' into participant-manager-decommission-endpoint", "committedDate": "2020-08-13T16:14:02Z", "type": "commit"}, {"oid": "0b2c5d765e47459c282a3453278ba247557aea84", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/0b2c5d765e47459c282a3453278ba247557aea84", "message": "Resolved merge conflicts\n\nResolved merge conflicts", "committedDate": "2020-08-13T16:23:59Z", "type": "commit"}]}