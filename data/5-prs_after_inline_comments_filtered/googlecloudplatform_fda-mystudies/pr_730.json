{"pr_number": 730, "pr_title": "GET /consents/{consentId}/consentDocument endpoint implementation", "pr_createdAt": "2020-08-07T16:31:05Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730", "timeline": [{"oid": "cbc8fd99c52e59d03f31bc450815370a845e904a", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/cbc8fd99c52e59d03f31bc450815370a845e904a", "message": "GET /consents/{consentId}/consentDocument endpoint implementation\n\nGET /consents/{consentId}/consentDocument endpoint implementation with integration tests", "committedDate": "2020-08-07T16:28:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NjU1Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r468146556", "bodyText": "instead of converting to byte array here, I see you can just call getContent() on Blob and get the byte array that way. In test, you can also mock the results of getContents() and check for that string in the response.", "author": "saminguyen", "createdAt": "2020-08-10T19:56:40Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ConsentServiceImpl.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import com.google.cloud.healthcare.fdamystudies.beans.ConsentDocument;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.SitePermissionRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyConsentRepository;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.Storage;\n+import java.io.ByteArrayOutputStream;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class ConsentServiceImpl implements ConsentService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(ConsentServiceImpl.class.getName());\n+\n+  @Autowired private SitePermissionRepository sitePermissionRepository;\n+\n+  @Autowired private StudyConsentRepository studyConsentRepository;\n+\n+  @Autowired private Storage storageService;\n+\n+  @Autowired AppPropertyConfig appConfig;\n+\n+  @Override\n+  @Transactional(readOnly = true)\n+  public ConsentDocument getConsentDocument(String consentId, String userId) {\n+    logger.entry(\"begin getConsentDocument(consentId,userId)\");\n+\n+    Optional<StudyConsentEntity> optStudyConsent = studyConsentRepository.findById(consentId);\n+    StudyConsentEntity studyConsentEntity = optStudyConsent.get();\n+\n+    if (!optStudyConsent.isPresent()\n+        || studyConsentEntity.getParticipantStudy() == null\n+        || studyConsentEntity.getParticipantStudy().getSite() == null\n+        || studyConsentEntity.getParticipantStudy().getSite().getId() == null) {\n+      logger.exit(ErrorCode.CONSENT_DATA_NOT_AVAILABLE);\n+      return new ConsentDocument(ErrorCode.CONSENT_DATA_NOT_AVAILABLE);\n+    }\n+    Optional<SitePermissionEntity> optSitePermission =\n+        sitePermissionRepository.findByUserIdAndSiteId(\n+            userId, studyConsentEntity.getParticipantStudy().getSite().getId());\n+\n+    if (!optSitePermission.isPresent()) {\n+      logger.exit(ErrorCode.SITE_PERMISSION_ACEESS_DENIED);\n+      return new ConsentDocument(ErrorCode.SITE_PERMISSION_ACEESS_DENIED);\n+    }\n+\n+    String document = null;\n+    if (StringUtils.isNotBlank(studyConsentEntity.getPdfPath())) {\n+      Blob blob =\n+          storageService.get(BlobId.of(appConfig.getBucketName(), studyConsentEntity.getPdfPath()));\n+      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+      blob.downloadTo(outputStream);\n+      document = new String(outputStream.toByteArray());", "originalCommit": "cbc8fd99c52e59d03f31bc450815370a845e904a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyNzY2Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469327662", "bodyText": "Changed to blob.getContent() instead of outputStream.toByteArray().", "author": "monica-BTC", "createdAt": "2020-08-12T15:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NjU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0Njc3Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r468146773", "bodyText": "Rename to ConsentDocumentResponse", "author": "saminguyen", "createdAt": "2020-08-10T19:57:04Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ConsentDocument.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+package com.google.cloud.healthcare.fdamystudies.beans;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+@NoArgsConstructor\n+public class ConsentDocument extends BaseResponse {", "originalCommit": "cbc8fd99c52e59d03f31bc450815370a845e904a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyODI3NQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469328275", "bodyText": "Renamed from ConsentDocument to ConsentDocumentResponse", "author": "monica-BTC", "createdAt": "2020-08-12T15:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0Njc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjQzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r468152434", "bodyText": "you can mock the blob.getContent() result and test for that here", "author": "saminguyen", "createdAt": "2020-08-10T20:08:33Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ConsentControllerTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be found in the LICENSE file\n+ * or at https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ConsentService;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.Storage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class ConsentControllerTest extends BaseMockIT {\n+\n+  @Autowired\n+  private ConsentController controller;\n+\n+  @Autowired\n+  private ConsentService consentService;\n+\n+  @Autowired\n+  private TestDataHelper testDataHelper;\n+\n+  @Autowired\n+  private ParticipantStudyRepository participantStudyRepository;\n+\n+  @Autowired\n+  private Storage mockStorage;\n+\n+  @Autowired\n+  private AppPropertyConfig appPropConfig;\n+\n+  protected MvcResult result;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private StudyConsentEntity studyConsentEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantStudyEntity = testDataHelper.createParticipantStudyEntity(siteEntity, studyEntity,\n+        participantRegistrySiteEntity);\n+    studyConsentEntity = testDataHelper.createStudyConsentEntity(participantStudyEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(consentService);\n+  }\n+\n+  @Test\n+  public void shouldReturnConsentDocument() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    BlobId validBlobId = BlobId.of(appPropConfig.getBucketName(), \"documents/test-document.pdf\");\n+    Blob mockedBlob = mock(Blob.class);\n+\n+    when(this.mockStorage.get(eq(validBlobId))).thenReturn(mockedBlob);\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+            .headers(headers).contextPath(getContextPath()))\n+        .andDo(print()).andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.type\").value(MediaType.APPLICATION_PDF_VALUE))\n+        .andExpect(jsonPath(\"$.content\").isEmpty()).andExpect(", "originalCommit": "cbc8fd99c52e59d03f31bc450815370a845e904a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyOTIwNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469329205", "bodyText": "Mocked the content and checked for the result.", "author": "monica-BTC", "createdAt": "2020-08-12T15:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2Mjc5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r468162790", "bodyText": "Do we have a TODO or bug for refactoring this? Just to fix the typo for code cleanliness", "author": "saminguyen", "createdAt": "2020-08-10T20:19:42Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ConsentControllerTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be found in the LICENSE file\n+ * or at https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ConsentService;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.Storage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class ConsentControllerTest extends BaseMockIT {\n+\n+  @Autowired\n+  private ConsentController controller;\n+\n+  @Autowired\n+  private ConsentService consentService;\n+\n+  @Autowired\n+  private TestDataHelper testDataHelper;\n+\n+  @Autowired\n+  private ParticipantStudyRepository participantStudyRepository;\n+\n+  @Autowired\n+  private Storage mockStorage;\n+\n+  @Autowired\n+  private AppPropertyConfig appPropConfig;\n+\n+  protected MvcResult result;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private StudyConsentEntity studyConsentEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantStudyEntity = testDataHelper.createParticipantStudyEntity(siteEntity, studyEntity,\n+        participantRegistrySiteEntity);\n+    studyConsentEntity = testDataHelper.createStudyConsentEntity(participantStudyEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(consentService);\n+  }\n+\n+  @Test\n+  public void shouldReturnConsentDocument() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    BlobId validBlobId = BlobId.of(appPropConfig.getBucketName(), \"documents/test-document.pdf\");\n+    Blob mockedBlob = mock(Blob.class);\n+\n+    when(this.mockStorage.get(eq(validBlobId))).thenReturn(mockedBlob);\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+            .headers(headers).contextPath(getContextPath()))\n+        .andDo(print()).andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.type\").value(MediaType.APPLICATION_PDF_VALUE))\n+        .andExpect(jsonPath(\"$.content\").isEmpty()).andExpect(\n+            jsonPath(\"$.message\").value(MessageCode.GET_CONSENT_DOCUMENT_SUCCESS.getMessage()));\n+  }\n+\n+  @Test\n+  public void shouldReturnSitePermissionAccessDeniedForConsentDocument() throws Exception {\n+    // Site 1: set siteEntity without sitePermissionEntity\n+    siteEntity = testDataHelper.newSiteEntity();\n+    studyConsentEntity.getParticipantStudy().setSite(siteEntity);\n+    testDataHelper.getStudyConsentRepository().save(studyConsentEntity);\n+\n+    // Step 2: Call API and expect SITE_PERMISSION_ACEESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+            .headers(headers).contextPath(getContextPath()))\n+        .andDo(print()).andExpect(status().isForbidden()).andExpect(jsonPath(\"$.error_description\",\n+            is(ErrorCode.SITE_PERMISSION_ACEESS_DENIED.getDescription())));", "originalCommit": "cbc8fd99c52e59d03f31bc450815370a845e904a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzMDM0Mg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469330342", "bodyText": "There is no TODO or bug for refactoring this. What typo should be fixed?", "author": "monica-BTC", "createdAt": "2020-08-12T15:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2Mjc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2NjcwMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469366702", "bodyText": "ACCESS is spelled wrong here.", "author": "saminguyen", "createdAt": "2020-08-12T15:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2Mjc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzEzOA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469693138", "bodyText": "Corrected to SITE_PERMISSION_ACCESS_DENIED.", "author": "monica-BTC", "createdAt": "2020-08-13T04:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2Mjc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDA5Nw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r468164097", "bodyText": "Cover tests for null participant study and siteId also.", "author": "saminguyen", "createdAt": "2020-08-10T20:22:14Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ConsentControllerTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be found in the LICENSE file\n+ * or at https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.controller;\n+\n+import com.google.cloud.healthcare.fdamystudies.common.ApiEndpoint;\n+import com.google.cloud.healthcare.fdamystudies.common.BaseMockIT;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.helper.TestDataHelper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantRegistrySiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.ParticipantStudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyConsentEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.ParticipantStudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.service.ConsentService;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.Storage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+public class ConsentControllerTest extends BaseMockIT {\n+\n+  @Autowired\n+  private ConsentController controller;\n+\n+  @Autowired\n+  private ConsentService consentService;\n+\n+  @Autowired\n+  private TestDataHelper testDataHelper;\n+\n+  @Autowired\n+  private ParticipantStudyRepository participantStudyRepository;\n+\n+  @Autowired\n+  private Storage mockStorage;\n+\n+  @Autowired\n+  private AppPropertyConfig appPropConfig;\n+\n+  protected MvcResult result;\n+\n+  private UserRegAdminEntity userRegAdminEntity;\n+\n+  private StudyEntity studyEntity;\n+\n+  private AppEntity appEntity;\n+\n+  private SiteEntity siteEntity;\n+\n+  private ParticipantRegistrySiteEntity participantRegistrySiteEntity;\n+\n+  private ParticipantStudyEntity participantStudyEntity;\n+\n+  private StudyConsentEntity studyConsentEntity;\n+\n+  @BeforeEach\n+  public void setUp() {\n+    userRegAdminEntity = testDataHelper.createUserRegAdminEntity();\n+    studyEntity = testDataHelper.createStudyEntity(userRegAdminEntity, appEntity);\n+    siteEntity = testDataHelper.createSiteEntity(studyEntity, userRegAdminEntity, appEntity);\n+    participantStudyEntity = testDataHelper.createParticipantStudyEntity(siteEntity, studyEntity,\n+        participantRegistrySiteEntity);\n+    studyConsentEntity = testDataHelper.createStudyConsentEntity(participantStudyEntity);\n+  }\n+\n+  @Test\n+  public void contextLoads() {\n+    assertNotNull(controller);\n+    assertNotNull(mockMvc);\n+    assertNotNull(consentService);\n+  }\n+\n+  @Test\n+  public void shouldReturnConsentDocument() throws Exception {\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    BlobId validBlobId = BlobId.of(appPropConfig.getBucketName(), \"documents/test-document.pdf\");\n+    Blob mockedBlob = mock(Blob.class);\n+\n+    when(this.mockStorage.get(eq(validBlobId))).thenReturn(mockedBlob);\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+            .headers(headers).contextPath(getContextPath()))\n+        .andDo(print()).andExpect(status().isOk())\n+        .andExpect(jsonPath(\"$.type\").value(MediaType.APPLICATION_PDF_VALUE))\n+        .andExpect(jsonPath(\"$.content\").isEmpty()).andExpect(\n+            jsonPath(\"$.message\").value(MessageCode.GET_CONSENT_DOCUMENT_SUCCESS.getMessage()));\n+  }\n+\n+  @Test\n+  public void shouldReturnSitePermissionAccessDeniedForConsentDocument() throws Exception {\n+    // Site 1: set siteEntity without sitePermissionEntity\n+    siteEntity = testDataHelper.newSiteEntity();\n+    studyConsentEntity.getParticipantStudy().setSite(siteEntity);\n+    testDataHelper.getStudyConsentRepository().save(studyConsentEntity);\n+\n+    // Step 2: Call API and expect SITE_PERMISSION_ACEESS_DENIED error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+            .headers(headers).contextPath(getContextPath()))\n+        .andDo(print()).andExpect(status().isForbidden()).andExpect(jsonPath(\"$.error_description\",\n+            is(ErrorCode.SITE_PERMISSION_ACEESS_DENIED.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnConsentDataNotAvailableForConsentDocument() throws Exception {\n+    // Site 1: set siteEntity to null\n+    studyConsentEntity.getParticipantStudy().setSite(null);", "originalCommit": "cbc8fd99c52e59d03f31bc450815370a845e904a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzMTUzNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469331536", "bodyText": "Written test case for null participant study and site.", "author": "monica-BTC", "createdAt": "2020-08-12T15:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDA5Nw=="}], "type": "inlineReview"}, {"oid": "71f6351d85a3e709b49d1bdb209d972a3a1af27b", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/71f6351d85a3e709b49d1bdb209d972a3a1af27b", "message": "fixed PR comments\n\nfixed PR comments", "committedDate": "2020-08-12T14:55:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3NTIxMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469375213", "bodyText": "Naming is a bit confusing, maybe change this test to shouldReturnConsentDataNotAvailableWithNullSiteForConsentDocument and the one above ...WithNullStudy...", "author": "saminguyen", "createdAt": "2020-08-12T16:08:23Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/ConsentControllerTest.java", "diffHunk": "@@ -127,14 +130,42 @@ public void shouldReturnSitePermissionAccessDeniedForConsentDocument() throws Ex\n     headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n \n     mockMvc\n-        .perform(get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n-            .headers(headers).contextPath(getContextPath()))\n-        .andDo(print()).andExpect(status().isForbidden()).andExpect(jsonPath(\"$.error_description\",\n-            is(ErrorCode.SITE_PERMISSION_ACEESS_DENIED.getDescription())));\n+        .perform(\n+            get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isForbidden())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\",\n+                is(ErrorCode.SITE_PERMISSION_ACEESS_DENIED.getDescription())));\n   }\n \n   @Test\n   public void shouldReturnConsentDataNotAvailableForConsentDocument() throws Exception {\n+    // Site 1: set siteEntity to null\n+    studyConsentEntity.setParticipantStudy(null);\n+    testDataHelper.getStudyConsentRepository().save(studyConsentEntity);\n+\n+    // Step 2: Call API and expect CONSENT_DATA_NOT_AVAILABLE error\n+    HttpHeaders headers = testDataHelper.newCommonHeaders();\n+    headers.set(USER_ID_HEADER, userRegAdminEntity.getId());\n+\n+    mockMvc\n+        .perform(\n+            get(ApiEndpoint.GET_CONSENT_DOCUMENT.getPath(), studyConsentEntity.getId())\n+                .headers(headers)\n+                .contextPath(getContextPath()))\n+        .andDo(print())\n+        .andExpect(status().isBadRequest())\n+        .andExpect(\n+            jsonPath(\n+                \"$.error_description\", is(ErrorCode.CONSENT_DATA_NOT_AVAILABLE.getDescription())));\n+  }\n+\n+  @Test\n+  public void shouldReturnConsentDataNotAvailableForConsentDocumentForSite() throws Exception {", "originalCommit": "71f6351d85a3e709b49d1bdb209d972a3a1af27b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzYzNQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/730#discussion_r469693635", "bodyText": "Changed name to shouldReturnConsentDataNotAvailableWithNullSiteForConsentDocument and shouldReturnConsentDataNotAvailableWithNullStudyForConsentDocument.", "author": "monica-BTC", "createdAt": "2020-08-13T04:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3NTIxMw=="}], "type": "inlineReview"}, {"oid": "b169f0e9fd358776085fe5ba5a29422f7c7bc8dd", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/b169f0e9fd358776085fe5ba5a29422f7c7bc8dd", "message": "Fixed PR comments\n\nFixed PR comments", "committedDate": "2020-08-13T04:37:38Z", "type": "commit"}, {"oid": "aed46f7a56a341e86c7852e79cda2bcf3a3d00e0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/aed46f7a56a341e86c7852e79cda2bcf3a3d00e0", "message": "Base64 implementation\n\nBase64 implementation", "committedDate": "2020-08-17T12:19:56Z", "type": "commit"}, {"oid": "bef3d4b9cab117994e8029b2bd6e40c6a91b6e0f", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/bef3d4b9cab117994e8029b2bd6e40c6a91b6e0f", "message": "Merge branch 'develop' into participant-manager-get-consent-document", "committedDate": "2020-08-19T17:19:21Z", "type": "commit"}, {"oid": "fd8b9099fa460e02d87980812eb89bab13c36b78", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/fd8b9099fa460e02d87980812eb89bab13c36b78", "message": "resolved conflicts\n\nresolved conflicts", "committedDate": "2020-08-19T17:41:11Z", "type": "commit"}]}