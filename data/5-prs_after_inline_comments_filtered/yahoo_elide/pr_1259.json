{"pr_number": 1259, "pr_title": "Elide 5.x dynamic config standalone", "pr_createdAt": "2020-04-10T15:51:04Z", "pr_url": "https://github.com/yahoo/elide/pull/1259", "timeline": [{"oid": "9ac9208e304f151664b6577c7d6f89654327d4d0", "url": "https://github.com/yahoo/elide/commit/9ac9208e304f151664b6577c7d6f89654327d4d0", "message": "codecy issues", "committedDate": "2020-04-16T05:49:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwNjU3OQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413006579", "bodyText": "This line should be inside the if block at L-68, otherwise even when the dynamic config is disabled it will try to generate the Config POJOs.", "author": "moizarafat", "createdAt": "2020-04-22T13:57:54Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMjkyNg==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413032926", "bodyText": "These 3 sets of classes should not be binded to ElideDynamicEntityCompiler.bindClasses as they are not compiled through dynamic compiler. These 3 set of classes should be put in options as AvailableSettings.LOADED_CLASSES, <ClassScanner Scanned classes>  . Refer \n  \n    \n      elide/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java\n    \n    \n         Line 97\n      in\n      2d6436d\n    \n    \n    \n    \n\n        \n          \n           puiPropertyMap.put(AvailableSettings.LOADED_CLASSES, bindClasses);", "author": "moizarafat", "createdAt": "2020-04-22T14:29:19Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);\n+        if (includeDynamicModel) {\n+            dynamicEntityCompiler.compile();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+        }\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+        try {\n+\n+            ElideDynamicEntityCompiler.bindClasses = new HashSet<>();\n+            // add dynamic generated classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler,\n+                    FromSubquery.class));\n+            // add classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwMDM5Mg==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413100392", "bodyText": "We should probably not catch the exception and let the error propagate.", "author": "moizarafat", "createdAt": "2020-04-22T15:48:50Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);\n+        if (includeDynamicModel) {\n+            dynamicEntityCompiler.compile();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+        }\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+        try {\n+\n+            ElideDynamicEntityCompiler.bindClasses = new HashSet<>();\n+            // add dynamic generated classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler,\n+                    FromSubquery.class));\n+            // add classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options,\n+                    dynamicEntityCompiler.getClassLoader());\n \n+        } catch (ClassNotFoundException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNjg3Mw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413106873", "bodyText": "We dont need to do loadClass.getClass. Only loadClass is needed.", "author": "moizarafat", "createdAt": "2020-04-22T15:57:01Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+        List<String> annotatedClass = new ArrayList<String>();\n+        List<String> dynamicClasses = ElideDynamicEntityCompiler.classNames;\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = compiler.getClassLoader().loadClass(dynamicClass);\n+            if (classz.getAnnotation(annotationClass) != null) {\n+                annotatedClass.add(classz.getName());\n+            }\n+        }\n+        return annotatedClass;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static Set<Class> populateBindClasses(ElideDynamicEntityCompiler compiler,\n+            Class annotationClass) throws ClassNotFoundException {\n+        Set<Class> bindClasses = new HashSet<>();\n+        List<String> dynamicClasses = ElideDynamicEntityCompiler.classNames;\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> bindClass = compiler.getClassLoader().loadClass(dynamicClass).getClass();", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMDEwNQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413110105", "bodyText": "annotatedClasses instead of annotatedClass", "author": "moizarafat", "createdAt": "2020-04-22T16:01:08Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+        List<String> annotatedClass = new ArrayList<String>();", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMzU0NA==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413123544", "bodyText": "This is already defined as static in Util. We should reuse from there.", "author": "moizarafat", "createdAt": "2020-04-22T16:18:54Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -49,24 +51,36 @@\n \n     private static MetricRegistry metricRegistry = null;\n     private static HealthCheckRegistry healthCheckRegistry = null;\n+    private ElideDynamicEntityCompiler dynamicEntityCompiler = null;", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyNzQxMw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413127413", "bodyText": "This piece of code is duplicated between Util.getEntityManager and here. Instead this could be a separate method in Util like initialize dynamic compiler which takes a boolean argument derived from enableDynamicModelConfig . And based on the boolean value and if dynamicEntityCompiler is null, dynamicEntityCompiler will be initialized and classes compiled.", "author": "moizarafat", "createdAt": "2020-04-22T16:24:00Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -49,24 +51,36 @@\n \n     private static MetricRegistry metricRegistry = null;\n     private static HealthCheckRegistry healthCheckRegistry = null;\n+    private ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(settings.getDynamicConfigPath());", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzMjcxMg==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413132712", "bodyText": "lets have a singular name instead of with spaces. Just \"dynamic\" instead of \"dynamic model\";", "author": "moizarafat", "createdAt": "2020-04-22T16:30:58Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +124,45 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n+\n                         Info info = new Info().title(\"Async Service\").version(\"1.0\");\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n+\n                         //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n                         String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n \n                         Swagger swagger = builder.build().basePath(asyncBasePath);\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+                        for (Class entity : dynamicEntityCompiler.getBindClasses()) {\n+                            dictionary.bindEntity(entity);\n+                        }\n+\n+                        Info info = new Info().title(\"Dynamic models Service\").version(\"1.0\");\n+                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n+                        String dynamicBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n+\n+                        Swagger swagger = builder.build().basePath(dynamicBasePath);\n+\n+                        swaggerDocs.put(\"dynamic model\", swagger);", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzMzM3Ng==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413133376", "bodyText": "Since this is logic is same between both blocks, we can get it out in a separate common variable.", "author": "moizarafat", "createdAt": "2020-04-22T16:31:47Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +124,45 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n+\n                         Info info = new Info().title(\"Async Service\").version(\"1.0\");\n \n                         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n+\n                         //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n                         String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n \n                         Swagger swagger = builder.build().basePath(asyncBasePath);\n \n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+                        for (Class entity : dynamicEntityCompiler.getBindClasses()) {\n+                            dictionary.bindEntity(entity);\n+                        }\n+\n+                        Info info = new Info().title(\"Dynamic models Service\").version(\"1.0\");\n+                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n+\n+                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n+                        String dynamicBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2NDYxOQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413164619", "bodyText": "This method is not used anywhere. we should remove it.", "author": "moizarafat", "createdAt": "2020-04-22T17:12:42Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/dynamic/config/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.standalone.dynamic.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Elide Dynamic entity compiler.\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public static Set<Class> bindClasses;\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    public static List<String> classNames = new ArrayList<String>();\n+\n+    private static InMemoryJavaCompiler inMemoryJavaCompiler = InMemoryJavaCompiler.newInstance();\n+    private static ElideConfigParser elideConfigParser = new ElideConfigParser();\n+    private static Map<String, Class<?>> compiledObjects;\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * generate java classes from dynamic config.\n+     * @param path to hjson config\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+        try {\n+            elideConfigParser.parseConfigPath(path);\n+\n+            ElideTableConfig tableConfig = elideConfigParser.getElideTableConfig();\n+            ElideSecurityConfig securityConfig = elideConfigParser.getElideSecurityConfig();\n+            HandlebarsHydrator handlebarHydrator = new HandlebarsHydrator();\n+\n+            tableClasses = handlebarHydrator.hydrateTableTemplate(tableConfig);\n+            securityClasses = handlebarHydrator.hydrateSecurityTemplate(securityConfig);\n+\n+            for (Entry<String, String> entry : tableClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            for (Entry<String, String> entry : securityClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            inMemoryJavaCompiler.useParentClassLoader(\n+                    new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                            Sets.newHashSet(classNames)));\n+\n+        } catch (Exception e) {\n+            log.error(\"Unable to read Dynamic Configuration \" + e.getMessage());\n+        }\n+\n+    }\n+\n+    /**\n+     * compile dynamic classes in-memory.\n+     */\n+    public void compile() {\n+\n+        try {\n+            for (Map.Entry<String, String> tablePojo : tableClasses.entrySet()) {\n+                log.info(\"key: \" + PACKAGE_NAME + tablePojo.getKey() + \", value: \" + tablePojo.getValue());\n+                inMemoryJavaCompiler.addSource(PACKAGE_NAME + tablePojo.getKey(), tablePojo.getValue());\n+            }\n+\n+            for (Map.Entry<String, String> secPojo : securityClasses.entrySet()) {\n+                log.info(\"key: \" + PACKAGE_NAME +  secPojo.getKey() + \", value: \" + secPojo.getValue());\n+                inMemoryJavaCompiler.addSource(PACKAGE_NAME + secPojo.getKey(), secPojo.getValue());\n+            }\n+            compiledObjects = inMemoryJavaCompiler.compileAll();\n+        } catch (Exception e) {\n+            log.error(\"Unable to compile dynamic classes\");\n+        }\n+    }\n+\n+    /**\n+     * getter for classLoader.\n+     * @return ClassLoader\n+     */\n+    public ClassLoader getClassLoader() {\n+        return inMemoryJavaCompiler.getClassloader();\n+    }\n+\n+    /**\n+     * getter for compiled dynamic class.\n+     * @param name - class name\n+     * @return compiled class\n+     */\n+    public Class<?> getCompiled(String name) {", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2NjAzMQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413166031", "bodyText": "Please check the spring PR. I think we were able to successfully add it there. I think it should be like this 2020-01-01T00:00Z", "author": "moizarafat", "createdAt": "2020-04-22T17:14:37Z", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -89,79 +102,122 @@ public void shutdown() throws Exception {\n         elide.stop();\n     }\n \n+    @Test\n+    public void testJsonAPIPlayer() {\n+        given()\n+        .contentType(JSONAPI_CONTENT_TYPE)\n+        .accept(JSONAPI_CONTENT_TYPE)\n+        .body(\n+                datum(\n+                        resource(\n+                                type(\"player\"),\n+                                id(\"ready-player-1\"),\n+                                attributes(\n+                                        attr(\"name\", \"player1\"),\n+                                        attr(\"countryCode\", \"USA\"),\n+                                        attr(\"playerCountry\", \"USA\"),\n+                                        attr(\"highScore\", 100)\n+                                        //                        attr(\"createdOn\", \"2020-01-01\"); still need to be tested with date", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNTkwMA==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413525900", "bodyText": "We can rename this to findAnnotatedClasses.", "author": "moizarafat", "createdAt": "2020-04-23T05:46:32Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+        List<String> annotatedClass = new ArrayList<String>();\n+        List<String> dynamicClasses = ElideDynamicEntityCompiler.classNames;\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = compiler.getClassLoader().loadClass(dynamicClass);\n+            if (classz.getAnnotation(annotationClass) != null) {\n+                annotatedClass.add(classz.getName());\n+            }\n+        }\n+        return annotatedClass;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static Set<Class> populateBindClasses(ElideDynamicEntityCompiler compiler,", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNzMxMQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413527311", "bodyText": "We need to add classes of type FromTable, FromSubQuery", "author": "moizarafat", "createdAt": "2020-04-23T05:50:27Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -53,28 +64,61 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        dynamicEntityCompiler = new ElideDynamicEntityCompiler(dynamicConfigPath);\n+        if (includeDynamicModel) {\n+            dynamicEntityCompiler.compile();\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+        }\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+        try {\n+\n+            ElideDynamicEntityCompiler.bindClasses = new HashSet<>();\n+            // add dynamic generated classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler, FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(populateBindClasses(dynamicEntityCompiler,\n+                    FromSubquery.class));\n+            // add classes\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            ElideDynamicEntityCompiler.bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options,\n+                    dynamicEntityCompiler.getClassLoader());\n \n+        } catch (ClassNotFoundException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n         return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n+                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>(),\n+                dynamicEntityCompiler.getClassLoader())\n                 .build();\n     }\n \n     /**\n-     * Combine the model entities with Async model.\n+     * Combine the model entities with Async  and Dynamic models.\n      *\n      * @param modelPackageName Package name\n      * @param includeAsyncModel Include Async model package Name\n+     * @param includeDynamicModel Include Dynamic model package Name\n      * @return All entities combined from both package.\n+     * @throws ClassNotFoundException\n      */\n-    public static List<String> combineModelEntities(String modelPackageName, boolean includeAsyncModel) {\n-\n+    public static List<String> combineModelEntities(ElideDynamicEntityCompiler compiler, String modelPackageName,\n+            boolean includeAsyncModel, boolean includeDynamicModel) throws ClassNotFoundException {\n         List<String> modelEntities = getAllEntities(modelPackageName);\n-\n         if (includeAsyncModel) {\n             modelEntities.addAll(getAllEntities(AsyncQuery.class.getPackage().getName()));\n         }\n+        if (includeDynamicModel) {\n+            modelEntities.addAll(findAnnotatedClasses(compiler, Entity.class));", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNzY5OQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r413527699", "bodyText": "we can call this findAnnotatedClassNames.", "author": "moizarafat", "createdAt": "2020-04-23T05:51:15Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +133,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)", "originalCommit": "57a7f2d7baa15219e3f815e0f2125b5ccd6c5c58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MzkyNw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423293927", "bodyText": "I'm confused by this test.  In all the other places, player stats is an aggregation model - not something you can create - but only something you can run analytic queries against.  I would expect the aggregation store test would look like a GET query against this model.", "author": "aklish", "createdAt": "2020-05-11T20:17:57Z", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -89,6 +104,30 @@ public void shutdown() throws Exception {\n         elide.stop();\n     }\n \n+    @Test\n+    public void testJsonAPIPlayerStats() {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NDM0NQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423294345", "bodyText": "I don't understand why we are testing create here.  In fact, I would expect create to fail - not succeed.", "author": "aklish", "createdAt": "2020-05-11T20:18:47Z", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -139,29 +178,88 @@ public void testForbiddenJsonAPIPost() {\n     @Test\n     public void testMetricsServlet() throws Exception {\n         given()\n-                .when()\n-                .get(\"/stats/metrics\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n+            .when()\n+            .get(\"/stats/metrics\")\n+            .then()\n+            .statusCode(200)\n+            .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n     }\n \n     @Test\n     public void testHealthCheckServlet() throws Exception {\n-            given()\n-                .when()\n-                .get(\"/stats/healthcheck\")\n-                .then()\n-                .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n+        given()\n+            .when()\n+            .get(\"/stats/healthcheck\")\n+            .then()\n+            .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n     }\n \n     @Test\n     public void testSwaggerEndpoint() throws Exception {\n         given()\n-                .when()\n-                .get(\"/swagger/doc/test\")\n-                .then()\n-                .statusCode(200);\n+            .when()\n+            .get(\"/swagger/doc/test\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testAggregationTableEndpoint() throws Exception {\n+        given()\n+           .when()\n+           .get(\"/api/v1/table\")\n+           .then()\n+           .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testTimeDimensionEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/timeDimension\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testPlayerEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/Player\")\n+            .then()\n+            .statusCode(200);\n     }\n-}\n \n+    @Test\n+    public void testJsonApiGetPlayer() {\n+        //Prep with data load\n+        given()\n+            .contentType(JSONAPI_CONTENT_TYPE)\n+            .accept(JSONAPI_CONTENT_TYPE)\n+            .body(\n+                datum(\n+                    resource(\n+                        type(\"playerStats\"),\n+                        id(\"ready-player-2\"),\n+                        attributes(\n+                            attr(\"countryId\", \"1\"),\n+                            attr(\"score\", 100),\n+                            attr(\"createdOn\", \"2020-01-01T00:00Z\")\n+                        )\n+                    )\n+                )\n+            )\n+            .post(\"/api/v1/playerStats\")", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NDg5Ng==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423294896", "bodyText": "This test looks duplicated with the one earlier - and is listed as GET (even though it does a POST).  I'm not sure what we are trying to test here.", "author": "aklish", "createdAt": "2020-05-11T20:19:39Z", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/ElideStandaloneTest.java", "diffHunk": "@@ -139,29 +178,88 @@ public void testForbiddenJsonAPIPost() {\n     @Test\n     public void testMetricsServlet() throws Exception {\n         given()\n-                .when()\n-                .get(\"/stats/metrics\")\n-                .then()\n-                .statusCode(200)\n-                .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n+            .when()\n+            .get(\"/stats/metrics\")\n+            .then()\n+            .statusCode(200)\n+            .body(\"meters\", hasKey(\"com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\"));\n     }\n \n     @Test\n     public void testHealthCheckServlet() throws Exception {\n-            given()\n-                .when()\n-                .get(\"/stats/healthcheck\")\n-                .then()\n-                .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n+        given()\n+            .when()\n+            .get(\"/stats/healthcheck\")\n+            .then()\n+            .statusCode(501); //Returns 'Not Implemented' if there are no Health Checks Registered\n     }\n \n     @Test\n     public void testSwaggerEndpoint() throws Exception {\n         given()\n-                .when()\n-                .get(\"/swagger/doc/test\")\n-                .then()\n-                .statusCode(200);\n+            .when()\n+            .get(\"/swagger/doc/test\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testAggregationTableEndpoint() throws Exception {\n+        given()\n+           .when()\n+           .get(\"/api/v1/table\")\n+           .then()\n+           .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testTimeDimensionEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/timeDimension\")\n+            .then()\n+            .statusCode(200);\n+    }\n+\n+    @Test\n+    public void testPlayerEndpoint() throws Exception {\n+        given()\n+            .when()\n+            .get(\"/api/v1/Player\")\n+            .then()\n+            .statusCode(200);\n     }\n-}\n \n+    @Test\n+    public void testJsonApiGetPlayer() {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NjQ4NQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423296485", "bodyText": "Instead of java config - can we do an HJSON config here?", "author": "aklish", "createdAt": "2020-05-11T20:22:44Z", "path": "elide-standalone/src/test/java/com/yahoo/elide/standalone/models/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.standalone.models;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+public class PlayerStats {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5Njk2Nw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423296967", "bodyText": "Use File.Separator - not \"/\"", "author": "aklish", "createdAt": "2020-05-11T20:23:39Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -167,7 +203,24 @@ default boolean enableJSONAPI() {\n     default boolean enableGraphQL() {\n         return true;\n     }\n-    \n+\n+    /**\n+     * Enable the support for Dynamic Model Configuration. If false, the feature will be disabled.\n+     *\n+     * @return Default: False\n+     */\n+    default boolean enableDynamicModelConfig() {\n+        return false;\n+    }\n+\n+    /**\n+     * Base path to Hjson dynamic model configurations.\n+     * @return Default: /models/\n+     */\n+    default String getDynamicConfigPath() {\n+        return \"/models/\";", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5NzU4NQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423297585", "bodyText": "What Exception are we expecting here?  In general, Exception should almost never be thrown or caught (except in tests and uncaught exception handlers).", "author": "aklish", "createdAt": "2020-05-11T20:24:50Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -60,14 +68,9 @@\n      *\n      * @param injector Service locator for web service for dependency injection.\n      * @return Configured ElideSettings object.\n+     * @throws Exception Exception thrown.\n      */\n-    default ElideSettings getElideSettings(ServiceLocator injector) {\n-        EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n-                enableAsync(), getDatabaseProperties());\n-        DataStore dataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n-\n+    default ElideSettings getElideSettings(ServiceLocator injector) throws Exception {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5OTY0MQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423299641", "bodyText": "The initialization of standalone needs to be broken up into different pieces - similar to the Elide spring beans.\nThere should be a configuration for getting the DataStore.  This function should not be creating and managing stores - but just setting up the ElideSettings object.  Let's break this apart so it is more extensible by someone - and simpler to grock.", "author": "aklish", "createdAt": "2020-05-11T20:28:28Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -83,6 +86,39 @@ public void inject(Object entity) {\n \n         dictionary.scanForSecurityChecks();\n \n+        EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(getModelPackageName(),\n+                enableAsync(), enableDynamicModelConfig(), getDynamicConfigPath(), getDatabaseProperties());\n+\n+        MetaDataStore metaDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMDY3MQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423300671", "bodyText": "We should avoid static variables like this - They are hard to test.  This should be created during initialization and passed into constructors as needed.", "author": "aklish", "createdAt": "2020-05-11T20:30:19Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -24,8 +32,10 @@\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n-            Properties options) {\n+    public static ElideDynamicEntityCompiler dynamicEntityCompiler;", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTMzOQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423301339", "bodyText": "Remove static initialization functions - this suggests we should be using a constructor somewhere else instead.", "author": "aklish", "createdAt": "2020-05-11T20:31:26Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -51,30 +61,66 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.url\", \"jdbc:mysql://localhost/elide?serverTimezone=UTC\");\n             options.put(\"javax.persistence.jdbc.user\", \"elide\");\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> loadedClasses = new ArrayList<>();\n+            loadedClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            options.put(AvailableSettings.LOADED_CLASSES, loadedClasses);\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+\n+        if (includeDynamicModel) {\n+            initDynamicConfig(dynamicConfigPath);\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n \n-        return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n-                .build();\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options, dynamicEntityCompiler.getClassLoader());\n+\n+            return new EntityManagerFactoryBuilderImpl(\n+                    new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>(),\n+                    dynamicEntityCompiler.getClassLoader())\n+                    .build();\n+        } else {\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),\n+                    options);\n+            return new EntityManagerFactoryBuilderImpl(\n+                    new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n+                    .build();\n+        }\n+    }\n+\n+    public static void initDynamicConfig(String dynamicConfigPath) throws Exception {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMTQ3Nw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423321477", "bodyText": "Maybe this can be a non-static method on the compiler (to return the list of classes that it manages).", "author": "aklish", "createdAt": "2020-05-11T21:09:51Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -89,4 +135,39 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n                 .map(Class::getName)\n                 .collect(Collectors.toList());\n     }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException ClassNameNotFound in compiler\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static List<String> findAnnotatedClassNames(ElideDynamicEntityCompiler compiler, Class annotationClass)", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMzAxOA==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423323018", "bodyText": "Instead of includingDynamicModel - maybe have an Optional<DynamicEntityCompiler>", "author": "aklish", "createdAt": "2020-05-11T21:12:57Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -24,8 +32,10 @@\n  */\n public class Util {\n \n-    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel, \n-            Properties options) {\n+    public static ElideDynamicEntityCompiler dynamicEntityCompiler;\n+\n+    public static EntityManagerFactory getEntityManagerFactory(String modelPackageName, boolean includeAsyncModel,\n+            boolean includeDynamicModel, String dynamicConfigPath, Properties options) throws Exception {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNDE2Ng==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423324166", "bodyText": "Instead of creating the PersistentUnitInfoImpl in the if/else - this can be simplified by just setting the classloader and list of packages to include in the if/else - and then using those to create the PersistentUnitInfo outside the control block.", "author": "aklish", "createdAt": "2020-05-11T21:15:15Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/Util.java", "diffHunk": "@@ -51,30 +61,66 @@ public static EntityManagerFactory getEntityManagerFactory(String modelPackageNa\n             options.put(\"javax.persistence.jdbc.url\", \"jdbc:mysql://localhost/elide?serverTimezone=UTC\");\n             options.put(\"javax.persistence.jdbc.user\", \"elide\");\n             options.put(\"javax.persistence.jdbc.password\", \"elide123\");\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> loadedClasses = new ArrayList<>();\n+            loadedClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            options.put(AvailableSettings.LOADED_CLASSES, loadedClasses);\n         }\n \n-        PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n-                combineModelEntities(modelPackageName, includeAsyncModel), options);\n+        PersistenceUnitInfo persistenceUnitInfo = null;\n+\n+        if (includeDynamicModel) {\n+            initDynamicConfig(dynamicConfigPath);\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(dynamicEntityCompiler.getClassLoader());\n+            options.put(AvailableSettings.CLASSLOADERS, classLoaders);\n \n-        return new EntityManagerFactoryBuilderImpl(\n-                new PersistenceUnitInfoDescriptor(persistenceUnitInfo), new HashMap<>())\n-                .build();\n+            persistenceUnitInfo = new PersistenceUnitInfoImpl(\"elide-stand-alone\",\n+                    combineModelEntities(dynamicEntityCompiler, modelPackageName,\n+                            includeAsyncModel, includeDynamicModel),", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNDgwOA==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423324808", "bodyText": "Elide 5 now interprets the version set in the Swagger document.  If the non-elide models don't have this version - they vanish.\nDon't set a version.", "author": "aklish", "createdAt": "2020-05-11T21:16:26Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -173,4 +204,15 @@ public static HealthCheckRegistry getHealthCheckRegistry() {\n \n         return healthCheckRegistry;\n     }\n+\n+    private Swagger setupSwagger(EntityDictionary dictionary, String path, String title) {\n+        Info info = new Info().title(title).version(\"1.0\");", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNTQ5MQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423325491", "bodyText": "We can at least log the class name since we are swallowing the exception.", "author": "aklish", "createdAt": "2020-05-11T21:17:47Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +134,34 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n-                        Info info = new Info().title(\"Async Service\").version(\"1.0\");\n-\n-                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n-                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n-                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-                        Swagger swagger = builder.build().basePath(asyncBasePath);\n-\n+                        Swagger swagger = setupSwagger(dictionary, settings.getJsonApiPathSpec(), \"Async Service\");\n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n+                        try {\n+                            for (Class entity : Util.dynamicEntityCompiler.findAnnotatedClasses(Entity.class)) {\n+                                dictionary.bindEntity(entity);\n+                            }\n+                        } catch (ClassNotFoundException e) {\n+                            log.error(\"error while binding class\");", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjQxNQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423326415", "bodyText": "The swagger builder doesn't need a separate dictionary to only build a subset of models.  YOu can provide it the list of classes to load.  That's the recommended approach.  Let's follow that.", "author": "aklish", "createdAt": "2020-05-11T21:19:36Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -110,27 +134,34 @@ protected void configure() {\n \n         // Bind swaggers to given endpoint\n         register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n+            @SuppressWarnings(\"rawtypes\")\n             @Override\n             protected void configure() {\n                 Map<String, Swagger> swaggerDocs = settings.enableSwagger();\n                 if (!swaggerDocs.isEmpty()) {\n                     // Include the async models in swagger docs\n-                    if(settings.enableAsync()) {\n-                        EntityDictionary dictionary = new EntityDictionary(new HashMap());\n+                    if (settings.enableAsync()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());\n                         dictionary.bindEntity(AsyncQuery.class);\n                         dictionary.bindEntity(AsyncQueryResult.class);\n-                         \n-                        Info info = new Info().title(\"Async Service\").version(\"1.0\");\n-\n-                        SwaggerBuilder builder = new SwaggerBuilder(dictionary, info);\n-                        \n-                        //Default value of getJsonApiPathSpec() ends with /* at the end. need to remove.\n-                        String asyncBasePath = settings.getJsonApiPathSpec().replaceAll(\"/\\\\*\", \"\");\n-\n-                        Swagger swagger = builder.build().basePath(asyncBasePath);\n-\n+                        Swagger swagger = setupSwagger(dictionary, settings.getJsonApiPathSpec(), \"Async Service\");\n                         swaggerDocs.put(\"async\", swagger);\n                     }\n+                    // bind dynamic models\n+                    if (settings.enableDynamicModelConfig()) {\n+                        EntityDictionary dictionary = new EntityDictionary(new HashMap<>());", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjkwOA==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423326908", "bodyText": "What exception are we catching here an why?", "author": "aklish", "createdAt": "2020-05-11T21:20:34Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -51,30 +53,52 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        if (settings.enableDynamicModelConfig()) {\n+            try {\n+                Util.initDynamicConfig(settings.getDynamicConfigPath());\n+            } catch (Exception e) {\n+                log.error(\"error in resource config\" + e.getMessage());\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n-                        .named(\"elideAllModels\");\n+                try {\n+                    bind(Util.combineModelEntities(Util.dynamicEntityCompiler,\n+                            settings.getModelPackageName(), settings.enableAsync(),\n+                            settings.enableDynamicModelConfig())).to(Set.class).named(\"elideAllModels\");\n+                } catch (ClassNotFoundException e) {\n+                    log.error(\"error in resource config\" + e.getMessage());\n+                    throw new IllegalStateException(e);\n+                }\n             }\n         });\n \n         // Bind to injector\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                ElideSettings elideSettings = settings.getElideSettings(injector);\n+                ElideSettings elideSettings = null;\n+                try {\n+                    elideSettings = settings.getElideSettings(injector);\n+                } catch (Exception e) {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNzE2Mw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423437163", "bodyText": "The DynamicEntityompiler compile method throws an Exception so this was catching and throwing that. Have updated DynamicCompiler to catch it and throw a run time exception now instead of compile time.", "author": "moizarafat", "createdAt": "2020-05-12T03:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNzQwNg==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423327406", "bodyText": "What exception are we catching here and why.  We need to be very careful about catching exception - in general - not advised.", "author": "aklish", "createdAt": "2020-05-11T21:21:38Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -51,30 +53,52 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        if (settings.enableDynamicModelConfig()) {\n+            try {\n+                Util.initDynamicConfig(settings.getDynamicConfigPath());\n+            } catch (Exception e) {", "originalCommit": "f9e13c0fb35ba5853035d9b7ac7dd0b01e0f0c43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzNzI2Mw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r423437263", "bodyText": "The DynamicEntityompiler compile method throws an Exception so this was catching and throwing that. Have updated DynamicCompiler to catch it and throw a run time exception now instead of compile time.", "author": "moizarafat", "createdAt": "2020-05-12T03:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNzQwNg=="}], "type": "inlineReview"}, {"oid": "a8159add9a8c4aea2fa667d9fac6e5ae1ba286aa", "url": "https://github.com/yahoo/elide/commit/a8159add9a8c4aea2fa667d9fac6e5ae1ba286aa", "message": "Rebase with 5.x and Standalone changes for Dynamic Config Model\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-15T01:22:38Z", "type": "forcePushed"}, {"oid": "1c47aaa8b7cbc5152318d3f1950e138c25ea3d56", "url": "https://github.com/yahoo/elide/commit/1c47aaa8b7cbc5152318d3f1950e138c25ea3d56", "message": "Rebase with 5.x and Standalone changes for Dynamic Config Model\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-15T19:20:11Z", "type": "forcePushed"}, {"oid": "7dfbecc24a2750545c12f8a644dbd0a3ca8086ed", "url": "https://github.com/yahoo/elide/commit/7dfbecc24a2750545c12f8a644dbd0a3ca8086ed", "message": "Rebase with 5.x and Standalone changes for Dynamic Config Model\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-15T19:22:51Z", "type": "forcePushed"}, {"oid": "9269f438b8c9c87b51a55500d2df18330f03bb25", "url": "https://github.com/yahoo/elide/commit/9269f438b8c9c87b51a55500d2df18330f03bb25", "message": "Rebase against 5.x and standalone changes", "committedDate": "2020-05-16T00:19:36Z", "type": "forcePushed"}, {"oid": "32528b693e03b51ea5ee4c52bf08e6eaaf63d2c0", "url": "https://github.com/yahoo/elide/commit/32528b693e03b51ea5ee4c52bf08e6eaaf63d2c0", "message": "Rebase against 5.x and standalone changes\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-16T00:23:29Z", "type": "forcePushed"}, {"oid": "b70a77908218327c55c43c0d03d9e3ad63cd9291", "url": "https://github.com/yahoo/elide/commit/b70a77908218327c55c43c0d03d9e3ad63cd9291", "message": "Fix method call\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-16T01:09:27Z", "type": "forcePushed"}, {"oid": "33c2f92311a8f3dd75f89843c6ba204272c36fd9", "url": "https://github.com/yahoo/elide/commit/33c2f92311a8f3dd75f89843c6ba204272c36fd9", "message": "Fix method call\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-17T00:41:59Z", "type": "forcePushed"}, {"oid": "fa212e9c47906d3a32783993ad4dff2373d7f3ae", "url": "https://github.com/yahoo/elide/commit/fa212e9c47906d3a32783993ad4dff2373d7f3ae", "message": "Fix method call, Swagger Doc Update\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-19T19:57:18Z", "type": "forcePushed"}, {"oid": "1b32fcb7b77dc57af6415069362d6590bf9a05d8", "url": "https://github.com/yahoo/elide/commit/1b32fcb7b77dc57af6415069362d6590bf9a05d8", "message": "Fix method call, Swagger Doc Update\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-19T19:59:17Z", "type": "forcePushed"}, {"oid": "6cb1de18275e7c873aa4d8916d7c36969edf44f3", "url": "https://github.com/yahoo/elide/commit/6cb1de18275e7c873aa4d8916d7c36969edf44f3", "message": "Fix method call, Swagger Doc Update\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T18:43:23Z", "type": "commit"}, {"oid": "fc96a134f4bb742592348b443d735409dfed0abb", "url": "https://github.com/yahoo/elide/commit/fc96a134f4bb742592348b443d735409dfed0abb", "message": "Swagger doc update\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T18:43:23Z", "type": "commit"}, {"oid": "fc96a134f4bb742592348b443d735409dfed0abb", "url": "https://github.com/yahoo/elide/commit/fc96a134f4bb742592348b443d735409dfed0abb", "message": "Swagger doc update\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T18:43:23Z", "type": "forcePushed"}, {"oid": "b64ac72decc791647cab20ff729ec13d25e4fcdf", "url": "https://github.com/yahoo/elide/commit/b64ac72decc791647cab20ff729ec13d25e4fcdf", "message": "update pom.xml\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T18:46:09Z", "type": "commit"}, {"oid": "b64ac72decc791647cab20ff729ec13d25e4fcdf", "url": "https://github.com/yahoo/elide/commit/b64ac72decc791647cab20ff729ec13d25e4fcdf", "message": "update pom.xml\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T18:46:09Z", "type": "forcePushed"}, {"oid": "b9ebd6d31c02955083273b0177eef4accc0c208f", "url": "https://github.com/yahoo/elide/commit/b9ebd6d31c02955083273b0177eef4accc0c208f", "message": "update pom.xml\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T18:52:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4OTYzMA==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428889630", "bodyText": "You can combine this test with the one below in a single request (test the body and the status code).", "author": "aklish", "createdAt": "2020-05-21T20:15:55Z", "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -159,6 +162,20 @@ public void testJsonAPIPost() {\n             .then()\n             .statusCode(HttpStatus.SC_CREATED)\n             .extract().body().asString();\n+\n+        // Test the Dynamic Generated Analytical Model is accessible\n+        given()\n+            .when()\n+            .get(\"/api/v1/postView\")\n+            .then()", "originalCommit": "b9ebd6d31c02955083273b0177eef4accc0c208f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5Mzg2Mw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428893863", "bodyText": "This should take the MetadataStore instead of the SQLQueryEngine as an argument.", "author": "aklish", "createdAt": "2020-05-21T20:24:36Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -286,11 +339,150 @@ default void updateServletContextHandler(ServletContextHandler servletContextHan\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(SQLQueryEngine queryEngine, AggregationDataStore aggregationDataStore,", "originalCommit": "b9ebd6d31c02955083273b0177eef4accc0c208f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NTYwNw==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428895607", "bodyText": "INstead of binding this to the SQLQueryEngine - can we just bind it to QueryEngine?", "author": "aklish", "createdAt": "2020-05-21T20:27:43Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -286,11 +339,150 @@ default void updateServletContextHandler(ServletContextHandler servletContextHan\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(SQLQueryEngine queryEngine, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(SQLQueryEngine queryEngine,", "originalCommit": "b9ebd6d31c02955083273b0177eef4accc0c208f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5ODA5MQ==", "url": "https://github.com/yahoo/elide/pull/1259#discussion_r428898091", "bodyText": "You shouldn't have to call settings.getSQLQueryEngine twice here.", "author": "aklish", "createdAt": "2020-05-21T20:32:42Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideResourceConfig.java", "diffHunk": "@@ -58,47 +59,62 @@\n     private static HealthCheckRegistry healthCheckRegistry = null;\n \n     /**\n-     * Constructor\n+     * Constructor.\n      *\n-     * @param injector Injection instance for application\n+     * @param injector Injection instance for application.\n+     * @param servletContext servlet context instance.\n      */\n     @Inject\n     public ElideResourceConfig(ServiceLocator injector, @Context ServletContext servletContext) {\n         this.injector = injector;\n \n         settings = (ElideStandaloneSettings) servletContext.getAttribute(ELIDE_STANDALONE_SETTINGS_ATTR);\n \n+        Optional<ElideDynamicEntityCompiler> optionalCompiler = settings.getDynamicCompiler();\n+\n         // Bind things that should be injectable to the Settings class\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                bind(Util.combineModelEntities(settings.getModelPackageName(), settings.enableAsync())).to(Set.class)\n-                        .named(\"elideAllModels\");\n+                bind(Util.combineModelEntities(optionalCompiler, settings.getModelPackageName(),\n+                        settings.enableAsync())).to(Set.class).named(\"elideAllModels\");\n             }\n         });\n \n         // Bind to injector\n         register(new AbstractBinder() {\n             @Override\n             protected void configure() {\n-                ElideSettings elideSettings = settings.getElideSettings(injector);\n+                EntityManagerFactory entityManagerFactory = Util.getEntityManagerFactory(settings.getModelPackageName(),\n+                        settings.enableAsync(), optionalCompiler, settings.getDatabaseProperties());\n+\n+                EntityDictionary dictionary = settings.getEntityDictionary(injector, optionalCompiler);\n+\n+                MetaDataStore metaDataStore = settings.getMetaDataStore(optionalCompiler);\n+\n+                SQLQueryEngine queryEngine = settings.getSQLQueryEngine(metaDataStore, entityManagerFactory);\n+\n+                DataStore dataStore = settings.getDataStore(\n+                        settings.getSQLQueryEngine(metaDataStore, entityManagerFactory),", "originalCommit": "b9ebd6d31c02955083273b0177eef4accc0c208f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7249fdba8aaa35f376bd74b37379fa535a013882", "url": "https://github.com/yahoo/elide/commit/7249fdba8aaa35f376bd74b37379fa535a013882", "message": "review comments\n\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-21T22:19:49Z", "type": "commit"}, {"oid": "c81eb87db9bbf6a8d5eccec7bb8685bb3bab1cb8", "url": "https://github.com/yahoo/elide/commit/c81eb87db9bbf6a8d5eccec7bb8685bb3bab1cb8", "message": "Update ElideStandaloneSettings.java", "committedDate": "2020-05-22T13:43:48Z", "type": "commit"}, {"oid": "864e02d53f4e501838d46db04558dbbf6ffd8c74", "url": "https://github.com/yahoo/elide/commit/864e02d53f4e501838d46db04558dbbf6ffd8c74", "message": "Update pom.xml", "committedDate": "2020-05-22T21:40:37Z", "type": "commit"}, {"oid": "7b71404fe68ec9884473e115321e66dc8eccdbdf", "url": "https://github.com/yahoo/elide/commit/7b71404fe68ec9884473e115321e66dc8eccdbdf", "message": "Update pom.xml", "committedDate": "2020-05-22T21:51:50Z", "type": "commit"}]}