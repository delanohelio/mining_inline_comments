{"pr_number": 1255, "pr_title": "in memory compilation integrated with dynamic config helpers", "pr_createdAt": "2020-04-03T20:25:34Z", "pr_url": "https://github.com/yahoo/elide/pull/1255", "timeline": [{"oid": "45ef3146dfe632a5691d2f2ec1c89c632de63901", "url": "https://github.com/yahoo/elide/commit/45ef3146dfe632a5691d2f2ec1c89c632de63901", "message": "FromTable and FromSubQuery Logic", "committedDate": "2020-04-06T11:25:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2ODM2MA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407568360", "bodyText": "Lets move the value hibernate.hbm2ddl.auto to a static final var", "author": "moizarafat", "createdAt": "2020-04-13T16:23:49Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (EntityManagerFactoryBuilder builder,\n+            DataSource source, JpaProperties jpaProperties, HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties configProperties) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(\"hibernate.hbm2ddl.auto\") == null && hibernateGetDDLAuto != null) {", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTc1NA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407569754", "bodyText": "Since this statement is common for all test cases, we can move it up at class level.", "author": "moizarafat", "createdAt": "2020-04-13T16:26:23Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/DynamicConfigTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+/**\n+ * Example functional test.\n+ */\n+\n+public class DynamicConfigTest extends IntegrationTest {\n+    /**\n+     * This test demonstrates an example test using the JSON-API DSL.\n+     * @throws InterruptedException\n+     */\n+\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiGetTestView() throws InterruptedException {\n+        when()\n+                .get(\"/json/PlayerStatsView\")\n+                .then()\n+                .body(equalTo(\n+                        data(\n+                                resource(\n+                                        type(\"PlayerStatsView\"),\n+                                        id(\"0\"),\n+                                        attributes(\n+                                                attr(\"countryCode\", \"USA\"),\n+                                                attr(\"createdOn\", \"2000-10-01T04:00Z\"),\n+                                                attr(\"highScore\", null),\n+                                                attr(\"name\", \"SerenaWilliams\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                )\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiPostTestView() {\n+        given()\n+                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n+                .body(\n+                        datum(\n+                                resource(\n+                                        type(\"playerStats\"),\n+                                        id(\"SaniaMirza\"),\n+                                        attributes(\n+                                                attr(\"countryId\", \"1\"),\n+                                                attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                                attr(\"highScore\", null)\n+                                        )\n+                                )\n+                        )\n+                )\n+                .when()\n+                .post(\"/json/playerStats\")\n+                .then()\n+                .body(equalTo(datum(\n+                        resource(\n+                                type(\"playerStats\"),\n+                                id(\"SaniaMirza\"),\n+                                attributes(\n+                                        attr(\"countryId\", \"1\"),\n+                                        attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                        attr(\"highScore\", null)\n+                                )\n+                        )\n+                ).toJSON()))\n+                .statusCode(HttpStatus.SC_CREATED);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SaniaMirza','2','2000-10-01');\"\n+                    + \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('2','IND');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTg4OA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407569888", "bodyText": "Since this statement is common for all test cases, we can move it up at class level.", "author": "moizarafat", "createdAt": "2020-04-13T16:26:38Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/DynamicConfigTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+/**\n+ * Example functional test.\n+ */\n+\n+public class DynamicConfigTest extends IntegrationTest {\n+    /**\n+     * This test demonstrates an example test using the JSON-API DSL.\n+     * @throws InterruptedException\n+     */\n+\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiGetTestView() throws InterruptedException {\n+        when()\n+                .get(\"/json/PlayerStatsView\")\n+                .then()\n+                .body(equalTo(\n+                        data(\n+                                resource(\n+                                        type(\"PlayerStatsView\"),\n+                                        id(\"0\"),\n+                                        attributes(\n+                                                attr(\"countryCode\", \"USA\"),\n+                                                attr(\"createdOn\", \"2000-10-01T04:00Z\"),\n+                                                attr(\"highScore\", null),\n+                                                attr(\"name\", \"SerenaWilliams\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                )\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiPostTestView() {\n+        given()\n+                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n+                .body(\n+                        datum(\n+                                resource(\n+                                        type(\"playerStats\"),\n+                                        id(\"SaniaMirza\"),\n+                                        attributes(\n+                                                attr(\"countryId\", \"1\"),\n+                                                attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                                attr(\"highScore\", null)\n+                                        )\n+                                )\n+                        )\n+                )\n+                .when()\n+                .post(\"/json/playerStats\")\n+                .then()\n+                .body(equalTo(datum(\n+                        resource(\n+                                type(\"playerStats\"),\n+                                id(\"SaniaMirza\"),\n+                                attributes(\n+                                        attr(\"countryId\", \"1\"),\n+                                        attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                        attr(\"highScore\", null)\n+                                )\n+                        )\n+                ).toJSON()))\n+                .statusCode(HttpStatus.SC_CREATED);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SaniaMirza','2','2000-10-01');\"\n+                    + \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTk0OA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407569948", "bodyText": "Since this statement is common for all test cases, we can move it up at class level.", "author": "moizarafat", "createdAt": "2020-04-13T16:26:44Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/DynamicConfigTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.tests;\n+\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attr;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.attributes;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.data;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.datum;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.id;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.resource;\n+import static com.yahoo.elide.contrib.testhelpers.jsonapi.JsonApiDSL.type;\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.spring.controllers.JsonApiController;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.context.jdbc.Sql;\n+import org.springframework.test.context.jdbc.SqlMergeMode;\n+\n+/**\n+ * Example functional test.\n+ */\n+\n+public class DynamicConfigTest extends IntegrationTest {\n+    /**\n+     * This test demonstrates an example test using the JSON-API DSL.\n+     * @throws InterruptedException\n+     */\n+\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiGetTestView() throws InterruptedException {\n+        when()\n+                .get(\"/json/PlayerStatsView\")\n+                .then()\n+                .body(equalTo(\n+                        data(\n+                                resource(\n+                                        type(\"PlayerStatsView\"),\n+                                        id(\"0\"),\n+                                        attributes(\n+                                                attr(\"countryCode\", \"USA\"),\n+                                                attr(\"createdOn\", \"2000-10-01T04:00Z\"),\n+                                                attr(\"highScore\", null),\n+                                                attr(\"name\", \"SerenaWilliams\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                )\n+                .statusCode(HttpStatus.SC_OK);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('1','USA');\")\n+    @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD,\n+            statements = \"DELETE FROM PlayerStats; DELETE FROM PlayerCountry;\")\n+    @Test\n+    public void jsonApiPostTestView() {\n+        given()\n+                .contentType(JsonApiController.JSON_API_CONTENT_TYPE)\n+                .body(\n+                        datum(\n+                                resource(\n+                                        type(\"playerStats\"),\n+                                        id(\"SaniaMirza\"),\n+                                        attributes(\n+                                                attr(\"countryId\", \"1\"),\n+                                                attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                                attr(\"highScore\", null)\n+                                        )\n+                                )\n+                        )\n+                )\n+                .when()\n+                .post(\"/json/playerStats\")\n+                .then()\n+                .body(equalTo(datum(\n+                        resource(\n+                                type(\"playerStats\"),\n+                                id(\"SaniaMirza\"),\n+                                attributes(\n+                                        attr(\"countryId\", \"1\"),\n+                                        attr(\"createdOn\", \"2002-03-01T04:00Z\"),\n+                                        attr(\"highScore\", null)\n+                                )\n+                        )\n+                ).toJSON()))\n+                .statusCode(HttpStatus.SC_CREATED);\n+    }\n+    @SqlMergeMode(SqlMergeMode.MergeMode.MERGE)\n+    @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD,\n+            statements = \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SaniaMirza','2','2000-10-01');\"\n+                    + \"INSERT INTO PlayerStats (name,countryId,createdOn) VALUES\\n\"\n+                    + \"\\t\\t('SerenaWilliams','1','2000-10-01');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"\n+                    + \"\\t\\t('2','IND');\"\n+                    + \"INSERT INTO PlayerCountry (id,isoCode) VALUES\\n\"", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MDI2OQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407570269", "bodyText": "Please remove extra line.", "author": "moizarafat", "createdAt": "2020-04-13T16:27:16Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/tests/IntegrationTest.java", "diffHunk": "@@ -10,6 +10,7 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.web.server.LocalServerPort;\n \n+", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzAyMQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583021", "bodyText": "Please add Javadoc for the class.", "author": "moizarafat", "createdAt": "2020-04-13T16:50:22Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicInMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.google.common.collect.Sets;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Set;\n+\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class ElideDynamicInMemoryClassLoader extends ClassLoader {", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzA3Mg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583072", "bodyText": "Please add Javadoc for the class.", "author": "moizarafat", "createdAt": "2020-04-13T16:50:30Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicPersistenceUnit.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import lombok.Data;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.SharedCacheMode;\n+import javax.persistence.ValidationMode;\n+import javax.persistence.spi.ClassTransformer;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.sql.DataSource;\n+\n+@Data\n+public class ElideDynamicPersistenceUnit implements PersistenceUnitInfo {", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzE4NA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583184", "bodyText": "Please add Javadoc for the class.", "author": "moizarafat", "createdAt": "2020-04-13T16:50:42Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+@Slf4j\n+public class ElideDynamicEntityCompiler {", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MzY4NQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r407583685", "bodyText": "Please add Javadoc for the method.", "author": "moizarafat", "createdAt": "2020-04-13T16:51:39Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (EntityManagerFactoryBuilder builder,", "originalCommit": "32ee59713155d435420784383323b88b88962b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzQ2Ng==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411417466", "bodyText": "There are a lot of hibernate properties we will likely want to preserve beyond just the DDL_AUTO - batch settings, fetch modes, connection pool settings, etc.  Can we just take the entire map of hibernate properties and use them all?", "author": "aklish", "createdAt": "2020-04-20T14:20:09Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(HIBERNATE_DDL_AUTO) == null && hibernateGetDDLAuto != null) {\n+               jpaPropMap.put(HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNjM5NA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r416126394", "bodyText": "most of the hibernate properties are passed as spring.jpa.properties.hibernate.*. But there are 4 properties which are passed as spring.jpa.hibernate.* . Here we are taking those 4 properties and setting the corresponding parameters in spring.jpa.properties.hibernate.* if not already set so that it gets passed along to the EntityManagerFactoryBean. https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html", "author": "moizarafat", "createdAt": "2020-04-27T20:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNzAyNQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r416127025", "bodyText": "Ayes has expanded the logic to remaining 3 params too.", "author": "moizarafat", "createdAt": "2020-04-27T20:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxOTEyOA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411419128", "bodyText": "Does this overwrite the previous or extend it?", "author": "aklish", "createdAt": "2020-04-20T14:22:10Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(HIBERNATE_DDL_AUTO) == null && hibernateGetDDLAuto != null) {\n+               jpaPropMap.put(HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);\n+             }\n+\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(compiler.getClassLoader());\n+\n+            //Add dynamic classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+            //Add classpath entity model classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.LOADED_CLASSES, bindClasses);\n+\n+            //pui properties from pui map\n+            Properties puiProps = new Properties();\n+            puiProps.putAll(puiPropertyMap);\n+\n+            //Create Elide dynamic Persistence Unit\n+            ElideDynamicPersistenceUnit elideDynamicPersistenceUnit =\n+                    new ElideDynamicPersistenceUnit(\"dynamic\", compiler.classNames, puiProps,\n+                    compiler.getClassLoader());\n+            elideDynamicPersistenceUnit.setNonJtaDataSource(source);\n+            elideDynamicPersistenceUnit.setJtaDataSource(source);\n+\n+            HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n+            vendorAdapter.setShowSql(jpaProperties.isShowSql());\n+            vendorAdapter.setGenerateDdl(jpaProperties.isGenerateDdl());\n+            if (jpaProperties.getDatabase() != null) {\n+                vendorAdapter.setDatabase(jpaProperties.getDatabase());\n+            }\n+            if (jpaProperties.getDatabasePlatform() != null) {\n+                vendorAdapter.setDatabasePlatform(jpaProperties.getDatabasePlatform());\n+            }\n+\n+            LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();\n+            bean.setJpaVendorAdapter(vendorAdapter);\n+\n+            //Add JPA Properties from Application.yaml\n+            bean.setJpaPropertyMap(jpaPropMap);\n+\n+            //Add Classes\n+            bean.setJpaPropertyMap(puiPropertyMap);", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyMDA5NQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r413820095", "bodyText": "It extends the jpaPropertyMap to include the classloader and annotated classes", "author": "ayeswarya", "createdAt": "2020-04-23T14:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxOTEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMDA1Nw==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411420057", "bodyText": "Two things - let's not catch Exception here (it is too broad).  Also, if there is an error, we'll want to bring down the service.  Let the exceptions propagate.", "author": "aklish", "createdAt": "2020-04-20T14:23:19Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.spring.dynamic.compile.ElideDynamicPersistenceUnit;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+        try {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            if (jpaPropMap.get(HIBERNATE_DDL_AUTO) == null && hibernateGetDDLAuto != null) {\n+               jpaPropMap.put(HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);\n+             }\n+\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+\n+            Collection<ClassLoader> classLoaders = new ArrayList<>();\n+            classLoaders.add(compiler.getClassLoader());\n+\n+            //Add dynamic classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.CLASSLOADERS, classLoaders);\n+            //Add classpath entity model classes to Pui Map\n+            puiPropertyMap.put(AvailableSettings.LOADED_CLASSES, bindClasses);\n+\n+            //pui properties from pui map\n+            Properties puiProps = new Properties();\n+            puiProps.putAll(puiPropertyMap);\n+\n+            //Create Elide dynamic Persistence Unit\n+            ElideDynamicPersistenceUnit elideDynamicPersistenceUnit =\n+                    new ElideDynamicPersistenceUnit(\"dynamic\", compiler.classNames, puiProps,\n+                    compiler.getClassLoader());\n+            elideDynamicPersistenceUnit.setNonJtaDataSource(source);\n+            elideDynamicPersistenceUnit.setJtaDataSource(source);\n+\n+            HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n+            vendorAdapter.setShowSql(jpaProperties.isShowSql());\n+            vendorAdapter.setGenerateDdl(jpaProperties.isGenerateDdl());\n+            if (jpaProperties.getDatabase() != null) {\n+                vendorAdapter.setDatabase(jpaProperties.getDatabase());\n+            }\n+            if (jpaProperties.getDatabasePlatform() != null) {\n+                vendorAdapter.setDatabasePlatform(jpaProperties.getDatabasePlatform());\n+            }\n+\n+            LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();\n+            bean.setJpaVendorAdapter(vendorAdapter);\n+\n+            //Add JPA Properties from Application.yaml\n+            bean.setJpaPropertyMap(jpaPropMap);\n+\n+            //Add Classes\n+            bean.setJpaPropertyMap(puiPropertyMap);\n+\n+            bean.setPersistenceUnitManager(new PersistenceUnitManager() {\n+                @Override\n+                public PersistenceUnitInfo obtainDefaultPersistenceUnitInfo() throws IllegalStateException {\n+                    return elideDynamicPersistenceUnit;\n+                }\n+\n+                @Override\n+                public PersistenceUnitInfo obtainPersistenceUnitInfo(String persistenceUnitName)\n+                        throws IllegalArgumentException, IllegalStateException {\n+                    return elideDynamicPersistenceUnit;\n+                }\n+            });\n+\n+            return bean;\n+        } catch (Exception e) {", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjkwNQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411426905", "bodyText": "Would be nice if this was done in the constructor somehow (along with the other entities that are being populated).", "author": "aklish", "createdAt": "2020-04-20T14:31:58Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/MetaDataStore.java", "diffHunk": "@@ -79,6 +79,19 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n                 .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n     }\n \n+    /**\n+     * Bind dynamic compiled classes to dictionary.\n+     * @param dynamicCompiledClasses Dynamically compiled classes\n+     */\n+    public void populateEntityDictionary(Set<Class<?>> dynamicCompiledClasses) {", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODgyOQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411428829", "bodyText": "Don't print stack traces - log the exception.  Also - don't catch Exception.  Just let it propagate.", "author": "aklish", "createdAt": "2020-04-20T14:34:25Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -40,8 +49,32 @@\n  */\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n+@Slf4j\n public class ElideAutoConfiguration {\n \n+    /**\n+     * Creates a entity compiler for compiling dynamic config classes.\n+     * @param settings\n+     * @return An instance of ElideDynamicEntityCompiler\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) {\n+\n+        ElideDynamicEntityCompiler compiler = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+            try {\n+                compiler.compile(settings.getDynamicConfig().getPath());\n+            } catch (Exception e) {\n+                e.printStackTrace();", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjcxOA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411432718", "bodyText": "Pass the compiler to the MetaDataStore constructor and initialize the internal dictionary in the constructor instead of doing this initialization here.", "author": "aklish", "createdAt": "2020-04-20T14:39:29Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -90,32 +127,66 @@ public void inject(Object entity) {\n                 });\n \n         dictionary.scanForSecurityChecks();\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = findAnnotatedClasses(compiler, SecurityCheck.class);\n+            dictionary.addSecurityChecks(annotatedClass);\n+        }\n+\n         return dictionary;\n     }\n \n     /**\n      * Create a QueryEngine instance for aggregation data store to use.\n      * @param entityManagerFactory The JPA factory which creates entity managers.\n+     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param settings Elide configuration settings.\n      * @return An instance of a QueryEngine\n+     * @throws ClassNotFoundException\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory) {\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n+            throws ClassNotFoundException {\n+\n         MetaDataStore metaDataStore = new MetaDataStore();\n \n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = findAnnotatedClasses(compiler, FromTable.class);\n+            annotatedClass.addAll(findAnnotatedClasses(compiler, FromSubquery.class));\n+            metaDataStore.populateEntityDictionary(annotatedClass);", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDYwMA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411434600", "bodyText": "make plural", "author": "aklish", "createdAt": "2020-04-20T14:41:44Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -125,6 +196,29 @@ public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, Query\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param compiler An instance of ElideDynamicEntityCompiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    private Set<Class<?>> findAnnotatedClasses(ElideDynamicEntityCompiler compiler, Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        Set<Class<?>> annotatedClass = new HashSet<Class<?>>();", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNTk1Nw==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411435957", "bodyText": "This is a copy of another class in Elide.  Let's move it to a common place (probably JPA data store) - and have both pull from it.", "author": "aklish", "createdAt": "2020-04-20T14:43:30Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicPersistenceUnit.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import lombok.Data;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import javax.persistence.SharedCacheMode;\n+import javax.persistence.ValidationMode;\n+import javax.persistence.spi.ClassTransformer;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Persistent Unit implementation for Dynamic Configuration.\n+ */\n+@Data\n+public class ElideDynamicPersistenceUnit implements PersistenceUnitInfo {", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjk5OA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411436998", "bodyText": "What handles the variable substitution for the variables.hjson?", "author": "aklish", "createdAt": "2020-04-20T14:44:52Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser();\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        try {\n+\n+            elideConfigParser.parseConfigPath(path);", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5Mzk5OQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r413893999", "bodyText": "Variable substitution happens in  elide contrib dynamic config helpers \n  \n    \n      elide/elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/DynamicConfigHelpersUtil.java\n    \n    \n         Line 176\n      in\n      e36cc01\n    \n    \n    \n    \n\n        \n          \n           public String resolveVariables(String jsonConfig, Map<String, Object> variables) throws IOException {", "author": "ayeswarya", "createdAt": "2020-04-23T15:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzc0NQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411437745", "bodyText": "Let NPE propagate.", "author": "aklish", "createdAt": "2020-04-20T14:45:52Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser();\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        try {\n+\n+            elideConfigParser.parseConfigPath(path);\n+            tableConfig = elideConfigParser.getElideTableConfig();\n+            securityConfig = elideConfigParser.getElideSecurityConfig();\n+            tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+            securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+            for (Entry<String, String> entry : tableClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            for (Entry<String, String> entry : securityClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            compiler.useParentClassLoader(\n+                    new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                            Sets.newHashSet(classNames)));\n+\n+        } catch (NullPointerException | IOException e) {", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzODkwMQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411438901", "bodyText": "Path is unused.", "author": "aklish", "createdAt": "2020-04-20T14:47:18Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     */\n+    public ElideDynamicEntityCompiler(String path) {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser();\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        try {\n+\n+            elideConfigParser.parseConfigPath(path);\n+            tableConfig = elideConfigParser.getElideTableConfig();\n+            securityConfig = elideConfigParser.getElideSecurityConfig();\n+            tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+            securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+            for (Entry<String, String> entry : tableClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            for (Entry<String, String> entry : securityClasses.entrySet()) {\n+                classNames.add(PACKAGE_NAME + entry.getKey());\n+            }\n+\n+            compiler.useParentClassLoader(\n+                    new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                            Sets.newHashSet(classNames)));\n+\n+        } catch (NullPointerException | IOException e) {\n+            log.error(\"Unable to read Dynamic Configuration \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @param path: Dynamic config hjsons root location\n+     */\n+    public void compile(String path) throws Exception {", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzOTk2MA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r411439960", "bodyText": "What is the purpose of this public setter method that overrides the constructor initialization?  Can we remove it?", "author": "aklish", "createdAt": "2020-04-20T14:48:34Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/dynamic/compile/ElideDynamicInMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.dynamic.compile;\n+\n+import com.google.common.collect.Sets;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Set;\n+\n+/**\n+ * ClassLoader for dynamic configuration.\n+ */\n+@Slf4j\n+@Data\n+@AllArgsConstructor\n+public class ElideDynamicInMemoryClassLoader extends ClassLoader {\n+\n+    private Set<String> classNames = Sets.newHashSet();\n+\n+    public ElideDynamicInMemoryClassLoader(ClassLoader parent, Set<String> classNames) {\n+        super(parent);\n+        setClassNames(classNames);\n+    }\n+\n+    public void setClassNames(Set<String> classNames) {", "originalCommit": "2d6436d07b3818aa897f401a7f8cd9a9b6e97440", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8320245f56ce9db1d375ace4d1a2870eb34eb91b", "url": "https://github.com/yahoo/elide/commit/8320245f56ce9db1d375ace4d1a2870eb34eb91b", "message": "Review Comments resolution", "committedDate": "2020-04-30T23:35:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODE0Mg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418618142", "bodyText": "Prefixing the models with \"com.yahoo.elide\" will prohibit API versioning in Elide 5 (all elide prefixed models are not versioned).  We'll need to find another package name for the dynamic models.", "author": "aklish", "createdAt": "2020-05-01T16:26:03Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"com.yahoo.elide.contrib.dynamicconfig.model.\";", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4MDgyNQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418780825", "bodyText": "we can use dynamicconfig.models", "author": "moizarafat", "createdAt": "2020-05-01T23:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDY0NQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418620645", "bodyText": "Why can't we copy all of the properties from hibernateProperties instead of setting explicit ones.  THere are dozens of hibernate properties that might be set.", "author": "aklish", "createdAt": "2020-05-01T16:31:33Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.Naming;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+    public static final String HIBERNATE_PHYSICAL_NAMING = \"hibernate.physical_naming_strategy\";\n+    public static final String HIBERNATE_IMPLICIT_NAMING = \"hibernate.implicit_naming_strategy\";\n+    public static final String HIBERNATE_ID_GEN_MAPPING = \"hibernate.use-new-id-generator-mappings\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromSubquery.class));\n+\n+            //Map of JPA Properties to be be passed to EntityManager\n+            Map<String, String> jpaPropMap = jpaProperties.getProperties();\n+\n+            String hibernateGetDDLAuto = hibernateProperties.getDdlAuto();\n+            Naming hibernateGetNaming =  hibernateProperties.getNaming();\n+            String hibernateImplicitStrategy = hibernateGetNaming.getImplicitStrategy();\n+            String hibernatePhysicalStrategy = hibernateGetNaming.getPhysicalStrategy();\n+            Boolean hibernateGetIdenGen = hibernateProperties.isUseNewIdGeneratorMappings();\n+\n+            //Set the relevant property in JPA corresponding to Hibernate Property Value\n+            hibernateJPAPropertyOverride(jpaPropMap, HIBERNATE_DDL_AUTO, hibernateGetDDLAuto);", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMTU4Mg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418631582", "bodyText": "Discussed with Aaron, this can be ignored.", "author": "moizarafat", "createdAt": "2020-05-01T16:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMDY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMTM2NQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418621365", "bodyText": "FromTable and FromSubquery are not JPA Entities - why are we binding them to the Persistent Unit?", "author": "aklish", "createdAt": "2020-05-01T16:33:17Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n+import com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.Naming;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")\n+public class ElideDynamicConfiguration {\n+\n+    public static final String HIBERNATE_DDL_AUTO = \"hibernate.hbm2ddl.auto\";\n+    public static final String HIBERNATE_PHYSICAL_NAMING = \"hibernate.physical_naming_strategy\";\n+    public static final String HIBERNATE_IMPLICIT_NAMING = \"hibernate.implicit_naming_strategy\";\n+    public static final String HIBERNATE_ID_GEN_MAPPING = \"hibernate.use-new-id-generator-mappings\";\n+\n+    /**\n+     * Configure factory bean to create EntityManagerFactory for Dynamic Configuration.\n+     * @param source :DataSource for JPA\n+     * @param jpaProperties : JPA Config Properties\n+     * @param hibernateProperties : Hibernate Config Properties\n+     * @param dynamicCompiler : ElideDynamicEntityCompiler\n+     * @return LocalContainerEntityManagerFactoryBean bean\n+     */\n+    @Bean\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory (\n+            DataSource source,\n+            JpaProperties jpaProperties,\n+            HibernateProperties hibernateProperties,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler) {\n+\n+            //Map for Persistent Unit properties\n+            Map<String, Object> puiPropertyMap = new HashMap<>();\n+\n+            //Bind entity classes from classpath to Persistence Unit\n+            ArrayList<Class> bindClasses = new ArrayList<>();\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(Entity.class));\n+\n+            //Bind FromTable/FromSubSelect classes from classpath to Persistence Unit\n+            bindClasses.addAll(ClassScanner.getAnnotatedClasses(FromTable.class));", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzAwMA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418623000", "bodyText": "Fact tables in the AggregationDataStore are never entities (because Elide manages the SQL).  JPA shouldn't know about them.  Look at the similar class in AggregationDataStore.", "author": "aklish", "createdAt": "2020-05-01T16:36:51Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzczNg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418623736", "bodyText": "elide-example-models was a place to put common classes that are referenced in multiple maven sub-modules.  Rather than redefine these entities here - can we move Player stats and related models to elide-example-models?  That said, I don't want this to cascade into a ton of work - so let's discuss if this looks complicated.", "author": "aklish", "createdAt": "2020-05-01T16:38:27Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+public class PlayerStats {", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2ODM5MA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r419468390", "bodyText": "We will take care of this once all these PRs are merged into a single PR.", "author": "moizarafat", "createdAt": "2020-05-04T14:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyMzczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDc1MQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418624751", "bodyText": "Now that I think about it, why do we need this class at all?  Since we are testing dynamic classes - not static ones.", "author": "aklish", "createdAt": "2020-05-01T16:40:54Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerStats.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true , type = \"playerStats\")\n+@Cardinality(size = CardinalitySize.LARGE)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+public class PlayerStats {", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNDkxOA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r418624918", "bodyText": "Why do we need a static class when we are testing dynamic class loading?", "author": "aklish", "createdAt": "2020-05-01T16:41:16Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/contrib/dynamicconfig/model/PlayerCountry.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfig.model;\n+\n+import com.yahoo.elide.annotation.DeletePermission;\n+import com.yahoo.elide.annotation.Include;\n+import com.yahoo.elide.annotation.ReadPermission;\n+import com.yahoo.elide.annotation.UpdatePermission;\n+import com.yahoo.elide.datastores.aggregation.annotation.Cardinality;\n+import com.yahoo.elide.datastores.aggregation.annotation.CardinalitySize;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+/**\n+ * A root level entity for testing AggregationDataStore.\n+ */\n+@Include(rootLevel = true,  type = \"playerCountry\")\n+@Cardinality(size = CardinalitySize.SMALL)\n+@EqualsAndHashCode\n+@ToString\n+@Data\n+@Entity\n+@ReadPermission(expression = \"Prefab.Role.All\")\n+@UpdatePermission(expression = \"Prefab.Role.None\")\n+@DeletePermission(expression = \"Prefab.Role.None\")\n+\n+public class PlayerCountry {", "originalCommit": "4329dd1bfa1ed0aeed74050b19e7893725258034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af6750ab2a2ec990b3aa6304922127033e59be49", "url": "https://github.com/yahoo/elide/commit/af6750ab2a2ec990b3aa6304922127033e59be49", "message": "Rebase against 5.x\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-14T00:02:07Z", "type": "commit"}, {"oid": "f6377d71918dcf4a331a40b41291ed24ada5e785", "url": "https://github.com/yahoo/elide/commit/f6377d71918dcf4a331a40b41291ed24ada5e785", "message": "pom fix\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-14T00:17:31Z", "type": "commit"}, {"oid": "c058e29d011d76d6aa4ea26c4b4cf67abbfc51ef", "url": "https://github.com/yahoo/elide/commit/c058e29d011d76d6aa4ea26c4b4cf67abbfc51ef", "message": "pom fix\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-14T01:01:08Z", "type": "commit"}, {"oid": "5220cccf0f6eb03b15230f13cc5395a3195e9526", "url": "https://github.com/yahoo/elide/commit/5220cccf0f6eb03b15230f13cc5395a3195e9526", "message": "Merging 1220\n\nCo-authored-by: rishi-aga <rishi.aga123@gmail.com>\nCo-authored-by: AvaniMakwana <Avani.makwana@outlook.com>", "committedDate": "2020-05-14T02:12:49Z", "type": "commit"}, {"oid": "272c6f67a3164aefb658b2f66b0dbc1cd3a5e86a", "url": "https://github.com/yahoo/elide/commit/272c6f67a3164aefb658b2f66b0dbc1cd3a5e86a", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-14T03:44:00Z", "type": "commit"}, {"oid": "bef6ba907e98b914985ff1936a16d6f0c364f518", "url": "https://github.com/yahoo/elide/commit/bef6ba907e98b914985ff1936a16d6f0c364f518", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-14T04:22:06Z", "type": "commit"}, {"oid": "64890957fffdee6f8d983f448f4f9e52692a0a02", "url": "https://github.com/yahoo/elide/commit/64890957fffdee6f8d983f448f4f9e52692a0a02", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-14T04:40:56Z", "type": "commit"}, {"oid": "64890957fffdee6f8d983f448f4f9e52692a0a02", "url": "https://github.com/yahoo/elide/commit/64890957fffdee6f8d983f448f4f9e52692a0a02", "message": "Spring Boot Changes\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-14T04:40:56Z", "type": "forcePushed"}, {"oid": "cee9218c1ed93fec1b8ec2f150ca08aa1d048a8d", "url": "https://github.com/yahoo/elide/commit/cee9218c1ed93fec1b8ec2f150ca08aa1d048a8d", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-14T05:43:11Z", "type": "commit"}, {"oid": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "url": "https://github.com/yahoo/elide/commit/eec6ec049d7d35bfbc25d86b0d343145b368de83", "message": "Update DynamicConfigTest.java", "committedDate": "2020-05-14T16:19:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMTE4OA==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425421188", "bodyText": "Can be rewritten as:\nreturn findAnnotatedClasses(annotationClass)\n       .stream\n       .map(Class::getName)\n       .collect(Collectors.toList());", "author": "aklish", "createdAt": "2020-05-14T20:48:43Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"dynamicconfig.models.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance().ignoreWarnings();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws IOException IOException thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws IOException {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+        securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+        for (Entry<String, String> entry : tableClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        for (Entry<String, String> entry : securityClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        compiler.useParentClassLoader(\n+                new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                        Sets.newHashSet(classNames)));\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @throws Exception\n+     */\n+    public void compile() throws Exception {\n+\n+        for (Map.Entry<String, String> tablePojo : tableClasses.entrySet()) {\n+            log.debug(\"key: \" + tablePojo.getKey() + \", value: \" + tablePojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + tablePojo.getKey(), tablePojo.getValue());\n+        }\n+\n+        for (Map.Entry<String, String> secPojo : securityClasses.entrySet()) {\n+            log.debug(\"key: \" + secPojo.getKey() + \", value: \" + secPojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + secPojo.getKey(), secPojo.getValue());\n+        }\n+\n+        try {\n+            compiledObjects = compiler.compileAll();\n+        } catch (Exception e) {\n+            log.error(\"Unable to compile dynamic classes in memory \");\n+        }\n+\n+    }\n+\n+    /**\n+     * Get Inmemorycompiler's classloader.\n+     * @return ClassLoader\n+     */\n+    public ClassLoader getClassLoader() {\n+        return compiler.getClassloader();\n+    }\n+\n+    /**\n+     * Get the class from compiled class lists.\n+     * @param name name of the class\n+     * @return Class\n+     */\n+    public Class<?> getCompiled(String name) {\n+        return compiledObjects.get(name);\n+    }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public Set<Class<?>> findAnnotatedClasses(Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+        ArrayList<String> dynamicClasses = classNames;\n+\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = getClassLoader().loadClass(dynamicClass);\n+            if (classz.getAnnotation(annotationClass) != null) {\n+                annotatedClasses.add(classz);\n+            }\n+        }\n+\n+        return annotatedClasses;\n+    }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public List<String> findAnnotatedClassNames(Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        List<String> annotatedClasses = new ArrayList<String>();", "originalCommit": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMjY2Mg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425422662", "bodyText": "Is there any reason not to compile now in the constructor as well so compiledObjects is fully initialized?", "author": "aklish", "createdAt": "2020-05-14T20:51:35Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"dynamicconfig.models.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance().ignoreWarnings();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws IOException IOException thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws IOException {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+        securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+        for (Entry<String, String> entry : tableClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        for (Entry<String, String> entry : securityClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        compiler.useParentClassLoader(\n+                new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                        Sets.newHashSet(classNames)));\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @throws Exception\n+     */\n+    public void compile() throws Exception {", "originalCommit": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNDkzMg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425424932", "bodyText": "Instead of loading the classes here, why. not just iterate over compiledObjects.values()", "author": "aklish", "createdAt": "2020-05-14T20:55:47Z", "path": "elide-contrib/elide-dynamic-config-helpers/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.contrib.dynamicconfighelpers.compile;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideSecurityConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.model.ElideTableConfig;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.ElideConfigParser;\n+import com.yahoo.elide.contrib.dynamicconfighelpers.parser.handlebars.HandlebarsHydrator;\n+\n+import com.google.common.collect.Sets;\n+\n+import org.mdkt.compiler.InMemoryJavaCompiler;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Compiles dynamic model pojos generated from hjson files.\n+ *\n+ */\n+@Slf4j\n+public class ElideDynamicEntityCompiler {\n+\n+    public static ArrayList<String> classNames = new ArrayList<String>();\n+\n+    public static final String PACKAGE_NAME = \"dynamicconfig.models.\";\n+    private Map<String, Class<?>> compiledObjects;\n+\n+    private InMemoryJavaCompiler compiler = InMemoryJavaCompiler.newInstance().ignoreWarnings();\n+\n+    private Map<String, String> tableClasses = new HashMap<String, String>();\n+    private Map<String, String> securityClasses = new HashMap<String, String>();\n+\n+    /**\n+     * Parse dynamic config path.\n+     * @param path : Dynamic config hjsons root location\n+     * @throws IOException IOException thrown\n+     */\n+    public ElideDynamicEntityCompiler(String path) throws IOException {\n+\n+        ElideTableConfig tableConfig = new ElideTableConfig();\n+        ElideSecurityConfig securityConfig = new ElideSecurityConfig();\n+        ElideConfigParser elideConfigParser = new ElideConfigParser(path);\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator();\n+\n+        tableConfig = elideConfigParser.getElideTableConfig();\n+        securityConfig = elideConfigParser.getElideSecurityConfig();\n+        tableClasses = hydrator.hydrateTableTemplate(tableConfig);\n+        securityClasses = hydrator.hydrateSecurityTemplate(securityConfig);\n+\n+        for (Entry<String, String> entry : tableClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        for (Entry<String, String> entry : securityClasses.entrySet()) {\n+            classNames.add(PACKAGE_NAME + entry.getKey());\n+        }\n+\n+        compiler.useParentClassLoader(\n+                new ElideDynamicInMemoryClassLoader(ClassLoader.getSystemClassLoader(),\n+                        Sets.newHashSet(classNames)));\n+    }\n+\n+    /**\n+     * Compile table and security model pojos.\n+     * @throws Exception\n+     */\n+    public void compile() throws Exception {\n+\n+        for (Map.Entry<String, String> tablePojo : tableClasses.entrySet()) {\n+            log.debug(\"key: \" + tablePojo.getKey() + \", value: \" + tablePojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + tablePojo.getKey(), tablePojo.getValue());\n+        }\n+\n+        for (Map.Entry<String, String> secPojo : securityClasses.entrySet()) {\n+            log.debug(\"key: \" + secPojo.getKey() + \", value: \" + secPojo.getValue());\n+            compiler.addSource(PACKAGE_NAME + secPojo.getKey(), secPojo.getValue());\n+        }\n+\n+        try {\n+            compiledObjects = compiler.compileAll();\n+        } catch (Exception e) {\n+            log.error(\"Unable to compile dynamic classes in memory \");\n+        }\n+\n+    }\n+\n+    /**\n+     * Get Inmemorycompiler's classloader.\n+     * @return ClassLoader\n+     */\n+    public ClassLoader getClassLoader() {\n+        return compiler.getClassloader();\n+    }\n+\n+    /**\n+     * Get the class from compiled class lists.\n+     * @param name name of the class\n+     * @return Class\n+     */\n+    public Class<?> getCompiled(String name) {\n+        return compiledObjects.get(name);\n+    }\n+\n+    /**\n+     * Find classes with a particular annotation from dynamic compiler.\n+     * @param annotationClass Annotation to search for.\n+     * @return Set of Classes matching the annotation.\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public Set<Class<?>> findAnnotatedClasses(Class annotationClass)\n+            throws ClassNotFoundException {\n+\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+        ArrayList<String> dynamicClasses = classNames;\n+\n+        for (String dynamicClass : dynamicClasses) {\n+            Class<?> classz = getClassLoader().loadClass(dynamicClass);", "originalCommit": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMjI0Mw==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425432243", "bodyText": "Javadoc param is missing.  This will cause a warning in the build.", "author": "aklish", "createdAt": "2020-05-14T21:09:50Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/EntityDictionary.java", "diffHunk": "@@ -1256,7 +1256,21 @@ public void scanForSecurityChecks() {\n         // /elide-spring-boot-autoconfigure/src/main/java/org/illyasviel/elide\n         // /spring/boot/autoconfigure/ElideAutoConfiguration.java\n \n-        for (Class<?> cls : ClassScanner.getAnnotatedClasses(SecurityCheck.class)) {\n+        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(SecurityCheck.class);\n+\n+        addSecurityChecks(classes);\n+    }\n+\n+    /**\n+     * Add security checks and bind them to the dictionary.", "originalCommit": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzNzU4Mg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425437582", "bodyText": "dynamicConfig is not a controller - so why are we using ControllerProperties to configure it?", "author": "aklish", "createdAt": "2020-05-14T21:20:47Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideConfigProperties.java", "diffHunk": "@@ -36,6 +36,11 @@\n      */\n     private AsyncProperties async;\n \n+    /**\n+     * Settings for the Dynamic Configuration.\n+     */\n+    private ControllerProperties dynamicConfig;", "originalCommit": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MjE2Mg==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425442162", "bodyText": "If we turn off dynamic-config - will Elide autoconfigure work as expected with its normal EntityManagerFactory configuration?", "author": "aklish", "createdAt": "2020-05-14T21:30:05Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideDynamicConfiguration.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.spring.config;\n+\n+import com.yahoo.elide.contrib.dynamicconfighelpers.compile.ElideDynamicEntityCompiler;\n+import com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\n+import com.yahoo.elide.utils.ClassScanner;\n+\n+import org.hibernate.cfg.AvailableSettings;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.Naming;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Dynamic Configuration For Elide Services. Override any of the beans (by\n+ * defining your own) and setting flags to disable in properties to change the\n+ * default behavior.\n+ */\n+\n+@Slf4j\n+@Configuration\n+@EnableConfigurationProperties(ElideConfigProperties.class)\n+@ConditionalOnExpression(\"${elide.dynamic-config.enabled:false}\")", "originalCommit": "eec6ec049d7d35bfbc25d86b0d343145b368de83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MTk4MQ==", "url": "https://github.com/yahoo/elide/pull/1255#discussion_r425571981", "bodyText": "yes it does. All test cases except dynamic config one succeeds.", "author": "moizarafat", "createdAt": "2020-05-15T05:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0MjE2Mg=="}], "type": "inlineReview"}, {"oid": "e82788799888246188547c54cab88282c5d51e89", "url": "https://github.com/yahoo/elide/commit/e82788799888246188547c54cab88282c5d51e89", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-15T05:28:04Z", "type": "commit"}, {"oid": "e82788799888246188547c54cab88282c5d51e89", "url": "https://github.com/yahoo/elide/commit/e82788799888246188547c54cab88282c5d51e89", "message": "Review Comments\n\nCo-authored-by: Ayeswarya <ayeswarya.anandan@verizonmedia.com>", "committedDate": "2020-05-15T05:28:04Z", "type": "forcePushed"}]}