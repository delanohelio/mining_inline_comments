{"pr_number": 1353, "pr_title": "Carbon 167 Async Enhancements Embeddable", "pr_createdAt": "2020-05-29T04:35:12Z", "pr_url": "https://github.com/yahoo/elide/pull/1353", "timeline": [{"oid": "1b3546bdeeea601b0930556dbbda0c84067b3e67", "url": "https://github.com/yahoo/elide/commit/1b3546bdeeea601b0930556dbbda0c84067b3e67", "message": "changes from old branch for async enhancements", "committedDate": "2020-05-28T21:30:03Z", "type": "commit"}, {"oid": "050ad734035ba9aa73757e286c4932e0be175bc2", "url": "https://github.com/yahoo/elide/commit/050ad734035ba9aa73757e286c4932e0be175bc2", "message": "remove dependencies and column annotation", "committedDate": "2020-05-29T04:31:35Z", "type": "commit"}, {"oid": "561bb9dd2dbe1b66ef95e1433a69c6a35e026a50", "url": "https://github.com/yahoo/elide/commit/561bb9dd2dbe1b66ef95e1433a69c6a35e026a50", "message": "pr11", "committedDate": "2020-05-29T14:26:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MDgyNA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r432560824", "bodyText": "you can remove the commented column.", "author": "moizarafat", "createdAt": "2020-05-29T15:24:30Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQueryResult.java", "diffHunk": "@@ -5,46 +5,32 @@\n  */\n package com.yahoo.elide.async.models;\n \n-import com.yahoo.elide.annotation.CreatePermission;\n-import com.yahoo.elide.annotation.DeletePermission;\n-import com.yahoo.elide.annotation.Exclude;\n-import com.yahoo.elide.annotation.Include;\n-import com.yahoo.elide.annotation.ReadPermission;\n-import com.yahoo.elide.annotation.UpdatePermission;\n-\n import lombok.Data;\n \n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.OneToOne;\n+import java.util.Date;\n+\n+//import javax.persistence.Column;", "originalCommit": "561bb9dd2dbe1b66ef95e1433a69c6a35e026a50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2932aef3ccb7b4e71ad23f07d18d693a744cc7f", "url": "https://github.com/yahoo/elide/commit/d2932aef3ccb7b4e71ad23f07d18d693a744cc7f", "message": "remove commented line", "committedDate": "2020-05-29T17:20:16Z", "type": "commit"}, {"oid": "122245b3604668b58005f43d73193f6a9bda26d9", "url": "https://github.com/yahoo/elide/commit/122245b3604668b58005f43d73193f6a9bda26d9", "message": "gs", "committedDate": "2020-05-29T20:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODE1MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433348151", "bodyText": "Is there a reason we didn't use the DSL?", "author": "aklish", "createdAt": "2020-06-01T16:28:54Z", "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -298,62 +291,33 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n-                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\"\n-                                + \"\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n-                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\"\n-                                + \"\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n+                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphql/api/v1/\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\"\n-                                                                        + \"\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\"\n-                                                                        + \"\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\"\"\n-                                                                        + \",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n-\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"post\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"abusiveContent\\\\\\\":false,\\\\\\\"content\\\\\\\":\\\\\\\"This is my first post. woot.\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"2019-01-01T00:00Z\\\\\\\"}}]}\\\",\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":141}}}]}}}\";", "originalCommit": "122245b3604668b58005f43d73193f6a9bda26d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MTM4MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433591381", "bodyText": "The com.yahoo.elide.contrib.testhelpers.graphql.elements.SelectionSet and com.yahoo.elide.contrib.testhelpers.graphql.elements.Selection  provide the result in edges and nodes. But the embedded query result does not have edges and nodes in the graphql result. I tried to provide the string output from result as the field value, but additional quotes get added during result generation in DSL and I could not get the assertion to work.", "author": "ayeswarya", "createdAt": "2020-06-02T02:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODk1Mg==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433348952", "bodyText": "Any reason we didn't use the DSL here?", "author": "aklish", "createdAt": "2020-06-01T16:30:21Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -82,59 +81,34 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"group\\\",\\\"id\\\":\\\"com.example.repository\\\",\\\"attributes\\\":\"\n                                 + \"{\\\"commonName\\\":\\\"Example Repository\\\",\\\"deprecated\\\":false,\\\"description\\\":\\\"The code for this project\\\"},\"\n-                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n-                                + \"\\\"variables\\\":null}\")\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null }\")\n                         .post(\"/graphql\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"group\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"com.example.repository\\\\\\\",\"\n-                                                                        + \"\\\\\\\"attributes\\\\\\\":{\\\\\\\"commonName\\\\\\\":\\\\\\\"Example Repository\\\\\\\",\\\\\\\"deprecated\\\\\\\":false,\\\\\\\"description\\\\\\\":\\\\\\\"The code for this project\\\\\\\"}\"\n-                                                                        + \",\\\\\\\"relationships\\\\\\\":{\\\\\\\"products\\\\\\\":{\\\\\\\"data\\\\\\\":[]}}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"group\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"com.example.repository\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"commonName\\\\\\\":\\\\\\\"Example Repository\\\\\\\",\\\\\\\"deprecated\\\\\\\":false,\\\\\\\"description\\\\\\\":\\\\\\\"The code for this project\\\\\\\"},\\\\\\\"relationships\\\\\\\":{\\\\\\\"products\\\\\\\":{\\\\\\\"data\\\\\\\":[]}}}]}\\\",\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":208}}}]}}}\";", "originalCommit": "122245b3604668b58005f43d73193f6a9bda26d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MDcxMw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433350713", "bodyText": "Can we use the DSL here?", "author": "aklish", "createdAt": "2020-06-01T16:33:35Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +154,40 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n-                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"", "originalCommit": "122245b3604668b58005f43d73193f6a9bda26d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MTEwOQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433351109", "bodyText": "Same comment.", "author": "aklish", "createdAt": "2020-06-01T16:34:16Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -259,58 +244,40 @@ public void graphQLRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"GRAPHQL_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n                                 + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n                                 + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString())).toString();\n \n+                // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\"\"\n-                                + \",\\\"variables\\\":null}\")\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"),\n-                                                field(\"queryType\", \"GRAPHQL_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":{\\\\\\\"book\\\\\\\":{\\\\\\\"edges\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"node\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"node\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"node\\\\\\\":{\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}]}}}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n-                                        )\n-                                )\n-                        )\n-                ).toResponse();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\\\",\\\"queryType\\\":\\\"GRAPHQL_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"", "originalCommit": "122245b3604668b58005f43d73193f6a9bda26d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MjQyNw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r433352427", "bodyText": "I think we should restructure these tests into two kinds:\n\nOne that sets asyncAfter to 0 - and does the traditional async loop below.\nOne that sets asyncAfter to 10 - and then checks the immediate returned object (it should contain the completed result).", "author": "aklish", "createdAt": "2020-06-01T16:36:39Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -127,7 +126,9 @@ public void jsonApiRequestTests() throws InterruptedException {\n                                         attributes(\n                                                 attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n                                                 attr(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")", "originalCommit": "122245b3604668b58005f43d73193f6a9bda26d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e263d92311ed9c8c881bd5549c3697d874f52acf", "url": "https://github.com/yahoo/elide/commit/e263d92311ed9c8c881bd5549c3697d874f52acf", "message": "async after test scenarios per review comments", "committedDate": "2020-06-02T03:54:09Z", "type": "commit"}, {"oid": "3303abaa2d97afe274a36e74cce3a1fab3a27926", "url": "https://github.com/yahoo/elide/commit/3303abaa2d97afe274a36e74cce3a1fab3a27926", "message": "reduce redundancy", "committedDate": "2020-06-02T15:26:50Z", "type": "commit"}, {"oid": "c133fb2c28c86e7f6dd91ae7e857c4e3137787a8", "url": "https://github.com/yahoo/elide/commit/c133fb2c28c86e7f6dd91ae7e857c4e3137787a8", "message": "changes to async query execution", "committedDate": "2020-06-03T20:55:31Z", "type": "commit"}, {"oid": "6879ffe890bbab6a29beda6d8306730b43a2c86f", "url": "https://github.com/yahoo/elide/commit/6879ffe890bbab6a29beda6d8306730b43a2c86f", "message": "review tweaks", "committedDate": "2020-06-03T21:31:54Z", "type": "commit"}, {"oid": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "url": "https://github.com/yahoo/elide/commit/fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "message": "remove unused method", "committedDate": "2020-06-03T21:44:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0Nzg1NA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435347854", "bodyText": "Since complete is always set to COMPLETE, maybe we can just remove this extra variable.", "author": "aklish", "createdAt": "2020-06-04T15:28:37Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryDAO.java", "diffHunk": "@@ -18,19 +18,21 @@\n \n     /**\n      * This method updates the QueryStatus for AsyncQuery for given QueryStatus.\n-     * @param asyncQuery The AsyncQuery Object to be updated\n+     * @param asyncQueryId The AsyncQuery Object to be updated\n      * @param status Status from Enum QueryStatus\n      * @return AsyncQuery Updated AsyncQuery Object\n      */\n-    public AsyncQuery updateStatus(AsyncQuery asyncQuery, QueryStatus status);\n+    public AsyncQuery updateStatus(String asyncQueryId, QueryStatus status);\n \n     /**\n      * This method persists the model for AsyncQueryResult, AsyncQuery object and establishes the relationship.\n      * @param asyncQueryResult AsyncQueryResult to be associated with the AsyncQuery object\n-     * @param asyncQuery AsyncQuery object\n+     * @param asyncQueryId String\n+     * @param complete\n      * @return AsyncQuery Object\n      */\n-    public AsyncQuery updateAsyncQueryResult(AsyncQueryResult asyncQueryResult, AsyncQuery asyncQuery);\n+    public AsyncQuery updateAsyncQueryResult(AsyncQueryResult asyncQueryResult,\n+            String asyncQueryId, QueryStatus complete);", "originalCommit": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0OTkyNQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435349925", "bodyText": "It doesn't look like this test tests anything.", "author": "aklish", "createdAt": "2020-06-04T15:31:34Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -53,7 +57,7 @@ public void testAsyncQueryCleanerThreadSet() {\n     }\n \n     @Test\n-    public void testProcessQueryJsonApi() {\n+    public void testProcessQueryJsonApi() throws NoHttpResponseException, URISyntaxException {", "originalCommit": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDM0Nw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435350347", "bodyText": "Shouldn't we test the status is TIMEDOUT?", "author": "aklish", "createdAt": "2020-06-04T15:32:11Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -90,8 +90,7 @@ public void testFutureTimeoutException() throws InterruptedException, ExecutionE\n          service.executeQuery(queryObj, testUser, NO_VERSION);\n          Future<?> task = mock(Future.class);\n          when(task.get(anyLong(), any(TimeUnit.class))).thenThrow(TimeoutException.class);\n-         verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n-         verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n+         verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);", "originalCommit": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDYwMA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435350600", "bodyText": "What is the goal of this test?", "author": "aklish", "createdAt": "2020-06-04T15:32:32Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -80,7 +80,7 @@ public void testAsyncExecutorServiceSet() {\n     public void testExecuteQuery() {\n \n         service.executeQuery(queryObj, testUser, NO_VERSION);\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n+        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);", "originalCommit": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MDk5MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435350990", "bodyText": "This test isn't testing anything.", "author": "aklish", "createdAt": "2020-06-04T15:33:02Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -63,15 +67,10 @@ public void testProcessQueryJsonApi() {\n         when(response.getResponseCode()).thenReturn(200);\n         when(response.getBody()).thenReturn(\"ResponseBody\");\n \n-        queryThread.processQuery();\n-\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n-        verify(asyncQueryDao, times(1)).updateAsyncQueryResult(any(), any());\n     }\n \n     @Test\n-    public void testProcessQueryGraphQl() {\n+    public void testProcessQueryGraphQl() throws NoHttpResponseException, URISyntaxException {", "originalCommit": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MTE4OQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r435351189", "bodyText": "This test isn't testing anything.", "author": "aklish", "createdAt": "2020-06-04T15:33:19Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -81,24 +80,17 @@ public void testProcessQueryGraphQl() {\n         when(response.getResponseCode()).thenReturn(200);\n         when(response.getBody()).thenReturn(\"ResponseBody\");\n \n-        queryThread.processQuery();\n-\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.COMPLETE);\n-        verify(asyncQueryDao, times(1)).updateAsyncQueryResult(any(), any());\n     }\n \n     @Test\n-    public void testProcessQueryException() {\n+    public void testProcessQueryException() throws NoHttpResponseException, URISyntaxException {\n         String query = \"{\\\"query\\\":\\\"{ group { edges { node { name commonName description } } } }\\\",\\\"variables\\\":null}\";\n \n         when(queryObj.getQuery()).thenReturn(query);\n         when(queryObj.getQueryType()).thenReturn(QueryType.GRAPHQL_V1_0);\n         when(runner.run(query, user)).thenThrow(RuntimeException.class);\n \n         queryThread.processQuery();\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.PROCESSING);\n-        verify(asyncQueryDao, times(1)).updateStatus(queryObj, QueryStatus.FAILURE);\n+        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);", "originalCommit": "fe6d27366c50a6ff1c609d1d75974fe335e7cf14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b895d7a508beeefc5e9e3a775d03f0be723b991", "url": "https://github.com/yahoo/elide/commit/4b895d7a508beeefc5e9e3a775d03f0be723b991", "message": "Test cases", "committedDate": "2020-06-06T19:42:06Z", "type": "commit"}, {"oid": "6a136859ab2bc36715fa824c43284b73bc322965", "url": "https://github.com/yahoo/elide/commit/6a136859ab2bc36715fa824c43284b73bc322965", "message": "integration test", "committedDate": "2020-06-08T05:42:32Z", "type": "commit"}, {"oid": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "url": "https://github.com/yahoo/elide/commit/fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "message": "exception name", "committedDate": "2020-06-08T05:44:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDQ2NA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437660464", "bodyText": "log debug instead of info.", "author": "aklish", "createdAt": "2020-06-09T19:16:04Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -115,9 +115,24 @@ public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n             queryObj.setStatus(QueryStatus.FAILURE);\n         } catch (TimeoutException e) {\n             log.error(\"TimeoutException: {}\", e);\n-            AsyncQueryUpdateThread queryUpdateWorker = new AsyncQueryUpdateThread(elide,\n-                    task, queryObj, asyncQueryDao);\n-             interruptor.execute(queryUpdateWorker);\n+            if (task.isDone()) {\n+                log.info(\"task is done.\");", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDU2NQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437660565", "bodyText": "log debug.", "author": "aklish", "createdAt": "2020-06-09T19:16:15Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -115,9 +115,24 @@ public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n             queryObj.setStatus(QueryStatus.FAILURE);\n         } catch (TimeoutException e) {\n             log.error(\"TimeoutException: {}\", e);\n-            AsyncQueryUpdateThread queryUpdateWorker = new AsyncQueryUpdateThread(elide,\n-                    task, queryObj, asyncQueryDao);\n-             interruptor.execute(queryUpdateWorker);\n+            if (task.isDone()) {\n+                log.info(\"task is done.\");\n+                try {\n+                    queryObj.setResult(task.get());\n+                    queryObj.setStatus(QueryStatus.COMPLETE);\n+                } catch (InterruptedException e1) {\n+                    log.error(\"InterruptedException: {}\", e);\n+                    queryObj.setStatus(QueryStatus.FAILURE);\n+                } catch (ExecutionException e1) {\n+                    log.error(\"ExecutionException: {}\", e);\n+                    queryObj.setStatus(QueryStatus.FAILURE);\n+                }\n+            } else {\n+                log.info(\"task is not done yet.\");", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NTI2Mw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437665263", "bodyText": "Should we also verify\nverify(asyncQueryDao, times(1)).updateAsyncQueryResult(queryResultObj, query.getId());", "author": "aklish", "createdAt": "2020-06-09T19:25:11Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -72,25 +66,33 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for regular query execution before asyncAfterSeconds expires\n     @Test\n-    public void testExecuteQuery() {\n+    public void testExecuteQuery() throws ExecutionException, TimeoutException, InterruptedException {\n \n-        service.executeQuery(queryObj, testUser, NO_VERSION);\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMzQ3Nw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r438123477", "bodyText": "Execute query does not update dao after the new update thread design for no timeout scenario", "author": "ayeswarya", "createdAt": "2020-06-10T13:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NTI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NTY5MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437665690", "bodyText": "Should we also verify\nverify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\nverify(queryObj, times(1)).setStatus(QueryStatus.COMPLETE);", "author": "aklish", "createdAt": "2020-06-09T19:25:59Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -72,25 +66,33 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for regular query execution before asyncAfterSeconds expires\n     @Test\n-    public void testExecuteQuery() {\n+    public void testExecuteQuery() throws ExecutionException, TimeoutException, InterruptedException {\n \n-        service.executeQuery(queryObj, testUser, NO_VERSION);\n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.COMPLETE);\n \n     }\n \n+\n+    //Test for TimeoutException after asyncAfterSeconds\n     @Test\n-    public void testFutureTimeoutException() throws InterruptedException, ExecutionException, TimeoutException {\n-         when(queryObj.getAsyncAfterSeconds()).thenReturn(1);\n-         service.executeQuery(queryObj, testUser, NO_VERSION);\n-         Future<?> task = mock(Future.class);\n-         when(task.get(anyLong(), any(TimeUnit.class))).thenThrow(TimeoutException.class);\n-         verify(asyncQueryDao, times(0)).updateStatus(queryObj.getId(), QueryStatus.QUEUED);\n+    public void testAsyncAfterExecuteQuery() throws InterruptedException {\n+\n+        AsyncQuery query = new AsyncQuery();\n+        query.setAsyncAfterSeconds(0);\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        query.setId(id);\n+        User user = new User(null);\n+        service.executeQuery(query, user, NO_VERSION);\n+        verify(asyncQueryDao, times(1)).updateAsyncQueryResult(queryResultObj, query.getId());", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NjM4MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437666381", "bodyText": "It looked like your unit tests were verifying null was returned when a runtime exception was thrown.  However, we don't handle null here.", "author": "aklish", "createdAt": "2020-06-09T19:27:15Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -85,17 +90,50 @@ public synchronized static AsyncExecutorService getInstance() {\n      * Execute Query asynchronously.\n      * @param queryObj Query Object\n      * @param user User\n+     * @param apiVersion API Version\n      */\n     public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n+\n         QueryRunner runner = runners.get(apiVersion);\n         if (runner == null) {\n             throw new InvalidOperationException(\"Invalid API Version\");\n         }\n-\n         AsyncQueryThread queryWorker = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao, apiVersion);\n \n-        AsyncQueryInterruptThread queryInterruptWorker = new AsyncQueryInterruptThread(elide,\n-               executor.submit(queryWorker), queryObj, new Date(), maxRunTime, asyncQueryDao);\n-        interruptor.execute(queryInterruptWorker);\n+        Future<AsyncQueryResult> task = executor.submit(queryWorker);\n+\n+        try {\n+            queryObj.setStatus(QueryStatus.PROCESSING);\n+            AsyncQueryResult queryResultObj = task.get(queryObj.getAsyncAfterSeconds(), TimeUnit.SECONDS);\n+            queryObj.setResult(queryResultObj);", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2ODY4MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437668681", "bodyText": "We should have tests for the response body here.", "author": "aklish", "createdAt": "2020-06-09T19:31:44Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -127,7 +167,9 @@ public void jsonApiRequestTests() throws InterruptedException {\n                                         attributes(\n                                                 attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n                                                 attr(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"0\")", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDk4MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r437674981", "bodyText": "This doesn't match the prior test structure - where async after for 10 seconds does not require a subsequent for loop to test again and again.  Also - where is the test for 0 second async after.  Also, for 0 seconds, we should test the immediate response body.", "author": "aklish", "createdAt": "2020-06-09T19:43:38Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -233,7 +257,9 @@ public void graphQLRequestTests() throws InterruptedException {\n                                         attributes(\n                                                 attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n                                                 attr(\"queryType\", \"GRAPHQL_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")", "originalCommit": "fc48457e8f69fa8039bf3b6f3b26e01f182d2cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fae7d87056397b744fdb5b40400cd32591e26994", "url": "https://github.com/yahoo/elide/commit/fae7d87056397b744fdb5b40400cd32591e26994", "message": "commit hook and async it tests", "committedDate": "2020-06-11T19:15:53Z", "type": "commit"}, {"oid": "f52ccf8530650bc21d00bd0b95977eb4eca52b30", "url": "https://github.com/yahoo/elide/commit/f52ccf8530650bc21d00bd0b95977eb4eca52b30", "message": "Async Happy Path tests and new delay datastore", "committedDate": "2020-06-15T03:39:01Z", "type": "commit"}, {"oid": "24dbf890a7f58f944bc2b85a0c45fdf2bd17e6d2", "url": "https://github.com/yahoo/elide/commit/24dbf890a7f58f944bc2b85a0c45fdf2bd17e6d2", "message": "extend IntegrationTest", "committedDate": "2020-06-15T14:21:25Z", "type": "commit"}, {"oid": "2873532944ac6d3961f6437720eec39008e4171a", "url": "https://github.com/yahoo/elide/commit/2873532944ac6d3961f6437720eec39008e4171a", "message": "Merge branch 'elide-5.x' into CARBON-167-Embeddable", "committedDate": "2020-06-15T14:28:43Z", "type": "commit"}, {"oid": "24f937881cba02942f4773ec6dc8677c655bfe58", "url": "https://github.com/yahoo/elide/commit/24f937881cba02942f4773ec6dc8677c655bfe58", "message": "checkstyle fix", "committedDate": "2020-06-15T15:11:24Z", "type": "commit"}, {"oid": "4565c9970ff6624e5941964bfddc3c154069c366", "url": "https://github.com/yahoo/elide/commit/4565c9970ff6624e5941964bfddc3c154069c366", "message": "transient update query worker", "committedDate": "2020-06-15T15:59:15Z", "type": "commit"}, {"oid": "a4f7d39adbbf42ee709728bc5c88c06c99195aa8", "url": "https://github.com/yahoo/elide/commit/a4f7d39adbbf42ee709728bc5c88c06c99195aa8", "message": "exception catch change", "committedDate": "2020-06-15T19:23:43Z", "type": "commit"}, {"oid": "58071a32147d171592dd30b3389cd7ed21dbfc1a", "url": "https://github.com/yahoo/elide/commit/58071a32147d171592dd30b3389cd7ed21dbfc1a", "message": "unit test and comments", "committedDate": "2020-06-16T04:36:49Z", "type": "commit"}, {"oid": "a034c9260cb6ab7ef6ac58c7fa2a56d7c8726737", "url": "https://github.com/yahoo/elide/commit/a034c9260cb6ab7ef6ac58c7fa2a56d7c8726737", "message": "codacy", "committedDate": "2020-06-16T14:56:20Z", "type": "commit"}, {"oid": "74c1f7fa757f5c0f11f12c95e08ca90dfe47bde7", "url": "https://github.com/yahoo/elide/commit/74c1f7fa757f5c0f11f12c95e08ca90dfe47bde7", "message": "codacy", "committedDate": "2020-06-16T15:21:43Z", "type": "commit"}, {"oid": "f5a1bd727fa5986ee079f38b9eb54d15e50c6eb8", "url": "https://github.com/yahoo/elide/commit/f5a1bd727fa5986ee079f38b9eb54d15e50c6eb8", "message": "remove imports", "committedDate": "2020-06-17T21:56:05Z", "type": "commit"}, {"oid": "2dd100f8e64c149622cac6c51d7fe8c585d63c83", "url": "https://github.com/yahoo/elide/commit/2dd100f8e64c149622cac6c51d7fe8c585d63c83", "message": "add to remove", "committedDate": "2020-06-18T16:16:10Z", "type": "commit"}, {"oid": "6f66ef5af66fc2cf35fabac6c7b4e619f2ed1ebd", "url": "https://github.com/yahoo/elide/commit/6f66ef5af66fc2cf35fabac6c7b4e619f2ed1ebd", "message": "remove interrupt thread", "committedDate": "2020-06-18T16:17:43Z", "type": "commit"}, {"oid": "180f6b09d5033ad3384d27a1baf1c62f069b69a7", "url": "https://github.com/yahoo/elide/commit/180f6b09d5033ad3384d27a1baf1c62f069b69a7", "message": "interrrupt thread", "committedDate": "2020-06-18T16:33:02Z", "type": "commit"}, {"oid": "13d06fecb795d18d4dcdf26f59af286e0f83f2ec", "url": "https://github.com/yahoo/elide/commit/13d06fecb795d18d4dcdf26f59af286e0f83f2ec", "message": "delete interrupt thread", "committedDate": "2020-06-18T16:36:10Z", "type": "commit"}, {"oid": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "url": "https://github.com/yahoo/elide/commit/e92309e21a95a3cb7099535c9bd4e3635da7015f", "message": " add back interrupt thread", "committedDate": "2020-06-18T16:39:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNTM4MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442915380", "bodyText": "Javadoc on the class or the linter will complain.", "author": "aklish", "createdAt": "2020-06-19T15:47:13Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/hooks/CompleteQueryHook.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.hooks;\n+\n+import com.yahoo.elide.annotation.LifeCycleHookBinding;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.service.AsyncExecutorService;\n+import com.yahoo.elide.functions.LifeCycleHook;\n+import com.yahoo.elide.security.ChangeSpec;\n+import com.yahoo.elide.security.RequestScope;\n+\n+import java.util.Optional;\n+\n+public class CompleteQueryHook implements LifeCycleHook<AsyncQuery> {", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNjIwMA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442916200", "bodyText": "Why do we compare with \"string\"?", "author": "aklish", "createdAt": "2020-06-19T15:48:51Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/models/AsyncQuery.java", "diffHunk": "@@ -36,25 +41,38 @@\n     @Id\n     @Column(columnDefinition = \"varchar(36)\")\n     @Pattern(regexp = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n-            message = \"id not of pattern UUID\")\n-    private String id; //Provided.\n+    message = \"id not of pattern UUID\")\n+    private String id; //Provided by client or generated if missing on create.\n \n     private String query;  //JSON-API PATH or GraphQL payload.\n \n     private QueryType queryType; //GRAPHQL, JSONAPI\n \n+    @Transient\n+    @Max(10)\n+    @ComputedAttribute\n+    private Integer asyncAfterSeconds = 10;\n+\n+    private String requestId; //Client provided\n+\n     @UpdatePermission(expression = \"Principal is Owner AND value is Cancelled\")\n     private QueryStatus status;\n \n-    @OneToOne(mappedBy = \"query\", cascade = CascadeType.REMOVE)\n+    @Embedded\n     private AsyncQueryResult result;\n \n     @Exclude\n     private String principalName;\n \n+    @Transient\n+    private AsyncQueryUpdateThread queryUpdateWorker = null;\n+\n     @PrePersist\n     public void prePersistStatus() {\n         status = QueryStatus.QUEUED;\n+        if (id == null || id.isEmpty() || id.equalsIgnoreCase(\"string\")) {", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyODIzMg==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r443028232", "bodyText": "In swagger the default value comes as \"string\"", "author": "ayeswarya", "createdAt": "2020-06-19T20:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNjIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNjgwOQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444426809", "bodyText": "I don't think we should have this check", "author": "aklish", "createdAt": "2020-06-23T18:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNjIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODExMw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442918113", "bodyText": "Log debug - not info.", "author": "aklish", "createdAt": "2020-06-19T15:52:27Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncExecutorService.java", "diffHunk": "@@ -88,15 +92,45 @@ public synchronized static AsyncExecutorService getInstance() {\n      * @param apiVersion api version\n      */\n     public void executeQuery(AsyncQuery queryObj, User user, String apiVersion) {\n+\n         QueryRunner runner = runners.get(apiVersion);\n         if (runner == null) {\n             throw new InvalidOperationException(\"Invalid API Version\");\n         }\n-\n         AsyncQueryThread queryWorker = new AsyncQueryThread(queryObj, user, elide, runner, asyncQueryDao, apiVersion);\n+        Future<AsyncQueryResult> task = executor.submit(queryWorker);\n+        try {\n+            queryObj.setStatus(QueryStatus.PROCESSING);\n+            AsyncQueryResult queryResultObj = task.get(queryObj.getAsyncAfterSeconds(), TimeUnit.SECONDS);\n+            queryObj.setResult(queryResultObj);\n+            queryObj.setStatus(QueryStatus.COMPLETE);\n+        } catch (InterruptedException e) {\n+            log.error(\"InterruptedException: {}\", e);\n+            queryObj.setStatus(QueryStatus.FAILURE);\n+        } catch (ExecutionException e) {\n+            log.error(\"ExecutionException: {}\", e);\n+            queryObj.setStatus(QueryStatus.FAILURE);\n+        } catch (TimeoutException e) {\n+            log.error(\"TimeoutException: {}\", e);\n+            queryObj.setQueryUpdateWorker(new AsyncQueryUpdateThread(elide, task, queryObj, asyncQueryDao));\n+        } catch (Exception e) {\n+            log.error(\"Exception: {}\", e);\n+            queryObj.setStatus(QueryStatus.FAILURE);\n+        }\n \n-        AsyncQueryInterruptThread queryInterruptWorker = new AsyncQueryInterruptThread(elide,\n-               executor.submit(queryWorker), queryObj, new Date(), maxRunTime, asyncQueryDao);\n-        interruptor.execute(queryInterruptWorker);\n+    }\n+    /**\n+     * Complete Query asynchronously.\n+     * @param query AsyncQuery\n+     * @param user User\n+     * @param apiVersion API Version\n+     */\n+    public void completeQuery(AsyncQuery query, User user, String apiVersion) {\n+        if (query.getQueryUpdateWorker() != null) {\n+            log.info(\"Task has not completed\");\n+            updater.execute(query.getQueryUpdateWorker());\n+        } else {\n+            log.info(\"Task has completed\");", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODU0NQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442918545", "bodyText": "Is this class still used?  Can we remove it?", "author": "aklish", "createdAt": "2020-06-19T15:53:14Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/service/AsyncQueryInterruptThread.java", "diffHunk": "@@ -47,9 +47,8 @@ public void run() {\n     protected void interruptQuery() {\n         try {\n             long interruptTimeMillies = calculateTimeOut(maxRunTimeMinutes, submittedOn);\n-\n+            log.debug(\"Waiting on the future with the given timeout for {}\", interruptTimeMillies);", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDc0MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442984741", "bodyText": "I had removed this in my pr . But i keep getting a merge conflict. I even tried adding it back and removing it. Did not help. I eventually added it back to resolve the merge conflict.", "author": "ayeswarya", "createdAt": "2020-06-19T18:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNzIxNA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444427214", "bodyText": "Remove and rebase instead of merge?  We should be able to remove an unused file.", "author": "aklish", "createdAt": "2020-06-23T18:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzOTIyMw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444439223", "bodyText": "I have since removed this file", "author": "ayeswarya", "createdAt": "2020-06-23T18:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxODU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyNjEzNg==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442926136", "bodyText": "THere is no reason to make these mocks global - they can just be created in each test function.", "author": "aklish", "createdAt": "2020-06-19T16:06:54Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -27,29 +31,38 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n \n @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n public class AsyncExecutorServiceTest {\n \n     private AsyncExecutorService service;\n     private Elide elide;\n     private AsyncQueryDAO asyncQueryDao;\n+    private AsyncQuery queryObj1;\n+    private AsyncQuery queryObj2;\n+    private AsyncQuery queryObj3;\n+    private User testUser;\n+    private AsyncQueryUpdateThread asyncQueryUpdateThread;\n \n     @BeforeAll\n-    public void setupMocks() {\n+    public void setupMockElide() {\n         HashMapDataStore inMemoryStore = new HashMapDataStore(AsyncQuery.class.getPackage());\n         Map<String, Class<? extends Check>> checkMappings = new HashMap<>();\n \n         elide = new Elide(\n                 new ElideSettingsBuilder(inMemoryStore)\n                         .withEntityDictionary(new EntityDictionary(checkMappings))\n                         .build());\n-\n         asyncQueryDao = mock(DefaultAsyncQueryDAO.class);\n-\n+        queryObj1 = mock(AsyncQuery.class);", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODIzNw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442928237", "bodyText": "This class can just extend TransactionWrapper and remove a lot of boilerplate.", "author": "aklish", "createdAt": "2020-06-19T16:11:17Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncDelayStoreTransaction.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.async.integration.tests;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.DataStoreTransactionImplementation;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+/**\n+ * Data Store Transaction that wraps another transaction and provides delay for testing Async queries.\n+ */\n+@Slf4j\n+public class AsyncDelayStoreTransaction extends DataStoreTransactionImplementation implements DataStoreTransaction {", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODc5MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442928791", "bodyText": "Maybe make this a constructor parameter.  Also, instead of looking for specific types - why don't you have some other. mechanism to trigger the sleep (like a toggle function to turn it on or off)?", "author": "aklish", "createdAt": "2020-06-19T16:12:31Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncDelayStoreTransaction.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+package com.yahoo.elide.async.integration.tests;\n+\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.DataStoreTransactionImplementation;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+/**\n+ * Data Store Transaction that wraps another transaction and provides delay for testing Async queries.\n+ */\n+@Slf4j\n+public class AsyncDelayStoreTransaction extends DataStoreTransactionImplementation implements DataStoreTransaction {\n+\n+    private final DataStoreTransaction tx;\n+\n+    public AsyncDelayStoreTransaction(DataStoreTransaction tx) {\n+            this.tx = tx;\n+    }\n+    @Override\n+    public void close() throws IOException {\n+        tx.close();\n+    }\n+\n+    @Override\n+    public void save(Object entity, RequestScope scope) {\n+        tx.save(entity, scope);\n+\n+    }\n+\n+    @Override\n+    public void delete(Object entity, RequestScope scope) {\n+        tx.delete(entity, scope);\n+    }\n+\n+    @Override\n+    public void flush(RequestScope scope) {\n+        tx.flush(scope);\n+    }\n+\n+    @Override\n+    public void commit(RequestScope scope) {\n+        tx.commit(scope);\n+    }\n+\n+    @Override\n+    public void createObject(Object entity, RequestScope scope) {\n+        tx.createObject(entity, scope);\n+    }\n+    @Override\n+    public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n+        try {\n+            log.debug(\"LoadObjects Sleep for delay test\");\n+            if (entityProjection.getType().toString().trim().equals(\"class example.Book\")) {\n+                Thread.sleep(5000);", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTE4NA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442929184", "bodyText": "What calls this?", "author": "aklish", "createdAt": "2020-06-19T16:13:25Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -72,6 +72,15 @@ public AsyncIT() {\n         super(AsyncIntegrationTestApplicationResourceConfig.class, JsonApiEndpoint.class.getPackage().getName());\n     }\n \n+    /**\n+     * Returns an initialized data store.\n+     *\n+     * @return an initialized data store.\n+     */\n+    public static DataStore getDataStore() {", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxOTc2OQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r443919769", "bodyText": "It is called from IntegrationTest.java", "author": "ayeswarya", "createdAt": "2020-06-23T02:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyODU3NA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444428574", "bodyText": "Not sure how I feel about using method hiding here.  I think we need to find another way to wire this up.", "author": "aklish", "createdAt": "2020-06-23T18:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MTQ3Nw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444491477", "bodyText": "Created an AsyncIntegrationTest to extend AsyncIT from.", "author": "ayeswarya", "createdAt": "2020-06-23T20:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTYyMg==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442929622", "bodyText": "No need to issue another query here - combine the response body checking with body assertions above.", "author": "aklish", "createdAt": "2020-06-19T16:14:26Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -111,7 +120,149 @@ public void init() {\n     }\n \n     /**\n-     * Various tests for a JSONAPI query as a Async Request.\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath1() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf830e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"3\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf830e\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyOTgzMA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442929830", "bodyText": "This should be a separate test.", "author": "aklish", "createdAt": "2020-06-19T16:14:57Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -111,7 +120,149 @@ public void init() {\n     }\n \n     /**\n-     * Various tests for a JSONAPI query as a Async Request.\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath1() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf830e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"3\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf830e\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf830e\")\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+                // Validate GraphQL Response\n+                String responseGraphQL = given()", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDIwNg==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442930206", "bodyText": "There is no need to issue a separate request here. Combine these body validations with the ones above.", "author": "aklish", "createdAt": "2020-06-19T16:15:49Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +313,180 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDM0MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442930341", "bodyText": "Make GraphQL a separate test.", "author": "aklish", "createdAt": "2020-06-19T16:16:09Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +313,180 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDc1Ng==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442930756", "bodyText": "I don't understand the validate GraphQL response here.  Why are we doing this for each test?", "author": "aklish", "createdAt": "2020-06-19T16:17:04Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -153,59 +313,180 @@ public void jsonApiRequestTests() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n-                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"\n+                        + \"\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\\\",\"\n+                        + \"\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":218}}}]}}}\";\n+\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 10.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestAsyncAfterTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf827d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf827d\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+    }\n+\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath1() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf828e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n+                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"3\")\n                                         )\n                                 )\n-                        )\n-                ).toResponse();\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf828e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf828e\");\n+\n+            // If Async Query is created and completed then validate results\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf828e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"GRAPHQL_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n+\n+                // Validate AsyncQueryResult Response\n+                given()\n+                        .accept(\"application/vnd.api+json\")\n+                        .get(\"/asyncQuery/edc4a871-dff2-4054-804e-d80075cf828e\")\n+                        .then()\n+                        .statusCode(HttpStatus.SC_OK)\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf828e\"))\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n+                                + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n+                                + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString())).toString();\n+\n+                // Validate GraphQL Response", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4MjIzMA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r443782230", "bodyText": "This part is querying for the asyncquery in graphql and checking for the embedded result. There are separate json api and graphql endpoint tests in AsyncIT", "author": "ayeswarya", "createdAt": "2020-06-22T19:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTE0OQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442931149", "bodyText": "How is this test different than the last one for 7 seconds?", "author": "aklish", "createdAt": "2020-06-19T16:17:55Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -217,9 +498,91 @@ public void jsonApiRequestTests() throws InterruptedException {\n             }\n         }\n     }\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath2() throws InterruptedException {\n \n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf829e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n+                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf829e\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n+                        + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n+                        + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString())).toString();\n+\n+    }\n     /**\n-     * Various tests for a GRAPHQL query as a Async Request.\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 10.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLRequestAsyncAfterTests() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf827e\"),\n+                                        attributes(\n+                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n+                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NTQ5MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442985490", "bodyText": "I initially had 0 and 10 seconds tests. I added 3 and 7 seconds tests to them. Based on your comments now I will remove the 10 s test.", "author": "ayeswarya", "createdAt": "2020-06-19T18:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjExOQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932119", "bodyText": "There is no need to issue a separate request here.", "author": "aklish", "createdAt": "2020-06-19T16:20:04Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -82,59 +81,34 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5Njc1Ng==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r443796756", "bodyText": "removed extra requests", "author": "ayeswarya", "createdAt": "2020-06-22T20:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjM1OA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932358", "bodyText": "This should be broken into a separate test.", "author": "aklish", "createdAt": "2020-06-19T16:20:39Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/test/java/example/tests/AsyncTest.java", "diffHunk": "@@ -82,59 +81,34 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/json/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"group\\\",\\\"id\\\":\\\"com.example.repository\\\",\\\"attributes\\\":\"\n                                 + \"{\\\"commonName\\\":\\\"Example Repository\\\",\\\"deprecated\\\":false,\\\"description\\\":\\\"The code for this project\\\"},\"\n-                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                                + \"\\\"relationships\\\":{\\\"products\\\":{\\\"data\\\":[]}}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n-                                + \"\\\"variables\\\":null}\")\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n+                                + \"\\\"variables\\\":null }\")", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjY1MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932651", "bodyText": "There is no reason to issue a second request here.", "author": "aklish", "createdAt": "2020-06-19T16:21:13Z", "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -298,62 +291,33 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMjc2Mg==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r442932762", "bodyText": "Validating GraphQL should be a separate test.", "author": "aklish", "createdAt": "2020-06-19T16:21:28Z", "path": "elide-standalone/src/test/java/example/ElideStandaloneTest.java", "diffHunk": "@@ -298,62 +291,33 @@ public void testAsyncApiEndpoint() throws InterruptedException {\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"));\n \n                 // Validate AsyncQueryResult Response\n                 given()\n                         .accept(\"application/vnd.api+json\")\n-                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+                        .get(\"/api/v1/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\")\n                         .then()\n                         .statusCode(com.yahoo.elide.core.HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n-                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\"\n-                                + \"\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n-                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\"\n-                                + \"\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"post\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"abusiveContent\\\":false,\"\n+                                + \"\\\"content\\\":\\\"This is my first post. woot.\\\",\\\"date\\\":\\\"2019-01-01T00:00Z\\\"}}]}\"));\n \n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n                         .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"", "originalCommit": "e92309e21a95a3cb7099535c9bd4e3635da7015f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "url": "https://github.com/yahoo/elide/commit/d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "message": "Review comments", "committedDate": "2020-06-23T05:32:30Z", "type": "commit"}, {"oid": "d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "url": "https://github.com/yahoo/elide/commit/d4f942313a0d7ba67cdd0e6ec46371126e6b8673", "message": "Review comments", "committedDate": "2020-06-23T05:32:30Z", "type": "forcePushed"}, {"oid": "e57df913949ed63471537ed64d4dbe63612d34a3", "url": "https://github.com/yahoo/elide/commit/e57df913949ed63471537ed64d4dbe63612d34a3", "message": "add interrupt", "committedDate": "2020-06-23T14:43:50Z", "type": "commit"}, {"oid": "e8175e2483db8fcabf5bc394144024d80fa7bcfb", "url": "https://github.com/yahoo/elide/commit/e8175e2483db8fcabf5bc394144024d80fa7bcfb", "message": "remove interrupt", "committedDate": "2020-06-23T14:44:50Z", "type": "commit"}, {"oid": "84188949db3580a15ac315d67494428bb24bce00", "url": "https://github.com/yahoo/elide/commit/84188949db3580a15ac315d67494428bb24bce00", "message": "include interrupt thread to overcome merge conflict", "committedDate": "2020-06-23T14:54:34Z", "type": "commit"}, {"oid": "c8d20922e60105a722df6133d014cab410f413a6", "url": "https://github.com/yahoo/elide/commit/c8d20922e60105a722df6133d014cab410f413a6", "message": "Merge branch 'elide-5.x' of github.com:yahoo/elide into CARBON-167-Embeddable", "committedDate": "2020-06-23T15:00:47Z", "type": "commit"}, {"oid": "295bb2db4e1510b7fcfce43f1911b1738536c0ac", "url": "https://github.com/yahoo/elide/commit/295bb2db4e1510b7fcfce43f1911b1738536c0ac", "message": "merge 5.x", "committedDate": "2020-06-23T15:21:10Z", "type": "commit"}, {"oid": "44f25c8e3d95be214ccddfdfee83ab7790784354", "url": "https://github.com/yahoo/elide/commit/44f25c8e3d95be214ccddfdfee83ab7790784354", "message": "test changes", "committedDate": "2020-06-23T17:28:06Z", "type": "commit"}, {"oid": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "url": "https://github.com/yahoo/elide/commit/8a2111c39060a2f19d984e923dfbd65e153ab38e", "message": "remove asyncinterruptthread", "committedDate": "2020-06-23T18:44:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2ODc5OA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444468798", "bodyText": "YOu could probably combine this test with the test for 3 seconds by writing a common function and passing it some arguments (like the sleep time).", "author": "aklish", "createdAt": "2020-06-23T19:51:46Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -150,64 +172,280 @@ public void jsonApiRequestTests() throws InterruptedException {\n                 response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n                         .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 0.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestTests() throws InterruptedException {", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2OTE5MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444469190", "bodyText": "I feel like this test is basically the same as the 7 second one - we can remove this one I think.", "author": "aklish", "createdAt": "2020-06-23T19:52:30Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -150,64 +172,280 @@ public void jsonApiRequestTests() throws InterruptedException {\n                 response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n                         .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 0.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"0\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+                break;\n+            }\n+            i++;\n \n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test JSON Api Async Query Response.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiAsyncQyeryResponse() throws InterruptedException {", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2OTQ2OA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444469468", "bodyText": "Why don't we create this with GraphQL instead of JSON-API?", "author": "aklish", "createdAt": "2020-06-23T19:53:06Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -150,64 +172,280 @@ public void jsonApiRequestTests() throws InterruptedException {\n                 response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                        .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf830e\"))\n                         .body(\"data.type\", equalTo(\"asyncQuery\"))\n                         .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n                         .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                                + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                                + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                                + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d/result\")\n+    /**\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 0.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiRequestTests() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"0\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"PROCESSING\"))\n+                .body(\"data.attributes.result.contentLength\", nullValue())\n+                .body(\"data.attributes.result.responseBody\", nullValue())\n+                .body(\"data.attributes.result.httpStatus\", nullValue())\n+                .body(\"data.attributes.result.resultType\", nullValue());\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n+\n+                // Validate AsyncQuery Response\n+                response\n                         .then()\n                         .statusCode(HttpStatus.SC_OK)\n                         .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                        .body(\"data.attributes.queryType\", equalTo(\"JSONAPI_V1_0\"))\n+                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                        .body(\"data.attributes.result.contentLength\", notNullValue())\n+                        .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n                                 + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n                                 + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n                                 + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"));\n+                        .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                        .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+                break;\n+            }\n+            i++;\n \n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test JSON Api Async Query Response.\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void jsonApiAsyncQyeryResponse() throws InterruptedException {\n+\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)\n+                .body(\n+                        data(\n+                                resource(\n+                                        type(\"asyncQuery\"),\n+                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\"),\n+                                        attributes(\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"10\")\n+                                        )\n+                                )\n+                        ).toJSON())\n+                .when()\n+                .post(\"/asyncQuery\")\n+                .then()\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+\n+        int i = 0;\n+        while (i < 1000) {\n+            Thread.sleep(10);\n+            Response response = given()\n+                    .accept(\"application/vnd.api+json\")\n+                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\");\n+\n+            // If Async Query is created and completed\n+            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n                 // Validate GraphQL Response\n                 String responseGraphQL = given()\n                         .contentType(MediaType.APPLICATION_JSON)\n                         .accept(MediaType.APPLICATION_JSON)\n-                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\\\\\\\"]) \"\n+                        .body(\"{\\\"query\\\":\\\"{ asyncQuery(ids: [\\\\\\\"ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\\\\\\\"]) \"\n                                 + \"{ edges { node { id queryType status result \"\n-                                + \"{ edges { node { id responseBody status} } } } } } }\\\",\"\n+                                + \"{ responseBody httpStatus resultType contentLength } } } } }\\\",\"\n                                 + \"\\\"variables\\\":null}\")\n                         .post(\"/graphQL\")\n                         .asString();\n+                String expectedResponse = \"{\\\"data\\\":{\\\"asyncQuery\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"id\\\":\\\"ba31ca4e-ed8f-4be0-a0f3-12088ea9265d\\\",\\\"queryType\\\":\\\"JSONAPI_V1_0\\\",\\\"status\\\":\\\"COMPLETE\\\",\"\n+                        + \"\\\"result\\\":{\\\"responseBody\\\":\\\"{\\\\\\\"data\\\\\\\":[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n+                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\\\",\"\n+                        + \"\\\"httpStatus\\\":200,\\\"resultType\\\":\\\"EMBEDDED\\\",\\\"contentLength\\\":218}}}]}}}\";\n+                assertEquals(expectedResponse, responseGraphQL);\n+                break;\n+            }\n+            i++;\n+\n+            if (i == 1000) {\n+                fail(\"Async Query not completed.\");\n+            }\n+        }\n+\n+    }\n+\n+\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 3.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath1() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n \n-                String expectedResponse = document(\n-                        selections(\n-                                field(\n-                                        \"asyncQuery\",\n-                                        selections(\n-                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                field(\"queryType\", \"JSONAPI_V1_0\"),\n-                                                field(\"status\", \"COMPLETE\"),\n-                                                field(\"result\",\n-                                                        selections(\n-                                                                field(\"id\", \"ba31ca4e-ed8f-4be0-a0f3-12088fa9263d\"),\n-                                                                field(\"responseBody\", \"{\\\\\\\"data\\\\\\\":\"\n-                                                                        + \"[{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"For Whom the Bell Tolls\\\\\\\"}}\"\n-                                                                        + \",{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Song of Ice and Fire\\\\\\\"}},\"\n-                                                                        + \"{\\\\\\\"type\\\\\\\":\\\\\\\"book\\\\\\\",\\\\\\\"id\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"attributes\\\\\\\":{\\\\\\\"title\\\\\\\":\\\\\\\"Ender's Game\\\\\\\"}}]}\"),\n-                                                                field(\"status\", 200)\n-                                                        ))\n+        //Create Async Request\n+        given()\n+                .contentType(JSONAPI_CONTENT_TYPE)", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzM2MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444487360", "bodyText": "Its probably not worth mocking objects like beans - as they really don't have any behavior - they are just POJOs.  The tests will be less brittle if you initialize a query object for each test.", "author": "aklish", "createdAt": "2020-06-23T20:28:11Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -58,17 +64,50 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for executor hook execution\n     @Test\n-    public void testExecuteQuery() {\n-        AsyncQuery queryObj = mock(AsyncQuery.class);\n-        User testUser = mock(User.class);\n+    public void testExecuteQueryFail() throws ExecutionException, TimeoutException, InterruptedException {\n+\n+       AsyncQuery queryObj = mock(AsyncQuery.class);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.FAILURE);\n+    }\n \n+    //Test for executor hook execution\n+    @Test\n+    public void testExecuteQueryComplete() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        ElideResponse response = mock(ElideResponse.class);\n+        when(queryObj.getQuery()).thenReturn(query);", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NTQ3OQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444995479", "bodyText": "I had to mock the queryObj for doing Mockito verify calls.", "author": "ayeswarya", "createdAt": "2020-06-24T15:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NzM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4ODM3Nw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444488377", "bodyText": "I don't understand why we are mocking the response here (or anywhere else).  It looks like this is dead code.  I would remove it.", "author": "aklish", "createdAt": "2020-06-23T20:30:20Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -58,17 +64,50 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for executor hook execution\n     @Test\n-    public void testExecuteQuery() {\n-        AsyncQuery queryObj = mock(AsyncQuery.class);\n-        User testUser = mock(User.class);\n+    public void testExecuteQueryFail() throws ExecutionException, TimeoutException, InterruptedException {\n+\n+       AsyncQuery queryObj = mock(AsyncQuery.class);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.FAILURE);\n+    }\n \n+    //Test for executor hook execution\n+    @Test\n+    public void testExecuteQueryComplete() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        ElideResponse response = mock(ElideResponse.class);", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NTU2NQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444995565", "bodyText": "removed", "author": "ayeswarya", "createdAt": "2020-06-24T15:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4ODM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4OTc2MQ==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444489761", "bodyText": "What about the final state of the query?", "author": "aklish", "createdAt": "2020-06-23T20:32:58Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncExecutorServiceTest.java", "diffHunk": "@@ -58,17 +64,50 @@ public void testAsyncExecutorServiceSet() {\n         assertNotNull(service.getRunners());\n         assertEquals(60, service.getMaxRunTime());\n         assertNotNull(service.getExecutor());\n-        assertNotNull(service.getInterruptor());\n+        assertNotNull(service.getUpdater());\n         assertEquals(asyncQueryDao, service.getAsyncQueryDao());\n     }\n \n+    //Test for executor hook execution\n     @Test\n-    public void testExecuteQuery() {\n-        AsyncQuery queryObj = mock(AsyncQuery.class);\n-        User testUser = mock(User.class);\n+    public void testExecuteQueryFail() throws ExecutionException, TimeoutException, InterruptedException {\n+\n+       AsyncQuery queryObj = mock(AsyncQuery.class);\n+       when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n+       service.executeQuery(queryObj, testUser, NO_VERSION);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+       verify(queryObj, times(1)).setStatus(QueryStatus.FAILURE);\n+    }\n \n+    //Test for executor hook execution\n+    @Test\n+    public void testExecuteQueryComplete() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n+        ElideResponse response = mock(ElideResponse.class);\n+        when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getId()).thenReturn(id);\n+        when(queryObj.getQueryType()).thenReturn(QueryType.JSONAPI_V1_0);\n+        when(response.getResponseCode()).thenReturn(200);\n+        when(response.getBody()).thenReturn(\"ResponseBody\");\n+        when(queryObj.getAsyncAfterSeconds()).thenReturn(10);\n         service.executeQuery(queryObj, testUser, NO_VERSION);\n+        verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+        verify(queryObj, times(1)).setStatus(QueryStatus.COMPLETE);\n+    }\n \n-        verify(asyncQueryDao, times(0)).updateStatus(queryObj, QueryStatus.QUEUED);\n+    //Test for complete hook execution\n+    @Test\n+    public void testCompleteQuery() throws InterruptedException {\n+\n+        AsyncQuery queryObj = mock(AsyncQuery.class);\n+        when(queryObj.getAsyncAfterSeconds()).thenReturn(0);\n+        when(queryObj.getQueryUpdateWorker()).thenReturn(asyncQueryUpdateThread);\n+        service.executeQuery(queryObj, testUser, NO_VERSION);\n+        service.completeQuery(queryObj, testUser, NO_VERSION);\n+        verify(queryObj, times(1)).setStatus(QueryStatus.PROCESSING);\n+        verify(queryObj, times(2)).getQueryUpdateWorker();", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNzM4OA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445037388", "bodyText": "Because of the mocking I was only able to test until this. The AsyncQueryUpdateThreadTest.java tests that part of the execution.", "author": "ayeswarya", "createdAt": "2020-06-24T16:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4OTc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDA3MA==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444490070", "bodyText": "Don't mock queryObj", "author": "aklish", "createdAt": "2020-06-23T20:33:35Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -54,66 +57,40 @@ public void testAsyncQueryCleanerThreadSet() {\n     }\n \n     @Test\n-    public void testProcessQueryJsonApi() {\n+    public void testProcessQueryJsonApi() throws NoHttpResponseException, URISyntaxException {\n         String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n         ElideResponse response = mock(ElideResponse.class);\n \n         when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getId()).thenReturn(id);", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDY2Ng==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r444490666", "bodyText": "Don't mock reponse - just create and use a response object (another POJO)", "author": "aklish", "createdAt": "2020-06-23T20:34:50Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -54,66 +57,40 @@ public void testAsyncQueryCleanerThreadSet() {\n     }\n \n     @Test\n-    public void testProcessQueryJsonApi() {\n+    public void testProcessQueryJsonApi() throws NoHttpResponseException, URISyntaxException {\n         String query = \"/group?sort=commonName&fields%5Bgroup%5D=commonName,description\";\n+        String id = \"edc4a871-dff2-4054-804e-d80075cf827d\";\n         ElideResponse response = mock(ElideResponse.class);\n \n         when(queryObj.getQuery()).thenReturn(query);\n+        when(queryObj.getId()).thenReturn(id);\n         when(queryObj.getQueryType()).thenReturn(QueryType.JSONAPI_V1_0);\n         when(elide.get(anyString(), any(), any(), anyString())).thenReturn(response);\n         when(response.getResponseCode()).thenReturn(200);\n         when(response.getBody()).thenReturn(\"ResponseBody\");\n \n-        queryThread.processQuery();\n+        queryResultObj = queryThread.processQuery();", "originalCommit": "8a2111c39060a2f19d984e923dfbd65e153ab38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2293c8799763540fdab17e9da96b8b8d523725b5", "url": "https://github.com/yahoo/elide/commit/2293c8799763540fdab17e9da96b8b8d523725b5", "message": "graphql tests and remove mocking for queryObj", "committedDate": "2020-06-24T17:28:21Z", "type": "commit"}, {"oid": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "url": "https://github.com/yahoo/elide/commit/c9a3f70175b53fae26572d2b72dabbaa215cb1df", "message": "dsl generation of queries for happy path graphql tests", "committedDate": "2020-06-25T18:52:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4MDgyNw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445780827", "bodyText": "Can we remove the commented out code?", "author": "aklish", "createdAt": "2020-06-25T19:11:41Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/service/AsyncQueryThreadTest.java", "diffHunk": "@@ -28,11 +28,11 @@\n \n public class AsyncQueryThreadTest {\n \n-    private AsyncQueryThread queryThread;\n+    //private AsyncQueryThread queryThread;\n     private User user;\n     private Elide elide;\n     private QueryRunner runner;\n-    private AsyncQuery queryObj;\n+    //private AsyncQuery queryObj;", "originalCommit": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NDYwMw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445784603", "bodyText": "Let's move this logic to a new class EnumFieldSerializer", "author": "aklish", "createdAt": "2020-06-25T19:18:59Z", "path": "elide-contrib/elide-test-helpers/src/main/java/com/yahoo/elide/contrib/testhelpers/graphql/VariableFieldSerializer.java", "diffHunk": "@@ -50,12 +50,17 @@\n public class VariableFieldSerializer extends JsonSerializer<String> {\n \n     private static final String VARIABLE_SIGN = \"$\";\n+    private static final String ENUM_SIGN = \"#\";\n \n     @Override\n     public void serialize(String value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+\n         if (value.startsWith(VARIABLE_SIGN)) {\n             // this is a variable\n             gen.writeRawValue(value);\n+        } else if (value.startsWith(ENUM_SIGN)) {", "originalCommit": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NTQ1Ng==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445785456", "bodyText": "This code duplicates a lot of the code in IntegrationTest.  Can it just extend it instead so we are only change a tiny bit?", "author": "aklish", "createdAt": "2020-06-25T19:20:38Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIntegrationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2019, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.integration.tests;\n+\n+import static io.restassured.RestAssured.get;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.yahoo.elide.async.integration.tests.framework.AsyncIntegrationTestApplicationResourceConfig;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.HttpStatus;\n+import com.yahoo.elide.core.datastore.test.DataStoreTestHarness;\n+import com.yahoo.elide.initialization.InMemoryDataStoreHarness;\n+import com.yahoo.elide.jsonapi.JsonApiMapper;\n+import com.yahoo.elide.jsonapi.models.JsonApiDocument;\n+import com.yahoo.elide.resources.JsonApiEndpoint;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.glassfish.jersey.server.ResourceConfig;\n+import org.glassfish.jersey.servlet.ServletContainer;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import io.restassured.RestAssured;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+\n+/**\n+ * Async Integration test initializer.  Tests are intended to run sequentially (so they don't stomp on each other's data).\n+ */\n+@Slf4j\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public abstract class AsyncIntegrationTest {", "originalCommit": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MTU0Nw==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445791547", "bodyText": "Let's consolidate this request with the next request (there is no need to separate out the status call from the other bits).", "author": "aklish", "createdAt": "2020-06-25T19:32:55Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -219,98 +214,134 @@ public void jsonApiRequestTests() throws InterruptedException {\n     }\n \n     /**\n-     * Various tests for a GRAPHQL query as a Async Request.\n+     * Various tests for a JSONAPI query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n      */\n     @Test\n-    public void graphQLRequestTests() throws InterruptedException {\n+    public void jsonApiHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+\n+        //Create Async Request\n         given()\n                 .contentType(JSONAPI_CONTENT_TYPE)\n                 .body(\n                         data(\n                                 resource(\n                                         type(\"asyncQuery\"),\n-                                        id(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"),\n+                                        id(\"edc4a871-dff2-4054-804e-d80075cf831f\"),\n                                         attributes(\n-                                                attr(\"query\", \"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\"),\n-                                                attr(\"queryType\", \"GRAPHQL_V1_0\"),\n-                                                attr(\"status\", \"QUEUED\")\n+                                                attr(\"query\", \"/book?sort=genre&fields%5Bbook%5D=title\"),\n+                                                attr(\"queryType\", \"JSONAPI_V1_0\"),\n+                                                attr(\"status\", \"QUEUED\"),\n+                                                attr(\"requestId\", \"1001\"),\n+                                                attr(\"asyncAfterSeconds\", \"7\")\n                                         )\n                                 )\n                         ).toJSON())\n                 .when()\n                 .post(\"/asyncQuery\")\n                 .then()\n-                .statusCode(org.apache.http.HttpStatus.SC_CREATED);\n+                .statusCode(org.apache.http.HttpStatus.SC_CREATED)\n+                .body(\"data.id\", equalTo(\"edc4a871-dff2-4054-804e-d80075cf831f\"))\n+                .body(\"data.type\", equalTo(\"asyncQuery\"))\n+                .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n+                .body(\"data.attributes.result.contentLength\", notNullValue())\n+                .body(\"data.attributes.result.responseBody\", equalTo(\"{\\\"data\\\":\"\n+                        + \"[{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"3\\\",\\\"attributes\\\":{\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}\"\n+                        + \",{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"2\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n+                        + \"{\\\"type\\\":\\\"book\\\",\\\"id\\\":\\\"1\\\",\\\"attributes\\\":{\\\"title\\\":\\\"Ender's Game\\\"}}]}\"))\n+                .body(\"data.attributes.result.httpStatus\", equalTo(200))\n+                .body(\"data.attributes.result.resultType\", equalTo(ResultType.EMBEDDED.toString()));\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n+    }\n \n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 0.\n+     * Happy Path Test Scenario 1\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath1() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        AsyncQuery queryObj = new AsyncQuery();\n+         queryObj.setId(\"edc4a871-dff2-4054-804e-d80075cf828e\");\n+         queryObj.setAsyncAfterSeconds(0);\n+         queryObj.setQueryType(\"#GRAPHQL_V1_0\");\n+         queryObj.setStatus(\"#QUEUED\");\n+         queryObj.setQuery(\"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\");\n+         String graphQLRequest = document(\n+                 mutation(\n+                         selection(\n+                                 field(\n+                                         \"asyncQuery\",\n+                                         arguments(\n+                                                 argument(\"op\", \"UPSERT\"),\n+                                                 argument(\"data\", queryObj, UNQUOTED_VALUE)\n+                                         ),\n+                                         selections(\n+                                                 field(\"id\"),\n+                                                 field(\"query\"),\n+                                                 field(\"queryType\"),\n+                                                 field(\"status\")\n+                                         )\n+                                 )\n+                         )\n+                 )\n+         ).toQuery();\n+\n+         JsonNode graphQLJsonNode = toJsonNode(graphQLRequest, null);\n+         given()\n+         .contentType(MediaType.APPLICATION_JSON)\n+         .accept(MediaType.APPLICATION_JSON)\n+         .body(graphQLJsonNode)\n+         .post(\"/graphQL\")\n+         .then()\n+         .statusCode(org.apache.http.HttpStatus.SC_OK);\n+\n+        AsyncDelayStoreTransaction.sleep = false;\n         int i = 0;\n         while (i < 1000) {\n             Thread.sleep(10);\n-            Response response = given()\n-                    .accept(\"application/vnd.api+json\")\n-                    .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\");\n-\n-            // If Async Query is created and completed then validate results\n-            if (response.jsonPath().getString(\"data.attributes.status\").equals(\"COMPLETE\")) {\n-\n-                // Validate AsyncQuery Response\n-                response\n-                        .then()\n-                        .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n-                        .body(\"data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.attributes.queryType\", equalTo(\"GRAPHQL_V1_0\"))\n-                        .body(\"data.attributes.status\", equalTo(\"COMPLETE\"))\n-                        .body(\"data.relationships.result.data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.relationships.result.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n-\n-                // Validate AsyncQueryResult Response\n-                given()\n-                        .accept(\"application/vnd.api+json\")\n-                        .get(\"/asyncQuery/ba31ca4e-ed8f-4be0-a0f3-12088fa9263c/result\")\n-                        .then()\n-                        .statusCode(HttpStatus.SC_OK)\n-                        .body(\"data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"))\n-                        .body(\"data.type\", equalTo(\"asyncQueryResult\"))\n-                        .body(\"data.attributes.contentLength\", notNullValue())\n-                        .body(\"data.attributes.responseBody\", equalTo(\"{\\\"data\\\":{\\\"book\\\":{\\\"edges\\\":\"\n-                                + \"[{\\\"node\\\":{\\\"id\\\":\\\"1\\\",\\\"title\\\":\\\"Ender's Game\\\"}},\"\n-                                + \"{\\\"node\\\":{\\\"id\\\":\\\"2\\\",\\\"title\\\":\\\"Song of Ice and Fire\\\"}},\"\n-                                + \"{\\\"node\\\":{\\\"id\\\":\\\"3\\\",\\\"title\\\":\\\"For Whom the Bell Tolls\\\"}}]}}}\"))\n-                        .body(\"data.attributes.status\", equalTo(200))\n-                        .body(\"data.relationships.query.data.type\", equalTo(\"asyncQuery\"))\n-                        .body(\"data.relationships.query.data.id\", equalTo(\"ba31ca4e-ed8f-4be0-a0f3-12088fa9263c\"));\n-\n+            String graphQLStatus = document(\n+                    selection(\n+                            field(\n+                                    \"asyncQuery\",\n+                                    arguments(\n+                                            argument(\"ids\", \"\\\"edc4a871-dff2-4054-804e-d80075cf828e\\\"\")\n+                                    ),\n+                                    selections(\n+                                            field(\"status\")", "originalCommit": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MjU0Ng==", "url": "https://github.com/yahoo/elide/pull/1353#discussion_r445792546", "bodyText": "Spacing is off here.", "author": "aklish", "createdAt": "2020-06-25T19:34:59Z", "path": "elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java", "diffHunk": "@@ -322,9 +353,73 @@ public void graphQLRequestTests() throws InterruptedException {\n             }\n         }\n     }\n+    /**\n+     * Test for a GraphQL query as a Async Request with asyncAfterSeconds value set to 7.\n+     * Happy Path Test Scenario 2\n+     * @throws InterruptedException\n+     */\n+    @Test\n+    public void graphQLHappyPath2() throws InterruptedException {\n+\n+        AsyncDelayStoreTransaction.sleep = true;\n+        AsyncQuery queryObj = new AsyncQuery();\n+         queryObj.setId(\"edc4a871-dff2-4054-804e-d80075cf829e\");\n+         queryObj.setAsyncAfterSeconds(7);\n+         queryObj.setQueryType(\"#GRAPHQL_V1_0\");\n+         queryObj.setStatus(\"#QUEUED\");\n+         queryObj.setQuery(\"{\\\"query\\\":\\\"{ book { edges { node { id title } } } }\\\",\\\"variables\\\":null}\");\n+         String graphQLRequest = document(\n+                 mutation(\n+                         selection(\n+                                 field(\n+                                         \"asyncQuery\",\n+                                         arguments(\n+                                                 argument(\"op\", \"UPSERT\"),\n+                                                 argument(\"data\", queryObj, UNQUOTED_VALUE)\n+                                         ),\n+                                         selections(\n+                                                 field(\"id\"),\n+                                                 field(\"query\"),\n+                                                 field(\"queryType\"),\n+                                                 field(\"status\")\n+                                         )\n+                                 )\n+                         )\n+                 )\n+         ).toQuery();\n+\n+         JsonNode graphQLJsonNode = toJsonNode(graphQLRequest, null);\n+         given()\n+         .contentType(MediaType.APPLICATION_JSON)", "originalCommit": "c9a3f70175b53fae26572d2b72dabbaa215cb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f72af27046e44318b7789818dd18f8d22713d0db", "url": "https://github.com/yahoo/elide/commit/f72af27046e44318b7789818dd18f8d22713d0db", "message": "review changes", "committedDate": "2020-06-25T20:57:01Z", "type": "commit"}, {"oid": "f9d576d0fd9b2d5d388afeec3423518bbaa5c69c", "url": "https://github.com/yahoo/elide/commit/f9d576d0fd9b2d5d388afeec3423518bbaa5c69c", "message": "move sleep delay flag to aftereach method", "committedDate": "2020-06-25T21:51:04Z", "type": "commit"}]}