{"pr_number": 1693, "pr_title": "Optionally compile hjson configs while running CLI", "pr_createdAt": "2020-11-25T13:06:00Z", "pr_url": "https://github.com/yahoo/elide/pull/1693", "timeline": [{"oid": "e4f6b910b6f5281824508fd97deff12421e30dfa", "url": "https://github.com/yahoo/elide/commit/e4f6b910b6f5281824508fd97deff12421e30dfa", "message": "Optionally compile hjson configs wwhile running CLI", "committedDate": "2020-11-25T13:20:08Z", "type": "forcePushed"}, {"oid": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "url": "https://github.com/yahoo/elide/commit/7bb999b8d74b073a4539ed4f8c470fde485079cc", "message": "Optionally compile hjson configs wwhile running CLI", "committedDate": "2020-11-25T13:38:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MDMyMw==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530390323", "bodyText": "added getClassName method for this at end.", "author": "rishi-aga", "createdAt": "2020-11-25T13:54:43Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -5,89 +5,30 @@\n  */\n package com.yahoo.elide.modelconfig.compile;\n \n-import com.yahoo.elide.annotation.Include;\n-import com.yahoo.elide.core.dictionary.EntityDictionary;\n-import com.yahoo.elide.core.utils.ClassScanner;\n import com.yahoo.elide.modelconfig.DBPasswordExtractor;\n import com.yahoo.elide.modelconfig.DynamicConfigHelpers;\n import com.yahoo.elide.modelconfig.model.DBConfig;\n-import com.yahoo.elide.modelconfig.model.ElideDBConfig;\n-import com.yahoo.elide.modelconfig.model.ElideSecurityConfig;\n-import com.yahoo.elide.modelconfig.model.ElideTableConfig;\n-import com.yahoo.elide.modelconfig.parser.handlebars.HandlebarsHydrator;\n import com.yahoo.elide.modelconfig.validator.DynamicConfigValidator;\n-import com.zaxxer.hikari.HikariConfig;\n-import com.zaxxer.hikari.HikariDataSource;\n import org.apache.commons.lang3.StringUtils;\n-import lombok.Data;\n import lombok.Getter;\n-import lombok.extern.slf4j.Slf4j;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import javax.sql.DataSource;\n \n /**\n  * Compiles dynamic model pojos generated from hjson files.\n  */\n-@Slf4j\n public class ElideDynamicEntityCompiler {\n \n-    public static ArrayList<String> classNames = new ArrayList<String>();", "originalCommit": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5MTQ1NQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530391455", "bodyText": "unused method, so removed.", "author": "rishi-aga", "createdAt": "2020-11-25T13:56:20Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -189,15 +72,6 @@ public ClassLoader getClassLoader() {\n         return compiler.getClassloader();\n     }\n \n-    /**\n-     * Get the class from compiled class lists.\n-     * @param name name of the class\n-     * @return Class\n-     */\n-    public Class<?> getCompiled(String name) {", "originalCommit": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMTc2OA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530521768", "bodyText": "What is the use case for this constructor?", "author": "aklish", "createdAt": "2020-11-25T17:00:09Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHydrator.java", "diffHunk": "@@ -36,6 +37,23 @@\n         {\"\\n\", \" \" }\n     });\n \n+    private final Handlebars handlebars;\n+    private final HandlebarsHelper helper;\n+\n+    public HandlebarsHydrator(StaticModelsDetails staticModelDetails) {\n+        TemplateLoader loader = new ClassPathTemplateLoader(\"/templates\");\n+        this.helper = new HandlebarsHelper(staticModelDetails);\n+        this.handlebars = new Handlebars(loader).with(MY_ESCAPING_STRATEGY);\n+        this.handlebars.registerHelpers(ConditionalHelpers.class);\n+        this.handlebars.registerHelper(AssignHelper.NAME, AssignHelper.INSTANCE);\n+        this.handlebars.registerHelpers(helper);\n+    }\n+\n+    public HandlebarsHydrator() {\n+        this.handlebars = new Handlebars();\n+        this.helper = null;", "originalCommit": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2ODI1NQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530568255", "bodyText": "hydrateTableTemplate and hydrateSecurityTemplate methods use helper methods and I had to pass staticModelDetails to helper class.\nDefault constructor is for when to use just hydrateConfigTemplate method that doesn't use helper class.", "author": "rishi-aga", "createdAt": "2020-11-25T18:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMzEyMA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536823120", "bodyText": "Seems like it is safer to only have one fully initialized constructor.  Why not just use the same one throughout (even if config template doesn't need the static info)?", "author": "aklish", "createdAt": "2020-12-05T17:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMTc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMjM5OQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530522399", "bodyText": "It looks like this is not accessed outside this class.", "author": "aklish", "createdAt": "2020-11-25T17:01:07Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -24,7 +25,7 @@\n  */\n public class HandlebarsHelper {\n \n-    private static final String EMPTY_STRING = \"\";\n+    public static final String EMPTY_STRING = \"\";", "originalCommit": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2ODYyOQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530568629", "bodyText": "used in DynamicConfigValidator.", "author": "rishi-aga", "createdAt": "2020-11-25T18:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMjM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MDczNA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r532790734", "bodyText": "reverted now.", "author": "rishi-aga", "createdAt": "2020-11-30T17:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMjM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTUxNA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530525514", "bodyText": "This looks confusing.  Why do we expect this to fail since the directory is valid?", "author": "aklish", "createdAt": "2020-11-25T17:06:17Z", "path": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java", "diffHunk": "@@ -91,18 +91,60 @@ public void testMissingArgumentValue() throws Exception {\n     public void testMissingConfigDir() throws Exception {\n         String error = tapSystemErr(() -> {\n             int exitStatus = catchSystemExit(() ->\n-                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/missing\" }));\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/missing\", \"--nocompile\" }));\n             assertEquals(2, exitStatus);\n         });\n \n         assertTrue(error.contains(\"config path does not exist\"));\n     }\n \n+    @Test\n+    public void testValidConfigDir() throws Exception {\n+        tapSystemErr(() -> {\n+            int exitStatus = catchSystemExit(() ->\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\", \"--nocompile\" }));\n+            assertEquals(0, exitStatus);\n+        });\n+\n+        tapSystemErr(() -> {\n+            int exitStatus = catchSystemExit(() ->\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\", \"--nomodelcompile\", \"--nodbcompile\" }));\n+            assertEquals(0, exitStatus);\n+        });\n+    }\n+\n+    @Test\n+    public void testValidConfigDirWithCompile() throws Exception {\n+        String error = tapSystemErr(() -> {\n+            int exitStatus = catchSystemExit(() ->\n+                    DynamicConfigValidator.main(new String[] { \"--configDir\", \"src/test/resources/validator/valid\" }));\n+            assertEquals(2, exitStatus);", "originalCommit": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2NTU4NA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530565584", "bodyText": "hjson compilation will fail as it wont find classes defined in other modules.", "author": "rishi-aga", "createdAt": "2020-11-25T18:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTg3Mg==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530525872", "bodyText": "What is the use case for compiling models but not compiling db configs?", "author": "aklish", "createdAt": "2020-11-25T17:06:55Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -122,13 +158,36 @@ public static void main(String[] args) {\n \n             DynamicConfigValidator dynamicConfigValidator = new DynamicConfigValidator(configDir);\n             dynamicConfigValidator.readAndValidateConfigs();\n+            System.out.println(\"Configs Validation Passed!\");\n+\n+            if (cli.hasOption(\"nocompile\")) {\n+                System.out.println(\"Skipped compilation for both Model and DB configs\");\n+                System.exit(0);\n+            }\n+\n+            if (cli.hasOption(\"nomodelcompile\")) {\n+                System.out.println(\"Skipped compilation for Model configs\");\n+            } else {\n+                System.out.println(\"Compiling Model configs (Use '--nomodelcompile' to skip this step).\");\n+                dynamicConfigValidator.hydrateAndCompileModelConfigs();\n+                System.out.println(\"Model Configs Compilation Passed!\");\n+            }\n+\n+            if (cli.hasOption(\"nodbcompile\")) {", "originalCommit": "7bb999b8d74b073a4539ed4f8c470fde485079cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2NjA3MA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r530566070", "bodyText": "basically if connection to db is not possible then it can be useful.", "author": "rishi-aga", "createdAt": "2020-11-25T18:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTg3Mg=="}], "type": "inlineReview"}, {"oid": "ae44c230ceca6197d2b5355684fce7f719758717", "url": "https://github.com/yahoo/elide/commit/ae44c230ceca6197d2b5355684fce7f719758717", "message": "Refactor creation of dynamic datasource.", "committedDate": "2020-11-30T16:58:43Z", "type": "forcePushed"}, {"oid": "bde9b9b3fd8840f67f17a808726249d6cb9d3160", "url": "https://github.com/yahoo/elide/commit/bde9b9b3fd8840f67f17a808726249d6cb9d3160", "message": "Refactor creation of dynamic datasource.", "committedDate": "2020-11-30T17:04:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NzA2OQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r532757069", "bodyText": "Hikari doesn't support DATABASE_TO_LOWER property. Earlier if block was not getting executed as we were trying to compare class name with dialect type.", "author": "rishi-aga", "createdAt": "2020-11-30T17:07:57Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/framework/SQLUnitTest.java", "diffHunk": "@@ -385,11 +385,11 @@ public static void init(String sqlDialect) {\n         playerStatsTable = (SQLTable) metaDataStore.getTable(\"playerStats\", NO_VERSION);\n     }\n \n-    private static String getCompatabilityMode(String dialect) {\n-        if (dialect.equals(SQLDialectFactory.getMySQLDialect().getDialectType())) {\n-            return \"MODE=MySQL;DATABASE_TO_LOWER=TRUE\";\n-        } else if (dialect.equals(SQLDialectFactory.getPostgresDialect().getDialectType())) {\n-            return \"MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE\";\n+    private static String getCompatabilityMode(String dialectType) {\n+        if (dialectType.equals(SQLDialectFactory.getMySQLDialect().getDialectType())) {", "originalCommit": "bde9b9b3fd8840f67f17a808726249d6cb9d3160", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MjI1OA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r532762258", "bodyText": "test cases were getting stuck if there is an error so updated these.", "author": "rishi-aga", "createdAt": "2020-11-30T17:15:22Z", "path": "elide-model-config/src/test/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidatorTest.java", "diffHunk": "@@ -37,9 +36,18 @@ public void testValidInheritanceConfig() throws Exception {\n     }\n \n     @Test\n-    public void testHelpArgumnents() {\n-        assertDoesNotThrow(() -> DynamicConfigValidator.main(new String[] { \"-h\" }));\n-        assertDoesNotThrow(() -> DynamicConfigValidator.main(new String[] { \"--help\" }));\n+    public void testHelpArgumnents() throws Exception {\n+        tapSystemErr(() -> {", "originalCommit": "bde9b9b3fd8840f67f17a808726249d6cb9d3160", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4ODcxNw==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r533588717", "bodyText": "Check out PermissionExpressionVisitor.\nWe should create a visitor to extract the check strings from the expression ParseTree rather than trying to manipulate the tree directly as we do here.", "author": "aklish", "createdAt": "2020-12-01T17:23:30Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -371,23 +455,73 @@ private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n             table.getDimensions().forEach(dim -> {\n                 validateFieldNameUniqueness(tableFields, dim.getName(), table.getName());\n                 validateSql(dim.getDefinition());\n-                validateTableSource(elideTableConfig, dim.getTableSource());\n+                validateTableSource(dim.getTableSource());\n+                extractChecksFromExpr(dim.getReadAccess(), extractedChecks);\n             });\n \n             table.getMeasures().forEach(measure -> {\n                 validateFieldNameUniqueness(tableFields, measure.getName(), table.getName());\n                 validateSql(measure.getDefinition());\n+                extractChecksFromExpr(measure.getReadAccess(), extractedChecks);\n             });\n \n             table.getJoins().forEach(join -> {\n                 validateFieldNameUniqueness(tableFields, join.getName(), table.getName());\n-                validateJoin(join, elideTableConfig);\n+                validateJoin(join);\n             });\n+\n+            extractChecksFromExpr(table.getReadAccess(), extractedChecks);\n+            validateChecks(extractedChecks);\n         }\n \n         return true;\n     }\n \n+    private void validateChecks(Set<String> checks) {\n+\n+        if (checks.isEmpty()) {\n+            return; // Nothing to validate\n+        }\n+\n+        Set<String> staticChecks = dictionary.getCheckMappings().keySet();\n+\n+        List<String> undefinedChecks = checks\n+                        .stream()\n+                        .filter(check -> !(elideSecurityConfig.hasCheckDefined(check) || staticChecks.contains(check)))\n+                        .collect(Collectors.toList());\n+\n+        if (!undefinedChecks.isEmpty()) {\n+            throw new IllegalStateException(\"Found undefined security checks: \" + undefinedChecks);\n+        }\n+    }\n+\n+    private static void extractChecksFromExpr(String readAccess, Set<String> extractedChecks) {\n+\n+        if (!isNullOrEmpty(readAccess)) {\n+            ParseTree root = EntityPermissions.parseExpression(readAccess);\n+            extractChecksFromTree(root, extractedChecks);\n+        }\n+    }\n+\n+    private static void extractChecksFromTree(ParseTree root, Set<String> extractedChecks) {", "originalCommit": "3b170b997370842e31e76f527bed668f3171e811", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MzIzNw==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534443237", "bodyText": "Replacing . with $ sign so that dynamic compiler doesn't complain about file and class name.", "author": "rishi-aga", "createdAt": "2020-12-02T19:57:54Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -98,12 +84,17 @@ public String toUpperCase(Object obj) {\n     }\n \n     /**\n-     * Transform string to upper case and replace space with underscore.\n-     * @param obj Object representation of the string\n-     * @return string converted to upper case and spaces replaced\n+     * Capitalize first letter, replace space with underscore and dot with euro sign.\n+     * @param obj Object representation of the string.\n+     * @param toUpperCase Change case to upper for converted string.\n+     * @return converted string.\n      */\n-    public String toUpperCaseReplaceSpace(Object obj) {\n-        return toUpperCase(obj).replace(SPACE, UNDERSCORE);\n+    public String createSecurityIdenitfier(Object obj, boolean toUpperCase) {\n+        String id = capitalizeFirstLetter(obj.toString()).replace(SPACE, UNDERSCORE).replace(DOT, DOLLAR_SIGN);", "originalCommit": "a17e09ee3b2122c5261e0efd8619e18aff2a1d7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2f8578511534657e1a2cea2a9b7b94797e92d8d", "url": "https://github.com/yahoo/elide/commit/b2f8578511534657e1a2cea2a9b7b94797e92d8d", "message": "Fix Test", "committedDate": "2020-12-02T20:11:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NzgxMA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534477810", "bodyText": "The visitor doesn't have to return an expression.  The visitor can construct anything really.  I thought you might construct a Set<String> of permission rules - that then could be iterated over and validated against the roles or existing security checks.", "author": "aklish", "createdAt": "2020-12-02T21:00:02Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/PermissionExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.modelconfig.validator;\n+\n+import com.yahoo.elide.core.security.permissions.expressions.AndExpression;\n+import com.yahoo.elide.core.security.permissions.expressions.Expression;\n+import com.yahoo.elide.core.security.permissions.expressions.NotExpression;\n+import com.yahoo.elide.core.security.permissions.expressions.OrExpression;\n+import com.yahoo.elide.generated.parsers.ExpressionBaseVisitor;\n+import com.yahoo.elide.generated.parsers.ExpressionParser;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Expression Visitor.\n+ */\n+@AllArgsConstructor\n+public class PermissionExpressionVisitor extends ExpressionBaseVisitor<Expression> {", "originalCommit": "b2f8578511534657e1a2cea2a9b7b94797e92d8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxMTIzOA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534511238", "bodyText": "Updated.", "author": "rishi-aga", "createdAt": "2020-12-02T22:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3NzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MTM1Mw==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r534481353", "bodyText": "This is probably not safe to evaluate checks like this.  Checks can do all kinds of crazy things (since they are developer provided code).\nYou can instead:\n\nHave the visitor extract a list/set of check names.\nLookup the check name either in the list of roles in the security.hjson file or check the dictionary (getCheckMappings)", "author": "aklish", "createdAt": "2020-12-02T21:06:36Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -373,23 +470,34 @@ private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n             table.getDimensions().forEach(dim -> {\n                 validateFieldNameUniqueness(tableFields, dim.getName(), table.getName());\n                 validateSql(dim.getDefinition());\n-                validateTableSource(elideTableConfig, dim.getTableSource());\n+                validateTableSource(dim.getTableSource());\n+                validateCheckExpr(dim.getReadAccess(), visitor);\n             });\n \n             table.getMeasures().forEach(measure -> {\n                 validateFieldNameUniqueness(tableFields, measure.getName(), table.getName());\n                 validateSql(measure.getDefinition());\n+                validateCheckExpr(measure.getReadAccess(), visitor);\n             });\n \n             table.getJoins().forEach(join -> {\n                 validateFieldNameUniqueness(tableFields, join.getName(), table.getName());\n-                validateJoin(join, elideTableConfig);\n+                validateJoin(join);\n             });\n+\n+            validateCheckExpr(table.getReadAccess(), visitor);\n         }\n \n         return true;\n     }\n \n+    private void validateCheckExpr(String readAccess, PermissionExpressionVisitor visitor) {\n+        if (!isNullOrEmpty(readAccess)) {\n+            ParseTree root = EntityPermissions.parseExpression(readAccess);\n+            visitor.visit(root).evaluate(null);", "originalCommit": "b2f8578511534657e1a2cea2a9b7b94797e92d8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMDU2Ng==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536820566", "bodyText": "Shouldn't this be automatically scanned and discovered? Do we need to add it here?", "author": "aklish", "createdAt": "2020-12-05T16:44:34Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/integration/AggregationDataStoreIntegrationTest.java", "diffHunk": "@@ -86,6 +91,7 @@ protected void configure() {\n \n                     try {\n                         dictionary.addSecurityChecks(COMPILER.findAnnotatedClasses(SecurityCheck.class));\n+                        dictionary.addSecurityChecks(Collections.singleton(OperatorCheck.class));", "originalCommit": "141cadf8f520f9fa448942e557d419648b2bfdea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg2MjM1MQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536862351", "bodyText": "not calling scanForSecurityChecks method on this dictionary. Should I add this check to TestCheckMappings.MAPPINGS ?", "author": "rishi-aga", "createdAt": "2020-12-05T18:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxNTIyOA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r537615228", "bodyText": "Would probably be cleaner to do it that way (consistent with what is there).", "author": "aklish", "createdAt": "2020-12-07T15:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMzAxMA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536823010", "bodyText": "Typo in function name.", "author": "aklish", "createdAt": "2020-12-05T17:00:38Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/parser/handlebars/HandlebarsHelper.java", "diffHunk": "@@ -91,12 +84,17 @@ public String toUpperCase(Object obj) {\n     }\n \n     /**\n-     * Transform string to upper case and replace space with underscore.\n-     * @param obj Object representation of the string\n-     * @return string converted to upper case and spaces replaced\n+     * Capitalize first letter, replace space with underscore and dot with euro sign.\n+     * @param obj Object representation of the string.\n+     * @param toUpperCase Change case to upper for converted string.\n+     * @return converted string.\n      */\n-    public String toUpperCaseReplaceSpace(Object obj) {\n-        return toUpperCase(obj).replace(SPACE, UNDERSCORE);\n+    public String createSecurityIdenitfier(Object obj, boolean toUpperCase) {", "originalCommit": "141cadf8f520f9fa448942e557d419648b2bfdea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgzMzI3MA==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536833270", "bodyText": "fixed.", "author": "rishi-aga", "createdAt": "2020-12-05T18:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMzAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDYyMQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536824621", "bodyText": "What calls this method?  Why does elide compiler have a singleton method here?", "author": "aklish", "createdAt": "2020-12-05T17:11:22Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -133,21 +179,57 @@ public static void main(String[] args) {\n      */\n     public void readAndValidateConfigs() throws IOException {\n         this.loadConfigMap();\n-        this.setModelVariables(readVariableConfig(Config.MODELVARIABLE));\n-        this.setElideSecurityConfig(readSecurityConfig());\n-        validateRoleInSecurityConfig(this.elideSecurityConfig);\n-        this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n+        this.modelVariables = readVariableConfig(Config.MODELVARIABLE);\n+        this.elideSecurityConfig = readSecurityConfig();\n+        validateSecurityConfig();\n+        this.dbVariables = readVariableConfig(Config.DBVARIABLE);\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateInheritance(this.elideTableConfig);\n         populateInheritance(this.elideTableConfig);\n-        validateTableConfig(this.elideTableConfig);\n+        validateTableConfig();\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    public void hydrateAndCompileModelConfigs() throws Exception {", "originalCommit": "141cadf8f520f9fa448942e557d419648b2bfdea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg1MTY5OQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536851699", "bodyText": "this is called from static main method required for cli. Removed this method and creating compiler object in main method.", "author": "rishi-aga", "createdAt": "2020-12-05T18:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg3NjY5OQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536876699", "bodyText": "also removed singleton method for compiler class.", "author": "rishi-aga", "createdAt": "2020-12-05T19:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDg0Mw==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536824843", "bodyText": "Seems like this belongs elsewhere (like maybe in the compiler constructor).", "author": "aklish", "createdAt": "2020-12-05T17:12:29Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/modelconfig/validator/DynamicConfigValidator.java", "diffHunk": "@@ -133,21 +179,57 @@ public static void main(String[] args) {\n      */\n     public void readAndValidateConfigs() throws IOException {\n         this.loadConfigMap();\n-        this.setModelVariables(readVariableConfig(Config.MODELVARIABLE));\n-        this.setElideSecurityConfig(readSecurityConfig());\n-        validateRoleInSecurityConfig(this.elideSecurityConfig);\n-        this.setDbVariables(readVariableConfig(Config.DBVARIABLE));\n+        this.modelVariables = readVariableConfig(Config.MODELVARIABLE);\n+        this.elideSecurityConfig = readSecurityConfig();\n+        validateSecurityConfig();\n+        this.dbVariables = readVariableConfig(Config.DBVARIABLE);\n         this.elideSQLDBConfig.setDbconfigs(readDbConfig());\n         this.elideTableConfig.setTables(readTableConfig());\n         validateRequiredConfigsProvided();\n         validateNameUniqueness(this.elideSQLDBConfig.getDbconfigs());\n         validateNameUniqueness(this.elideTableConfig.getTables());\n         validateInheritance(this.elideTableConfig);\n         populateInheritance(this.elideTableConfig);\n-        validateTableConfig(this.elideTableConfig);\n+        validateTableConfig();\n         validateJoinedTablesDBConnectionName(this.elideTableConfig);\n     }\n \n+    public void hydrateAndCompileModelConfigs() throws Exception {\n+        hydrateAndCompileModelConfigs(ElideDynamicInMemoryCompiler.newInstance().ignoreWarnings());\n+    }\n+\n+    public void hydrateAndCompileModelConfigs(ElideDynamicInMemoryCompiler compiler) throws Exception {\n+        HandlebarsHydrator hydrator = new HandlebarsHydrator(staticModelDetails);\n+        Map<String, String> tableClasses = hydrator.hydrateTableTemplate(this.elideTableConfig);\n+        Map<String, String> securityClasses = hydrator.hydrateSecurityTemplate(this.elideSecurityConfig);\n+\n+        compiler.useParentClassLoader(getClass().getClassLoader());", "originalCommit": "141cadf8f520f9fa448942e557d419648b2bfdea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgzNTA2OQ==", "url": "https://github.com/yahoo/elide/pull/1693#discussion_r536835069", "bodyText": "moved.", "author": "rishi-aga", "createdAt": "2020-12-05T18:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyNDg0Mw=="}], "type": "inlineReview"}, {"oid": "95d270b9e3464842282b76657cc9b6d359eec5f1", "url": "https://github.com/yahoo/elide/commit/95d270b9e3464842282b76657cc9b6d359eec5f1", "message": "Validate readAccess attribute provided for dynamic models", "committedDate": "2020-12-05T19:18:25Z", "type": "commit"}, {"oid": "1166b1c58397a8c8a173a0dd604db47eb190014c", "url": "https://github.com/yahoo/elide/commit/1166b1c58397a8c8a173a0dd604db47eb190014c", "message": "Optionally compile hjson configs wwhile running CLI", "committedDate": "2020-12-05T19:18:25Z", "type": "commit"}, {"oid": "3a8ab9f0dc9418c30d4b7a94531a0b4a05e4381e", "url": "https://github.com/yahoo/elide/commit/3a8ab9f0dc9418c30d4b7a94531a0b4a05e4381e", "message": "Refactor creation of dynamic datasource.", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "24237c82dc27d2f2cdc11dd8b04406073b3c4a9f", "url": "https://github.com/yahoo/elide/commit/24237c82dc27d2f2cdc11dd8b04406073b3c4a9f", "message": "Bind to dictionary", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "0a5fcb3f81e2319ddf1528d5d0136f8484796434", "url": "https://github.com/yahoo/elide/commit/0a5fcb3f81e2319ddf1528d5d0136f8484796434", "message": "Remove 'Principal Is' references", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "46cc5273d76836eb056dd74891271f326f53b860", "url": "https://github.com/yahoo/elide/commit/46cc5273d76836eb056dd74891271f326f53b860", "message": "Add Permission expression visitor", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "94e914c44e5d17480df4e7f114df922514dbed18", "url": "https://github.com/yahoo/elide/commit/94e914c44e5d17480df4e7f114df922514dbed18", "message": "Fix Test", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "466e354041e9262d4fab5e61fc3f1b810918a64d", "url": "https://github.com/yahoo/elide/commit/466e354041e9262d4fab5e61fc3f1b810918a64d", "message": "Review Comments", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "71410ba83091b06970e509eb61d0e851344519d3", "url": "https://github.com/yahoo/elide/commit/71410ba83091b06970e509eb61d0e851344519d3", "message": "Review Comments 2nd pass", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "f6d12ddf57f2df4737a83c9031cd92ece910e807", "url": "https://github.com/yahoo/elide/commit/f6d12ddf57f2df4737a83c9031cd92ece910e807", "message": "Remove singleton method from Elide Compiler", "committedDate": "2020-12-05T19:18:26Z", "type": "commit"}, {"oid": "f6d12ddf57f2df4737a83c9031cd92ece910e807", "url": "https://github.com/yahoo/elide/commit/f6d12ddf57f2df4737a83c9031cd92ece910e807", "message": "Remove singleton method from Elide Compiler", "committedDate": "2020-12-05T19:18:26Z", "type": "forcePushed"}, {"oid": "0042b155753d68c64af797e4b4068152d06de910", "url": "https://github.com/yahoo/elide/commit/0042b155753d68c64af797e4b4068152d06de910", "message": "Fix build errors due to CVE-2020-25638", "committedDate": "2020-12-07T16:26:20Z", "type": "commit"}]}