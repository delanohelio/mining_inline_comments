{"pr_number": 2751, "pr_title": "Kafka fixes", "pr_createdAt": "2020-12-10T14:51:34Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2751", "timeline": [{"oid": "33e936cef86015d3e53bb8d1adf97d86082c0902", "url": "https://github.com/hazelcast/hazelcast-jet/commit/33e936cef86015d3e53bb8d1adf97d86082c0902", "message": "Fix test failure", "committedDate": "2020-12-10T14:32:06Z", "type": "commit"}, {"oid": "61f5f52de950491e476b429714a80d7c90c7707d", "url": "https://github.com/hazelcast/hazelcast-jet/commit/61f5f52de950491e476b429714a80d7c90c7707d", "message": "Fix issue with added partitions\n\nThis could happen:\n- the processor starts with 2 partitions p0 and p1\n- p0 has some item, p1 doesn't\n- the processor saves a snapshot. It will only save the offset for p0\nbecause it doesn't know it for p1\n- the job restarts\n- the processor restores offset for p0, but not for p1. Therefore it\nwill assume the partition count before the restart was 1\n- later it will detect that there are 2 partitions and will seek p1 to\nthe beginning because it will think that p1 was added while the job was\ndown\n\nThe fix is that the processor with global processor index of 0 will save\none additional key to the snapshot, the `PARTITION_COUNTS_SNAPSHOT_KEY`.\nUnder that key we the known partition count for each topic. That key is\nbroadcast, every processor will know the partition count before the\nrestart. After this, the above scenario will not consider p1 as added\nand will not seek to the beginning.", "committedDate": "2020-12-10T14:49:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MDExNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2751#discussion_r540850116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                          .collect(Collectors.toMap(topic -> topic, topic -> offsets.get(topic).length)));\n          \n          \n            \n                                          .collect(Collectors.toMap(FunctionEx.identity(), topic -> offsets.get(topic).length)));", "author": "gierlachg", "createdAt": "2020-12-11T10:34:43Z", "path": "extensions/kafka/src/main/java/com/hazelcast/jet/kafka/impl/StreamKafkaP.java", "diffHunk": "@@ -229,36 +230,57 @@ public boolean saveToSnapshot() {\n                                     \" Saved offsets: \" + offsets() + \", Saved watermarks: \" + watermarks());\n                         }\n                     });\n+\n+            if (processorIndex == 0) {\n+                Entry<BroadcastKey<?>, ?> partitionCountsItem = entry(\n+                        broadcastKey(PARTITION_COUNTS_SNAPSHOT_KEY),\n+                        topics.stream()\n+                              .collect(Collectors.toMap(topic -> topic, topic -> offsets.get(topic).length)));", "originalCommit": "61f5f52de950491e476b429714a80d7c90c7707d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}