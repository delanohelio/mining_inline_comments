{"pr_number": 2680, "pr_title": "Write JSON directly to stream in SQL", "pr_createdAt": "2020-11-18T14:27:42Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2680", "timeline": [{"oid": "b0df6c25dde82123d661a721b7a134340bb75625", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b0df6c25dde82123d661a721b7a134340bb75625", "message": "Write JSON directly to stream in SQL", "committedDate": "2020-11-18T14:25:56Z", "type": "commit"}, {"oid": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4100bd2b37ae37ece1e26b87e9da015f9c305ee7", "message": "Don't expect JSON as String in Kafka SQL", "committedDate": "2020-11-18T14:27:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MTY0OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526171649", "bodyText": "Tests should be adjusted?", "author": "gierlachg", "createdAt": "2020-11-18T15:21:38Z", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/extract/JsonQueryTarget.java", "diffHunk": "@@ -33,14 +33,13 @@\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private ObjectNode json;\n+    private JsonNode json;\n \n     @Override\n     public void setTarget(Object target) {\n         try {\n-            json = (ObjectNode) (target instanceof ObjectNode ? target\n-                    : target instanceof String ? MAPPER.readTree((String) target)\n-                    : MAPPER.readTree((byte[]) target));\n+            json = target instanceof ObjectNode ? (ObjectNode) target", "originalCommit": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MjI5OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526172299", "bodyText": "com.fasterxml.jackson.core:jackson-databind isn't needed anymore?", "author": "gierlachg", "createdAt": "2020-11-18T15:22:25Z", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "diffHunk": "@@ -16,25 +16,26 @@\n \n package com.hazelcast.jet.sql.impl.inject;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.hazelcast.sql.impl.QueryException;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n import javax.annotation.Nullable;\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n import static com.hazelcast.jet.sql.impl.inject.UpsertInjector.FAILING_TOP_LEVEL_INJECTOR;\n \n @NotThreadSafe\n class JsonUpsertTarget implements UpsertTarget {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();", "originalCommit": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NjE4OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526176189", "bodyText": "It is, when reading. I only adapted writing.", "author": "viliam-durina", "createdAt": "2020-11-18T15:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MjI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODE1Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526178153", "bodyText": "after the last commit it's still needed when writing: we support OBJECT fields of type JsonNode, which is from jackson-databind", "author": "viliam-durina", "createdAt": "2020-11-18T15:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MjI5OQ=="}], "type": "inlineReview"}, {"oid": "f1f6dc29e3c76fe25f53de658fc4d3225a0777a5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f1f6dc29e3c76fe25f53de658fc4d3225a0777a5", "message": "Fix test failures", "committedDate": "2020-11-18T15:25:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NTA3NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2680#discussion_r526175075", "bodyText": "Simply json? It's not obvious without checking the type what gen is.", "author": "gierlachg", "createdAt": "2020-11-18T15:25:44Z", "path": "hazelcast-jet-sql/src/main/java/com/hazelcast/jet/sql/impl/inject/JsonUpsertTarget.java", "diffHunk": "@@ -16,25 +16,26 @@\n \n package com.hazelcast.jet.sql.impl.inject;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n import com.hazelcast.sql.impl.QueryException;\n import com.hazelcast.sql.impl.type.QueryDataType;\n \n import javax.annotation.Nullable;\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n import static com.hazelcast.jet.sql.impl.inject.UpsertInjector.FAILING_TOP_LEVEL_INJECTOR;\n \n @NotThreadSafe\n class JsonUpsertTarget implements UpsertTarget {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final JsonFactory JSON_FACTORY = new JsonFactory();\n \n-    private ObjectNode json;\n+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private JsonGenerator jsonGen;", "originalCommit": "4100bd2b37ae37ece1e26b87e9da015f9c305ee7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9cfdb2fb195d528d1c782848d6eb6531645879d3", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9cfdb2fb195d528d1c782848d6eb6531645879d3", "message": "Rename variable", "committedDate": "2020-11-18T15:28:30Z", "type": "commit"}]}