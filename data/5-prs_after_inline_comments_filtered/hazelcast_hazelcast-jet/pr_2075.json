{"pr_number": 2075, "pr_title": "Enable job-level serializer for IMDG Maps & Caches", "pr_createdAt": "2020-03-20T07:33:12Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2075", "timeline": [{"oid": "55f1ec1293be653f2a95bcd9f93cf1f454f14a0e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/55f1ec1293be653f2a95bcd9f93cf1f454f14a0e", "message": "Enable job-level serializer for IMDG Maps & Caches", "committedDate": "2020-03-20T07:26:27Z", "type": "commit"}, {"oid": "9a1ec51acff6f314238e15d85d153c7af7fed9d3", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9a1ec51acff6f314238e15d85d153c7af7fed9d3", "message": "Enable job-level serializer for IMDG Maps & Caches", "committedDate": "2020-03-20T07:31:54Z", "type": "commit"}, {"oid": "7659dcbcf7a6ed55fd5cb6b35962f82e9150c154", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7659dcbcf7a6ed55fd5cb6b35962f82e9150c154", "message": "Enable job-level serializer for IMDG Maps & Caches", "committedDate": "2020-03-20T09:21:38Z", "type": "commit"}, {"oid": "7686f59b3e5a25ee0f273be9d8b4872be1977ef0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7686f59b3e5a25ee0f273be9d8b4872be1977ef0", "message": "Enable job-level serializer for IMDG Maps & Caches", "committedDate": "2020-03-20T09:33:33Z", "type": "commit"}, {"oid": "defd23156d7b8a5f1410327619be415f78d4f796", "url": "https://github.com/hazelcast/hazelcast-jet/commit/defd23156d7b8a5f1410327619be415f78d4f796", "message": "Merge branch 'master' into job_map_cache\n\n# Conflicts:\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteMapP.java", "committedDate": "2020-03-23T07:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NTE3MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2075#discussion_r396295170", "bodyText": "It would be better to have the cache instance in the context. This is an unnecessary access to multiple concurrent maps.", "author": "viliam-durina", "createdAt": "2020-03-23T08:58:12Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/HazelcastWriters.java", "diffHunk": "@@ -182,27 +178,36 @@ static RuntimeException handleInstanceNotActive(HazelcastInstanceNotActiveExcept\n         return isLocal ? new RestartableException(e) : e;\n     }\n \n-    /**\n-     * Wrapper class needed to conceal the JCache API while\n-     * serializing/deserializing other lambdas\n-     */\n-    private static class CacheFlush {\n+    private static class WriteCachePSupplier<K, V> extends AbstractHazelcastConnectorSupplier {\n \n-        static <K, V> FunctionEx<HazelcastInstance, ConsumerEx<ArrayMap<K, V>>> flushToCache(\n-                String name,\n-                boolean isLocal\n-        ) {\n-            return instance -> {\n-                ICache<K, V> cache = instance.getCacheManager().getCache(name);\n-                return buffer -> {\n-                    try {\n-                        cache.putAll(buffer);\n-                    } catch (HazelcastInstanceNotActiveException e) {\n-                        throw handleInstanceNotActive(e, isLocal);\n-                    }\n-                    buffer.clear();\n-                };\n+        static final long serialVersionUID = 1L;\n+\n+        private final String name;\n+\n+        WriteCachePSupplier(@Nullable ClientConfig clientConfig, @Nonnull String name) {\n+            super(asXmlString(clientConfig));\n+            this.name = name;\n+        }\n+\n+        @Override\n+        protected Processor createProcessor(HazelcastInstance instance, SerializationService serializationService) {\n+            FunctionEx<Context, ArrayMap<Data, Data>> bufferCreator = context -> new ArrayMap<>();\n+            BiConsumerEx<ArrayMap<Data, Data>, Entry<K, V>> entryReceiver = (buffer, entry) -> {\n+                Data key = serializationService.toData(entry.getKey());\n+                Data value = serializationService.toData(entry.getValue());\n+                buffer.add(new SimpleEntry<>(key, value));\n+            };\n+            ConsumerEx<ArrayMap<Data, Data>> bufferFlusher = buffer -> {\n+                ICache<Data, Data> cache = instance.getCacheManager().getCache(name);", "originalCommit": "defd23156d7b8a5f1410327619be415f78d4f796", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c15a64f142fd5f559e8b58f45f692428258f10ee", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c15a64f142fd5f559e8b58f45f692428258f10ee", "message": "Fetch reference to the cache once and store it in the context", "committedDate": "2020-03-23T09:03:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzNjgxNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2075#discussion_r396436815", "bodyText": "This was done on purpose due to https://bugs.openjdk.java.net/browse/JDK-8154236", "author": "viliam-durina", "createdAt": "2020-03-23T13:08:56Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/pipeline/SinksTest.java", "diffHunk": "@@ -244,7 +246,7 @@ public void mapWithMerging_byName() {\n                 srcName,\n                 Entry::getKey,\n                 Entry::getValue,\n-                (oldValue, newValue) -> oldValue + newValue);\n+                Integer::sum);", "originalCommit": "c15a64f142fd5f559e8b58f45f692428258f10ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b7fa4827c36cd58c865d14c408bce331e7bacc88", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b7fa4827c36cd58c865d14c408bce331e7bacc88", "message": "Use job serializers just for local maps/caches", "committedDate": "2020-03-23T13:54:31Z", "type": "commit"}, {"oid": "fe42b0de355f7e0e053776f6776112ce6057a349", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fe42b0de355f7e0e053776f6776112ce6057a349", "message": "Merge branch 'master' into job_map_cache\n\n# Conflicts:\n#\thazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/connector/WriteObservableP.java", "committedDate": "2020-03-24T09:37:07Z", "type": "commit"}]}