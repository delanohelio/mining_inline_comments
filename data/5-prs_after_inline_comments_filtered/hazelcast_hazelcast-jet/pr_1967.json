{"pr_number": 1967, "pr_title": "Added a section regarding ML model prediction", "pr_createdAt": "2020-02-12T09:33:16Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/1967", "timeline": [{"oid": "e4eea042a5138dc80a35da15ac7375fe997e5e23", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e4eea042a5138dc80a35da15ac7375fe997e5e23", "message": "Added a section regarding ML model prediction", "committedDate": "2020-02-12T09:31:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2ODI3Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378268272", "bodyText": "You can use ServiceFactories.sharedService and you won't need the withCreateServiceFn", "author": "viliam-durina", "createdAt": "2020-02-12T14:02:36Z", "path": "reference-manual/src/main/java/MLModelPrediction.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+\n+import hex.genmodel.MojoModel;\n+import hex.genmodel.easy.EasyPredictModelWrapper;\n+import hex.genmodel.easy.RowData;\n+import hex.genmodel.easy.prediction.BinomialModelPrediction;;\n+\n+public class MLModelPrediction {\n+    static void s1() {\n+        //tag::s1[]\n+        String modelFileLocation = \"/path/to/gbm_model.zip\";\n+        JetInstance jet = Jet.newJetInstance();\n+\n+        JobConfig jobConfig = new JobConfig();\n+        jobConfig.setName(\"H20 Classification Example\");\n+        jobConfig.attachFile(modelFileLocation, \"gbm_mojo\");\n+        Job job = jet.newJob(buildPipeline(), jobConfig);\n+        //end::s1[]\n+    }\n+\n+    static void s2() {\n+        //tag::s2[]\n+        StreamStage<ItemToBeClassified> sourceStage = sourceStage();\n+        sourceStage.mapUsingService(ServiceFactory.withCreateContextFn(context -> {\n+            String model = context.attachedFile(\"gbm_mojo\").toString();\n+            return new EasyPredictModelWrapper(MojoModel.load(model));\n+        }).withCreateServiceFn((context, easyPredictModelWrapper) -> easyPredictModelWrapper), ", "originalCommit": "e4eea042a5138dc80a35da15ac7375fe997e5e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2ODY2OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/1967#discussion_r378268668", "bodyText": "Might be clearer to assign the result of attachedFile to a File and do the tostring later when using it.", "author": "viliam-durina", "createdAt": "2020-02-12T14:03:20Z", "path": "reference-manual/src/main/java/MLModelPrediction.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.jet.Jet;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.config.JobConfig;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.ServiceFactory;\n+import com.hazelcast.jet.pipeline.StreamStage;\n+\n+import hex.genmodel.MojoModel;\n+import hex.genmodel.easy.EasyPredictModelWrapper;\n+import hex.genmodel.easy.RowData;\n+import hex.genmodel.easy.prediction.BinomialModelPrediction;;\n+\n+public class MLModelPrediction {\n+    static void s1() {\n+        //tag::s1[]\n+        String modelFileLocation = \"/path/to/gbm_model.zip\";\n+        JetInstance jet = Jet.newJetInstance();\n+\n+        JobConfig jobConfig = new JobConfig();\n+        jobConfig.setName(\"H20 Classification Example\");\n+        jobConfig.attachFile(modelFileLocation, \"gbm_mojo\");\n+        Job job = jet.newJob(buildPipeline(), jobConfig);\n+        //end::s1[]\n+    }\n+\n+    static void s2() {\n+        //tag::s2[]\n+        StreamStage<ItemToBeClassified> sourceStage = sourceStage();\n+        sourceStage.mapUsingService(ServiceFactory.withCreateContextFn(context -> {\n+            String model = context.attachedFile(\"gbm_mojo\").toString();", "originalCommit": "e4eea042a5138dc80a35da15ac7375fe997e5e23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40d3e616934ad9316692c02411eb1b8b815ca036", "url": "https://github.com/hazelcast/hazelcast-jet/commit/40d3e616934ad9316692c02411eb1b8b815ca036", "message": "Address review comments", "committedDate": "2020-02-12T14:53:09Z", "type": "commit"}, {"oid": "3ab40ec42bd12ff8aec53e4e91ab841165421448", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3ab40ec42bd12ff8aec53e4e91ab841165421448", "message": "Fixed search on the Javadocs and added support for newly introduced tags", "committedDate": "2020-02-13T10:25:24Z", "type": "commit"}, {"oid": "e55d41a1114e531d8e7206b504df32847604fc78", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e55d41a1114e531d8e7206b504df32847604fc78", "message": "Added implementation note regarding backing IMap for the methods which uploads job resources", "committedDate": "2020-02-13T10:26:01Z", "type": "commit"}, {"oid": "1a1af940682250de75ddb126d18ff6c85cabb0e4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1a1af940682250de75ddb126d18ff6c85cabb0e4", "message": "Revert Javadoc search fix since java 8 doesn't provide it either", "committedDate": "2020-02-13T10:42:27Z", "type": "commit"}]}