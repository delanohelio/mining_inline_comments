{"pr_number": 3679, "pr_title": "New Test annotation @NotImplementedYet", "pr_createdAt": "2020-12-17T20:37:40Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3679", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5MzI1Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3679#discussion_r545393252", "bodyText": "This should be unique.  STORE_KEY = \"NOT_YET_IMPLEMENTED\" e.g.", "author": "sebersole", "createdAt": "2020-12-17T20:47:16Z", "path": "hibernate-testing/src/main/java/org/hibernate/testing/orm/junit/NotImplementedYetExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hibernate.testing.orm.junit;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+\n+import org.jboss.logging.Logger;\n+\n+public class NotImplementedYetExtension\n+\t\timplements ExecutionCondition, AfterEachCallback, TestExecutionExceptionHandler {\n+\n+\tprivate static final Logger log = Logger.getLogger( NotImplementedYetExtension.class );\n+\tprivate static final String EXPECTED_FAILURE_STORE_KEY = \"EXPECTED_FAILURE\";", "originalCommit": "07d8113392ca33c59559b9834b5b3bd9d0584e27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NjE3Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3679#discussion_r545396172", "bodyText": "Why are you disabling all tests that are not marked with this new annotation?", "author": "sebersole", "createdAt": "2020-12-17T20:52:31Z", "path": "hibernate-testing/src/main/java/org/hibernate/testing/orm/junit/NotImplementedYetExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hibernate.testing.orm.junit;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+\n+import org.jboss.logging.Logger;\n+\n+public class NotImplementedYetExtension\n+\t\timplements ExecutionCondition, AfterEachCallback, TestExecutionExceptionHandler {\n+\n+\tprivate static final Logger log = Logger.getLogger( NotImplementedYetExtension.class );\n+\tprivate static final String EXPECTED_FAILURE_STORE_KEY = \"EXPECTED_FAILURE\";\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) throws Exception {\n+\t\t// Check if the annotated element effectively logged a failure\n+\t\tThrowable throwable = context.getStore( getNamespace( context ) ).get(\n+\t\t\t\tEXPECTED_FAILURE_STORE_KEY,\n+\t\t\t\tThrowable.class\n+\t\t);\n+\t\tif ( throwable == null ) {\n+\t\t\tlog.warnf(\n+\t\t\t\t\t\"%s should have failed, but didn't; the functionality it validates may have been implemented by now\",\n+\t\t\t\t\tcontext.getDisplayName()\n+\t\t\t);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void handleTestExecutionException(ExtensionContext context, Throwable throwable) {\n+\t\tlog.debugf( \"#handleTestExecutionException(%s, %s)\", context.getDisplayName() );\n+\t\tlog.debugf( \"#Captured exception %s - ignoring it\", throwable );\n+\t\tcontext.getStore( getNamespace( context ) ).put( EXPECTED_FAILURE_STORE_KEY, throwable );\n+\t}\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tlog.debugf( \"#evaluateExecutionCondition(%s)\", context.getDisplayName() );\n+\n+\t\tif ( !context.getElement().isPresent() ) {\n+\t\t\tthrow new RuntimeException( \"Unable to determine how to handle given ExtensionContext : \" + context.getDisplayName() );\n+\t\t}\n+\n+\t\t// Test this in case some other annotation were extended with NotImplementedYetExtension\n+\t\tif ( !TestingUtil.hasEffectiveAnnotation( context, NotImplementedYet.class ) ) {", "originalCommit": "07d8113392ca33c59559b9834b5b3bd9d0584e27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "76fd225bfea072be31135e1c68ffde83edd5f017", "url": "https://github.com/hibernate/hibernate-orm/commit/76fd225bfea072be31135e1c68ffde83edd5f017", "message": "New Test annotation @NotImplementedYet\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-12-17T20:58:28Z", "type": "forcePushed"}, {"oid": "fda259e00a32d2e39517df91c663f35d57b5b12b", "url": "https://github.com/hibernate/hibernate-orm/commit/fda259e00a32d2e39517df91c663f35d57b5b12b", "message": "New Test annotation @NotImplementedYet\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-12-17T23:28:57Z", "type": "forcePushed"}, {"oid": "74ddd33900ad7bc53f792a7eb5c70988f7c779b0", "url": "https://github.com/hibernate/hibernate-orm/commit/74ddd33900ad7bc53f792a7eb5c70988f7c779b0", "message": "New Test annotation @NotImplementedYet\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-12-18T21:50:35Z", "type": "forcePushed"}, {"oid": "63d7076fa23bfffbca3a571ff5aebd94ef4f00c6", "url": "https://github.com/hibernate/hibernate-orm/commit/63d7076fa23bfffbca3a571ff5aebd94ef4f00c6", "message": "New Test annotation @NotImplementedYet\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-12-21T13:21:33Z", "type": "forcePushed"}, {"oid": "5635e1db32d3ec97e3a3e11687dfb91e02c556d6", "url": "https://github.com/hibernate/hibernate-orm/commit/5635e1db32d3ec97e3a3e11687dfb91e02c556d6", "message": "New Test annotation @NotImplementedYet\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-12-21T17:30:12Z", "type": "commit"}, {"oid": "5635e1db32d3ec97e3a3e11687dfb91e02c556d6", "url": "https://github.com/hibernate/hibernate-orm/commit/5635e1db32d3ec97e3a3e11687dfb91e02c556d6", "message": "New Test annotation @NotImplementedYet\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-12-21T17:30:12Z", "type": "forcePushed"}]}