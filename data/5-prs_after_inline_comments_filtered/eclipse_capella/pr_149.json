{"pr_number": 149, "pr_title": "Search in addon defaut setting implementation bugzilla/558030/search and replace", "pr_createdAt": "2020-03-19T12:25:17Z", "pr_url": "https://github.com/eclipse/capella/pull/149", "timeline": [{"oid": "cdb4d5960980ffe5c4acfe5fc34c0c8911866918", "url": "https://github.com/eclipse/capella/commit/cdb4d5960980ffe5c4acfe5fc34c0c8911866918", "message": "Add the possibility to search in diagram and note. Introduce the\nSearchItem objects to prepare for the extensibility of these elemements.\n\nChange-Id: I77d4b6dc5662a9f4dcd303ca1ba7e0fbc2bd32b1\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-24T15:02:21Z", "type": "commit"}, {"oid": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "url": "https://github.com/eclipse/capella/commit/f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "message": "- Add the possibility to search in add-on items\n- Set default search settings\n\nChange-Id: I68a91430c50f654bd109352422ec45191c9fd06e\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-24T15:02:27Z", "type": "commit"}, {"oid": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "url": "https://github.com/eclipse/capella/commit/f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "message": "- Add the possibility to search in add-on items\n- Set default search settings\n\nChange-Id: I68a91430c50f654bd109352422ec45191c9fd06e\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-24T15:02:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NzIyMw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397247223", "bodyText": "Even if we only have two elements I think that the best solution for the contains and indexOf operations is a Map<String, Integer> (the key is the category, and the value is the index) instead of a list.\nIn this way the complexity for both contains and indexOf is O(1) and not O(n).\nThis is just a precaution in case the size of the elements increases in the future.", "author": "sandupostaru", "createdAt": "2020-03-24T15:34:05Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -133,4 +143,57 @@ public void refreshOtherSideArea() {\n       otherSideArea.filteredTree.getViewer().refresh();\r\n     }\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MTY4Mw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397251683", "bodyText": "Same as above I think that the best solution for the contains and indexOf operations is a Map<String, Integer> (the key is the category, and the value is the index).\nIn this way the complexity for both contains and indexOf is O(1) and not O(n).\nThis is just a precaution in case the size of the elements increases in the future.", "author": "sandupostaru", "createdAt": "2020-03-24T15:39:47Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaRightSearchForContainerArea.java", "diffHunk": "@@ -33,8 +51,59 @@ protected AbstractSearchForContentProvider getSearchForContentProvider() {\n   protected PatternFilter createPatternFilter() {\r\n     return new PatternFilter();\r\n   }\r\n-  \r\n+\r\n   public void updateSearchSettings() {\r\n     searchPage.getCapellaSearchSettings().setSearchAttributeItems(getCheckedElements());\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+\r\n+    filteredTree.getViewer().setComparator(new ViewerComparator() {\r\n+      @Override\r\n+      public int compare(Viewer viewer, Object e1, Object e2) {\r\n+        if (e1 instanceof SearchForAttributeItem && e2 instanceof SearchForAttributeItem) {\r\n+          SearchForAttributeItem item1 = (SearchForAttributeItem) e1;\r\n+          SearchForAttributeItem item2 = (SearchForAttributeItem) e2;\r\n+          Optional<EAttribute> item1TopAttribute = topAttributes.stream().filter(item1::represent).findAny();\r\n+          Optional<EAttribute> item2TopAttribute = topAttributes.stream().filter(item2::represent).findAny();\r\n+          if (item1TopAttribute.isPresent() && item2TopAttribute.isPresent()) {\r\n+            return topAttributes.indexOf(item1TopAttribute.get()) < topAttributes.indexOf(item2TopAttribute.get()) ? -1\r\n+                : 1;\r\n+          } else if (item1TopAttribute.isPresent()) {\r\n+            return -1;\r\n+          } else if (item2TopAttribute.isPresent()) {\r\n+            return 1;\r\n+          }\r\n+          return ((SearchForItem) e1).getText().compareTo(((SearchForItem) e2).getText());\r\n+        }\r\n+        return 0;\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1Mjc2NA==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397252764", "bodyText": "fixedCategories.contains(category1) becomes fixedCategories.get(category1) != null", "author": "sandupostaru", "createdAt": "2020-03-24T15:41:11Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -133,4 +143,57 @@ public void refreshOtherSideArea() {\n       otherSideArea.filteredTree.getViewer().refresh();\r\n     }\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\r\n+        CapellaSearchConstants.DiagramElements_Key);\r\n+    filteredTree.getViewer().setComparator(new ViewerComparator() {\r\n+      @Override\r\n+      public int compare(Viewer viewer, Object e1, Object e2) {\r\n+        if (e1 instanceof SearchForItem && e2 instanceof SearchForItem) {\r\n+          return ((SearchForItem) e1).getText().compareTo(((SearchForItem) e2).getText());\r\n+        } else if (e1 instanceof String && e2 instanceof String) {\r\n+          String category1 = (String) e1;\r\n+          String category2 = (String) e2;\r\n+          if (fixedCategories.contains(category1) && fixedCategories.contains(category2)) {\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MzE5NQ==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397253195", "bodyText": "fixedCategories.indexOf(category1) becomes fixedCategories.get(category1)", "author": "sandupostaru", "createdAt": "2020-03-24T15:41:43Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -133,4 +143,57 @@ public void refreshOtherSideArea() {\n       otherSideArea.filteredTree.getViewer().refresh();\r\n     }\r\n   }\r\n+\r\n+  @Override\r\n+  protected void createContentArea() {\r\n+    super.createContentArea();\r\n+    List<String> fixedCategories = Arrays.asList(CapellaSearchConstants.ModelElements_Key,\r\n+        CapellaSearchConstants.DiagramElements_Key);\r\n+    filteredTree.getViewer().setComparator(new ViewerComparator() {\r\n+      @Override\r\n+      public int compare(Viewer viewer, Object e1, Object e2) {\r\n+        if (e1 instanceof SearchForItem && e2 instanceof SearchForItem) {\r\n+          return ((SearchForItem) e1).getText().compareTo(((SearchForItem) e2).getText());\r\n+        } else if (e1 instanceof String && e2 instanceof String) {\r\n+          String category1 = (String) e1;\r\n+          String category2 = (String) e2;\r\n+          if (fixedCategories.contains(category1) && fixedCategories.contains(category2)) {\r\n+            return fixedCategories.indexOf(category1) < fixedCategories.indexOf(category2) ? -1 : 1;\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NzU2NA==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397257564", "bodyText": "The classID2DiagItemMap name is kinda deceiving this contains both SearchForDiagramItem and SearchForNoteItem ... change the name or split the cache into 2? Whichever makes more sense", "author": "sandupostaru", "createdAt": "2020-03-24T15:47:05Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java", "diffHunk": "@@ -16,85 +16,110 @@\n import java.util.Map;\r\n import java.util.Optional;\r\n import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n \r\n+import org.eclipse.emf.common.util.URI;\r\n import org.eclipse.emf.ecore.EAttribute;\r\n import org.eclipse.emf.ecore.EClass;\r\n import org.eclipse.emf.ecore.EClassifier;\r\n import org.eclipse.emf.ecore.EDataType;\r\n import org.eclipse.emf.ecore.EPackage;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n import org.eclipse.gmf.runtime.notation.NotationPackage;\r\n import org.eclipse.sirius.viewpoint.ViewpointPackage;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForAttributeItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForClassItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForDiagramItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\r\n+import org.polarsys.kitalpha.ad.common.utils.URIHelper;\r\n+import org.polarsys.kitalpha.ad.services.manager.ViewpointManager;\r\n+import org.polarsys.kitalpha.ad.viewpoint.coredomain.viewpoint.model.Viewpoint;\r\n \r\n /**\r\n  * \r\n  * Cache of classes and attributes to search for\r\n  */\r\n public class SearchForItemCache {\r\n-\r\n-  private Map<String, SearchForItem> searchForClassItemMap;\r\n-  private Map<String, SearchForItem> searchForDiagItemMap;\r\n-  private Map<String, SearchForAttributeItem> searchForAttributeItemMap;\r\n-  private Set<String> packages;\r\n+  private Map<String, SearchForClassItem> classID2ClassItemMap;\r\n+  private Map<String, SearchForClassItem> classID2DiagItemMap;\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1ODU5Nw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397258597", "bodyText": "Can you import the org.polarsys.kitalpha.resourcereuse.model.Resource class please?", "author": "sandupostaru", "createdAt": "2020-03-24T15:48:17Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java", "diffHunk": "@@ -16,85 +16,110 @@\n import java.util.Map;\r\n import java.util.Optional;\r\n import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n \r\n+import org.eclipse.emf.common.util.URI;\r\n import org.eclipse.emf.ecore.EAttribute;\r\n import org.eclipse.emf.ecore.EClass;\r\n import org.eclipse.emf.ecore.EClassifier;\r\n import org.eclipse.emf.ecore.EDataType;\r\n import org.eclipse.emf.ecore.EPackage;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n import org.eclipse.gmf.runtime.notation.NotationPackage;\r\n import org.eclipse.sirius.viewpoint.ViewpointPackage;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForAttributeItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForClassItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForDiagramItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForItem;\r\n import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\r\n+import org.polarsys.kitalpha.ad.common.utils.URIHelper;\r\n+import org.polarsys.kitalpha.ad.services.manager.ViewpointManager;\r\n+import org.polarsys.kitalpha.ad.viewpoint.coredomain.viewpoint.model.Viewpoint;\r\n \r\n /**\r\n  * \r\n  * Cache of classes and attributes to search for\r\n  */\r\n public class SearchForItemCache {\r\n-\r\n-  private Map<String, SearchForItem> searchForClassItemMap;\r\n-  private Map<String, SearchForItem> searchForDiagItemMap;\r\n-  private Map<String, SearchForAttributeItem> searchForAttributeItemMap;\r\n-  private Set<String> packages;\r\n+  private Map<String, SearchForClassItem> classID2ClassItemMap;\r\n+  private Map<String, SearchForClassItem> classID2DiagItemMap;\r\n+  private Map<String, SearchForAttributeItem> attributeName2AttributeItemMap;\r\n+  private Set<Viewpoint> viewpoints;\r\n+  private Map<String, Viewpoint> classID2ViewpointMap;\r\n \r\n   private static SearchForItemCache instance;\r\n \r\n   private SearchForItemCache() {\r\n-    searchForClassItemMap = new HashMap<>();\r\n-    searchForDiagItemMap = new HashMap<>();\r\n-    searchForAttributeItemMap = new HashMap<>();\r\n-    packages = new HashSet<>();\r\n+    classID2ClassItemMap = new HashMap<>();\r\n+    classID2DiagItemMap = new HashMap<>();\r\n+    attributeName2AttributeItemMap = new HashMap<>();\r\n+    viewpoints = new HashSet<>();\r\n+    classID2ViewpointMap = new HashMap<>();\r\n     initModelElements();\r\n     initDiagramElements();\r\n+    initViewpointElements();\r\n+    \r\n+    initAttributes(classID2ClassItemMap);\r\n+    initAttributes(classID2DiagItemMap);\r\n   }\r\n \r\n-  private void initModelElements() {\r\n-    for (String nsURI : EPackage.Registry.INSTANCE.keySet()) {\r\n-      if (nsURI.startsWith(\"http://www.polarsys.org/capella\")) {\r\n-        if (!packages.contains(nsURI)) {\r\n-          packages.add(nsURI);\r\n-          EPackage ePackage = EPackage.Registry.INSTANCE.getEPackage(nsURI);\r\n-          for (EClassifier eClassifier : ePackage.getEClassifiers()) {\r\n+  private void initViewpointElements() {\r\n+    ResourceSet set = new ResourceSetImpl();\r\n+    for (org.polarsys.kitalpha.resourcereuse.model.Resource res : ViewpointManager.getAvailableViewpoints()) {\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MDg3Mw==", "url": "https://github.com/eclipse/capella/pull/149#discussion_r397270873", "bodyText": "Here it is faster to just iterate on the vpClasses instead of iterating on all of the classID2ClassItemMap.keySet(). And in this way vpClasses can just be a simple List, no need for a Set.\nvpClasses.stream().map(cls -> classID2ClassItemMap.get(cls)).filter(Objects::nonNull).collect(Collectors.toSet())", "author": "sandupostaru", "createdAt": "2020-03-24T16:03:32Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/SearchForItemCache.java", "diffHunk": "@@ -109,28 +134,40 @@ public static SearchForItemCache getInstance() {\n     return instance;\r\n   }\r\n \r\n-  public Set<SearchForItem> getSearchForDiagramItems() {\r\n-    return new HashSet<>(searchForDiagItemMap.values());\r\n+  public Set<SearchForItem> getDiagramItems() {\r\n+    return new HashSet<>(classID2DiagItemMap.values());\r\n   }\r\n \r\n-  public Set<SearchForItem> getSearchForClassItems() {\r\n-    return new HashSet<>(searchForClassItemMap.values());\r\n+  public Set<SearchForItem> getClassItems() {\r\n+    return new HashSet<>(classID2ClassItemMap.values());\r\n   }\r\n \r\n-  public Set<SearchForItem> getSearchForAttributeItems() {\r\n-    return new HashSet<>(searchForAttributeItemMap.values());\r\n+  public Set<SearchForItem> getCapellaClassItems() {\r\n+    return classID2ClassItemMap.values().stream().filter(item -> !classID2ViewpointMap.containsKey(item.getUniqueID()))\r\n+        .collect(Collectors.toSet());\r\n+  }\r\n+\r\n+  public Set<SearchForItem> getAttributeItems() {\r\n+    return new HashSet<>(attributeName2AttributeItemMap.values());\r\n+  }\r\n+\r\n+  public Set<SearchForItem> getAddonItems(Viewpoint vp) {\r\n+    Set<String> vpClasses = classID2ViewpointMap.keySet().stream().filter(cls -> classID2ViewpointMap.get(cls) == vp)\r\n+        .collect(Collectors.toSet());\r\n+    return classID2ClassItemMap.keySet().stream().filter(vpClasses::contains)\r\n+        .map(cls -> classID2ClassItemMap.get(cls)).collect(Collectors.toSet());\r", "originalCommit": "f4c49c0d8d02ccce15ef156de290f1567d5b6ec2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "269a57eb7bccd6bad34863e159b126e9f239f1ac", "url": "https://github.com/eclipse/capella/commit/269a57eb7bccd6bad34863e159b126e9f239f1ac", "message": "Take into account review remarks\n\nChange-Id: If94e5108a16a7ea606916bea60af2e4f3f4b0cdb\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-25T08:43:37Z", "type": "commit"}, {"oid": "549ee884237769b30bbb2fb7b31acaccce6cc050", "url": "https://github.com/eclipse/capella/commit/549ee884237769b30bbb2fb7b31acaccce6cc050", "message": "Take into account review remarks\n\nChange-Id: Iabbd0cf1717cae5cc17ee9b8b33dae32c830b423\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-25T09:09:06Z", "type": "commit"}]}