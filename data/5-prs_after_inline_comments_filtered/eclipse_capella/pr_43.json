{"pr_number": 43, "pr_title": "[559169] Fix Sirius preferences initialization", "pr_createdAt": "2020-01-27T14:47:48Z", "pr_url": "https://github.com/eclipse/capella/pull/43", "timeline": [{"oid": "f6e2c1bc39d9fb3588142c8f749eb3a58fdbc749", "url": "https://github.com/eclipse/capella/commit/f6e2c1bc39d9fb3588142c8f749eb3a58fdbc749", "message": "[559169] Fix Sirius preferences initialization\n\n* Initialize preferences in default scope instead of instance scope.\n* For MigrationCommandLine force Sirius preferences in the instance\nscope\n\nBug: 559169\nChange-Id: I81feb62961593847d6ca9ba2475e5a578b140f4a\nSigned-off-by: Laurent Fasani <laurent.fasani@obeo.fr>", "committedDate": "2020-01-30T13:39:56Z", "type": "forcePushed"}, {"oid": "183d9a8fab9f01e083a4969436584e3c1914d38d", "url": "https://github.com/eclipse/capella/commit/183d9a8fab9f01e083a4969436584e3c1914d38d", "message": "[559169] Fix Sirius preferences initialization\n\n* Initialize preferences in default scope instead of instance scope.\n* For MigrationCommandLine force Sirius preferences in the instance\nscope\n\nBug: 559169\nChange-Id: I81feb62961593847d6ca9ba2475e5a578b140f4a\nSigned-off-by: Laurent Fasani <laurent.fasani@obeo.fr>", "committedDate": "2020-02-05T13:50:40Z", "type": "forcePushed"}, {"oid": "e153391a92109f49ed6053225f89249bae4d1869", "url": "https://github.com/eclipse/capella/commit/e153391a92109f49ed6053225f89249bae4d1869", "message": "[559169] Fix Sirius preferences initialization\n\n* Initialize preferences in default scope instead of instance scope.\n* For MigrationCommandLine force Sirius preferences in the instance\nscope\n\nBug: 559169\nChange-Id: I81feb62961593847d6ca9ba2475e5a578b140f4a\nSigned-off-by: Laurent Fasani <laurent.fasani@obeo.fr>", "committedDate": "2020-02-06T10:02:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxMzk4MA==", "url": "https://github.com/eclipse/capella/pull/43#discussion_r375813980", "bodyText": "Is there a differences between accessing the preferences by using the preferenceStore like we here, compared to InstanceScope.INSTANCE.getNode(SiriusEditPlugin.ID); ?\nBecause for obtaining the preferences we do it in the first way, and for resetting them we do it another way. I suppose the result is the same, but this is kinda confusing.", "author": "sandupostaru", "createdAt": "2020-02-06T12:48:10Z", "path": "core/plugins/org.polarsys.capella.core.data.migration/src/org/polarsys/capella/core/data/migration/cmdline/MigrationCommandLine.java", "diffHunk": "@@ -104,15 +109,29 @@ public void migrateAllImportedProjects(Shell shell) {\n    *\n    */\n   public void setRefreshPrefs() {\n+      IPreferenceStore preferenceStore = SiriusEditPlugin.getPlugin().getPreferenceStore();\n+      initialValue_RefreshOnOpening = preferenceStore.getBoolean(SiriusUIPreferencesKeys.PREF_REFRESH_ON_REPRESENTATION_OPENING.name());", "originalCommit": "e153391a92109f49ed6053225f89249bae4d1869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxNTE5Nw==", "url": "https://github.com/eclipse/capella/pull/43#discussion_r375815197", "bodyText": "I am talking about these preferences, see the comment below.", "author": "sandupostaru", "createdAt": "2020-02-06T12:51:05Z", "path": "common/plugins/org.polarsys.capella.common.platform.sirius.customization/src/org/polarsys/capella/common/platform/sirius/customisation/SiriusCustomizationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2006, 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *  Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.common.platform.sirius.customisation;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.internal.preferences.DefaultPreferences;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.preferences.DefaultScope;\n+import org.eclipse.core.runtime.preferences.IEclipsePreferences;\n+import org.eclipse.sirius.business.api.preferences.SiriusPreferencesKeys;\n+import org.eclipse.sirius.common.tools.api.constant.CommonPreferencesConstants;\n+import org.eclipse.sirius.common.tools.api.util.ReflectionHelper;\n+import org.eclipse.sirius.common.ui.SiriusTransPlugin;\n+import org.eclipse.sirius.ui.business.api.preferences.SiriusUIPreferencesKeys;\n+import org.eclipse.sirius.viewpoint.provider.SiriusEditPlugin;\n+import org.eclipse.ui.IWorkbenchPreferenceConstants;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.ui.plugin.AbstractUIPlugin;\n+import org.osgi.framework.BundleContext;\n+import org.polarsys.capella.common.platform.sirius.customisation.uicallback.SiriusUiCallBack;\n+\n+/**\n+ * The activator class controls the plug-in life cycle.\n+ * \n+ */\n+public class SiriusCustomizationPlugin extends AbstractUIPlugin {\n+\n+  /** The plug-in ID. */\n+  public static final String PLUGIN_ID = \"org.polarsys.capella.common.platform.sirius.customisation\"; //$NON-NLS-1$\n+\n+  // The shared instance\n+  private static SiriusCustomizationPlugin plugin;\n+\n+  /**\n+   * The default constructor.\n+   */\n+  public SiriusCustomizationPlugin() {\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n+   */\n+  @Override\n+  public void start(BundleContext context) throws Exception {\n+    super.start(context);\n+    plugin = this;\n+    // Do all initialization inside a try-catch block to ensure plug-in start normally\n+    try {\n+      // Initialize the preferences for Sirius\n+      PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.PROMPT_WHEN_SAVEABLE_STILL_OPEN, false);\n+\n+      // Change the UICallBack to have a specific Session displayed name\n+      SiriusEditPlugin.getPlugin().setUiCallback(new SiriusUiCallBack(SiriusEditPlugin.getPlugin().getUiCallback()));\n+\n+      customizeSiriusDefaultPreferences();\n+    } catch (Exception e) {\n+      getLog().log(new Status(IStatus.ERROR, PLUGIN_ID, IStatus.OK, e.getMessage(), e));\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n+   */\n+  @Override\n+  public void stop(BundleContext context) throws Exception {\n+    plugin = null;\n+    super.stop(context);\n+  }\n+\n+  /**\n+   * Returns the shared instance.\n+   * \n+   * @return the shared instance\n+   */\n+  public static SiriusCustomizationPlugin getDefault() {\n+    return plugin;\n+  }\n+\n+  private void customizeSiriusDefaultPreferences() {\n+    // ----------------\n+    // Preference customization for plugin \"org.eclipse.sirius\"\n+    IEclipsePreferences defaultScope = DefaultScope.INSTANCE.getNode(org.eclipse.sirius.viewpoint.SiriusPlugin.ID);\n+    // Allow by default aird fragment with no representation creation\n+    defaultScope.putBoolean(SiriusPreferencesKeys.PREF_EMPTY_AIRD_FRAGMENT_ON_CONTROL.name(), true);\n+\n+    // Re-apply command line customizations\n+    applyCommandLineCustomizations(defaultScope);\n+\n+    // ----------------\n+    // Preference customization for plugin \"org.eclipse.sirius.common.ui\"\n+    defaultScope = DefaultScope.INSTANCE.getNode(SiriusTransPlugin.PLUGIN_ID);\n+    // Disable Sirius Pre-commit listener behavior since Capella has the same one.\n+    defaultScope.putBoolean(CommonPreferencesConstants.PREF_DEFENSIVE_EDIT_VALIDATION, false);\n+\n+    // Re-apply command line customizations\n+    applyCommandLineCustomizations(defaultScope);\n+\n+    // ----------------\n+    // Preference customization for plugin \"org.eclipse.sirius.ui\"\n+    defaultScope = DefaultScope.INSTANCE.getNode(SiriusEditPlugin.ID);\n+    // Required since Sirius 5.1 since default behavior is not welcome\n+    defaultScope.putBoolean(SiriusUIPreferencesKeys.PREF_SAVE_WHEN_NO_EDITOR.name(), false);\n+    defaultScope.putBoolean(SiriusUIPreferencesKeys.PREF_RELOAD_ON_LAST_EDITOR_CLOSE.name(), false);\n+\n+    // Set the default Sirius scale option (20%).\n+    defaultScope.putInt(SiriusUIPreferencesKeys.PREF_SCALE_LEVEL_DIAGRAMS_ON_EXPORT.name(), 2);\n+\n+    // Don't use colors from odesign in diagram palettes\n+    defaultScope.putBoolean(SiriusUIPreferencesKeys.PREF_DISPLAY_VSM_USER_FIXED_COLOR_IN_PALETTE.name(), false);", "originalCommit": "e153391a92109f49ed6053225f89249bae4d1869", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxNTM5MQ==", "url": "https://github.com/eclipse/capella/pull/43#discussion_r375815391", "bodyText": "@lfasani If I understand correctly, we need to do this dirty hack, because we modify at runtime the default preferences, so we need to ensure that these changes are reflected in the command line default preferences.\nWhat if instead we remove all of this code from here, and we put all the preferences in org.polarsys.capella.rcp\\plugin_customization.ini, then we don't need to do this hack anymore right? The command line preferences will be automatically syncronized.", "author": "sandupostaru", "createdAt": "2020-02-06T12:51:28Z", "path": "common/plugins/org.polarsys.capella.common.platform.sirius.customization/src/org/polarsys/capella/common/platform/sirius/customisation/SiriusCustomizationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*******************************************************************************\n+ * Copyright (c) 2006, 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *  Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.common.platform.sirius.customisation;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.internal.preferences.DefaultPreferences;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.preferences.DefaultScope;\n+import org.eclipse.core.runtime.preferences.IEclipsePreferences;\n+import org.eclipse.sirius.business.api.preferences.SiriusPreferencesKeys;\n+import org.eclipse.sirius.common.tools.api.constant.CommonPreferencesConstants;\n+import org.eclipse.sirius.common.tools.api.util.ReflectionHelper;\n+import org.eclipse.sirius.common.ui.SiriusTransPlugin;\n+import org.eclipse.sirius.ui.business.api.preferences.SiriusUIPreferencesKeys;\n+import org.eclipse.sirius.viewpoint.provider.SiriusEditPlugin;\n+import org.eclipse.ui.IWorkbenchPreferenceConstants;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.ui.plugin.AbstractUIPlugin;\n+import org.osgi.framework.BundleContext;\n+import org.polarsys.capella.common.platform.sirius.customisation.uicallback.SiriusUiCallBack;\n+\n+/**\n+ * The activator class controls the plug-in life cycle.\n+ * \n+ */\n+public class SiriusCustomizationPlugin extends AbstractUIPlugin {\n+\n+  /** The plug-in ID. */\n+  public static final String PLUGIN_ID = \"org.polarsys.capella.common.platform.sirius.customisation\"; //$NON-NLS-1$\n+\n+  // The shared instance\n+  private static SiriusCustomizationPlugin plugin;\n+\n+  /**\n+   * The default constructor.\n+   */\n+  public SiriusCustomizationPlugin() {\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n+   */\n+  @Override\n+  public void start(BundleContext context) throws Exception {\n+    super.start(context);\n+    plugin = this;\n+    // Do all initialization inside a try-catch block to ensure plug-in start normally\n+    try {\n+      // Initialize the preferences for Sirius\n+      PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.PROMPT_WHEN_SAVEABLE_STILL_OPEN, false);\n+\n+      // Change the UICallBack to have a specific Session displayed name\n+      SiriusEditPlugin.getPlugin().setUiCallback(new SiriusUiCallBack(SiriusEditPlugin.getPlugin().getUiCallback()));\n+\n+      customizeSiriusDefaultPreferences();\n+    } catch (Exception e) {\n+      getLog().log(new Status(IStatus.ERROR, PLUGIN_ID, IStatus.OK, e.getMessage(), e));\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * \n+   * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n+   */\n+  @Override\n+  public void stop(BundleContext context) throws Exception {\n+    plugin = null;\n+    super.stop(context);\n+  }\n+\n+  /**\n+   * Returns the shared instance.\n+   * \n+   * @return the shared instance\n+   */\n+  public static SiriusCustomizationPlugin getDefault() {\n+    return plugin;\n+  }\n+\n+  private void customizeSiriusDefaultPreferences() {\n+    // ----------------\n+    // Preference customization for plugin \"org.eclipse.sirius\"\n+    IEclipsePreferences defaultScope = DefaultScope.INSTANCE.getNode(org.eclipse.sirius.viewpoint.SiriusPlugin.ID);\n+    // Allow by default aird fragment with no representation creation\n+    defaultScope.putBoolean(SiriusPreferencesKeys.PREF_EMPTY_AIRD_FRAGMENT_ON_CONTROL.name(), true);\n+\n+    // Re-apply command line customizations\n+    applyCommandLineCustomizations(defaultScope);\n+\n+    // ----------------\n+    // Preference customization for plugin \"org.eclipse.sirius.common.ui\"\n+    defaultScope = DefaultScope.INSTANCE.getNode(SiriusTransPlugin.PLUGIN_ID);\n+    // Disable Sirius Pre-commit listener behavior since Capella has the same one.\n+    defaultScope.putBoolean(CommonPreferencesConstants.PREF_DEFENSIVE_EDIT_VALIDATION, false);\n+\n+    // Re-apply command line customizations\n+    applyCommandLineCustomizations(defaultScope);\n+\n+    // ----------------\n+    // Preference customization for plugin \"org.eclipse.sirius.ui\"\n+    defaultScope = DefaultScope.INSTANCE.getNode(SiriusEditPlugin.ID);\n+    // Required since Sirius 5.1 since default behavior is not welcome\n+    defaultScope.putBoolean(SiriusUIPreferencesKeys.PREF_SAVE_WHEN_NO_EDITOR.name(), false);\n+    defaultScope.putBoolean(SiriusUIPreferencesKeys.PREF_RELOAD_ON_LAST_EDITOR_CLOSE.name(), false);\n+\n+    // Set the default Sirius scale option (20%).\n+    defaultScope.putInt(SiriusUIPreferencesKeys.PREF_SCALE_LEVEL_DIAGRAMS_ON_EXPORT.name(), 2);\n+\n+    // Don't use colors from odesign in diagram palettes\n+    defaultScope.putBoolean(SiriusUIPreferencesKeys.PREF_DISPLAY_VSM_USER_FIXED_COLOR_IN_PALETTE.name(), false);\n+\n+    // Re-apply command line customizations\n+    applyCommandLineCustomizations(defaultScope);\n+  }\n+\n+  /**\n+   * Method to re-apply the command line customizations done during {@link DefaultPreferences#load} after modification\n+   * of default values done from an other plugin.\n+   * \n+   * @param preferencesNode\n+   *      the default preference node to customize.\n+   */\n+  private void applyCommandLineCustomizations(IEclipsePreferences preferencesNode) {\n+    // Re-apply command line customizations.\n+    if (preferencesNode instanceof DefaultPreferences) {\n+      try {\n+        ReflectionHelper.invokeMethod(preferencesNode, DefaultPreferences.class, \"applyCommandLineDefaults\", new Class[] {}, new Object[] {}, true); //$NON-NLS-1$\n+      } catch (SecurityException | NoSuchMethodException | IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\n+        getLog().log(new Status(IStatus.ERROR, PLUGIN_ID, IStatus.ERROR, \"Failed to apply plugin customization from command line arguments for plugin \" + PLUGIN_ID, e)); //$NON-NLS-1$\n+      }\n+    }\n+  }\n+}", "originalCommit": "e153391a92109f49ed6053225f89249bae4d1869", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1MzIyMw==", "url": "https://github.com/eclipse/capella/pull/43#discussion_r377053223", "bodyText": "After more tests it seems that using preferences.ini in the root of the capella plugin the default preference set by sirius are not overriden by Capella\nIn my opinion the way the default preference is initialized is\n\nPreferenceInitialiser Sirius\noverriden by the CommandLine\nthen overriden by PreferenceInitializer Capella (I would have thought it is the same thing with preference.ini but in my case preference.ini was not even taken into account)\n\nDifficult to control what happen using preferences.ini so I prefer the way this commit has been done even if it looks like a hack.\nIn any case, the java doc indicates that preference should be initialized only by the plugin that declares it which is not what we do. So anyway, I do not do eat the right way.", "author": "lfasani", "createdAt": "2020-02-10T13:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxNTM5MQ=="}], "type": "inlineReview"}, {"oid": "70ec0d9fa2daad94b5a630b0fc249dfc22739414", "url": "https://github.com/eclipse/capella/commit/70ec0d9fa2daad94b5a630b0fc249dfc22739414", "message": "[559169] Fix Sirius preferences initialization\n\n* Initialize preferences in default scope instead of instance scope.\n* For MigrationCommandLine force Sirius preferences in the instance\nscope\n\nBug: 559169\nChange-Id: I81feb62961593847d6ca9ba2475e5a578b140f4a\nSigned-off-by: Laurent Fasani <laurent.fasani@obeo.fr>", "committedDate": "2020-02-10T15:55:15Z", "type": "commit"}, {"oid": "c66d0cb03b4da4c703867e22366e932a4afc0896", "url": "https://github.com/eclipse/capella/commit/c66d0cb03b4da4c703867e22366e932a4afc0896", "message": "[559169] Adapt the Capella Sirius Preference Customization Test\n\nBug: 559169\nChange-Id: Ied428e8e1f416b3f73c325f73aaea4fd06b31390\nSigned-off-by: Sandu Postaru <sandu.postaru@thalesgroup.com>", "committedDate": "2020-02-10T15:55:20Z", "type": "commit"}, {"oid": "c66d0cb03b4da4c703867e22366e932a4afc0896", "url": "https://github.com/eclipse/capella/commit/c66d0cb03b4da4c703867e22366e932a4afc0896", "message": "[559169] Adapt the Capella Sirius Preference Customization Test\n\nBug: 559169\nChange-Id: Ied428e8e1f416b3f73c325f73aaea4fd06b31390\nSigned-off-by: Sandu Postaru <sandu.postaru@thalesgroup.com>", "committedDate": "2020-02-10T15:55:20Z", "type": "forcePushed"}]}