{"pr_number": 2219, "pr_title": "\"Soft-delete\" filter support for Interleaved collections", "pr_createdAt": "2020-02-26T22:44:43Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219", "timeline": [{"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-02-26T22:44:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NjU1Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385166556", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Return Where cause of the property. Could be null.\n          \n          \n            \n            \t * Return {@code WHERE} clause of the property. Could be {@code null}.", "author": "meltsufin", "createdAt": "2020-02-27T14:55:18Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,10 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return Where cause of the property. Could be null.", "originalCommit": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NjYwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385166604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return an optional {@code Where} cause of the property.\n          \n          \n            \n            \t * @return an optional {@code WHERE} cause of the property.", "author": "meltsufin", "createdAt": "2020-02-27T14:55:22Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,10 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return Where cause of the property. Could be null.\n+\t * @return an optional {@code Where} cause of the property.", "originalCommit": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NzU0Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385167543", "bodyText": "\"overwrites the class annotation\"?\nWhat does that mean?", "author": "meltsufin", "createdAt": "2020-02-27T14:56:39Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/Where.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.mapping;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * Where clause to add to the element Entity or target entity of a collection.\n+ * The clause is written in SQL. A common use case here is for soft-deletes.\n+ * It can be used on class level or on interleaved list as well.\n+ * It overwrites the class annotation when used on an interleaved list of the same type.", "originalCommit": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4OTY5MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385189690", "bodyText": "It means that English is not my native, sorry for that.\nI wanted to say that IF the annotation is used on an interleaved list column on some \"parent\" entity it will overwrite the same annotation on the child entity class.\nFor instance - a \"child\" class is annotated like\n@Table(name = \"CHILDREN\")\n@Where(\"deleted=false\")\npublic class Child  {\n   ...\n}\nBut we can create some \"patent\" with a column like\n    @Column\n    @Where(\"deleted=true\")\n    private List<Child> children;\nIn such case the @Where(\"deleted=true\") will be used when we fetch interlived list of the \"parent\" entity.", "author": "s13o", "createdAt": "2020-02-27T15:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxODU2NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385218565", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * It overwrites the class annotation when used on an interleaved list of the same type.\n          \n          \n            \n             * It overwrites the class-level `@Where` annotation when used on an interleaved list property of the same type.", "author": "meltsufin", "createdAt": "2020-02-27T16:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NzU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2ODg1OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385168858", "bodyText": "You are repeating these two lines in several places. Please create a private utility method to reduce duplication.", "author": "meltsufin", "createdAt": "2020-02-27T14:58:49Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -162,6 +165,11 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\t\t\t\t.getPersistentProperty(o.getProperty());\n \t\t\t\t\treturn (property != null) ? property.getColumnName() : o.getProperty();\n \t\t\t\t});\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))", "originalCommit": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5MDc2Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385190763", "bodyText": "ok, will check, thanks", "author": "s13o", "createdAt": "2020-02-27T15:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2ODg1OA=="}], "type": "inlineReview"}, {"oid": "07eeabedd5a38db52673153b8e034317100551c3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/07eeabedd5a38db52673153b8e034317100551c3", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>", "committedDate": "2020-02-27T15:21:10Z", "type": "commit"}, {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d037dfbca7958c41279b33e3669be055d7d596c3", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/Where.java\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>", "committedDate": "2020-02-27T16:25:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNDkxMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385234913", "bodyText": "Rename to combine to avoid confusion with sql JOIN", "author": "dmitry-s", "createdAt": "2020-02-27T16:48:32Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,27 +227,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\tor.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))\n+\t\t\t\t.map(Where::value).orElse(\"\");\n+\t\tString condition = join(or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\n+\t\t\t\t: or.stream().collect(Collectors.joining(\") OR (\", \"(\", \")\")), whereCause);\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ persistentEntity.tableName() + (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n+\tprivate static String join(String cond1, String cond2) {", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMDg5Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385310897", "bodyText": "ok", "author": "s13o", "createdAt": "2020-02-27T19:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNDkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNzc0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385237741", "bodyText": "you don't need or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\nyou should be able to do something like or.stream().map(s -> \"(\"+s\")\").collect(Collectors.joining(\" OR \"))", "author": "dmitry-s", "createdAt": "2020-02-27T16:52:38Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,27 +227,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\tor.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))\n+\t\t\t\t.map(Where::value).orElse(\"\");\n+\t\tString condition = join(or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\n+\t\t\t\t: or.stream().collect(Collectors.joining(\") OR (\", \"(\", \")\")), whereCause);", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNDkyMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385314921", "bodyText": "I did it as a first attempt. The stream always returns some value and when we have only one element it became wrapped by bracket - it looks dummy. We need a custom \"Joiner\" to prevent extra brackets when the stream has a single entry.", "author": "s13o", "createdAt": "2020-02-27T19:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNzc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NDY1Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385364653", "bodyText": "That's ok if the only element it's wrapped in parentheses. I'm ok with that if that's the price to pay for more readable code :)\n  static String orJoin(List<String> parts){\n    return parts.stream().map(s -> \"(\"+s+\")\").collect(Collectors.joining(\" OR \"));\n  }\n.....\n  System.out.println(orJoin(Arrays.asList()));\n  System.out.println(orJoin(Arrays.asList(\"one\")));\n  System.out.println(orJoin(Arrays.asList(\"one\", \"two\")));\n\ngives this:\n\n(one)\n(one) OR (two)\n\nIt looks totally acceptable to me.", "author": "dmitry-s", "createdAt": "2020-02-27T20:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNzc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2Nzg4NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385367884", "bodyText": "it's better to use Collectors.joining(\") OR (\", \"(\", \")\") instead of map(s -> \"(\"+s+\")\").\nOk, I'll follow your advice but I'll update some tests to satisfy additional brackets - I tried not to update any test that not related directly to my change", "author": "s13o", "createdAt": "2020-02-27T20:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNzc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MDEwMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385240102", "bodyText": "You have exactly 2 parts at that point. Just return \"(\"+cond1+\") AND (\"+cond2+\")\"", "author": "dmitry-s", "createdAt": "2020-02-27T16:56:24Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,27 +227,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\tor.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))\n+\t\t\t\t.map(Where::value).orElse(\"\");\n+\t\tString condition = join(or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\n+\t\t\t\t: or.stream().collect(Collectors.joining(\") OR (\", \"(\", \")\")), whereCause);\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ persistentEntity.tableName() + (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n+\tprivate static String join(String cond1, String cond2) {\n+\t\tif (cond1.isEmpty()) {\n+\t\t\treturn cond2;\n+\t\t}\n+\t\tif (cond2.isEmpty()) {\n+\t\t\treturn cond1;\n+\t\t}\n+\t\tStringJoiner where = new StringJoiner(\") AND (\", \"(\", \")\");", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNTU4OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385315589", "bodyText": "No, some of them or even both can be an empty string.\nNot null but empty", "author": "s13o", "createdAt": "2020-02-27T19:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MDEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1OTg3Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385359872", "bodyText": "yes, but you check if they are empty in lines 243-248\nafter that we know we have 2 parts and they are not empty", "author": "dmitry-s", "createdAt": "2020-02-27T20:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MDEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2ODI3Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385368273", "bodyText": "will check it again, thanks", "author": "s13o", "createdAt": "2020-02-27T21:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MDEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MjE5MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385242191", "bodyText": "create getWhere() method in SpannerPersistentEntity and use it instead of findMergedAnnotation", "author": "dmitry-s", "createdAt": "2020-02-27T16:59:35Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -324,7 +351,11 @@ private static String getChildrenSubquery(\n \t\t\t\tClass childType = spannerPersistentProperty.getColumnInnerType();\n \t\t\t\tSpannerPersistentEntity childPersistentEntity = mappingContext.getPersistentEntity(childType);\n \t\t\t\tjoiner.add(getChildrenStructsQuery(\n-\t\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName()));\n+\t\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName(),\n+\t\t\t\t\t\tOptional.ofNullable(spannerPersistentProperty.getWhere().map(Where::value)\n+\t\t\t\t\t\t\t\t.orElseGet(() -> Optional.ofNullable(AnnotatedElementUtils\n+\t\t\t\t\t\t\t\t\t\t.findMergedAnnotation(childType, Where.class)).map(Where::value).orElse(null))))", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNjEwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385316104", "bodyText": "ok, will try\nThanks!", "author": "s13o", "createdAt": "2020-02-27T19:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MjE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NDczMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385244733", "bodyText": "create getWhere() method in SpannerPersistentEntity", "author": "dmitry-s", "createdAt": "2020-02-27T17:03:51Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -213,9 +216,11 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\t\tSpannerPersistentEntity<T> persistentEntity) {\n \t\t//an entity is eligible if all of the following true:\n \t\t//1. entity has eager loaded properties\n-\t\t//2. there are no read options, as they can't be applied to a query\n-\t\t//3. key set does not have ranges, as they can't be used in a query\n+\t\t//2. entity has \"Where\" annotation\n+\t\t//3. there are no read options, as they can't be applied to a query\n+\t\t//4. key set does not have ranges, as they can't be used in a query\n \t\treturn persistentEntity.hasEagerlyLoadedProperties() &&\n+\t\t\t\tpersistentEntity.findAnnotation(Where.class) == null &&", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2ODUyNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385368527", "bodyText": "clear", "author": "s13o", "createdAt": "2020-02-27T21:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NDczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385246934", "bodyText": "Could you explain why can't an entity be eagerly loaded if it is annotated with @Where?", "author": "dmitry-s", "createdAt": "2020-02-27T17:07:41Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -213,9 +216,11 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\t\tSpannerPersistentEntity<T> persistentEntity) {\n \t\t//an entity is eligible if all of the following true:\n \t\t//1. entity has eager loaded properties\n-\t\t//2. there are no read options, as they can't be applied to a query\n-\t\t//3. key set does not have ranges, as they can't be used in a query\n+\t\t//2. entity has \"Where\" annotation", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxODI4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385318282", "bodyText": "The method isEligibleForEagerFetch is used to determine can we use readContext.read to fetch the entity or should create an SQL query and execute it by the method executeReadQueryAndResolveChildren.\nSo when we have an \"eager interleaved\" or when we have a @Where annotation on the interleaved property - we can't fetch it with readContext.read but should create a query instead. Probably you find a bug - if @Where is located on  a \"lazy interleaved\" we can use a readContext.read. Thanks!", "author": "s13o", "createdAt": "2020-02-27T19:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNjY5OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385326699", "bodyText": "I think the isEligibleForEagerFetch should be renamed", "author": "s13o", "createdAt": "2020-02-27T19:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NzQ5Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385357493", "bodyText": "isEligibleForEagerFetch is intended to determine if we can and should run executeReadQueryAndResolveChildren instead of readContext.read, hence the name.\nIf someone want's to use read and pass read options - we need to call readContext.read, we can't just replace it with a call to executeReadQueryAndResolveChildren and ignore options. The interleaved children will have to be loaded lazily.", "author": "dmitry-s", "createdAt": "2020-02-27T20:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MTY1Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385371656", "bodyText": "ok, I gave a wrong explanation, sorry.\nIt is not related to interleaved fields.\nWhat if the entity itself has a class annotation @Where?\nIn such a case, we can't use the readContext.read to fetch it but instead, we should build an SQL query with \"SQL where condition\"  from the annotation we have.", "author": "s13o", "createdAt": "2020-02-27T21:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4NjQ0NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385386444", "bodyText": "I see your point.\nIn that case will need to modify the logic a little bit.\nWhat we need to do is throw an exception when we have @Interleaved (eager) children or @Where present and options are not null.\nWe can't just silently ignore the options if we can't pass them. Instead, we should let the user know that something is wrong.\nDoes it make sense?", "author": "dmitry-s", "createdAt": "2020-02-27T21:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NTE0Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385395147", "bodyText": "Options? what options?\nHow they affect each other?\nwe have a code\n\tprivate <T> boolean isEligibleForEagerFetch(KeySet keys, SpannerReadOptions options,\n\t\t\tSpannerPersistentEntity<T> persistentEntity) {\n\t\treturn persistentEntity.hasEagerlyLoadedProperties() &&\n\t\t\t\tpersistentEntity.findAnnotation(Where.class) == null &&\n\t\t\t\toptions == null && !keys.getRanges().iterator().hasNext();\n\t}\ndo you propose to throw an exception here like this?\n...\n\t\tif (options!=null && (persistentEntity.hasEagerlyLoadedProperties() ||  persistentEntity.getWhere() != null )){\n\t\t\tthrow new IllegalArgumentException(\"bla-bla-bla\");\n\t\t}\n\n\t\treturn persistentEntity.hasEagerlyLoadedProperties() &&\n\t\t\t\toptions == null && !keys.getRanges().iterator().hasNext();\n...\nwell, can we better convert the SpannerReadOptions to the SpannerQueryOption and throw an exception when it is impossible?", "author": "s13o", "createdAt": "2020-02-27T21:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODY0Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385398642", "bodyText": "Another idea - the method readContext.read is very simple, It has completely another design and another idea with \"query\" methods and related feature-annotations (Interleaved, Where, whatever else). Can we just completely ignore these annotations for readContext.read - I mean for SpannerOperations#read? We should just stop the usage of this method in repositories", "author": "s13o", "createdAt": "2020-02-27T22:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwMDc1Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385400757", "bodyText": "or we can design the @Where to be easily converted to the KeySet.\n@Where` - is a new feature and we can do it as we like.", "author": "s13o", "createdAt": "2020-02-27T22:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQwOTU1MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385409550", "bodyText": "There are 3 separate branches\n\nno need for eager or @Where - we call readContext.read\nwe need eager or @Where and options are null - in this case we call executeReadQueryAndResolveChildren\nwe need eager or @Where and options are not null - we throw an exception\n\nWhat do you think about that approach?", "author": "dmitry-s", "createdAt": "2020-02-27T22:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMDE1Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385410152", "bodyText": "deal", "author": "s13o", "createdAt": "2020-02-27T22:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTAxMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385365013", "bodyText": "rename to orParts", "author": "dmitry-s", "createdAt": "2020-02-27T20:53:29Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -201,14 +209,15 @@ private SpannerStatementQueryExecutor() {\n \tpublic static <T> Statement buildQuery(KeySet keySet,\n \t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n \t\t\tSpannerMappingContext mappingContext) {\n-\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n+\t\tList<String> or = new ArrayList<>();", "originalCommit": "d037dfbca7958c41279b33e3669be055d7d596c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3MjYwNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385372607", "bodyText": "ok", "author": "s13o", "createdAt": "2020-02-27T21:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTAxMw=="}], "type": "inlineReview"}, {"oid": "12716af93b258549ae98e8a818697c4026906bdb", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/12716af93b258549ae98e8a818697c4026906bdb", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-03-03T07:58:27Z", "type": "commit"}, {"oid": "841c0b476f6dddd57a169263f81190d20ca0b639", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/841c0b476f6dddd57a169263f81190d20ca0b639", "message": "Merge branch 'feature/2202' of https://github.com/s13o/spring-cloud-gcp into feature/2202\n\n\u0001 Conflicts:\n\u0001\tspring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "committedDate": "2020-03-03T08:01:48Z", "type": "commit"}, {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/06998a141c352ba74aa6d7d4529cf99b5e40f448", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-03-03T10:40:14Z", "type": "commit"}, {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/06998a141c352ba74aa6d7d4529cf99b5e40f448", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-03-03T10:40:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMjg2Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387732866", "bodyText": "This construction persistentEntity.getWhere().isEmpty() is used in multiple places.  Please create hasWhere() method to improve readability.", "author": "dmitry-s", "createdAt": "2020-03-04T15:16:33Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -162,6 +164,9 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\t\t\t\t.getPersistentProperty(o.getProperty());\n \t\t\t\t\treturn (property != null) ? property.getColumnName() : o.getProperty();\n \t\t\t\t});\n+\t\tif (!persistentEntity.getWhere().isEmpty()) {", "originalCommit": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTM0NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387735344", "bodyText": "Move this method to SpannerQueryOptions class and rename to fromReadOptions", "author": "dmitry-s", "createdAt": "2020-03-04T15:20:09Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -209,14 +213,35 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\treturn entities;\n \t}\n \n-\tprivate <T> boolean isEligibleForEagerFetch(KeySet keys, SpannerReadOptions options,\n-\t\t\tSpannerPersistentEntity<T> persistentEntity) {\n-\t\t//an entity is eligible if all of the following true:\n-\t\t//1. entity has eager loaded properties\n-\t\t//2. there are no read options, as they can't be applied to a query\n-\t\t//3. key set does not have ranges, as they can't be used in a query\n-\t\treturn persistentEntity.hasEagerlyLoadedProperties() &&\n-\t\t\t\toptions == null && !keys.getRanges().iterator().hasNext();\n+\t/**\n+\t * In many cases {@link KeySet} with {@link SpannerReadOptions} are compatible with\n+\t * {@link SpannerReadOptions}. The method throws exception when it is impossible.\n+\t * @param options read-parameters\n+\t * @return query-parameters\n+\t * @throws IllegalArgumentException when {@link SpannerQueryOptions} can't be converted to {@link SpannerQueryOptions}\n+\t * \tor {@code keys} have \"ranges\".\n+\t */\n+\tprivate static SpannerQueryOptions toQueryOption(KeySet keys, SpannerReadOptions options) throws IllegalArgumentException {", "originalCommit": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MzY5OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387983699", "bodyText": "Another option is to move this method to SpannerReadOptions, so you could call it like this:\noptions.toQueryOptions()", "author": "dmitry-s", "createdAt": "2020-03-04T22:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTI5MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387985291", "bodyText": "Ah, well, clear", "author": "s13o", "createdAt": "2020-03-04T22:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NDM0NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387744344", "bodyText": "typos, should be keyClause, whereClause", "author": "dmitry-s", "createdAt": "2020-03-04T15:32:24Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyCause = orParts.stream().collect(\n+\t\t\t\t() -> new StringJoiner(\") OR (\", \"(\", \")\").setEmptyValue(\"\"),\n+\t\t\t\tStringJoiner::add, StringJoiner::merge).toString();\n+\t\tString condition = combine(keyCause, whereCause != null ? whereCause : \"\");\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ (StringUtils.isEmpty(index) ? persistentEntity.tableName() : String.format(\"%s@{FORCE_INDEX=%s}\", persistentEntity.tableName(), index))\n+\t\t\t\t+ (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n \tprivate static <C, P> String getChildrenStructsQuery(\n \t\t\tSpannerPersistentEntity<C> childPersistentEntity,\n \t\t\tSpannerPersistentEntity<P> parentPersistentEntity, SpannerMappingContext mappingContext,\n-\t\t\tString columnName) {\n+\t\t\tString columnName, String whereCause) {\n \t\tString tableName = childPersistentEntity.tableName();\n \t\tList<SpannerPersistentProperty> parentKeyProperties = parentPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tString condition = parentKeyProperties.stream()\n+\t\tString keyCause = parentKeyProperties.stream()\n \t\t\t\t.map(keyProp -> tableName + \".\" + keyProp.getColumnName()\n \t\t\t\t\t\t+ \" = \"\n \t\t\t\t\t\t+ parentPersistentEntity.tableName() + \".\" + keyProp.getColumnName())\n \t\t\t\t.collect(Collectors.joining(\" AND \"));\n-\n+\t\tString condition = combine(keyCause, whereCause);", "originalCommit": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0ODQ5Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387748496", "bodyText": "Can we use orParts.stream().map(s -> \"(\"+s+\")\").collect(Collectors.joining(\" OR \")) instead?\nThat would be shorter and more readable.", "author": "dmitry-s", "createdAt": "2020-03-04T15:38:11Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyCause = orParts.stream().collect(\n+\t\t\t\t() -> new StringJoiner(\") OR (\", \"(\", \")\").setEmptyValue(\"\"),", "originalCommit": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Mjk4MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387852980", "bodyText": "I thought I found a way to not wrap an item by parentheses when the stream has a single value only. But I was wrong. I'll switch to your implementation, thanks.", "author": "s13o", "createdAt": "2020-03-04T18:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0ODQ5Ng=="}], "type": "inlineReview"}, {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4e555ab6b5b56a10c8e238f3284f4697775b3e41", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-03-06T20:34:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MjY4MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390382681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>\n          \n          \n            \n            \t *      <li>we need \"eager\" or \"Where\", {@code options} and {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>", "author": "dmitry-s", "createdAt": "2020-03-10T15:04:19Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java", "diffHunk": "@@ -85,14 +86,24 @@\n \n \t/**\n \t * Finds objects stored from their keys.\n+\t * When the entity has a {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} class annotation\n+\t * or some property is eagerly interleaved the SQL query will be performed instead of the\n+\t * {@link ReadContext#read} to fetch such properties and satisfy the {@code sql where} condition.\n \t * @param entityClass the type of the object to retrieve.\n \t * @param keys the keys of the objects to retrieve.\n \t * @param options the Cloud Spanner read options with which to conduct the read operation.\n \t * @param <T> the type of the object to retrieve.\n \t * @return a list of objects that could be found using the given keys. If no keys could be\n \t * found the list will be empty.\n+\t * @throws IllegalArgumentException when a combination of provided parameters and annotations does not allow to take\n+\t *  unambiguous decision about the way to perform the operation. Such algorithm is used:\n+\t *  <ul>\n+\t *      <li>no need for \"eager\" or \"Where\" - we call {@link ReadContext#read}</li>\n+\t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MzAzMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390383031", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} can't be converted to {@link SpannerQueryOptions} - an exception will be thrown</li>\n          \n          \n            \n            \t *      <li>otherwise an exception will be thrown</li>", "author": "dmitry-s", "createdAt": "2020-03-10T15:04:50Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java", "diffHunk": "@@ -85,14 +86,24 @@\n \n \t/**\n \t * Finds objects stored from their keys.\n+\t * When the entity has a {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} class annotation\n+\t * or some property is eagerly interleaved the SQL query will be performed instead of the\n+\t * {@link ReadContext#read} to fetch such properties and satisfy the {@code sql where} condition.\n \t * @param entityClass the type of the object to retrieve.\n \t * @param keys the keys of the objects to retrieve.\n \t * @param options the Cloud Spanner read options with which to conduct the read operation.\n \t * @param <T> the type of the object to retrieve.\n \t * @return a list of objects that could be found using the given keys. If no keys could be\n \t * found the list will be empty.\n+\t * @throws IllegalArgumentException when a combination of provided parameters and annotations does not allow to take\n+\t *  unambiguous decision about the way to perform the operation. Such algorithm is used:\n+\t *  <ul>\n+\t *      <li>no need for \"eager\" or \"Where\" - we call {@link ReadContext#read}</li>\n+\t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>\n+\t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} can't be converted to {@link SpannerQueryOptions} - an exception will be thrown</li>", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDU1Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390384556", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * The method does this conversion or throws an exception when such is impossible.\n          \n          \n            \n            \t * The method executes such conversion or throws an exception if it's impossible.", "author": "dmitry-s", "createdAt": "2020-03-10T15:06:48Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerReadOptions.java", "diffHunk": "@@ -92,4 +93,27 @@ public SpannerReadOptions setAllowPartialRead(boolean allowPartialRead) {\n \t\treturn this.getOptions();\n \t}\n \n+\t/**\n+\t * In many cases a {@link SpannerReadOptions} class instance could be compatible with {@link SpannerQueryOptions}.\n+\t * The method does this conversion or throws an exception when such is impossible.", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjgyNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390392826", "bodyText": "Use fully qualified name for toArray()", "author": "dmitry-s", "createdAt": "2020-03-10T15:17:31Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -473,35 +484,27 @@ private ResultSet performQuery(Statement statement, SpannerQueryOptions options)\n \t\treturn resultSet;\n \t}\n \n-\tprivate <T> List<T> executeReadQueryAndResolveChildren(KeySet keys, SpannerPersistentEntity<T> persistentEntity) {\n+\tprivate <T> List<T> executeReadQueryAndResolveChildren(KeySet keys, SpannerPersistentEntity<T> persistentEntity,\n+\t\t\tSpannerQueryOptions options, String index) {\n \t\tStatement statement = SpannerStatementQueryExecutor.buildQuery(keys, persistentEntity,\n \t\t\t\tthis.spannerEntityProcessor.getWriteConverter(),\n-\t\t\t\tthis.mappingContext);\n+\t\t\t\tthis.mappingContext, index);\n \n-\t\treturn resolveChildEntities(query(persistentEntity.getType(), statement, null), null);\n+\t\treturn resolveChildEntities(query(persistentEntity.getType(), statement, options), options.getIncludeProperties());\n \t}\n \n \tprivate ResultSet executeRead(String tableName, KeySet keys, Iterable<String> columns,\n \t\t\tSpannerReadOptions options) {\n \n \t\tlong startTime = LOGGER.isDebugEnabled() ? System.currentTimeMillis() : 0;\n \n-\t\tResultSet resultSet;\n-\n \t\tReadContext readContext = (options != null && options.getTimestampBound() != null)\n \t\t\t\t? getReadContext(options.getTimestampBound())\n \t\t\t\t: getReadContext();\n \n-\t\tif (options == null) {\n-\t\t\tresultSet = readContext.read(tableName, keys, columns);\n-\t\t}\n-\t\telse if (options.getIndex() != null) {\n-\t\t\tresultSet = readContext.readUsingIndex(tableName, options.getIndex(), keys,\n-\t\t\t\t\tcolumns, options.getOptions());\n-\t\t}\n-\t\telse {\n-\t\t\tresultSet = readContext.read(tableName, keys, columns, options.getOptions());\n-\t\t}\n+\t\tfinal ResultSet resultSet = options != null && options.getIndex() != null\n+\t\t\t\t? readContext.readUsingIndex(tableName, options.getIndex(), keys, columns, options.getOptions())\n+\t\t\t\t: readContext.read(tableName, keys, columns, options == null ? toArray() : options.getOptions());", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NzI2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390447264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Return {@code WHERE} clause of the interleaved property. Couldn't be {@code null} but an empty string.\n          \n          \n            \n            \t * Returns {@code WHERE} clause of the interleaved property or empty string if no value.", "author": "dmitry-s", "createdAt": "2020-03-10T16:30:42Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,19 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return {@code WHERE} clause of the interleaved property. Couldn't be {@code null} but an empty string.", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NzU3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390447575", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return a {@code Where} cause of the interleaved property or empty string.\n          \n          \n            \n            \t * @return a {@code Where} clause of the interleaved property or empty string.", "author": "dmitry-s", "createdAt": "2020-03-10T16:31:05Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,19 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return {@code WHERE} clause of the interleaved property. Couldn't be {@code null} but an empty string.\n+\t * @return a {@code Where} cause of the interleaved property or empty string.", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NTU0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390455541", "bodyText": "Please document that property's @Where overrides the chid entities' @Where", "author": "dmitry-s", "createdAt": "2020-03-10T16:42:45Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -316,19 +360,25 @@ public static String getColumnsStringForSelect(SpannerPersistentEntity<?> spanne\n \t\treturn fetchInterleaved ? sql + getChildrenSubquery(spannerPersistentEntity, mappingContext) : sql;\n \t}\n \n+\tprivate static String getWhere(SpannerPersistentProperty spannerPersistentProperty, SpannerPersistentEntity<?> childPersistentEntity) {", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODQyOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390458429", "bodyText": "Could you clarify what is this method for?\nAlso, if it ignores @Where why is it passed as a parameter String whereClause?", "author": "dmitry-s", "createdAt": "2020-03-10T16:46:48Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -201,14 +210,37 @@ private SpannerStatementQueryExecutor() {\n \tpublic static <T> Statement buildQuery(KeySet keySet,\n \t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n \t\t\tSpannerMappingContext mappingContext) {\n-\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n+\t\treturn buildQuery(keySet, persistentEntity, writeConverter, mappingContext, persistentEntity.getWhere());\n+\t}\n+\n+\t/**\n+\t * Builds a query that returns the rows associated with a key set with additional SQL-where.\n+\t * But the {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} will be ignored.", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMjYyNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r393222625", "bodyText": "the method is needed for better compatibility with the previous version. Probably someone already uses the previous method - it was \"public static\"\nJava doc updated, check it, pls.", "author": "s13o", "createdAt": "2020-03-16T18:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODgwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390458804", "bodyText": "Please add java doc", "author": "dmitry-s", "createdAt": "2020-03-10T16:47:27Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -201,14 +210,37 @@ private SpannerStatementQueryExecutor() {\n \tpublic static <T> Statement buildQuery(KeySet keySet,\n \t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n \t\t\tSpannerMappingContext mappingContext) {\n-\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n+\t\treturn buildQuery(keySet, persistentEntity, writeConverter, mappingContext, persistentEntity.getWhere());\n+\t}\n+\n+\t/**\n+\t * Builds a query that returns the rows associated with a key set with additional SQL-where.\n+\t * But the {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} will be ignored.\n+\t * @param keySet the key set whose members to get.\n+\t * @param persistentEntity the persistent entity of the table.\n+\t * @param <T> the type of the persistent entity\n+\t * @param writeConverter a converter to convert key values as needed to bind to the query statement.\n+\t * @param mappingContext mapping context\n+\t * @param whereClause SQL where clause\n+\t * @return the Spanner statement to perform the retrieval.\n+\t */\n+\tpublic static <T> Statement buildQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext, String whereClause) {\n+\t\treturn buildQuery(keySet, persistentEntity, writeConverter, mappingContext, whereClause, null);\n+\t}\n+\n+\tpublic static <T> Statement buildQuery(KeySet keySet,", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MjU1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390462551", "bodyText": "Let's just remove this ternary operator.  orParts.get(0) : orParts.stream().map(s -> \"(\" + s + \")\").collect(Collectors.joining(\" OR \")) is sufficient.\nIt has a side effect of adding unnecessary parentheses if there is only one part, but that is not a problem.\nThis will make the code more readable.", "author": "dmitry-s", "createdAt": "2020-03-10T16:52:57Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,44 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyClause = orParts.size() == 1", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NzQ2MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r391947461", "bodyText": "I do not agree with your argument. The code is already complex enough and this small update will not simplify it - it will just brake some IT tests. But, sure, I'll follow your advice.", "author": "s13o", "createdAt": "2020-03-12T22:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MjU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MDUwMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390470503", "bodyText": "I see this logic is repeated multiple times. We should introduce a method (let's call it buildWhere) that checks if a string is empty or null and if not, returns \" WHERE \" + string, otherwise returns \"\"", "author": "dmitry-s", "createdAt": "2020-03-10T17:04:27Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -253,10 +264,10 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t@Override\n \tpublic <T> List<T> queryAll(Class<T> entityClass,\n \t\t\tSpannerPageableQueryOptions options) {\n-\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n-\t\t\t\t.getPersistentEntity(entityClass);\n+\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext.getPersistentEntity(entityClass);\n+\t\tString condition = persistentEntity.hasWhere() ? \" WHERE \" + persistentEntity.getWhere() : \"\";", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTU4NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390475585", "bodyText": "let's move this  whereClause != null ? whereClause : \"\" to the combine method and apply it to both arguments", "author": "dmitry-s", "createdAt": "2020-03-10T17:11:55Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,44 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyClause = orParts.size() == 1\n+\t\t\t\t? orParts.get(0) : orParts.stream().map(s -> \"(\" + s + \")\").collect(Collectors.joining(\" OR \"));\n+\t\tString condition = combine(keyClause, whereClause != null ? whereClause : \"\");", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NjAzMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390476033", "bodyText": "rename to combineWithAnd for clarity", "author": "dmitry-s", "createdAt": "2020-03-10T17:12:38Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,44 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyClause = orParts.size() == 1\n+\t\t\t\t? orParts.get(0) : orParts.stream().map(s -> \"(\" + s + \")\").collect(Collectors.joining(\" OR \"));\n+\t\tString condition = combine(keyClause, whereClause != null ? whereClause : \"\");\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ (StringUtils.isEmpty(index) ? persistentEntity.tableName() : String.format(\"%s@{FORCE_INDEX=%s}\", persistentEntity.tableName(), index))\n+\t\t\t\t+ (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n \tprivate static <C, P> String getChildrenStructsQuery(\n \t\t\tSpannerPersistentEntity<C> childPersistentEntity,\n \t\t\tSpannerPersistentEntity<P> parentPersistentEntity, SpannerMappingContext mappingContext,\n-\t\t\tString columnName) {\n+\t\t\tString columnName, String whereClause) {\n \t\tString tableName = childPersistentEntity.tableName();\n \t\tList<SpannerPersistentProperty> parentKeyProperties = parentPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tString condition = parentKeyProperties.stream()\n+\t\tString keylCause = parentKeyProperties.stream()\n \t\t\t\t.map(keyProp -> tableName + \".\" + keyProp.getColumnName()\n \t\t\t\t\t\t+ \" = \"\n \t\t\t\t\t\t+ parentPersistentEntity.tableName() + \".\" + keyProp.getColumnName())\n \t\t\t\t.collect(Collectors.joining(\" AND \"));\n-\n+\t\tString condition = combine(keylCause, whereClause);\n \t\treturn \"ARRAY (SELECT AS STRUCT \" + getColumnsStringForSelect(childPersistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ tableName + \" WHERE \" + condition + \") as \" + columnName;\n+\t\t\t\t+ tableName + \" WHERE \" + condition + \") AS \" + columnName;\n \t}\n \n+\tprivate static String combine(String cond1, String cond2) {", "originalCommit": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef1a0ba73f7ef291ce2263dc5cc5705b44872704", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ef1a0ba73f7ef291ce2263dc5cc5705b44872704", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-11T21:23:18Z", "type": "commit"}, {"oid": "f7029ea168fda11daf4279eb9f8ca4b161d09537", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f7029ea168fda11daf4279eb9f8ca4b161d09537", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-11T21:23:59Z", "type": "commit"}, {"oid": "720f90b09c494dcecab1f4525725c7517b24f046", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/720f90b09c494dcecab1f4525725c7517b24f046", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-11T21:24:47Z", "type": "commit"}, {"oid": "7ef09152f0ae2066ef6b599bf7f9ab20409db886", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7ef09152f0ae2066ef6b599bf7f9ab20409db886", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-11T21:25:28Z", "type": "commit"}, {"oid": "2d157ff2353dc4796c81dd55c9a06b23a8033d35", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d157ff2353dc4796c81dd55c9a06b23a8033d35", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-03-12T23:57:05Z", "type": "commit"}, {"oid": "1cc4e59e801c08f35fdd34110af75d02ebe74365", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1cc4e59e801c08f35fdd34110af75d02ebe74365", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-16T17:06:53Z", "type": "commit"}, {"oid": "a3d276dc505fb1571eb87c09cfdb09895a8e26cd", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a3d276dc505fb1571eb87c09cfdb09895a8e26cd", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-16T17:11:36Z", "type": "commit"}, {"oid": "7865dc12d868b4804cb648aa63806e410fec8fd8", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7865dc12d868b4804cb648aa63806e410fec8fd8", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerReadOptions.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-16T17:11:59Z", "type": "commit"}, {"oid": "b49bd6db89a20f2964934d470b3218ad4e63237a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b49bd6db89a20f2964934d470b3218ad4e63237a", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-16T17:15:32Z", "type": "commit"}, {"oid": "f2cfc7784b17175b49fb0ac698a69db9d3edd6db", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f2cfc7784b17175b49fb0ac698a69db9d3edd6db", "message": "\"Soft-delete\" filter support for Interleaved collections", "committedDate": "2020-03-16T17:43:02Z", "type": "commit"}, {"oid": "37888c878ca7fbbd541de6cae048f4bb0c8cade0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/37888c878ca7fbbd541de6cae048f4bb0c8cade0", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-16T17:43:51Z", "type": "commit"}, {"oid": "8b77b8681a9ed4d0e71971b64795320181df5c69", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8b77b8681a9ed4d0e71971b64795320181df5c69", "message": "javadoc improved", "committedDate": "2020-03-16T18:15:18Z", "type": "commit"}, {"oid": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d54c206d0040c8e603dc2bfcddb3b6c6373d34c", "message": "Merge branch 'feature/2202' of https://github.com/s13o/spring-cloud-gcp into feature/2202", "committedDate": "2020-03-16T18:15:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2MjEzNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r393862137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * or some property is eagerly interleaved the SQL query will be performed instead of the\n          \n          \n            \n            \t * or any of the properties is eagerly interleaved, the SQL query will be performed instead of the", "author": "dmitry-s", "createdAt": "2020-03-17T17:49:23Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java", "diffHunk": "@@ -85,14 +86,24 @@\n \n \t/**\n \t * Finds objects stored from their keys.\n+\t * When the entity has a {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} class annotation\n+\t * or some property is eagerly interleaved the SQL query will be performed instead of the", "originalCommit": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2ODExNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r393868117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return a {@code Where} clause of the interleaved property or empty string.\n          \n          \n            \n            \t * @return a {@code WHERE} clause of the interleaved property or empty string.", "author": "dmitry-s", "createdAt": "2020-03-17T17:58:52Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,19 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Returns {@code WHERE} clause of the interleaved property or empty string if no value.\n+\t * @return a {@code Where} clause of the interleaved property or empty string.", "originalCommit": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "09c4e81365391874550d07b95ce7a09d2fdadd08", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/09c4e81365391874550d07b95ce7a09d2fdadd08", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-17T18:07:33Z", "type": "commit"}, {"oid": "1bf2fe3001e50357099c5ed79cae41aa54774ef8", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1bf2fe3001e50357099c5ed79cae41aa54774ef8", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-17T18:07:45Z", "type": "commit"}, {"oid": "aa2dea9e7cb83ddd7fbd9c2cf9b14a821d68f088", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/aa2dea9e7cb83ddd7fbd9c2cf9b14a821d68f088", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-03-17T18:08:04Z", "type": "commit"}]}