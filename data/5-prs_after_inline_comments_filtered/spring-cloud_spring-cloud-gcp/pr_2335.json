{"pr_number": 2335, "pr_title": "Datastore Projections should restrict query to contain only the necessary fields", "pr_createdAt": "2020-04-27T11:16:23Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335", "timeline": [{"oid": "2ea42e2287a160609f44754dd0b85ba66e80e2c3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2ea42e2287a160609f44754dd0b85ba66e80e2c3", "message": "request only the fields that a projection needs in for PartTree queries", "committedDate": "2020-04-27T11:09:48Z", "type": "commit"}, {"oid": "bdb89279ae33792f8a9337be180c3f9b1f21021e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/bdb89279ae33792f8a9337be180c3f9b1f21021e", "message": "rebase", "committedDate": "2020-04-27T11:13:55Z", "type": "commit"}, {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/231cbcc0089dcfdaabbcc4461974828edda68bd4", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into datastore-projection-fields", "committedDate": "2020-04-27T11:21:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4ODI0OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r415888248", "bodyText": "Combine with the line above?", "author": "meltsufin", "createdAt": "2020-04-27T15:00:01Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;", "originalCommit": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNTUxOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416115519", "bodyText": "Maybe add an additional few words describing what the purpose of projection factory/what its used for here?", "author": "dzou", "createdAt": "2020-04-27T20:12:13Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -99,15 +107,17 @@\n \t * @param datastoreTemplate used to execute the given query.\n \t * @param datastoreMappingContext used to provide metadata for mapping results to objects.\n \t * @param entityType the result domain type.\n+\t * @param projectionFactory the projection factory.", "originalCommit": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMTg0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416201841", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-04-27T22:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNzUwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416117504", "bodyText": "This parameters variable is never used?", "author": "dzou", "createdAt": "2020-04-27T20:15:38Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "originalCommit": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjE2NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416202165", "bodyText": "removed", "author": "dmitry-s", "createdAt": "2020-04-27T22:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNzUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExODc5Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416118793", "bodyText": "In what cases would the returned projectInformation be null?", "author": "dzou", "createdAt": "2020-04-27T20:17:38Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&", "originalCommit": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODY3OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416218679", "bodyText": "it happens in some tests", "author": "dmitry-s", "createdAt": "2020-04-27T23:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExODc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTYxNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416119617", "bodyText": "Maybe add a javadoc comment to help describe what this helper method is doing? I guess it's looking at what fields will be needed from the return obj and then constructing a query object containing only those fields?", "author": "dzou", "createdAt": "2020-04-27T20:18:56Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "originalCommit": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyMjM5NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416122395", "bodyText": "This is optional but I am starting to get confused with the Supplier thing - maybe if you find you're always calling getQueryBuilderSupplier(parameters).get() here, you can take the opportunity to just have getQueryBuilder() return the query builder directly rather than a supplier and then call .get().\nBut if it's gonna be a big refactor job then just ignore this comment.", "author": "dzou", "createdAt": "2020-04-27T20:23:25Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&\n+\t\t\t\tprojectionInformation.getType() != this.entityType\n+\t\t\t\t&& projectionInformation.isClosed()) {\n+\t\t\tProjectionEntityQuery.Builder projectionEntityQueryBuilder = Query.newProjectionEntityQueryBuilder();\n+\t\t\tprojectionInformation.getInputProperties().forEach(propertyDescriptor -> {\n+\t\t\t\tprojectionEntityQueryBuilder.addProjection(mapToFieldName(propertyDescriptor));\n+\t\t\t});\n+\t\t\tqueryBuilderSupplier = () -> projectionEntityQueryBuilder;\n+\t\t}\n+\t\treturn queryBuilderSupplier;\n+\t}\n+\n+\n+\tprivate String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n+\t\tString name = propertyDescriptor.getName();\n+\t\tDatastorePersistentProperty persistentProperty =\n+\t\t\t\t(DatastorePersistentProperty) this.datastorePersistentEntity.getPersistentProperty(name);\n+\t\treturn persistentProperty.getFieldName();\n+\t}\n+\n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tEntityQuery.Builder builder = StructuredQuery.newEntityQueryBuilder()\n+\t\tStructuredQuery.Builder builder = getQueryBuilderSupplier(parameters).get()", "originalCommit": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43dee9effcddbd24154fd18d4f1410f1d65a4f04", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/43dee9effcddbd24154fd18d4f1410f1d65a4f04", "message": "PR comments", "committedDate": "2020-04-27T20:36:51Z", "type": "commit"}, {"oid": "6e4bf91f4bb976061e1e6f66897b9829380c31c7", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6e4bf91f4bb976061e1e6f66897b9829380c31c7", "message": "PR comments", "committedDate": "2020-04-27T22:41:04Z", "type": "commit"}, {"oid": "f702246316b61a2f66ae1b5f68e6015e88333f80", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f702246316b61a2f66ae1b5f68e6015e88333f80", "message": "PR comments", "committedDate": "2020-04-27T23:32:38Z", "type": "commit"}, {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8b02bffe235fee6c576c8c09014208da6aef2140", "message": "PR comments", "committedDate": "2020-04-28T11:49:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwOTM1Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416609353", "bodyText": "There's way too much conditional logic in this method and many fragments are repeated.\nI think it needs to be refactored to be more readable and maintainable.\nWe can do it in a meeting, if you want.", "author": "meltsufin", "createdAt": "2020-04-28T13:24:21Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -176,37 +185,29 @@ public Object execute(Object[] parameters) {\n \t}\n \n \tprivate Object execute(Object[] parameters, Class returnedElementType, Class<?> collectionType, boolean total) {\n-\t\tSupplier<StructuredQuery.Builder<?>> queryBuilderSupplier = StructuredQuery::newKeyQueryBuilder;\n-\t\tFunction<T, ?> mapper = Function.identity();\n-\n \t\tboolean returnedTypeIsNumber = Number.class.isAssignableFrom(returnedElementType)\n \t\t\t\t|| returnedElementType == int.class || returnedElementType == long.class;\n \n \t\tboolean isCountingQuery = this.tree.isCountProjection()\n \t\t\t\t|| (this.tree.isDelete() && returnedTypeIsNumber) || total;\n \n-\t\tCollector<?, ?, ?> collector = Collectors.toList();\n-\t\tif (isCountingQuery && !this.tree.isDelete()) {\n-\t\t\tcollector = Collectors.counting();\n-\t\t}\n-\t\telse if (this.tree.isExistsProjection()) {\n-\t\t\tcollector = Collectors.collectingAndThen(Collectors.counting(), (count) -> count > 0);\n-\t\t}\n-\t\telse if (!returnedTypeIsNumber) {\n-\t\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n-\t\t\tmapper = this::processRawObjectForProjection;\n-\t\t}\n+\t\tStructuredQuery.Builder<?> structuredQueryBuilder =\n+\t\t\t\t!((isCountingQuery && !this.tree.isDelete()) || this.tree.isExistsProjection())", "originalCommit": "8b02bffe235fee6c576c8c09014208da6aef2140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwOTY4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416609682", "bodyText": "Can we come up with a better name for the method?", "author": "meltsufin", "createdAt": "2020-04-28T13:24:46Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +224,49 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Collector<?, ?, ?> getCollector(boolean isCountingQuery) {", "originalCommit": "8b02bffe235fee6c576c8c09014208da6aef2140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d41d5aaed50191e871e6f18b1bbe06d46bce6fa3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d41d5aaed50191e871e6f18b1bbe06d46bce6fa3", "message": "Revert \"PR comments\"\n\nThis reverts commit 8b02bffe235fee6c576c8c09014208da6aef2140.", "committedDate": "2020-04-28T16:29:39Z", "type": "commit"}]}