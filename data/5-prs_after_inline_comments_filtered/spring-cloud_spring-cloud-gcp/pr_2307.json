{"pr_number": 2307, "pr_title": "support for nested properties in PartTree methods", "pr_createdAt": "2020-04-08T00:07:09Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307", "timeline": [{"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5cbbc0935670b80eee9e76226066aa6cce55088a", "message": "support for nested properties in PartTree methods", "committedDate": "2020-04-08T00:05:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNDc0NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405214744", "bodyText": "is this instanceof still needed? The newly parameterized List<OrPart> assumes the type.", "author": "elefeint", "createdAt": "2020-04-08T01:59:27Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -117,7 +118,7 @@ private void validateAndSetFilterParts() {\n \t\t\t\t\t\"Cloud Datastore structured queries do not support the Distinct keyword.\");\n \t\t}\n \n-\t\tList parts = this.tree.get().collect(Collectors.toList());\n+\t\tList<OrPart> parts = this.tree.get().collect(Collectors.toList());\n \t\tif (parts.size() > 0) {\n \t\t\tif (parts.get(0) instanceof OrPart && parts.size() > 1) {", "originalCommit": "5cbbc0935670b80eee9e76226066aa6cce55088a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMTgxNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405801817", "bodyText": "good point!", "author": "dmitry-s", "createdAt": "2020-04-08T20:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNDc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjczOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405216738", "bodyText": "Will this be easier to read as a helper method?\n.map(this::findProperty)", "author": "elefeint", "createdAt": "2020-04-08T02:07:06Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -319,11 +320,20 @@ else if (pageable instanceof DatastorePageable) {\n \tprivate void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\tIterator it = Arrays.asList(parameters).iterator();\n \t\tFilter[] filters = this.filterParts.stream().map((part) -> {\n-\t\t\tDatastorePersistentProperty persistentProperty = (DatastorePersistentProperty) this.datastorePersistentEntity\n-\t\t\t\t\t.getPersistentProperty(part.getProperty().getSegment());\n+\t\t\tIterable<PropertyPath> iterable = () -> part.getProperty().iterator();\n+\t\t\tList<DatastorePersistentProperty> properties =\n+\t\t\t\t\tStreamSupport.stream(iterable.spliterator(), false)\n+\t\t\t\t\t.map(propertyPath -> {\n+\t\t\t\t\t\tDatastorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\t\t\tthis.datastoreMappingContext.getPersistentEntity(propertyPath.getOwningType());\n+\t\t\t\t\t\treturn persistentEntity.getPersistentProperty(propertyPath.getSegment());", "originalCommit": "5cbbc0935670b80eee9e76226066aa6cce55088a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTM4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405809382", "bodyText": "refactored", "author": "dmitry-s", "createdAt": "2020-04-08T20:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzM5NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405217394", "bodyText": "Is there possibility of property name clashes if parent class and child class both have a property named, say, name?", "author": "elefeint", "createdAt": "2020-04-08T02:09:20Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -335,9 +345,9 @@ private void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\t\t\t\t\t\"Too few parameters are provided for query method: \" + getQueryMethod().getName());\n \t\t\t}\n \n-\t\t\tValue convertedValue = convertParam(persistentProperty, it.next());\n+\t\t\tValue convertedValue = convertParam(properties.get(properties.size() - 1), it.next());", "originalCommit": "5cbbc0935670b80eee9e76226066aa6cce55088a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTc2Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405811767", "bodyText": "In general that would be resolved appropriately, but there is a way to disambiguate using \"_\" as a nested properties separator.", "author": "dmitry-s", "createdAt": "2020-04-08T20:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MTA3OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405761078", "bodyText": "In Firestore you call the method getPropertyName but here it's getFieldName. Is it too late to make them consistent?", "author": "meltsufin", "createdAt": "2020-04-08T19:26:59Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -319,11 +320,20 @@ else if (pageable instanceof DatastorePageable) {\n \tprivate void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\tIterator it = Arrays.asList(parameters).iterator();\n \t\tFilter[] filters = this.filterParts.stream().map((part) -> {\n-\t\t\tDatastorePersistentProperty persistentProperty = (DatastorePersistentProperty) this.datastorePersistentEntity\n-\t\t\t\t\t.getPersistentProperty(part.getProperty().getSegment());\n+\t\t\tIterable<PropertyPath> iterable = () -> part.getProperty().iterator();\n+\t\t\tList<DatastorePersistentProperty> properties =\n+\t\t\t\t\tStreamSupport.stream(iterable.spliterator(), false)\n+\t\t\t\t\t.map(propertyPath -> {\n+\t\t\t\t\t\tDatastorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\t\t\tthis.datastoreMappingContext.getPersistentEntity(propertyPath.getOwningType());\n+\t\t\t\t\t\treturn persistentEntity.getPersistentProperty(propertyPath.getSegment());\n+\t\t\t\t\t}).collect(Collectors.toList());\n+\n+\t\t\tString fieldName = properties.stream().map(DatastorePersistentProperty::getFieldName)", "originalCommit": "5cbbc0935670b80eee9e76226066aa6cce55088a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMDQyMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405810422", "bodyText": "renamed the method from Firestore", "author": "dmitry-s", "createdAt": "2020-04-08T20:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MTA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MjIxNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405762214", "bodyText": "Put this block into a separate helper private method buildName like you did for Firestore?", "author": "meltsufin", "createdAt": "2020-04-08T19:29:04Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -319,11 +320,20 @@ else if (pageable instanceof DatastorePageable) {\n \tprivate void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\tIterator it = Arrays.asList(parameters).iterator();\n \t\tFilter[] filters = this.filterParts.stream().map((part) -> {\n-\t\t\tDatastorePersistentProperty persistentProperty = (DatastorePersistentProperty) this.datastorePersistentEntity\n-\t\t\t\t\t.getPersistentProperty(part.getProperty().getSegment());\n+\t\t\tIterable<PropertyPath> iterable = () -> part.getProperty().iterator();\n+\t\t\tList<DatastorePersistentProperty> properties =", "originalCommit": "5cbbc0935670b80eee9e76226066aa6cce55088a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMjc3Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405802773", "bodyText": "here we need not only the name, but also the persistent property", "author": "dmitry-s", "createdAt": "2020-04-08T20:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MjIxNA=="}], "type": "inlineReview"}, {"oid": "d34dbe8f33c275ba8e9c2ef579737f9eb0e2d333", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d34dbe8f33c275ba8e9c2ef579737f9eb0e2d333", "message": "PR comments", "committedDate": "2020-04-08T23:01:40Z", "type": "commit"}, {"oid": "c31cd20379a90a0b3dd036b80d12b38a9da044b0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c31cd20379a90a0b3dd036b80d12b38a9da044b0", "message": "PR comments", "committedDate": "2020-04-08T23:06:23Z", "type": "commit"}]}