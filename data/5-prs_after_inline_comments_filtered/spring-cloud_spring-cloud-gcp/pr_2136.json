{"pr_number": 2136, "pr_title": "retrieve only one key field for existsById", "pr_createdAt": "2020-01-24T20:58:49Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2136", "timeline": [{"oid": "b35035c70e715989f2627cecd4351d879f1623d8", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b35035c70e715989f2627cecd4351d879f1623d8", "message": "retrieve only one key field for existById", "committedDate": "2020-01-24T20:55:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MzI2Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2136#discussion_r370843267", "bodyText": "ResultSet is not closed in the \"finally\" section\nThe jvadoc says \"...Calling {@code close()} is also allowed if the result set has been fully consumed, so a recommended practice is to unconditionally close the result set once it is done  with, typically using a try-with-resources construc...\"", "author": "s13o", "createdAt": "2020-01-24T21:10:10Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -167,6 +167,26 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\treturn read(entityClass, key, null);\n \t}\n \n+\t@Override\n+\tpublic <T> boolean existsById(Class<T> entityClass, Key key) {\n+\t\tAssert.notNull(key, \"A non-null key is required.\");\n+\n+\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext.getPersistentEntity(entityClass);\n+\t\tString columnName = getPrimaryKeyColumnName(persistentEntity);\n+\t\tKeySet keys = KeySet.singleKey(key);\n+\n+\t\tResultSet resultSet = executeRead(persistentEntity.tableName(), keys, Collections.singleton(columnName), null);\n+\t\tmaybeEmitEvent(new AfterReadEvent(Collections.emptyList(), keys, null));\n+\t\treturn resultSet.next();", "originalCommit": "b35035c70e715989f2627cecd4351d879f1623d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0Mjg4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2136#discussion_r370842886", "bodyText": "Do we use this anywhere else? Seems like it would be a common thing.", "author": "meltsufin", "createdAt": "2020-01-24T21:09:03Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -167,6 +167,26 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\treturn read(entityClass, key, null);\n \t}\n \n+\t@Override\n+\tpublic <T> boolean existsById(Class<T> entityClass, Key key) {\n+\t\tAssert.notNull(key, \"A non-null key is required.\");\n+\n+\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext.getPersistentEntity(entityClass);\n+\t\tString columnName = getPrimaryKeyColumnName(persistentEntity);\n+\t\tKeySet keys = KeySet.singleKey(key);\n+\n+\t\tResultSet resultSet = executeRead(persistentEntity.tableName(), keys, Collections.singleton(columnName), null);\n+\t\tmaybeEmitEvent(new AfterReadEvent(Collections.emptyList(), keys, null));\n+\t\treturn resultSet.next();\n+\t}\n+\n+\tprivate String getPrimaryKeyColumnName(SpannerPersistentEntity<?> persistentEntity) {", "originalCommit": "b35035c70e715989f2627cecd4351d879f1623d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NTM3NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2136#discussion_r370855374", "bodyText": "Never. In many cases, the Key is a set of columns but for this particular case, we should know the only first primary to try to fetch it. On success, it will mean that the entity exists.\nIt depends on a Database but the query \"IF EXISTS..\" runs faster because it will not fetch a real data from real disk but only some index that probably already in-memory cache. But I'm not sure that such an assumption is really actual for Spanner :) - we could try to fetch a real column.", "author": "s13o", "createdAt": "2020-01-24T21:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0Mjg4Ng=="}], "type": "inlineReview"}, {"oid": "6613adc02a21b68d3f03cb240f08ed088395a5c9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6613adc02a21b68d3f03cb240f08ed088395a5c9", "message": "PR comments", "committedDate": "2020-01-28T20:16:51Z", "type": "commit"}, {"oid": "538c78d0ac501530d04b6fa5426d394a3618b233", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/538c78d0ac501530d04b6fa5426d394a3618b233", "message": "PR comments", "committedDate": "2020-01-28T22:04:50Z", "type": "commit"}]}