{"pr_number": 327, "pr_title": "KOGITO-1618: Runtime metrics for kogito (DMN and DRL) ", "pr_createdAt": "2020-02-21T14:47:03Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/327", "timeline": [{"oid": "347710d04054f7b95047f2fa99fa7f39bbaa662e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/347710d04054f7b95047f2fa99fa7f39bbaa662e", "message": "add system metrics logging", "committedDate": "2020-02-14T11:03:42Z", "type": "commit"}, {"oid": "96041f32800d12aee674b05515a385586800efa6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/96041f32800d12aee674b05515a385586800efa6", "message": "add grafana dashboard generation", "committedDate": "2020-02-19T11:54:58Z", "type": "commit"}, {"oid": "1f29bd3e89709484877b85bf5ae3cb1e431fe24a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1f29bd3e89709484877b85bf5ae3cb1e431fe24a", "message": "add dmn metrics", "committedDate": "2020-02-21T13:12:37Z", "type": "commit"}, {"oid": "33ea6088f118f91b8aeab44696bccaedb4f4878d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/33ea6088f118f91b8aeab44696bccaedb4f4878d", "message": "change MetricsCollector name", "committedDate": "2020-02-21T14:25:43Z", "type": "commit"}, {"oid": "59fe2ab14fe19f55eb51d3b1019094715264ada0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/59fe2ab14fe19f55eb51d3b1019094715264ada0", "message": "fix heatmap template", "committedDate": "2020-02-21T15:39:49Z", "type": "commit"}, {"oid": "7b62848481839cbc461d14e79464e07f7ff80ce0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7b62848481839cbc461d14e79464e07f7ff80ce0", "message": "refactoring", "committedDate": "2020-02-24T12:16:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MDI5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383240294", "bodyText": "I think you were looking for computeIfAbsent method, the whole method becomes:\nhistograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n                (key, value) -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n                .labels(handler).observe(elapsedTime)\n\nSame for the other methods of this class", "author": "danielezonca", "createdAt": "2020-02-24T12:36:19Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector implements IMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        Counter counter;\n+        if (!counters.containsKey(CountersTypesEnum.REQUESTS_STATUS_CODE)){\n+            counter = Counter.build().name(\"api_http_response_code\").help(\"Request status code.\").labelNames(\"handler\", \"identifier\").register();\n+            counters.put(CountersTypesEnum.REQUESTS_STATUS_CODE, counter);\n+        }\n+        else{\n+            counter = counters.get(CountersTypesEnum.REQUESTS_STATUS_CODE);\n+        }\n+\n+        counter.labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        Histogram hist;\n+        if (!histograms.containsKey(HistogramTypes.ELAPSED_TIME)){\n+            hist = HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"});\n+            histograms.put(HistogramTypes.ELAPSED_TIME, hist);\n+        }\n+        else{\n+            hist = histograms.get(HistogramTypes.ELAPSED_TIME);\n+        }\n+\n+        hist.labels(handler).observe(elapsedTime);", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MDg0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383240842", "bodyText": "Please move all constant strings to a class of constants", "author": "danielezonca", "createdAt": "2020-02-24T12:37:37Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector implements IMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        Counter counter;\n+        if (!counters.containsKey(CountersTypesEnum.REQUESTS_STATUS_CODE)){\n+            counter = Counter.build().name(\"api_http_response_code\").help(\"Request status code.\").labelNames(\"handler\", \"identifier\").register();", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MTA2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383241064", "bodyText": "Why do we need this marker interface?", "author": "danielezonca", "createdAt": "2020-02-24T12:38:11Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/IMetricsCollector.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+public interface IMetricsCollector {", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MTA0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383271047", "bodyText": "Please rename result to dmnResult and result1 to result", "author": "danielezonca", "createdAt": "2020-02-24T13:43:20Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.addons.systemmonitoring.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(String name){\n+        if (!counters.containsKey(name)){\n+            Counter tmp = Counter.build().name(name).help(\"Decision information\").labelNames(\"identifier\", \"handler\").register();\n+            counters.put(name, tmp);\n+        }\n+        return counters.get(name);\n+    }\n+\n+    public static void generateMetrics(String handler, DMNResult result){\n+        List<DMNDecisionResult> decisionResults = result.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults){\n+            Object result1 = decision.getResult();", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3ODk0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383278942", "bodyText": "Please use proper logger (debug level?)", "author": "danielezonca", "createdAt": "2020-02-24T13:58:40Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MTI1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383281253", "bodyText": "Add a comment to explain this metric", "author": "danielezonca", "createdAt": "2020-02-24T14:02:55Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/MetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class MetricsInterceptor implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext,\n+                       ContainerResponseContext responseContext) throws IOException {\n+        System.out.println(\"Logging status code \" + responseContext.getStatusInfo().getStatusCode());\n+        List<String> matchedUris = requestContext.getUriInfo().getMatchedURIs();\n+        if (matchedUris.size() != 0){\n+            SystemMetricsCollector.RegisterStatusCodeRequest(matchedUris.get(0), String.valueOf(responseContext.getStatusInfo().getStatusCode()));\n+        }\n+        else\n+        {\n+            SystemMetricsCollector.RegisterStatusCodeRequest(\"\", String.valueOf(responseContext.getStatusInfo().getStatusCode()));", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0MjI4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383742287", "bodyText": "This comment and the previous have been resolved", "author": "r00ta", "createdAt": "2020-02-25T09:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MTI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383420056", "bodyText": "I think we should not catch generic Exception in this way because we have no context at all (it could be related to a custom user method too)", "author": "danielezonca", "createdAt": "2020-02-24T17:54:39Z", "path": "addons/system-monitoring/src/main/java/org/kie/addons/systemmonitoring/interceptor/PrometheusExceptionMapper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.addons.systemmonitoring.interceptor;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.kie.addons.systemmonitoring.metrics.SystemMetricsCollector;\n+\n+public class PrometheusExceptionMapper implements ExceptionMapper<Exception> {", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MTE4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383481189", "bodyText": "Fully agreed, furthermore why the class id called PrometheusExceptionMapper", "author": "mswiderski", "createdAt": "2020-02-24T19:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NjMyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r390386327", "bodyText": "Resolved: now the exception handling/logging is managed directly in each endpoint (if the monitoring has been activated )", "author": "r00ta", "createdAt": "2020-03-10T15:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMDA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383432408", "bodyText": "This should be moved to a different location", "author": "danielezonca", "createdAt": "2020-02-24T18:20:17Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.redhat.developer.IJGrafana;\n+import com.redhat.developer.JGrafana;\n+import com.redhat.developer.model.panel.PanelType;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    public static String readStandardDashboard(){\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\" );\n+        return new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));\n+    }\n+\n+    public static boolean generateDashboardForEndpoint(String handlerName, int id){\n+        String template = readStandardDashboard();\n+        template = template.replaceAll(\"\\\\$handlerName\\\\$\", handlerName);\n+        template = template.replaceAll(\"\\\\$id\\\\$\", String.valueOf(id));\n+        template = template.replaceAll(\"\\\\$uid\\\\$\", UUID.randomUUID().toString());\n+\n+        try {\n+            File file = new File(\"/tmp/dashboard-endpoint-\" + handlerName + \".json\");", "originalCommit": "7b62848481839cbc461d14e79464e07f7ff80ce0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyMzQyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r383723429", "bodyText": "Thx for the comments! I will fix them today to turn this PR from draft to public, ready to be reviewed and merged afterwards", "author": "r00ta", "createdAt": "2020-02-25T08:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxODY3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386318673", "bodyText": "Resolved", "author": "r00ta", "createdAt": "2020-03-02T10:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjQwOA=="}], "type": "inlineReview"}, {"oid": "a07994351789b761bac2eefa5e6d11f92a12405f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a07994351789b761bac2eefa5e6d11f92a12405f", "message": "fix comments", "committedDate": "2020-02-25T09:04:27Z", "type": "commit"}, {"oid": "1458b90d421c4cef08d2d9749264de04f4f19e67", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1458b90d421c4cef08d2d9749264de04f4f19e67", "message": "fix pom", "committedDate": "2020-02-25T09:39:10Z", "type": "commit"}, {"oid": "99848763ef3fae54049e051e8ffc289d5e14ef54", "url": "https://github.com/kiegroup/kogito-runtimes/commit/99848763ef3fae54049e051e8ffc289d5e14ef54", "message": "make system monitoring optional in codegen", "committedDate": "2020-02-25T16:54:10Z", "type": "commit"}, {"oid": "89350ea2e5e502bd1bd89fa66bbb1cc83414bb43", "url": "https://github.com/kiegroup/kogito-runtimes/commit/89350ea2e5e502bd1bd89fa66bbb1cc83414bb43", "message": "make metrics codegen options", "committedDate": "2020-02-26T12:04:58Z", "type": "commit"}, {"oid": "39ab54851fa0d114ec75a1752f6ed63fd3c6e564", "url": "https://github.com/kiegroup/kogito-runtimes/commit/39ab54851fa0d114ec75a1752f6ed63fd3c6e564", "message": "fix optional monitoring in dmn", "committedDate": "2020-02-27T09:11:44Z", "type": "commit"}, {"oid": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a796a953bd70f5329e91a2ca84846bd5a8fed330", "message": "merge system-monitoring package in monitoring-prometheus", "committedDate": "2020-03-02T00:08:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzQyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Counter GetCounter(){\n          \n          \n            \n                public static Counter getCounter(){\n          \n      \n    \n    \n  \n\nplease use lower case method names even for statics", "author": "evacchi", "createdAt": "2020-03-02T07:17:24Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    public static Counter GetCounter(){", "originalCommit": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDY0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386260644", "bodyText": "Thx for the catch! Resolved", "author": "r00ta", "createdAt": "2020-03-02T08:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzQyOA=="}], "type": "inlineReview"}, {"oid": "3a5d6536cb1be3bc7a21c9c358dfdbadcc4049b7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3a5d6536cb1be3bc7a21c9c358dfdbadcc4049b7", "message": "refactoring", "committedDate": "2020-03-02T08:50:46Z", "type": "commit"}, {"oid": "b03d1e1b14889fe30fc708ab0cdf2df4959fffdc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b03d1e1b14889fe30fc708ab0cdf2df4959fffdc", "message": "store grafana dashboard to target dir", "committedDate": "2020-03-02T10:44:46Z", "type": "commit"}, {"oid": "84d3ac145dc8ef40520ff2c22f60aec4b6dadd70", "url": "https://github.com/kiegroup/kogito-runtimes/commit/84d3ac145dc8ef40520ff2c22f60aec4b6dadd70", "message": "fix typo", "committedDate": "2020-03-02T10:47:01Z", "type": "commit"}, {"oid": "8582ddbbdd9576b559a24bc390c81a0c559ebe4a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8582ddbbdd9576b559a24bc390c81a0c559ebe4a", "message": "fix extensions for dashboards", "committedDate": "2020-03-02T10:56:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzUwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterStatusCodeRequest(String handler, String statusCode){\n          \n          \n            \n                public static void registerStatusCodeRequest(String handler, String statusCode){", "author": "evacchi", "createdAt": "2020-03-02T07:17:51Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){", "originalCommit": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzU2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227564", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n          \n          \n            \n                public static void registerElapsedTimeSampleMetrics(String handler, double elapsedTime){", "author": "evacchi", "createdAt": "2020-03-02T07:18:03Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){", "originalCommit": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzYxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterException(String handler, String stackTrace){\n          \n          \n            \n                public static void registerException(String handler, String stackTrace){", "author": "evacchi", "createdAt": "2020-03-02T07:18:13Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){", "originalCommit": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzY3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterProcessorsSample(int totalProcessors){\n          \n          \n            \n                public static void registerProcessorsSample(int totalProcessors){", "author": "evacchi", "createdAt": "2020-03-02T07:18:23Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){\n+        counters.computeIfAbsent(CountersTypesEnum.EXCEPTIONS,\n+                                 k -> Counter.build().name(MetricsConstants.EXCEPTIONS_NAME)\n+                                         .help(MetricsConstants.EXCEPTIONS_HELP)\n+                                         .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                .labels(handler, stackTrace).inc();\n+    }\n+\n+    public static void RegisterProcessorsSample(int totalProcessors){", "originalCommit": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNzczMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386227731", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void RegisterSystemMemorySample(double totalMemory, double freeMemory) {\n          \n          \n            \n                public static void registerSystemMemorySample(double totalMemory, double freeMemory) {", "author": "evacchi", "createdAt": "2020-03-02T07:18:33Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final ConcurrentHashMap<CountersTypesEnum, Counter> counters = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<HistogramTypes, Histogram> histograms = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentHashMap<GaugeTypesEnum, Gauge> gauges = new ConcurrentHashMap<>();\n+\n+    public static void RegisterStatusCodeRequest(String handler, String statusCode){\n+        counters.computeIfAbsent(CountersTypesEnum.REQUESTS_STATUS_CODE,\n+                                   k -> Counter.build().name(MetricsConstants.STATUS_CODE_NAME)\n+                                           .help(MetricsConstants.STATUS_CODE_HELP)\n+                                           .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                  .labels(handler, statusCode).inc();\n+    }\n+\n+    public static void RegisterElapsedTimeSampleMetrics(String handler, double elapsedTime){\n+        histograms.computeIfAbsent(HistogramTypes.ELAPSED_TIME,\n+                                   key -> HistogramBuilder.BuildElapsedTimeHistogram(new String[]{\"handler\"}))\n+                .labels(handler).observe(elapsedTime);\n+    }\n+\n+    public static void RegisterException(String handler, String stackTrace){\n+        counters.computeIfAbsent(CountersTypesEnum.EXCEPTIONS,\n+                                 k -> Counter.build().name(MetricsConstants.EXCEPTIONS_NAME)\n+                                         .help(MetricsConstants.EXCEPTIONS_HELP)\n+                                         .labelNames(MetricsConstants.HANDLER_IDENTIFIER_LABELS).register())\n+                                .labels(handler, stackTrace).inc();\n+    }\n+\n+    public static void RegisterProcessorsSample(int totalProcessors){\n+        gauges.computeIfAbsent(GaugeTypesEnum.PROCESSORS,\n+                               k -> Gauge.build().name(MetricsConstants.PROCESSORS_NAME)\n+                                       .help(MetricsConstants.PROCESSORS_HELP)\n+                                       .labelNames().register())\n+                               .labels().set(totalProcessors);\n+    }\n+\n+    public static void RegisterSystemMemorySample(double totalMemory, double freeMemory) {", "originalCommit": "a796a953bd70f5329e91a2ca84846bd5a8fed330", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTc0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386625742", "bodyText": "I would not encode this type information here, it's better at this time to use some kind of generic description like \"resource\". I feel like dashboard is too specific. In this case, the sub-path /dashboard/ is enough to distinguish the type of resource", "author": "evacchi", "createdAt": "2020-03-02T20:16:00Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/GeneratedFile.java", "diffHunk": "@@ -29,7 +29,8 @@\n         MODEL,\n         CLASS,\n         MESSAGE_CONSUMER,\n-        MESSAGE_PRODUCER;\n+        MESSAGE_PRODUCER,\n+        DASHBOARD;", "originalCommit": "8582ddbbdd9576b559a24bc390c81a0c559ebe4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMDUzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r386630537", "bodyText": "Resolved! atm I'm exporting the dashboards under /dashboards/ as you can see here \n  \n    \n      kogito-runtimes/kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java\n    \n    \n         Line 150\n      in\n      8582ddb\n    \n    \n    \n    \n\n        \n          \n           \"/dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",", "author": "r00ta", "createdAt": "2020-03-02T20:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTc0Mg=="}], "type": "inlineReview"}, {"oid": "c1283f07270777a1b1b940d7b972bb0393004bcc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c1283f07270777a1b1b940d7b972bb0393004bcc", "message": "dmn type handling draft", "committedDate": "2020-03-02T20:24:58Z", "type": "commit"}, {"oid": "ecc51e363f836afa82e5a4314c06b20a6ad662a4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ecc51e363f836afa82e5a4314c06b20a6ad662a4", "message": "fix typo", "committedDate": "2020-03-02T20:27:31Z", "type": "commit"}, {"oid": "bf44baec697993ab51520758e2db12060034e784", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bf44baec697993ab51520758e2db12060034e784", "message": "manage different dmn decision types", "committedDate": "2020-03-03T10:07:17Z", "type": "commit"}, {"oid": "dd71b522b7ae49c56e864e61ef7f822a24549535", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd71b522b7ae49c56e864e61ef7f822a24549535", "message": "support different dmn built-in data types", "committedDate": "2020-03-04T11:05:00Z", "type": "commit"}, {"oid": "2ade6e7c2e942a5319d602417d86dc0106ab1b31", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2ade6e7c2e942a5319d602417d86dc0106ab1b31", "message": "add handler first tests", "committedDate": "2020-03-04T16:37:46Z", "type": "commit"}, {"oid": "4284869ee22953eb1f4e4d7f1e9eca109e9ee403", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4284869ee22953eb1f4e4d7f1e9eca109e9ee403", "message": "add codegen tests", "committedDate": "2020-03-05T13:53:33Z", "type": "commit"}, {"oid": "846c8ca62b66beb676b101ea2afb59004b9779c0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/846c8ca62b66beb676b101ea2afb59004b9779c0", "message": "resolve conflicts", "committedDate": "2020-03-05T14:24:42Z", "type": "commit"}, {"oid": "5d8e75fb09a251f7cf27830df8177ecd8ba2b3df", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5d8e75fb09a251f7cf27830df8177ecd8ba2b3df", "message": "improve readability of some classes", "committedDate": "2020-03-05T14:53:45Z", "type": "commit"}, {"oid": "ff071c6d75a77528afa17e1a92e77b4e731a7213", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ff071c6d75a77528afa17e1a92e77b4e731a7213", "message": "put jgrafana library into kogito for the time being", "committedDate": "2020-03-05T17:34:05Z", "type": "commit"}, {"oid": "9df48bdec355d14bc39d5cb0840cd6da75f435f2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9df48bdec355d14bc39d5cb0840cd6da75f435f2", "message": "remove apache.io", "committedDate": "2020-03-06T08:59:27Z", "type": "commit"}, {"oid": "3d6d64f9c1f99712ea9d9183b7f8c60d487afddb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3d6d64f9c1f99712ea9d9183b7f8c60d487afddb", "message": "fix tests", "committedDate": "2020-03-06T12:51:13Z", "type": "commit"}, {"oid": "e02697f9acc7556bf904f339c9f0fd870f454060", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e02697f9acc7556bf904f339c9f0fd870f454060", "message": "fix codequality checks", "committedDate": "2020-03-06T14:58:39Z", "type": "commit"}, {"oid": "118d15406c70e78d10e5c79a56c0f52d3c592234", "url": "https://github.com/kiegroup/kogito-runtimes/commit/118d15406c70e78d10e5c79a56c0f52d3c592234", "message": "fix sonarcloud", "committedDate": "2020-03-06T17:07:36Z", "type": "commit"}, {"oid": "876aa58e1dea101aa4f96d6f51d1545ba9e4f44a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/876aa58e1dea101aa4f96d6f51d1545ba9e4f44a", "message": "fix code quality and add tests", "committedDate": "2020-03-09T10:45:25Z", "type": "commit"}, {"oid": "99d0b255aef46fc85f908ee0c302e00087c769a9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/99d0b255aef46fc85f908ee0c302e00087c769a9", "message": "remove log statement", "committedDate": "2020-03-09T12:29:38Z", "type": "commit"}, {"oid": "241ead3c11f783d0655a07ffc3acc0e83701ad36", "url": "https://github.com/kiegroup/kogito-runtimes/commit/241ead3c11f783d0655a07ffc3acc0e83701ad36", "message": "add drl exception logging", "committedDate": "2020-03-09T14:50:10Z", "type": "commit"}, {"oid": "5db2de84854b57068bbbe47d46f8e69f688a3ada", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5db2de84854b57068bbbe47d46f8e69f688a3ada", "message": "refactoring codegen import", "committedDate": "2020-03-10T09:14:48Z", "type": "commit"}, {"oid": "36a12d4c2aca340faf7d48784c217f2cea1e13ec", "url": "https://github.com/kiegroup/kogito-runtimes/commit/36a12d4c2aca340faf7d48784c217f2cea1e13ec", "message": "add license headers", "committedDate": "2020-03-10T10:32:19Z", "type": "commit"}, {"oid": "b5157a7641a589048893cec26040068ac712f529", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b5157a7641a589048893cec26040068ac712f529", "message": "refactoring", "committedDate": "2020-03-10T13:22:38Z", "type": "commit"}, {"oid": "7435377346d8875d5d5756b4e68e0efe62b9397f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7435377346d8875d5d5756b4e68e0efe62b9397f", "message": "refactoring and fix concurrenthashmap", "committedDate": "2020-03-10T13:27:39Z", "type": "commit"}, {"oid": "eda7121bb91341db664b308fc24fa9357b94b9e7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/eda7121bb91341db664b308fc24fa9357b94b9e7", "message": "refactoring", "committedDate": "2020-03-10T13:43:30Z", "type": "commit"}, {"oid": "a44878d6f0252c596eb10fdbb50dd31f823fba9f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a44878d6f0252c596eb10fdbb50dd31f823fba9f", "message": "refactoring", "committedDate": "2020-03-10T13:46:59Z", "type": "commit"}, {"oid": "e38b25ac72e3580eab451b6237e26bc9f2196f98", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e38b25ac72e3580eab451b6237e26bc9f2196f98", "message": "refactoring and fixs", "committedDate": "2020-03-10T14:20:42Z", "type": "commit"}, {"oid": "70a08d10530305872cb8f489d2960100d198ffa2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/70a08d10530305872cb8f489d2960100d198ffa2", "message": "restart jenkins", "committedDate": "2020-03-11T08:33:40Z", "type": "commit"}, {"oid": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "message": "fix addon tests", "committedDate": "2020-03-11T14:20:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NjMwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391166308", "bodyText": "Please review this mechanism because we cannot assume decision name is unique in the whole project (it could contain multiple models)", "author": "danielezonca", "createdAt": "2020-03-11T18:08:04Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/DMNResultMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BigDecimalHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.BooleanHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.StringHandler;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.TypeHandler;\n+import org.kie.dmn.api.core.DMNDecisionResult;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DMNResultMetricsBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DMNResultMetricsBuilder.class);\n+\n+    private static final Map<Class, TypeHandler> handlers = generateHandlers();\n+\n+    private DMNResultMetricsBuilder() {\n+    }\n+\n+    private static Map<Class, TypeHandler> generateHandlers() {\n+        HashMap<Class, TypeHandler> handlers = new HashMap<>();\n+        handlers.put(String.class, new StringHandler(SupportedDecisionTypes.fromInternalToStandard(String.class)));\n+        handlers.put(Boolean.class, new BooleanHandler(SupportedDecisionTypes.fromInternalToStandard(Boolean.class)));\n+        handlers.put(BigDecimal.class, new BigDecimalHandler(SupportedDecisionTypes.fromInternalToStandard(BigDecimal.class)));\n+        return handlers;\n+    }\n+\n+    public static Map<Class, TypeHandler> getHandlers() {\n+        return handlers;\n+    }\n+\n+    public static void generateMetrics(DMNResult dmnResult) {\n+        if (dmnResult == null) {\n+            LOGGER.warn(\"DMNResultMetricsBuilder can't register the metrics because the dmn result is null.\");\n+            return;\n+        }\n+\n+        List<DMNDecisionResult> decisionResults = dmnResult.getDecisionResults();\n+        for (DMNDecisionResult decision : decisionResults) {\n+            Object result = decision.getResult();\n+            if (SupportedDecisionTypes.isSupported(result.getClass())) {\n+                handlers.get(result.getClass()).record(decision.getDecisionName(), result);", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTY3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391535673", "bodyText": "I've refactored it: now in the object we export the pair (endpoint, decision), so that the metric export is unique", "author": "r00ta", "createdAt": "2020-03-12T10:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NjMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Njg5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391166893", "bodyText": "Please remove both maps and define a field for each metric (and initialize it too)", "author": "danielezonca", "createdAt": "2020-03-11T18:09:08Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] HANDLER_LABEL = new String[]{\"handler\"};\n+\n+    private static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Map<CountersTypesEnum, Counter> counters = new HashMap<>();\n+\n+    private static final Map<SummaryTypes, Summary> summaries = new HashMap<>();", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTQ2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349465", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Njg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NzMzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391167336", "bodyText": "Can you please add a comment to explain what is this?", "author": "danielezonca", "createdAt": "2020-03-11T18:10:02Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/dmnhandlers/DecisionConstants.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics.dmnhandlers;\n+\n+public class DecisionConstants {\n+\n+    public static final String DECISIONS_NAME_SUFFIX = \"_dmn_result\";\n+\n+    public static final String DECISIONS_HELP = \"Decision output.\";\n+\n+    public static final String[] HANDLER_IDENTIFIER_LABELS = new String[]{\"handler\", \"identifier\"};", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTQyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349427", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NzMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODU1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391168552", "bodyText": "I agree to keep a test that check this double mapping, just simplify the comment :)", "author": "danielezonca", "createdAt": "2020-03-11T18:12:05Z", "path": "addons/monitoring-prometheus-addon/src/test/java/org/kie/addons/monitoring/integration/DMNResultMetricsBuilderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.integration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.addons.monitoring.mocks.DMNDecisionResultMock;\n+import org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder;\n+import org.kie.addons.monitoring.system.metrics.dmnhandlers.DecisionConstants;\n+import org.kie.kogito.codegen.grafana.SupportedDecisionTypes;\n+import org.kie.kogito.dmn.rest.DMNResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DMNResultMetricsBuilderTest {\n+\n+    CollectorRegistry registry;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        registry = CollectorRegistry.defaultRegistry;\n+    }\n+\n+    @Test\n+    public void GivenADMNResult_WhenMetricsAreStored_ThenTheCollectorsAreProperlyWorking(){\n+        // Arrange\n+        DMNResult dmnResult = new DMNResult();\n+        List<DMNDecisionResultMock> decisions = new ArrayList<>();\n+        decisions.add(new DMNDecisionResultMock(\"AlphabetDecision\", \"A\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\",\"Hello\"));\n+        decisions.add(new DMNDecisionResultMock(\"DictionaryDecision\", \"World\"));\n+\n+        dmnResult.setDecisionResults(decisions);\n+\n+        int expectedAlphabetDecisionA = 1;\n+        int expectedDictionaryDecisionHello = 2;\n+        int expectedDictionaryDecisionWorld = 1;\n+\n+        // Act\n+        DMNResultMetricsBuilder.generateMetrics(dmnResult);\n+\n+        // Assert\n+        assertEquals(expectedAlphabetDecisionA, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"AlphabetDecision\", \"A\"));\n+        assertEquals(expectedDictionaryDecisionHello, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"Hello\"));\n+        assertEquals(expectedDictionaryDecisionWorld, getLabelsValue(SupportedDecisionTypes.fromInternalToStandard(String.class), \"DictionaryDecision\", \"World\"));\n+\n+    }\n+\n+    // Given that atm the two modules are dependent and there is not a clear way to extend the code generation,\n+    // this test covers the fact that the two classes are aligned, i.e. if you add/remove a supported type, you\n+    // have to update the addon as well.", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTM2OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349369", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODc5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391168795", "bodyText": "You can replace it with findFirst() to avoid to iterate over the whole collection", "author": "danielezonca", "createdAt": "2020-03-11T18:12:29Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTMyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349329", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2ODc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTE3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169176", "bodyText": "I think you should use asString instead of toString", "author": "danielezonca", "createdAt": "2020-03-11T18:13:05Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0OTI0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391349244", "bodyText": "Switched to getNameAsString, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTU3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169573", "bodyText": "Why isn't this import added in addMonitoringImports method as all the others? You can also get rid of all the imports just using the full canonical name of the classes when you use them", "author": "danielezonca", "createdAt": "2020-03-11T18:13:42Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODk1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348956", "bodyText": "Moved to addMonitoringImports, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391169701", "bodyText": "Not needed", "author": "danielezonca", "createdAt": "2020-03-11T18:13:55Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODg1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348858", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170265", "bodyText": "Can you please verify if this can happen? I expect getBody can be empty only if it is abstract or inside an interface", "author": "danielezonca", "createdAt": "2020-03-11T18:14:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NDk1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391554956", "bodyText": "Yes, I checked and you are right: it can happen in the case of an interface or an abstract class. I.e. in this particular case the body should always be present, 'cause our templates are simple concrete classes.\nShould we just leave the Throw just to suppress the warnings and also be more \"safe\" in the future (for sure nothing will change in the future, but yeah, **** happens)?", "author": "r00ta", "createdAt": "2020-03-12T11:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2MDk5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393160995", "bodyText": "In this case it is fine to throw an exception with a clear message like \"This method should be invoked only with concrete classes and not with abstract methods or interfaces\". Wdyt?", "author": "danielezonca", "createdAt": "2020-03-16T16:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMDk1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393800959", "bodyText": "Thx! Fixed", "author": "r00ta", "createdAt": "2020-03-17T16:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170408", "bodyText": "I think it is better to add a placeholder to replace instead of rely on the current position of a statement", "author": "danielezonca", "createdAt": "2020-03-11T18:15:06Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DMNRestResourceGenerator.java", "diffHunk": "@@ -113,13 +113,74 @@ public String generate() {\n                 MethodCallExpr rewrittenReturnExpr = new MethodCallExpr(new MethodCallExpr(new MethodCallExpr(new NameExpr(\"result\"), \"getDecisionResults\"), \"get\").addArgument(new IntegerLiteralExpr(0)), \"getResult\");\n                 returnStmt.setExpression(rewrittenReturnExpr);\n             }\n+\n+            if (useMonitoring) {\n+                addMonitoringToMethod(clonedMethod, ds.getName());\n+            }\n+\n             template.addMember(clonedMethod);\n         }\n \n+        if (useMonitoring) {\n+            addMonitoringImports(clazz);\n+            ClassOrInterfaceDeclaration exceptionClazz = clazz.findAll(ClassOrInterfaceDeclaration.class).stream().filter(f -> !f.equals(template)).collect(Collectors.toList()).get(0);\n+            addExceptionMetricsLogging(clazz, exceptionClazz, nameURL);\n+            addMonitoringToMethod(dmnMethod, nameURL);\n+        }\n+\n         template.getMembers().sort(new BodyDeclarationComparator());\n         return clazz.toString();\n     }\n-    \n+\n+    public String getNameURL() {\n+        return nameURL;\n+    }\n+\n+    public Definitions getDefinitions() {\n+        return this.definitions;\n+    }\n+\n+    public DMNRestResourceGenerator withDependencyInjection(DependencyInjectionAnnotator annotator) {\n+        this.annotator = annotator;\n+        return this;\n+    }\n+\n+    public DMNRestResourceGenerator withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public String className() {\n+        return resourceClazzName;\n+    }\n+\n+    private void addExceptionMetricsLogging(CompilationUnit cu, ClassOrInterfaceDeclaration template, String nameURL) {\n+        MethodDeclaration method = template.findAll(MethodDeclaration.class, x -> x.getName().toString().equals(\"toResponse\")).get(0);\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint.\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        String methodArgumentName = method.getParameters().get(0).getNameAsString();\n+        statements.addBefore(parseStatement(String.format(\"SystemMetricsCollector.registerException(\\\"%s\\\", %s.getStackTrace()[0].toString());\", nameURL, methodArgumentName)), returnStmt);\n+        return;\n+    }\n+\n+    private void addMonitoringImports(CompilationUnit cu) {\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.SystemMetricsCollector\"), false, false));\n+        cu.addImport(new ImportDeclaration(new Name(\"org.kie.addons.monitoring.system.metrics.DMNResultMetricsBuilder\"), false, false));\n+    }\n+\n+    private void addMonitoringToMethod(MethodDeclaration method, String nameURL) {\n+        BlockStmt body = method.getBody().orElseThrow(() -> new NoSuchElementException(\"A method declaration doesn't contain a body!\"));\n+        NodeList<Statement> statements = body.getStatements();\n+        IfStmt ifStmt = body.findFirst(IfStmt.class).orElseThrow(() -> new NoSuchElementException(\"Check for null dmn result not found, can't add monitoring to endpoint. Template was modified.\"));", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYwMzMxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391603315", "bodyText": "Fully agree. I had a quick look at the doc and in the findX functions the argument has to be a Statement, so it does not work with comments or other things.\nI have in mind we can achieve a kind of \"placeholding\" with the refactoring of the endpoints, splitting the responsabilities into methods (for example \"prologue\", \"act\", \"epilogue\" or something like this. And between each method there would be an object that we can set up during the codegeneration, adding properties as needed). And if somebody has to put new code into the codegen, at least we have some sections that he can modify.\nBut probably this refactoring is a bit out of scope from this PR (we can do that in another PR with a proper discussion), so right now I've just encapsulated the epilogue into a method, so that I can add what I need before the return statement:\n\nthe template becomes:\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.APPLICATION_JSON)\n    public Object dmn(java.util.Map<String, Object> variables) {\n        org.kie.kogito.decision.DecisionModel decision = application.decisionModels().getDecisionModel(\"$modelNamespace$\", \"$modelName$\");\n        org.kie.kogito.dmn.rest.DMNResult result = new org.kie.kogito.dmn.rest.DMNResult(decision.evaluateAll(decision.newContext(variables)));\n        return extractContextIfSucceded(result);\n    }\n\n    @javax.ws.rs.ext.Provider\n    public static class DMNEvaluationErrorExceptionMapper implements javax.ws.rs.ext.ExceptionMapper<org.kie.kogito.dmn.rest.DMNEvaluationErrorException> {\n        public javax.ws.rs.core.Response toResponse(org.kie.kogito.dmn.rest.DMNEvaluationErrorException e) {\n            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getResult()).build();\n        }\n    }\n\n    private Object extractContextIfSucceded(DMNResult result){\n        if (!result.hasErrors()) {\n            return result.getDmnContext();\n        } else {\n            throw new DMNEvaluationErrorException(result);\n        }\n    }\nAnd the section you commented:\n        ReturnStmt returnStmt = body.findFirst(ReturnStmt.class).orElseThrow(() -> new NoSuchElementException(\"Return statement not found: can't add monitoring to endpoint. Template was modified.\"));\nWhat do you think?", "author": "r00ta", "createdAt": "2020-03-12T13:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMzcxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393223717", "bodyText": "I like this proposal and I agree to postpone this refactoring to another PR :)", "author": "danielezonca", "createdAt": "2020-03-16T18:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170588", "bodyText": "You moved most of the methods so it is hard to understand the differences :)\nCan you quickly describe what you did here?", "author": "danielezonca", "createdAt": "2020-03-11T18:15:25Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -42,86 +43,32 @@\n import org.kie.dmn.backend.marshalling.v1x.DMNMarshallerFactory;\n import org.kie.dmn.core.assembler.DMNResource;\n import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.model.v1_2.TDecision;\n import org.kie.internal.io.ResourceWithConfigurationImpl;\n import org.kie.kogito.codegen.AbstractGenerator;\n import org.kie.kogito.codegen.ApplicationGenerator;\n import org.kie.kogito.codegen.ApplicationSection;\n import org.kie.kogito.codegen.ConfigGenerator;\n import org.kie.kogito.codegen.GeneratedFile;\n import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.grafana.GrafanaConfigurationWriter;\n \n import static org.drools.core.util.IoUtils.readBytesFromInputStream;\n import static org.kie.api.io.ResourceType.determineResourceType;\n import static org.kie.kogito.codegen.ApplicationGenerator.log;\n \n public class DecisionCodegen extends AbstractGenerator {\n \n-    public static DecisionCodegen ofJar(Path jarPath) throws IOException {", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NDU1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391574557", "bodyText": "Sure, I had to reorder the methods and the properties 'cause it was quite confusing.\n\nreordering of methods and properties\nadded useMonitoring property\nadded withMonitoring method (line 121)\ninject useMonitoring in the DMNRestResourceGenerators (line 170)\ngenerate a dashboard for each DMNRestResourceGenerator (line 176)", "author": "r00ta", "createdAt": "2020-03-12T12:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMzk3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394203972", "bodyText": "I'd prefer keeping static factory methods at the top", "author": "evacchi", "createdAt": "2020-03-18T09:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MjEwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394252105", "bodyText": "No problem, I backported it. Personally I don't like it, but no matter", "author": "r00ta", "createdAt": "2020-03-18T10:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDcwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391170708", "bodyText": "Please move the string to a constant", "author": "danielezonca", "createdAt": "2020-03-11T18:15:37Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.kie.dmn.model.v1_2.TDecision;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GrafanaConfigurationWriter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GrafanaConfigurationWriter.class);\n+\n+    private GrafanaConfigurationWriter() {\n+        // Intentionally left blank.\n+    }\n+\n+    public static String readStandardDashboard() {\n+\n+        InputStream is = GrafanaConfigurationWriter.class.getResourceAsStream(\"/grafana-dashboard-template/dashboard-template.json\");", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTAxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391535018", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T10:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTAxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391171011", "bodyText": "Do we really need to decouple interface and implementation? Do we expect to have other impl? I think we could remove this abstraction for now", "author": "danielezonca", "createdAt": "2020-03-11T18:16:04Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/IJGrafana.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+import protostream.javassist.NotFoundException;\n+\n+public interface IJGrafana {", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDkxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391534915", "bodyText": "Removed, thanks!", "author": "r00ta", "createdAt": "2020-03-12T10:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTkxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391171911", "bodyText": "I think you can move all Grafana API classes to a top level module named grafana-api because it is not related with codegen module in general", "author": "danielezonca", "createdAt": "2020-03-11T18:17:28Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNDgwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391534803", "bodyText": "I moved this kind of library to another  top level module. It looks more clean now, but I had to put the dmn type mapping inside this module 'cause otherwise this library would have a dependency on the kogito-codegen. It might be okeysh, let's have a call later anyway on that", "author": "r00ta", "createdAt": "2020-03-12T10:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjAwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172002", "bodyText": "I think it could be nice to have a constructor with the id as parameter so I can provide mine", "author": "danielezonca", "createdAt": "2020-03-11T18:17:36Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/JGrafana.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.codegen.grafana.factories.GridPosFactory;\n+import org.kie.kogito.codegen.grafana.factories.PanelFactory;\n+import org.kie.kogito.codegen.grafana.model.GrafanaDashboard;\n+import org.kie.kogito.codegen.grafana.model.functions.ExprBuilder;\n+import org.kie.kogito.codegen.grafana.model.functions.GrafanaFunction;\n+import org.kie.kogito.codegen.grafana.model.panel.GrafanaPanel;\n+import org.kie.kogito.codegen.grafana.model.panel.PanelType;\n+\n+/**\n+ * Java configurator to create standard grafana dashboards\n+ */\n+public class JGrafana implements IJGrafana {\n+\n+    private GrafanaDashboard dashboard;\n+\n+    /**\n+     * Create a new JGrafana instance.\n+     *\n+     * @param title: The title of your dashboard.\n+     */\n+    public JGrafana(String title) {\n+        String uuid = UUID.randomUUID().toString();", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMzY0NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391533645", "bodyText": "Done, Thanks!", "author": "r00ta", "createdAt": "2020-03-12T10:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjIxMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172210", "bodyText": "This could be moved to a dmn subpackage", "author": "danielezonca", "createdAt": "2020-03-11T18:17:55Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/SupportedDecisionTypes.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana;", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODU5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348598", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MjIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mjk1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391172952", "bodyText": "You can use SortedMap interface and TreeMap implementation and then just iterate over values", "author": "danielezonca", "createdAt": "2020-03-11T18:19:08Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/model/functions/ExprBuilder.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.model.functions;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ExprBuilder {\n+\n+    private ExprBuilder() {\n+    }\n+\n+    public static String apply(String expr, Map<Integer, GrafanaFunction> functions) {", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODQ1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348459", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3Mjk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzA4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173084", "bodyText": "Please move to a dmn package", "author": "danielezonca", "createdAt": "2020-03-11T18:19:19Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/grafana/types/AbstractDmnType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen.grafana.types;", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODQyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348429", "bodyText": "Done, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173131", "bodyText": "Please can you explain what you have changed?", "author": "danielezonca", "createdAt": "2020-03-11T18:19:24Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -80,6 +81,37 @@\n \n public class IncrementalRuleCodegen extends AbstractGenerator {\n \n+    private final Collection<Resource> resources;", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1ODY1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391558651", "bodyText": "Sure, sorry for the reordering of the methods, but this class had a very confusing order of the properties.\n\nOrdered the properties and the methods.\nAdded a property useMonitoring.\nIn the creation of the RuleUnitGenerator inject the useMonitoring variable (line 220), so that the generator knows wheather it has to inject the monitoring statements in the endpoints.\nFor each QueryEndpointGenerator generate a grafana dashboard (line 255) and store it in the target/dashboards folder.", "author": "r00ta", "createdAt": "2020-03-12T11:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjE1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394206150", "bodyText": "this refactoring is even more confusing. The rationale should have been\n\nstatic properties at the top\nstatic factories following static properties\ninstance fields\nconstructors and instance methods\n\nnow, the rule might not have been followed 100%, and I do not necessarily disagree with this refactoring per-se, but if you want to do a refactoring you should at least open an ad-hoc PR, otherwise the PR becomes too massive and it's hard to understand the changes :)", "author": "evacchi", "createdAt": "2020-03-18T09:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MzQ4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394263482", "bodyText": "No problem, I backported it. Personally I don't like it, but no matter", "author": "r00ta", "createdAt": "2020-03-18T11:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzIwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173202", "bodyText": "Can you describe the changes here?", "author": "danielezonca", "createdAt": "2020-03-11T18:19:31Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/QueryEndpointGenerator.java", "diffHunk": "@@ -61,8 +68,9 @@\n     private final String endpointName;\n     private final String targetCanonicalName;\n     private final String generatedFilePath;\n+    private final boolean useMonitoring;\n \n-    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator ) {\n+    public QueryEndpointGenerator(RuleUnitDescription ruleUnit, QueryModel query, DependencyInjectionAnnotator annotator, boolean useMonitoring) {", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2MTE0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391561144", "bodyText": "Yeah, sorry again for refactoring this class. It contains\n\nSome basic refactoring (remove spaces here and there and new lines)\nadd new property useMonitoring\nset the return type in the endpoints (line 158). Previously the template returned directly the result without assigning it to a variable, but given that in the monitoring we have to record the elapsed time of the request we have to collect the result, measure the time and return the result -> this change is coupled with the change in the template.\nadd monitoring to the endpoints (line 165 and 170)\nintercept and log all the exception wrapping the endpoint with a try/catch and throwing the catched exception at the end", "author": "r00ta", "createdAt": "2020-03-12T11:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzU4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391173588", "bodyText": "Please add systemMonitoring || or remove the property, now it is not used :)", "author": "danielezonca", "createdAt": "2020-03-11T18:20:12Z", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -172,11 +175,10 @@ private ApplicationGenerator createApplicationGenerator(\n         if (appPackageName.equals(ApplicationGenerator.DEFAULT_GROUP_ID)) {\n             appPackageName = ApplicationGenerator.DEFAULT_PACKAGE_NAME;\n         }\n+\n         boolean usePersistence = persistence || hasClassOnClasspath(project, \"org.kie.kogito.persistence.KogitoProcessInstancesFactory\");\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.addons.monitoring.rest.MetricsResource\");", "originalCommit": "3db9a3ce69df35c96f8ff42579f0db98be2c1d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0ODI4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r391348280", "bodyText": "Removed, thanks!", "author": "r00ta", "createdAt": "2020-03-12T00:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzU4OA=="}], "type": "inlineReview"}, {"oid": "71832892dcfc5fd33b5c8e50da2c68ce30e27c55", "url": "https://github.com/kiegroup/kogito-runtimes/commit/71832892dcfc5fd33b5c8e50da2c68ce30e27c55", "message": "resolve comments - refactoring", "committedDate": "2020-03-12T00:48:01Z", "type": "commit"}, {"oid": "ce69f44a4c7851819203f6c772b524e567e65ac6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ce69f44a4c7851819203f6c772b524e567e65ac6", "message": "move grafana lib to another module, refactoring, solving comments", "committedDate": "2020-03-12T10:39:54Z", "type": "commit"}, {"oid": "bb60001853d3e132b5441de8e114878f2dd5ff50", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bb60001853d3e132b5441de8e114878f2dd5ff50", "message": "improve template lookup", "committedDate": "2020-03-12T13:01:04Z", "type": "commit"}, {"oid": "dba0b5c8012abf4f7be399908aea94dfcc2af637", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dba0b5c8012abf4f7be399908aea94dfcc2af637", "message": "fix typo in grafana template", "committedDate": "2020-03-12T15:18:08Z", "type": "commit"}, {"oid": "8a4edd3bd9cedc459b71c3a8bf73bd67c92771b7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8a4edd3bd9cedc459b71c3a8bf73bd67c92771b7", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-13T08:40:25Z", "type": "commit"}, {"oid": "740d27900b095a691c6c2f106da2a9b2fb7eea0c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/740d27900b095a691c6c2f106da2a9b2fb7eea0c", "message": "fix exception handling", "committedDate": "2020-03-13T12:30:00Z", "type": "commit"}, {"oid": "5159d47f123f42672ca5c5905ab0bb3c686b7d47", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5159d47f123f42672ca5c5905ab0bb3c686b7d47", "message": "fix grafana template for exceptions", "committedDate": "2020-03-13T13:24:26Z", "type": "commit"}, {"oid": "1779c5327a6f1117f49f1933c071711981d173e4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1779c5327a6f1117f49f1933c071711981d173e4", "message": "restart jenkins", "committedDate": "2020-03-16T08:08:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDgxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393220812", "bodyText": "Please double check how path separator is managed in Kogito because if it will be concatenated with some OS specific values (i.e. File.separator) it might break", "author": "danielezonca", "createdAt": "2020-03-16T18:11:04Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +99,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());\n+\n+        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(resourceGenerator.getNameURL(), decisions);\n+        generatedFiles.add(\n+                new org.kie.kogito.codegen.GeneratedFile(\n+                        org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                        \"/dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",", "originalCommit": "1779c5327a6f1117f49f1933c071711981d173e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMjU3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393512574", "bodyText": "Yep I agree with you, I was wondering the same 'cause all the paths are hardcoded I don't know how this can work on other OS.", "author": "r00ta", "createdAt": "2020-03-17T08:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTIwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393221201", "bodyText": "Same comment about path separator", "author": "danielezonca", "createdAt": "2020-03-16T18:11:44Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "diffHunk": "@@ -297,6 +255,13 @@ public ApplicationSection section() {\n                 if (!queries.isEmpty()) {\n                     generatedFiles.add( new RuleUnitDTOSourceClass( ruleUnit.getRuleUnitDescription(), assignableChecker ).generateFile(org.kie.kogito.codegen.GeneratedFile.Type.RULE) );\n                     for (QueryEndpointGenerator query : queries) {\n+                        if (useMonitoring){\n+                            String dashboard = GrafanaConfigurationWriter.generateDashboardForEndpoint(query.getEndpointName());\n+                            generatedFiles.add(new org.kie.kogito.codegen.GeneratedFile(org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                                                                                        \"/dashboards/dashboard-endpoint-\" + query.getEndpointName() + \".json\",", "originalCommit": "1779c5327a6f1117f49f1933c071711981d173e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMjkwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393512901", "bodyText": "Same as above, all paths are hardcoded in kogito", "author": "r00ta", "createdAt": "2020-03-17T08:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTIwMQ=="}], "type": "inlineReview"}, {"oid": "3d93f2505615b8c28816a73f774f38dc428c0dda", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3d93f2505615b8c28816a73f774f38dc428c0dda", "message": "move template to codegen, add docs to grafana-api, resolve comments", "committedDate": "2020-03-17T09:34:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODgwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393648802", "bodyText": "You should use org.kie.dmn.model.api.Decision that is version agnostic instead of TDecision that is 1.2 specific", "author": "danielezonca", "createdAt": "2020-03-17T12:40:08Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -152,41 +100,120 @@ public DecisionContainerGenerator moduleGenerator() {\n         return moduleGenerator;\n     }\n \n+    @Override\n+    public void updateConfig(ConfigGenerator cfg) {\n+        // nothing.\n+    }\n+\n+    private void storeFile(GeneratedFile.Type type, String path, String source) {\n+        generatedFiles.add(new GeneratedFile(type, path, log(source).getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    public List<GeneratedFile> getGeneratedFiles() {\n+        return generatedFiles;\n+    }\n+\n+    @Override\n+    public ApplicationSection section() {\n+        return moduleGenerator;\n+    }\n+\n+    public DecisionCodegen withMonitoring(boolean useMonitoring) {\n+        this.useMonitoring = useMonitoring;\n+        return this;\n+    }\n+\n+    public static DecisionCodegen ofJar(Path jarPath) throws IOException {\n+        List<DMNResource> resources = new ArrayList<>();\n+\n+        try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n+            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+            while (entries.hasMoreElements()) {\n+                ZipEntry entry = entries.nextElement();\n+                ResourceType resourceType = determineResourceType(entry.getName());\n+                if (entry.getName().endsWith(\".dmn\")) {\n+                    InternalResource resource = new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n+                    resource.setResourceType(resourceType);\n+                    resource.setSourcePath(entry.getName());\n+                    resources.add(toDmnResource(resource));\n+                }\n+            }\n+        }\n+\n+        return ofDecisions(jarPath, resources);\n+    }\n+\n+    public static DecisionCodegen ofPath(Path path) throws IOException {\n+        Path srcPath = Paths.get(path.toString());\n+        try (Stream<Path> filesStream = Files.walk(srcPath)) {\n+            List<File> files = filesStream.filter(p -> p.toString().endsWith(\".dmn\"))\n+                    .map(Path::toFile)\n+                    .collect(Collectors.toList());\n+            return ofFiles(srcPath, files);\n+        }\n+    }\n+\n+    public static DecisionCodegen ofFiles(Path basePath, Collection<File> files) throws IOException {\n+        List<DMNResource> result = parseDecisions(files);\n+        return ofDecisions(basePath, result);\n+    }\n+\n     public List<GeneratedFile> generate() {\n         if (models.isEmpty()) {\n             return Collections.emptyList();\n         }\n \n         List<DMNRestResourceGenerator> rgs = new ArrayList<>(); // REST resources\n-        \n+\n         for (DMNResource dmnRes : models.values()) {\n-            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName).withDependencyInjection(annotator);\n+            DMNRestResourceGenerator resourceGenerator = new DMNRestResourceGenerator(dmnRes.getDefinitions(), applicationCanonicalName)\n+                    .withDependencyInjection(annotator)\n+                    .withMonitoring(useMonitoring);\n             rgs.add(resourceGenerator);\n         }\n-        \n+\n         for (DMNRestResourceGenerator resourceGenerator : rgs) {\n-            storeFile( GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n+            if (useMonitoring) {\n+                generateAndStoreGrafanaDashboard(resourceGenerator);\n+            }\n+\n+            storeFile(GeneratedFile.Type.REST, resourceGenerator.generatedFilePath(), resourceGenerator.generate());\n         }\n \n         return generatedFiles;\n     }\n \n-    @Override\n-    public void updateConfig(ConfigGenerator cfg) {\n-        // nothing.\n+    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+        Definitions definitions = resourceGenerator.getDefinitions();\n+        List<TDecision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof TDecision).map(x -> (TDecision) x).collect(Collectors.toList());", "originalCommit": "3d93f2505615b8c28816a73f774f38dc428c0dda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1NDk4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r393654984", "bodyText": "Thanks! Fixed", "author": "r00ta", "createdAt": "2020-03-17T12:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODgwMg=="}], "type": "inlineReview"}, {"oid": "066ea880b0fcc4bb4f0f359e108aae6312ea5af3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/066ea880b0fcc4bb4f0f359e108aae6312ea5af3", "message": "fix typo, use Decision instead of TDecision to find DMN Decisions during codegen", "committedDate": "2020-03-17T12:51:08Z", "type": "commit"}, {"oid": "9cbca84469e7423a3265f05eedd2ffefbb10b8ac", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9cbca84469e7423a3265f05eedd2ffefbb10b8ac", "message": "fix typo in readme", "committedDate": "2020-03-17T12:54:01Z", "type": "commit"}, {"oid": "8e526191a82cca3a2be8dd9085cf72ad0d061b67", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8e526191a82cca3a2be8dd9085cf72ad0d061b67", "message": "set final properties", "committedDate": "2020-03-17T14:40:31Z", "type": "commit"}, {"oid": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c", "message": "improve logging", "committedDate": "2020-03-17T16:16:30Z", "type": "commit"}, {"oid": "7e4c513e93ba3fa92ca68cef7fed81e1a854dc12", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7e4c513e93ba3fa92ca68cef7fed81e1a854dc12", "message": "restart jenkins", "committedDate": "2020-03-18T09:12:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5OTI0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394199249", "bodyText": "so here we are assuming that there will never be more than one instance of this per app. Might be worth documenting somewhere. I'd also consider using a @singleton or @ApplicationScope if possible (it's ok for now, just keep it in mind for later iterations)", "author": "evacchi", "createdAt": "2020-03-18T09:13:05Z", "path": "addons/monitoring-prometheus-addon/src/main/java/org/kie/addons/monitoring/system/metrics/SystemMetricsCollector.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.addons.monitoring.system.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Summary;\n+\n+public class SystemMetricsCollector {\n+\n+    private static final String STATUS_CODE_NAME = \"api_http_response_code\";\n+\n+    private static final String STATUS_CODE_HELP = \"Request status code.\";\n+\n+    private static final String[] ENDPOINT_LABEL = new String[]{\"endpoint\"};\n+\n+    private static final String[] ENDPOINT_INDENTIFIER_LABELS = new String[]{\"endpoint\", \"identifier\"};\n+\n+    private static final String ELAPSED_TIME_NAME = \"api_execution_elapsed_nanosecond\";\n+\n+    private static final String ELAPSED_TIME_HELP = \"Endpoint execution elapsed nanoseconds, 3 minutes time window.\";\n+\n+    private static final String EXCEPTIONS_NAME = \"api_http_stacktrace_exceptions\";\n+\n+    private static final String EXCEPTIONS_HELP = \"System exceptions details.\";\n+\n+    private static final Counter REQUEST_STATUS_CODE_COUNTER =\n+            Counter.build().name(STATUS_CODE_NAME)", "originalCommit": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1MTU0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394251546", "bodyText": "Yep, correct. Will keep in mind. Right now this structure follows the other monitoring addons already implemented", "author": "r00ta", "createdAt": "2020-03-18T10:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5OTI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDk3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394200976", "bodyText": "can you add some docs here? what's this for?", "author": "evacchi", "createdAt": "2020-03-18T09:16:04Z", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/model/functions/GrafanaFunction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.grafana.model.functions;\n+\n+public interface GrafanaFunction {", "originalCommit": "0dbf095fa17a2fce3545dc1e85ffdd099abf0e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MTgwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r394261809", "bodyText": "Done, let me know wdyt", "author": "r00ta", "createdAt": "2020-03-18T10:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDk3Ng=="}], "type": "inlineReview"}, {"oid": "991f5dd47317de20498b382aa4d20b7a945dd153", "url": "https://github.com/kiegroup/kogito-runtimes/commit/991f5dd47317de20498b382aa4d20b7a945dd153", "message": "remove dependency, backport original structure", "committedDate": "2020-03-18T10:13:52Z", "type": "commit"}, {"oid": "262589ef60350ec6bb799b6a48e0ca357410dfc7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/262589ef60350ec6bb799b6a48e0ca357410dfc7", "message": "add javadoc for GrafanaFunction", "committedDate": "2020-03-18T10:57:47Z", "type": "commit"}, {"oid": "7ba736e8a59c30002e1246f42cff178199c7dc4d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7ba736e8a59c30002e1246f42cff178199c7dc4d", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-18T12:50:27Z", "type": "commit"}, {"oid": "33fc8a127e6b48756085ddf74ed7e82f1007a3f3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/33fc8a127e6b48756085ddf74ed7e82f1007a3f3", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-18T16:46:40Z", "type": "commit"}, {"oid": "60e35af1cd615f782259c097ee53b71bcc9dc4f2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/60e35af1cd615f782259c097ee53b71bcc9dc4f2", "message": "align with master", "committedDate": "2020-03-18T18:53:05Z", "type": "commit"}, {"oid": "03a78b7a5545a38bcfe2b568b66b8600661902f2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/03a78b7a5545a38bcfe2b568b66b8600661902f2", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-19T08:51:31Z", "type": "commit"}, {"oid": "475c1a3f705dd31686682bca4d36229c81d75081", "url": "https://github.com/kiegroup/kogito-runtimes/commit/475c1a3f705dd31686682bca4d36229c81d75081", "message": "add monitoring addon to quarkus extension", "committedDate": "2020-03-19T11:29:47Z", "type": "commit"}, {"oid": "4ed278377ba3b4ea966692425a35780e6443afb7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ed278377ba3b4ea966692425a35780e6443afb7", "message": "fix path for generated resources", "committedDate": "2020-03-19T12:49:26Z", "type": "commit"}, {"oid": "3ce25735f0a6ed1609b90c8e56da58441b6d32b6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3ce25735f0a6ed1609b90c8e56da58441b6d32b6", "message": "make properties final", "committedDate": "2020-03-19T12:58:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODg5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/327#discussion_r395008893", "bodyText": "@danielezonca @evacchi This file has changed since your last review. I basically implemented the same logic of the maven plugin (GenerateModelMojo):\n\ninject useMonitoring variable in generators\nwrite resource files", "author": "r00ta", "createdAt": "2020-03-19T13:04:23Z", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -63,9 +63,13 @@\n import org.kie.kogito.codegen.process.ProcessCodegen;\n import org.kie.kogito.codegen.process.persistence.PersistenceGenerator;\n import org.kie.kogito.codegen.rules.IncrementalRuleCodegen;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class KogitoAssetsProcessor {\n \n+    private static final String generatedDashboardsDir = \"/target/resources/\";\n+    private static final Logger logger = LoggerFactory.getLogger(KogitoAssetsProcessor.class);", "originalCommit": "3ce25735f0a6ed1609b90c8e56da58441b6d32b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "865f0626a72cb2e34c0283b512d287bedae2fbb4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/865f0626a72cb2e34c0283b512d287bedae2fbb4", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-20T11:13:46Z", "type": "commit"}, {"oid": "4737ada0b85efd4ffa892ba657006baec1b3b753", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4737ada0b85efd4ffa892ba657006baec1b3b753", "message": "Merge branch 'master' into system-metrics", "committedDate": "2020-03-24T13:10:26Z", "type": "commit"}, {"oid": "30965a4216710feebd92cf19bba96e862cb8914f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/30965a4216710feebd92cf19bba96e862cb8914f", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-26T12:47:44Z", "type": "commit"}, {"oid": "9435713f2222606211c7ad51311c5efb3a95c8d4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9435713f2222606211c7ad51311c5efb3a95c8d4", "message": "fix logger", "committedDate": "2020-03-26T19:08:47Z", "type": "commit"}, {"oid": "ab15dc8e5e5c13c3cf2fe6986617c8265090115f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ab15dc8e5e5c13c3cf2fe6986617c8265090115f", "message": "remove dmn test file", "committedDate": "2020-03-26T19:27:20Z", "type": "commit"}, {"oid": "cdc72a5f4c8aee2ea257f72b918671e3aab07fc2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cdc72a5f4c8aee2ea257f72b918671e3aab07fc2", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics", "committedDate": "2020-03-30T14:50:15Z", "type": "commit"}, {"oid": "a3c6b09ccf28cbeba1a80e2e2cb4899c7dcf8b2c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a3c6b09ccf28cbeba1a80e2e2cb4899c7dcf8b2c", "message": "resolve conflicts", "committedDate": "2020-04-01T13:07:53Z", "type": "commit"}]}