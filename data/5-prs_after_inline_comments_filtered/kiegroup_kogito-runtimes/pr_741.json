{"pr_number": 741, "pr_title": "KOGITO-3110 Refactor ofCollectedResources methods in *Codegen", "pr_createdAt": "2020-09-03T09:24:46Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/741", "timeline": [{"oid": "7647e455d9b8d93ab9dc20afe7f40353595ae1d0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7647e455d9b8d93ab9dc20afe7f40353595ae1d0", "message": "use CollectedResources.fromPath() and deprecate ${X}Generator.fromPath everywhere", "committedDate": "2020-09-03T10:27:24Z", "type": "commit"}, {"oid": "47148aeb4a4533b408eb2b9cffa7c1fa09fae5a6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/47148aeb4a4533b408eb2b9cffa7c1fa09fae5a6", "message": "wip", "committedDate": "2020-09-03T10:27:48Z", "type": "commit"}, {"oid": "1d3be6aa48b86177b649ec274c189476ee191857", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1d3be6aa48b86177b649ec274c189476ee191857", "message": "deprecate ofFiles and all oFPaths usages", "committedDate": "2020-09-03T10:28:43Z", "type": "commit"}, {"oid": "34f9820e68d3e4545248a7b1ad4749a66096e243", "url": "https://github.com/kiegroup/kogito-runtimes/commit/34f9820e68d3e4545248a7b1ad4749a66096e243", "message": "fix path handling", "committedDate": "2020-09-03T10:29:03Z", "type": "commit"}, {"oid": "34f9820e68d3e4545248a7b1ad4749a66096e243", "url": "https://github.com/kiegroup/kogito-runtimes/commit/34f9820e68d3e4545248a7b1ad4749a66096e243", "message": "fix path handling", "committedDate": "2020-09-03T10:29:03Z", "type": "forcePushed"}, {"oid": "b9a6a2c3aee2fab68888a5a072b2b23371b4fe6f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b9a6a2c3aee2fab68888a5a072b2b23371b4fe6f", "message": "fix path handling (lost during rebase)", "committedDate": "2020-09-04T06:54:48Z", "type": "commit"}, {"oid": "d2b7887a3b06fed81f93ee16e00e502324d4665a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d2b7887a3b06fed81f93ee16e00e502324d4665a", "message": "clean unused imports", "committedDate": "2020-09-04T12:21:34Z", "type": "commit"}, {"oid": "b14f7220d12b7b063185541267386d3ac7913b43", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b14f7220d12b7b063185541267386d3ac7913b43", "message": "relativize paths + follow symlinks", "committedDate": "2020-09-04T12:54:21Z", "type": "commit"}, {"oid": "8fd571329c5b8bd09d506c2824b1f6ee0e55ed75", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8fd571329c5b8bd09d506c2824b1f6ee0e55ed75", "message": "remove deprecated APIs from IncrementalRuleCodegen", "committedDate": "2020-09-08T07:46:08Z", "type": "commit"}, {"oid": "6b784b0803a476ca29ae58f0531172e85b7336f9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6b784b0803a476ca29ae58f0531172e85b7336f9", "message": "optimize imports", "committedDate": "2020-09-08T07:46:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDkyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484744928", "bodyText": "not sure where this method is used, but I would consider if meaningful for this method to check basePath is in fact a valid parent of each files?", "author": "tarilabs", "createdAt": "2020-09-08T08:31:41Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/io/CollectedResource.java", "diffHunk": "@@ -102,6 +107,22 @@\n         return resources;\n     }\n \n+    /**\n+     * Returns a collection of CollectedResource from the given files\n+     */\n+    public static Collection<CollectedResource> fromFiles(Path basePath, File... files) {\n+        Collection<CollectedResource> resources = new ArrayList<>();\n+        try (Stream<File> paths = Arrays.stream(files)) {\n+            paths.filter(File::isFile)\n+                    .map(f -> new FileSystemResource(f)\n+                            .setResourceType(determineResourceType(f.getName())))\n+                    .map(f -> new CollectedResource(basePath, f))\n+                    .forEach(resources::add);\n+        }\n+        return resources;", "originalCommit": "6b784b0803a476ca29ae58f0531172e85b7336f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NzI3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484747278", "bodyText": "good point. added as an invariant check on the costructor 2eb4ad1", "author": "evacchi", "createdAt": "2020-09-08T08:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTUzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484745536", "bodyText": "difficult to understand why this change is required, but if all the tests are passing I guess it's super fine for me", "author": "tarilabs", "createdAt": "2020-09-08T08:32:31Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionContainerGenerator.java", "diffHunk": "@@ -91,8 +93,13 @@ private String getDecisionModelJarResourcePath(CollectedResource resource) {\n \n     private String getDecisionModelRelativeResourcePath(CollectedResource resource) {\n         String source = getDecisionModelJarResourcePath(resource);\n-        Path relativizedPath = resource.basePath().relativize(Paths.get(source));\n-        return \"/\" + relativizedPath.toString().replace(File.separatorChar, '/');\n+        try {\n+            Path sourcePath = Paths.get(source).toAbsolutePath().toRealPath();\n+            Path relativizedPath = resource.basePath().toAbsolutePath().toRealPath().relativize(sourcePath);\n+            return \"/\" + relativizedPath.toString().replace(File.separatorChar, '/');\n+        } catch (IOException e) {", "originalCommit": "6b784b0803a476ca29ae58f0531172e85b7336f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NjUwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484746500", "bodyText": "toRealPath() throws a checked IOException, the reason for the change is the issue when codegen is invoked in symlinked directory :)", "author": "evacchi", "createdAt": "2020-09-08T08:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTUzNg=="}], "type": "inlineReview"}, {"oid": "2eb4ad1d0962b7644e51d52ed5f3f53139bb41e8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2eb4ad1d0962b7644e51d52ed5f3f53139bb41e8", "message": "add invariant check on CollectedResource constructor", "committedDate": "2020-09-08T08:42:35Z", "type": "commit"}, {"oid": "9785a16f887c134d8632d027a9670e569eb0179c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9785a16f887c134d8632d027a9670e569eb0179c", "message": "disable invariant check for jars", "committedDate": "2020-09-08T10:09:09Z", "type": "commit"}, {"oid": "15cb85eb920a34146f608dbce761952eccdc4696", "url": "https://github.com/kiegroup/kogito-runtimes/commit/15cb85eb920a34146f608dbce761952eccdc4696", "message": "fix", "committedDate": "2020-09-08T11:44:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc2Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484987763", "bodyText": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d", "author": "gitgabrio", "createdAt": "2020-09-08T14:57:33Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -96,55 +83,10 @@ public static PredictionCodegen ofCollectedResources(Collection<CollectedResourc\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {", "originalCommit": "15cb85eb920a34146f608dbce761952eccdc4696", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNTQwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r485015403", "bodyText": "I knew you would have liked this PR :P", "author": "evacchi", "createdAt": "2020-09-08T15:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Nzk4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/741#discussion_r484987986", "bodyText": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d", "author": "gitgabrio", "createdAt": "2020-09-08T14:57:43Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java", "diffHunk": "@@ -96,55 +83,10 @@ public static PredictionCodegen ofCollectedResources(Collection<CollectedResourc\n         return ofPredictions(dmnResources);\n     }\n \n-    public static PredictionCodegen ofJar(Path... jarPaths) throws IOException {\n-        List<PMMLResource> pmmlResources = new ArrayList<>();\n-        for (Path jarPath : jarPaths) {\n-            List<Resource> resources = new ArrayList<>();\n-            try (ZipFile zipFile = new ZipFile(jarPath.toFile())) {\n-                Enumeration<? extends ZipEntry> entries = zipFile.entries();\n-                while (entries.hasMoreElements()) {\n-                    ZipEntry entry = entries.nextElement();\n-                    ResourceType resourceType = determineResourceType(entry.getName());\n-                    if (resourceType == ResourceType.PMML) {\n-                        InternalResource resource =\n-                                new ByteArrayResource(readBytesFromInputStream(zipFile.getInputStream(entry)));\n-                        resource.setResourceType(resourceType);\n-                        resource.setSourcePath(entry.getName());\n-                        resources.add(resource);\n-                    }\n-                }\n-            }\n-            pmmlResources.addAll(parsePredictions(jarPath, resources));\n-        }\n-        return ofPredictions(pmmlResources);\n-    }\n-\n-    public static PredictionCodegen ofPath(Path... paths) throws IOException {\n-        List<PMMLResource> resources = new ArrayList<>();\n-        for (Path path : paths) {\n-            Path srcPath = Paths.get(path.toString());\n-            try (Stream<Path> filesStream = Files.walk(srcPath)) {\n-                List<File> files = filesStream.filter(p -> p.toString().endsWith(\".pmml\"))\n-                        .map(Path::toFile)\n-                        .collect(Collectors.toList());\n-                resources.addAll(parseFiles(srcPath, files));\n-            }\n-        }\n-        return ofPredictions(resources);\n-    }\n-\n-    public static PredictionCodegen ofFiles(Path basePath, List<File> files) {\n-        return ofPredictions(parseFiles(basePath, files));\n-    }\n-\n     private static PredictionCodegen ofPredictions(List<PMMLResource> resources) {\n         return new PredictionCodegen(resources);\n     }\n \n-    private static List<PMMLResource> parseFiles(Path path, List<File> files) {", "originalCommit": "15cb85eb920a34146f608dbce761952eccdc4696", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}