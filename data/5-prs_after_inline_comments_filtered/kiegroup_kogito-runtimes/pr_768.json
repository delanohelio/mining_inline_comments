{"pr_number": 768, "pr_title": "KOGITO-3211 - SW update to latest spec and runtime updates", "pr_createdAt": "2020-09-16T05:00:08Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/768", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NDQ5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r489474491", "bodyText": "Is it safe to get the first index without checking it first?", "author": "ricardozanini", "createdAt": "2020-09-16T14:18:46Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/core/ServerlessWorkflowFactory.java", "diffHunk": "@@ -162,7 +165,7 @@ public EndNode messageEndNode(long id, String name, Workflow workflow, End state\n         endNode.setId(id);\n         endNode.setName(name);\n \n-        EventDefinition eventDef = ServerlessWorkflowUtils.getWorkflowEventFor(workflow, stateEnd.getProduceEvent().getEventRef());\n+        EventDefinition eventDef = ServerlessWorkflowUtils.getWorkflowEventFor(workflow, stateEnd.getProduceEvents().get(0).getEventRef());", "originalCommit": "6dd93ca63c58afec5ff52161bbdc50ad15df4592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ3NzQ4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r489477489", "bodyText": "Maybe this could be simpler? I don't know, I might be missing something.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((branch.getActions() == null || branch.getActions().size() < 1) || branch.getWorkflowId() == null) {\n          \n          \n            \n                                if (branch.getWorkflowId() == null) {\n          \n          \n            \n                                    return false;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            if ((branch.getActions() == null || branch.getActions().size() < 1) && branch.getWorkflowId() == null) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }", "author": "ricardozanini", "createdAt": "2020-09-16T14:22:47Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -118,13 +115,14 @@ public static boolean includesSupportedStates(Workflow workflow) {\n     }\n \n     public static boolean supportedParallelState(ParallelState parallelState) {\n-        // currently branches must exist and states included can\n-        // be single subflow states only\n+        // currently branches must exist and can include only actions\n         // this will be improved in future\n         if (parallelState.getBranches() != null && parallelState.getBranches().size() > 0) {\n             for (Branch branch : parallelState.getBranches()) {\n-                if (branch.getStates() == null || branch.getStates().size() != 1 || !(branch.getStates().get(0) instanceof SubflowState)) {\n-                    return false;\n+                if ((branch.getActions() == null || branch.getActions().size() < 1) || branch.getWorkflowId() == null) {\n+                    if (branch.getWorkflowId() == null) {\n+                        return false;\n+                    }\n                 }", "originalCommit": "6dd93ca63c58afec5ff52161bbdc50ad15df4592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwNDE3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r489704179", "bodyText": "Can we get rid of the commented code?", "author": "ricardozanini", "createdAt": "2020-09-16T19:28:31Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/ServerlessWorkflowParser.java", "diffHunk": "@@ -95,17 +95,22 @@ public Process parseWorkFlow(Reader workflowFile) throws JsonProcessingException\n         }\n \n         List<State> workflowStates = workflow.getStates();\n-        List<Function> workflowFunctions = workflow.getFunctions();\n+        List<FunctionDefinition> workflowFunctions = workflow.getFunctions();\n \n-        StartNode workflowStartNode;\n+        StartNode workflowStartNode = null;\n         Map<String, EndNode> workflowEndNodes = new HashMap<>();\n \n         State workflowStartState = ServerlessWorkflowUtils.getWorkflowStartState(workflow);\n \n-        if (workflowStartState.getType().equals(Type.EVENT)) {\n-            EventState startEventState = (EventState) workflowStartState;\n-            workflowStartNode = factory.messageStartNode(idCounter.getAndIncrement(), ServerlessWorkflowUtils.getWorkflowEventFor(workflow, startEventState.getEventsActions().get(0).getEventRefs().get(0)), process);\n-        } else {\n+//        if (workflowStartState.getType().equals(Type.EVENT)) {\n+//            EventState startEventState = (EventState) workflowStartState;\n+//            workflowStartNode = factory.messageStartNode(idCounter.getAndIncrement(), ServerlessWorkflowUtils.getWorkflowEventFor(workflow, startEventState.getOnEvents().get(0).getEventRefs().get(0)), process);\n+//        } else {\n+//            workflowStartNode = factory.startNode(idCounter.getAndIncrement(), NODE_START_NAME, process);\n+//        }", "originalCommit": "dccb51d169c8fb0a2ccf15e73789d50a8085951e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9ef271668e9cf8cf6d0c6eb10486aedcdeb67a1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d9ef271668e9cf8cf6d0c6eb10486aedcdeb67a1", "message": "KOGITO-3211 - SW update to latest spec and runtime updates\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:34:38Z", "type": "commit"}, {"oid": "f369bcdd1298a69edfd17614c011337166f1a57b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f369bcdd1298a69edfd17614c011337166f1a57b", "message": "Fix license headers\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:34:38Z", "type": "commit"}, {"oid": "b6ad84b7fb03bb99744b17a89d459948bcbae085", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b6ad84b7fb03bb99744b17a89d459948bcbae085", "message": "Removed schema validation as depends is not on maven central\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:36:40Z", "type": "commit"}, {"oid": "688e98882dbceb89e21c8f8df706283ed593bac4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/688e98882dbceb89e21c8f8df706283ed593bac4", "message": "Add missing support for multiple eventRefs in startin event states\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:36:40Z", "type": "commit"}, {"oid": "077456e0842314f0389b401aa46d7934d9bed0d0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/077456e0842314f0389b401aa46d7934d9bed0d0", "message": "Updates for comments and code smells\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:36:40Z", "type": "commit"}, {"oid": "5ef385efaa7f721e575d7f49969307956dbfcd97", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5ef385efaa7f721e575d7f49969307956dbfcd97", "message": "Adding test for switch state with conditions going to end defs\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:36:40Z", "type": "commit"}, {"oid": "cfa80fbfc78f5db9b09f39c4fe072db8ea5ba4b9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cfa80fbfc78f5db9b09f39c4fe072db8ea5ba4b9", "message": "fixing some more 'code smells'\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:39:13Z", "type": "commit"}, {"oid": "417025426998548ce6fd4bc8ebbf68981547dcc5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/417025426998548ce6fd4bc8ebbf68981547dcc5", "message": "Update - add additional support for switch states\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:39:13Z", "type": "commit"}, {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "message": "Add ability to produce multiple events on transitions\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:39:13Z", "type": "commit"}, {"oid": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "message": "Add ability to produce multiple events on transitions\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-13T19:39:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDg0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508314844", "bodyText": "I am seeing a few of these imports java.io.IOException in these classes, but I don't think the exception is actually thrown, you can probably remove them.", "author": "evacchi", "createdAt": "2020-10-20T08:37:57Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/EventStateSerializer.java", "diffHunk": "@@ -28,6 +22,8 @@\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n import org.jbpm.serverless.workflow.api.states.EventState;\n \n+import java.io.IOException;", "originalCommit": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODA2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558066", "bodyText": "The Serializers \"serialize\" method throws IOException", "author": "tsurdilo", "createdAt": "2020-10-23T02:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNDg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTE2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508315164", "bodyText": "see eg. another here", "author": "evacchi", "createdAt": "2020-10-20T08:38:25Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/ForEachStateSerializer.java", "diffHunk": "@@ -1,32 +1,28 @@\n /*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *   Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.jbpm.serverless.workflow.api.serializers;\n \n-import java.io.IOException;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-import org.jbpm.serverless.workflow.api.states.ForEachState;\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n+import org.jbpm.serverless.workflow.api.states.ForEachState;\n+\n+import java.io.IOException;", "originalCommit": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558246", "bodyText": "Yeah BeanSerializerFactory.instance.createSerializer throws it and we just re-throw in serialize method that calls it.", "author": "tsurdilo", "createdAt": "2020-10-23T02:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTI0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508315246", "bodyText": "etc. etc. :)", "author": "evacchi", "createdAt": "2020-10-20T08:38:33Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/serializers/InjectStateSerializer.java", "diffHunk": "@@ -1,32 +1,28 @@\n /*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n- *   Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-\n package org.jbpm.serverless.workflow.api.serializers;\n \n-import java.io.IOException;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-import org.jbpm.serverless.workflow.api.states.InjectState;\n import org.jbpm.serverless.workflow.api.states.DefaultState;\n+import org.jbpm.serverless.workflow.api.states.InjectState;\n+\n+import java.io.IOException;", "originalCommit": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODI5OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558299", "bodyText": ":)", "author": "tsurdilo", "createdAt": "2020-10-23T02:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNTI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjM4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r508316388", "bodyText": "I wish we will be able to revisit some of this codegen in the near future. String concat is a bit error-prone this way", "author": "evacchi", "createdAt": "2020-10-20T08:40:11Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,32 +150,27 @@ public static String scriptFunctionScript(String script) {\n         return retStr;\n     }\n \n-    public static String conditionScript(String path, DataCondition.Operator operator, String value) {\n-        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n-\n-        if (path.startsWith(\"$.\")) {\n-            path = path.substring(2);\n-        } else if (path.indexOf(\".\") >= 0) {\n-            workflowVar = path.split(\"\\\\.\")[0];\n-            path = path.substring(workflowVar.length() + 1);\n+    public static String conditionScript(String conditionStr) {\n+        if (conditionStr.startsWith(\"{{\")) {\n+            conditionStr = conditionStr.substring(2);\n+        }\n+        if (conditionStr.endsWith(\"}}\")) {\n+            conditionStr = conditionStr.substring(0, conditionStr.length() - 2);\n         }\n \n-        String workflowDataToInteger = \"return java.lang.Integer.parseInt(\" + workflowVar + \".get(\\\"\";\n-\n-        String retStr = \"\";\n-        if (operator == DataCondition.Operator.EQUALS) {\n-            retStr += \"return \" + workflowVar + \".get(\\\"\" + path + \"\\\").textValue().equals(\\\"\" + value + \"\\\");\";\n-        } else if (operator == DataCondition.Operator.GREATERTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) > \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.GREATERTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) >= \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHAN) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) < \" + value + \";\";\n-        } else if (operator == DataCondition.Operator.LESSTHANOREQUALS) {\n-            retStr += workflowDataToInteger + path + \"\\\").textValue()) <= \" + value + \";\";\n+        conditionStr = conditionStr.trim();\n+\n+        // check if we are calling a different workflow var\n+        String processVar = \"workflowdata\";\n+        String otherVar = conditionStr.substring(conditionStr.indexOf(\"$\") + 1, conditionStr.indexOf(\".\"));\n+\n+        if(otherVar.trim().length() > 0) {\n+            processVar = otherVar;\n+            conditionStr = conditionStr.replaceAll(otherVar, \"\");\n+\n         }\n \n-        return retStr;\n+        return \"return !((java.util.List<java.lang.String>) com.jayway.jsonpath.JsonPath.parse(((com.fasterxml.jackson.databind.JsonNode)kcontext.getVariable(\\\"\" + processVar + \"\\\")).toString()).read(\\\"\" + conditionStr + \"\\\")).isEmpty();\";", "originalCommit": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MjA3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510142072", "bodyText": "+1, would be good to have some way to at least hide this inside a utility method.", "author": "cristianonicolai", "createdAt": "2020-10-22T13:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODQ0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510558449", "bodyText": "ok", "author": "tsurdilo", "createdAt": "2020-10-23T02:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMxNjM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MzE0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510143149", "bodyText": "maybe do a more specific import?", "author": "cristianonicolai", "createdAt": "2020-10-22T13:03:26Z", "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/utils/WorkflowTestUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.jbpm.serverless.workflow.utils;\n+\n+\n+import org.jbpm.serverless.workflow.api.mapper.JsonObjectMapper;\n+import org.jbpm.serverless.workflow.api.mapper.YamlObjectMapper;\n+\n+import java.io.*;", "originalCommit": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTAzOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510559039", "bodyText": "ok", "author": "tsurdilo", "createdAt": "2020-10-23T02:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0MzE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1Njc0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510156742", "bodyText": "I think you can try something like the code below to avoid the roundtrip to String and back.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String jsonString = jsonObjectMapper.writeValueAsString(workflow);\n          \n          \n            \n                        JsonNode jsonNode = jsonObjectMapper.valueToTree(workflow)", "author": "cristianonicolai", "createdAt": "2020-10-22T13:22:20Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/api/workflow/BaseWorkflow.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.serverless.workflow.api.workflow;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import org.jbpm.serverless.workflow.api.Workflow;\n+import org.jbpm.serverless.workflow.api.mapper.JsonObjectMapper;\n+import org.jbpm.serverless.workflow.api.mapper.YamlObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base Workflow provides some extra functionality for the Workflow types\n+ */\n+public class BaseWorkflow {\n+\n+    private static JsonObjectMapper jsonObjectMapper = new JsonObjectMapper();\n+    private static YamlObjectMapper yamlObjectMapper = new YamlObjectMapper();\n+\n+    private static Logger logger = LoggerFactory.getLogger(BaseWorkflow.class);\n+\n+    public static Workflow fromSource(String source) {\n+        // try it as json markup first, if fails try yaml\n+        try {\n+            return jsonObjectMapper.readValue(source,\n+                    Workflow.class);\n+        } catch (Exception e) {\n+            try {\n+                return yamlObjectMapper.readValue(source,\n+                        Workflow.class);\n+            } catch (Exception ee) {\n+                throw new IllegalArgumentException(\"Could not convert markup to Workflow: \" + ee.getMessage());\n+            }\n+        }\n+    }\n+\n+    public static String toJson(Workflow workflow) {\n+        try {\n+            return jsonObjectMapper.writeValueAsString(workflow);\n+        } catch (JsonProcessingException e) {\n+            logger.error(\"Error mapping to json: {}\", e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    public static String toYaml(Workflow workflow) {\n+        try {\n+            String jsonString = jsonObjectMapper.writeValueAsString(workflow);", "originalCommit": "9fd99f1046b1daa8cf12c56cb3f6660b533a70a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTg1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/768#discussion_r510559859", "bodyText": "ok", "author": "tsurdilo", "createdAt": "2020-10-23T02:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1Njc0Mg=="}], "type": "inlineReview"}, {"oid": "0efde138dcf3c651cb0c204225df60fdbb5f9544", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0efde138dcf3c651cb0c204225df60fdbb5f9544", "message": "updated after reviews\n\nSigned-off-by: Tihomir Surdilovic <tsurdilo@redhat.com>", "committedDate": "2020-10-23T02:33:35Z", "type": "commit"}]}