{"pr_number": 890, "pr_title": "KOGITO-3828 - new monitoring addon automatic wiring of listeners", "pr_createdAt": "2020-11-13T10:04:05Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/890", "timeline": [{"oid": "cad69bb28d03df4d2e3d1176e6553d75f12b13fc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cad69bb28d03df4d2e3d1176e6553d75f12b13fc", "message": "add new modules", "committedDate": "2020-11-25T13:19:28Z", "type": "commit"}, {"oid": "cf2c85b3d62a71056d2bf71630c6b736cd6d6667", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cf2c85b3d62a71056d2bf71630c6b736cd6d6667", "message": "fix poms and move src to new common modules", "committedDate": "2020-11-25T13:22:59Z", "type": "commit"}, {"oid": "902be55a0b9a6e5a3c5036c825b11b7a560ffebf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/902be55a0b9a6e5a3c5036c825b11b7a560ffebf", "message": "update bom and rebase", "committedDate": "2020-11-25T13:45:52Z", "type": "commit"}, {"oid": "95a333295caa0726b84d6cad58757b274514ebcd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/95a333295caa0726b84d6cad58757b274514ebcd", "message": "rename package name", "committedDate": "2020-11-25T15:26:30Z", "type": "commit"}, {"oid": "95a333295caa0726b84d6cad58757b274514ebcd", "url": "https://github.com/kiegroup/kogito-runtimes/commit/95a333295caa0726b84d6cad58757b274514ebcd", "message": "rename package name", "committedDate": "2020-11-25T15:26:30Z", "type": "forcePushed"}, {"oid": "b1d51f31ce8ce5368243ab71bdeef8dac25700db", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b1d51f31ce8ce5368243ab71bdeef8dac25700db", "message": "rename config property", "committedDate": "2020-11-25T15:31:42Z", "type": "commit"}, {"oid": "ffc4a21b6aa98f8faae24fc74aa12ac23a60e63c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ffc4a21b6aa98f8faae24fc74aa12ac23a60e63c", "message": "remove quarkus dep in core module", "committedDate": "2020-11-26T08:03:10Z", "type": "commit"}, {"oid": "ba47291517f9c8dca83a60d4c3a58db86f0ba681", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ba47291517f9c8dca83a60d4c3a58db86f0ba681", "message": "fix typo", "committedDate": "2020-11-26T08:43:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNDE1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r532914158", "bodyText": "Can you please use a constant? Please use a shorter property name, I think something like kogito.monitoring.rule.useDefault could be enough. Wdyt?", "author": "danielezonca", "createdAt": "2020-11-30T21:26:30Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.rule.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)", "originalCommit": "ba47291517f9c8dca83a60d4c3a58db86f0ba681", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2MzM5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533263392", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-12-01T10:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNDE1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxOTg3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r532919879", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-11-30T21:38:03Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.rule.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = \"kogito.addon.monitoring.process.deafult.bean.create\", stringValue = \"true\", enableIfMissing = true)", "originalCommit": "ba47291517f9c8dca83a60d4c3a58db86f0ba681", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2Mjk5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533262998", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-12-01T10:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxOTg3OQ=="}], "type": "inlineReview"}, {"oid": "9510e79ee4349476668effe431385fe87e5965b8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9510e79ee4349476668effe431385fe87e5965b8", "message": "remove javax dep, add licences, move strings to constants", "committedDate": "2020-12-01T10:03:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzQxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323411", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for process monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for process monitoring.\");", "author": "danielezonca", "createdAt": "2020-12-01T11:03:30Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.springboot;\n+\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ConditionalOnProperty(\n+        value = Constants.MONITORING_PROCESS_USE_DEFAULT,\n+        havingValue = \"true\",\n+        matchIfMissing = true)\n+public class SpringbootProcessEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SpringbootProcessEventListenerFactory.class);\n+\n+    @Bean\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.info(\"Producing default listener for process monitoring.\");", "originalCommit": "9510e79ee4349476668effe431385fe87e5965b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzUyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323524", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for rule monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for rule monitoring.\");", "author": "danielezonca", "createdAt": "2020-12-01T11:03:44Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootRuleEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.springboot;\n+\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ConditionalOnProperty(\n+        value = Constants.MONITORING_RULE_USE_DEFAULT,\n+        havingValue = \"true\",\n+        matchIfMissing = true)\n+public class SpringbootRuleEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SpringbootRuleEventListenerFactory.class);\n+\n+    @Bean\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");", "originalCommit": "9510e79ee4349476668effe431385fe87e5965b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzY4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323684", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for rule monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for rule monitoring.\");", "author": "danielezonca", "createdAt": "2020-12-01T11:04:02Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");", "originalCommit": "9510e79ee4349476668effe431385fe87e5965b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMzc2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r533323764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Producing default listener for process monitoring.\");\n          \n          \n            \n                    LOGGER.debug(\"Producing default listener for process monitoring.\");", "author": "danielezonca", "createdAt": "2020-12-01T11:04:12Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.info(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.info(\"Producing default listener for process monitoring.\");", "originalCommit": "9510e79ee4349476668effe431385fe87e5965b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33b17cca532a729075e91e1c7f093b0d2fbaef83", "url": "https://github.com/kiegroup/kogito-runtimes/commit/33b17cca532a729075e91e1c7f093b0d2fbaef83", "message": "fix pom", "committedDate": "2020-12-01T13:41:53Z", "type": "commit"}, {"oid": "73df1bf4d9b1265b073d7716c96378c171550269", "url": "https://github.com/kiegroup/kogito-runtimes/commit/73df1bf4d9b1265b073d7716c96378c171550269", "message": "specify request mapping method", "committedDate": "2020-12-01T13:46:15Z", "type": "commit"}, {"oid": "ec1adc6d75779152b580de20988536e6372de7d5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ec1adc6d75779152b580de20988536e6372de7d5", "message": "Update addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-12-01T13:47:41Z", "type": "commit"}, {"oid": "59fd627aec5fca69beef43d3638e8fbeba165de8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/59fd627aec5fca69beef43d3638e8fbeba165de8", "message": "Update addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootRuleEventListenerFactory.java\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-12-01T13:47:47Z", "type": "commit"}, {"oid": "836a7537c26e15e957397f0341987db21c1f14bc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/836a7537c26e15e957397f0341987db21c1f14bc", "message": "Update addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-12-01T13:47:53Z", "type": "commit"}, {"oid": "280d02e7d4570d95c6f4983892431b53c258f56f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/280d02e7d4570d95c6f4983892431b53c258f56f", "message": "Update addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-12-01T13:47:59Z", "type": "commit"}, {"oid": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e17e8472e15b87fe95fad71487ed3ca93b9b1f95", "message": "provide metrics interceptor", "committedDate": "2020-12-01T17:18:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMDQ2OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534310469", "bodyText": "I think this is also possible to be put on the bean method, so you could combine it into one class I think.", "author": "MarianMacik", "createdAt": "2020-12-02T16:34:48Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-springboot/src/main/java/org/kie/kogito/monitoring/core/springboot/SpringbootProcessEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.springboot;\n+\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@ConditionalOnProperty(", "originalCommit": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534340324", "bodyText": "Just ony hypothetical question. If I add 2 addons with listeners (for example in future), will I have to solve this wiring myself? As then I need to somehow combine 2 listener configs into one, right?", "author": "MarianMacik", "createdAt": "2020-12-02T17:15:09Z", "path": "addons/monitoring-addon/monitoring-core/monitoring-core-quarkus/src/main/java/org/kie/kogito/monitoring/core/quarkus/QuarkusEventListenerFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.monitoring.core.quarkus;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.inject.Produces;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import org.drools.core.config.DefaultRuleEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.Constants;\n+import org.kie.kogito.monitoring.core.common.process.MonitoringProcessEventListenerConfig;\n+import org.kie.kogito.monitoring.core.common.rule.RuleMetricsListenerConfig;\n+import org.kie.kogito.monitoring.core.common.system.interceptor.MetricsInterceptor;\n+import org.kie.kogito.process.impl.DefaultProcessEventListenerConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Dependent\n+public class QuarkusEventListenerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusEventListenerFactory.class);\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_RULE_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultRuleEventListenerConfig produceRuleListener() {\n+        LOGGER.debug(\"Producing default listener for rule monitoring.\");\n+        return new RuleMetricsListenerConfig();\n+    }\n+\n+    @Produces\n+    @IfBuildProperty(name = Constants.MONITORING_PROCESS_USE_DEFAULT, stringValue = \"true\", enableIfMissing = true)\n+    public DefaultProcessEventListenerConfig produceProcessListener() {\n+        LOGGER.debug(\"Producing default listener for process monitoring.\");\n+        return new MonitoringProcessEventListenerConfig();", "originalCommit": "e17e8472e15b87fe95fad71487ed3ca93b9b1f95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk3MjE2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r534972162", "bodyText": "The user can add any number of listeners without any limitation. We also give the possibility to disable this listener using the config property Constants.MONITORING_PROCESS_USE_DEFAULT = false, is this what you mean?", "author": "r00ta", "createdAt": "2020-12-03T09:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA1MTc0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535051742", "bodyText": "So in case I need to combine listeners from more than one addon, I set that property to false and add listeners manually, did I get it right?", "author": "MarianMacik", "createdAt": "2020-12-03T10:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4MTE5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535181192", "bodyText": "The idea is to let user disable default behavior and provide a different impl. All the listeners in general are wired using CDI and user can already add as many listeners as he wants (without the need to disable the default behavior).\nHere the idea is just to opt-out default metric listeners", "author": "danielezonca", "createdAt": "2020-12-03T12:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MTcyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535241725", "bodyText": "I see, so I can add listeners via CDI even if I go for MonitoringProcessEventListenerConfig, right?", "author": "MarianMacik", "createdAt": "2020-12-03T13:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NjIxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/890#discussion_r535246217", "bodyText": "Yes, all listeners are collected and registered, this is just another one :)", "author": "danielezonca", "createdAt": "2020-12-03T13:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDMyNA=="}], "type": "inlineReview"}, {"oid": "76fb931ccc33e75f525cac7cc501a5763546cb18", "url": "https://github.com/kiegroup/kogito-runtimes/commit/76fb931ccc33e75f525cac7cc501a5763546cb18", "message": "remove unused dependencies, refactoring", "committedDate": "2020-12-03T09:15:19Z", "type": "commit"}, {"oid": "7f7a0c543a954f0ab4c5cceb398a4300dad76016", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7f7a0c543a954f0ab4c5cceb398a4300dad76016", "message": "fix pom", "committedDate": "2020-12-03T13:41:05Z", "type": "commit"}, {"oid": "0fc39027f25e578c59ebc22c0a1fd91ec3978396", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0fc39027f25e578c59ebc22c0a1fd91ec3978396", "message": "rename monitoring modules and directories", "committedDate": "2020-12-10T08:34:08Z", "type": "commit"}]}