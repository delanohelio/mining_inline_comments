{"pr_number": 480, "pr_title": "KOGITO-2024, KOGITO-2068, KOGITO-2110 - Add human task and rules (drl) support for Serverless Workflow", "pr_createdAt": "2020-04-28T04:08:53Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/480", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODgzMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416348830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else if {", "author": "cristianonicolai", "createdAt": "2020-04-28T06:01:03Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,16 +156,22 @@ public static String scriptFunctionScript(String script) {\n     }\n \n     public static String conditionScript(String path, DefaultChoice.Operator operator, String value) {\n+        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n \n         if (path.startsWith(\"$.\")) {\n             path = path.substring(2);\n+        } else {", "originalCommit": "3d56ee5980a3f480e3b1c6327767252588daa1e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDc1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416364756", "bodyText": "updated", "author": "tsurdilo", "createdAt": "2020-04-28T06:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDMwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416350305", "bodyText": "My personal preference here would be to simply create a new HashMap and assign a variable, as this style endups creating an inner class.", "author": "cristianonicolai", "createdAt": "2020-04-28T06:04:40Z", "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/WorkflowFactoryTest.java", "diffHunk": "@@ -232,4 +232,73 @@ public void testJoinNode() {\n         assertThat(join.getType()).isEqualTo(Join.TYPE_XOR);\n         assertThat(join.getMetaData().get(\"UniqueId\")).isEqualTo(\"1\");\n     }\n+\n+    @Test\n+    public void testProcessVar() {\n+        RuleFlowProcess process = new RuleFlowProcess();\n+        testFactory.processVar(\"testVar\", JsonNode.class, process);\n+\n+        assertThat(process.getVariableScope()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables().size()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testHumanTaskNode() {\n+        TestNodeContainer nodeContainer = new TestNodeContainer();\n+        RuleFlowProcess process = new RuleFlowProcess();\n+\n+        Function function = new Function().withName(\"testfunction1\").withMetadata(\n+                new HashMap() {{", "originalCommit": "3d56ee5980a3f480e3b1c6327767252588daa1e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDgyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416364821", "bodyText": "ok. updated", "author": "tsurdilo", "createdAt": "2020-04-28T06:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDMwNQ=="}], "type": "inlineReview"}, {"oid": "f8320cc4a3a5cb3232e2a5ace6df51250d0546a6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f8320cc4a3a5cb3232e2a5ace6df51250d0546a6", "message": "KOGITO-2024 - Add Decision (Human Task) support for Serverless Workflow", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "119b80e57db5f226ed2b7b4f2337ec02f2e72355", "url": "https://github.com/kiegroup/kogito-runtimes/commit/119b80e57db5f226ed2b7b4f2337ec02f2e72355", "message": "updates for cristianonicolai review", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "2567c49d0912477c4823b6fbffdf74a5640b99f0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2567c49d0912477c4823b6fbffdf74a5640b99f0", "message": "fixing missing function type in log", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "520fdf293567e36bee62955bb57f7836e3dfa328", "url": "https://github.com/kiegroup/kogito-runtimes/commit/520fdf293567e36bee62955bb57f7836e3dfa328", "message": "adding multi decision test", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2f62120b326f504f277f493b6a32e4ec7e7ea592", "message": "Adding KOGITO-2068 - rule support (drl) for sw", "committedDate": "2020-05-02T15:56:48Z", "type": "commit"}, {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2f62120b326f504f277f493b6a32e4ec7e7ea592", "message": "Adding KOGITO-2068 - rule support (drl) for sw", "committedDate": "2020-05-02T15:56:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODI4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420778286", "bodyText": "what about using\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\n.orElse(processVariableScope.findVariable(entry.getValue()));", "author": "tiagodolphine", "createdAt": "2020-05-06T13:12:30Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -160,7 +162,10 @@ private CompilationUnit compilationUnitInput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (input) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "originalCommit": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzY1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420963651", "bodyText": "updated", "author": "tsurdilo", "createdAt": "2020-05-06T17:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODgwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420778808", "bodyText": "what about using\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\n.orElse(processVariableScope.findVariable(entry.getValue()));", "author": "tiagodolphine", "createdAt": "2020-05-06T13:13:13Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -251,15 +256,18 @@ private CompilationUnit compilationUnitOutput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                // check if given mapping is an expression\n-                Matcher matcher = PatternConstants.PARAMETER_MATCHER.matcher(entry.getValue());\n-                if (matcher.find()) {                    \n-                    Map<String, String> dataOutputs = (Map<String, String>) humanTaskNode.getMetaData(\"DataOutputs\");\n-                    variable = new Variable();\n-                    variable.setName(entry.getKey());\n-                    variable.setType(new ObjectDataType(dataOutputs.get(entry.getKey())));\n-                } else {\n-                    throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (output) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "originalCommit": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzU4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420963583", "bodyText": "updated", "author": "tsurdilo", "createdAt": "2020-05-06T17:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODgwOA=="}], "type": "inlineReview"}, {"oid": "7986f02e98895e55fc13f8132f3cfd293daa2557", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7986f02e98895e55fc13f8132f3cfd293daa2557", "message": "Review updates", "committedDate": "2020-05-06T17:25:42Z", "type": "commit"}, {"oid": "0928b37b1fcf183cb71f2f586c40989f85e06a88", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0928b37b1fcf183cb71f2f586c40989f85e06a88", "message": "KOGITO-2110 - Fix issues with message start/end events for Event State", "committedDate": "2020-05-06T20:49:48Z", "type": "commit"}]}