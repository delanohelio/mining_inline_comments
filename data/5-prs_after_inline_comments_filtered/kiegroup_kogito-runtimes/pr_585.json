{"pr_number": 585, "pr_title": "KOGITO-2546  Refactor process/rules/decision-specific config out of ApplicationConfig", "pr_createdAt": "2020-06-25T10:49:09Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/585", "timeline": [{"oid": "9049ea2d030b04480c4a27eee5fc292ec87732cb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9049ea2d030b04480c4a27eee5fc292ec87732cb", "message": "fix templates", "committedDate": "2020-06-30T08:31:21Z", "type": "forcePushed"}, {"oid": "6f3cb5b2f0475c3cd99ac57d16da12f11279963e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6f3cb5b2f0475c3cd99ac57d16da12f11279963e", "message": "fix templates", "committedDate": "2020-06-30T08:33:09Z", "type": "forcePushed"}, {"oid": "0f692eb182d210ffd20d276ff541b272f636bd81", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0f692eb182d210ffd20d276ff541b272f636bd81", "message": "fix templates/init", "committedDate": "2020-06-30T11:42:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MTA2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r448171061", "bodyText": "Missing abstract keyword. Btw why is it abstract?", "author": "danielezonca", "createdAt": "2020-07-01T07:31:16Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/config/AbstractDecisionConfig.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.kie.kogito.dmn.config;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.kie.kogito.decision.DecisionEventListenerConfig;\n+\n+public class AbstractDecisionConfig implements org.kie.kogito.decision.DecisionConfig {", "originalCommit": "7e94f6389644f9f7cdc7334fff3d50cb0aa76146", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NTg5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452255895", "bodyText": "good question. It's more of an implementation detail than something I'd like people to instantiate explicitly, that's why it's not necessary for it to be a \"concrete\" class.", "author": "evacchi", "createdAt": "2020-07-09T14:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2ODQzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r449768432", "bodyText": "What about make it protected? I don't think we want to expose this constructor with the templates.", "author": "danielezonca", "createdAt": "2020-07-04T12:16:48Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/AbstractConfigGenerator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.codegen;\n+\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import org.kie.kogito.codegen.di.CDIDependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n+import org.kie.kogito.codegen.di.SpringDependencyInjectionAnnotator;\n+\n+import static com.github.javaparser.StaticJavaParser.parse;\n+\n+public abstract class AbstractConfigGenerator {\n+\n+    private final String packageName;\n+    private final String sourceFilePath;\n+\n+    private final String resourceCdi;\n+    private final String resourceSpring;\n+\n+    private DependencyInjectionAnnotator annotator;\n+\n+    public AbstractConfigGenerator(String packageName, String targetTypeName, String resourceCdi, String resourceSpring) {", "originalCommit": "5ddb49ae0fc327b3f344dbf60be5529454a21029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NTAxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452255012", "bodyText": "it won't be exposed unless it's overridden by the subclass AFAIK. Anyway sure it can be protected..", "author": "evacchi", "createdAt": "2020-07-09T14:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2ODQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1OTgzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452259836", "bodyText": "@evacchi\nHi. I write this comment here but it is valid for the other templates implementing a statically-defined interface.\nThose templates implement the interface (that it is statically written in java). So everything needed to generate this code is already known/retrievable from the interface itself. What happen with all those templates is that every time a new model has been added, those templates must be manually modified with copy-and-paste code -that is basically error-prone and time consuming IMO.\nI think that everything that is \"mechanically\" derived from java code should be automatically generated - leaving hard-coded template only for complex cases that are not easily created out from existing sources", "author": "gitgabrio", "createdAt": "2020-07-09T14:28:48Z", "path": "kogito-codegen/src/main/resources/class-templates/config/SpringApplicationConfigTemplate.java", "diffHunk": "@@ -0,0 +1,65 @@\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.drools.core.config.StaticRuleConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+import org.kie.kogito.process.impl.StaticProcessConfig;\n+\n+@org.springframework.stereotype.Component\n+public class ApplicationConfig implements org.kie.kogito.Config {", "originalCommit": "5ddb49ae0fc327b3f344dbf60be5529454a21029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MTczNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r454851737", "bodyText": "we clarified the overall strategy on a voice call :) for all the others:\n\nrefactor all common logic to an abstract class or a method library\nsimplify and strip down templates to a bare minimum necessary to enable (constructor) injection and delegate to the library methods/abstract classes\n\nthis should make repetitive code only a minor annoyance, while keeping the flow of the codegen procedures clearer to follow. While we both agree that mechanical derivation is the optimum, the idea is to find the sweet spot between full automation and simple readability.", "author": "evacchi", "createdAt": "2020-07-15T07:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1OTgzNg=="}], "type": "inlineReview"}, {"oid": "48ef2b5d437f2cf8aeb36f4c46b6d241b34981f2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/48ef2b5d437f2cf8aeb36f4c46b6d241b34981f2", "message": "use StaticConfig as superclass in templates", "committedDate": "2020-07-09T15:58:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNTcwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452615702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "cristianonicolai", "createdAt": "2020-07-10T04:28:04Z", "path": "drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNTg3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452615870", "bodyText": "just some general code format, to add imports and review the formmating", "author": "cristianonicolai", "createdAt": "2020-07-10T04:28:48Z", "path": "drools/drools-core/src/main/java/org/drools/core/config/AbstractRuleConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.config;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.kie.kogito.rules.RuleConfig;\n+import org.kie.kogito.rules.RuleEventListenerConfig;\n+\n+public abstract class AbstractRuleConfig implements RuleConfig {\n+\n+    private final RuleEventListenerConfig ruleEventListenerConfig;\n+\n+    public AbstractRuleConfig(RuleEventListenerConfig ruleEventListenerConfig) {\n+        this.ruleEventListenerConfig = ruleEventListenerConfig;\n+    }\n+\n+    public AbstractRuleConfig(\n+            Iterable<org.kie.kogito.rules.RuleEventListenerConfig> ruleEventListenerConfigs,", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNjAwNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452616004", "bodyText": "same for formatting.", "author": "cristianonicolai", "createdAt": "2020-07-10T04:29:27Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/AbstractProcessConfig.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.process.impl;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.kogito.jobs.JobsService;\n+import org.kie.kogito.process.ProcessConfig;\n+import org.kie.kogito.process.ProcessEventListenerConfig;\n+import org.kie.kogito.process.WorkItemHandlerConfig;\n+import org.kie.kogito.signal.SignalManagerHub;\n+import org.kie.kogito.uow.UnitOfWorkManager;\n+import org.kie.services.signal.DefaultSignalManagerHub;\n+\n+public abstract class AbstractProcessConfig implements ProcessConfig {\n+\n+    private final WorkItemHandlerConfig workItemHandlerConfig;\n+    private final SignalManagerHub signalManagerHub = new DefaultSignalManagerHub();\n+    private final ProcessEventListenerConfig processEventListenerConfig;\n+    private final UnitOfWorkManager unitOfWorkManager;\n+    private final JobsService jobsService;\n+\n+    protected AbstractProcessConfig(\n+            Iterable<org.kie.kogito.process.WorkItemHandlerConfig> workItemHandlerConfig,", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNjM5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452616390", "bodyText": "use this(new DefaultWorkItemHandlerConfig()... instead?", "author": "cristianonicolai", "createdAt": "2020-07-10T04:31:08Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/StaticProcessConfig.java", "diffHunk": "@@ -31,6 +33,14 @@\n     private final UnitOfWorkManager unitOfWorkManager;\n     private final JobsService jobsService;\n \n+    public StaticProcessConfig() {\n+        this.workItemHandlerConfig = new DefaultWorkItemHandlerConfig();", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNjgyOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452616828", "bodyText": "keep the imports?", "author": "cristianonicolai", "createdAt": "2020-07-10T04:33:27Z", "path": "kogito-codegen/src/main/resources/class-templates/config/ApplicationConfigTemplate.java", "diffHunk": "@@ -1,40 +1,33 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.function.Function;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import org.kie.kogito.decision.DecisionConfig;\n-import org.kie.kogito.process.ProcessConfig;\n-import org.kie.kogito.rules.RuleConfig;\n-\n+import org.drools.core.config.StaticRuleConfig;\n+import org.kie.kogito.dmn.config.StaticDecisionConfig;\n+import org.kie.kogito.process.impl.StaticProcessConfig;\n \n public class ApplicationConfig implements org.kie.kogito.Config {\n \n-    protected ProcessConfig processConfig;\n-    protected RuleConfig ruleConfig;\n-    protected DecisionConfig decisionConfig;\n+    private org.kie.kogito.process.ProcessConfig processConfig = new StaticProcessConfig();", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxOTQ0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452619443", "bodyText": "review imports and formatting", "author": "cristianonicolai", "createdAt": "2020-07-10T04:45:46Z", "path": "kogito-codegen/src/main/resources/class-templates/config/CdiDecisionConfigTemplate.java", "diffHunk": "@@ -0,0 +1,24 @@\n+import java.util.Collection;", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NTYyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r454845627", "bodyText": "I have removed unqualified imports except for CDI/Spring + org.kie.kogito.process.ProcessConfig, etc because the generated code has the same unqualified name (ProcessConfig, etc) and it may clash", "author": "evacchi", "createdAt": "2020-07-15T07:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxOTQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDc3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452620772", "bodyText": "@evacchi isnt register a little more explicit about the intent here? like registering a listener?", "author": "cristianonicolai", "createdAt": "2020-07-10T04:51:46Z", "path": "kogito-codegen/src/test/java/org/kie/kogito/codegen/tests/BusinessRuleTaskTest.java", "diffHunk": "@@ -70,7 +70,7 @@ public void testBasicBusinessRuleTaskWithAgendaListener() throws Exception {\n         Application app = generateCode(Collections.singletonList(\"ruletask/BusinessRuleTask.bpmn2\"), Collections.singletonList(\"ruletask/BusinessRuleTask.drl\"));\n         assertThat(app).isNotNull();\n         final AtomicInteger counter = new AtomicInteger();\n-        ((DefaultRuleEventListenerConfig)app.config().rule().ruleEventListeners()).register(new DefaultAgendaEventListener() {", "originalCommit": "abdfd6664bf0a12049a0b8de56145ab73dc417ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4NjIxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/585#discussion_r452686215", "bodyText": "it would but it's non-public and we're downcasting to the (possibly wrong) impl now. This alternative works in every situation (well, in this current impl) and it's ok for kogito-codegen test cases. In examples, even in tests, we should actually @annotate the event listener and let the runtime do the wiring, so this method won't be called at all.", "author": "evacchi", "createdAt": "2020-07-10T08:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDc3Mg=="}], "type": "inlineReview"}, {"oid": "c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c4a3575b8b8f1b5ccb76798c231bc2d12ae2b2df", "message": "KOGITO-2546 Refactor process-related config into generated ProcessConfig", "committedDate": "2020-07-15T07:09:47Z", "type": "commit"}, {"oid": "5bef6cd891e8a2417f18d96ee90170ba945d52b8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5bef6cd891e8a2417f18d96ee90170ba945d52b8", "message": "KOGITO-2546 Refactor process/rules/decision-specific config out of ApplicationConfig", "committedDate": "2020-07-15T07:11:23Z", "type": "commit"}, {"oid": "5bef6cd891e8a2417f18d96ee90170ba945d52b8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5bef6cd891e8a2417f18d96ee90170ba945d52b8", "message": "KOGITO-2546 Refactor process/rules/decision-specific config out of ApplicationConfig", "committedDate": "2020-07-15T07:11:23Z", "type": "forcePushed"}, {"oid": "64336a4764fdc7a663a92f4f38394a91b30ade91", "url": "https://github.com/kiegroup/kogito-runtimes/commit/64336a4764fdc7a663a92f4f38394a91b30ade91", "message": "formatting", "committedDate": "2020-07-15T07:27:26Z", "type": "commit"}]}