{"pr_number": 477, "pr_title": " [KOGITO-1551] - Process Instance persistence in Mongo DB", "pr_createdAt": "2020-04-24T16:09:08Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/477", "timeline": [{"oid": "b2dc9e79169d580c38c06cb9d9973570ccf62152", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b2dc9e79169d580c38c06cb9d9973570ccf62152", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-04-24T19:47:22Z", "type": "forcePushed"}, {"oid": "2813b44ac269548b5fbe4080d6e7f25e7c967c2a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2813b44ac269548b5fbe4080d6e7f25e7c967c2a", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-04-24T20:24:27Z", "type": "forcePushed"}, {"oid": "6b5c6fd495e938c4228049955ec43bded81c6c5b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6b5c6fd495e938c4228049955ec43bded81c6c5b", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-04-24T20:36:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxOTc3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r415019773", "bodyText": "Isn\u2019t this just oversimplification? I mean usind mongodb as key value store? I\u2019d suggest to make use of mongo as different storage so yiu could marshal process instance as document and thus take advantage of mongodb as document db", "author": "mswiderski", "createdAt": "2020-04-25T09:05:58Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistProcessInstances.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.bson.Document;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.kie.kogito.process.impl.marshalling.ProcessInstanceMarshaller;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.mongodb.client.FindIterable;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.MongoDatabase;\n+import com.mongodb.client.model.Filters;\n+import com.mongodb.client.model.Updates;\n+\n+@SuppressWarnings({ \"rawtypes\" })\n+public class PersistProcessInstances implements MutableProcessInstances {\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(PersistProcessInstances.class);\n+\tprivate org.kie.kogito.process.Process<?> process;\n+\tprivate MongoDatabase mongoDatabase;\n+\tprivate final MongoCollection<Document> collection;\n+\tprivate ProcessInstanceMarshaller marshaller;\n+\tprivate static final String KOGITO_STORE = \"Kogito_store\";\n+\n+\tpublic PersistProcessInstances(MongoClient mongoClient, org.kie.kogito.process.Process<?> process) {\n+\n+\t\tthis.process = process;\n+\t\tthis.mongoDatabase = mongoClient.getDatabase(KOGITO_STORE);\n+\t\tthis.collection = this.mongoDatabase.getCollection(process.id() + \"_store\");\n+\t\tthis.marshaller = new ProcessInstanceMarshaller();", "originalCommit": "6b5c6fd495e938c4228049955ec43bded81c6c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyMDA4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r415020087", "bodyText": "In addition, this will not work in native mode in my opinion because the variables will be serlialized using java serialization which is not supported (or was when last checked) on substratevm", "author": "mswiderski", "createdAt": "2020-04-25T09:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxOTc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyMDQxMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r415020413", "bodyText": "Are you planning to use protobuf for variables and thus use this methods?", "author": "mswiderski", "createdAt": "2020-04-25T09:09:30Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/persistence/KogitoProcessInstancesFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.kie.kogito.mongodb.PersistProcessInstances;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstancesFactory;\n+\n+import com.mongodb.client.MongoClient;\n+\n+/**\n+ * This class must always have exact FQCN as\n+ * <code>org.kie.kogito.persistence.KogitoProcessInstancesFactory</code>\n+ *\n+ */\n+public abstract class KogitoProcessInstancesFactory implements ProcessInstancesFactory {\n+\n+\tprotected MongoClient mongoClient;\n+\n+\tpublic KogitoProcessInstancesFactory(MongoClient mongoClient) {\n+\n+\t\tthis.mongoClient = mongoClient;\n+\t}\n+\n+\tpublic PersistProcessInstances createProcessInstances(Process<?> process) {\n+\t\treturn new PersistProcessInstances(this.mongoClient, process);\n+\t}\n+\n+\tpublic String proto() {\n+\t\treturn null;", "originalCommit": "6b5c6fd495e938c4228049955ec43bded81c6c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwNTUwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r415505507", "bodyText": "No, will remove.", "author": "swati-kale", "createdAt": "2020-04-27T04:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyMDQxMw=="}], "type": "inlineReview"}, {"oid": "4e07516dddecfc79d81a9fdfe40d94ec1b12143b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4e07516dddecfc79d81a9fdfe40d94ec1b12143b", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-06-09T00:12:31Z", "type": "forcePushed"}, {"oid": "ea44a9cdd1b67e861d133c9545372a925ed8a62f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ea44a9cdd1b67e861d133c9545372a925ed8a62f", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-06-09T01:46:56Z", "type": "forcePushed"}, {"oid": "c1dc737097e0341d8c5472eae009f0b7ab6acd52", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c1dc737097e0341d8c5472eae009f0b7ab6acd52", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-06-09T03:17:32Z", "type": "forcePushed"}, {"oid": "55059ecc25510599a92a8f7100b6490c2017dd42", "url": "https://github.com/kiegroup/kogito-runtimes/commit/55059ecc25510599a92a8f7100b6490c2017dd42", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-06-09T22:14:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzUxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441277518", "bodyText": "Perhaps use https://www.testcontainers.org/modules/databases/mongodb/", "author": "cristianonicolai", "createdAt": "2020-06-17T04:45:42Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/PersistableProcessInstanceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.Collections;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.drools.core.io.impl.ClassPathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.persistence.KogitoProcessInstancesFactory;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.bpmn2.BpmnProcess;\n+import org.kie.kogito.process.bpmn2.BpmnVariables;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Container;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_COMPLETED;\n+\n+class PersistableProcessInstanceTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstanceTest.class);\n+    private static final String MONGODB_VERSION = System.getProperty(\"mongodb.version\");\n+    private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n+    private static final int MONGO_DEFAULT_PORT = 27017;\n+\n+    @Container\n+    public GenericContainer mongoDb = new FixedHostPortGenericContainer(\"mongo:\" + MONGODB_VERSION)", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzgyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441277821", "bodyText": "If you add @testcontainers you then don't need to manually manage the container, see https://www.testcontainers.org/test_framework_integration/junit_5/", "author": "cristianonicolai", "createdAt": "2020-06-17T04:46:47Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/PersistableProcessInstanceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.Collections;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.drools.core.io.impl.ClassPathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.persistence.KogitoProcessInstancesFactory;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.bpmn2.BpmnProcess;\n+import org.kie.kogito.process.bpmn2.BpmnVariables;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Container;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_COMPLETED;\n+", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDI3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443090276", "bodyText": "done", "author": "swati-kale", "createdAt": "2020-06-20T01:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NzgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MDE0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441280146", "bodyText": "could you please expand the test so it includes variables of commonly used types including:\n\nString\nInteger\nLong\nComplex types ( Such as Address pojo )\nDouble\nBoolean\netc", "author": "cristianonicolai", "createdAt": "2020-06-17T04:56:16Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/PersistableProcessInstanceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.Collections;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.drools.core.io.impl.ClassPathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.persistence.KogitoProcessInstancesFactory;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.bpmn2.BpmnProcess;\n+import org.kie.kogito.process.bpmn2.BpmnVariables;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Container;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_COMPLETED;\n+\n+class PersistableProcessInstanceTest {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstanceTest.class);\n+    private static final String MONGODB_VERSION = System.getProperty(\"mongodb.version\");\n+    private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n+    private static final int MONGO_DEFAULT_PORT = 27017;\n+\n+    @Container\n+    public GenericContainer mongoDb = new FixedHostPortGenericContainer(\"mongo:\" + MONGODB_VERSION)\n+                                                                                                   .withFixedExposedPort(MONGO_DEFAULT_PORT, MONGO_DEFAULT_PORT)\n+                                                                                                   .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                                                                                                   .waitingFor(Wait.forLogMessage(\".*build index done.*\", 1));\n+\n+    @Test\n+    void test() {\n+        if (MONGODB_VERSION == null) {\n+            throw new RuntimeException(\"Please define a valid MongoDB image version in system property mongodb.version\");\n+        }\n+        LOGGER.info(\"Using MongoDB image version: {}\", MONGODB_VERSION);\n+        MongoClient mongoClient = MongoClients.create();\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\"))\n+                                         .get(0);\n+        process.setProcessInstancesFactory(new PersistProcessInstancesFactory(mongoClient));\n+        process.configure();\n+        ProcessInstance<BpmnVariables> processInstance = process\n+                                                                .createInstance(BpmnVariables.create(Collections.singletonMap(\"test\", \"test\")));\n+\n+        processInstance.start();\n+        assertThat(processInstance.status()).isEqualTo(STATE_ACTIVE);", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDEyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443090124", "bodyText": "done", "author": "swati-kale", "createdAt": "2020-06-20T01:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MDE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDQ5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443090494", "bodyText": "added tests for mentioned  datatypes", "author": "swati-kale", "createdAt": "2020-06-20T01:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4MDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2Nzc5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441367793", "bodyText": "This feels that it should be implemented as a new Strategy in the mongodb addon not in the API level. Similarly to how it is done for Infinispan with ProtoStreamObjectMarshallingStrategy", "author": "cristianonicolai", "createdAt": "2020-06-17T08:19:57Z", "path": "api/kogito-api/src/main/java/org/kie/api/marshalling/ObjectMarshallingStrategy.java", "diffHunk": "@@ -20,8 +20,13 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-public interface ObjectMarshallingStrategy {\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n+public interface ObjectMarshallingStrategy {\n+     \n+    ObjectMapper MAPPER = new ObjectMapper();", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDEwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443090105", "bodyText": "moved to mongodb-addon.", "author": "swati-kale", "createdAt": "2020-06-20T01:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2Nzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NjMyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441376322", "bodyText": "Please rename test to PersistableProcessInstanceIT and run it as part of the maven-failsafe-plugin as this is an integration test", "author": "cristianonicolai", "createdAt": "2020-06-17T08:34:01Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/PersistableProcessInstanceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.Collections;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.drools.core.io.impl.ClassPathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.persistence.KogitoProcessInstancesFactory;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.bpmn2.BpmnProcess;\n+import org.kie.kogito.process.bpmn2.BpmnVariables;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.FixedHostPortGenericContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Container;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_COMPLETED;\n+\n+class PersistableProcessInstanceTest {", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDA3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443090078", "bodyText": "done.", "author": "swati-kale", "createdAt": "2020-06-20T01:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NjMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3ODIxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441378217", "bodyText": "please make the database name configurable. It's fine to use kogito as default.", "author": "cristianonicolai", "createdAt": "2020-06-17T08:37:05Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/CommonUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.codecs.pojo.PojoCodecProvider;\n+import org.jbpm.marshalling.impl.ProcessInstanceData;\n+import org.kie.kogito.mongodb.codec.ProcessInstanceDocumentCodecProvider;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.model.Strategy;\n+\n+import static org.bson.codecs.configuration.CodecRegistries.fromProviders;\n+import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;\n+\n+public class CommonUtils {\n+\n+    private static final String KOGITO_STORE = \"Kogito_store\";", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDA1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443090059", "bodyText": "Database name can be configured at application.properties of client application else \"kogito\" as a default.", "author": "swati-kale", "createdAt": "2020-06-20T01:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3ODIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDkwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r441380908", "bodyText": "I would suggest creating mapper function classes for these two convert methods.\nEx:\n ProcessInstanceDocumentMapper implements Function<ProcessInstanceData, ProcessInstanceDocument> {\nThat should allow to be easily tested independently", "author": "cristianonicolai", "createdAt": "2020-06-17T08:41:17Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/CommonUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.codecs.pojo.PojoCodecProvider;\n+import org.jbpm.marshalling.impl.ProcessInstanceData;\n+import org.kie.kogito.mongodb.codec.ProcessInstanceDocumentCodecProvider;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.model.Strategy;\n+\n+import static org.bson.codecs.configuration.CodecRegistries.fromProviders;\n+import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;\n+\n+public class CommonUtils {\n+\n+    private static final String KOGITO_STORE = \"Kogito_store\";\n+\n+    private CommonUtils() {}\n+\n+    public static MongoCollection<ProcessInstanceDocument> getCollection(MongoClient mongoClient, String processId) {\n+        CodecRegistry registry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), fromProviders(PojoCodecProvider.builder().automatic(true).build(), new ProcessInstanceDocumentCodecProvider()));\n+        MongoDatabase mongoDatabase = mongoClient.getDatabase(KOGITO_STORE).withCodecRegistry(registry);\n+        return mongoDatabase.getCollection(processId, ProcessInstanceDocument.class).withCodecRegistry(registry);\n+    }\n+\n+    public static ProcessInstanceDocument convertToProcessInstanceDoument(ProcessInstanceData data) {", "originalCommit": "55059ecc25510599a92a8f7100b6490c2017dd42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4OTkwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443089909", "bodyText": "Thanks, added mapper function classes.", "author": "swati-kale", "createdAt": "2020-06-20T01:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDkwOA=="}], "type": "inlineReview"}, {"oid": "5b0747730a00a089acec5b5d64015972ff57a3d2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5b0747730a00a089acec5b5d64015972ff57a3d2", "message": "rebase", "committedDate": "2020-06-19T21:33:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTU4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443135581", "bodyText": "Why do you need these extra methods and not reuse marshall/unmarshall? Introducing this json would require (or kind of confuse) users to always implement json approach", "author": "mswiderski", "createdAt": "2020-06-20T14:36:05Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/DocumentMarshallingStrategy.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.api.marshalling.MarshallingException;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.marshalling.UnmarshallingException;\n+\n+public class DocumentMarshallingStrategy implements ObjectMarshallingStrategy {\n+\n+    public static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @Override\n+    public boolean accept(Object object) {\n+        return object != null;\n+    }\n+\n+    @Override\n+    public Context createContext() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void write(ObjectOutputStream os, Object object) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Object read(ObjectInputStream os) throws IOException, ClassNotFoundException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public byte[] marshal(Context context, ObjectOutputStream os, Object object) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Object unmarshal(String dataType,\n+                            Context context,\n+                            ObjectInputStream is,\n+                            byte[] object,\n+                            ClassLoader classloader) throws IOException, ClassNotFoundException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String marshalToJson(Object object) {", "originalCommit": "65206a8d759a249033fb9c3843b40a8626cd2e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MzI5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r444183296", "bodyText": "will take care.", "author": "swati-kale", "createdAt": "2020-06-23T12:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTcyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443135729", "bodyText": "I find it quite weird to mix two ways of serializing process instance\n\nprotobuf for process instance\njson/string for variables\n\nWhy nit to use document for everything?", "author": "mswiderski", "createdAt": "2020-06-20T14:38:05Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistableProcessInstances.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+*\n+*      http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.model.Filters;\n+import org.jbpm.marshalling.impl.ProcessInstanceData;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.utils.CommonUtils;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceMapper;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.kie.kogito.process.impl.marshalling.ProcessInstanceMarshaller;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PersistableProcessInstances<T extends Model> implements MutableProcessInstances<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstances.class);\n+    private org.kie.kogito.process.Process<?> process;\n+    private final MongoCollection<ProcessInstanceDocument> collection;\n+    private ProcessInstanceMarshaller marshaller;\n+    private static final String PROCESS_INSTANCE_ID = \"processInstance.id\";\n+\n+    public PersistableProcessInstances(MongoClient mongoClient, org.kie.kogito.process.Process<?> process, String dbName) {\n+        this.process = process;\n+        collection = CommonUtils.getCollection(mongoClient, process.id(), dbName);\n+        marshaller = new ProcessInstanceMarshaller(new DocumentMarshallingStrategy());", "originalCommit": "65206a8d759a249033fb9c3843b40a8626cd2e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NjY4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r445976685", "bodyText": "variables are saved as document in mongodb instead json string.", "author": "swati-kale", "createdAt": "2020-06-26T05:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTkyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443135926", "bodyText": "Small typo i think, getlegacy... should be getLegacy", "author": "mswiderski", "createdAt": "2020-06-20T14:40:40Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/ProcessInstanceMapper.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.bson.Document;\n+import org.jbpm.marshalling.impl.ProcessInstanceData;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.model.Strategy;\n+\n+public class ProcessInstanceMapper {\n+\n+    private ProcessInstanceMapper() {}\n+\n+    public static class ProcessInstanceDocumentMapper implements Function<ProcessInstanceData, ProcessInstanceDocument> {\n+\n+        @Override\n+        public ProcessInstanceDocument apply(ProcessInstanceData data) {\n+            return new ProcessInstanceDocument(Document.parse(data.getlegacyProcessInstance()), data.getStrategies().entrySet().stream().map(e -> new Strategy(e.getValue(), e.getKey())).collect(Collectors.toList()));", "originalCommit": "65206a8d759a249033fb9c3843b40a8626cd2e33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjAyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443136023", "bodyText": "This should fail instead as storing process instance without id should never happen", "author": "mswiderski", "createdAt": "2020-06-20T14:41:52Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/codec/ProcessInstanceDocumentCodec.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.codec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import com.mongodb.MongoClientSettings;\n+import org.bson.BsonReader;\n+import org.bson.BsonString;\n+import org.bson.BsonValue;\n+import org.bson.BsonWriter;\n+import org.bson.Document;\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.CollectibleCodec;\n+import org.bson.codecs.DecoderContext;\n+import org.bson.codecs.EncoderContext;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.model.Strategy;\n+\n+public class ProcessInstanceDocumentCodec implements CollectibleCodec<ProcessInstanceDocument> {\n+\n+    private final Codec<Document> documentCodec;\n+\n+    public ProcessInstanceDocumentCodec() {\n+        documentCodec = MongoClientSettings.getDefaultCodecRegistry().get(Document.class);\n+    }\n+\n+    @Override\n+    public void encode(BsonWriter writer, ProcessInstanceDocument piDoc, EncoderContext encoderContext) {\n+        Document doc = new Document();\n+        doc.put(\"processInstance\", piDoc.getProcessInstance());\n+        List<Document> strategies = new ArrayList<>();\n+        for (Strategy s : piDoc.getStrategies()) {\n+            Document d = new Document();\n+            d.put(\"strategyId\", s.getStrategyId());\n+            d.put(\"strategyName\", s.getStrategyName());\n+            strategies.add(d);\n+        }\n+\n+        doc.put(\"strategies\", strategies);\n+        documentCodec.encode(writer, doc, encoderContext);\n+    }\n+\n+    @Override\n+    public Class<ProcessInstanceDocument> getEncoderClass() {\n+        return ProcessInstanceDocument.class;\n+    }\n+\n+    @Override\n+    public ProcessInstanceDocument generateIdIfAbsentFromDocument(ProcessInstanceDocument document) {\n+        if (!documentHasId(document)) {\n+            document.setId(UUID.randomUUID().toString());", "originalCommit": "65206a8d759a249033fb9c3843b40a8626cd2e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjIyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443622226", "bodyText": "This is a mongo document ID and not a process instance ID.", "author": "swati-kale", "createdAt": "2020-06-22T14:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMzI1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443623259", "bodyText": "why do we need both?", "author": "mswiderski", "createdAt": "2020-06-22T14:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NjQ5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r445976491", "bodyText": "just saving process instance id as document id.", "author": "swati-kale", "createdAt": "2020-06-26T05:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjI5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r443136298", "bodyText": "If this would just use normal methods this if is not needed", "author": "mswiderski", "createdAt": "2020-06-20T14:45:40Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java", "diffHunk": "@@ -186,11 +187,17 @@ public static Variable marshallVariable(MarshallerWriteContext context,\n         if(value != null){\n             ObjectMarshallingStrategy strategy = context.objectMarshallingStrategyStore.getStrategyObject( value );\n             Integer index = context.getStrategyIndex( strategy );\n-            builder.setStrategyIndex( index )\n-                   .setDataType(strategy.getType(value.getClass()))\n-                   .setValue( ByteString.copyFrom( strategy.marshal( context.strategyContext.get( strategy ),\n-                                                                     context,\n-                                                                     value ) ) );\n+            if (strategy.getName().contains(DOCUMENT_MARSHALLING_STRATEGY)) {", "originalCommit": "65206a8d759a249033fb9c3843b40a8626cd2e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3NjI4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r445976284", "bodyText": "removed these changes", "author": "swati-kale", "createdAt": "2020-06-26T05:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjI5OA=="}], "type": "inlineReview"}, {"oid": "f37e5c016b4315b2311819204d7a970463cddb25", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f37e5c016b4315b2311819204d7a970463cddb25", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-06-26T05:27:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NjIzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447586237", "bodyText": "@swati-kale can you try to merge/reuse the constructors?\n  this(processes, etc...", "author": "cristianonicolai", "createdAt": "2020-06-30T10:39:26Z", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/MarshallerReaderContext.java", "diffHunk": "@@ -162,6 +162,46 @@ public MarshallerReaderContext(InputStream stream,\n             this.kBase.getProcesses().forEach( p -> this.processes.put(p.getId(), p));\n         }\n     }\n+    \n+    public MarshallerReaderContext(Map<String, Process> processes,", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNTQ5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r460315490", "bodyText": "@cristianonicolai , I discussed this with you already, so please suggest.", "author": "swati-kale", "createdAt": "2020-07-24T22:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NjIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5MTc1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r464191754", "bodyText": "how about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public MarshallerReaderContext(Map<String, Process> processes,\n          \n          \n            \n                    public MarshallerReaderContext(Map<String, Process> processes, Environment env) throws IOException {\n          \n          \n            \n                    this(null, processes, null, null, null, env);\n          \n          \n            \n                }", "author": "cristianonicolai", "createdAt": "2020-08-03T04:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NjIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MjM3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r465052371", "bodyText": "how about:\n\nPassing null for Stream gives NPE, same in MarshallerWriterContext.", "author": "swati-kale", "createdAt": "2020-08-04T13:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NjIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NzE4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447587186", "bodyText": "same here regarding constructor.", "author": "cristianonicolai", "createdAt": "2020-06-30T10:41:13Z", "path": "drools/drools-core/src/main/java/org/drools/core/marshalling/impl/MarshallerWriteContext.java", "diffHunk": "@@ -121,6 +121,36 @@ public MarshallerWriteContext(OutputStream stream,\n         this.env = env;\n \n     }\n+    \n+    public MarshallerWriteContext(InternalKnowledgeBase kBase,", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzODY1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r465238653", "bodyText": "as above", "author": "swati-kale", "createdAt": "2020-08-04T18:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NzE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NzY3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447587678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \t}else if (persistenceType.equals(MONGODB_PERSISTENCE_TYPE)) {\n          \n          \n            \n                    \t} else if (persistenceType.equals(MONGODB_PERSISTENCE_TYPE)) {", "author": "cristianonicolai", "createdAt": "2020-06-30T10:42:12Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/PersistenceGenerator.java", "diffHunk": "@@ -121,7 +126,9 @@ public ApplicationSection section() {\n         \t\tinifinispanBasedPersistence(generatedFiles);\n         \t} else if (persistenceType.equals(FILESYSTEM_PERSISTENCE_TYPE)) {\n         \t\tfileSystemBasedPersistence(generatedFiles);\n-        \t}\n+        \t}else if (persistenceType.equals(MONGODB_PERSISTENCE_TYPE)) {", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447589499", "bodyText": "@swati-kale I believe the dbname should be something that can be tweaked at runtime, as a configuration. For instance, when running a quarkus app, take it from https://quarkus.io/guides/mongodb#quarkus-mongodb_quarkus.mongodb.database", "author": "cristianonicolai", "createdAt": "2020-06-30T10:45:32Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/PersistenceGenerator.java", "diffHunk": "@@ -324,13 +312,61 @@ protected void fileSystemBasedPersistence(List<GeneratedFile> generatedFiles) {\n             persistenceProviderClazz.addMember(pathMethod);\n         }\n         \n-        String packageName = compilationUnit.getPackageDeclaration().map(pd -> pd.getName().toString()).orElse(\"\");\n-        String clazzName = packageName + \".\" + persistenceProviderClazz.findFirst(ClassOrInterfaceDeclaration.class).map(c -> c.getName().toString()).get();\n-     \n-        generatedFiles.add(new GeneratedFile(GeneratedFile.Type.CLASS,\n-                                             clazzName.replace('.', '/') + \".java\",\n-                                             compilationUnit.toString().getBytes(StandardCharsets.UTF_8))); \n-        \n+        generatePersistenceProviderClazz(generatedFiles, persistenceProviderClazz, compilationUnit);\n+    }\n+    \n+    private void mongodbBasedPersistence(List<GeneratedFile> generatedFiles) {\n+        String dbName = context.getApplicationProperty(\"kogito.persistence.dbName\").orElse(\"kogito\");", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NjA5OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r449676099", "bodyText": "It coul be prblematic if mongo is used for other logic as well. So I\u2019d stick to kogito scoped property, just to add mongodb in the property name to be consistent with other properties", "author": "mswiderski", "createdAt": "2020-07-03T18:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5ODIwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r449698202", "bodyText": "I will change it to \"kogito.persistence.mongodb.dbName\" and handle runtime configuration.", "author": "swati-kale", "createdAt": "2020-07-03T20:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNzQxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r450637411", "bodyText": "@mswiderski @swati-kale to fully avoid clashing with another config, we would need to use named clients like in here. Just the database name would still share most of the configs which might not be desired. I think we should have a default which simply takes the default mongo client, or allowing users to specify the named mongo client they want to use ( kogito can be the default ).", "author": "cristianonicolai", "createdAt": "2020-07-07T06:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODYzMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r450638631", "bodyText": "this is a good point, how about spring? will it have similar approach so there won't be a need for any new kogito specific propeerty?", "author": "mswiderski", "createdAt": "2020-07-07T06:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MTAzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r450671032", "bodyText": "yeah, I would expect that we can take similar approach there. Maybe need to check if this still works. But the idea seems similar, different named MongoTemplates.", "author": "cristianonicolai", "createdAt": "2020-07-07T07:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNDMzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r460314338", "bodyText": "@cristianonicolai, As suggested by you, I removed the extra kogito property and injecting the quarkus/springboot property for dbname at code generation,", "author": "swati-kale", "createdAt": "2020-07-24T22:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4OTQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxODA4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447718081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Optional<? extends ProcessInstance<T>> opt = Optional.of(marshaller.unmarshallProcessInstance(cursor.next(), process));\n          \n          \n            \n                            list.add(opt.get());\n          \n          \n            \n                            list.add(marshaller.unmarshallProcessInstance(cursor.next(), process));", "author": "cristianonicolai", "createdAt": "2020-06-30T14:16:27Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistableProcessInstances.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+*\n+*      http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.model.Filters;\n+import org.bson.BsonString;\n+import org.bson.Document;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingStrategy;\n+import org.kie.kogito.mongodb.marshalling.DocumentProcessInstanceMarshaller;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.DOCUMENT_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getCollection;\n+\n+public class PersistableProcessInstances<T extends Model> implements MutableProcessInstances<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstances.class);\n+    private org.kie.kogito.process.Process<?> process;\n+    private DocumentProcessInstanceMarshaller marshaller;\n+    private final MongoCollection<Document> collection;\n+\n+    public PersistableProcessInstances(MongoClient mongoClient, org.kie.kogito.process.Process<?> process, String dbName) {\n+        this.process = process;\n+        collection = getCollection(mongoClient, process.id(), dbName);\n+        marshaller = new DocumentProcessInstanceMarshaller(new DocumentMarshallingStrategy());\n+    }\n+\n+    @Override\n+    public Optional<? extends ProcessInstance<T>> findById(String id) {\n+        Document piDoc = collection.find(Filters.eq(DOCUMENT_ID, resolveId(id))).first();\n+        if (piDoc == null) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(marshaller.unmarshallProcessInstance(piDoc, process));\n+    }\n+\n+    @Override\n+    public Collection<? extends ProcessInstance<T>> values() {\n+        List<ProcessInstance<T>> list = new ArrayList<>();\n+        MongoCursor<Document> cursor = collection.find().iterator();\n+        try {\n+            while (cursor.hasNext()) {\n+                Optional<? extends ProcessInstance<T>> opt = Optional.of(marshaller.unmarshallProcessInstance(cursor.next(), process));\n+                list.add(opt.get());", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMjU5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447722595", "bodyText": "As suggested, if you use the testcontainer provided mongodb, this should not be needed.", "author": "cristianonicolai", "createdAt": "2020-06-30T14:22:16Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/MongoDbContainer.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import org.testcontainers.containers.GenericContainer;\n+\n+public class MongoDbContainer extends GenericContainer<MongoDbContainer> {", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTgyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447725821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String STRATEGIES = \"stategies\";\n          \n          \n            \n                public static final String STRATEGIES = \"strategies\";", "author": "cristianonicolai", "createdAt": "2020-06-30T14:26:20Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/DocumentUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingException;\n+import org.kie.kogito.mongodb.marshalling.DocumentUnmarshallingException;\n+\n+public class DocumentUtils {\n+\n+    private DocumentUtils() {}\n+\n+    public static MongoCollection<Document> getCollection(MongoClient mongoClient, String processId, String dbName) {\n+        MongoDatabase mongoDatabase = mongoClient.getDatabase(dbName);\n+        return mongoDatabase.getCollection(processId);\n+    }\n+\n+    public static final String VARIABLE = \"variable\";\n+    public static final String VALUE = \"value\";\n+    public static final String DOCUMENT_ID = \"_id\";\n+    public static final String PROCESS_INSTANCE_ID = \"id\";\n+    public static final String STRATEGIES = \"stategies\";", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzAyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447747025", "bodyText": "you should be able to provide this via application.properties in the test/resources.", "author": "cristianonicolai", "createdAt": "2020-06-30T14:53:03Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/PersistableProcessInstanceIT.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.drools.core.io.impl.ClassPathResource;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.persistence.KogitoProcessInstancesFactory;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.bpmn2.BpmnProcess;\n+import org.kie.kogito.process.bpmn2.BpmnVariables;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_COMPLETED;\n+\n+@Testcontainers\n+class PersistableProcessInstanceIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstanceIT.class);\n+    private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n+\n+    private static MongoDbContainer mongoDbContainer;\n+\n+    @BeforeAll\n+    public static void startContainerAndPublicPortIsAvailable() {\n+        mongoDbContainer = new MongoDbContainer();\n+        mongoDbContainer.withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .waitingFor(Wait.forLogMessage(\".*build index done.*\", 1));\n+        mongoDbContainer.start();\n+    }\n+\n+    @Test\n+    void test() {\n+        MongoClient mongoClient = MongoClients.create();\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\"))\n+                                         .get(0);\n+        process.setProcessInstancesFactory(new PersistProcessInstancesFactory(mongoClient));\n+        process.configure();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(\"test\", \"test\");\n+        parameters.put(\"integerVar\", 10);\n+        parameters.put(\"booleanVar\", true);\n+        parameters.put(\"doubleVar\", 10.11);\n+        parameters.put(\"floatVar\", 3.5f);\n+        parameters.put(\"address\", new Address(\"main street\", \"Boston\", \"10005\", \"US\"));\n+        ProcessInstance<BpmnVariables> processInstance = process.createInstance(BpmnVariables.create(parameters));\n+\n+        processInstance.start();\n+        assertThat(processInstance.status()).isEqualTo(STATE_ACTIVE);\n+        assertThat(processInstance.description()).isEqualTo(\"User Task\");\n+\n+        Collection<? extends ProcessInstance<BpmnVariables>> values = process.instances().values();\n+        assertThat(values).hasSize(1);\n+\n+        String testVar = (String) processInstance.variables().get(\"test\");\n+        assertThat(testVar).isEqualTo(\"test\");\n+        Object addr = processInstance.variables().get(\"address\");\n+        assertThat(addr.getClass().getName()).isEqualTo(\"org.kie.kogito.mongodb.Address\");\n+        Object flt = processInstance.variables().get(\"floatVar\");\n+        assertThat(flt.getClass().getName()).isEqualTo(\"java.lang.Float\");\n+        assertThat(processInstance.description()).isEqualTo(\"User Task\");\n+\n+        WorkItem workItem = processInstance.workItems(securityPolicy).get(0);\n+        assertThat(workItem).isNotNull();\n+        assertThat(workItem.getParameters().get(\"ActorId\")).isEqualTo(\"john\");\n+        processInstance.completeWorkItem(workItem.getId(), null, securityPolicy);\n+        assertThat(processInstance.status()).isEqualTo(STATE_COMPLETED);\n+\n+    }\n+\n+    private class PersistProcessInstancesFactory extends KogitoProcessInstancesFactory {\n+\n+        public PersistProcessInstancesFactory(MongoClient mongoClient) {\n+            super(mongoClient);\n+\n+        }\n+\n+        @Override\n+        public String dbName() {\n+            return \"test_db\";", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MzU1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r447753553", "bodyText": "@swati-kale I wonder if would simplify things if you take this approach: https://quarkus.io/guides/mongodb#simplifying-mongodb-client-usage-using-bson-codec\nThat way the marshall/unmarshall wouldnt need to be done manually. wdyt?", "author": "cristianonicolai", "createdAt": "2020-06-30T15:01:07Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/ProcessInstanceDocumentMapper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Function;\n+import org.bson.Document;\n+import org.drools.core.marshalling.impl.ProcessMarshallerWriteContext;\n+import org.drools.core.util.Drools;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingException;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.NAME;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.PROCESS_INSTANCE_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.STRATEGIES;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.VALUE;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.VARIABLE;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.VERSION;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.VERSION_MAJOR;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.VERSION_MINOR;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.VERSION_REVISION;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getObjectMapper;\n+\n+public class ProcessInstanceDocumentMapper implements Function<ProcessMarshallerWriteContext, Document> {", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxMzgzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r460313837", "bodyText": "I am using the existing protobuf marshalling for legacy process instance and converting it to json to Mongo document. I do not want to rewrite marshalling logic as there might be an overhead of maintenance. I wrote a codec for wrapper object which wraps legacy process instance, strategy and versions. The manual conversion over here are mainly to convert the variables from bytes to document and vice versa while saving/fetch it to/from DB.", "author": "swati-kale", "createdAt": "2020-07-24T22:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MzU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r449675020", "bodyText": "Will this work with list of objects?", "author": "mswiderski", "createdAt": "2020-07-03T18:12:51Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/DocumentUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingException;\n+import org.kie.kogito.mongodb.marshalling.DocumentUnmarshallingException;\n+\n+public class DocumentUtils {\n+\n+    private DocumentUtils() {}\n+\n+    public static MongoCollection<Document> getCollection(MongoClient mongoClient, String processId, String dbName) {\n+        MongoDatabase mongoDatabase = mongoClient.getDatabase(dbName);\n+        return mongoDatabase.getCollection(processId);\n+    }\n+\n+    public static final String VARIABLE = \"variable\";\n+    public static final String VALUE = \"value\";\n+    public static final String DOCUMENT_ID = \"_id\";\n+    public static final String PROCESS_INSTANCE_ID = \"id\";\n+    public static final String STRATEGIES = \"stategies\";\n+    public static final String NAME = \"name\";\n+    public static final String VERSION = \"version\";\n+    public static final String VERSION_MAJOR = \"versionMajor\";\n+    public static final String VERSION_MINOR = \"versionMinor\";\n+    public static final String VERSION_REVISION = \"versionRevision\";\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    public static final String DOCUMENT_MARSHALLING_ERROR_MSG = \"Error while marshalling process instance with id as document : \";\n+    public static final String DOCUMENT_UNMARSHALLING_ERROR_MSG = \"Error while unmarshalling document for process instance with id : \";\n+\n+    public static ObjectMapper getObjectMapper() {\n+        return MAPPER;\n+    }\n+\n+    public static byte[] toByteArray(Object object) {\n+        String json = null;\n+        try {\n+            json = MAPPER.writeValueAsString(object);\n+        } catch (JsonProcessingException e) {\n+            throw new DocumentMarshallingException(e);\n+        }\n+        return json.getBytes();\n+    }\n+\n+    public static Object fromByteArray(String dataType, byte[] object) {\n+        try {\n+            Class<?> loadClass = Thread.currentThread().getContextClassLoader().loadClass(dataType);\n+            return MAPPER.readValue(new String(object), loadClass);", "originalCommit": "f37e5c016b4315b2311819204d7a970463cddb25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMzkzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r449713938", "bodyText": "Will this work with list of objects?\n\nyes I did test and it works.", "author": "swati-kale", "createdAt": "2020-07-03T22:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc0MTY4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r449741689", "bodyText": "Is there a test case?\nI mean to verify that having following variable will marshall and unmarshall properly\nList<Person>\nAs with this code I think you will get list of LinkedHashMaps and not list of Persons", "author": "mswiderski", "createdAt": "2020-07-04T05:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MjE0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r450362143", "bodyText": "Yes, you are right, its a problem and looking into it.", "author": "swati-kale", "createdAt": "2020-07-06T17:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDMwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r450614305", "bodyText": "since the JSON is actually internal maybe you could use default typing of the ObjectMapper?\nhttps://www.baeldung.com/jackson-inheritance", "author": "mswiderski", "createdAt": "2020-07-07T05:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5OTA1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r456599052", "bodyText": "Default typing changes the structure of json which cannot be readily (like normal json) converted into Document. or from document back to that json structure which default typing uses for object creation. So its overall tricky. Either you have to do that conversion here or variable marshal/unmarshal to/from  Bsonvalues using bsonwriter/reader.\n1)Can't we use the protostream marshalling for variables and  persist the bytearray((as value node) + document(as data node) for that variable so that it can be queried and readable? Also there are no direct applications which refers the runtime persistence storage for direct queries.\nthe result will look like this,WDYT?", "author": "swati-kale", "createdAt": "2020-07-17T18:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMjg1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r456802858", "bodyText": "Can you elaborate more on what is the problem with default typing? I think you can configure it to add type info as additional field of the object @Class field name if I am not mistaken.", "author": "mswiderski", "createdAt": "2020-07-18T15:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgzMzk2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r456833968", "bodyText": "Actually I was using as below\nMAPPER.activateDefaultTyping(MAPPER.getPolymorphicTypeValidator(), DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.WRAPPER_OBJECT); I\nnstead MAPPER.MAPPER.enableDefaultTyping(); I did not use it earlier because it was deprecated,My bad, it works with MAPPER.enableDefaultTyping();.", "author": "swati-kale", "createdAt": "2020-07-18T22:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgzNTcwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r456835701", "bodyText": "Thanks @mswiderski", "author": "swati-kale", "createdAt": "2020-07-18T22:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3NTAyMA=="}], "type": "inlineReview"}, {"oid": "361d88ec0a295e8e4e4d9ea4bd71eee7af124579", "url": "https://github.com/kiegroup/kogito-runtimes/commit/361d88ec0a295e8e4e4d9ea4bd71eee7af124579", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-07-24T01:59:25Z", "type": "forcePushed"}, {"oid": "ca979371029c055e778e05129a331e53ca479313", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ca979371029c055e778e05129a331e53ca479313", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-07-24T07:09:00Z", "type": "forcePushed"}, {"oid": "df60b507ffc8e2e606f2a2da8c16e5f006338293", "url": "https://github.com/kiegroup/kogito-runtimes/commit/df60b507ffc8e2e606f2a2da8c16e5f006338293", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-07-24T22:20:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MDM0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r463480341", "bodyText": "is the process instance created twice in here?", "author": "cristianonicolai", "createdAt": "2020-07-31T08:36:52Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/marshalling/DocumentProcessInstanceMarshaller.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.marshalling;\n+\n+import java.util.Collections;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import org.drools.core.impl.EnvironmentImpl;\n+import org.drools.core.marshalling.impl.ClassObjectMarshallingStrategyAcceptor;\n+import org.drools.core.marshalling.impl.MarshallerReaderContext;\n+import org.drools.core.marshalling.impl.ProcessMarshallerWriteContext;\n+import org.drools.core.marshalling.impl.SerializablePlaceholderResolverStrategy;\n+import org.jbpm.marshalling.impl.AbstractProtobufProcessInstanceMarshaller;\n+import org.jbpm.marshalling.impl.JBPMMessages;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.instance.WorkflowProcessInstance;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.runtime.Environment;\n+import org.kie.api.runtime.EnvironmentName;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceDocumentMapper;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceMessageMapper;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.AbstractProcess;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_MARSHALLING_ERROR_MSG;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_UNMARSHALLING_ERROR_MSG;\n+\n+public class DocumentProcessInstanceMarshaller extends AbstractProtobufProcessInstanceMarshaller {\n+\n+    private Environment env = new EnvironmentImpl();\n+\n+    public DocumentProcessInstanceMarshaller(ObjectMarshallingStrategy... strategies) {\n+        ObjectMarshallingStrategy[] strats = null;\n+        if (strategies == null) {\n+            strats = new ObjectMarshallingStrategy[]{new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)};\n+        } else {\n+            strats = new ObjectMarshallingStrategy[strategies.length + 1];\n+            int i = 0;\n+            for (ObjectMarshallingStrategy strategy : strategies) {\n+                strats[i] = strategy;\n+                i++;\n+            }\n+            strats[i] = new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT);\n+        }\n+        env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, strats);\n+    }\n+\n+    @Override\n+    protected WorkflowProcessInstanceImpl createProcessInstance() {\n+        return new RuleFlowProcessInstance();\n+    }\n+\n+    public ProcessInstanceDocument marshalProcessInstance(ProcessInstance<?> processInstance) {\n+        try {\n+            WorkflowProcessInstance pi = ((AbstractProcessInstance<?>) processInstance).internalGetProcessInstance();\n+            ProcessMarshallerWriteContext context = new ProcessMarshallerWriteContext(null, null, null, null, env);\n+            context.parameterObject = JsonFormat.printer().print(super.writeProcessInstance(context, pi));\n+            ProcessInstanceDocument document = new ProcessInstanceDocumentMapper().apply(context);\n+            ((WorkflowProcessInstanceImpl) pi).disconnect();\n+            return document;\n+        } catch (Exception e) {\n+            throw new DocumentMarshallingException(processInstance.id(), e, DOCUMENT_MARSHALLING_ERROR_MSG);\n+        }\n+    }\n+\n+    public WorkflowProcessInstance unmarshallWorkflowProcessInstance(ProcessInstanceDocument doc, Process<?> process) {\n+        try {\n+            MarshallerReaderContext context = new MarshallerReaderContext(Collections.singletonMap(process.id(), ((AbstractProcess<?>) process).process()), null, null, null, env, null);\n+            context.parameterObject = doc;\n+            JBPMMessages.ProcessInstance instance = new ProcessInstanceMessageMapper().apply(context);\n+            context.parameterObject = instance;\n+            return (WorkflowProcessInstance) super.readProcessInstance(context);\n+        } catch (Exception e) {\n+            throw new DocumentUnmarshallingException(process.id(), e, DOCUMENT_UNMARSHALLING_ERROR_MSG);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> ProcessInstance<T> unmarshallProcessInstance(ProcessInstanceDocument doc, Process<?> process) {\n+        AbstractProcess<?> ap = (AbstractProcess<?>) process;\n+        ap.createInstance(unmarshallWorkflowProcessInstance(doc, process));", "originalCommit": "df60b507ffc8e2e606f2a2da8c16e5f006338293", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MTUzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r463481535", "bodyText": "maybe make ProcessInstanceMessageMapper a BiFunction instead so you can pass the dec as second argument instead of reusing the context for that.", "author": "cristianonicolai", "createdAt": "2020-07-31T08:39:26Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/marshalling/DocumentProcessInstanceMarshaller.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.marshalling;\n+\n+import java.util.Collections;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import org.drools.core.impl.EnvironmentImpl;\n+import org.drools.core.marshalling.impl.ClassObjectMarshallingStrategyAcceptor;\n+import org.drools.core.marshalling.impl.MarshallerReaderContext;\n+import org.drools.core.marshalling.impl.ProcessMarshallerWriteContext;\n+import org.drools.core.marshalling.impl.SerializablePlaceholderResolverStrategy;\n+import org.jbpm.marshalling.impl.AbstractProtobufProcessInstanceMarshaller;\n+import org.jbpm.marshalling.impl.JBPMMessages;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.instance.WorkflowProcessInstance;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.runtime.Environment;\n+import org.kie.api.runtime.EnvironmentName;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceDocumentMapper;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceMessageMapper;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.AbstractProcess;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_MARSHALLING_ERROR_MSG;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_UNMARSHALLING_ERROR_MSG;\n+\n+public class DocumentProcessInstanceMarshaller extends AbstractProtobufProcessInstanceMarshaller {\n+\n+    private Environment env = new EnvironmentImpl();\n+\n+    public DocumentProcessInstanceMarshaller(ObjectMarshallingStrategy... strategies) {\n+        ObjectMarshallingStrategy[] strats = null;\n+        if (strategies == null) {\n+            strats = new ObjectMarshallingStrategy[]{new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)};\n+        } else {\n+            strats = new ObjectMarshallingStrategy[strategies.length + 1];\n+            int i = 0;\n+            for (ObjectMarshallingStrategy strategy : strategies) {\n+                strats[i] = strategy;\n+                i++;\n+            }\n+            strats[i] = new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT);\n+        }\n+        env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, strats);\n+    }\n+\n+    @Override\n+    protected WorkflowProcessInstanceImpl createProcessInstance() {\n+        return new RuleFlowProcessInstance();\n+    }\n+\n+    public ProcessInstanceDocument marshalProcessInstance(ProcessInstance<?> processInstance) {\n+        try {\n+            WorkflowProcessInstance pi = ((AbstractProcessInstance<?>) processInstance).internalGetProcessInstance();\n+            ProcessMarshallerWriteContext context = new ProcessMarshallerWriteContext(null, null, null, null, env);\n+            context.parameterObject = JsonFormat.printer().print(super.writeProcessInstance(context, pi));\n+            ProcessInstanceDocument document = new ProcessInstanceDocumentMapper().apply(context);\n+            ((WorkflowProcessInstanceImpl) pi).disconnect();\n+            return document;\n+        } catch (Exception e) {\n+            throw new DocumentMarshallingException(processInstance.id(), e, DOCUMENT_MARSHALLING_ERROR_MSG);\n+        }\n+    }\n+\n+    public WorkflowProcessInstance unmarshallWorkflowProcessInstance(ProcessInstanceDocument doc, Process<?> process) {\n+        try {\n+            MarshallerReaderContext context = new MarshallerReaderContext(Collections.singletonMap(process.id(), ((AbstractProcess<?>) process).process()), null, null, null, env, null);\n+            context.parameterObject = doc;\n+            JBPMMessages.ProcessInstance instance = new ProcessInstanceMessageMapper().apply(context);", "originalCommit": "df60b507ffc8e2e606f2a2da8c16e5f006338293", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MzE3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r463663177", "bodyText": "done.", "author": "swati-kale", "createdAt": "2020-07-31T15:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MDc0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r463490748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\"))\n          \n          \n            \n                                                     .get(0);\n          \n          \n            \n                    BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\")).get(0);", "author": "cristianonicolai", "createdAt": "2020-07-31T08:57:47Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/PersistableProcessInstanceIT.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import org.drools.core.io.impl.ClassPathResource;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.persistence.KogitoProcessInstancesFactory;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.bpmn2.BpmnProcess;\n+import org.kie.kogito.process.bpmn2.BpmnVariables;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.testcontainers.containers.MongoDBContainer;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_ACTIVE;\n+import static org.kie.api.runtime.process.ProcessInstance.STATE_COMPLETED;\n+\n+@Testcontainers\n+class PersistableProcessInstanceIT {\n+\n+    private SecurityPolicy securityPolicy = SecurityPolicy.of(new StaticIdentityProvider(\"john\"));\n+    final static MongoDBContainer mongoDBContainer = new MongoDBContainer();\n+    final static String DB_NAME = \"testdb\";\n+\n+    @BeforeAll\n+    public static void startContainerAndPublicPortIsAvailable() {\n+        mongoDBContainer.start();\n+    }\n+\n+    @Test\n+    void test() {\n+        MongoClient mongoClient = MongoClients.create();\n+        BpmnProcess process = BpmnProcess.from(new ClassPathResource(\"BPMN2-UserTask.bpmn2\"))\n+                                         .get(0);", "originalCommit": "df60b507ffc8e2e606f2a2da8c16e5f006338293", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzMzIxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r463533214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ((WorkflowProcessInstanceImpl) pi).disconnect();\n          \n          \n            \n                       pi.disconnect();", "author": "cristianonicolai", "createdAt": "2020-07-31T10:28:49Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/marshalling/DocumentProcessInstanceMarshaller.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.marshalling;\n+\n+import java.util.Collections;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import org.drools.core.impl.EnvironmentImpl;\n+import org.drools.core.marshalling.impl.ClassObjectMarshallingStrategyAcceptor;\n+import org.drools.core.marshalling.impl.MarshallerReaderContext;\n+import org.drools.core.marshalling.impl.ProcessMarshallerWriteContext;\n+import org.drools.core.marshalling.impl.SerializablePlaceholderResolverStrategy;\n+import org.jbpm.marshalling.impl.AbstractProtobufProcessInstanceMarshaller;\n+import org.jbpm.marshalling.impl.JBPMMessages;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.instance.WorkflowProcessInstance;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.runtime.Environment;\n+import org.kie.api.runtime.EnvironmentName;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceDocumentMapper;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceMessageMapper;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.AbstractProcess;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_MARSHALLING_ERROR_MSG;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_UNMARSHALLING_ERROR_MSG;\n+\n+public class DocumentProcessInstanceMarshaller extends AbstractProtobufProcessInstanceMarshaller {\n+\n+    private Environment env = new EnvironmentImpl();\n+\n+    public DocumentProcessInstanceMarshaller(ObjectMarshallingStrategy... strategies) {\n+        ObjectMarshallingStrategy[] strats = null;\n+        if (strategies == null) {\n+            strats = new ObjectMarshallingStrategy[]{new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)};\n+        } else {\n+            strats = new ObjectMarshallingStrategy[strategies.length + 1];\n+            int i = 0;\n+            for (ObjectMarshallingStrategy strategy : strategies) {\n+                strats[i] = strategy;\n+                i++;\n+            }\n+            strats[i] = new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT);\n+        }\n+        env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, strats);\n+    }\n+\n+    @Override\n+    protected WorkflowProcessInstanceImpl createProcessInstance() {\n+        return new RuleFlowProcessInstance();\n+    }\n+\n+    public ProcessInstanceDocument marshalProcessInstance(ProcessInstance<?> processInstance) {\n+        try {\n+            WorkflowProcessInstance pi = ((AbstractProcessInstance<?>) processInstance).internalGetProcessInstance();\n+            ProcessMarshallerWriteContext context = new ProcessMarshallerWriteContext(null, null, null, null, env);\n+            context.parameterObject = JsonFormat.printer().print(super.writeProcessInstance(context, pi));\n+            ProcessInstanceDocument document = new ProcessInstanceDocumentMapper().apply(context);\n+            ((WorkflowProcessInstanceImpl) pi).disconnect();", "originalCommit": "df60b507ffc8e2e606f2a2da8c16e5f006338293", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7b1ca92c8957fb74b7a629fad440b17b89a6a5e8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7b1ca92c8957fb74b7a629fad440b17b89a6a5e8", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-07-31T14:57:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNDc1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r464524752", "bodyText": "you can use the this.exists(String id)  method here to avoid duplicating code.", "author": "tiagodolphine", "createdAt": "2020-08-03T16:30:32Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistableProcessInstances.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+*\n+*      http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.model.Filters;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingStrategy;\n+import org.kie.kogito.mongodb.marshalling.DocumentProcessInstanceMarshaller;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getCollection;\n+\n+public class PersistableProcessInstances<T extends Model> implements MutableProcessInstances<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstances.class);\n+    private org.kie.kogito.process.Process<?> process;\n+    private DocumentProcessInstanceMarshaller marshaller;\n+    private final MongoCollection<ProcessInstanceDocument> collection;\n+\n+    public PersistableProcessInstances(MongoClient mongoClient, org.kie.kogito.process.Process<?> process, String dbName) {\n+        this.process = process;\n+        collection = getCollection(mongoClient, process.id(), dbName);\n+        marshaller = new DocumentProcessInstanceMarshaller(new DocumentMarshallingStrategy());\n+    }\n+\n+    @Override\n+    public Optional<ProcessInstance<T>> findById(String id) {\n+        ProcessInstanceDocument piDoc = collection.find(Filters.eq(DOCUMENT_ID, resolveId(id))).first();\n+        if (piDoc == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(marshaller.unmarshallProcessInstance(piDoc, process));\n+    }\n+\n+    @Override\n+    public Collection<? extends ProcessInstance<T>> values() {\n+\n+        MongoCursor<ProcessInstanceDocument> cursor = collection.find().iterator();\n+        List<ProcessInstance<T>> list = new ArrayList<>();\n+        try {\n+            while (cursor.hasNext()) {\n+                list.add(marshaller.unmarshallProcessInstance(cursor.next(), process));\n+            }\n+        } finally {\n+            cursor.close();\n+        }\n+        return list;\n+    }\n+\n+    @Override\n+    public void create(String id, ProcessInstance<T> instance) {\n+        updateStorage(id, instance, true);\n+    }\n+\n+    @Override\n+    public void update(String id, ProcessInstance<T> instance) {\n+        updateStorage(id, instance, false);\n+    }\n+\n+    protected void updateStorage(String id, ProcessInstance<T> instance, boolean checkDuplicates) {\n+\n+        String resolvedId = resolveId(id);\n+        if (isActive(instance)) {\n+            ProcessInstanceDocument doc = marshaller.marshalProcessInstance(instance);\n+            if (checkDuplicates) {\n+                ProcessInstanceDocument existing = collection.find(Filters.eq(DOCUMENT_ID, resolvedId)).first();", "originalCommit": "7b1ca92c8957fb74b7a629fad440b17b89a6a5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NDc4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r464564789", "bodyText": "It seems this method is the same as the one on ProcessInstanceDocumentMapper, does it worth to centralize the implementation to avoid duplication?", "author": "tiagodolphine", "createdAt": "2020-08-03T17:41:30Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/ProcessInstanceMessageMapper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.protobuf.util.JsonFormat;\n+import org.drools.core.marshalling.impl.MarshallerReaderContext;\n+import org.jbpm.marshalling.impl.JBPMMessages;\n+import org.jbpm.marshalling.impl.JBPMMessages.ProcessInstance;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.kogito.mongodb.marshalling.DocumentUnmarshallingException;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VALUE;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VARIABLE;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getObjectMapper;\n+\n+public class ProcessInstanceMessageMapper implements BiFunction<MarshallerReaderContext, ProcessInstanceDocument, JBPMMessages.ProcessInstance> {\n+\n+    @Override\n+    public ProcessInstance apply(MarshallerReaderContext context, ProcessInstanceDocument doc) {\n+        JBPMMessages.ProcessInstance.Builder builder = JBPMMessages.ProcessInstance.newBuilder();\n+        JsonFormat.Parser parser = JsonFormat.parser();\n+        try {\n+            JsonNode rootNode = getObjectMapper().readTree(doc.getProcessInstance().toJson());\n+            applyVariables(rootNode, VARIABLE);\n+            String json = getObjectMapper().writeValueAsString(rootNode);\n+            parser.merge(json, builder);\n+            for (Map.Entry<String, Integer> entry : doc.getStrategies().entrySet()) {\n+                ObjectMarshallingStrategy strategyObject = context.resolverStrategyFactory.getStrategyObject(entry.getKey());\n+                if (strategyObject != null) {\n+                    context.usedStrategies.put(entry.getValue(), strategyObject);\n+                }\n+            }\n+\n+        } catch (Exception e) {\n+            throw new DocumentUnmarshallingException(e);\n+        }\n+        return builder.build();\n+    }\n+\n+    private void applyVariables(JsonNode parent, String variable) {", "originalCommit": "7b1ca92c8957fb74b7a629fad440b17b89a6a5e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzNzA4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r465237083", "bodyText": "As discussed, they are different and keeping them as it is.", "author": "swati-kale", "createdAt": "2020-08-04T18:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NDc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NTgzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r464565838", "bodyText": "make sense to make the method abstract to force the implementations to override it?", "author": "tiagodolphine", "createdAt": "2020-08-03T17:42:46Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/persistence/KogitoProcessInstancesFactory.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence;\n+\n+import com.mongodb.client.MongoClient;\n+import org.kie.kogito.mongodb.PersistableProcessInstances;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstancesFactory;\n+\n+/**\n+ * This class must always have exact FQCN as\n+ * <code>org.kie.kogito.persistence.KogitoProcessInstancesFactory</code>\n+ *\n+ */\n+public abstract class KogitoProcessInstancesFactory implements ProcessInstancesFactory {\n+\n+    protected MongoClient mongoClient;\n+\n+    public KogitoProcessInstancesFactory(MongoClient mongoClient) {\n+        this.mongoClient = mongoClient;\n+    }\n+\n+    public String dbName() {", "originalCommit": "7b1ca92c8957fb74b7a629fad440b17b89a6a5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MDg2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r464570868", "bodyText": "the collection.find(Filters.eq(DOCUMENT_ID, resolvedId)).first() is used in many places, why not extracting into a method to be reused?", "author": "tiagodolphine", "createdAt": "2020-08-03T17:52:24Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistableProcessInstances.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+*\n+*      http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.model.Filters;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingStrategy;\n+import org.kie.kogito.mongodb.marshalling.DocumentProcessInstanceMarshaller;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getCollection;\n+\n+public class PersistableProcessInstances<T extends Model> implements MutableProcessInstances<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstances.class);\n+    private org.kie.kogito.process.Process<?> process;\n+    private DocumentProcessInstanceMarshaller marshaller;\n+    private final MongoCollection<ProcessInstanceDocument> collection;\n+\n+    public PersistableProcessInstances(MongoClient mongoClient, org.kie.kogito.process.Process<?> process, String dbName) {\n+        this.process = process;\n+        collection = getCollection(mongoClient, process.id(), dbName);\n+        marshaller = new DocumentProcessInstanceMarshaller(new DocumentMarshallingStrategy());\n+    }\n+\n+    @Override\n+    public Optional<ProcessInstance<T>> findById(String id) {\n+        ProcessInstanceDocument piDoc = collection.find(Filters.eq(DOCUMENT_ID, resolveId(id))).first();", "originalCommit": "7b1ca92c8957fb74b7a629fad440b17b89a6a5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b73f23ca8da37415015df9ca52764bd2da4a98ab", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b73f23ca8da37415015df9ca52764bd2da4a98ab", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-04T18:09:00Z", "type": "forcePushed"}, {"oid": "10ef05a8681a723f74471f11537578800d52c63b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/10ef05a8681a723f74471f11537578800d52c63b", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-06T20:18:54Z", "type": "forcePushed"}, {"oid": "18aaf70c95a2fabd6c683a70a42c44277239dbad", "url": "https://github.com/kiegroup/kogito-runtimes/commit/18aaf70c95a2fabd6c683a70a42c44277239dbad", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-06T20:54:55Z", "type": "forcePushed"}, {"oid": "fb2b8827ea3fc329d33c3533921a152eca0d4b3b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fb2b8827ea3fc329d33c3533921a152eca0d4b3b", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-07T04:56:40Z", "type": "forcePushed"}, {"oid": "3f8b28100fd74d216c5bee049d85d58f7b700bd8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3f8b28100fd74d216c5bee049d85d58f7b700bd8", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-09T22:15:12Z", "type": "forcePushed"}, {"oid": "27f314550a7bdcde1521bcf3acad029a298d7cd4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/27f314550a7bdcde1521bcf3acad029a298d7cd4", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-10T14:41:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2NDI3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467864279", "bodyText": "What about using try-with-resources here for MongoCursor?", "author": "MarianMacik", "createdAt": "2020-08-10T12:19:26Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistableProcessInstances.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+*\n+*      http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.model.Filters;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingStrategy;\n+import org.kie.kogito.mongodb.marshalling.DocumentProcessInstanceMarshaller;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.ProcessInstanceReadMode;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getCollection;\n+import static org.kie.kogito.process.ProcessInstanceReadMode.MUTABLE;\n+\n+public class PersistableProcessInstances<T extends Model> implements MutableProcessInstances<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PersistableProcessInstances.class);\n+    private org.kie.kogito.process.Process<?> process;\n+    private DocumentProcessInstanceMarshaller marshaller;\n+    private final MongoCollection<ProcessInstanceDocument> collection;\n+\n+    public PersistableProcessInstances(MongoClient mongoClient, org.kie.kogito.process.Process<?> process, String dbName) {\n+        this.process = process;\n+        collection = getCollection(mongoClient, process.id(), dbName);\n+        marshaller = new DocumentProcessInstanceMarshaller(new DocumentMarshallingStrategy());\n+    }\n+\n+    @Override\n+    public Optional<ProcessInstance<T>> findById(String id, ProcessInstanceReadMode mode) {\n+        ProcessInstanceDocument piDoc = find(resolveId(id));\n+        if (piDoc == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(mode == MUTABLE ? marshaller.unmarshallProcessInstance(piDoc, process) : marshaller.unmarshallReadOnlyProcessInstance(piDoc, process));\n+    }\n+\n+    @Override\n+    public Collection<ProcessInstance<T>> values(ProcessInstanceReadMode mode) {\n+\n+        MongoCursor<ProcessInstanceDocument> cursor = collection.find().iterator();\n+        List<ProcessInstance<T>> list = new ArrayList<>();\n+        try {\n+            while (cursor.hasNext()) {\n+                list.add(mode == MUTABLE ? marshaller.unmarshallProcessInstance(cursor.next(), process) : marshaller.unmarshallReadOnlyProcessInstance(cursor.next(), process));\n+            }\n+        } finally {\n+            cursor.close();\n+        }", "originalCommit": "3f8b28100fd74d216c5bee049d85d58f7b700bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2Njg4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467866884", "bodyText": "Why not to name it MongoDBProcessInstances? So far we have:\n\nMapProcessInstances (storage in a map)\nFileSystemProcessInstances (storage in files)\nCacheProcessInstances (storage in an Infinispan cache)\n\nAll of them persist instances in a different way and they have this way as a part of their name.", "author": "MarianMacik", "createdAt": "2020-08-10T12:24:38Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/PersistableProcessInstances.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+* Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+*\n+*      http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoCursor;\n+import com.mongodb.client.model.Filters;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingStrategy;\n+import org.kie.kogito.mongodb.marshalling.DocumentProcessInstanceMarshaller;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.process.MutableProcessInstances;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstanceDuplicatedException;\n+import org.kie.kogito.process.ProcessInstanceReadMode;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getCollection;\n+import static org.kie.kogito.process.ProcessInstanceReadMode.MUTABLE;\n+\n+public class PersistableProcessInstances<T extends Model> implements MutableProcessInstances<T> {", "originalCommit": "3f8b28100fd74d216c5bee049d85d58f7b700bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwOTg1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467909853", "bodyText": "Can we have the ProcessInstanceDocumentMapper and the ProcessInstanceMessageMapper symmetric? The thing is that the ProcessInstanceDocumentMapper maps only from JSON to ProcessInstanceDocument while ProcessInstanceMessageMapper maps from ProcessInstanceDocument straight to JBPMMessages.ProcessInstance. I think it would make sense to have this unified.", "author": "MarianMacik", "createdAt": "2020-08-10T13:39:14Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/marshalling/DocumentProcessInstanceMarshaller.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.marshalling;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.Collections;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import org.drools.core.impl.EnvironmentImpl;\n+import org.drools.core.marshalling.impl.ClassObjectMarshallingStrategyAcceptor;\n+import org.drools.core.marshalling.impl.KogitoMarshallerReaderContext;\n+import org.drools.core.marshalling.impl.KogitoProcessMarshallerWriteContext;\n+import org.drools.core.marshalling.impl.MarshallerReaderContext;\n+import org.drools.core.marshalling.impl.SerializablePlaceholderResolverStrategy;\n+import org.jbpm.marshalling.impl.AbstractProtobufProcessInstanceMarshaller;\n+import org.jbpm.marshalling.impl.JBPMMessages;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.instance.WorkflowProcessInstance;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.runtime.Environment;\n+import org.kie.api.runtime.EnvironmentName;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceDocumentMapper;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceMessageMapper;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.AbstractProcess;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_MARSHALLING_ERROR_MSG;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_UNMARSHALLING_ERROR_MSG;\n+\n+public class DocumentProcessInstanceMarshaller extends AbstractProtobufProcessInstanceMarshaller {\n+\n+    private Environment env = new EnvironmentImpl();\n+\n+    public DocumentProcessInstanceMarshaller(ObjectMarshallingStrategy... strategies) {\n+        ObjectMarshallingStrategy[] strats = null;\n+        if (strategies == null) {\n+            strats = new ObjectMarshallingStrategy[]{new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT)};\n+        } else {\n+            strats = new ObjectMarshallingStrategy[strategies.length + 1];\n+            int i = 0;\n+            for (ObjectMarshallingStrategy strategy : strategies) {\n+                strats[i] = strategy;\n+                i++;\n+            }\n+            strats[i] = new SerializablePlaceholderResolverStrategy(ClassObjectMarshallingStrategyAcceptor.DEFAULT);\n+        }\n+        env.set(EnvironmentName.OBJECT_MARSHALLING_STRATEGIES, strats);\n+    }\n+\n+    @Override\n+    protected WorkflowProcessInstanceImpl createProcessInstance() {\n+        return new RuleFlowProcessInstance();\n+    }\n+\n+    public ProcessInstanceDocument marshalProcessInstance(ProcessInstance<?> processInstance) {\n+        try {\n+            WorkflowProcessInstance pi = ((AbstractProcessInstance<?>) processInstance).internalGetProcessInstance();\n+            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n+                KogitoProcessMarshallerWriteContext context = new KogitoProcessMarshallerWriteContext(baos, null, null, null, null, env);\n+                context.parameterObject = JsonFormat.printer().print(super.writeProcessInstance(context, pi));\n+                ProcessInstanceDocument document = new ProcessInstanceDocumentMapper().apply(context);", "originalCommit": "3f8b28100fd74d216c5bee049d85d58f7b700bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NjMwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468256305", "bodyText": "ProcessInstanceDocumentMapper now maps fom JBPMMessages.ProcessInstance to ProcessInstanceDocument\nProcessInstanceMessageMapper maps from ProcessInstanceDocument to JBPMMessages.ProcessInstance .", "author": "swati-kale", "createdAt": "2020-08-11T00:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwOTg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxMzExNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467913115", "bodyText": "This constructor is not used. Do we want to keep it?", "author": "MarianMacik", "createdAt": "2020-08-10T13:44:02Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/model/ProcessInstanceDocument.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.model;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.bson.Document;\n+\n+public class ProcessInstanceDocument {\n+\n+    private String id;\n+\n+    private Document processInstance;\n+\n+    private Map<String, Integer> strategies = new HashMap<>();\n+\n+    private Map<String, Integer> versions = new HashMap<>();\n+\n+    public ProcessInstanceDocument() {}\n+\n+    public ProcessInstanceDocument(String id, Document processInstance, Map<String, Integer> strategies, Map<String, Integer> versions) {", "originalCommit": "3f8b28100fd74d216c5bee049d85d58f7b700bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1NDc3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467954779", "bodyText": "enableDefaultTyping() is deprecated since 2.10. We should use something like:\nMAPPER.activateDefaultTyping(LaissezFaireSubTypeValidator.instance);\nwhich basically does the same but via a non-deprecated method. LaissezFaireSubTypeValidator allows default typing for everything.", "author": "MarianMacik", "createdAt": "2020-08-10T14:45:21Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/DocumentUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.MongoClientSettings;\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.codecs.configuration.CodecRegistries;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.kie.kogito.mongodb.codec.ProcessInstanceDocumentCodecProvider;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingException;\n+import org.kie.kogito.mongodb.marshalling.DocumentUnmarshallingException;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+\n+import static org.bson.codecs.configuration.CodecRegistries.fromProviders;\n+\n+public class DocumentUtils {\n+\n+    private DocumentUtils() {}\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public static ObjectMapper getObjectMapper() {\n+\n+        return MAPPER;\n+    }\n+\n+    public static MongoCollection<ProcessInstanceDocument> getCollection(MongoClient mongoClient, String processId, String dbName) {\n+        CodecRegistry registry = CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), fromProviders(new ProcessInstanceDocumentCodecProvider()));\n+        MongoDatabase mongoDatabase = mongoClient.getDatabase(dbName).withCodecRegistry(registry);\n+        return mongoDatabase.getCollection(processId, ProcessInstanceDocument.class).withCodecRegistry(registry);\n+    }\n+\n+    public static byte[] toByteArray(Object object) {\n+        String json = null;\n+        try {\n+            MAPPER.enableDefaultTyping();\n+            json = MAPPER.writeValueAsString(object);\n+        } catch (JsonProcessingException e) {\n+            throw new DocumentMarshallingException(e);\n+        }\n+        return json.getBytes();\n+    }\n+\n+    public static Object fromByteArray(String dataType, byte[] object) {\n+        try {\n+            Class<?> loadClass = Thread.currentThread().getContextClassLoader().loadClass(dataType);\n+            MAPPER.enableDefaultTyping();", "originalCommit": "27f314550a7bdcde1521bcf3acad029a298d7cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MTMwNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467961304", "bodyText": "Not sure we want that as after the unfork the version of drools is completely different than in Kogito.", "author": "MarianMacik", "createdAt": "2020-08-10T14:54:20Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/ProcessInstanceDocumentMapper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Function;\n+import org.bson.Document;\n+import org.drools.core.marshalling.impl.KogitoProcessMarshallerWriteContext;\n+import org.drools.core.util.Drools;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingException;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.PROCESS_INSTANCE_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VALUE;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VARIABLE;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VERSION_MAJOR;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VERSION_MINOR;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VERSION_REVISION;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getObjectMapper;\n+\n+public class ProcessInstanceDocumentMapper implements Function<KogitoProcessMarshallerWriteContext, ProcessInstanceDocument> {\n+\n+    @Override\n+    public ProcessInstanceDocument apply(KogitoProcessMarshallerWriteContext context) {\n+        String instance = (String) context.parameterObject;\n+        ProcessInstanceDocument doc = new ProcessInstanceDocument();\n+        try {\n+            JsonNode instanceNode = getObjectMapper().readTree(instance);\n+            doc.setId(instanceNode.get(PROCESS_INSTANCE_ID).asText());\n+            applyVariables(instanceNode, VARIABLE);\n+            doc.setProcessInstance(Optional.ofNullable(instanceNode).map(json -> Document.parse(json.toString())).orElse(null));\n+            doc.setStrategies(context.usedStrategies.entrySet().stream().collect(Collectors.toMap(e -> e.getKey().getName(), Map.Entry::getValue)));\n+            doc.getVersions().put(VERSION_MAJOR, Drools.getMajorVersion());\n+            doc.getVersions().put(VERSION_MINOR, Drools.getMinorVersion());\n+            doc.getVersions().put(VERSION_REVISION, Drools.getRevisionVersion());", "originalCommit": "27f314550a7bdcde1521bcf3acad029a298d7cd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNjc1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468206752", "bodyText": "It was in sync with  original process instance marshalling whereversions and strategies are persisted as a part of header  as below,\nhttps://github.com/kiegroup/kogito-runtimes/blob/master/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/marshalling/ProcessInstanceMarshaller.java#L87\nhttps://github.com/kiegroup/drools/blob/master/drools-core/src/main/java/org/drools/core/marshalling/impl/PersisterHelper.java#L195-L201\nIf versions are not required, @cristianonicolai let me know if you have any other opinion.", "author": "swati-kale", "createdAt": "2020-08-10T21:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MTMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxMTY3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468811675", "bodyText": "Yes, but they are then not read in the ProcessInstanceMessageMapper, so I guess they are not needed at all?", "author": "MarianMacik", "createdAt": "2020-08-11T19:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MTMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMTIzNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468931237", "bodyText": "good point, with the unfork now this will be different, so +1 to remove.", "author": "cristianonicolai", "createdAt": "2020-08-12T00:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MjM5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r467972393", "bodyText": "Why do we need to marshall used strategies? To keep the order? I think it is not used anywhere...", "author": "MarianMacik", "createdAt": "2020-08-10T15:09:51Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/utils/ProcessInstanceDocumentMapper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.utils;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Function;\n+import org.bson.Document;\n+import org.drools.core.marshalling.impl.KogitoProcessMarshallerWriteContext;\n+import org.drools.core.util.Drools;\n+import org.kie.kogito.mongodb.marshalling.DocumentMarshallingException;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.PROCESS_INSTANCE_ID;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VALUE;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VARIABLE;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VERSION_MAJOR;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VERSION_MINOR;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.VERSION_REVISION;\n+import static org.kie.kogito.mongodb.utils.DocumentUtils.getObjectMapper;\n+\n+public class ProcessInstanceDocumentMapper implements Function<KogitoProcessMarshallerWriteContext, ProcessInstanceDocument> {\n+\n+    @Override\n+    public ProcessInstanceDocument apply(KogitoProcessMarshallerWriteContext context) {\n+        String instance = (String) context.parameterObject;\n+        ProcessInstanceDocument doc = new ProcessInstanceDocument();\n+        try {\n+            JsonNode instanceNode = getObjectMapper().readTree(instance);\n+            doc.setId(instanceNode.get(PROCESS_INSTANCE_ID).asText());\n+            applyVariables(instanceNode, VARIABLE);\n+            doc.setProcessInstance(Optional.ofNullable(instanceNode).map(json -> Document.parse(json.toString())).orElse(null));\n+            doc.setStrategies(context.usedStrategies.entrySet().stream().collect(Collectors.toMap(e -> e.getKey().getName(), Map.Entry::getValue)));", "originalCommit": "27f314550a7bdcde1521bcf3acad029a298d7cd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMDM5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468200398", "bodyText": "strategy will decide variable marshalling/unmarshalling. So it is saved while marshalling so that can be used while unmarshalling in below\n\n  \n    \n      kogito-runtimes/jbpm/jbpm-flow/src/main/java/org/jbpm/marshalling/impl/ProtobufProcessMarshaller.java\n    \n    \n         Line 251\n      in\n      923d55e\n    \n    \n    \n    \n\n        \n          \n           ObjectMarshallingStrategy strategy = context.usedStrategies.get( _variable.getStrategyIndex() );", "author": "swati-kale", "createdAt": "2020-08-10T21:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxODUzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468818532", "bodyText": "I also noticed that with these strategies there are also strategy contexts, do we want to serialize them as well? But maybe this can be added only when needed. Wdyt @cristianonicolai?", "author": "MarianMacik", "createdAt": "2020-08-11T19:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMDc5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468930796", "bodyText": "@MarianMacik +1", "author": "cristianonicolai", "createdAt": "2020-08-12T00:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MjM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNDk1OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468004959", "bodyText": "Formatting.", "author": "MarianMacik", "createdAt": "2020-08-10T15:48:46Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/persistence/PersistenceGenerator.java", "diffHunk": "@@ -121,7 +131,9 @@ public ApplicationSection section() {\n         \t\tinifinispanBasedPersistence(generatedFiles);\n         \t} else if (persistenceType.equals(FILESYSTEM_PERSISTENCE_TYPE)) {\n         \t\tfileSystemBasedPersistence(generatedFiles);\n-        \t}\n+        \t} else if (persistenceType.equals(MONGODB_PERSISTENCE_TYPE)) {\n+                mongodbBasedPersistence(generatedFiles);", "originalCommit": "27f314550a7bdcde1521bcf3acad029a298d7cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyODgwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r468028806", "bodyText": "Can we make this composition instead of inheritance? This would be more in sync with ProcessInstanceMarshaller, which obtains instance of AbstractProtobufProcessInstanceMarshaller using:\n\n  \n    \n      kogito-runtimes/jbpm/jbpm-flow/src/main/java/org/kie/kogito/process/impl/marshalling/ProcessInstanceMarshaller.java\n    \n    \n         Line 82\n      in\n      923d55e\n    \n    \n    \n    \n\n        \n          \n           org.jbpm.marshalling.impl.ProcessInstanceMarshaller marshaller = ProcessMarshallerRegistry.INSTANCE.getMarshaller(processType); \n        \n    \n  \n\n\nAlso right now we are mixing the org.kie.kogito.mongodb.marshalling package with the org.jbpm.marshalling.impl package which are two different things.", "author": "MarianMacik", "createdAt": "2020-08-10T16:27:21Z", "path": "addons/persistence/mongodb-persistence-addon/src/main/java/org/kie/kogito/mongodb/marshalling/DocumentProcessInstanceMarshaller.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb.marshalling;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.Collections;\n+\n+import com.google.protobuf.util.JsonFormat;\n+import org.drools.core.impl.EnvironmentImpl;\n+import org.drools.core.marshalling.impl.ClassObjectMarshallingStrategyAcceptor;\n+import org.drools.core.marshalling.impl.KogitoMarshallerReaderContext;\n+import org.drools.core.marshalling.impl.KogitoProcessMarshallerWriteContext;\n+import org.drools.core.marshalling.impl.MarshallerReaderContext;\n+import org.drools.core.marshalling.impl.SerializablePlaceholderResolverStrategy;\n+import org.jbpm.marshalling.impl.AbstractProtobufProcessInstanceMarshaller;\n+import org.jbpm.marshalling.impl.JBPMMessages;\n+import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;\n+import org.jbpm.workflow.instance.WorkflowProcessInstance;\n+import org.jbpm.workflow.instance.impl.WorkflowProcessInstanceImpl;\n+import org.kie.api.marshalling.ObjectMarshallingStrategy;\n+import org.kie.api.runtime.Environment;\n+import org.kie.api.runtime.EnvironmentName;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceDocumentMapper;\n+import org.kie.kogito.mongodb.utils.ProcessInstanceMessageMapper;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.AbstractProcess;\n+import org.kie.kogito.process.impl.AbstractProcessInstance;\n+\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_MARSHALLING_ERROR_MSG;\n+import static org.kie.kogito.mongodb.utils.DocumentConstants.DOCUMENT_UNMARSHALLING_ERROR_MSG;\n+\n+public class DocumentProcessInstanceMarshaller extends AbstractProtobufProcessInstanceMarshaller {", "originalCommit": "27f314550a7bdcde1521bcf3acad029a298d7cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eb29d4a26b2f42022a45988e7aaeb523eb05c670", "url": "https://github.com/kiegroup/kogito-runtimes/commit/eb29d4a26b2f42022a45988e7aaeb523eb05c670", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-11T00:12:40Z", "type": "forcePushed"}, {"oid": "a9c2113790e5f830445985c591bc70fd177860b1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a9c2113790e5f830445985c591bc70fd177860b1", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-11T04:20:14Z", "type": "forcePushed"}, {"oid": "45d6d38776f10f35600f2b7ad5d0cc32c03d7fd1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/45d6d38776f10f35600f2b7ad5d0cc32c03d7fd1", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-12T02:34:18Z", "type": "forcePushed"}, {"oid": "db1b3c96d2c0cb3e2acf9655df04b92574dc126b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/db1b3c96d2c0cb3e2acf9655df04b92574dc126b", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-13T05:08:03Z", "type": "forcePushed"}, {"oid": "866c4670fbb07f00dce0abec560b79321e43a9ea", "url": "https://github.com/kiegroup/kogito-runtimes/commit/866c4670fbb07f00dce0abec560b79321e43a9ea", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-13T09:32:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0MzQ0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r469843449", "bodyText": "This is a bug reported by SonarCloud. codec.getDocumentId(doc) always returns primitive true or false, so this assertion always passes. The best would be to remove this assertion.", "author": "MarianMacik", "createdAt": "2020-08-13T10:07:42Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/mongodb/ProcessInstanceDocumentCodecProviderTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.mongodb;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+\n+import com.mongodb.MongoClientSettings;\n+import org.bson.BsonBinaryReader;\n+import org.bson.BsonBinaryWriter;\n+import org.bson.BsonWriter;\n+import org.bson.codecs.Codec;\n+import org.bson.codecs.DecoderContext;\n+import org.bson.codecs.EncoderContext;\n+import org.bson.codecs.configuration.CodecProvider;\n+import org.bson.codecs.configuration.CodecRegistries;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.io.BasicOutputBuffer;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.mongodb.codec.ProcessInstanceDocumentCodec;\n+import org.kie.kogito.mongodb.codec.ProcessInstanceDocumentCodecProvider;\n+import org.kie.kogito.mongodb.model.ProcessInstanceDocument;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.bson.codecs.configuration.CodecRegistries.fromProviders;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+class ProcessInstanceDocumentCodecProviderTest {\n+\n+    @Test\n+    void providerTest() {\n+        CodecRegistry codecRegistry = CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), fromProviders(new ProcessInstanceDocumentCodecProvider()));\n+        CodecProvider provider = codecRegistry;\n+        Codec<ProcessInstanceDocument> codec = provider.get(ProcessInstanceDocument.class, codecRegistry);\n+        assertNotNull(codec, \"Codec cannot be null\");\n+        assertThat(codec.getEncoderClass().getSimpleName()).isEqualTo(ProcessInstanceDocument.class.getSimpleName());\n+        assertThat(codec.getClass().getCanonicalName()).isEqualTo(ProcessInstanceDocumentCodec.class.getCanonicalName());\n+    }\n+\n+    @Test\n+    void codecTest() throws URISyntaxException, IOException {\n+        ProcessInstanceDocumentCodec codec = new ProcessInstanceDocumentCodec();\n+        assertThat(codec.getEncoderClass()).isEqualTo(ProcessInstanceDocument.class);\n+        ProcessInstanceDocument doc = new ProcessInstanceDocument();\n+        doc.setProcessInstance((org.bson.Document) TestHelper.getProcessInstanceDocument().get(\"processInstance\"));\n+        assertNull(doc.getId(), \"ProcessInstanceDocument is null\");\n+        codec.generateIdIfAbsentFromDocument(doc);\n+        assertThat(codec.documentHasId(doc)).isTrue();\n+        assertNotNull(codec.getDocumentId(doc), \"ProcessInstanceDocument has document id and not null\");", "originalCommit": "866c4670fbb07f00dce0abec560b79321e43a9ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2b1ed6c338e44bf397be5ade53c02f1a77fb60c9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2b1ed6c338e44bf397be5ade53c02f1a77fb60c9", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-13T19:19:45Z", "type": "forcePushed"}, {"oid": "e698fbbdcb4fb55339d77328cfdf56033066adc0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e698fbbdcb4fb55339d77328cfdf56033066adc0", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-18T03:52:55Z", "type": "forcePushed"}, {"oid": "9806892cfcb7ad50561beb69f64adcc8dfd88d98", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9806892cfcb7ad50561beb69f64adcc8dfd88d98", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-19T04:28:27Z", "type": "forcePushed"}, {"oid": "788bf3eb4f402a199b98246cd23b0edf51c37673", "url": "https://github.com/kiegroup/kogito-runtimes/commit/788bf3eb4f402a199b98246cd23b0edf51c37673", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-19T12:58:17Z", "type": "forcePushed"}, {"oid": "12f3b671c1ff4606e673123c841cebb567fbba2e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/12f3b671c1ff4606e673123c841cebb567fbba2e", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-19T18:24:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU0OTgyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/477#discussion_r473549822", "bodyText": "perhaps use mock(Process.class) ?", "author": "cristianonicolai", "createdAt": "2020-08-20T02:29:24Z", "path": "addons/persistence/mongodb-persistence-addon/src/test/java/org/kie/kogito/persistence/KogitoProcessInstancesFactoryTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.persistence;\n+\n+import org.jbpm.workflow.core.impl.WorkflowProcessImpl;\n+import org.junit.jupiter.api.Test;\n+import org.kie.api.runtime.process.WorkflowProcessInstance;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.mongodb.MongoDBProcessInstances;\n+import org.kie.kogito.mongodb.TestHelper;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.AbstractProcess;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class KogitoProcessInstancesFactoryTest extends TestHelper {\n+\n+    @Test\n+    void test() {\n+        KogitoProcessInstancesFactory factory = new KogitoProcessInstancesFactory(getMongoClient()) {\n+\n+            @Override\n+            public String dbName() {\n+                return DB_NAME;\n+            }\n+        };\n+        assertNotNull(factory);\n+        assertThat(factory.dbName()).isEqualTo(DB_NAME);\n+        assertNotNull(factory.mongoClient);\n+        Process<?> process = new TestProcessImpl();", "originalCommit": "12f3b671c1ff4606e673123c841cebb567fbba2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3eae9a109b140248edd85014fa912b5cf8e6e3d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c3eae9a109b140248edd85014fa912b5cf8e6e3d", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-20T04:22:04Z", "type": "forcePushed"}, {"oid": "4c703c19a869daea96bcfdb86aa1d48f66189503", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4c703c19a869daea96bcfdb86aa1d48f66189503", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-21T02:25:58Z", "type": "forcePushed"}, {"oid": "24038f392579cf3708bb177449805ff53c08b0f3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/24038f392579cf3708bb177449805ff53c08b0f3", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-21T05:06:35Z", "type": "commit"}, {"oid": "24038f392579cf3708bb177449805ff53c08b0f3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/24038f392579cf3708bb177449805ff53c08b0f3", "message": "[KOGITO-1551] - Process Instance persistence in Mongo DB\n\nSigned-off-by: Swati Kale <swkale@redhat.com>", "committedDate": "2020-08-21T05:06:35Z", "type": "forcePushed"}]}