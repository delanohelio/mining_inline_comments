{"pr_number": 510, "pr_title": "[KOGITO-2125] Implement decision tracing addon for Spring Boot", "pr_createdAt": "2020-05-15T14:14:03Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/510", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MzE4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r425843180", "bodyText": "I think it is better to remove this localhost:9092 default. It is almost impossible that Kafka is going to run on the same machine and I prefer to fail fast if this value has not been provided :)", "author": "danielezonca", "createdAt": "2020-05-15T14:32:57Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingConfiguration.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.event.ApplicationEventMulticaster;\n+import org.springframework.context.event.SimpleApplicationEventMulticaster;\n+import org.springframework.core.task.SimpleAsyncTaskExecutor;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaAdmin;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+@Configuration\n+public class KogitoDecisionTracingConfiguration {\n+\n+    @Value(value = \"${kogito.addon.tracing.decision.kafka.bootstrapAddress:localhost:9092}\")", "originalCommit": "a70bfe3b65c503333708954412c7d6de6d888efc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDgwNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426574807", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-05-18T12:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0MzE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0ODU0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r425848543", "bodyText": "Are you sure about that? I don't see any \"Kogito\" specific filter or similar so I expect this will receive all messages, from Kogito or not", "author": "danielezonca", "createdAt": "2020-05-15T14:41:12Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingConfiguration.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.event.ApplicationEventMulticaster;\n+import org.springframework.context.event.SimpleApplicationEventMulticaster;\n+import org.springframework.core.task.SimpleAsyncTaskExecutor;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaAdmin;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+@Configuration\n+public class KogitoDecisionTracingConfiguration {\n+\n+    @Value(value = \"${kogito.addon.tracing.decision.kafka.bootstrapAddress:localhost:9092}\")\n+    private String kafkaBootstrapAddress;\n+\n+    @Value(value = \"${kogito.addon.tracing.decision.kafka.topic:kogito-tracing-decision}\")\n+    private String kafkaTopic;\n+\n+    /**\n+     * Defining a {@link KafkaAdmin} bean allows to automatically add topic to the broker via {@link NewTopic} beans\n+     */\n+    @Bean\n+    public KafkaAdmin kafkaAdmin() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        return new KafkaAdmin(configs);\n+    }\n+\n+    /**\n+     * {@link NewTopic} bean to create the addon Kafka topic (if the topic already exists this is ignored)\n+     */\n+    @Bean\n+    public NewTopic topic() {\n+        return new NewTopic(kafkaTopic, 1, (short) 1);\n+    }\n+\n+    /**\n+     * Configure producers\n+     */\n+    @Bean\n+    public ProducerFactory<String, String> producerFactory() {\n+        Map<String, Object> configProps = new HashMap<>();\n+        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        return new DefaultKafkaProducerFactory<>(configProps);\n+    }\n+\n+    /**\n+     * Configure {@link KafkaTemplate} object used by producers to send messages\n+     */\n+    @Bean\n+    public KafkaTemplate<String, String> kafkaTemplate() {\n+        return new KafkaTemplate<>(producerFactory());\n+    }\n+\n+    /**\n+     * Configure asynchronous event management.\n+     * Events sent by {@link KogitoDecisionTracingListener} will be handled by {@link KogitoDecisionTracingCollector}", "originalCommit": "a70bfe3b65c503333708954412c7d6de6d888efc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NTU5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426575590", "bodyText": "I removed this bean while refactoring the event management because I realized it was not required.", "author": "kostola", "createdAt": "2020-05-18T12:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0ODU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MDA1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r425850053", "bodyText": "What about KogitoTracingEvaluateEvent name?", "author": "danielezonca", "createdAt": "2020-05-15T14:43:24Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/event/ApplicationEvaluateEvent.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+public class ApplicationEvaluateEvent extends ApplicationEvent {", "originalCommit": "a70bfe3b65c503333708954412c7d6de6d888efc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NTIwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426575209", "bodyText": "I refactored the event management and while doing so I realized that this class is not required anymore, so I deleted it.", "author": "kostola", "createdAt": "2020-05-18T12:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MDA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2NTA1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r425865050", "bodyText": "Is there any reason for using a specific name?", "author": "danielezonca", "createdAt": "2020-05-15T15:05:58Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingConfiguration.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.event.ApplicationEventMulticaster;\n+import org.springframework.context.event.SimpleApplicationEventMulticaster;\n+import org.springframework.core.task.SimpleAsyncTaskExecutor;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaAdmin;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+@Configuration\n+public class KogitoDecisionTracingConfiguration {\n+\n+    @Value(value = \"${kogito.addon.tracing.decision.kafka.bootstrapAddress:localhost:9092}\")\n+    private String kafkaBootstrapAddress;\n+\n+    @Value(value = \"${kogito.addon.tracing.decision.kafka.topic:kogito-tracing-decision}\")\n+    private String kafkaTopic;\n+\n+    /**\n+     * Defining a {@link KafkaAdmin} bean allows to automatically add topic to the broker via {@link NewTopic} beans\n+     */\n+    @Bean\n+    public KafkaAdmin kafkaAdmin() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        return new KafkaAdmin(configs);\n+    }\n+\n+    /**\n+     * {@link NewTopic} bean to create the addon Kafka topic (if the topic already exists this is ignored)\n+     */\n+    @Bean\n+    public NewTopic topic() {\n+        return new NewTopic(kafkaTopic, 1, (short) 1);\n+    }\n+\n+    /**\n+     * Configure producers\n+     */\n+    @Bean\n+    public ProducerFactory<String, String> producerFactory() {\n+        Map<String, Object> configProps = new HashMap<>();\n+        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        return new DefaultKafkaProducerFactory<>(configProps);\n+    }\n+\n+    /**\n+     * Configure {@link KafkaTemplate} object used by producers to send messages\n+     */\n+    @Bean\n+    public KafkaTemplate<String, String> kafkaTemplate() {\n+        return new KafkaTemplate<>(producerFactory());\n+    }\n+\n+    /**\n+     * Configure asynchronous event management.\n+     * Events sent by {@link KogitoDecisionTracingListener} will be handled by {@link KogitoDecisionTracingCollector}\n+     * without blocking the request handling thread.\n+     */\n+    @Bean(name = \"applicationEventMulticaster\")", "originalCommit": "a70bfe3b65c503333708954412c7d6de6d888efc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NTYzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426575634", "bodyText": "I removed this bean while refactoring the event management because I realized it was not required.", "author": "kostola", "createdAt": "2020-05-18T12:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2NTA1MA=="}], "type": "inlineReview"}, {"oid": "9506b3d1ca49161373d7c634c34b238e69ed476e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9506b3d1ca49161373d7c634c34b238e69ed476e", "message": "[KOGITO-2125] Easier event configuration and usage", "committedDate": "2020-05-18T10:04:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxOTYwNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426619604", "bodyText": "Can you please move these values to config? If we want to provide create-topic-if-not-exists we should let user decide number of partitions and replications.", "author": "danielezonca", "createdAt": "2020-05-18T13:19:38Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaAdmin;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+\n+@Configuration\n+@EnableAsync\n+public class KogitoDecisionTracingConfiguration {\n+\n+    private final String kafkaBootstrapAddress;\n+    private final String kafkaTopic;\n+\n+    public KogitoDecisionTracingConfiguration(\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.bootstrapAddress}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.topic:kogito-tracing-decision}\") String kafkaTopic\n+    ) {\n+        this.kafkaBootstrapAddress = kafkaBootstrapAddress;\n+        this.kafkaTopic = kafkaTopic;\n+    }\n+\n+    /**\n+     * Defining a {@link KafkaAdmin} bean allows to automatically add topic to the broker via {@link NewTopic} beans\n+     */\n+    @Bean\n+    public KafkaAdmin kafkaAdmin() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);\n+        return new KafkaAdmin(configs);\n+    }\n+\n+    /**\n+     * {@link NewTopic} bean to create the addon Kafka topic (if the topic already exists this is ignored)\n+     */\n+    @Bean\n+    public NewTopic newTopic() {\n+        return new NewTopic(kafkaTopic, 1, (short) 1);", "originalCommit": "26cf1b91ce6c6aad99ef24b148f718a02d106a14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNDgwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426634801", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-05-18T13:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxOTYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMTE1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426621150", "bodyText": "We should not care too much of sonarcloud metrics :)\nThis class is not testing any real business logic but just the impl. I +1 to remove it :)", "author": "danielezonca", "createdAt": "2020-05-18T13:21:42Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/test/java/org/kie/kogito/tracing/decision/KogitoDecisionTracingConfigurationTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.kafka.core.KafkaAdmin;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class KogitoDecisionTracingConfigurationTest {", "originalCommit": "26cf1b91ce6c6aad99ef24b148f718a02d106a14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNDg2OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r426634869", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-05-18T13:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyMTE1MA=="}], "type": "inlineReview"}, {"oid": "bdd1e4ef31eeae3991fc32fb27d5d25854615af2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bdd1e4ef31eeae3991fc32fb27d5d25854615af2", "message": "[KOGITO-2125] Implement decision tracing addon for Spring Boot", "committedDate": "2020-05-18T13:39:41Z", "type": "forcePushed"}, {"oid": "0a9a7b23de6b16354f9389e991622000cf3a3398", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0a9a7b23de6b16354f9389e991622000cf3a3398", "message": "[KOGITO-2125] Implement decision tracing addon for Spring Boot", "committedDate": "2020-05-18T13:41:35Z", "type": "forcePushed"}, {"oid": "60180fbe22a334d4d245225d320279fa04a75b96", "url": "https://github.com/kiegroup/kogito-runtimes/commit/60180fbe22a334d4d245225d320279fa04a75b96", "message": "[KOGITO-2125] Fix JaCoCo error on multiple classes with same FQCN in different modules", "committedDate": "2020-05-20T10:09:31Z", "type": "forcePushed"}, {"oid": "cb467f2b4ee207077019931ba485f6d7acd6c540", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cb467f2b4ee207077019931ba485f6d7acd6c540", "message": "[KOGITO-2125] Fix JaCoCo error on multiple classes with same FQCN in different modules", "committedDate": "2020-05-25T12:48:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MjcyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r429942726", "bodyText": "Not sure the formatting is correct here, can you check it, please? It is difficult to read.", "author": "MarianMacik", "createdAt": "2020-05-25T13:44:26Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingCollector.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import org.kie.kogito.tracing.decision.event.EvaluateEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SpringBootDecisionTracingCollector {\n+\n+    private final DecisionTracingCollector collector;\n+\n+    @Autowired\n+    public SpringBootDecisionTracingCollector(\n+            KafkaTemplate<String, String> template,\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-decision}\") String kafkaTopicName\n+    ) {", "originalCommit": "cb467f2b4ee207077019931ba485f6d7acd6c540", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4OTc4MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r430989780", "bodyText": "I imported the KIE ide configuration for IntelliJ and it says that the file is already properly formatted.", "author": "kostola", "createdAt": "2020-05-27T09:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MjcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzA3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r429943077", "bodyText": "Probably same here, I think that ) should be on the line before, but maybe I am wrong.", "author": "MarianMacik", "createdAt": "2020-05-25T13:45:13Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.NewTopic;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaAdmin;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.core.ProducerFactory;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+\n+@Configuration\n+@EnableAsync\n+public class SpringBootDecisionTracingConfiguration {\n+\n+    private final String kafkaBootstrapAddress;\n+    private final String kafkaTopicName;\n+    private final int kafkaTopicPartitions;\n+    private final short kafkaTopicReplicationFactor;\n+\n+    public SpringBootDecisionTracingConfiguration(\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.bootstrapAddress}\") String kafkaBootstrapAddress,\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.name:kogito-tracing-decision}\") String kafkaTopicName,\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.partitions:1}\") int kafkaTopicPartitions,\n+            @Value(value = \"${kogito.addon.tracing.decision.kafka.topic.replicationFactor:1}\") short kafkaTopicReplicationFactor\n+    ) {", "originalCommit": "cb467f2b4ee207077019931ba485f6d7acd6c540", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4OTg3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/510#discussion_r430989871", "bodyText": "I imported the KIE ide configuration for IntelliJ and it says that the file is already properly formatted.", "author": "kostola", "createdAt": "2020-05-27T09:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MzA3Nw=="}], "type": "inlineReview"}, {"oid": "acd0f696d96c17938f4692ef948d33ff4f9b46bf", "url": "https://github.com/kiegroup/kogito-runtimes/commit/acd0f696d96c17938f4692ef948d33ff4f9b46bf", "message": "[KOGITO-2125] Fix JaCoCo error on multiple classes with same FQCN in different modules", "committedDate": "2020-05-26T09:21:39Z", "type": "forcePushed"}, {"oid": "432a61b5ebe5848e88972849b9ee11fb65fda47a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/432a61b5ebe5848e88972849b9ee11fb65fda47a", "message": "[KOGITO-2125] Implement decision tracing addon for Spring Boot", "committedDate": "2020-05-27T09:41:29Z", "type": "commit"}, {"oid": "c03e674bd100058fa0be65ceeba0faca1c335cb7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c03e674bd100058fa0be65ceeba0faca1c335cb7", "message": "[KOGITO-2125] Refactor decision tracing addon detection in codegen to use a class from common module", "committedDate": "2020-05-27T09:41:29Z", "type": "commit"}, {"oid": "3a6fe06b4d621de981373c82e42b9dff432249b7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3a6fe06b4d621de981373c82e42b9dff432249b7", "message": "[KOGITO-2125] Fix JaCoCo error on multiple classes with same FQCN in different modules", "committedDate": "2020-05-27T09:41:29Z", "type": "commit"}, {"oid": "3a6fe06b4d621de981373c82e42b9dff432249b7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3a6fe06b4d621de981373c82e42b9dff432249b7", "message": "[KOGITO-2125] Fix JaCoCo error on multiple classes with same FQCN in different modules", "committedDate": "2020-05-27T09:41:29Z", "type": "forcePushed"}]}