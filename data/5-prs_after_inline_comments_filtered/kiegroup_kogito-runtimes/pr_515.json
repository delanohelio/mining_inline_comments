{"pr_number": 515, "pr_title": "KOGITO-2181 DMN decision service single output decision coercion", "pr_createdAt": "2020-05-18T16:45:15Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/515", "timeline": [{"oid": "4ffbb99d3e957669938461d71a4264b033fffc78", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4ffbb99d3e957669938461d71a4264b033fffc78", "message": "KOGITO-2181 DMN decision service single output decision coercion", "committedDate": "2020-05-18T16:43:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjI2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427142268", "bodyText": "not sure if this method is in use", "author": "hellowdan", "createdAt": "2020-05-19T08:58:47Z", "path": "kogito-codegen/src/main/resources/class-templates/DMNRestResourceTemplate.java", "diffHunk": "@@ -33,7 +40,31 @@ public Object dmn(java.util.Map<String, Object> variables) {\n \n     private Object extractContextIfSucceded(DMNResult result){\n         if (!result.hasErrors()) {\n-            return result.getDmnContext();\n+            try {\n+                return objectMapper.writeValueAsString(result.getDmnContext());\n+            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            throw new DMNEvaluationErrorException(result);\n+        }\n+    }\n+    \n+    private static final com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper()\n+            .registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule())\n+            .registerModule(new com.fasterxml.jackson.databind.module.SimpleModule()\n+                            .addSerializer(org.kie.dmn.feel.lang.types.impl.ComparablePeriod.class,\n+                                           new org.kie.kogito.dmn.rest.DMNFEELComparablePeriodSerializer()))\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n+            .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS);\n+\n+    private Object extractSingletonDSIfSucceded(DMNResult result) {", "originalCommit": "4ffbb99d3e957669938461d71a4264b033fffc78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjAyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427152025", "bodyText": "yes I confirm it is once codegenerated", "author": "tarilabs", "createdAt": "2020-05-19T09:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MjI2OA=="}], "type": "inlineReview"}, {"oid": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1ffcf85b089af1e3de3febf256c7d924b86e5c1b", "message": "implement SB integration tests with maven-invoker-plugin", "committedDate": "2020-05-19T13:30:37Z", "type": "commit"}, {"oid": "670919420d362d04844619a908ee1c568f0952ee", "url": "https://github.com/kiegroup/kogito-runtimes/commit/670919420d362d04844619a908ee1c568f0952ee", "message": ".", "committedDate": "2020-05-19T14:08:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTY5OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427319699", "bodyText": "I would prefer to Disabled it instead of comment it out. It will be easier to forget it. Wdyt?", "author": "danielezonca", "createdAt": "2020-05-19T13:53:44Z", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/DSCoercionTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class DSCoercionTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testWholeModel() {\n+        given()\n+               .contentType(ContentType.JSON)\n+           .when()\n+               .post(\"/DScoercion\")\n+           .then()\n+               .statusCode(200)\n+               .body(\"n\", is(47))\n+               .body(\"s\", is(\"Hello, World\"))\n+               .body(\"b\", is(true))\n+               .body(\"d\", is(\"2020-05-18\")) // as JSON is not schema aware, here we assert the RAW string\n+               .body(\"t\", is(\"12:34:56\"))\n+               .body(\"dt\", is(\"2020-05-18T12:34:56\"))\n+               // DROOLS-5344 .body(\"ymd\", is(\"P3Y\"))\n+               .body(\"dtd\", is(\"PT1H\"));\n+    }\n+\n+    @Test\n+    public void testDSn() {\n+        Number DSn = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSn\")\n+                            .getBody().as(Number.class);\n+        assertThat(DSn, is(47));\n+    }\n+\n+    @Test\n+    public void testDSs() {\n+        String DSs = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSs\")\n+                            .getBody().asString();\n+        assertThat(DSs, is(\"\\\"Hello, World\\\"\")); // we want to be sure the RAW response is a JSONValue string literal, ref http://ecma-international.org/ecma-262/5.1/#sec-15.12\n+    }\n+\n+    @Test\n+    public void testDSb() {\n+        Boolean DSb = given().contentType(ContentType.JSON)\n+                            .when()\n+                             .post(\"/DScoercion/DSb\")\n+                            .getBody().as(Boolean.class);\n+        assertThat(DSb, is(true));\n+    }\n+\n+    @Test\n+    public void testDSd() {\n+        LocalDate DSd = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSd\")\n+                               .getBody().as(LocalDate.class);\n+        assertThat(DSd, is(LocalDate.of(2020, 5, 18)));\n+    }\n+\n+    @Test\n+    public void testDSt() {\n+        LocalTime DSt = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSt\")\n+                               .getBody().as(LocalTime.class);\n+        assertThat(DSt, is(LocalTime.of(12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdt() {\n+        LocalDateTime DSdt = given().contentType(ContentType.JSON)\n+                                    .when()\n+                                    .post(\"/DScoercion/DSdt\")\n+                                    .getBody().as(LocalDateTime.class);\n+        assertThat(DSdt, is(LocalDateTime.of(2020, 5, 18, 12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdtd() {\n+        Duration DSdtd = given().contentType(ContentType.JSON)\n+                                .when()\n+                                .post(\"/DScoercion/DSdtd\")\n+                                .getBody().as(Duration.class);\n+        assertThat(DSdtd, is(Duration.parse(\"PT1H\")));\n+    }\n+\n+    // DROOLS-5344", "originalCommit": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTE2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427389168", "bodyText": "done", "author": "tarilabs", "createdAt": "2020-05-19T15:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTc2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427319762", "bodyText": "I would prefer to Disabled it instead of comment it out. It will be easier to forget it. Wdyt?", "author": "danielezonca", "createdAt": "2020-05-19T13:53:49Z", "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/DSCoercionTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@QuarkusTest\n+public class DSCoercionTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testWholeModel() {\n+        given()\n+               .contentType(ContentType.JSON)\n+           .when()\n+               .post(\"/DScoercion\")\n+           .then()\n+               .statusCode(200)\n+               .body(\"n\", is(47))\n+               .body(\"s\", is(\"Hello, World\"))\n+               .body(\"b\", is(true))\n+               .body(\"d\", is(\"2020-05-18\")) // as JSON is not schema aware, here we assert the RAW string\n+               .body(\"t\", is(\"12:34:56\"))\n+               .body(\"dt\", is(\"2020-05-18T12:34:56\"))\n+               // DROOLS-5344 .body(\"ymd\", is(\"P3Y\"))\n+               .body(\"dtd\", is(\"PT1H\"));\n+    }\n+\n+    @Test\n+    public void testDSn() {\n+        Number DSn = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSn\")\n+                            .getBody().as(Number.class);\n+        assertThat(DSn, is(47));\n+    }\n+\n+    @Test\n+    public void testDSs() {\n+        String DSs = given().contentType(ContentType.JSON)\n+                            .when()\n+                            .post(\"/DScoercion/DSs\")\n+                            .getBody().asString();\n+        assertThat(DSs, is(\"\\\"Hello, World\\\"\")); // we want to be sure the RAW response is a JSONValue string literal, ref http://ecma-international.org/ecma-262/5.1/#sec-15.12\n+    }\n+\n+    @Test\n+    public void testDSb() {\n+        Boolean DSb = given().contentType(ContentType.JSON)\n+                            .when()\n+                             .post(\"/DScoercion/DSb\")\n+                            .getBody().as(Boolean.class);\n+        assertThat(DSb, is(true));\n+    }\n+\n+    @Test\n+    public void testDSd() {\n+        LocalDate DSd = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSd\")\n+                               .getBody().as(LocalDate.class);\n+        assertThat(DSd, is(LocalDate.of(2020, 5, 18)));\n+    }\n+\n+    @Test\n+    public void testDSt() {\n+        LocalTime DSt = given().contentType(ContentType.JSON)\n+                               .when()\n+                               .post(\"/DScoercion/DSt\")\n+                               .getBody().as(LocalTime.class);\n+        assertThat(DSt, is(LocalTime.of(12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdt() {\n+        LocalDateTime DSdt = given().contentType(ContentType.JSON)\n+                                    .when()\n+                                    .post(\"/DScoercion/DSdt\")\n+                                    .getBody().as(LocalDateTime.class);\n+        assertThat(DSdt, is(LocalDateTime.of(2020, 5, 18, 12, 34, 56)));\n+    }\n+\n+    @Test\n+    public void testDSdtd() {\n+        Duration DSdtd = given().contentType(ContentType.JSON)\n+                                .when()\n+                                .post(\"/DScoercion/DSdtd\")\n+                                .getBody().as(Duration.class);\n+        assertThat(DSdtd, is(Duration.parse(\"PT1H\")));\n+    }\n+\n+    // DROOLS-5344", "originalCommit": "1ffcf85b089af1e3de3febf256c7d924b86e5c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTIzOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/515#discussion_r427389239", "bodyText": "done", "author": "tarilabs", "createdAt": "2020-05-19T15:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxOTc2Mg=="}], "type": "inlineReview"}, {"oid": "33c97bd046f491284de9699546a45be3599c7176", "url": "https://github.com/kiegroup/kogito-runtimes/commit/33c97bd046f491284de9699546a45be3599c7176", "message": "implement codereview feedback", "committedDate": "2020-05-19T15:19:34Z", "type": "commit"}, {"oid": "e746cd052c8ab1f944c540f62d97ef30f91b1515", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e746cd052c8ab1f944c540f62d97ef30f91b1515", "message": "...", "committedDate": "2020-05-20T15:12:28Z", "type": "commit"}]}