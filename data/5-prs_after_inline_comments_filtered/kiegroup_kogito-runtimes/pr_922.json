{"pr_number": 922, "pr_title": "[KOGITO-3974] Make DecisionModels and PredictionModels injectable", "pr_createdAt": "2020-12-07T17:54:49Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/922", "timeline": [{"oid": "706005c407df0f5f3261d82cc688ffd3a45fe3c4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/706005c407df0f5f3261d82cc688ffd3a45fe3c4", "message": "[KOGITO-3974] PredictionModels and DecisionModels are now using templates + Created AbstractPredictionModels and AbstractDecisionModels with common code", "committedDate": "2020-12-07T17:48:27Z", "type": "commit"}, {"oid": "ccc8b2778a2094e23cc5f739e69277481daf6355", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ccc8b2778a2094e23cc5f739e69277481daf6355", "message": "[KOGITO-3974] Revert ApplicationContainerGenerator changes and postpone ApplicationTemplate to a different PR", "committedDate": "2020-12-09T09:26:53Z", "type": "commit"}, {"oid": "0b300a420b7fd675c3ef785d8611759c23aaefba", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0b300a420b7fd675c3ef785d8611759c23aaefba", "message": "[KOGITO-3974] Fix missing conf use case", "committedDate": "2020-12-09T10:54:54Z", "type": "commit"}, {"oid": "2c60dcc1182311a4f0fa990d8e6b5fc98a5b57b5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2c60dcc1182311a4f0fa990d8e6b5fc98a5b57b5", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject", "committedDate": "2020-12-09T18:32:54Z", "type": "commit"}, {"oid": "6756417b267b2b9e3ce52383983dc20b241e203e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6756417b267b2b9e3ce52383983dc20b241e203e", "message": "[KOGITO-3974] Fix test", "committedDate": "2020-12-09T18:49:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3NjgwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539976801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static boolean IS_NATIVE_IMAGE = System.getProperty(\"org.graalvm.nativeimage.imagecode\") != null;\n          \n          \n            \n                private final static boolean IS_NATIVE_IMAGE = org.kie.dmn.feel.util.ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD;", "author": "tarilabs", "createdAt": "2020-12-10T08:41:05Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/AbstractDecisionModels.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.dmn;\n+\n+import org.kie.dmn.api.core.DMNRuntime;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.ExecutionIdSupplier;\n+import org.kie.kogito.decision.DecisionModels;\n+\n+public abstract class AbstractDecisionModels implements DecisionModels {\n+\n+    private final static boolean IS_NATIVE_IMAGE = System.getProperty(\"org.graalvm.nativeimage.imagecode\") != null;", "originalCommit": "6756417b267b2b9e3ce52383983dc20b241e203e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMjYxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540122611", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-12-10T12:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3NjgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3ODI4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539978284", "bodyText": "isn't this \"pattern\" which I see repeated for processes and rules, a sympthom we don't have a clear API design at the Kogito platform level?", "author": "tarilabs", "createdAt": "2020-12-10T08:43:19Z", "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.decision.DecisionModels;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectDecisionModels {\n+\n+    @Inject\n+    public InjectDecisionModels(DecisionModels decisionModels, Application application) {\n+        if(decisionModels != application.decisionModels()) {\n+            throw new IllegalStateException(\"DecisionModels should be injectable and same instance application.decisionModels()\");", "originalCommit": "6756417b267b2b9e3ce52383983dc20b241e203e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NTIwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540085201", "bodyText": "You are probably right: we generate classes using templates it is easy to remove an annotation and breaks without an integration tests that test it. I don't know if we can enforce this at API/design level to be honest \ud83e\udd14\nAny idea/suggestion?", "author": "danielezonca", "createdAt": "2020-12-10T11:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3ODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MzYwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540373605", "bodyText": "No I don't think this is solvable within the scope of this PR.\nI'm saying this sounded to me a symptom the design of the Kogito API has a problem.", "author": "tarilabs", "createdAt": "2020-12-10T17:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3ODI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTIxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539979212", "bodyText": "I'm not sure I get this change, can you explain please?", "author": "tarilabs", "createdAt": "2020-12-10T08:44:44Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/ApplicationContainerGenerator.java", "diffHunk": "@@ -73,8 +74,10 @@ public CompilationUnit getCompilationUnitOrThrow() {\n                         templatePath(),\n                         \"Compilation unit doesn't contain a class or interface declaration!\"));\n \n-        for (String section : sections) {\n-            replaceSectionPlaceHolder(cls, section);\n+        if (annotator == null) {\n+            for (String section : sections) {\n+                replaceSectionPlaceHolder(cls, section);\n+            }", "originalCommit": "6756417b267b2b9e3ce52383983dc20b241e203e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4NzM1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540087358", "bodyText": "If you look at *ApplicationTemplates files there was a \"replacement\" pattern like\nthis.process = null /* $Processes$ */; -> this.process = new Processes(this);\nNow that all the models are injectable this is no more needed except for the scenario with annotator == null (no Quarkus/Spring) so I decided to make this explicit and skip the replacement in this case", "author": "danielezonca", "createdAt": "2020-12-10T11:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NDQ5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540374493", "bodyText": "thanks for the feedback; worthy of adding it as a // <code comment>?", "author": "tarilabs", "createdAt": "2020-12-10T17:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4NDI1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540784253", "bodyText": "Done \ud83d\udc4d", "author": "danielezonca", "createdAt": "2020-12-11T08:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3OTIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzEzOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r539983139", "bodyText": "since this change, and others below, shouldn't that reflect also on ALL the ...CompilationProvider classes??", "author": "tarilabs", "createdAt": "2020-12-10T08:50:42Z", "path": "kogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "diffHunk": "@@ -192,7 +193,7 @@ public void generateModel() throws IOException {\n                 new ApplicationGenerator(\n                         appPackageName,\n                         new File(appPaths.getFirstProjectPath().toFile(), \"target\"))\n-                        .withDependencyInjection(new CDIDependencyInjectionAnnotator())\n+                        .withDependencyInjection(dependencyInjectionAnnotator)", "originalCommit": "6756417b267b2b9e3ce52383983dc20b241e203e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA4ODczNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540088736", "bodyText": "Sorry but I don't understand what do you mean. I just created a local variable instead of instantiate multiple times  CDIDependencyInjectionAnnotator.\nCan you please clarify your comment?", "author": "danielezonca", "createdAt": "2020-12-10T11:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MjY5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540372694", "bodyText": "I believe you did it with 574cf92", "author": "tarilabs", "createdAt": "2020-12-10T17:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3MzA4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540373084", "bodyText": "do other classes of ...CompilationProvider need this too?", "author": "tarilabs", "createdAt": "2020-12-10T17:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4NTMzMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540785333", "bodyText": "Thanks a lot for the comment, I reviewed the usages and I realized that all Generators have a setDependencyInjection that is automatically provided by ApplicationGenerator during the initialization so updated the code to use that one", "author": "danielezonca", "createdAt": "2020-12-11T08:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4MzEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNzg5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540007891", "bodyText": "@danielezonca\nMaybe just a leftover, but I guess better to use directly \"kieRuntimeFactoryFunction\" instead of the getter method.\nBeside that, as a side note, there is not null check/NPE protection.\nWould it be possible to put the \"kieRuntimeFactoryFunction\" in the constructor ?\nI see the setter is called in the template\npublic PredictionModels() { super(); setKieRuntimeFactoryFunction(sKieRuntimeFactoryFunction); } \nso - unless for other reasons - it would just be a matter of moving \"sKieRuntimeFactoryFunction\" inside the \"super\" invocation.", "author": "gitgabrio", "createdAt": "2020-12-10T09:26:40Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.kogito.prediction.PredictionModels;\n+\n+import java.util.function.Function;\n+\n+public abstract class AbstractPredictionModels implements PredictionModels {\n+\n+    private java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+\n+    public org.kie.kogito.prediction.PredictionModel getPredictionModel(java.lang.String modelName) {\n+        return new org.kie.kogito.pmml.PmmlPredictionModel(getPMMLRuntime(modelName), modelName);\n+    }\n+\n+    protected Function<String, KieRuntimeFactory> getKieRuntimeFactoryFunction() {\n+        return kieRuntimeFactoryFunction;\n+    }\n+\n+    protected void setKieRuntimeFactoryFunction(Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction) {\n+        this.kieRuntimeFactoryFunction = kieRuntimeFactoryFunction;\n+    }\n+\n+    private org.kie.pmml.api.runtime.PMMLRuntime getPMMLRuntime(java.lang.String modelName) {\n+        return getKieRuntimeFactoryFunction().apply(modelName).get(org.kie.pmml.api.runtime.PMMLRuntime.class);", "originalCommit": "6756417b267b2b9e3ce52383983dc20b241e203e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyOTkyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540129923", "bodyText": "Done, I reviewed all the templates and now ~all the code is inside the abstract \ud83d\udc4d", "author": "danielezonca", "createdAt": "2020-12-10T12:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAwNzg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxMzc0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540013741", "bodyText": "@danielezonca\nIf I'm not wrong, elsewhere in the code we have a strict naming convention.\nAs far as I see all this templates have the same schema: {context}{base model template} where \"context\" is \"Cdi\" or \"Spring\" and \"base model template\" is (for example) \"PredictionModelsTemplate\".\nWould not be easier to just pass the latter (e.g. \"PredictionModelsTemplate\") to the \"TemplatedGenerator\", and have it infer the Cdi/Spring ones ? This would also enforce consistence between models, that is a good thing (IMHO).\nBeside that, the only differences I see in the \"models\" templates, between different contexts, are the annotations on the class declaration (Cdi vs Spring ones). If/where this is true, I think it would be much better to remove all that useless duplications, have a \"plain\" template, and use JavaParser to dynamically add required annotation (Cdi/Spring) when needed.\nAll those templates are pretty cumbersome; whenever a modification is needed, it must be done twice; and, after all, they not really needed (again, IMVHO)", "author": "gitgabrio", "createdAt": "2020-12-10T09:34:33Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionModelsGenerator.java", "diffHunk": "@@ -30,60 +26,87 @@\n import com.github.javaparser.ast.stmt.Statement;\n import org.kie.kogito.codegen.AbstractApplicationSection;\n import org.kie.kogito.codegen.AddonsConfig;\n+import org.kie.kogito.codegen.InvalidTemplateException;\n+import org.kie.kogito.codegen.TemplatedGenerator;\n+import org.kie.kogito.codegen.di.DependencyInjectionAnnotator;\n import org.kie.kogito.prediction.PredictionModels;\n \n+import java.util.List;\n+\n public class PredictionModelsGenerator extends AbstractApplicationSection {\n \n-    private static final String TEMPLATE_JAVA = \"/class-templates/PredictionModelsTemplate.java\";\n+    private static final String RESOURCE = \"/class-templates/PredictionModelsTemplate.java\";\n+    private static final String RESOURCE_CDI = \"/class-templates/CdiPredictionModelsTemplate.java\";\n+    private static final String RESOURCE_SPRING = \"/class-templates/spring/SpringPredictionModelsTemplate.java\";\n+    private static final String SECTION_CLASS_NAME = \"PredictionModels\";\n \n-    private static final RuntimeException MODIFIED_TEMPLATE_EXCEPTION =\n-            new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\");\n-    final List<PMMLResource> resources;\n-    final String applicationCanonicalName;\n-    AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n-    final List<String> predictionRulesMapperClasses = new ArrayList<>();\n+    protected final List<PMMLResource> resources;\n+    protected final String applicationCanonicalName;\n+    protected AddonsConfig addonsConfig = AddonsConfig.DEFAULT;\n+    protected final TemplatedGenerator templatedGenerator;\n \n-    public PredictionModelsGenerator(String applicationCanonicalName, List<PMMLResource> resources) {\n-        super(\"PredictionModels\", \"predictionModels\", PredictionModels.class);\n+    public PredictionModelsGenerator(String packageName, String applicationCanonicalName, List<PMMLResource> resources) {\n+        super(SECTION_CLASS_NAME, \"predictionModels\", PredictionModels.class);\n         this.applicationCanonicalName = applicationCanonicalName;\n         this.resources = resources;\n+\n+        this.templatedGenerator = new TemplatedGenerator(\n+                packageName,\n+                SECTION_CLASS_NAME,", "originalCommit": "6756417b267b2b9e3ce52383983dc20b241e203e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMDA4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540130086", "bodyText": "Done, I reviewed all the templates and now ~all the code is inside the abstract \ud83d\udc4d", "author": "danielezonca", "createdAt": "2020-12-10T12:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxMzc0MQ=="}], "type": "inlineReview"}, {"oid": "34c72010322a151e39c635f70bc36b19a6ef87cc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/34c72010322a151e39c635f70bc36b19a6ef87cc", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject", "committedDate": "2020-12-10T10:48:57Z", "type": "commit"}, {"oid": "2e24f8c9e4112069783e4b58c4be11cb6cff4cdb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e24f8c9e4112069783e4b58c4be11cb6cff4cdb", "message": "[KOGITO-3974] Reviewed DecisionModels/PredictionModels templates to move all the code to abstract", "committedDate": "2020-12-10T12:17:39Z", "type": "commit"}, {"oid": "2e8130a635412afe82873d36750533f2c41133f4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e8130a635412afe82873d36750533f2c41133f4", "message": "[KOGITO-3974] Fix test", "committedDate": "2020-12-10T13:13:06Z", "type": "commit"}, {"oid": "21e6d6f868f9f869746263e9f8c0c9f3fa104b37", "url": "https://github.com/kiegroup/kogito-runtimes/commit/21e6d6f868f9f869746263e9f8c0c9f3fa104b37", "message": "[KOGITO-3975] Minor", "committedDate": "2020-12-10T13:46:10Z", "type": "commit"}, {"oid": "574cf923f0cce1da08ea0675c4a8ab3c9c0d8cea", "url": "https://github.com/kiegroup/kogito-runtimes/commit/574cf923f0cce1da08ea0675c4a8ab3c9c0d8cea", "message": "Fix DMN hot reload", "committedDate": "2020-12-10T17:44:14Z", "type": "commit"}, {"oid": "2a46411d39a7ea54008dd3956910383ead6ad619", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2a46411d39a7ea54008dd3956910383ead6ad619", "message": "Moved packageName, annotator and addonsConfig to AbstractGenerator + Renamed ApplicationGenerator.withGenerator as ApplicationGenerator.registerAndInitGenerator", "committedDate": "2020-12-11T08:46:49Z", "type": "commit"}, {"oid": "ece772c26ad38bfe561a46cea8b3ec0fdbe9e599", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ece772c26ad38bfe561a46cea8b3ec0fdbe9e599", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject", "committedDate": "2020-12-11T08:47:14Z", "type": "commit"}, {"oid": "3769ea2644548e7e397cb39ee229c316bd759a2c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3769ea2644548e7e397cb39ee229c316bd759a2c", "message": "Added comment", "committedDate": "2020-12-11T08:49:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MjI0MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540782241", "bodyText": "@danielezonca\nNice refactoring. Out of curiosity: is it needed for this method to be \"static\" ? I see it invoked inside a constructor", "author": "gitgabrio", "createdAt": "2020-12-11T08:45:54Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -14,28 +14,27 @@\n  */\n package org.kie.kogito.pmml;\n \n-import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionModels;\n \n-import java.util.function.Function;\n-\n public abstract class AbstractPredictionModels implements PredictionModels {\n \n-    private java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+    public static java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n \n-    public org.kie.kogito.prediction.PredictionModel getPredictionModel(java.lang.String modelName) {\n-        return new org.kie.kogito.pmml.PmmlPredictionModel(getPMMLRuntime(modelName), modelName);\n-    }\n+    protected static void init(String ... pmmlFiles) {", "originalCommit": "2e24f8c9e4112069783e4b58c4be11cb6cff4cdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4NzY3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540787673", "bodyText": "It is not invoked inside the constructor but with a static block (i.e. link)", "author": "danielezonca", "createdAt": "2020-12-11T08:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MjI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4ODg5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r540788893", "bodyText": "Thx, misread \ud83d\udc4d", "author": "gitgabrio", "createdAt": "2020-12-11T08:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4MjI0MQ=="}], "type": "inlineReview"}, {"oid": "b5212fe6aa74496f83876e6b009d6ffe5825cc4c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b5212fe6aa74496f83876e6b009d6ffe5825cc4c", "message": "Fix tests", "committedDate": "2020-12-11T10:28:05Z", "type": "commit"}, {"oid": "ab6757ed87ee6dfb7907f3f22e2848dc5b3f7fb1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ab6757ed87ee6dfb7907f3f22e2848dc5b3f7fb1", "message": "Revert ApplicationGenerator.registerAndInitGenerator to ApplicationGenerator.withGenerator", "committedDate": "2020-12-11T11:13:08Z", "type": "commit"}, {"oid": "efd7579ee1a6c32b84a6ec1a3db9fb28af7e0177", "url": "https://github.com/kiegroup/kogito-runtimes/commit/efd7579ee1a6c32b84a6ec1a3db9fb28af7e0177", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject\n\n# Conflicts:\n#\tkogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionCodegen.java\n#\tkogito-codegen/src/main/java/org/kie/kogito/codegen/rules/IncrementalRuleCodegen.java", "committedDate": "2020-12-11T13:34:02Z", "type": "commit"}, {"oid": "9c94782d5455c081bfdfd09b93ea1682572d7655", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9c94782d5455c081bfdfd09b93ea1682572d7655", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject\n\n# Conflicts:\n#\tkogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java\n#\tkogito-quarkus-extension/deployment/src/main/java/org/kie/kogito/quarkus/deployment/KogitoAssetsProcessor.java", "committedDate": "2020-12-11T17:41:55Z", "type": "commit"}, {"oid": "e9ae5bd440ea96f8b43bcdbd7bf004f77ccf00ec", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9ae5bd440ea96f8b43bcdbd7bf004f77ccf00ec", "message": "Postponing moduleGenerator initialization when used (compilationUnit() module) + ApplicationSection.classDeclaration renamed compilationUnit to return the whole template", "committedDate": "2020-12-11T17:50:43Z", "type": "commit"}, {"oid": "45b250167be698163d1bc9c608d24da4df13aac2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/45b250167be698163d1bc9c608d24da4df13aac2", "message": "Minor fixes", "committedDate": "2020-12-11T19:02:02Z", "type": "commit"}, {"oid": "de56f00f83a8fb69f677b4a05c26a75b73554106", "url": "https://github.com/kiegroup/kogito-runtimes/commit/de56f00f83a8fb69f677b4a05c26a75b73554106", "message": "Introduced static AtomicReference in AbstractPredictionModels to make DMN+PMML integration works even if DecisionModels is loaded first + Fix native-image check", "committedDate": "2020-12-14T08:26:51Z", "type": "commit"}, {"oid": "6333968f476681bde3421f71b143573b68e42f37", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6333968f476681bde3421f71b143573b68e42f37", "message": "Merge remote-tracking branch 'upstream/master' into decisionmodels-predictionmodels-inject", "committedDate": "2020-12-14T08:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMzI0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542213249", "bodyText": "@danielezonca\nFine if it works.\nAnyway, all that still look as a painful workaround related to https://issues.redhat.com/browse/DROOLS-5724.\nIf I'm not wrong it all depends on the fact that DMN requires PMML for validation at building time (inside its Kogito-specific builder) even if NULL (as currently is), while model validation should be managed in previous step and should be model specific.", "author": "gitgabrio", "createdAt": "2020-12-14T08:57:42Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -14,20 +14,27 @@\n  */\n package org.kie.kogito.pmml;\n \n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieRuntimeFactory;\n import org.kie.kogito.prediction.PredictionModels;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n \n public abstract class AbstractPredictionModels implements PredictionModels {\n \n-    public static java.util.function.Function<String, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactoryFunction;\n+    private static final AtomicReference<Function<String, KieRuntimeFactory>> functionReference = new AtomicReference<>();\n+    public static final Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = s -> functionReference.get().apply(s);\n \n     protected static void init(String ... pmmlFiles) {\n-        final java.util.Map<org.kie.api.KieBase, org.kie.api.runtime.KieRuntimeFactory> kieRuntimeFactories = org.kie.kogito.pmml.PMMLKogito.createKieRuntimeFactories(pmmlFiles);\n-        kieRuntimeFactoryFunction = s -> kieRuntimeFactories.keySet().stream()\n-                .filter(kieBase -> org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils.getModel(kieBase, s).isPresent())\n+        final java.util.Map<KieBase, KieRuntimeFactory> kieRuntimeFactories = PMMLKogito.createKieRuntimeFactories(pmmlFiles);\n+        final Function<String, KieRuntimeFactory> function = s -> kieRuntimeFactories.keySet().stream()", "originalCommit": "de56f00f83a8fb69f677b4a05c26a75b73554106", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxNjE0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542216148", "bodyText": "If I'm not wrong it all depends on the fact that DMN requires PMML for validation at building time\n\nThis assessment is incorrect.\nThis was already explained in the JIRA history (ref https://issues.redhat.com/browse/DROOLS-5724?focusedCommentId=15374787&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-15374787 ) and followed up with the Kogito leads responsible for the previous Vs current directives.\nYes DMN internals will be refactored as part of DROOLS-5724 anyway.", "author": "tarilabs", "createdAt": "2020-12-14T09:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1MDI5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542250294", "bodyText": "I added a comment to explain the reason of the AtomicReference. I tested it both jvm and native mode so we have the possibility to approach other refactoring incrementally without block this PR", "author": "danielezonca", "createdAt": "2020-12-14T09:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIxMzI0OQ=="}], "type": "inlineReview"}, {"oid": "ec597cdb8e2299368064b06fa16a4097bc23f239", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ec597cdb8e2299368064b06fa16a4097bc23f239", "message": "Added comment to clarify", "committedDate": "2020-12-14T09:07:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjQ5OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542302499", "bodyText": "DecisionModels should be injectable and same instance application.decisionModels() - probably same instance as application.decisionModels()?", "author": "MarianMacik", "createdAt": "2020-12-14T11:11:39Z", "path": "integration-tests/integration-tests-quarkus-decisions/src/main/java/org/kie/kogito/integrationtests/InjectDecisionModels.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.decision.DecisionModels;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectDecisionModels {\n+\n+    @Inject\n+    public InjectDecisionModels(DecisionModels decisionModels, Application application) {\n+        if(decisionModels != application.decisionModels()) {\n+            throw new IllegalStateException(\"DecisionModels should be injectable and same instance application.decisionModels()\");", "originalCommit": "ec597cdb8e2299368064b06fa16a4097bc23f239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNTcxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542415717", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-12-14T14:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjcyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542302723", "bodyText": "Same here.", "author": "MarianMacik", "createdAt": "2020-12-14T11:12:02Z", "path": "integration-tests/integration-tests-quarkus-predictions/src/main/java/org/kie/kogito/integrationtests/InjectPredictionModels.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.prediction.PredictionModels;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectPredictionModels {\n+\n+    @Inject\n+    public InjectPredictionModels(PredictionModels predictionModels, Application application) {\n+        if(predictionModels != application.predictionModels()) {\n+            throw new IllegalStateException(\"PredictionModels should be injectable and same instance application.predictionModels()\");", "originalCommit": "ec597cdb8e2299368064b06fa16a4097bc23f239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNTk0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542415949", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-12-14T14:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjk0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542302947", "bodyText": "And here.", "author": "MarianMacik", "createdAt": "2020-12-14T11:12:24Z", "path": "integration-tests/integration-tests-quarkus-processes/src/main/java/org/kie/kogito/integrationtests/InjectProcesses.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests;\n+\n+import io.quarkus.runtime.Startup;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.process.Processes;\n+\n+import javax.inject.Inject;\n+\n+@Startup\n+public class InjectProcesses {\n+\n+    @Inject\n+    public InjectProcesses(Processes processes, Application application) {\n+        if(processes != application.processes()) {\n+            throw new IllegalStateException(\"Processes should be injectable and same instance application.processes()\");", "originalCommit": "ec597cdb8e2299368064b06fa16a4097bc23f239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNTkyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542415929", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-12-14T14:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwMjk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzk1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542307952", "bodyText": "I know that generated code probably shouldn't be readable that much, but wouldn't it be better to leave the imports here to make it cleaner? If the class is moved in future to a different package, we will have to change the templates anyway.", "author": "MarianMacik", "createdAt": "2020-12-14T11:20:35Z", "path": "kogito-codegen/src/main/resources/class-templates/CdiApplicationTemplate.java", "diffHunk": "@@ -1,30 +1,16 @@\n package $Package$;\n \n-import org.kie.kogito.Config;\n-import org.kie.kogito.StaticApplication;\n-import org.kie.kogito.process.Processes;\n-import org.kie.kogito.rules.RuleUnits;\n-\n @javax.inject.Singleton\n-public class Application extends StaticApplication {\n+public class Application extends org.kie.kogito.StaticApplication {", "originalCommit": "ec597cdb8e2299368064b06fa16a4097bc23f239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyMTAzNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542421036", "bodyText": "In general I prefer to be on the safe side with templates: when we add code to the template it could produce name clashing while with FQCN this should not happen. Btw no strong opinion, if you prefer I can revert", "author": "danielezonca", "createdAt": "2020-12-14T14:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyODk5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542428995", "bodyText": "Makes sense, thanks!", "author": "MarianMacik", "createdAt": "2020-12-14T14:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMwNzk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNDA5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542314093", "bodyText": "So the static block is used because of the CDI as we have to have a no-arg constructor? (Otherwise we would use just parameters of the constructor...)", "author": "MarianMacik", "createdAt": "2020-12-14T11:31:09Z", "path": "drools/kogito-pmml/src/main/java/org/kie/kogito/pmml/AbstractPredictionModels.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.pmml;\n+\n+import org.kie.api.KieBase;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.kogito.prediction.PredictionModels;\n+import org.kie.pmml.evaluator.core.utils.KnowledgeBaseUtils;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+\n+public abstract class AbstractPredictionModels implements PredictionModels {\n+\n+    // This AtomicReference is needed to have a deterministic/stable value for kieRuntimeFactoryFunction.\n+    // DecisionModels statically refers kieRuntimeFactoryFunction but it can be loaded before PredictionModels (it depends\n+    // on dependency injection container initialisation) so it is not possible to make an assumption on the order.\n+    // It can be probably removed (and make kieRuntimeFactoryFunction private) after resolving https://issues.redhat.com/browse/DROOLS-5724\n+    private static final AtomicReference<Function<String, KieRuntimeFactory>> functionReference = new AtomicReference<>();\n+    public static final Function<String, KieRuntimeFactory> kieRuntimeFactoryFunction = s -> functionReference.get().apply(s);\n+\n+    protected static void init(String ... pmmlFiles) {", "originalCommit": "ec597cdb8e2299368064b06fa16a4097bc23f239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2MDk2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/922#discussion_r542360961", "bodyText": "No here the problem is that both DMN and PMML has some static code to be executed to load files. This is a trick for native compilation (and avoid parsing at runtime). So instead of duplicate this static code in all the templates, I moved it to the abstract class and created this init static method that is invoked in a static block codegenerated with the arguments.", "author": "danielezonca", "createdAt": "2020-12-14T12:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxNDA5Mw=="}], "type": "inlineReview"}, {"oid": "46e837b60769ffc4e7ddb1bfb19a40201298cc76", "url": "https://github.com/kiegroup/kogito-runtimes/commit/46e837b60769ffc4e7ddb1bfb19a40201298cc76", "message": "Fix DecisionModels when there are no prediction", "committedDate": "2020-12-14T12:59:52Z", "type": "commit"}]}