{"pr_number": 720, "pr_title": "KOGITO-2914: connect Trusty service and Explainability service", "pr_createdAt": "2020-08-24T17:25:39Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/720", "timeline": [{"oid": "3b21b91df494c329e7e9ccaea9c34899553e9398", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3b21b91df494c329e7e9ccaea9c34899553e9398", "message": "KOGITO-2914: add tracing-typedvalue-api module", "committedDate": "2020-08-24T15:04:13Z", "type": "commit"}, {"oid": "38d0fe699f7acb46c0b9c0257786dbe29d679af9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/38d0fe699f7acb46c0b9c0257786dbe29d679af9", "message": "KOGITO-2914: renaming classes in tracing-typedvalue-api", "committedDate": "2020-08-24T15:04:13Z", "type": "commit"}, {"oid": "1284d8d8078c601c8c72c7776aa273de41e27327", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1284d8d8078c601c8c72c7776aa273de41e27327", "message": "Refactored predict-api as explainability addon + accept batch requests", "committedDate": "2020-08-24T15:04:13Z", "type": "commit"}, {"oid": "8ade91d587e5ca7a03ae6588791feb544a4a0220", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8ade91d587e5ca7a03ae6588791feb544a4a0220", "message": "KOGITO-2914: rename tracing-typedvalue-api to typedvalue-api", "committedDate": "2020-08-24T15:04:13Z", "type": "commit"}, {"oid": "dd371b0ffdbf6d4ae2e92e82428ef077f0928cf0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd371b0ffdbf6d4ae2e92e82428ef077f0928cf0", "message": "[KOGITO-2914] Renamed explainability-common to explainability-addon-common + minor refactoring", "committedDate": "2020-08-24T17:42:16Z", "type": "commit"}, {"oid": "655b5afd41fb197102e1b55916f0165bf4c536a3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/655b5afd41fb197102e1b55916f0165bf4c536a3", "message": "[KOGITO-2914] Minor", "committedDate": "2020-08-24T17:44:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTY1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475791656", "bodyText": "add also a test with more than one request in the body?", "author": "r00ta", "createdAt": "2020-08-24T17:51:30Z", "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/QuarkusExplainableResourceIT.java", "diffHunk": "@@ -45,20 +44,23 @@ public static ConfigBean configBeanProducer() {\n \n     @Test\n     @SuppressWarnings(\"unchecked\")\n-    void testRequestIsProcessedAndCorrect() throws JsonProcessingException {\n+    void explainServiceTest() throws JsonProcessingException {", "originalCommit": "655b5afd41fb197102e1b55916f0165bf4c536a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjY0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r476612646", "bodyText": "Done, added a test with 2 elements and on with no element", "author": "danielezonca", "createdAt": "2020-08-25T17:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5MTY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMzM5NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r475813394", "bodyText": "Given that with these changes multiple requests are embedded in just one http call, one request might be invalid and raise an uncaught exception. I think we have to handle this case and add a test for that, wdyt?", "author": "r00ta", "createdAt": "2020-08-24T18:29:39Z", "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "diffHunk": "@@ -54,42 +49,37 @@\n \n     @Test\n     public void testPerturbedExecution() {", "originalCommit": "655b5afd41fb197102e1b55916f0165bf4c536a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5MTA4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479291086", "bodyText": "Ticket created https://issues.redhat.com/browse/KOGITO-3213", "author": "danielezonca", "createdAt": "2020-08-28T13:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMzM5NA=="}], "type": "inlineReview"}, {"oid": "73f3ba52e7cb5c3b1ee93964d66dfd6edf5033b8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/73f3ba52e7cb5c3b1ee93964d66dfd6edf5033b8", "message": "Merge branch 'master' into 'KOGITO-2914'", "committedDate": "2020-08-25T07:16:45Z", "type": "commit"}, {"oid": "0b032299db6dd5af18b1c4c5da4b1ebbf4b1bc5c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0b032299db6dd5af18b1c4c5da4b1ebbf4b1bc5c", "message": "[KOGITO-2914] Apply PR comments", "committedDate": "2020-08-25T17:10:01Z", "type": "commit"}, {"oid": "fa1463d6b438c792dce27804559cc9399c9abc58", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fa1463d6b438c792dce27804559cc9399c9abc58", "message": "[KOGITO-2914] Fix jandex index creation", "committedDate": "2020-08-25T19:30:23Z", "type": "commit"}, {"oid": "2c29515c9f8ae1c94a382d2ddcef2c9975116e71", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2c29515c9f8ae1c94a382d2ddcef2c9975116e71", "message": "Merge branch 'master' into 'KOGITO-2914'", "committedDate": "2020-08-26T07:11:13Z", "type": "commit"}, {"oid": "47170b06bfb4d4f63c592a58ddd40dc6a41ea6dc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/47170b06bfb4d4f63c592a58ddd40dc6a41ea6dc", "message": "Merge 'master' into 'KOGITO-2914'", "committedDate": "2020-08-27T07:03:11Z", "type": "commit"}, {"oid": "4b16052a49cb6a0dde845e448177365f38b141da", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4b16052a49cb6a0dde845e448177365f38b141da", "message": "[KOGITO-2914] Fix code smell + test coverage", "committedDate": "2020-08-27T10:07:03Z", "type": "commit"}, {"oid": "eca5cc65e40403c5501e727a980e7ca3d0590185", "url": "https://github.com/kiegroup/kogito-runtimes/commit/eca5cc65e40403c5501e727a980e7ca3d0590185", "message": "Merge remote-tracking branch 'kostola/KOGITO-2914' into KOGITO-2914", "committedDate": "2020-08-27T10:07:11Z", "type": "commit"}, {"oid": "df94a6e5c285bf9e6beeb91087527359881c8a77", "url": "https://github.com/kiegroup/kogito-runtimes/commit/df94a6e5c285bf9e6beeb91087527359881c8a77", "message": "KOGITO-2914: add EventUtilsTest to tracing-decision-common", "committedDate": "2020-08-27T11:37:54Z", "type": "commit"}, {"oid": "e3499a712c99610fffb43d3c6650bb1d298970eb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e3499a712c99610fffb43d3c6650bb1d298970eb", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2914", "committedDate": "2020-08-28T11:28:15Z", "type": "commit"}, {"oid": "1d4e146abd11e00bab8717cc8440d98a74b87e30", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1d4e146abd11e00bab8717cc8440d98a74b87e30", "message": "[KOGITO-2914] Fix code smell", "committedDate": "2020-08-28T11:32:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNjQ0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479316440", "bodyText": "Would it be also possible to provide expected model name and namespace in the exception.", "author": "jiripetrlik", "createdAt": "2020-08-28T13:57:28Z", "path": "addons/explainability/explainability-addon-common/src/test/java/org/kie/kogito/explainability/ExplainabilityServiceTest.java", "diffHunk": "@@ -54,42 +49,37 @@\n \n     @Test\n     public void testPerturbedExecution() {\n-        Consumer<EvaluateEvent> eventConsumer = mock(Consumer.class);\n-        DecisionTracingListener listener = new DecisionTracingListener(eventConsumer);\n-        genericDMNRuntime.addListener(listener);\n-\n-        DecisionModels decisionModels = new DecisionModels() {\n-            @Override\n-            public DecisionModel getDecisionModel(String namespace, String name) {\n-                if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n-                    return decisionModel;\n-                }\n-                throw new RuntimeException(\"Model not found.\");\n+\n+        DecisionModels decisionModels = (namespace, name) -> {\n+            if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n+                return decisionModel;\n             }\n+            throw new RuntimeException(\"Model not found.\");", "originalCommit": "1d4e146abd11e00bab8717cc8440d98a74b87e30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjEzMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479412132", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-08-28T16:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNjQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzE2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479317162", "bodyText": "Would it be also possible to provide info about model name and namespace in the exception.", "author": "jiripetrlik", "createdAt": "2020-08-28T13:58:12Z", "path": "addons/explainability/explainability-quarkus-addon/src/test/java/org/kie/kogito/explainability/ApplicationMock.java", "diffHunk": "@@ -14,51 +14,36 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.tracing.decision;\n-\n-import java.io.InputStreamReader;\n-import java.util.function.Consumer;\n+package org.kie.kogito.explainability;\n \n import io.quarkus.test.Mock;\n import org.kie.dmn.api.core.DMNRuntime;\n import org.kie.kogito.Application;\n import org.kie.kogito.Config;\n-import org.kie.kogito.decision.DecisionModel;\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n-import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.uow.UnitOfWorkManager;\n \n-import static org.kie.kogito.tracing.decision.Constants.TEST_EXECUTION_ID;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_RESOURCE;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_NAME;\n-import static org.kie.kogito.tracing.decision.Constants.MODEL_NAMESPACE;\n-import static org.mockito.Mockito.mock;\n+import java.io.InputStreamReader;\n \n @Mock\n public class ApplicationMock implements Application {\n \n     final static DMNRuntime genericDMNRuntime = DMNKogito.createGenericDMNRuntime(new InputStreamReader(\n-            QuarkusExplainableResourceIT.class.getResourceAsStream(MODEL_RESOURCE)\n+            ApplicationMock.class.getResourceAsStream(Constants.MODEL_RESOURCE)\n     ));\n \n     final static DecisionModels decisionModels;\n \n     static {\n-        DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);\n-        Consumer<EvaluateEvent> eventConsumer = mock(Consumer.class);\n-        DecisionTracingListener listener = new DecisionTracingListener(eventConsumer);\n-        genericDMNRuntime.addListener(listener);\n+        DmnDecisionModel decisionModel = new DmnDecisionModel(genericDMNRuntime, Constants.MODEL_NAMESPACE, Constants.MODEL_NAME, () -> Constants.TEST_EXECUTION_ID);\n \n-        decisionModels = new DecisionModels() {\n-            @Override\n-            public DecisionModel getDecisionModel(String namespace, String name) {\n-                if (MODEL_NAMESPACE.equals(namespace) && MODEL_NAME.equals(name)) {\n-                    return decisionModel;\n-                }\n-                throw new RuntimeException(\"Model not found.\");\n+        decisionModels = (namespace, name) -> {\n+            if (Constants.MODEL_NAMESPACE.equals(namespace) && Constants.MODEL_NAME.equals(name)) {\n+                return decisionModel;\n             }\n+            throw new RuntimeException(\"Model not found.\");", "originalCommit": "1d4e146abd11e00bab8717cc8440d98a74b87e30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjE2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/720#discussion_r479412166", "bodyText": "Done", "author": "danielezonca", "createdAt": "2020-08-28T16:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzE2Mg=="}], "type": "inlineReview"}, {"oid": "7673debdbffcac73d303cd65e9e1717202a2a6d1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7673debdbffcac73d303cd65e9e1717202a2a6d1", "message": "[KOGITO-2914] PR comments", "committedDate": "2020-08-28T16:29:46Z", "type": "commit"}]}