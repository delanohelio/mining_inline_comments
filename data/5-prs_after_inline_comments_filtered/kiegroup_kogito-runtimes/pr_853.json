{"pr_number": 853, "pr_title": "[KOGITO-3610] - Updating TopicsResource to reflect Topics and CloudEv\u2026", "pr_createdAt": "2020-10-27T21:29:55Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/853", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwODY4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r514308683", "bodyText": "there are now constants in org.kie.kogito.event.KogitoEventStreams you can use", "author": "evacchi", "createdAt": "2020-10-29T14:36:54Z", "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.quarkus;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.event.EventKind;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@ApplicationScoped\n+@Priority(0)\n+public class QuarkusTopicDiscovery implements TopicDiscovery {\n+\n+    private static final String OUTGOING_PREFIX = \"mp.messaging.outgoing.\";\n+    private static final String INCOMING_PREFIX = \"mp.messaging.incoming.\";\n+    private static final String DEFAULT_OUTGOING_CHANNEL_NAME = \"kogito_outgoing_stream\";\n+    private static final String DEFAULT_INCOMING_CHANNEL_NAME = \"kogito_incoming_stream\";", "originalCommit": "cac711e57c95b4c878863259548e236adb14dea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMzI4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r514313281", "bodyText": "Yes, you just merge kiddo! :D I'll rebase.", "author": "ricardozanini", "createdAt": "2020-10-29T14:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwODY4Mw=="}], "type": "inlineReview"}, {"oid": "4bec581b8b876cc01627967ea1e9e496877e6909", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4bec581b8b876cc01627967ea1e9e496877e6909", "message": "Including Spring and fixing injection failures\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-29T16:15:13Z", "type": "forcePushed"}, {"oid": "70631489eae32b36a419f0e048f20290025c7be2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/70631489eae32b36a419f0e048f20290025c7be2", "message": "[KOGITO-3610] - Updating TopicsResource to reflect Topics and CloudEvents structure\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-10-30T13:30:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTEyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r513291120", "bodyText": "Why do you need explicit priority? Do you expect to have multiple bean of this type in the classpath?", "author": "danielezonca", "createdAt": "2020-10-28T09:23:00Z", "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.quarkus;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.event.EventKind;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+@ApplicationScoped\n+@Priority(0)", "originalCommit": "2580138d2122b4417932a9122804ed9842eacee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ1OTcxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517459718", "bodyText": "Yes, we have the NoOpTopicDiscovery in the kogito-service module.", "author": "ricardozanini", "createdAt": "2020-11-04T16:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTI3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517609278", "bodyText": "Ok thanks for clarification \ud83d\udc4d", "author": "danielezonca", "createdAt": "2020-11-04T20:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MTM5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r513461397", "bodyText": "What's the reason of this change?\nIf you look at the provided examples in the spec it contains\n/cloudevents/spec/pull/123\nThat seems to me similar to the existing code", "author": "danielezonca", "createdAt": "2020-10-28T13:54:21Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/event/AbstractDataEvent.java", "diffHunk": "@@ -42,10 +42,11 @@\n     public static final String TYPE_FORMAT = TYPE_PREFIX + \".%s.%s\";\n     /**\n      * String format for Kogito CloudEvents source fields.\n-     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelAgency/0982-1223-3121-1212\n+     * Since this is a required field, the constructor will fill them with default value, e.g.: /process/travelagency\n+     * See more about the source format: https://github.com/cloudevents/spec/blob/v1.0/spec.md#source-1\n      */\n-    public static final String SOURCE_FORMAT = \"/process/%s/%s\";", "originalCommit": "0fad1f112289934fae19f5e0f290395fdedf3b0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ2MTUwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517461502", "bodyText": "Actually, the source may or may not contain inner information about the context:\n\nDescription: Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.\n\n\nProducers MUST ensure that source + id is unique for each distinct event.\n\n\nAn application MAY assign a unique source to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique source identifiers.\n\n\nA source MAY include more than one producer. In that case the producers MUST collaborate to ensure that source + id is unique for each distinct event.\n\nSo source + id is always different in our context. Adding the process ID to it would make it very difficult to filter in a distributed architecture. We already send the process ID in the kogito-extensions. No need to replicate it here, that's why I removed.", "author": "ricardozanini", "createdAt": "2020-11-04T16:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MTM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NzcyNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516647725", "bodyText": "What about extract a private method with OUTGOING_PREFIX, KogitoEventStreams.OUTGOING and ChannelType.OUTGOING as parameters? This could be used for both branches", "author": "danielezonca", "createdAt": "2020-11-03T12:59:40Z", "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.addon.cloudevents.quarkus;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.impl.AbstractTopicDiscovery;\n+\n+@ApplicationScoped\n+@Priority(0)\n+public class QuarkusTopicDiscovery extends AbstractTopicDiscovery {\n+\n+    private static final String OUTGOING_PREFIX = \"mp.messaging.outgoing.\";\n+    private static final String INCOMING_PREFIX = \"mp.messaging.incoming.\";\n+    private static final String TOPIC_SUFFIX = \".topic\";\n+\n+    protected List<Topic> getTopics() {\n+        final List<Topic> topics = new ArrayList<>();\n+        ConfigProvider.getConfig().getPropertyNames().forEach(n -> {\n+            if (n.startsWith(OUTGOING_PREFIX)) {\n+                final String topicName = this.extractChannelName(n, OUTGOING_PREFIX, KogitoEventStreams.OUTGOING);\n+                if (topics.stream().noneMatch(t -> t.getName().equals(topicName) && t.getType() == ChannelType.OUTGOING)) {\n+                    final Topic topic = new Topic();\n+                    topic.setType(ChannelType.OUTGOING);\n+                    topic.setName(topicName);\n+                    topics.add(topic);\n+                }", "originalCommit": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzODc3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517538770", "bodyText": "Nice catch! This happens when you had implemented once, worked, and you never look back.", "author": "ricardozanini", "createdAt": "2020-11-04T18:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NzcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MjczNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517542736", "bodyText": "Thinking again, it's not worth. We would have to pass the topics list as well, the reuse tradeoff does not pay.", "author": "ricardozanini", "createdAt": "2020-11-04T18:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NzcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0OTgxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516649819", "bodyText": "Isn't this a sort of duplication? Are EventKind and ChannelType different?", "author": "danielezonca", "createdAt": "2020-11-03T13:03:21Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/event/EventKind.java", "diffHunk": "@@ -15,7 +15,7 @@\n \n package org.kie.kogito.event;\n \n-public enum TopicType {\n-    PRODUCED,\n-    CONSUMED;\n+public enum EventKind {", "originalCommit": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0NDEwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517544106", "bodyText": "EventKind is somewatch attached to the CloudEvents and SW specification. We do have kind in SW to distinct between a PRODUCED and CONSUMED events.\nChannelType is the infrastructure behind the pipes where the event goes through.\nSemantically they are pretty close, but the domain is different. That's why I kept them separated and to bind Event with EventKind and Channel to ChannelType.", "author": "ricardozanini", "createdAt": "2020-11-04T18:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0OTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MDU4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516660584", "bodyText": "I'm not a fan of kogito-services module, it contains both API and impl of many different aspects like jobs, events etc. I would like to split in more self contained modules in the future and or migrate as addonds (events is definitely a good candidate because it is sort of in both addond and kogito-services)\nI'm not sure if I like to have interfaces but at least we can start from impl.\nNow specifically to this PR what about start moving this impl class in a -common of cloudevents addon that both specific versions (Quarkus/Springboot) imports. i don't see any benefit from always have this abstract class in the classpath even if I don't have the addon.\nWdyt?", "author": "danielezonca", "createdAt": "2020-11-03T13:21:22Z", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/impl/AbstractTopicDiscovery.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.services.event.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.event.ChannelType;\n+import org.kie.kogito.event.CloudEventMeta;\n+import org.kie.kogito.event.EventKind;\n+import org.kie.kogito.event.KogitoEventStreams;\n+import org.kie.kogito.event.Topic;\n+import org.kie.kogito.services.event.TopicDiscovery;\n+\n+/**\n+ * Base class for events Topic Discovery\n+ */\n+public abstract class AbstractTopicDiscovery implements TopicDiscovery {", "originalCommit": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0NDk0OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r517544949", "bodyText": "+1 to move to a -common package. I thought about that, but the time hushed me. I'll do it, won't take much time since I believe you will only re-review this PR tomorrow anyway. :)", "author": "ricardozanini", "createdAt": "2020-11-04T18:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MDU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MTAyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516661026", "bodyText": "If we move AbstractTopicDiscovery to a -common module as suggested above here you can check that class to have a common checkpoint for all the platforms", "author": "danielezonca", "createdAt": "2020-11-03T13:22:06Z", "path": "kogito-maven-plugin/src/main/java/org/kie/kogito/maven/plugin/GenerateModelMojo.java", "diffHunk": "@@ -239,12 +239,15 @@ private ApplicationGenerator createApplicationGenerator() throws IOException, Mo\n         boolean useMonitoring = hasClassOnClasspath(project, \"org.kie.kogito.monitoring.rest.MetricsResource\");\n         boolean useTracing = hasClassOnClasspath(project, \"org.kie.kogito.tracing.decision.DecisionTracingListener\");\n         boolean useKnativeEventing = hasClassOnClasspath(project, \"org.kie.kogito.events.knative.ce.extensions.KogitoProcessExtension\");\n+        boolean useCloudEvents = hasClassOnClasspath(project, \"org.kie.kogito.addon.cloudevents.spring.SpringKafkaCloudEventEmitter\") ||\n+                hasClassOnClasspath(project, \"org.kie.kogito.addon.cloudevents.quarkus.QuarkusCloudEventEmitter\");", "originalCommit": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2MzkxMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/853#discussion_r516663913", "bodyText": "I would prefer to instantiate NoOp impl here in the else branch so that we can remove the if == null from method body. That if is more error prone because we will have to remember to nullcheck all the future usages (if any). Wdyt?", "author": "danielezonca", "createdAt": "2020-11-03T13:26:43Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/events/TopicsInformationResourceGenerator.java", "diffHunk": "@@ -59,38 +70,55 @@ public String generate() {\n                 .findFirst(ClassOrInterfaceDeclaration.class)\n                 .orElseThrow(() -> new NoSuchElementException(\"Compilation unit doesn't contain a class or interface declaration!\"));\n         template.setName(CLASS_NAME);\n-        this.addTopics(template);\n+        this.addEventsMeta(template);\n+\n+        // in case we don't have the bean in the classpath, just ignore the injection that the generated class will use NoOp instead\n+        if (annotator != null && addonsConfig.useCloudEvents()) {\n+            annotator.withApplicationComponent(template);\n+            template.findAll(FieldDeclaration.class, fd -> fd.getVariables().get(0).getNameAsString().contains(\"discovery\"))\n+                    .forEach(annotator::withInjection);\n+        }", "originalCommit": "b6a3b7e247b55de45c5c5c0829d5a1f09003c857", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c3fdabae9597963a1909788a8a69b87f5043b99", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0c3fdabae9597963a1909788a8a69b87f5043b99", "message": "[KOGITO-3610] - Updating TopicsResource to reflect Topics and CloudEvents structure\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-04T16:48:38Z", "type": "commit"}, {"oid": "94fe4815d0a98613de2fcf69012062e31f8e825c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/94fe4815d0a98613de2fcf69012062e31f8e825c", "message": "reverting condition error\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-04T16:48:38Z", "type": "commit"}, {"oid": "3e5497a5a6004469e83a5b4dda981073de68f44e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3e5497a5a6004469e83a5b4dda981073de68f44e", "message": "Fixing integration test to reflect testcontainers application", "committedDate": "2020-11-04T16:48:38Z", "type": "commit"}, {"oid": "948cdf63e90082db080e2028c1d4e0000d2f307d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/948cdf63e90082db080e2028c1d4e0000d2f307d", "message": "Incorporating reviews and creating -common module\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-04T19:56:09Z", "type": "commit"}, {"oid": "948cdf63e90082db080e2028c1d4e0000d2f307d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/948cdf63e90082db080e2028c1d4e0000d2f307d", "message": "Incorporating reviews and creating -common module\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>", "committedDate": "2020-11-04T19:56:09Z", "type": "forcePushed"}]}