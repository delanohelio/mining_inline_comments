{"pr_number": 3558, "pr_title": "report error when subquery in case-when returns empty set", "pr_createdAt": "2020-05-12T02:22:45Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3558", "timeline": [{"oid": "7c2672bbb4cea9856f18f85450bd5789615ced95", "url": "https://github.com/apache/incubator-doris/commit/7c2672bbb4cea9856f18f85450bd5789615ced95", "message": "report error when subquery in case-when returns empty set", "committedDate": "2020-05-11T11:27:46Z", "type": "commit"}, {"oid": "c1fe3a3879c4bca2ca5db6516e5ab2bb632679f1", "url": "https://github.com/apache/incubator-doris/commit/c1fe3a3879c4bca2ca5db6516e5ab2bb632679f1", "message": "report error when subquery in case-when returns empty set", "committedDate": "2020-05-12T02:15:30Z", "type": "commit"}, {"oid": "31ce10ee0c63bb41471c6596edad5cac8f374295", "url": "https://github.com/apache/incubator-doris/commit/31ce10ee0c63bb41471c6596edad5cac8f374295", "message": "add correlated check", "committedDate": "2020-05-12T04:02:52Z", "type": "commit"}, {"oid": "58ef16352496f898587100192e2e28f343539069", "url": "https://github.com/apache/incubator-doris/commit/58ef16352496f898587100192e2e28f343539069", "message": "add correlated check", "committedDate": "2020-05-12T04:13:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzgxMQ==", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r423493811", "bodyText": "why do you only throw exception when expr is \u2018when expr\u2019 and \u2018then expr\u2019\uff1f\nWhether to throw an exception when \u2018case expr\u2019 and \u2018else expr\u2019 is not scarlar type\uff1f", "author": "wutiangan", "createdAt": "2020-05-12T06:36:50Z", "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -186,6 +189,9 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n             // Determine maximum compatible type of the then exprs seen so far.\n             // We will add casts to them at the very end.\n             Expr thenExpr = children.get(i + 1);\n+            if (!thenExpr.getType().isScalarType()) {\n+                throw new AnalysisException(\"subquery in case-when must return scala type\");\n+            }", "originalCommit": "58ef16352496f898587100192e2e28f343539069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMjI4MA==", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r424132280", "bodyText": "if when expor case expr has subquery and subquer returns non-scalar type, the error will be thrown by analyzer.getCompatibleType and the message is  weird, too difficult to understand, so i throw a message here", "author": "yangzhg", "createdAt": "2020-05-13T02:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5MzgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDQ0Mg==", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r423500442", "bodyText": "why whenExpr must be BinaryPredicate? can we support query \u201cselect case (select sex from table limit 1) when ''1\u201d then 'male' else 'female'\uff1f", "author": "wutiangan", "createdAt": "2020-05-12T06:51:43Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1391,9 +1391,8 @@ private void rewriteSelectList(ExprRewriter rewriter) throws AnalysisException {\n             CaseExpr caseExpr = (CaseExpr) item.getExpr();\n \n             int childIdx = 0;\n-            if (caseExpr.hasCaseExpr()\n-                    && caseExpr.getChild(childIdx++).contains(Predicates.instanceOf(Subquery.class))) {\n-                throw new AnalysisException(\"Only support subquery in binary predicate in case statement.\");\n+            if (caseExpr.hasCaseExpr()) {\n+                childIdx++;\n             }\n             while (childIdx + 2 <= caseExpr.getChildren().size()) {", "originalCommit": "58ef16352496f898587100192e2e28f343539069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMjUwNg==", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r424132506", "bodyText": "this is the previous code", "author": "yangzhg", "createdAt": "2020-05-13T02:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMDQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjc0OA==", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r423502748", "bodyText": "maybe in 1397 line code , \"<=\" need to modify \"<\".\nfor example: case when expr0 then expr1 else expr2.   expr2 will be consider 'when expr' in In the following code", "author": "wutiangan", "createdAt": "2020-05-12T06:56:39Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectStmt.java", "diffHunk": "@@ -1391,9 +1391,8 @@ private void rewriteSelectList(ExprRewriter rewriter) throws AnalysisException {\n             CaseExpr caseExpr = (CaseExpr) item.getExpr();\n \n             int childIdx = 0;\n-            if (caseExpr.hasCaseExpr()\n-                    && caseExpr.getChild(childIdx++).contains(Predicates.instanceOf(Subquery.class))) {\n-                throw new AnalysisException(\"Only support subquery in binary predicate in case statement.\");\n+            if (caseExpr.hasCaseExpr()) {\n+                childIdx++;\n             }\n             while (childIdx + 2 <= caseExpr.getChildren().size()) {", "originalCommit": "58ef16352496f898587100192e2e28f343539069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNDQ2Mw==", "url": "https://github.com/apache/incubator-doris/pull/3558#discussion_r424134463", "bodyText": "after the  loop  the childIdx is 2  childIdx + 2 is 4 not <= caseExpr.getChildren().size() (3) so expr2 will not be consider 'when expr' in In the following code", "author": "yangzhg", "createdAt": "2020-05-13T02:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjc0OA=="}], "type": "inlineReview"}, {"oid": "ab92e25bd6045c558c89501bed3dbebcbe281129", "url": "https://github.com/apache/incubator-doris/commit/ab92e25bd6045c558c89501bed3dbebcbe281129", "message": "add esle check", "committedDate": "2020-05-13T03:17:59Z", "type": "commit"}, {"oid": "9c1d4a17fe41714f830ae3e2755405e40c81eadf", "url": "https://github.com/apache/incubator-doris/commit/9c1d4a17fe41714f830ae3e2755405e40c81eadf", "message": "add esle check", "committedDate": "2020-05-13T03:22:24Z", "type": "commit"}, {"oid": "122ea694784f34f3e851ba13b2706790f9614bec", "url": "https://github.com/apache/incubator-doris/commit/122ea694784f34f3e851ba13b2706790f9614bec", "message": "add esle check", "committedDate": "2020-05-13T03:30:29Z", "type": "commit"}, {"oid": "3e17e4343055cfdfc4cb075de89e680bef8dcaf1", "url": "https://github.com/apache/incubator-doris/commit/3e17e4343055cfdfc4cb075de89e680bef8dcaf1", "message": "add esle check", "committedDate": "2020-05-13T06:58:21Z", "type": "commit"}, {"oid": "fff7351182a0ed6897f1d704db59c59d5c646a0d", "url": "https://github.com/apache/incubator-doris/commit/fff7351182a0ed6897f1d704db59c59d5c646a0d", "message": "add esle check", "committedDate": "2020-05-13T07:05:00Z", "type": "commit"}, {"oid": "7480725c52f2942cec0ed49accdb253c52f89a8e", "url": "https://github.com/apache/incubator-doris/commit/7480725c52f2942cec0ed49accdb253c52f89a8e", "message": "add esle check", "committedDate": "2020-05-13T12:13:30Z", "type": "commit"}]}