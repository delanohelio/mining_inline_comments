{"pr_number": 2718, "pr_title": "[Insert] Return more info of insert operation", "pr_createdAt": "2020-01-09T08:07:48Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2718", "timeline": [{"oid": "2c89befe07e1cbabbad7d823538b82e6f91206bd", "url": "https://github.com/apache/incubator-doris/commit/2c89befe07e1cbabbad7d823538b82e6f91206bd", "message": "first", "committedDate": "2020-01-09T03:23:16Z", "type": "commit"}, {"oid": "596583425c45fa527c8195e0452c7d754f0f8fb0", "url": "https://github.com/apache/incubator-doris/commit/596583425c45fa527c8195e0452c7d754f0f8fb0", "message": "[Insert] Standardize the return results of INSERT operations\n\nStandardize the return results of INSERT operations,\nwhich is convenient for users to use and locate problems.\n\nMore details can be found in insert-into-manual.md", "committedDate": "2020-01-09T03:23:16Z", "type": "commit"}, {"oid": "3258d7a730ba7aefd3a2e51d96071b0de7b8079e", "url": "https://github.com/apache/incubator-doris/commit/3258d7a730ba7aefd3a2e51d96071b0de7b8079e", "message": "add show transaction stmt", "committedDate": "2020-01-09T06:14:00Z", "type": "commit"}, {"oid": "333b0e1e7aefeac2ef3b763479e603dc005d8539", "url": "https://github.com/apache/incubator-doris/commit/333b0e1e7aefeac2ef3b763479e603dc005d8539", "message": "add txnid", "committedDate": "2020-01-09T06:51:13Z", "type": "commit"}, {"oid": "d0f80fa1e037b59b7fb8fe13107a3763ed6dd51b", "url": "https://github.com/apache/incubator-doris/commit/d0f80fa1e037b59b7fb8fe13107a3763ed6dd51b", "message": "miss file", "committedDate": "2020-01-09T06:57:11Z", "type": "commit"}, {"oid": "cfded321a7eb17dbeebf4e098e633432d40dd43e", "url": "https://github.com/apache/incubator-doris/commit/cfded321a7eb17dbeebf4e098e633432d40dd43e", "message": "add doc", "committedDate": "2020-01-09T08:01:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwODg2NA==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366208864", "bodyText": "analyzeWhereClause", "author": "EmmyMiao87", "createdAt": "2020-01-14T08:40:58Z", "path": "fe/src/main/java/org/apache/doris/analysis/ShowTransactionStmt.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import org.apache.doris.analysis.BinaryPredicate.Operator;\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.ScalarType;\n+import org.apache.doris.cluster.ClusterNamespace;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.proc.TransProcDir;\n+import org.apache.doris.qe.ShowResultSetMetaData;\n+\n+import com.google.common.base.Strings;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+// syntax:\n+//      SHOW TRANSACTION  WHERE id=123\n+public class ShowTransactionStmt extends ShowStmt {\n+    private static final Logger LOG = LogManager.getLogger(ShowTransactionStmt.class);\n+\n+    private String dbName;\n+    private Expr whereClause;\n+    private long txnId;\n+\n+    public ShowTransactionStmt(String dbName, Expr whereClause) {\n+        this.dbName = dbName;\n+        this.whereClause = whereClause;\n+    }\n+\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    public long getTxnId() {\n+        return txnId;\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n+        super.analyze(analyzer);\n+\n+        if (Strings.isNullOrEmpty(dbName)) {\n+            dbName = analyzer.getDefaultDb();\n+            if (Strings.isNullOrEmpty(dbName)) {\n+                ErrorReport.reportAnalysisException(ErrorCode.ERR_NO_DB_ERROR);\n+            }\n+        } else {\n+            dbName = ClusterNamespace.getFullName(getClusterName(), dbName);\n+        }\n+\n+        if (whereClause == null) {\n+            throw new AnalysisException(\"Missing transaction id\");\n+        }\n+\n+        analyzeSubPredicate(whereClause);\n+    }\n+\n+    private void analyzeSubPredicate(Expr subExpr) throws AnalysisException {", "originalCommit": "cfded321a7eb17dbeebf4e098e633432d40dd43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0NTAyMw==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366345023", "bodyText": "ok", "author": "morningman", "createdAt": "2020-01-14T13:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIwODg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxMTkwNQ==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366211905", "bodyText": "if the stmt is where 1=id?", "author": "EmmyMiao87", "createdAt": "2020-01-14T08:48:37Z", "path": "fe/src/main/java/org/apache/doris/analysis/ShowTransactionStmt.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.analysis;\n+\n+import org.apache.doris.analysis.BinaryPredicate.Operator;\n+import org.apache.doris.catalog.Column;\n+import org.apache.doris.catalog.ScalarType;\n+import org.apache.doris.cluster.ClusterNamespace;\n+import org.apache.doris.common.AnalysisException;\n+import org.apache.doris.common.ErrorCode;\n+import org.apache.doris.common.ErrorReport;\n+import org.apache.doris.common.UserException;\n+import org.apache.doris.common.proc.TransProcDir;\n+import org.apache.doris.qe.ShowResultSetMetaData;\n+\n+import com.google.common.base.Strings;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+// syntax:\n+//      SHOW TRANSACTION  WHERE id=123\n+public class ShowTransactionStmt extends ShowStmt {\n+    private static final Logger LOG = LogManager.getLogger(ShowTransactionStmt.class);\n+\n+    private String dbName;\n+    private Expr whereClause;\n+    private long txnId;\n+\n+    public ShowTransactionStmt(String dbName, Expr whereClause) {\n+        this.dbName = dbName;\n+        this.whereClause = whereClause;\n+    }\n+\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    public long getTxnId() {\n+        return txnId;\n+    }\n+\n+    @Override\n+    public void analyze(Analyzer analyzer) throws AnalysisException, UserException {\n+        super.analyze(analyzer);\n+\n+        if (Strings.isNullOrEmpty(dbName)) {\n+            dbName = analyzer.getDefaultDb();\n+            if (Strings.isNullOrEmpty(dbName)) {\n+                ErrorReport.reportAnalysisException(ErrorCode.ERR_NO_DB_ERROR);\n+            }\n+        } else {\n+            dbName = ClusterNamespace.getFullName(getClusterName(), dbName);\n+        }\n+\n+        if (whereClause == null) {\n+            throw new AnalysisException(\"Missing transaction id\");\n+        }\n+\n+        analyzeSubPredicate(whereClause);\n+    }\n+\n+    private void analyzeSubPredicate(Expr subExpr) throws AnalysisException {\n+        if (subExpr == null) {\n+            return;\n+        }\n+\n+        boolean valid = true;\n+        CHECK: {\n+            if (subExpr instanceof BinaryPredicate) {", "originalCommit": "cfded321a7eb17dbeebf4e098e633432d40dd43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0NDgyNA==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366344824", "bodyText": "Not support it~", "author": "morningman", "createdAt": "2020-01-14T13:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxMTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxMjIwNQ==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366212205", "bodyText": "StringBuilder.append()", "author": "EmmyMiao87", "createdAt": "2020-01-14T08:49:24Z", "path": "fe/src/main/java/org/apache/doris/qe/StmtExecutor.java", "diffHunk": "@@ -692,37 +697,36 @@ private void handleInsertStmt() throws Exception {\n             throwable = t;\n         }\n \n-        // record insert info for show load stmt if\n-        // 1. NOT a streaming insert(deprecated)\n-        // 2. using_old_load_usage_pattern is set to true, means a label will be returned for user to show load.\n-        // 3. has filtered rows. so a label should be returned for user to show\n-        // 4. user specify a label for insert stmt\n-        if (!insertStmt.isStreaming() || Config.using_old_load_usage_pattern || filteredRows > 0 || insertStmt.isUserSpecifiedLabel()) {\n-            try {\n-                context.getCatalog().getLoadManager().recordFinishedLoadJob(\n-                        label,\n-                        insertStmt.getDb(),\n-                        insertStmt.getTargetTable().getId(),\n-                        EtlJobType.INSERT,\n-                        createTime,\n-                        throwable == null ? \"\" : throwable.getMessage(),\n-                        coord.getTrackingUrl()\n-                );\n-            } catch (MetaNotFoundException e) {\n-                LOG.warn(\"Record info of insert load with error {}\", e.getMessage(), e);\n-                context.getState().setError(\"Failed to record info of insert load job, but insert job is \"\n-                        + (throwable == null ? \"success\" : \"failed\"));\n-                return;\n-            }\n+        // Go here, which means:\n+        // 1. transaction is finished successfully (COMMITTED or VISIBLE), or\n+        // 2. transaction failed but Config.using_old_load_usage_pattern is true.\n+        // we will record the load job info for these 2 cases\n \n-            // set to OK, which means the insert load job is successfully submitted.\n-            // and user can check the job's status by label.\n-            context.getState().setOk(loadedRows, filteredRows, \"{'label':'\" + label + \"'}\");\n-        } else {\n-            // just return OK without label, which means this job is successfully done without any error.\n-            Preconditions.checkState(loadedRows > 0 && filteredRows == 0);\n-            context.getState().setOk(loadedRows, filteredRows, null);\n-        }\n+        String errMsg = \"\";\n+        try {\n+            context.getCatalog().getLoadManager().recordFinishedLoadJob(\n+                    label,\n+                    insertStmt.getDb(),\n+                    insertStmt.getTargetTable().getId(),\n+                    EtlJobType.INSERT,\n+                    createTime,\n+                    throwable == null ? \"\" : throwable.getMessage(),\n+                    coord.getTrackingUrl());\n+        } catch (MetaNotFoundException e) {\n+            LOG.warn(\"Record info of insert load with error {}\", e.getMessage(), e);\n+            errMsg = \"Record info of insert load with error \" + e.getMessage();\n+        }\n+\n+        // {'label':'my_label1', 'status':'visible', 'txnId':'123'}\n+        // {'label':'my_label1', 'status':'visible', 'txnId':'123' 'err':'error messages'}\n+        String info = \"{'label':'\" + label + \"', 'status':'\" + txnStatus.name() + \"', 'txnId':'\"", "originalCommit": "cfded321a7eb17dbeebf4e098e633432d40dd43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0NTc1NQ==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366345755", "bodyText": "ok", "author": "morningman", "createdAt": "2020-01-14T13:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxMjIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxMzI5Mg==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366213292", "bodyText": "precondition?", "author": "EmmyMiao87", "createdAt": "2020-01-14T08:51:58Z", "path": "fe/src/main/java/org/apache/doris/transaction/GlobalTransactionMgr.java", "diffHunk": "@@ -1220,6 +1214,63 @@ private void updateDBRunningTxnNum(TransactionStatus preStatus, TransactionState\n         return infos;\n     }\n     \n+    // get show info of a specified txnId\n+    public List<List<String>> getSingleTranInfo(long dbId, long txnId) throws AnalysisException {\n+        List<List<String>> infos = new ArrayList<List<String>>();\n+        readLock();\n+        try {\n+            Database db = Catalog.getInstance().getDb(dbId);\n+            if (db == null) {\n+                throw new AnalysisException(\"Database[\" + dbId + \"] does not exist\");\n+            }\n+            \n+            TransactionState txnState = idToTransactionState.get(txnId);\n+            if (txnState == null) {\n+                throw new AnalysisException(\"transaction with id \" + txnId + \" does not exist\");\n+            }\n+            \n+            if (ConnectContext.get() != null) {", "originalCommit": "cfded321a7eb17dbeebf4e098e633432d40dd43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0NjI5Mw==", "url": "https://github.com/apache/incubator-doris/pull/2718#discussion_r366346293", "bodyText": "This method may be called internal, not in user connection thread. So I just add a judgement here.", "author": "morningman", "createdAt": "2020-01-14T13:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIxMzI5Mg=="}], "type": "inlineReview"}, {"oid": "8b8f31c9a90a714995491da92f9d55d05890afcf", "url": "https://github.com/apache/incubator-doris/commit/8b8f31c9a90a714995491da92f9d55d05890afcf", "message": "fix by review", "committedDate": "2020-01-14T13:53:10Z", "type": "commit"}]}