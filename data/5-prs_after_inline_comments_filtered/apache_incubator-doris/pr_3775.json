{"pr_number": 3775, "pr_title": "Support read and write lock in table level to reduce lock competition", "pr_createdAt": "2020-06-04T12:22:55Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3775", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2MTQwNA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r435861404", "bodyText": "Could use getTableOrThrowException", "author": "kangkaisen", "createdAt": "2020-06-05T11:32:17Z", "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -118,30 +118,30 @@ public void processDropMaterializedView(DropMaterializedViewStmt stmt) throws Dd\n             ErrorReport.reportDdlException(ErrorCode.ERR_BAD_DB_ERROR, dbName);\n         }\n \n-        db.writeLock();\n+        String tableName = stmt.getTableName().getTbl();\n+        Table table = db.getTable(tableName);", "originalCommit": "e9e9d8279a9ee1c664f26d6679ed0268f854aabf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2NTEzOA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r435865138", "bodyText": "Here should throw userException or try and catch then throw ddl exception because we need some detailed error message?", "author": "caiconghui", "createdAt": "2020-06-05T11:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2MTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2MzczMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r435863730", "bodyText": "Could use getTableOrThrowException", "author": "kangkaisen", "createdAt": "2020-06-05T11:37:46Z", "path": "fe/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -169,18 +169,19 @@ public void processAlterTable(AlterTableStmt stmt) throws UserException {\n         // some operations will take long time to process, need to be done outside the databse lock\n         boolean needProcessOutsideDatabaseLock = false;\n         String tableName = dbTableName.getTbl();\n-        db.writeLock();\n-        try {\n-            Table table = db.getTable(tableName);\n-            if (table == null) {\n-                ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n-            }\n \n-            if (table.getType() != TableType.OLAP) {\n-                throw new DdlException(\"Do not support alter non-OLAP table[\" + tableName + \"]\");\n-            }\n-            OlapTable olapTable = (OlapTable) table;\n+        Table table = db.getTable(tableName);", "originalCommit": "e9e9d8279a9ee1c664f26d6679ed0268f854aabf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2NDMyMg==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r435864322", "bodyText": "Why don't add the table lock\uff1f", "author": "kangkaisen", "createdAt": "2020-06-05T11:39:07Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -1015,13 +1017,8 @@ private void runOldAlterJob() {\n                 continue;\n             }\n \n-            db.writeLock();\n-            try {\n-                OlapTable olapTable = (OlapTable) db.getTable(rollupJob.getTableId());\n-                rollupJob.cancel(olapTable, \"cancelled\");\n-            } finally {\n-                db.writeUnlock();\n-            }\n+            OlapTable olapTable = (OlapTable) db.getTable(rollupJob.getTableId());", "originalCommit": "e9e9d8279a9ee1c664f26d6679ed0268f854aabf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MTM4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r435871389", "bodyText": "because olap table could be null, so I add write lock in the cancel function\nif (olapTable != null) {\nolapTable.writeLock();\ntry {\nPreconditions.checkState(olapTable.getId() == tableId);\nfor (Partition partition : olapTable.getPartitions()) {\nif (partition.getState() == PartitionState.ROLLUP) {\npartition.setState(PartitionState.NORMAL);\n}\n}\n            if (olapTable.getState() == OlapTableState.ROLLUP) {\n                olapTable.setState(OlapTableState.NORMAL);\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }", "author": "caiconghui", "createdAt": "2020-06-05T11:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2NDMyMg=="}], "type": "inlineReview"}, {"oid": "940e992c282b1b75f0d70abb839d07b321ad21c3", "url": "https://github.com/apache/incubator-doris/commit/940e992c282b1b75f0d70abb839d07b321ad21c3", "message": "fix merge", "committedDate": "2020-06-13T16:50:36Z", "type": "forcePushed"}, {"oid": "81519db79dfe1a12fdc3f2b052c2882f60b0902f", "url": "https://github.com/apache/incubator-doris/commit/81519db79dfe1a12fdc3f2b052c2882f60b0902f", "message": "fix load", "committedDate": "2020-06-25T03:28:49Z", "type": "forcePushed"}, {"oid": "2c247dcb3ae9642040d6f7a9ed16540853d4775d", "url": "https://github.com/apache/incubator-doris/commit/2c247dcb3ae9642040d6f7a9ed16540853d4775d", "message": "fix ReportHandler", "committedDate": "2020-09-22T12:32:40Z", "type": "forcePushed"}, {"oid": "5c762125f510c09173240cf965a2033aa4125b33", "url": "https://github.com/apache/incubator-doris/commit/5c762125f510c09173240cf965a2033aa4125b33", "message": "fix unit test failed for AlterTest", "committedDate": "2020-09-24T09:09:03Z", "type": "forcePushed"}, {"oid": "ccba5ad1346f7938c6545091e5ba77ff6a09e596", "url": "https://github.com/apache/incubator-doris/commit/ccba5ad1346f7938c6545091e5ba77ff6a09e596", "message": "Add MetaLockUtils and fix some table lock level", "committedDate": "2020-10-20T13:21:18Z", "type": "forcePushed"}, {"oid": "2300dcef1be5862c18ed3f0dd1a78c3493603bd2", "url": "https://github.com/apache/incubator-doris/commit/2300dcef1be5862c18ed3f0dd1a78c3493603bd2", "message": "fix unittest failed", "committedDate": "2020-10-22T13:01:43Z", "type": "forcePushed"}, {"oid": "ce976dfd2ac48df81bf6b04196636643ea563a21", "url": "https://github.com/apache/incubator-doris/commit/ce976dfd2ac48df81bf6b04196636643ea563a21", "message": "Add unit test for MetaLockUtils", "committedDate": "2020-11-05T12:32:17Z", "type": "forcePushed"}, {"oid": "7bba9d749461906b95e4cf3eb8b8d2d3e11625bc", "url": "https://github.com/apache/incubator-doris/commit/7bba9d749461906b95e4cf3eb8b8d2d3e11625bc", "message": "use MetadataLockUtils to lock table when finish transaction", "committedDate": "2020-11-09T02:49:12Z", "type": "forcePushed"}, {"oid": "d8f4bcdcda7e0df89ade477185f0f10a1be9e4dd", "url": "https://github.com/apache/incubator-doris/commit/d8f4bcdcda7e0df89ade477185f0f10a1be9e4dd", "message": "fix", "committedDate": "2020-11-10T03:32:35Z", "type": "forcePushed"}, {"oid": "304942c20152c249c7b33b57c4fcaa1b25e5701f", "url": "https://github.com/apache/incubator-doris/commit/304942c20152c249c7b33b57c4fcaa1b25e5701f", "message": "Fix dead lock bug", "committedDate": "2020-11-13T07:33:44Z", "type": "forcePushed"}, {"oid": "45ef11272f26be0996e187521501ce2076d7df6a", "url": "https://github.com/apache/incubator-doris/commit/45ef11272f26be0996e187521501ce2076d7df6a", "message": "fix unit test failed for SelectStmt", "committedDate": "2020-11-19T09:32:08Z", "type": "forcePushed"}, {"oid": "1585a01d6746345b57a61fc904f18ea6a59731bd", "url": "https://github.com/apache/incubator-doris/commit/1585a01d6746345b57a61fc904f18ea6a59731bd", "message": "fix unit test failed for SelectStmt", "committedDate": "2020-11-23T02:53:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMzg2Mw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530313863", "bodyText": "Missing if (olapTable.getState() != OlapTableState.NORMAL) { check?", "author": "morningman", "createdAt": "2020-11-25T11:47:17Z", "path": "fe/fe-core/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -128,30 +124,10 @@ public void processDropMaterializedView(DropMaterializedViewStmt stmt) throws Dd\n             ErrorReport.reportDdlException(ErrorCode.ERR_BAD_DB_ERROR, dbName);\n         }\n \n-        db.writeLock();\n-        try {\n-            String tableName = stmt.getTableName().getTbl();\n-            Table table = db.getTable(tableName);\n-            // if table exists\n-            if (table == null) {\n-                ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n-            }\n-            // check table type\n-            if (table.getType() != TableType.OLAP) {\n-                throw new DdlException(\"Do not support non-OLAP table [\" + tableName + \"] when drop materialized view\");\n-            }\n-            // check table state\n-            OlapTable olapTable = (OlapTable) table;\n-            if (olapTable.getState() != OlapTableState.NORMAL) {\n-                throw new DdlException(\"Table[\" + table.getName() + \"]'s state is not NORMAL. \"\n-                        + \"Do not allow doing DROP ops\");\n-            }\n-            // drop materialized view\n-            ((MaterializedViewHandler)materializedViewHandler).processDropMaterializedView(stmt, db, olapTable);\n-\n-        } finally {\n-            db.writeUnlock();\n-        }\n+        String tableName = stmt.getTableName().getTbl();\n+        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableName, TableType.OLAP);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODg1Ng==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531468856", "bodyText": "processDropMaterializedView has check table state operation", "author": "caiconghui", "createdAt": "2020-11-27T09:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMzg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxODkyNw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530318927", "bodyText": "I think we can just lock the table outside the switch, avoid call lock/unlock everywhere inside the processAlterOlapTable and processAlterExternalTable.", "author": "morningman", "createdAt": "2020-11-25T11:56:16Z", "path": "fe/fe-core/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -232,54 +223,61 @@ private void processAlterExternalTable(AlterTableStmt stmt, Table externalTable,\n         List<AlterClause> alterClauses = stmt.getOps();\n         AlterOperations currentAlterOps = new AlterOperations();\n         currentAlterOps.checkConflict(alterClauses);\n-\n         if (currentAlterOps.hasRenameOp()) {\n             processRename(db, externalTable, alterClauses);\n         } else if (currentAlterOps.hasSchemaChangeOp()) {\n-            schemaChangeHandler.processExternalTable(alterClauses, db, externalTable);\n+            externalTable.writeLock();\n+            try {\n+                schemaChangeHandler.processExternalTable(alterClauses, db, externalTable);\n+            } finally {\n+                externalTable.writeUnlock();\n+            }\n         }\n     }\n \n     public void processAlterTable(AlterTableStmt stmt) throws UserException {\n         TableName dbTableName = stmt.getTbl();\n         String dbName = dbTableName.getDb();\n+        String tableName = dbTableName.getTbl();\n         final String clusterName = stmt.getClusterName();\n \n         Database db = Catalog.getCurrentCatalog().getDb(dbName);\n         if (db == null) {\n             ErrorReport.reportDdlException(ErrorCode.ERR_BAD_DB_ERROR, dbName);\n         }\n+        Table table = db.getTable(tableName);\n+        if (table == null) {\n+            ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n+        }\n         List<AlterClause> alterClauses = Lists.newArrayList();\n+        // some operations will take long time to process, need to be done outside the table lock\n+        boolean needProcessOutsideTableLock = false;\n \n-        // some operations will take long time to process, need to be done outside the database lock\n-        boolean needProcessOutsideDatabaseLock = false;\n-        String tableName = dbTableName.getTbl();\n-        db.writeLock();\n-        try {\n-            Table table = db.getTable(tableName);\n-            if (table == null) {\n-                ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n-            }\n+        // check conflict alter ops first\n+        AlterOperations currentAlterOps = new AlterOperations();\n+        currentAlterOps.checkConflict(alterClauses);\n+        // check cluster capacity and db quota outside table lock to escape dead lock, only need to check once.\n+        if (currentAlterOps.needCheckCapacity()) {\n+            Catalog.getCurrentSystemInfo().checkClusterCapacity(clusterName);\n+            db.checkQuota();\n+        }\n \n-            switch (table.getType()) {\n-                case OLAP:\n-                    OlapTable olapTable = (OlapTable) table;\n-                    needProcessOutsideDatabaseLock = processAlterOlapTable(stmt, olapTable, alterClauses, clusterName, db);\n-                    break;\n-                case ODBC:\n-                case MYSQL:\n-                case ELASTICSEARCH:\n-                    processAlterExternalTable(stmt, table, db);\n-                    return;\n-                default:\n-                    throw new DdlException(\"Do not support alter \" + table.getType().toString() + \" table[\" + tableName + \"]\");\n-            }\n-        } finally {\n-            db.writeUnlock();\n+        switch (table.getType()) {", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NzM5Nw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531487397", "bodyText": "some function need db lock and table lock but some function only need table lock, what't more, If the nesting function is too deep\uff0c it is easy to repeat locking\uff0c if we lock small scope for modificaion\uff0c which will be more clear although we may write many lock code", "author": "caiconghui", "createdAt": "2020-11-27T09:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxODkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTUzMQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530321531", "bodyText": "Better put these locks inside the renameTable method.", "author": "morningman", "createdAt": "2020-11-25T12:00:52Z", "path": "fe/fe-core/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -476,27 +464,48 @@ public void processAlterCluster(AlterSystemStmt stmt) throws UserException {\n     private void processRename(Database db, OlapTable table, List<AlterClause> alterClauses) throws DdlException {\n         for (AlterClause alterClause : alterClauses) {\n             if (alterClause instanceof TableRenameClause) {\n-                Catalog.getCurrentCatalog().renameTable(db, table, (TableRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof RollupRenameClause) {\n-                Catalog.getCurrentCatalog().renameRollup(db, table, (RollupRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof PartitionRenameClause) {\n-                Catalog.getCurrentCatalog().renamePartition(db, table, (PartitionRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof ColumnRenameClause) {\n-                Catalog.getCurrentCatalog().renameColumn(db, table, (ColumnRenameClause) alterClause);\n+                db.writeLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTcyNQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531485725", "bodyText": "done", "author": "caiconghui", "createdAt": "2020-11-27T09:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTY5NQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530321695", "bodyText": "Put lock inside the method", "author": "morningman", "createdAt": "2020-11-25T12:01:09Z", "path": "fe/fe-core/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -476,27 +464,48 @@ public void processAlterCluster(AlterSystemStmt stmt) throws UserException {\n     private void processRename(Database db, OlapTable table, List<AlterClause> alterClauses) throws DdlException {\n         for (AlterClause alterClause : alterClauses) {\n             if (alterClause instanceof TableRenameClause) {\n-                Catalog.getCurrentCatalog().renameTable(db, table, (TableRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof RollupRenameClause) {\n-                Catalog.getCurrentCatalog().renameRollup(db, table, (RollupRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof PartitionRenameClause) {\n-                Catalog.getCurrentCatalog().renamePartition(db, table, (PartitionRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof ColumnRenameClause) {\n-                Catalog.getCurrentCatalog().renameColumn(db, table, (ColumnRenameClause) alterClause);\n+                db.writeLock();\n+                table.writeLock();\n+                try {\n+                    Catalog.getCurrentCatalog().renameTable(db, table, (TableRenameClause) alterClause);\n+                } finally {\n+                    table.writeUnlock();\n+                    db.writeUnlock();\n+                }\n                 break;\n             } else {\n-                Preconditions.checkState(false);\n+                table.writeLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTY4NA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531485684", "bodyText": "done", "author": "caiconghui", "createdAt": "2020-11-27T09:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTkzNQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530321935", "bodyText": "Put lock inside the method", "author": "morningman", "createdAt": "2020-11-25T12:01:34Z", "path": "fe/fe-core/src/main/java/org/apache/doris/alter/Alter.java", "diffHunk": "@@ -476,27 +464,48 @@ public void processAlterCluster(AlterSystemStmt stmt) throws UserException {\n     private void processRename(Database db, OlapTable table, List<AlterClause> alterClauses) throws DdlException {\n         for (AlterClause alterClause : alterClauses) {\n             if (alterClause instanceof TableRenameClause) {\n-                Catalog.getCurrentCatalog().renameTable(db, table, (TableRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof RollupRenameClause) {\n-                Catalog.getCurrentCatalog().renameRollup(db, table, (RollupRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof PartitionRenameClause) {\n-                Catalog.getCurrentCatalog().renamePartition(db, table, (PartitionRenameClause) alterClause);\n-                break;\n-            } else if (alterClause instanceof ColumnRenameClause) {\n-                Catalog.getCurrentCatalog().renameColumn(db, table, (ColumnRenameClause) alterClause);\n+                db.writeLock();\n+                table.writeLock();\n+                try {\n+                    Catalog.getCurrentCatalog().renameTable(db, table, (TableRenameClause) alterClause);\n+                } finally {\n+                    table.writeUnlock();\n+                    db.writeUnlock();\n+                }\n                 break;\n             } else {\n-                Preconditions.checkState(false);\n+                table.writeLock();\n+                try {\n+                    if (alterClause instanceof RollupRenameClause) {\n+                        Catalog.getCurrentCatalog().renameRollup(db, table, (RollupRenameClause) alterClause);\n+                        break;\n+                    } else if (alterClause instanceof PartitionRenameClause) {\n+                        Catalog.getCurrentCatalog().renamePartition(db, table, (PartitionRenameClause) alterClause);\n+                        break;\n+                    } else if (alterClause instanceof ColumnRenameClause) {\n+                        Catalog.getCurrentCatalog().renameColumn(db, table, (ColumnRenameClause) alterClause);\n+                        break;\n+                    } else {\n+                        Preconditions.checkState(false);\n+                    }\n+                } finally {\n+                    table.writeUnlock();\n+                }\n             }\n         }\n     }\n \n     private void processRename(Database db, Table table, List<AlterClause> alterClauses) throws DdlException {\n         for (AlterClause alterClause : alterClauses) {\n             if (alterClause instanceof TableRenameClause) {\n-                Catalog.getCurrentCatalog().renameTable(db, table, (TableRenameClause) alterClause);\n+                db.writeLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTYzOQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531485639", "bodyText": "done", "author": "caiconghui", "createdAt": "2020-11-27T09:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNzUyMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530327520", "bodyText": "Why lock again?", "author": "morningman", "createdAt": "2020-11-25T12:11:56Z", "path": "fe/fe-core/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -722,14 +732,21 @@ public void processBatchDropRollup(List<AlterClause> dropRollupClauses, Database\n             editLog.logBatchDropRollup(new BatchDropInfo(dbId, tableId, indexIdSet));\n             LOG.info(\"finished drop rollup index[{}] in table[{}]\", String.join(\"\", rollupNameSet), olapTable.getName());\n         } finally {\n-            db.writeUnlock();\n+            olapTable.writeUnlock();\n         }\n     }\n \n     public void processDropMaterializedView(DropMaterializedViewStmt dropMaterializedViewStmt, Database db,\n             OlapTable olapTable) throws DdlException, MetaNotFoundException {\n-        Preconditions.checkState(db.isWriteLockHeldByCurrentThread());\n+        Preconditions.checkState(olapTable.isWriteLockHeldByCurrentThread());\n+        olapTable.writeLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2OTE2MQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531469161", "bodyText": "fix", "author": "caiconghui", "createdAt": "2020-11-27T09:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNzUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODgxMg==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530338812", "bodyText": "Why not using getOrThrowException?", "author": "morningman", "createdAt": "2020-11-25T12:31:49Z", "path": "fe/fe-core/src/main/java/org/apache/doris/backup/BackupHandler.java", "diffHunk": "@@ -274,25 +274,25 @@ private void backup(Repository repository, Database db, BackupStmt stmt) throws\n         // This is just a pre-check to avoid most of invalid backup requests.\n         // Also calculate the signature for incremental backup check.\n         List<TableRef> tblRefs = stmt.getTableRefs();\n-        BackupMeta curBackupMeta = null;\n-        db.readLock();\n-        try {\n-            List<Table> backupTbls = Lists.newArrayList();\n-            for (TableRef tblRef : tblRefs) {\n-                String tblName = tblRef.getName().getTbl();\n-                Table tbl = db.getTable(tblName);\n-                if (tbl == null) {\n-                    ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tblName);\n-                }\n-                if (tbl.getType() != TableType.OLAP) {\n-                    ErrorReport.reportDdlException(ErrorCode.ERR_NOT_OLAP_TABLE, tblName);\n-                }\n \n-                OlapTable olapTbl = (OlapTable) tbl;\n+        List<Table> backupTbls = Lists.newArrayList();\n+        for (TableRef tblRef : tblRefs) {\n+            String tblName = tblRef.getName().getTbl();\n+            Table tbl = db.getTable(tblName);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MDIyOA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531470228", "bodyText": "if use getOrThrowException, should cast MetaNotFoundException to DdlException, or should change to much throw exception declaraction from Ddl exception to MetaNotFoundException", "author": "caiconghui", "createdAt": "2020-11-27T09:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Nzk3OA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530347978", "bodyText": "We can use db.createTableWithLock()", "author": "morningman", "createdAt": "2020-11-25T12:46:59Z", "path": "fe/fe-core/src/main/java/org/apache/doris/backup/RestoreJob.java", "diffHunk": "@@ -664,18 +667,25 @@ private void checkAndPrepareMeta() {\n                                 remoteDataProperty, (short) restoreReplicationNum,\n                                 remotePartitionInfo.getIsInMemory(remotePartId));\n                         localTbl.addPartition(restoredPart);\n+                    } finally {\n+                        localTbl.writeUnlock();\n                     }\n \n-                    // add restored tables\n-                    for (OlapTable tbl : restoredTbls) {\n+                }\n+\n+                // add restored tables\n+                for (OlapTable tbl : restoredTbls) {\n+                    db.writeLock();\n+                    try {", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MDgzMQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531470831", "bodyText": "use this function use cause side effect that edit log write create table info.", "author": "caiconghui", "createdAt": "2020-11-27T09:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Nzk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0OTE2Mw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530349163", "bodyText": "Use db.dropTableWithLock()", "author": "morningman", "createdAt": "2020-11-25T12:49:03Z", "path": "fe/fe-core/src/main/java/org/apache/doris/backup/RestoreJob.java", "diffHunk": "@@ -1347,42 +1374,53 @@ public void cancelInternal(boolean isReplay) {\n         // clean restored objs\n         Database db = catalog.getDb(dbId);\n         if (db != null) {\n-            db.writeLock();\n-            try {\n-                // rollback table's state to NORMAL\n-                setTableStateToNormal(db);\n+            // rollback table's state to NORMAL\n+            setTableStateToNormal(db);\n \n-                // remove restored tbls\n-                for (OlapTable restoreTbl : restoredTbls) {\n-                    LOG.info(\"remove restored table when cancelled: {}\", restoreTbl.getName());\n+            // remove restored tbls\n+            for (OlapTable restoreTbl : restoredTbls) {\n+                LOG.info(\"remove restored table when cancelled: {}\", restoreTbl.getName());\n+                restoreTbl.writeLock();\n+                try {\n                     for (Partition part : restoreTbl.getPartitions()) {\n                         for (MaterializedIndex idx : part.getMaterializedIndices(IndexExtState.VISIBLE)) {\n                             for (Tablet tablet : idx.getTablets()) {\n                                 Catalog.getCurrentInvertedIndex().deleteTablet(tablet.getId());\n                             }\n                         }\n                     }\n+                } finally {\n+                    restoreTbl.writeUnlock();\n+                }\n+                db.writeLock();\n+                try {", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTU1NA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531485554", "bodyText": "fix", "author": "caiconghui", "createdAt": "2020-11-27T09:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0OTE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM1MzA0OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530353049", "bodyText": "Is it safe to write db without lock?", "author": "morningman", "createdAt": "2020-11-25T12:55:13Z", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -2043,12 +2044,7 @@ public long saveDb(DataOutputStream dos, long checksum) throws IOException {\n             // Don't write information_schema db meta\n             if (!InfoSchemaDb.isInfoSchemaDb(dbName)) {\n                 checksum ^= entry.getKey();\n-                db.readLock();\n-                try {\n-                    db.write(dos);\n-                } finally {\n-                    db.readUnlock();\n-                }\n+                db.write(dos);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDIxMg==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531420212", "bodyText": "for Catalog dumpImage or saveImage will call this function. for the first, lock all dbs already. for second, only invoke by checkpoint thread, so it is thread safe", "author": "caiconghui", "createdAt": "2020-11-27T07:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM1MzA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5Mzg2Mg==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530393862", "bodyText": "Does checkPartitionNameExist  need table lock?", "author": "morningman", "createdAt": "2020-11-25T13:59:53Z", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -6673,86 +6680,75 @@ public void convertDistributionType(Database db, OlapTable tbl) throws DdlExcept\n             editLog.logModifyDistributionType(tableInfo);\n             LOG.info(\"finished to modify distribution type of table: \" + tbl.getName());\n         } finally {\n-            db.writeUnlock();\n+            tbl.writeUnlock();\n         }\n     }\n \n     public void replayConvertDistributionType(TableInfo tableInfo) {\n         Database db = getDb(tableInfo.getDbId());\n-        db.writeLock();\n+        OlapTable tbl = (OlapTable) db.getTable(tableInfo.getTableId());\n+        if (tbl == null) {\n+            return;\n+        }\n+        tbl.writeLock();\n         try {\n-            OlapTable tbl = (OlapTable) db.getTable(tableInfo.getTableId());\n             tbl.convertRandomDistributionToHashDistribution();\n             LOG.info(\"replay modify distribution type of table: \" + tbl.getName());\n         } finally {\n-            db.writeUnlock();\n+            tbl.writeUnlock();\n         }\n     }\n \n     /*\n      * The entry of replacing partitions with temp partitions.\n      */\n-    public void replaceTempPartition(Database db, String tableName, ReplacePartitionClause clause) throws DdlException {\n+    public void replaceTempPartition(Database db, OlapTable olapTable, ReplacePartitionClause clause) throws DdlException {\n+        Preconditions.checkState(olapTable.isWriteLockHeldByCurrentThread());\n         List<String> partitionNames = clause.getPartitionNames();\n         List<String> tempPartitionNames = clause.getTempPartitionNames();\n         boolean isStrictRange = clause.isStrictRange();\n         boolean useTempPartitionName = clause.useTempPartitionName();\n-        db.writeLock();\n-        try {\n-            Table table = db.getTable(tableName);\n-            if (table == null) {\n-                ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n-            }\n-\n-            if (table.getType() != TableType.OLAP) {\n-                throw new DdlException(\"Table[\" + tableName + \"] is not OLAP table\");\n+        // check partition exist\n+        for (String partName : partitionNames) {\n+            if (!olapTable.checkPartitionNameExist(partName, false)) {", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMTYyMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531421620", "bodyText": "already get table lock outside replaceTempPartition", "author": "caiconghui", "createdAt": "2020-11-27T07:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5Mzg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NDA1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530394059", "bodyText": "Does replaceTempPartitions need table lock?", "author": "morningman", "createdAt": "2020-11-25T14:00:07Z", "path": "fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -6673,86 +6680,75 @@ public void convertDistributionType(Database db, OlapTable tbl) throws DdlExcept\n             editLog.logModifyDistributionType(tableInfo);\n             LOG.info(\"finished to modify distribution type of table: \" + tbl.getName());\n         } finally {\n-            db.writeUnlock();\n+            tbl.writeUnlock();\n         }\n     }\n \n     public void replayConvertDistributionType(TableInfo tableInfo) {\n         Database db = getDb(tableInfo.getDbId());\n-        db.writeLock();\n+        OlapTable tbl = (OlapTable) db.getTable(tableInfo.getTableId());\n+        if (tbl == null) {\n+            return;\n+        }\n+        tbl.writeLock();\n         try {\n-            OlapTable tbl = (OlapTable) db.getTable(tableInfo.getTableId());\n             tbl.convertRandomDistributionToHashDistribution();\n             LOG.info(\"replay modify distribution type of table: \" + tbl.getName());\n         } finally {\n-            db.writeUnlock();\n+            tbl.writeUnlock();\n         }\n     }\n \n     /*\n      * The entry of replacing partitions with temp partitions.\n      */\n-    public void replaceTempPartition(Database db, String tableName, ReplacePartitionClause clause) throws DdlException {\n+    public void replaceTempPartition(Database db, OlapTable olapTable, ReplacePartitionClause clause) throws DdlException {\n+        Preconditions.checkState(olapTable.isWriteLockHeldByCurrentThread());\n         List<String> partitionNames = clause.getPartitionNames();\n         List<String> tempPartitionNames = clause.getTempPartitionNames();\n         boolean isStrictRange = clause.isStrictRange();\n         boolean useTempPartitionName = clause.useTempPartitionName();\n-        db.writeLock();\n-        try {\n-            Table table = db.getTable(tableName);\n-            if (table == null) {\n-                ErrorReport.reportDdlException(ErrorCode.ERR_BAD_TABLE_ERROR, tableName);\n-            }\n-\n-            if (table.getType() != TableType.OLAP) {\n-                throw new DdlException(\"Table[\" + tableName + \"] is not OLAP table\");\n+        // check partition exist\n+        for (String partName : partitionNames) {\n+            if (!olapTable.checkPartitionNameExist(partName, false)) {\n+                throw new DdlException(\"Partition[\" + partName + \"] does not exist\");\n             }\n-\n-            OlapTable olapTable = (OlapTable) table;\n-            // check partition exist\n-            for (String partName : partitionNames) {\n-                if (!olapTable.checkPartitionNameExist(partName, false)) {\n-                    throw new DdlException(\"Partition[\" + partName + \"] does not exist\");\n-                }\n-            }\n-            for (String partName : tempPartitionNames) {\n-                if (!olapTable.checkPartitionNameExist(partName, true)) {\n-                    throw new DdlException(\"Temp partition[\" + partName + \"] does not exist\");\n-                }\n+        }\n+        for (String partName : tempPartitionNames) {\n+            if (!olapTable.checkPartitionNameExist(partName, true)) {\n+                throw new DdlException(\"Temp partition[\" + partName + \"] does not exist\");\n             }\n-\n-            olapTable.replaceTempPartitions(partitionNames, tempPartitionNames, isStrictRange, useTempPartitionName);\n-\n-            // write log\n-            ReplacePartitionOperationLog info = new ReplacePartitionOperationLog(db.getId(), olapTable.getId(),\n-                    partitionNames, tempPartitionNames, isStrictRange, useTempPartitionName);\n-            editLog.logReplaceTempPartition(info);\n-            LOG.info(\"finished to replace partitions {} with temp partitions {} from table: {}\",\n-                    clause.getPartitionNames(), clause.getTempPartitionNames(), tableName);\n-        } finally {\n-            db.writeUnlock();\n         }\n+        olapTable.replaceTempPartitions(partitionNames, tempPartitionNames, isStrictRange, useTempPartitionName);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMTY1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531421659", "bodyText": "already get table lock outside replaceTempPartition", "author": "caiconghui", "createdAt": "2020-11-27T07:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NDA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNDQ4OA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r530404488", "bodyText": "is it safe to markGroupStable/markGroupUnstable outside the lock?", "author": "morningman", "createdAt": "2020-11-25T14:15:30Z", "path": "fe/fe-core/src/main/java/org/apache/doris/clone/ColocateTableBalancer.java", "diffHunk": "@@ -233,16 +232,16 @@ private void matchGroup() {\n                             }\n                         }\n                     }\n-                } // end for tables\n-\n-                // mark group as stable or unstable\n-                if (isGroupStable) {\n-                    colocateIndex.markGroupStable(groupId, true);\n-                } else {\n-                    colocateIndex.markGroupUnstable(groupId, true);\n+                } finally {\n+                    olapTable.readUnlock();\n                 }\n-            } finally {\n-                db.readUnlock();\n+            } // end for tables\n+\n+            // mark group as stable or unstable\n+            if (isGroupStable) {\n+                colocateIndex.markGroupStable(groupId, true);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTIyNA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531425224", "bodyText": "I think it is thread safe, for markGroupStable and markGroupUnstable function", "author": "caiconghui", "createdAt": "2020-11-27T07:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNDQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNDIxMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531104210", "bodyText": "I think we should hold the table's readLock before checking table' state", "author": "morningman", "createdAt": "2020-11-26T15:32:30Z", "path": "fe/fe-core/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -398,7 +398,7 @@ private void addLoadJob(LoadJob job, Database db) throws DdlException {\n         }\n \n         // check if table is in restore process\n-        db.readLock();\n+        readLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNjQ5OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531426499", "bodyText": "table's state is a volatile variable, so no need to hold table read lock", "author": "caiconghui", "createdAt": "2020-11-27T07:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNDIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNjQ4OA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531106488", "bodyText": "The lock order is wrong.\nthe origin lock order is db lock -> 'load lock'.\nBut here you use 'table lock' -> 'load lock'", "author": "morningman", "createdAt": "2020-11-26T15:36:13Z", "path": "fe/fe-core/src/main/java/org/apache/doris/load/Load.java", "diffHunk": "@@ -3229,19 +3234,19 @@ public void unprotectDelete(DeleteInfo deleteInfo, Database db) {\n \n     public void replayFinishAsyncDeleteJob(AsyncDeleteJob deleteJob, Catalog catalog) {\n         Database db = catalog.getDb(deleteJob.getDbId());\n-        db.writeLock();\n+        writeLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNzAzMQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531107031", "bodyText": "All other place in Load.java should also be checked again.", "author": "morningman", "createdAt": "2020-11-26T15:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNDM1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531514359", "bodyText": "done", "author": "caiconghui", "createdAt": "2020-11-27T10:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNjQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwODY4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531108685", "bodyText": "This part should be protected by lock", "author": "morningman", "createdAt": "2020-11-26T15:40:01Z", "path": "fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java", "diffHunk": "@@ -565,18 +568,14 @@ private void runOneQuorumFinishedDeleteJob(AsyncDeleteJob job) {\n             load.removeDeleteJobAndSetState(job);\n             return;\n         }\n-        db.readLock();\n-        try {\n-            // if the delete job is quorum finished, just set it to finished\n-            job.clearTasks();\n-            job.setState(DeleteState.FINISHED);\n-            // log\n-            Catalog.getCurrentCatalog().getEditLog().logFinishAsyncDelete(job);\n-            load.removeDeleteJobAndSetState(job);\n-            LOG.info(\"delete job {} finished\", job.getJobId());\n-        } finally {\n-            db.readUnlock();\n-        }\n+\n+        // if the delete job is quorum finished, just set it to finished\n+        job.clearTasks();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MTY0Ng==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531491646", "bodyText": "I cannot find the suitable lock to protect this part", "author": "caiconghui", "createdAt": "2020-11-27T09:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwODY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE0OTAxOQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r532149019", "bodyText": "Never mind, the AsyncDeleteJob is deprecated, I will remove it later.", "author": "morningman", "createdAt": "2020-11-29T03:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwODY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzM4OA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531113388", "bodyText": "In origin implementation, this prepareTablePartitionInfos and following logic is within same db lock.\nBut now you put them into 2 lock phases, which becomes not atomic.", "author": "morningman", "createdAt": "2020-11-26T15:48:30Z", "path": "fe/fe-core/src/main/java/org/apache/doris/load/loadv2/SparkLoadPendingTask.java", "diffHunk": "@@ -133,13 +136,18 @@ private void createEtlJobConf() throws LoadException {\n         }\n \n         Map<Long, EtlTable> tables = Maps.newHashMap();\n-        db.readLock();\n+        Map<Long, Set<Long>> tableIdToPartitionIds = Maps.newHashMap();\n+        Set<Long> allPartitionsTableIds = Sets.newHashSet();\n+        prepareTablePartitionInfos(db, tableIdToPartitionIds, allPartitionsTableIds);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4NTM5OA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531485398", "bodyText": "I think it doesn't matter? if i modify table meta or drop table after db read lock, the final result is still same?", "author": "caiconghui", "createdAt": "2020-11-27T09:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE0OTMxMw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r532149313", "bodyText": "OK, LGTM", "author": "morningman", "createdAt": "2020-11-29T03:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMyODI3Ng==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531328276", "bodyText": "Why this license is different?", "author": "morningman", "createdAt": "2020-11-27T01:53:17Z", "path": "fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java", "diffHunk": "@@ -14,6 +14,22 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n+// Licensed to the Apache Software Foundation (ASF) under one", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MjIxMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531472210", "bodyText": "It is an incorrect modification.", "author": "caiconghui", "createdAt": "2020-11-27T09:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMyODI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMzMzU4Mg==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531333582", "bodyText": "Are you sure this can get table list in order?\nI think it is more safe and clear to change tableMap to tableList, and sort the tableList explicitly.", "author": "morningman", "createdAt": "2020-11-27T01:59:05Z", "path": "fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java", "diffHunk": "@@ -456,23 +437,23 @@ public void analyze(TQueryOptions tQueryOptions) throws UserException {\n         if (parsedStmt instanceof QueryStmt\n                 || parsedStmt instanceof InsertStmt\n                 || parsedStmt instanceof CreateTableAsSelectStmt) {\n-            Map<String, Database> dbs = Maps.newTreeMap();\n+            Map<Long, Table> tableMap = Maps.newTreeMap();\n             QueryStmt queryStmt;\n             Set<String> parentViewNameSet = Sets.newHashSet();\n             if (parsedStmt instanceof QueryStmt) {\n                 queryStmt = (QueryStmt) parsedStmt;\n-                queryStmt.getDbs(analyzer, dbs, parentViewNameSet);\n+                queryStmt.getTables(analyzer, tableMap, parentViewNameSet);\n             } else {\n                 InsertStmt insertStmt;\n                 if (parsedStmt instanceof InsertStmt) {\n                     insertStmt = (InsertStmt) parsedStmt;\n                 } else {\n                     insertStmt = ((CreateTableAsSelectStmt) parsedStmt).getInsertStmt();\n                 }\n-                insertStmt.getDbs(analyzer, dbs, parentViewNameSet);\n+                insertStmt.getTables(analyzer, tableMap, parentViewNameSet);\n             }\n-\n-            lock(dbs);\n+            List<Table> tables = Lists.newArrayList(tableMap.values());", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMzI0OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531423249", "bodyText": "yes, tableMap is a treeMap which is used to for previous analysis, the treeMap will keep table id in In ascending order,", "author": "caiconghui", "createdAt": "2020-11-27T07:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTMzMzU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0MDM5MA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531340390", "bodyText": "In original implementation, we use db locks to ensure mutual exclusion and order.\nSo here we may still need to add table locks.", "author": "morningman", "createdAt": "2020-11-27T02:06:42Z", "path": "fe/fe-core/src/main/java/org/apache/doris/system/SystemInfoService.java", "diffHunk": "@@ -894,18 +893,8 @@ public long getBackendReportVersion(long backendId) {\n     public void updateBackendReportVersion(long backendId, long newReportVersion, long dbId) {\n         AtomicLong atomicLong = null;\n         if ((atomicLong = idToReportVersionRef.get(backendId)) != null) {\n-            Database db = Catalog.getCurrentCatalog().getDb(dbId);\n-            if (db != null) {\n-                db.readLock();\n-                try {\n-                    atomicLong.set(newReportVersion);\n-                    LOG.debug(\"update backend {} report version: {}, db: {}\", backendId, newReportVersion, dbId);\n-                } finally {\n-                    db.readUnlock();\n-                }\n-            } else {\n-                LOG.warn(\"failed to update backend report version, db {} does not exist\", dbId);\n-            }\n+            atomicLong.set(newReportVersion);", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NjgxOA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531466818", "bodyText": "atomicLong is AtomicLong,so I think it is meanless for add table lock or db lock?", "author": "caiconghui", "createdAt": "2020-11-27T09:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0MDM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0NjA3Mw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531346073", "bodyText": "Table's lock should be held to call method like createEtlPartitions()", "author": "morningman", "createdAt": "2020-11-27T02:13:07Z", "path": "fe/fe-core/src/main/java/org/apache/doris/task/HadoopLoadPendingTask.java", "diffHunk": "@@ -70,41 +70,41 @@ public HadoopLoadPendingTask(LoadJob job) {\n \n     @Override\n     protected void createEtlRequest() throws Exception {\n-        db.readLock();\n-        try {\n-            EtlTaskConf taskConf = new EtlTaskConf();\n-            // output path\n-            taskConf.setOutputPath(getOutputPath());\n-            // output file pattern\n-            taskConf.setOutputFilePattern(job.getLabel() + \".%(table)s.%(view)s.%(bucket)s\");\n-            // tables (partitions)\n-            Map<String, EtlPartitionConf> etlPartitions = createEtlPartitions();\n-            Preconditions.checkNotNull(etlPartitions);\n-            taskConf.setEtlPartitions(etlPartitions);\n+        EtlTaskConf taskConf = new EtlTaskConf();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2Njk5OQ==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531466999", "bodyText": "add table lock in createEtlPartitions", "author": "caiconghui", "createdAt": "2020-11-27T09:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0NjA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MDYyOA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531350628", "bodyText": "Is it more safe to lock all tables at once outside the for loop?", "author": "morningman", "createdAt": "2020-11-27T02:23:49Z", "path": "fe/fe-core/src/main/java/org/apache/doris/transaction/PublishVersionDaemon.java", "diffHunk": "@@ -190,16 +190,18 @@ private void publishVersion() throws UserException {\n                             LOG.warn(\"Database [{}] has been dropped.\", transactionState.getDbId());\n                             continue;\n                         }\n-                        db.readLock();\n-                        try {\n-                            for (int i = 0; i < transactionState.getTableIdList().size(); i++) {\n-                                long tableId = transactionState.getTableIdList().get(i);\n-                                Table table = db.getTable(tableId);\n-                                if (table == null || table.getType() != Table.TableType.OLAP) {\n-                                    LOG.warn(\"Table [{}] in database [{}] has been dropped.\", tableId, db.getFullName());\n-                                    continue;\n-                                }\n-                                OlapTable olapTable = (OlapTable) table;\n+\n+\n+                        for (int i = 0; i < transactionState.getTableIdList().size(); i++) {\n+                            long tableId = transactionState.getTableIdList().get(i);\n+                            Table table = db.getTable(tableId);\n+                            if (table == null || table.getType() != Table.TableType.OLAP) {\n+                                LOG.warn(\"Table [{}] in database [{}] has been dropped.\", tableId, db.getFullName());\n+                                continue;\n+                            }\n+                            OlapTable olapTable = (OlapTable) table;\n+                            olapTable.readLock();", "originalCommit": "1585a01d6746345b57a61fc904f18ea6a59731bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMDAzMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r531430030", "bodyText": "I think the final result is same if the table is dropped before loop or in loop, we just make sure that it is thread safe, and we has already add committed txn check if user want to drop table during loading data", "author": "caiconghui", "createdAt": "2020-11-27T07:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM1MDYyOA=="}], "type": "inlineReview"}, {"oid": "614434768adc5e6b6d22de43727d57ea3225f2d1", "url": "https://github.com/apache/incubator-doris/commit/614434768adc5e6b6d22de43727d57ea3225f2d1", "message": "change db level lock to table lock level in http2", "committedDate": "2020-11-30T14:11:42Z", "type": "forcePushed"}, {"oid": "1485ab037fa195b539fa0efa342e0e3ef9474722", "url": "https://github.com/apache/incubator-doris/commit/1485ab037fa195b539fa0efa342e0e3ef9474722", "message": "Fix broker load failed bug and add unit test for db", "committedDate": "2020-12-02T07:38:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMzQ0MA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r535123440", "bodyText": "I find a corner case as below:\nThere are three threads wants to get table lock:\nT1(thread 1) try lock(TableA,TableB)\nT2(thread 2) try lock(TableB,TableC)\nT3(thread 3) try lock(TableC,TableA)\nIf T1 get TableA's lock  and T2 get TableB's lock and T3 get TableC's lock at the same time ,\nThen three threads try get next table's lock ,dead lock happends.\nT1 try lock TableB, but TableB is held by T2.\nT2 try lock TableC,but TableC is held by T3.\nT3 try lock TableA,but TableA is held by T1.\nCan the current implementation solve this case?", "author": "wangbo", "createdAt": "2020-12-03T11:19:23Z", "path": "fe/fe-core/src/main/java/org/apache/doris/common/util/MetaLockUtils.java", "diffHunk": "@@ -0,0 +1,76 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.doris.common.util;\n+\n+import org.apache.doris.catalog.Database;\n+import org.apache.doris.catalog.Table;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MetaLockUtils {\n+\n+    public static void readLockDatabases(List<Database> databaseList) {\n+        for (Database database : databaseList) {\n+            database.readLock();\n+        }\n+    }\n+\n+    public static void readUnlockDatabases(List<Database> databaseList) {\n+        for (int i = databaseList.size() - 1; i >= 0; i--) {\n+            databaseList.get(i).readUnlock();\n+        }\n+    }\n+\n+    public static void readLockTables(List<Table> tableList) {\n+        for (Table table : tableList) {\n+            table.readLock();\n+        }\n+    }\n+\n+    public static void readUnlockTables(List<Table> tableList) {\n+        for (int i = tableList.size() - 1; i >= 0; i--) {\n+            tableList.get(i).readUnlock();\n+        }\n+    }\n+\n+    public static void writeLockTables(List<Table> tableList) {", "originalCommit": "0df43a0c0b8586ee3b73f579bac1a348485b5d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4Nzc1Nw==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r535187757", "bodyText": "@wangbo\nIt should not happen, because we should always ensure that all meta sorted by id asc before lock them, otherwise would cause dead lock.", "author": "caiconghui", "createdAt": "2020-12-03T12:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMzQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2NzEwMg==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r536067102", "bodyText": "When drop a table from database, a db lock will be held;\nWhy not get a db read lock here when get a table from database.", "author": "wangbo", "createdAt": "2020-12-04T12:33:05Z", "path": "fe/fe-core/src/main/java/org/apache/doris/clone/DynamicPartitionScheduler.java", "diffHunk": "@@ -265,17 +265,16 @@ private void executeDynamicPartition() {\n             String tableName;\n             boolean skipAddPartition = false;\n             OlapTable olapTable;\n-            db.readLock();\n+            olapTable = (OlapTable) db.getTable(tableId);", "originalCommit": "17c0d45cad336510b52957be02bc50cfc6499cc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4Mjc4OA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r536082788", "bodyText": "@wangbo\nbecause when drop table, we need to prevent that other thread drop table or create table too. but for get table, we just need to ensure that the get table operation is thread safe, and the final result is ok, we don't purse the strict consistency here for  better performance.", "author": "caiconghui", "createdAt": "2020-12-04T13:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2NzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4NDg2MA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r536084860", "bodyText": "Another consideration is to avoid deadlock\uff0c all lock sequence is db lock -> table lock -> other lock, and if we has get table lock and sometimes need to get table again from db, there may cause dead lock, so db get table operation not get db read lock anymore", "author": "caiconghui", "createdAt": "2020-12-04T13:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2NzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwOTAyMA==", "url": "https://github.com/apache/incubator-doris/pull/3775#discussion_r536109020", "bodyText": "I get, you mean Performance is ahead of NPE.\nFor the second point about lock sequence .\nI think it should become programming specifications for Doris.\n1 If try to lock multiple tables or dbs, it should use getXXXInOrderMethod.\n2 If try to lock different type locks, lock sequence should be  guaranteed.\n3 The appearance of nested locks of the same type should be avoided.", "author": "wangbo", "createdAt": "2020-12-04T13:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2NzEwMg=="}], "type": "inlineReview"}, {"oid": "1a02c135df7f569172863429628b7083cb129526", "url": "https://github.com/apache/incubator-doris/commit/1a02c135df7f569172863429628b7083cb129526", "message": "Add some comment for the usage of MetaLockUtils", "committedDate": "2020-12-28T02:55:13Z", "type": "forcePushed"}, {"oid": "29ac965acaf01113e86a761b691ac80ed4b975df", "url": "https://github.com/apache/incubator-doris/commit/29ac965acaf01113e86a761b691ac80ed4b975df", "message": "apply fix patch", "committedDate": "2021-01-11T07:02:25Z", "type": "forcePushed"}, {"oid": "a982111ccca73b5109127e5f61d7da4cfe5e1dfd", "url": "https://github.com/apache/incubator-doris/commit/a982111ccca73b5109127e5f61d7da4cfe5e1dfd", "message": "Support table level read and write lock", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "944f9dc89e5f8f6b432f56417bb25867d8edb5a7", "url": "https://github.com/apache/incubator-doris/commit/944f9dc89e5f8f6b432f56417bb25867d8edb5a7", "message": "Use table lock to replace db lock in some functions", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "08a71144348ed496cd7aee8a9c488cd2ac7d9eba", "url": "https://github.com/apache/incubator-doris/commit/08a71144348ed496cd7aee8a9c488cd2ac7d9eba", "message": "use table write lock to replace db write lock", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "5118571e4dd32ef905250d6e654121cc0a4ee448", "url": "https://github.com/apache/incubator-doris/commit/5118571e4dd32ef905250d6e654121cc0a4ee448", "message": "remove some unused temp code", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "1354d056e8218bd394f58ad03ee05baa38b81385", "url": "https://github.com/apache/incubator-doris/commit/1354d056e8218bd394f58ad03ee05baa38b81385", "message": "use table lock to replace db lock", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "cffcbbd2d4b384372321dd4061cf3b8395892744", "url": "https://github.com/apache/incubator-doris/commit/cffcbbd2d4b384372321dd4061cf3b8395892744", "message": "Continue to use table lock to replace db lock", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "3763e582f230a76dd6b62fe6392b4a8929f433cb", "url": "https://github.com/apache/incubator-doris/commit/3763e582f230a76dd6b62fe6392b4a8929f433cb", "message": "finish to replace db lock by table lock", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "e13b952a7a3870928d268595b88d6794d78980eb", "url": "https://github.com/apache/incubator-doris/commit/e13b952a7a3870928d268595b88d6794d78980eb", "message": "fix unit test", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "c2ff4432eaee19d879f6a0547fc37cb929f124cf", "url": "https://github.com/apache/incubator-doris/commit/c2ff4432eaee19d879f6a0547fc37cb929f124cf", "message": "add null check for olap_table", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "06467838b7186d8a8bbc3231163f5e3e9ad12888", "url": "https://github.com/apache/incubator-doris/commit/06467838b7186d8a8bbc3231163f5e3e9ad12888", "message": "fix merge", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "f6481957664ef0b81e8652bd2ac646b8c2739de8", "url": "https://github.com/apache/incubator-doris/commit/f6481957664ef0b81e8652bd2ac646b8c2739de8", "message": "modify .gitignore content", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "dd9952d3c6008585558dbb02090a35629bc7dbbc", "url": "https://github.com/apache/incubator-doris/commit/dd9952d3c6008585558dbb02090a35629bc7dbbc", "message": "fix Alter Class", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "d98756ee42101b52fb95bf88bf27d3d6a5514901", "url": "https://github.com/apache/incubator-doris/commit/d98756ee42101b52fb95bf88bf27d3d6a5514901", "message": "Fix AlterJobV2 and MaterializedViewHandler", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "6ec9c842c13b96fead044b41d6e29a7c8eaf0c13", "url": "https://github.com/apache/incubator-doris/commit/6ec9c842c13b96fead044b41d6e29a7c8eaf0c13", "message": "Fix RollupJob", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "721a8400d03c4ffe994227121fc9d896ba399de4", "url": "https://github.com/apache/incubator-doris/commit/721a8400d03c4ffe994227121fc9d896ba399de4", "message": "fix RollupJobV2", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "f76aa9b09a9aa13b0962d9ee860e029ad00733ab", "url": "https://github.com/apache/incubator-doris/commit/f76aa9b09a9aa13b0962d9ee860e029ad00733ab", "message": "fix cancel", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "61676849d04888c74f9fa151e62dabf56bf24efc", "url": "https://github.com/apache/incubator-doris/commit/61676849d04888c74f9fa151e62dabf56bf24efc", "message": "fix SchemaChangeJobV2", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "a25bb5888479a043b8dd30805b9ef78031d38e7a", "url": "https://github.com/apache/incubator-doris/commit/a25bb5888479a043b8dd30805b9ef78031d38e7a", "message": "fix", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "92dfd35fbceb7fc46c7a5e9668ecc91f74fde901", "url": "https://github.com/apache/incubator-doris/commit/92dfd35fbceb7fc46c7a5e9668ecc91f74fde901", "message": "fix DeleteHandler", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "e40783a3372612be4a90ed2c0d409d026069ea3e", "url": "https://github.com/apache/incubator-doris/commit/e40783a3372612be4a90ed2c0d409d026069ea3e", "message": "fix test", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "746e85a246838eac7e8853a4afad81b464c1c987", "url": "https://github.com/apache/incubator-doris/commit/746e85a246838eac7e8853a4afad81b464c1c987", "message": "fix conflict after rebasing mater", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "c824f7cb93e54931dd8a62b5405779b33cfb4d5a", "url": "https://github.com/apache/incubator-doris/commit/c824f7cb93e54931dd8a62b5405779b33cfb4d5a", "message": "fix ReportHandler", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "3a57f8d08fe4abda7bc8b01442fba6b9cee63140", "url": "https://github.com/apache/incubator-doris/commit/3a57f8d08fe4abda7bc8b01442fba6b9cee63140", "message": "fix unit test failed for AlterTest", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "9357dc0d0dcb666f2081a7849f8a94e50e5ed8e4", "url": "https://github.com/apache/incubator-doris/commit/9357dc0d0dcb666f2081a7849f8a94e50e5ed8e4", "message": "fix", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "461335b5aba98ad2918f79adb775e335d95c63cc", "url": "https://github.com/apache/incubator-doris/commit/461335b5aba98ad2918f79adb775e335d95c63cc", "message": "Add MetaLockUtils and fix some table lock level", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "40f5cf1ce1e0bd078a23d0d761772b14e1b32b0d", "url": "https://github.com/apache/incubator-doris/commit/40f5cf1ce1e0bd078a23d0d761772b14e1b32b0d", "message": "Fix unittest for AlterTest failed", "committedDate": "2021-01-12T07:58:06Z", "type": "commit"}, {"oid": "d3c287cd6d10023fd1f2117eb4fccb591e8d09f2", "url": "https://github.com/apache/incubator-doris/commit/d3c287cd6d10023fd1f2117eb4fccb591e8d09f2", "message": "Change db level lock to table level lock for query", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "1860b70ce5b2a90777bc9fef4dd1159230c322a1", "url": "https://github.com/apache/incubator-doris/commit/1860b70ce5b2a90777bc9fef4dd1159230c322a1", "message": "fix unittest failed", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "46b8d0459dd33f4c654f86a876194db0fb34edfe", "url": "https://github.com/apache/incubator-doris/commit/46b8d0459dd33f4c654f86a876194db0fb34edfe", "message": "fix conflict for table lock and db lock", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "dc877535de1d0b0f5bb8d97a8547de82ff27464c", "url": "https://github.com/apache/incubator-doris/commit/dc877535de1d0b0f5bb8d97a8547de82ff27464c", "message": "fix unittest failed", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "07d7314e8cf12fc2840a980397b23a33ae5738b0", "url": "https://github.com/apache/incubator-doris/commit/07d7314e8cf12fc2840a980397b23a33ae5738b0", "message": "fix unit test failed", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "6a983540b048297f5d793f2c3d52e4d2e153aa65", "url": "https://github.com/apache/incubator-doris/commit/6a983540b048297f5d793f2c3d52e4d2e153aa65", "message": "Fix SparkLoadJobTest Failed", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "b3b30a75c7377053dd3881618264c8d081d9d70b", "url": "https://github.com/apache/incubator-doris/commit/b3b30a75c7377053dd3881618264c8d081d9d70b", "message": "Fix save image lock", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "619b71cb15599bd9a015155d1922df56a770957f", "url": "https://github.com/apache/incubator-doris/commit/619b71cb15599bd9a015155d1922df56a770957f", "message": "Add unit test for MetaLockUtils", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "8fb1e329c56a993c609335368f3fa660dd32f357", "url": "https://github.com/apache/incubator-doris/commit/8fb1e329c56a993c609335368f3fa660dd32f357", "message": "use MetadataLockUtils to lock table when finish transaction", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "11e4e07052268206f44aeb85cb67814d2f7fbaa3", "url": "https://github.com/apache/incubator-doris/commit/11e4e07052268206f44aeb85cb67814d2f7fbaa3", "message": "remove useless code of dropTableWithLock for Database", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "1b089e40d678926205811ecdedd56f8c60c20ec7", "url": "https://github.com/apache/incubator-doris/commit/1b089e40d678926205811ecdedd56f8c60c20ec7", "message": "remove useless db read lock", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "841d3f88daba40579d5d44a5f6130d4e136f0c1d", "url": "https://github.com/apache/incubator-doris/commit/841d3f88daba40579d5d44a5f6130d4e136f0c1d", "message": "remove useless db read lock and change some db read lock to table locks", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "520cd273fdb196ad5eae1f21f9ffcb63c76100d2", "url": "https://github.com/apache/incubator-doris/commit/520cd273fdb196ad5eae1f21f9ffcb63c76100d2", "message": "fix", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "a2faf9d395b0c70a61900442cdcb576089ccdf10", "url": "https://github.com/apache/incubator-doris/commit/a2faf9d395b0c70a61900442cdcb576089ccdf10", "message": "fix", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "26f39d1f923bf52f25ec15c09ea5775ad4590524", "url": "https://github.com/apache/incubator-doris/commit/26f39d1f923bf52f25ec15c09ea5775ad4590524", "message": "fix", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "e518f1e1cd4a5b05298cd5ff0f15f0feffc4ff33", "url": "https://github.com/apache/incubator-doris/commit/e518f1e1cd4a5b05298cd5ff0f15f0feffc4ff33", "message": "Fix dead lock bug", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "7563bfbc0b0bc4f684071050f8ef3ad834fad909", "url": "https://github.com/apache/incubator-doris/commit/7563bfbc0b0bc4f684071050f8ef3ad834fad909", "message": "fix unit test failed for SelectStmt", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "7dfc2f8612383ac395cd8b8d0665aa935f74c330", "url": "https://github.com/apache/incubator-doris/commit/7dfc2f8612383ac395cd8b8d0665aa935f74c330", "message": "Fix by review", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "63195339ad1ba0ee1598eb3511b03744ae0d0564", "url": "https://github.com/apache/incubator-doris/commit/63195339ad1ba0ee1598eb3511b03744ae0d0564", "message": "Add table lock when update BackendReportVersion in SystemInfoService", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "8bb19a231982f4fed54f1dfdc71c518a47c0b2c0", "url": "https://github.com/apache/incubator-doris/commit/8bb19a231982f4fed54f1dfdc71c518a47c0b2c0", "message": "change db level lock to table lock level in http2", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "b4b680790f1548548ef350b2b8efb091b9d13faf", "url": "https://github.com/apache/incubator-doris/commit/b4b680790f1548548ef350b2b8efb091b9d13faf", "message": "Fix broker load failed bug and add unit test for db", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "b2f55d756fa12b888cf44d69eaa30a58342b3d26", "url": "https://github.com/apache/incubator-doris/commit/b2f55d756fa12b888cf44d69eaa30a58342b3d26", "message": "fix", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "faa6eb24a1d5a4bff4aed3202c8c468fd667f07c", "url": "https://github.com/apache/incubator-doris/commit/faa6eb24a1d5a4bff4aed3202c8c468fd667f07c", "message": "Add some comment for the usage of MetaLockUtils", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "56b8d3159e8fde9a54a0e6cfca43c970aa0ee51f", "url": "https://github.com/apache/incubator-doris/commit/56b8d3159e8fde9a54a0e6cfca43c970aa0ee51f", "message": "apply fix patch", "committedDate": "2021-01-12T07:58:07Z", "type": "commit"}, {"oid": "56b8d3159e8fde9a54a0e6cfca43c970aa0ee51f", "url": "https://github.com/apache/incubator-doris/commit/56b8d3159e8fde9a54a0e6cfca43c970aa0ee51f", "message": "apply fix patch", "committedDate": "2021-01-12T07:58:07Z", "type": "forcePushed"}]}