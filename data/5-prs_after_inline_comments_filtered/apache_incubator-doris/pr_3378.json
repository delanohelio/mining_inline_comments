{"pr_number": 3378, "pr_title": "Forbidden correlated having clause", "pr_createdAt": "2020-04-22T07:03:33Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3378", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MTU2OQ==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r412851569", "bodyText": "It is work for function call?\nFor example, if user input:\n\"create view test_view (h1, h2) as select function(a, b), col2 from testTbl\"\nwill become\n\"select function(a, b) as h1, col2 as h2 from (select function(a, b), col2 from testTbl)\"", "author": "xy720", "createdAt": "2020-04-22T10:09:41Z", "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();\n+\n+        originalViewDef = lowerCaseOriginSql.substring(lowerCaseOriginSql.indexOf(KW_AS) + 3);\n+        LOG.debug(\"origin view def sql is {}\", originalViewDef);\n \n         if (cols == null) {\n             inlineViewDef = originalViewDef;\n+            LOG.debug(\"inline view def sql is {}\", inlineViewDef);\n             return;\n         }\n \n         Analyzer tmpAnalyzer = new Analyzer(analyzer);\n         List<String> colNames = cols.stream().map(c -> c.getColName()).collect(Collectors.toList());\n         cloneStmt.substituteSelectList(tmpAnalyzer, colNames);\n-        inlineViewDef = cloneStmt.toSql();\n-\n-//        StringBuilder sb = new StringBuilder();\n-//        sb.append(\"SELECT \");\n-//        for (int i = 0; i < finalCols.size(); ++i) {\n-//            if (i != 0) {\n-//                sb.append(\", \");\n-//            }\n-//            String colRef = viewDefStmt.getColLabels().get(i);\n-//            if (!colRef.startsWith(\"`\")) {\n-//                colRef = \"`\" + colRef + \"`\";\n-//            }\n-//            String colAlias = finalCols.get(i).getName();\n-//            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));\n-//        }\n-//        sb.append(String.format(\" FROM (%s) %s\", originalViewDef, tableName.getTbl()));\n-//        inlineViewDef = sb.toString();\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"SELECT \");\n+        for (int i = 0; i < colNames.size(); ++i) {\n+            if (i != 0) {\n+                sb.append(\", \");\n+            }\n+            String colRef = viewDefStmt.getColLabels().get(i);\n+            if (!colRef.startsWith(\"`\")) {\n+                colRef = \"`\" + colRef + \"`\";\n+            }\n+            String colAlias = colNames.get(i);\n+            sb.append(String.format(\"`%s`.%s AS `%s`\", tableName.getTbl(), colRef, colAlias));", "originalCommit": "0c0483632b5ac8dd6422c3656e380133e9e773b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0MjQyNg==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413742426", "bodyText": "This change has been removed.", "author": "EmmyMiao87", "createdAt": "2020-04-23T11:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1MTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwODIwNg==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413008206", "bodyText": "I think you can not just call toLowerCase(), what if the statement is\nselect * from tbl where k1 like \"%ABC%\";\n\nAnd why not just save the entire origin statement with CREATE VIEW AS inside it? And you can just get the QueryStmt part when parsing it again.", "author": "morningman", "createdAt": "2020-04-22T13:59:44Z", "path": "fe/src/main/java/org/apache/doris/analysis/BaseViewStmt.java", "diffHunk": "@@ -109,33 +112,37 @@ protected void createColumnAndViewDefs(Analyzer analyzer) throws AnalysisExcepti\n         }\n \n         // format view def string\n-        originalViewDef = viewDefStmt.toSql();\n+        String lowerCaseOriginSql = getOriginSql().toLowerCase();", "originalCommit": "0c0483632b5ac8dd6422c3656e380133e9e773b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxMjcwNA==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413012704", "bodyText": "There maybe ; inside the query statement", "author": "morningman", "createdAt": "2020-04-22T14:05:11Z", "path": "fe/src/main/java/org/apache/doris/qe/ConnectProcessor.java", "diffHunk": "@@ -225,7 +226,13 @@ private void handleQuery() {\n         SqlScanner input = new SqlScanner(new StringReader(originStmt), ctx.getSessionVariable().getSqlMode());\n         SqlParser parser = new SqlParser(input);\n         try {\n-            return SqlParserUtils.getMultiStmts(parser);\n+            List<StatementBase> result = SqlParserUtils.getMultiStmts(parser);\n+            String[] originStmtList = originStmt.split(\";\");", "originalCommit": "0c0483632b5ac8dd6422c3656e380133e9e773b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MzY2Ng==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413053666", "bodyText": "Why change the order?", "author": "kangkaisen", "createdAt": "2020-04-22T14:53:12Z", "path": "fe/src/main/java/org/apache/doris/analysis/LimitElement.java", "diffHunk": "@@ -42,9 +42,9 @@ public LimitElement(long limit) {\n         offset = 0;\n     }\n \n-    public LimitElement(long offset, long limit) {\n-        this.offset = offset;\n+    public LimitElement(long limit, long offset) {", "originalCommit": "0c0483632b5ac8dd6422c3656e380133e9e773b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0MjU3NQ==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413742575", "bodyText": "changed", "author": "EmmyMiao87", "createdAt": "2020-04-23T11:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MzY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NDIwOQ==", "url": "https://github.com/apache/incubator-doris/pull/3378#discussion_r413054209", "bodyText": "Remove.", "author": "kangkaisen", "createdAt": "2020-04-22T14:53:48Z", "path": "fe/src/main/java/org/apache/doris/analysis/SelectList.java", "diffHunk": "@@ -98,6 +98,24 @@ public void rewriteExprs(ExprRewriter rewriter, Analyzer analyzer)\n             item.setExpr(rewriter.rewrite(item.getExpr(), analyzer));\n         }\n     }\n+\n+    public String toOriginSql() {\n+        // Select list\n+        StringBuilder strBuilder = new StringBuilder();\n+        strBuilder.append(\"SELECT \");\n+        if (isDistinct) {\n+            strBuilder.append(\"DISTINCT \");\n+        }\n+        for (int i = 0; i < items.size(); ++i) {\n+            // strBuilder.append(selectList.getItems().get(i).toSql());", "originalCommit": "0c0483632b5ac8dd6422c3656e380133e9e773b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d082e336309138373ee45a52342f5b59848f694", "url": "https://github.com/apache/incubator-doris/commit/7d082e336309138373ee45a52342f5b59848f694", "message": "Fixed #3377\n\nThe correlated slot ref should be bound by the agg tuple of outer query.\nHowever, the correlated having clause should not be analyzed correctly so the result is incorrect.\nFor example: SELECT k1 FROM test GROUP BY k1 HAVING EXISTS(SELECT k1 FROM baseall GROUP BY k1 HAVING SUM(test.k1) = k1);\nThe correlated predicate is not executed.\n\nThe limit offset should be rewritten also when there is subquery in having clause.\nFor example: select k1, count(*) cnt from test group by k1 having k1 in (select k1 from baseall order by k1 limit 2) order by k1 limit 5 offset 3;\nThe new stmt should has a limit element with offset.\n\nChange-Id: I65c361af54803eac4288f8b9f1e0aa4bfc0b3d4c", "committedDate": "2020-04-23T11:01:43Z", "type": "commit"}, {"oid": "7d082e336309138373ee45a52342f5b59848f694", "url": "https://github.com/apache/incubator-doris/commit/7d082e336309138373ee45a52342f5b59848f694", "message": "Fixed #3377\n\nThe correlated slot ref should be bound by the agg tuple of outer query.\nHowever, the correlated having clause should not be analyzed correctly so the result is incorrect.\nFor example: SELECT k1 FROM test GROUP BY k1 HAVING EXISTS(SELECT k1 FROM baseall GROUP BY k1 HAVING SUM(test.k1) = k1);\nThe correlated predicate is not executed.\n\nThe limit offset should be rewritten also when there is subquery in having clause.\nFor example: select k1, count(*) cnt from test group by k1 having k1 in (select k1 from baseall order by k1 limit 2) order by k1 limit 5 offset 3;\nThe new stmt should has a limit element with offset.\n\nChange-Id: I65c361af54803eac4288f8b9f1e0aa4bfc0b3d4c", "committedDate": "2020-04-23T11:01:43Z", "type": "forcePushed"}, {"oid": "b1952e363a5c91d5f26dd3a6478dd30644e4c61f", "url": "https://github.com/apache/incubator-doris/commit/b1952e363a5c91d5f26dd3a6478dd30644e4c61f", "message": "Add ut\n\nChange-Id: Id05fb757216d0e2669c01fb0fcdf01309d62d79e", "committedDate": "2020-04-24T06:09:02Z", "type": "commit"}]}