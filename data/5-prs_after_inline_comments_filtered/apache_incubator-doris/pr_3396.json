{"pr_number": 3396, "pr_title": "(#3395)calculate 'case when expr' when possible", "pr_createdAt": "2020-04-25T07:30:02Z", "pr_url": "https://github.com/apache/incubator-doris/pull/3396", "timeline": [{"oid": "8190a6c69817d192573e0a857e403ed737ee39da", "url": "https://github.com/apache/incubator-doris/commit/8190a6c69817d192573e0a857e403ed737ee39da", "message": "(#3395)calculate 'case when expr' when possible", "committedDate": "2020-04-25T07:27:47Z", "type": "commit"}, {"oid": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "url": "https://github.com/apache/incubator-doris/commit/595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "message": "add ut", "committedDate": "2020-04-25T13:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5MjU4NQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r415792585", "bodyText": "This is not right, the CaseExpr has multi child\n\noptional case expr\noptional list<when expr, then expr>\noptional else expr.\n\nThe following SQL will return wrong result after applying your rewrite rule:\nselect case when false then 2 when true then 3 else 0 end;\n\nExpect: 3, return 1.", "author": "morningman", "createdAt": "2020-04-27T13:02:09Z", "path": "fe/src/main/java/org/apache/doris/rewrite/FoldConstantsRule.java", "diffHunk": "@@ -48,6 +50,12 @@\n \n     @Override\n     public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n+        // evaluate case when expr\n+        if (expr instanceof CaseExpr && expr.getChild(0) instanceof BoolLiteral) {", "originalCommit": "595b5d46980b6d9a522d68f7c599f8a7ec181aa5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "url": "https://github.com/apache/incubator-doris/commit/507bd161dbb30944a9fd3069b6e001e58c7274a3", "message": "1 support case when and case xxx when\n2 add ut", "committedDate": "2020-04-29T05:24:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjI0Mw==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417402243", "bodyText": "you could use org.apache.commons.lang3.StringUtils.containsIgnoreCase", "author": "kangkaisen", "createdAt": "2020-04-29T15:23:31Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {\n+        SelectStmt selectStmt =\n+                (SelectStmt) UtFrameUtils.parseAndAnalyzeStmt(sql, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.rewriteStmt(selectStmt, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.reAnalyze(selectStmt, connectContext);\n+        return selectStmt;\n+    }\n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {\n+        // basic test\n+        String caseWhenSql = \"select \"\n+                + \"case when date_format(now(),'%H%i')  < 123 then 1 else 0 end as col \"\n+                + \"from test.test1 \"\n+                + \"where time = case when date_format(now(),'%H%i')  < 123 then date_format(date_sub(now(),2),'%Y%m%d') else date_format(date_sub(now(),1),'%Y%m%d') end\";\n+        SelectStmt selectStmt = getAnalyzedAndRewritedStmt(caseWhenSql);\n+        Assert.assertTrue(!selectStmt.toSql().contains(\"CASE WHEN\") && !selectStmt.toSql().contains(\"case when\"));", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzA2Nw==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417717067", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-04-30T02:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417404580", "bodyText": "Don't need to add this method. you could use getSQLPlanOrErrorMsg method.", "author": "kangkaisen", "createdAt": "2020-04-29T15:26:36Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MTM5NQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417741395", "bodyText": "getSQLPlanOrErrorMsg   is unable to meet demand.What we want is to check whether the plan changes as our wish,so we need a  tools not only retwrite the plan but alse contains the customized check logic.It's obviously that plain sql is directly,but not a common general method,because the print format may change.\nMaybe list a todo here?\nAnyway,I think the result of getSQLPlanOrErrorMsg   can't meet demand", "author": "wangbo", "createdAt": "2020-04-30T04:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NTg4OQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r418495889", "bodyText": "I don't think so.\nDirectly check final FE sql plan is more accurate:\n\nFE send BE is the sql plan\nYour work do indeed is changing partial plan to constant.\n\n\nWhat we want is to check whether the plan changes as our wish\n\nSo you should use getSQLPlanOrErrorMsg \n\nI think the result of getSQLPlanOrErrorMsg can't meet demand\n\nWhy couldn't meet you demand? I think which could.", "author": "kangkaisen", "createdAt": "2020-05-01T10:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDk5MA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417404990", "bodyText": "Please move this test to ConstantExpressTest", "author": "kangkaisen", "createdAt": "2020-04-29T15:27:06Z", "path": "fe/src/test/java/org/apache/doris/planner/QueryPlanTest.java", "diffHunk": "@@ -504,4 +504,106 @@ public void testDateTypeEquality() throws Exception {\n         Catalog.getCurrentCatalog().getLoadManager().createLoadJobV1FromStmt(loadStmt, EtlJobType.HADOOP,\n                 System.currentTimeMillis());\n     }\n+\n+    private SelectStmt getAnalyzedAndRewritedStmt(String sql) throws Exception {\n+        SelectStmt selectStmt =\n+                (SelectStmt) UtFrameUtils.parseAndAnalyzeStmt(sql, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.rewriteStmt(selectStmt, connectContext);\n+        selectStmt = (SelectStmt) UtFrameUtils.reAnalyze(selectStmt, connectContext);\n+        return selectStmt;\n+    }\n+\n+    @Test\n+    public void testConvertCaseWhenToConstant() throws Exception {", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODM1OQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417758359", "bodyText": "case when expr rewrite more complicate than convert  a function to constants,it will change the query plan structure and dependency real doris table, so I think put UT in QueryPlanTest is better", "author": "wangbo", "createdAt": "2020-04-30T05:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMDAwNA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417410004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //pre return when the `when expr` can't be converted to constants\n          \n          \n            \n                    // Early return when the `when expr` can't be converted to constants", "author": "kangkaisen", "createdAt": "2020-04-29T15:33:27Z", "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -251,4 +257,72 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         }\n         return exprs;\n     }\n+\n+    // this method just compare literal value and not completely consistent with be,for two cases\n+    // 1 not deal float\n+    // 2 just compare literal value with same type. for a example sql 'select case when 123 then '1' else '2' end as col'\n+    //      for be will return '1', because be only regard 0 as false\n+    //      but for current LiteralExpr.compareLiteral, `123`' won't be regard as true\n+    //  the case which two values has different type left to be\n+    public static Expr computeCaseExpr(CaseExpr expr) {\n+        LiteralExpr caseExpr;\n+        int startIndex = 0;\n+        int size = expr.getChildren().size() - 1;\n+        if (expr.hasCaseExpr()) {\n+            // just deal literal here\n+            // and avoid `float compute` in java,float should be dealt in be\n+            Expr caseChildExpr = expr.getChild(0);\n+            if (!caseChildExpr.isLiteral()\n+                    || caseChildExpr instanceof DecimalLiteral || caseChildExpr instanceof FloatLiteral) {\n+                return expr;\n+            }\n+            caseExpr = (LiteralExpr) expr.getChild(0);\n+            startIndex++;\n+            size--;\n+        } else {\n+            caseExpr = new BoolLiteral(true);\n+        }\n+\n+        if (expr.hasElseExpr) {\n+            size--;\n+        }\n+\n+        //pre return when the `when expr` can't be converted to constants", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxNzE3MQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417717171", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-04-30T02:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMDAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNTg1MA==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417415850", "bodyText": "would better rename startIndex  and size .\nThe size compute logic seems not consistent with BE \uff1f\n        int loop_start = has_case_expr() ? 1 : 0; \\\n        int loop_end = (has_else_expr()) ? num_children - 1 : num_children; \\", "author": "kangkaisen", "createdAt": "2020-04-29T15:41:22Z", "path": "fe/src/main/java/org/apache/doris/analysis/CaseExpr.java", "diffHunk": "@@ -251,4 +257,72 @@ public void analyzeImpl(Analyzer analyzer) throws AnalysisException {\n         }\n         return exprs;\n     }\n+\n+    // this method just compare literal value and not completely consistent with be,for two cases\n+    // 1 not deal float\n+    // 2 just compare literal value with same type. for a example sql 'select case when 123 then '1' else '2' end as col'\n+    //      for be will return '1', because be only regard 0 as false\n+    //      but for current LiteralExpr.compareLiteral, `123`' won't be regard as true\n+    //  the case which two values has different type left to be\n+    public static Expr computeCaseExpr(CaseExpr expr) {\n+        LiteralExpr caseExpr;\n+        int startIndex = 0;", "originalCommit": "507bd161dbb30944a9fd3069b6e001e58c7274a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczMDQ3Nw==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r417730477", "bodyText": "yes, be logic is right.I'll fix it", "author": "wangbo", "createdAt": "2020-04-30T03:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNTg1MA=="}], "type": "inlineReview"}, {"oid": "cd9bedd5801e10b039cddcaaa241900750764777", "url": "https://github.com/apache/incubator-doris/commit/cd9bedd5801e10b039cddcaaa241900750764777", "message": "1 support skip null\n2 add more ut\n3 fix logic bug", "committedDate": "2020-04-30T05:31:00Z", "type": "commit"}, {"oid": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "url": "https://github.com/apache/incubator-doris/commit/1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "message": "1 use UtFrameUtils.getSQLPlanOrErrorMsg to check plan\n2 clone a new expr when return CaseExpr which has been changed", "committedDate": "2020-05-02T08:10:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NTM5MQ==", "url": "https://github.com/apache/incubator-doris/pull/3396#discussion_r418955391", "bodyText": "These two methods could also be removed?", "author": "kangkaisen", "createdAt": "2020-05-02T12:51:10Z", "path": "fe/src/test/java/org/apache/doris/utframe/UtFrameUtils.java", "diffHunk": "@@ -96,6 +100,34 @@ public static StatementBase parseAndAnalyzeStmt(String originStmt, ConnectContex\n         return statementBase;\n     }\n \n+    public static StatementBase rewriteStmt(StatementBase stmt, ConnectContext ctx) throws AnalysisException {", "originalCommit": "1d18a2f6c6248ef6c0282bb60a3daab3e113599a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "url": "https://github.com/apache/incubator-doris/commit/4d3c68150326899cbe562a45ccb33b65ff6bbb05", "message": "remove useless method", "committedDate": "2020-05-03T05:39:32Z", "type": "commit"}, {"oid": "4d3c68150326899cbe562a45ccb33b65ff6bbb05", "url": "https://github.com/apache/incubator-doris/commit/4d3c68150326899cbe562a45ccb33b65ff6bbb05", "message": "remove useless method", "committedDate": "2020-05-03T05:39:32Z", "type": "forcePushed"}, {"oid": "44b7602417d3cd825caa356767f266352060339c", "url": "https://github.com/apache/incubator-doris/commit/44b7602417d3cd825caa356767f266352060339c", "message": "[UT] Fix UT bug (#3456)\n\nSSD cool downtime shouldn't be fix time in UT;", "committedDate": "2020-05-05T06:08:19Z", "type": "commit"}, {"oid": "b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22", "url": "https://github.com/apache/incubator-doris/commit/b7e6aa7dd91d69adb27b4fc6aaa6dd0061272b22", "message": "Merge branch 'upstream_master' into eval_case_when_expr", "committedDate": "2020-05-05T06:13:19Z", "type": "commit"}, {"oid": "bb256e9d73d2cbd142e811e07806bf9a92038b6e", "url": "https://github.com/apache/incubator-doris/commit/bb256e9d73d2cbd142e811e07806bf9a92038b6e", "message": "Merge branch 'upstream_master' into eval_case_when_expr", "committedDate": "2020-05-06T12:57:20Z", "type": "commit"}]}