{"pr_number": 2800, "pr_title": "Support new show functions syntax to make user search function more conveniently", "pr_createdAt": "2020-01-19T13:24:15Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2800", "timeline": [{"oid": "79184053f869beec1e813365ad013c4b5d5ffaf4", "url": "https://github.com/apache/incubator-doris/commit/79184053f869beec1e813365ad013c4b5d5ffaf4", "message": "Support new Show functions syntax to make functions more friendly for user to use", "committedDate": "2020-01-18T13:19:33Z", "type": "commit"}, {"oid": "d0348130ad8f551b9354b1f9fce148e93dcf977f", "url": "https://github.com/apache/incubator-doris/commit/d0348130ad8f551b9354b1f9fce148e93dcf977f", "message": "add show functions statement test", "committedDate": "2020-01-19T12:41:57Z", "type": "commit"}, {"oid": "2605af1bf162af9af0898302b8905bd4fda552ac", "url": "https://github.com/apache/incubator-doris/commit/2605af1bf162af9af0898302b8905bd4fda552ac", "message": "add doc for show functions statement", "committedDate": "2020-01-19T13:17:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTYzNw==", "url": "https://github.com/apache/incubator-doris/pull/2800#discussion_r368301637", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // sort function rows by fisrt column asec\n          \n          \n            \n                    // sort function rows by first column asc", "author": "morningman", "createdAt": "2020-01-19T15:19:11Z", "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "diffHunk": "@@ -302,44 +304,77 @@ private void handleShowEngines() {\n         resultSet = new ShowResultSet(showStmt.getMetaData(), rowSet);\n     }\n \n-    // Handle show function\n-    private void handleShowFunction() throws AnalysisException {\n-        ShowFunctionStmt showStmt = (ShowFunctionStmt) stmt;\n-\n+    // Handle show functions\n+    private void handleShowFunctions() throws AnalysisException {\n+        ShowFunctionsStmt showStmt = (ShowFunctionsStmt) stmt;\n         Database db = ctx.getCatalog().getDb(showStmt.getDbName());\n         if (db == null) {\n             ErrorReport.reportAnalysisException(ErrorCode.ERR_BAD_DB_ERROR, showStmt.getDbName());\n         }\n-        List<Function> functions = db.getFunctions();\n+        List<Function> functions = showStmt.getIsBuiltin() ? ctx.getCatalog().getBuiltinFunctions() :\n+            db.getFunctions();\n \n-        List<List<String>> rowSet = Lists.newArrayList();\n+        List<List<Comparable>> rowSet = Lists.newArrayList();\n         for (Function function : functions) {\n-            List<String> row = Lists.newArrayList();\n-            // signature\n-            row.add(function.getSignature());\n-            // return type\n-            row.add(function.getReturnType().getPrimitiveType().toString());\n-            // function type\n-            // intermediate type\n-            if (function instanceof ScalarFunction) {\n-                row.add(\"Scalar\");\n-                row.add(\"NULL\");\n-            } else {\n-                row.add(\"Aggregate\");\n-                AggregateFunction aggFunc = (AggregateFunction) function;\n-                Type intermediateType = aggFunc.getIntermediateType();\n-                if (intermediateType != null) {\n-                    row.add(intermediateType.getPrimitiveType().toString());\n-                } else {\n+            List<Comparable> row = Lists.newArrayList();\n+            if (showStmt.getIsVerbose()) {\n+                // signature\n+                row.add(function.getSignature());\n+                // return type\n+                row.add(function.getReturnType().getPrimitiveType().toString());\n+                // function type\n+                // intermediate type\n+                if (function instanceof ScalarFunction) {\n+                    row.add(\"Scalar\");\n                     row.add(\"NULL\");\n+                } else {\n+                    row.add(\"Aggregate\");\n+                    AggregateFunction aggFunc = (AggregateFunction) function;\n+                    Type intermediateType = aggFunc.getIntermediateType();\n+                    if (intermediateType != null) {\n+                        row.add(intermediateType.getPrimitiveType().toString());\n+                    } else {\n+                        row.add(\"NULL\");\n+                    }\n                 }\n+                // property\n+                row.add(function.getProperties());\n+            } else {\n+                row.add(function.functionName());\n+            }\n+\n+            // like predicate\n+            if (showStmt.getWild() == null || showStmt.like(function.functionName())) {\n+                rowSet.add(row);\n             }\n-            // property\n-            row.add(function.getProperties());\n-            rowSet.add(row);\n         }\n+\n+        // sort function rows by fisrt column asec", "originalCommit": "2605af1bf162af9af0898302b8905bd4fda552ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwMTY4MQ==", "url": "https://github.com/apache/incubator-doris/pull/2800#discussion_r368301681", "bodyText": "I think the row built here can be implemented in Function. eg:\nfunction.getInfo(row, isVerbose);", "author": "morningman", "createdAt": "2020-01-19T15:20:22Z", "path": "fe/src/main/java/org/apache/doris/qe/ShowExecutor.java", "diffHunk": "@@ -302,44 +304,77 @@ private void handleShowEngines() {\n         resultSet = new ShowResultSet(showStmt.getMetaData(), rowSet);\n     }\n \n-    // Handle show function\n-    private void handleShowFunction() throws AnalysisException {\n-        ShowFunctionStmt showStmt = (ShowFunctionStmt) stmt;\n-\n+    // Handle show functions\n+    private void handleShowFunctions() throws AnalysisException {\n+        ShowFunctionsStmt showStmt = (ShowFunctionsStmt) stmt;\n         Database db = ctx.getCatalog().getDb(showStmt.getDbName());\n         if (db == null) {\n             ErrorReport.reportAnalysisException(ErrorCode.ERR_BAD_DB_ERROR, showStmt.getDbName());\n         }\n-        List<Function> functions = db.getFunctions();\n+        List<Function> functions = showStmt.getIsBuiltin() ? ctx.getCatalog().getBuiltinFunctions() :\n+            db.getFunctions();\n \n-        List<List<String>> rowSet = Lists.newArrayList();\n+        List<List<Comparable>> rowSet = Lists.newArrayList();\n         for (Function function : functions) {\n-            List<String> row = Lists.newArrayList();\n-            // signature\n-            row.add(function.getSignature());\n-            // return type\n-            row.add(function.getReturnType().getPrimitiveType().toString());\n-            // function type\n-            // intermediate type\n-            if (function instanceof ScalarFunction) {\n-                row.add(\"Scalar\");\n-                row.add(\"NULL\");\n-            } else {\n-                row.add(\"Aggregate\");\n-                AggregateFunction aggFunc = (AggregateFunction) function;\n-                Type intermediateType = aggFunc.getIntermediateType();\n-                if (intermediateType != null) {\n-                    row.add(intermediateType.getPrimitiveType().toString());\n-                } else {\n+            List<Comparable> row = Lists.newArrayList();", "originalCommit": "2605af1bf162af9af0898302b8905bd4fda552ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96da35e9bb01671f4454c818ed0059c071b08d2f", "url": "https://github.com/apache/incubator-doris/commit/96da35e9bb01671f4454c818ed0059c071b08d2f", "message": "fix", "committedDate": "2020-01-20T02:19:29Z", "type": "commit"}, {"oid": "e8697b6272c89874cbbae58c21f2b65b2e466759", "url": "https://github.com/apache/incubator-doris/commit/e8697b6272c89874cbbae58c21f2b65b2e466759", "message": "fix codestyle for ShowFunctionsStmtTest.java", "committedDate": "2020-01-20T04:56:31Z", "type": "commit"}]}