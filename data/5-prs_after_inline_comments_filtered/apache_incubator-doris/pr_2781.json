{"pr_number": 2781, "pr_title": "Batch Operate Rollup table in Doris #2671", "pr_createdAt": "2020-01-16T12:09:53Z", "pr_url": "https://github.com/apache/incubator-doris/pull/2781", "timeline": [{"oid": "82d65cb2b300bb54de646b68eabf2d35191377db", "url": "https://github.com/apache/incubator-doris/commit/82d65cb2b300bb54de646b68eabf2d35191377db", "message": "support batch add rollup", "committedDate": "2020-01-16T10:29:42Z", "type": "commit"}, {"oid": "7bc751811f5482680aa6445cde1d75f877238e61", "url": "https://github.com/apache/incubator-doris/commit/7bc751811f5482680aa6445cde1d75f877238e61", "message": "Merge branch 'upstream_master' into batch_alter_rollup_pr", "committedDate": "2020-01-16T10:50:13Z", "type": "commit"}, {"oid": "df75ebe304a90a5d31c6033bda99dd1af9152594", "url": "https://github.com/apache/incubator-doris/commit/df75ebe304a90a5d31c6033bda99dd1af9152594", "message": "fix code style", "committedDate": "2020-01-16T10:54:27Z", "type": "commit"}, {"oid": "f3f01aae2aaf50f14f46b9ea2f675d314f4f2315", "url": "https://github.com/apache/incubator-doris/commit/f3f01aae2aaf50f14f46b9ea2f675d314f4f2315", "message": "Batch Operate Rollup table in Doris #2671", "committedDate": "2020-01-16T11:59:33Z", "type": "commit"}, {"oid": "92e45053b0cecaf6d34ed274b551b123c7033483", "url": "https://github.com/apache/incubator-doris/commit/92e45053b0cecaf6d34ed274b551b123c7033483", "message": "fix ut error", "committedDate": "2020-01-17T06:49:53Z", "type": "commit"}, {"oid": "92e45053b0cecaf6d34ed274b551b123c7033483", "url": "https://github.com/apache/incubator-doris/commit/92e45053b0cecaf6d34ed274b551b123c7033483", "message": "fix ut error", "committedDate": "2020-01-17T06:49:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyNDMxMQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367924311", "bodyText": "max_running_rollup_job_num_per_table ?", "author": "kangkaisen", "createdAt": "2020-01-17T13:02:16Z", "path": "fe/src/main/java/org/apache/doris/common/Config.java", "diffHunk": "@@ -984,5 +984,11 @@\n      */\n     @ConfField(mutable = true, masterOnly = true)\n     public static boolean dynamic_partition_enable = false;\n+\n+    /*\n+     * control rollup job concurrent limit\n+     */\n+    @ConfField\n+    public static int max_running_rollup_job_num = 1;", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMzkxNA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368223914", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-01-18T12:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyNDMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0NTE5OQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367945199", "bodyText": "What's meaning of ops?", "author": "kangkaisen", "createdAt": "2020-01-17T13:53:31Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java", "diffHunk": "@@ -74,6 +75,7 @@\n     private Map<String, String> extProperties;\n     private String engineName;\n     private String comment;\n+    private List<AlterClause> ops;", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMzk0Mw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368223943", "bodyText": "or may be rollupOpts is better", "author": "wangbo", "createdAt": "2020-01-18T12:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0NTE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0NjY1Mg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367946652", "bodyText": "After java8. prefer to Optional", "author": "kangkaisen", "createdAt": "2020-01-17T13:56:48Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java", "diffHunk": "@@ -150,6 +184,7 @@ public CreateTableStmt(boolean ifNotExists,\n         this.comment = Strings.nullToEmpty(comment);\n \n         this.tableSignature = -1;\n+        this.ops = ops == null ? new ArrayList<>() : ops;", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0ODA5Nw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367948097", "bodyText": "could replace by CollectionUtils.isNotEmpty", "author": "kangkaisen", "createdAt": "2020-01-17T13:59:45Z", "path": "fe/src/main/java/org/apache/doris/analysis/CancelAlterTableStmt.java", "diffHunk": "@@ -71,6 +85,11 @@ public String toSql() {\n         StringBuilder stringBuilder = new StringBuilder();\n         stringBuilder.append(\"CANCEL ALTER \" + this.alterType);\n         stringBuilder.append(\" FROM \" + dbTableName.toSql());\n+        if (alterJobIdList != null && alterJobIdList.size() > 0) {", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMzk0OQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368223949", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-01-18T12:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0ODA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MDE3Mg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367950172", "bodyText": "This comment confuse me.\nsort rollup index -> successfully create rollup index ?", "author": "kangkaisen", "createdAt": "2020-01-17T14:04:20Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -858,4 +1160,57 @@ public void cancel(CancelStmt stmt) throws DdlException {\n             jobDone(rollupJob);\n         }\n     }\n+\n+    // There may be dependency relation between user batch input rollup index\n+    // e.g, user input rollup index: r1 from r2,r2 from r3 ;the input order must be r3,r2,r1\n+    // sort rollup index for two reasons:\n+    // 1. successfully create rollup index", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNDE5NQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368224195", "bodyText": "Actually, rollup index can't be created in catalog before its parent rollup created,so does rollup job runs;so we must first sort rollup index,then  create index work and run rollup job;\nI'll change the comment for better understand", "author": "wangbo", "createdAt": "2020-01-18T12:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MDE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MzAxNQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367953015", "bodyText": "For simple. I think we needn't introduce the Dependency concept. We could check the\nalter statement and require the from index must exist firstly, and then, we needn't consider the rollup job dependency.", "author": "kangkaisen", "createdAt": "2020-01-17T14:10:26Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -85,6 +90,71 @@ public MaterializedViewHandler() {\n         super(\"materialized view\");\n     }\n \n+\n+    // for batch submit rollup job, tableId -> jobId\n+    // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal,otherwrise is rollup\n+    private Map<Long, Set<Long>> tableNotFinalStateJobMap = new ConcurrentHashMap<>();\n+    // keep table's running job,used for concurrency limit\n+    private Map<Long, Set<Long>> tableRunningJobMap = new ConcurrentHashMap<>();\n+    // make sure that job's dependency just init once\n+    private volatile boolean hasBuildJobDependency = false;", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQyNjc3MA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368426770", "bodyText": "No,Dependency is necessary;\nBecause int both parent job is cancel or parent is not final case, we all can't find parent index in catalog.Only 'parent index can be seen in catalog' can't decide whether current rollup job is  ready to run", "author": "wangbo", "createdAt": "2020-01-20T08:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MzAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MzkzMQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367953931", "bodyText": "only use one write lock is enough.", "author": "kangkaisen", "createdAt": "2020-01-17T14:12:11Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -590,15 +767,130 @@ protected void runAfterCatalogReady() {\n         runAlterJobV2();\n     }\n \n+    private synchronized Map<Long, AlterJobV2> getAlterJobsCopy () {\n+        return new HashMap<>(alterJobsV2);\n+    }\n+\n+    private void removeJobFromRunningQueue(RollupJobV2 rollupJobV2) {\n+        Set<Long> runningJobIdSet = tableRunningJobMap.get(rollupJobV2.getTableId());\n+        if (runningJobIdSet != null) {\n+            runningJobIdSet.remove(rollupJobV2.getJobId());\n+            if (runningJobIdSet.size() == 0) {\n+                tableRunningJobMap.remove(rollupJobV2.getTableId());\n+            }\n+        }\n+    }\n+\n+    private void changeTableStatus(long dbId, long tableId, OlapTableState olapTableState) {\n+        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n+        db.readLock();", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNDQ3Ng==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368224476", "bodyText": "Write lock means lower concurrency than read lock;", "author": "wangbo", "createdAt": "2020-01-18T12:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NDY5Ng==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367954696", "bodyText": "Would better add a comment to explain why concurrent rollup job for one table could work.", "author": "kangkaisen", "createdAt": "2020-01-17T14:13:43Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -590,15 +767,130 @@ protected void runAfterCatalogReady() {\n         runAlterJobV2();\n     }\n \n+    private synchronized Map<Long, AlterJobV2> getAlterJobsCopy () {\n+        return new HashMap<>(alterJobsV2);\n+    }\n+\n+    private void removeJobFromRunningQueue(RollupJobV2 rollupJobV2) {\n+        Set<Long> runningJobIdSet = tableRunningJobMap.get(rollupJobV2.getTableId());\n+        if (runningJobIdSet != null) {\n+            runningJobIdSet.remove(rollupJobV2.getJobId());\n+            if (runningJobIdSet.size() == 0) {\n+                tableRunningJobMap.remove(rollupJobV2.getTableId());\n+            }\n+        }\n+    }\n+\n+    private void changeTableStatus(long dbId, long tableId, OlapTableState olapTableState) {\n+        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n+        db.readLock();\n+        try {\n+            OlapTable tbl = (OlapTable) db.getTable(tableId);\n+            if (tbl == null || tbl.getState() == olapTableState) {\n+                return;\n+            }\n+        } finally {\n+            db.readUnlock();\n+        }\n+\n+        db.writeLock();\n+        try {\n+            OlapTable tbl = (OlapTable) db.getTable(tableId);\n+            tbl.setState(olapTableState);\n+        } finally {\n+            db.writeUnlock();\n+        }\n+    }\n+\n+    // replay the alter job v2\n+    public void replayAlterJobV2(AlterJobV2 alterJob) {\n+        super.replayAlterJobV2(alterJob);\n+        if (!alterJob.isDone()) {\n+            addAlterJobV2ToTableNotFinalStateJobMap(alterJob);\n+            changeTableStatus(alterJob.getDbId(), alterJob.getTableId(), OlapTableState.ROLLUP);\n+        } else {\n+            int ret = removeAlterJobV2FromTableNotFinalStateJobMap(alterJob);\n+            if (ret == 0) {\n+                changeTableStatus(alterJob.getDbId(), alterJob.getTableId(), OlapTableState.NORMAL);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param rollupJobV2\n+     * @return\n+     *  true,parent job is finish or current job don't have parent job;\n+     *  false, parent job is cancelled or current job hasn't finished\n+     */\n+    private boolean checkRollupJobDependency(RollupJobV2 rollupJobV2) {\n+        RollupJobV2 parentJobV2 = (RollupJobV2) alterJobsV2.get(rollupJobV2.getParentRollupJobId());\n+        if (parentJobV2 != null) {\n+            // check whether current rollup job's parent rollup job is finished\n+            if (parentJobV2.getJobState() == AlterJobV2.JobState.CANCELLED) {\n+                rollupJobV2.cancel(String.format(\"rollup %s 's base rollup %s is cancelled\", rollupJobV2.getRollupIndexId(), rollupJobV2.getBaseIndexId()));\n+                return false;\n+            }\n+            if (parentJobV2.getJobState() != AlterJobV2.JobState.FINISHED) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void runAlterJobWithConcurrencyLimit(RollupJobV2 rollupJobV2) {", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNDUwNA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368224504", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-01-18T12:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NDY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDc4Ng==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374000786", "bodyText": "Not update", "author": "kangkaisen", "createdAt": "2020-02-03T09:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NDY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTQ4NA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367961484", "bodyText": "I think there is no concurrent issue. you could directly use alterJobsV2.", "author": "kangkaisen", "createdAt": "2020-01-17T14:27:20Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -590,15 +767,130 @@ protected void runAfterCatalogReady() {\n         runAlterJobV2();\n     }\n \n+    private synchronized Map<Long, AlterJobV2> getAlterJobsCopy () {\n+        return new HashMap<>(alterJobsV2);\n+    }\n+\n+    private void removeJobFromRunningQueue(RollupJobV2 rollupJobV2) {\n+        Set<Long> runningJobIdSet = tableRunningJobMap.get(rollupJobV2.getTableId());\n+        if (runningJobIdSet != null) {\n+            runningJobIdSet.remove(rollupJobV2.getJobId());\n+            if (runningJobIdSet.size() == 0) {\n+                tableRunningJobMap.remove(rollupJobV2.getTableId());\n+            }\n+        }\n+    }\n+\n+    private void changeTableStatus(long dbId, long tableId, OlapTableState olapTableState) {\n+        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n+        db.readLock();\n+        try {\n+            OlapTable tbl = (OlapTable) db.getTable(tableId);\n+            if (tbl == null || tbl.getState() == olapTableState) {\n+                return;\n+            }\n+        } finally {\n+            db.readUnlock();\n+        }\n+\n+        db.writeLock();\n+        try {\n+            OlapTable tbl = (OlapTable) db.getTable(tableId);\n+            tbl.setState(olapTableState);\n+        } finally {\n+            db.writeUnlock();\n+        }\n+    }\n+\n+    // replay the alter job v2\n+    public void replayAlterJobV2(AlterJobV2 alterJob) {\n+        super.replayAlterJobV2(alterJob);\n+        if (!alterJob.isDone()) {\n+            addAlterJobV2ToTableNotFinalStateJobMap(alterJob);\n+            changeTableStatus(alterJob.getDbId(), alterJob.getTableId(), OlapTableState.ROLLUP);\n+        } else {\n+            int ret = removeAlterJobV2FromTableNotFinalStateJobMap(alterJob);\n+            if (ret == 0) {\n+                changeTableStatus(alterJob.getDbId(), alterJob.getTableId(), OlapTableState.NORMAL);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param rollupJobV2\n+     * @return\n+     *  true,parent job is finish or current job don't have parent job;\n+     *  false, parent job is cancelled or current job hasn't finished\n+     */\n+    private boolean checkRollupJobDependency(RollupJobV2 rollupJobV2) {\n+        RollupJobV2 parentJobV2 = (RollupJobV2) alterJobsV2.get(rollupJobV2.getParentRollupJobId());\n+        if (parentJobV2 != null) {\n+            // check whether current rollup job's parent rollup job is finished\n+            if (parentJobV2.getJobState() == AlterJobV2.JobState.CANCELLED) {\n+                rollupJobV2.cancel(String.format(\"rollup %s 's base rollup %s is cancelled\", rollupJobV2.getRollupIndexId(), rollupJobV2.getBaseIndexId()));\n+                return false;\n+            }\n+            if (parentJobV2.getJobState() != AlterJobV2.JobState.FINISHED) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void runAlterJobWithConcurrencyLimit(RollupJobV2 rollupJobV2) {\n+        Set<Long> tableRunningJobSet = tableRunningJobMap.get(rollupJobV2.getTableId());\n+        if (tableRunningJobSet == null) {\n+            tableRunningJobSet = new HashSet<>();\n+            tableRunningJobMap.put(rollupJobV2.getTableId(), tableRunningJobSet);\n+        }\n+\n+        // current job is already in running\n+        if (tableRunningJobSet.contains(rollupJobV2.getJobId())) {\n+            rollupJobV2.run();\n+        } else if (tableRunningJobSet.size() < Config.max_running_rollup_job_num) {\n+            // create rollup index for job in case 1,see processBatchAddRollup\n+            if (rollupJobV2.getPartitionIdToRollupIndex().size() == 0) {\n+                Catalog catalog = Catalog.getCurrentCatalog();\n+                Database db = Catalog.getInstance().getDb(rollupJobV2.dbId);\n+                OlapTable olapTable = (OlapTable) db.getTable(rollupJobV2.getTableId());\n+                if (!createMaterializedIndexForRollupJobV2(olapTable, db, catalog, rollupJobV2)) {\n+                    rollupJobV2.cancel(String.format(\"rollup %s 's base rollup %s is cancelled due to create mv index failed, jobId = %s\",\n+                            rollupJobV2.getRollupIndexId(), rollupJobV2.getBaseIndexId(), rollupJobV2.getJobId()));\n+                }\n+                // for job in case 2 in log replay,they are in pending but not create index, can't transfer to WAITING_TXN,so first need transfer to pending\n+                rollupJobV2.setJobState(AlterJobV2.JobState.PENDING);\n+                catalog.getEditLog().logAlterJob(rollupJobV2);\n+            }\n+            // add current job to running queue\n+            tableRunningJobSet.add(rollupJobV2.getJobId());\n+            rollupJobV2.run();\n+        }\n+    }\n+\n     private void runAlterJobV2() {\n-        Iterator<Map.Entry<Long, AlterJobV2>> iter = alterJobsV2.entrySet().iterator();\n-        while (iter.hasNext()) {\n-            Map.Entry<Long, AlterJobV2> entry = iter.next();\n-            AlterJobV2 alterJob = entry.getValue();\n+        replayJobDependencyAfterCatalogReady();\n+        Iterator<Map.Entry<Long, AlterJobV2>> iterator = getAlterJobsCopy().entrySet().iterator();", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3NDkxMg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368274912", "bodyText": "Alter Stmt write job to alterJobsV2\uff0cMaterializedViewHandler read the alterJobsV2;\nSo this is concurrent access;\nTo avoid unnecessary concurrent issue,I think better to read a alter job snapshot;", "author": "wangbo", "createdAt": "2020-01-19T08:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjQyNw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367962427", "bodyText": "why replay here\uff1f", "author": "kangkaisen", "createdAt": "2020-01-17T14:29:14Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -590,15 +767,130 @@ protected void runAfterCatalogReady() {\n         runAlterJobV2();\n     }\n \n+    private synchronized Map<Long, AlterJobV2> getAlterJobsCopy () {\n+        return new HashMap<>(alterJobsV2);\n+    }\n+\n+    private void removeJobFromRunningQueue(RollupJobV2 rollupJobV2) {\n+        Set<Long> runningJobIdSet = tableRunningJobMap.get(rollupJobV2.getTableId());\n+        if (runningJobIdSet != null) {\n+            runningJobIdSet.remove(rollupJobV2.getJobId());\n+            if (runningJobIdSet.size() == 0) {\n+                tableRunningJobMap.remove(rollupJobV2.getTableId());\n+            }\n+        }\n+    }\n+\n+    private void changeTableStatus(long dbId, long tableId, OlapTableState olapTableState) {\n+        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n+        db.readLock();\n+        try {\n+            OlapTable tbl = (OlapTable) db.getTable(tableId);\n+            if (tbl == null || tbl.getState() == olapTableState) {\n+                return;\n+            }\n+        } finally {\n+            db.readUnlock();\n+        }\n+\n+        db.writeLock();\n+        try {\n+            OlapTable tbl = (OlapTable) db.getTable(tableId);\n+            tbl.setState(olapTableState);\n+        } finally {\n+            db.writeUnlock();\n+        }\n+    }\n+\n+    // replay the alter job v2\n+    public void replayAlterJobV2(AlterJobV2 alterJob) {\n+        super.replayAlterJobV2(alterJob);\n+        if (!alterJob.isDone()) {\n+            addAlterJobV2ToTableNotFinalStateJobMap(alterJob);\n+            changeTableStatus(alterJob.getDbId(), alterJob.getTableId(), OlapTableState.ROLLUP);\n+        } else {\n+            int ret = removeAlterJobV2FromTableNotFinalStateJobMap(alterJob);\n+            if (ret == 0) {\n+                changeTableStatus(alterJob.getDbId(), alterJob.getTableId(), OlapTableState.NORMAL);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param rollupJobV2\n+     * @return\n+     *  true,parent job is finish or current job don't have parent job;\n+     *  false, parent job is cancelled or current job hasn't finished\n+     */\n+    private boolean checkRollupJobDependency(RollupJobV2 rollupJobV2) {\n+        RollupJobV2 parentJobV2 = (RollupJobV2) alterJobsV2.get(rollupJobV2.getParentRollupJobId());\n+        if (parentJobV2 != null) {\n+            // check whether current rollup job's parent rollup job is finished\n+            if (parentJobV2.getJobState() == AlterJobV2.JobState.CANCELLED) {\n+                rollupJobV2.cancel(String.format(\"rollup %s 's base rollup %s is cancelled\", rollupJobV2.getRollupIndexId(), rollupJobV2.getBaseIndexId()));\n+                return false;\n+            }\n+            if (parentJobV2.getJobState() != AlterJobV2.JobState.FINISHED) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void runAlterJobWithConcurrencyLimit(RollupJobV2 rollupJobV2) {\n+        Set<Long> tableRunningJobSet = tableRunningJobMap.get(rollupJobV2.getTableId());\n+        if (tableRunningJobSet == null) {\n+            tableRunningJobSet = new HashSet<>();\n+            tableRunningJobMap.put(rollupJobV2.getTableId(), tableRunningJobSet);\n+        }\n+\n+        // current job is already in running\n+        if (tableRunningJobSet.contains(rollupJobV2.getJobId())) {\n+            rollupJobV2.run();\n+        } else if (tableRunningJobSet.size() < Config.max_running_rollup_job_num) {\n+            // create rollup index for job in case 1,see processBatchAddRollup\n+            if (rollupJobV2.getPartitionIdToRollupIndex().size() == 0) {\n+                Catalog catalog = Catalog.getCurrentCatalog();\n+                Database db = Catalog.getInstance().getDb(rollupJobV2.dbId);\n+                OlapTable olapTable = (OlapTable) db.getTable(rollupJobV2.getTableId());\n+                if (!createMaterializedIndexForRollupJobV2(olapTable, db, catalog, rollupJobV2)) {\n+                    rollupJobV2.cancel(String.format(\"rollup %s 's base rollup %s is cancelled due to create mv index failed, jobId = %s\",\n+                            rollupJobV2.getRollupIndexId(), rollupJobV2.getBaseIndexId(), rollupJobV2.getJobId()));\n+                }\n+                // for job in case 2 in log replay,they are in pending but not create index, can't transfer to WAITING_TXN,so first need transfer to pending\n+                rollupJobV2.setJobState(AlterJobV2.JobState.PENDING);\n+                catalog.getEditLog().logAlterJob(rollupJobV2);\n+            }\n+            // add current job to running queue\n+            tableRunningJobSet.add(rollupJobV2.getJobId());\n+            rollupJobV2.run();\n+        }\n+    }\n+\n     private void runAlterJobV2() {\n-        Iterator<Map.Entry<Long, AlterJobV2>> iter = alterJobsV2.entrySet().iterator();\n-        while (iter.hasNext()) {\n-            Map.Entry<Long, AlterJobV2> entry = iter.next();\n-            AlterJobV2 alterJob = entry.getValue();\n+        replayJobDependencyAfterCatalogReady();", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNTAwMg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368225002", "bodyText": "In this implementation,when fe restart,the job dependncy is lost,need to rebuild before running, set every job's parent job;\nBut if use \"whether base rollup can be found in catalog\" to judge whether parent rollup is ready is ok,so this method can be removed.", "author": "wangbo", "createdAt": "2020-01-18T12:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2Mjk2OQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367962969", "bodyText": "change return type to bool?", "author": "kangkaisen", "createdAt": "2020-01-17T14:30:22Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -85,6 +90,71 @@ public MaterializedViewHandler() {\n         super(\"materialized view\");\n     }\n \n+\n+    // for batch submit rollup job, tableId -> jobId\n+    // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal,otherwrise is rollup\n+    private Map<Long, Set<Long>> tableNotFinalStateJobMap = new ConcurrentHashMap<>();\n+    // keep table's running job,used for concurrency limit\n+    private Map<Long, Set<Long>> tableRunningJobMap = new ConcurrentHashMap<>();\n+    // make sure that job's dependency just init once\n+    private volatile boolean hasBuildJobDependency = false;\n+\n+    // set job' parent job after CatalogReady\n+    private void replayJobDependencyAfterCatalogReady() {\n+        if (!hasBuildJobDependency) {\n+            Map<Long, Long> rollupIndexIdJobIdMap = new HashMap<>();\n+            Iterator<Map.Entry<Long, AlterJobV2>> first  =alterJobsV2.entrySet().iterator();\n+            while (first.hasNext()) {\n+                Map.Entry<Long, AlterJobV2> entry = first.next();\n+                rollupIndexIdJobIdMap.put(((RollupJobV2)entry.getValue()).getRollupIndexId(), entry.getValue().getJobId());\n+            }\n+\n+            Iterator<Map.Entry<Long, AlterJobV2>> second = alterJobsV2.entrySet().iterator();\n+            while (second.hasNext()) {\n+                Map.Entry<Long, AlterJobV2> entry = second.next();\n+                RollupJobV2 rollupJobV2 = (RollupJobV2) entry.getValue();\n+                Long baseJobId = rollupIndexIdJobIdMap.get(rollupJobV2.getBaseIndexId());\n+                ((RollupJobV2)entry.getValue()).setParentRollupJobId(baseJobId == null ? 0 : baseJobId);\n+            }\n+            hasBuildJobDependency = true;\n+        }\n+    }\n+\n+    protected synchronized void addAlterJobV2(AlterJobV2 alterJob) {\n+        super.addAlterJobV2(alterJob);\n+        addAlterJobV2ToTableNotFinalStateJobMap(alterJob);\n+    }\n+\n+    private void addAlterJobV2ToTableNotFinalStateJobMap(AlterJobV2 alterJobV2) {\n+        if (alterJobV2.isDone()) {\n+            LOG.warn(\"try to add a final job({}) to a unfinal set\", alterJobV2.getJobId());\n+            return;\n+        }\n+        Long tableId = alterJobV2.getTableId();\n+        Long jobId = alterJobV2.getJobId();\n+        Set<Long> tableNotFinalStateJobIdSet = tableNotFinalStateJobMap.get(tableId);\n+        if (tableNotFinalStateJobIdSet == null) {\n+            tableNotFinalStateJobIdSet = new HashSet<>();\n+            tableNotFinalStateJobMap.put(tableId, tableNotFinalStateJobIdSet);\n+        }\n+        tableNotFinalStateJobIdSet.add(jobId);\n+    }\n+\n+    private int removeAlterJobV2FromTableNotFinalStateJobMap(AlterJobV2 alterJobV2) {", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyNTAwNw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r368225007", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-01-18T12:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2Mjk2OQ=="}], "type": "inlineReview"}, {"oid": "eda1139a29084c3eeca29cf40e02a6a3cc57f9e3", "url": "https://github.com/apache/incubator-doris/commit/eda1139a29084c3eeca29cf40e02a6a3cc57f9e3", "message": "1 update doc\n2 persist batch rollup job in one atomic operator\n3 init rollup job index when running", "committedDate": "2020-02-03T07:00:16Z", "type": "commit"}, {"oid": "c7148bc8dad328a2db2d212385d1c678ee86c077", "url": "https://github.com/apache/incubator-doris/commit/c7148bc8dad328a2db2d212385d1c678ee86c077", "message": "1 update doc\n2 persist batch rollup job in one atomic operator\n3 init rollup job index when running", "committedDate": "2020-02-03T07:05:59Z", "type": "commit"}, {"oid": "86802b5bd3e8a43fa04ca8d27b17620ea4b6b0d0", "url": "https://github.com/apache/incubator-doris/commit/86802b5bd3e8a43fa04ca8d27b17620ea4b6b0d0", "message": "Merge branch 'upstream/master' into batch_alter_rollup_pr_edit", "committedDate": "2020-02-03T07:23:01Z", "type": "commit"}, {"oid": "39a56f668db67f3f9dc45e16bef6c89323057acd", "url": "https://github.com/apache/incubator-doris/commit/39a56f668db67f3f9dc45e16bef6c89323057acd", "message": "Merge branch 'batch_alter_rollup_pr_edit' into batch_alter_rollup_pr", "committedDate": "2020-02-03T07:26:27Z", "type": "commit"}, {"oid": "2716f02fd64d4a99bc3b242b0b3295de44771bdc", "url": "https://github.com/apache/incubator-doris/commit/2716f02fd64d4a99bc3b242b0b3295de44771bdc", "message": "for github check", "committedDate": "2020-02-03T08:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Mjk5MQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r373992991", "bodyText": "Why add a INIT state? which is necessary\uff1f what's the difference from PENDING state?", "author": "kangkaisen", "createdAt": "2020-02-03T09:21:34Z", "path": "fe/src/main/java/org/apache/doris/alter/AlterJobV2.java", "diffHunk": "@@ -38,7 +38,8 @@\n     private static final Logger LOG = LogManager.getLogger(AlterJobV2.class);\n \n     public enum JobState {\n-        PENDING, // Job is created\n+        INIT, // Job is created", "originalCommit": "2716f02fd64d4a99bc3b242b0b3295de44771bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMDIzOQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374530239", "bodyText": "not necessary now", "author": "wangbo", "createdAt": "2020-02-04T08:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5Mjk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MzQyOA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r373993428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class BatchAlterJobV2 implements Writable {\n          \n          \n            \n            public class `BatchAlterJobPersistInfo` implements Writable {", "author": "kangkaisen", "createdAt": "2020-02-03T09:22:28Z", "path": "fe/src/main/java/org/apache/doris/alter/BatchAlterJobV2.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.doris.alter;\n+\n+import org.apache.doris.common.io.Writable;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * used for batch log AlterJob to editLog in one atomic operation\n+ *\n+ */\n+public class BatchAlterJobV2 implements Writable {", "originalCommit": "2716f02fd64d4a99bc3b242b0b3295de44771bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NjA3OA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374056078", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-03T11:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MzQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQyMQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r373994421", "bodyText": "New metadata class should Serde by JSON. You could refer to Tag class", "author": "kangkaisen", "createdAt": "2020-02-03T09:24:44Z", "path": "fe/src/main/java/org/apache/doris/alter/BatchAlterJobV2.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.doris.alter;\n+\n+import org.apache.doris.common.io.Writable;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * used for batch log AlterJob to editLog in one atomic operation\n+ *\n+ */\n+public class BatchAlterJobV2 implements Writable {\n+\n+    private List<AlterJobV2> alterJobV2List;\n+\n+    public BatchAlterJobV2(List<AlterJobV2> alterJobV2List) {\n+        this.alterJobV2List = alterJobV2List;\n+    }\n+\n+    @Override\n+    public void write(DataOutput out) throws IOException {", "originalCommit": "2716f02fd64d4a99bc3b242b0b3295de44771bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMTEzMQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374531131", "bodyText": "RollupJobV2 not support json serde,so BatchAlterJobV2 can't Serde by JSON", "author": "wangbo", "createdAt": "2020-02-04T08:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODUzOQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r373998539", "bodyText": "Why change the log level?", "author": "kangkaisen", "createdAt": "2020-02-03T09:33:28Z", "path": "fe/src/main/java/org/apache/doris/catalog/TabletInvertedIndex.java", "diffHunk": "@@ -441,10 +441,10 @@ public void addTablet(long tabletId, TabletMeta tabletMeta) {\n             tabletMetaMap.put(tabletId, tabletMeta);\n             if (!tabletMetaTable.contains(tabletMeta.getPartitionId(), tabletMeta.getIndexId())) {\n                 tabletMetaTable.put(tabletMeta.getPartitionId(), tabletMeta.getIndexId(), tabletMeta);\n-                LOG.debug(\"add tablet meta: {}\", tabletId);\n+                LOG.info(\"add tablet meta: {}\", tabletId);", "originalCommit": "2716f02fd64d4a99bc3b242b0b3295de44771bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1MDcxNA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374050714", "bodyText": "just for debug,it's useless", "author": "wangbo", "createdAt": "2020-02-03T11:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxNjM3MQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374016371", "bodyText": "This is unnecessary. We could check the\nalter statement and require the from index must exist firstly, and then, we needn't do this work", "author": "kangkaisen", "createdAt": "2020-02-03T10:09:20Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -858,4 +1084,56 @@ public void cancel(CancelStmt stmt) throws DdlException {\n             jobDone(rollupJob);\n         }\n     }\n+\n+    // There may be dependency relation between user batch input rollup index\n+    // e.g, user input rollup index: r1 from r2,r2 from r3 ;the input order must be r3,r2,r1\n+    // the reason for sort rollup index:\n+    //   son rollup must be dealed after parent rollup, because they need parent rollup's info,such as baseRollupIndex\n+    public static List<AlterClause> sortRollupIndex(List<AlterClause> alterClauseList) {", "originalCommit": "2716f02fd64d4a99bc3b242b0b3295de44771bdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NjE0MA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374056140", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-03T11:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxNjM3MQ=="}], "type": "inlineReview"}, {"oid": "4eb83654d0c9682c0b91111e00af9496fb270381", "url": "https://github.com/apache/incubator-doris/commit/4eb83654d0c9682c0b91111e00af9496fb270381", "message": "pr reivew 0203\n1 remove dependency bewteen rollupjob\n2 add ut", "committedDate": "2020-02-04T06:07:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDM1MA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374510350", "bodyText": "Remove this comment.  One Olap table always has one base index.", "author": "kangkaisen", "createdAt": "2020-02-04T07:31:12Z", "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -3543,6 +3548,32 @@ private void createOlapTable(Database db, CreateTableStmt stmt) throws DdlExcept\n         olapTable.setIndexSchemaInfo(baseIndexId, tableName, baseSchema, schemaVersion, schemaHash,\n                 shortKeyColumnCount);\n \n+\n+        for (AlterClause alterClause : stmt.getRollupAlterClauseList()) {\n+            AddRollupClause addRollupClause = (AddRollupClause)alterClause;\n+\n+            // TODO(wangbo): 2020/2/3 doris auto select base rollup", "originalCommit": "4eb83654d0c9682c0b91111e00af9496fb270381", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzMTkzOQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374531939", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-04T08:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNTM5NA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374515394", "bodyText": "what's the meaning of this comment?\nBefore checkpoint, we must replay the journal less than checkPointVersion", "author": "kangkaisen", "createdAt": "2020-02-04T07:46:45Z", "path": "fe/src/main/java/org/apache/doris/alter/RollupJobV2.java", "diffHunk": "@@ -305,7 +305,9 @@ protected void runWaitingTxnJob() throws AlterCancelException {\n         if (db == null) {\n             throw new AlterCancelException(\"Databasee \" + dbId + \" does not exist\");\n         }\n-        \n+\n+        // TODO(wangbo): 2020/2/4 in the case that the [WaitingTxnJob|PendingJob] is checkpointed and replayMethod won't be called, make sure the tablet meta exists in olapTable and TabletInvertedIndex before doris run", "originalCommit": "4eb83654d0c9682c0b91111e00af9496fb270381", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNDc5NA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r374534794", "bodyText": "TabletInvertedIndex and MaterializedIndex in olaptable can't be persisted until job is final,they\ndepend on replay to load data to memory", "author": "wangbo", "createdAt": "2020-02-04T08:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTAyNg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376709026", "bodyText": "I think this comment can be removed when you keep the job's state\nin PENDING after calling replayPending(). Am I right?", "author": "morningman", "createdAt": "2020-02-08T13:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNTM5NA=="}], "type": "inlineReview"}, {"oid": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "url": "https://github.com/apache/incubator-doris/commit/e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "message": "1 supplement doc\n2 remove useless comment", "committedDate": "2020-02-04T09:58:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MzQ3Ng==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r367953476", "bodyText": "It is weird to use a iterator here, maybe just  alterClauses.get(0) is enough? Or Iterables.getOnlyElement()?", "author": "morningman", "createdAt": "2020-01-17T14:11:24Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -787,11 +1079,15 @@ private void getOldAlterJobInfos(Database db, List<List<Comparable>> rollupJobIn\n     @Override\n     public void process(List<AlterClause> alterClauses, String clusterName, Database db, OlapTable olapTable)\n             throws DdlException, AnalysisException {\n-        for (AlterClause alterClause : alterClauses) {\n+        alterClauses = sortRollupIndex(alterClauses);\n+\n+        Iterator<AlterClause> alterClauseIterator = alterClauses.iterator();", "originalCommit": "92e45053b0cecaf6d34ed274b551b123c7033483", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjI0OA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756248", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MzQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMDI3OQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376700279", "bodyText": "remove unused setRollupAlterClauseList() method", "author": "morningman", "createdAt": "2020-02-08T09:52:20Z", "path": "fe/src/main/java/org/apache/doris/analysis/CreateTableStmt.java", "diffHunk": "@@ -218,6 +236,14 @@ public String getComment() {\n         return comment;\n     }\n \n+    public void setRollupAlterClauseList(List<AlterClause> rollupAlterClauseList) {", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjI4NA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756284", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMDI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMDc4NQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376700785", "bodyText": "So.. Seem that this is a serious bug exist before?\nIf yes, please add\nalterJobsV2 = this.getRollupHandler().getAlterJobsV2(); before.\nSo here can be remain unchanged.", "author": "morningman", "createdAt": "2020-02-08T10:04:18Z", "path": "fe/src/main/java/org/apache/doris/catalog/Catalog.java", "diffHunk": "@@ -1682,7 +1683,11 @@ public long loadAlterJob(DataInputStream dis, long checksum, JobType type) throw\n             newChecksum ^= size;\n             for (int i = 0; i < size; i++) {\n                 AlterJobV2 alterJobV2 = AlterJobV2.read(dis);\n-                alterJobsV2.put(alterJobV2.getJobId(), alterJobV2);\n+                if (type == JobType.ROLLUP) {", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjUxNQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756515", "bodyText": "No bug before; Before,SchemaChangeHandler has the addJob logic with MaterializedViewHandler;But now,they are different;", "author": "wangbo", "createdAt": "2020-02-09T05:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMDc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTEyNw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376701127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConfField\n          \n          \n            \n                @ConfField(mutable = true, masterOnly = true)", "author": "morningman", "createdAt": "2020-02-08T10:11:50Z", "path": "fe/src/main/java/org/apache/doris/common/Config.java", "diffHunk": "@@ -984,5 +984,11 @@\n      */\n     @ConfField(mutable = true, masterOnly = true)\n     public static boolean dynamic_partition_enable = false;\n+\n+    /*\n+     * control rollup job concurrent limit\n+     */\n+    @ConfField", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjUyMQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756521", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTIxNA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376701214", "bodyText": "put the after the OP_MODIFY_DISTRIBUTION_TYPE to make the opCode ordered, even if OP_BATCH_ALTER_JOB_V2 is the same catalog of ALTER JOB. Otherwise, the following developer may use wrong code.", "author": "morningman", "createdAt": "2020-02-08T10:13:41Z", "path": "fe/src/main/java/org/apache/doris/persist/OperationType.java", "diffHunk": "@@ -56,6 +56,7 @@\n     public static final short OP_FINISH_CONSISTENCY_CHECK = 29;\n     public static final short OP_RENAME_ROLLUP = 120;\n     public static final short OP_ALTER_JOB_V2 = 121;\n+    public static final short OP_BATCH_ALTER_JOB_V2 = 123;", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjYwNA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756604", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTI4MA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376701280", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        schemaChangeJobV2 = schemaChangeJobV2List.size() == 0 ? schemaChangeJobV2 : Iterables.getOnlyElement(schemaChangeJobV2List);\n          \n          \n            \n                        schemaChangeJobV2 = schemaChangeJobV2List.size() == 0 ? null : Iterables.getOnlyElement(schemaChangeJobV2List);", "author": "morningman", "createdAt": "2020-02-08T10:15:09Z", "path": "fe/src/main/java/org/apache/doris/alter/SchemaChangeHandler.java", "diffHunk": "@@ -1436,7 +1437,8 @@ public void cancel(CancelStmt stmt) throws DdlException {\n             }\n \n             // find from new alter jobs first\n-            schemaChangeJobV2 = getUnfinishedAlterJobV2(olapTable.getId());\n+            List<AlterJobV2> schemaChangeJobV2List = getUnfinishedAlterJobV2ByTableId(olapTable.getId());\n+            schemaChangeJobV2 = schemaChangeJobV2List.size() == 0 ? schemaChangeJobV2 : Iterables.getOnlyElement(schemaChangeJobV2List);", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTMwOQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376701309", "bodyText": "And add comment to explain why there should be only one job in the schemaChangeJobV2List", "author": "morningman", "createdAt": "2020-02-08T10:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjY0NQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756645", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwODc5Mg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376708792", "bodyText": "wrap the comment, its too long in one line", "author": "morningman", "createdAt": "2020-02-08T12:59:55Z", "path": "fe/src/main/java/org/apache/doris/alter/RollupJobV2.java", "diffHunk": "@@ -305,7 +305,9 @@ protected void runWaitingTxnJob() throws AlterCancelException {\n         if (db == null) {\n             throw new AlterCancelException(\"Databasee \" + dbId + \" does not exist\");\n         }\n-        \n+\n+        // TODO(wangbo): 2020/2/4 in the case that the [WaitingTxnJob|PendingJob] is checkpointed and replayMethod won't be called, make sure the tablet meta exists in olapTable and TabletInvertedIndex before doris run", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjY2MA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756660", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwODc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwODkzMw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376708933", "bodyText": "Add a comment here to explain why after replaying the pending job,\nthe state is still PENDING:\nto make sure that this job will run runPendingJob() again to create the rollup replicas", "author": "morningman", "createdAt": "2020-02-08T13:02:52Z", "path": "fe/src/main/java/org/apache/doris/alter/RollupJobV2.java", "diffHunk": "@@ -614,33 +614,35 @@ private void replayPending(RollupJobV2 replayedJob) {\n                 // table may be dropped before replaying this log. just return\n                 return;\n             }\n-\n-            // add all rollup replicas to tablet inverted index\n-            TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n-            for (Long partitionId : partitionIdToRollupIndex.keySet()) {\n-                MaterializedIndex rollupIndex = partitionIdToRollupIndex.get(partitionId);\n-                TStorageMedium medium = tbl.getPartitionInfo().getDataProperty(partitionId).getStorageMedium();\n-                TabletMeta rollupTabletMeta = new TabletMeta(dbId, tableId, partitionId, rollupIndexId,\n-                        rollupSchemaHash, medium);\n-\n-                for (Tablet rollupTablet : rollupIndex.getTablets()) {\n-                    invertedIndex.addTablet(rollupTablet.getId(), rollupTabletMeta);\n-                    for (Replica rollupReplica : rollupTablet.getReplicas()) {\n-                        invertedIndex.addReplica(rollupTablet.getId(), rollupReplica);\n-                    }\n-                }\n-            }\n-            tbl.setState(OlapTableState.ROLLUP);\n+            addTabletToInvertedIndex(tbl);\n         } finally {\n             db.writeUnlock();\n         }\n \n-        this.jobState = JobState.WAITING_TXN;\n+        this.jobState = JobState.PENDING;", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjY2Nw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756667", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwODkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTUwOA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376709508", "bodyText": "\"batch drop rollup\" operation should still be atomic when writing meta log.\nSo you need to modify the processDropRollup():\n\n\nFirst, traverse all drop clauses to validate them, such as whether to drop the base index, does the rollup index need to be dropped exist.\n\n\nDo the real drop operation. And all-or-non rollups should be dropped.\n\n\nWrite a edit log named BatchDropRollupOperationLog to persist the meta.", "author": "morningman", "createdAt": "2020-02-08T13:15:03Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -507,6 +608,12 @@ private long checkAndGetBaseIndex(String baseIndexName, OlapTable olapTable) thr\n         return baseIndexId;\n     }\n \n+    public void processBatchDropRollup (List<AlterClause> dropRollupClauses, Database db, OlapTable olapTable) throws DdlException {\n+        for (AlterClause dropRollupClause : dropRollupClauses) {\n+            processDropRollup((DropRollupClause)dropRollupClause, db, olapTable);", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTc3MQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376709771", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal,otherwrise is rollup\n          \n          \n            \n                // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal, otherwise is rollup", "author": "morningman", "createdAt": "2020-02-08T13:20:44Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -85,6 +88,54 @@ public MaterializedViewHandler() {\n         super(\"materialized view\");\n     }\n \n+\n+    // for batch submit rollup job, tableId -> jobId\n+    // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal,otherwrise is rollup", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjcwMA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756700", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTkyNA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376709924", "bodyText": "Can it be an assertion? I found there is no way to add an already-done job here.", "author": "morningman", "createdAt": "2020-02-08T13:24:15Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -85,6 +88,54 @@ public MaterializedViewHandler() {\n         super(\"materialized view\");\n     }\n \n+\n+    // for batch submit rollup job, tableId -> jobId\n+    // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal,otherwrise is rollup\n+    private Map<Long, Set<Long>> tableNotFinalStateJobMap = new ConcurrentHashMap<>();\n+    // keep table's running job,used for concurrency limit\n+    private Map<Long, Set<Long>> tableRunningJobMap = new ConcurrentHashMap<>();\n+\n+    public synchronized void addAlterJobV2(AlterJobV2 alterJob) {\n+        super.addAlterJobV2(alterJob);\n+        addAlterJobV2ToTableNotFinalStateJobMap(alterJob);\n+    }\n+\n+    protected synchronized void batchAddAlterJobV2(List<AlterJobV2> alterJobV2List) {\n+        for (AlterJobV2 alterJobV2 : alterJobV2List) {\n+            addAlterJobV2(alterJobV2);\n+        }\n+    }\n+\n+    private void addAlterJobV2ToTableNotFinalStateJobMap(AlterJobV2 alterJobV2) {\n+        if (alterJobV2.isDone()) {\n+            LOG.warn(\"try to add a final job({}) to a unfinal set\", alterJobV2.getJobId());", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4ODMyNQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376788325", "bodyText": "job replay will add a done job", "author": "wangbo", "createdAt": "2020-02-09T14:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMDAxNg==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376710016", "bodyText": "Add comment to explain return value's meaning.", "author": "morningman", "createdAt": "2020-02-08T13:26:26Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -85,6 +88,54 @@ public MaterializedViewHandler() {\n         super(\"materialized view\");\n     }\n \n+\n+    // for batch submit rollup job, tableId -> jobId\n+    // keep table's not final state job size. The job size determine's table's state, = 0 means table is normal,otherwrise is rollup\n+    private Map<Long, Set<Long>> tableNotFinalStateJobMap = new ConcurrentHashMap<>();\n+    // keep table's running job,used for concurrency limit\n+    private Map<Long, Set<Long>> tableRunningJobMap = new ConcurrentHashMap<>();\n+\n+    public synchronized void addAlterJobV2(AlterJobV2 alterJob) {\n+        super.addAlterJobV2(alterJob);\n+        addAlterJobV2ToTableNotFinalStateJobMap(alterJob);\n+    }\n+\n+    protected synchronized void batchAddAlterJobV2(List<AlterJobV2> alterJobV2List) {\n+        for (AlterJobV2 alterJobV2 : alterJobV2List) {\n+            addAlterJobV2(alterJobV2);\n+        }\n+    }\n+\n+    private void addAlterJobV2ToTableNotFinalStateJobMap(AlterJobV2 alterJobV2) {\n+        if (alterJobV2.isDone()) {\n+            LOG.warn(\"try to add a final job({}) to a unfinal set\", alterJobV2.getJobId());\n+            return;\n+        }\n+        Long tableId = alterJobV2.getTableId();\n+        Long jobId = alterJobV2.getJobId();\n+        Set<Long> tableNotFinalStateJobIdSet = tableNotFinalStateJobMap.get(tableId);\n+        if (tableNotFinalStateJobIdSet == null) {\n+            tableNotFinalStateJobIdSet = new HashSet<>();\n+            tableNotFinalStateJobMap.put(tableId, tableNotFinalStateJobIdSet);\n+        }\n+        tableNotFinalStateJobIdSet.add(jobId);\n+    }\n+\n+    private boolean removeAlterJobV2FromTableNotFinalStateJobMap(AlterJobV2 alterJobV2) {", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1NjgxOA==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376756818", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T05:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMDAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMTQ2Mw==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376711463", "bodyText": "getUnfinishedAlterJobV2ByJobId() may return null if job does not exist, so rollupJobV2List may contains null. You didn't check it when using it after.\nAnother problem is, batch cancel operation can be partial success in your implementation.\nAlthough I advocate all operations to avoid partial success. But for cancel operation, this change may be slightly more complicated. A two-phase protocal may be needed to achieve this.\nSo if you keep the current implementation. The first requirement is to allow the user to specify a non-existing job id to cancel. Second, the document needs to indicate that there may be partial success here, and the user needs to retry multiple times until a successful message is returned.", "author": "morningman", "createdAt": "2020-02-08T13:56:08Z", "path": "fe/src/main/java/org/apache/doris/alter/MaterializedViewHandler.java", "diffHunk": "@@ -830,8 +1008,14 @@ public void cancel(CancelStmt stmt) throws DdlException {\n             }\n \n             // find from new alter jobs first\n-            rollupJobV2 = getUnfinishedAlterJobV2(olapTable.getId());\n-            if (rollupJobV2 == null) {\n+            if (cancelAlterTableStmt.getAlterJobIdList() != null) {\n+                for (Long jobId : cancelAlterTableStmt.getAlterJobIdList()) {\n+                    rollupJobV2List.add(getUnfinishedAlterJobV2ByJobId(jobId));", "originalCommit": "e6e99b7e757762f44cfd0ca67f4026a08bd0859e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4ODc2MQ==", "url": "https://github.com/apache/incubator-doris/pull/2781#discussion_r376788761", "bodyText": "\ud83d\udc4c", "author": "wangbo", "createdAt": "2020-02-09T14:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMTQ2Mw=="}], "type": "inlineReview"}, {"oid": "ffa79819dad3e67d4ee6d5427b12b92dda23839a", "url": "https://github.com/apache/incubator-doris/commit/ffa79819dad3e67d4ee6d5427b12b92dda23839a", "message": "0208 pr review", "committedDate": "2020-02-09T14:27:17Z", "type": "commit"}, {"oid": "0188ba669119a21913cf5fe949223fcba3d270bd", "url": "https://github.com/apache/incubator-doris/commit/0188ba669119a21913cf5fe949223fcba3d270bd", "message": "2010 review\nuse json to serialize BatchDropInfo", "committedDate": "2020-02-10T15:24:18Z", "type": "commit"}]}