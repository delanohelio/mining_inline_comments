{"pr_number": 461, "pr_title": "KOGITO-3372 - Validate explainability requests and add tests", "pr_createdAt": "2020-09-17T13:56:13Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/461", "timeline": [{"oid": "1027215c2ed53542f54b3a3c89788de99f81deca", "url": "https://github.com/kiegroup/kogito-apps/commit/1027215c2ed53542f54b3a3c89788de99f81deca", "message": "validate explainability requests add tests", "committedDate": "2020-09-17T13:53:50Z", "type": "commit"}, {"oid": "6c70ab5556bac2ad3dce3bbf51b89a278fc04c2e", "url": "https://github.com/kiegroup/kogito-apps/commit/6c70ab5556bac2ad3dce3bbf51b89a278fc04c2e", "message": "refactoring", "committedDate": "2020-09-17T13:57:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MTYwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490271608", "bodyText": "What about use StringUtils? If you don't want to add the dependency please at least move the method to a local StringUtils class", "author": "danielezonca", "createdAt": "2020-09-17T14:02:38Z", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -53,6 +55,10 @@ public ExplainabilityApiV1(\n         this.predictionProviderFactory = predictionProviderFactory;\n     }\n \n+    private boolean isNullOrEmpty(String s) {\n+        return s == null || s == \"\";\n+    }", "originalCommit": "6c70ab5556bac2ad3dce3bbf51b89a278fc04c2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MzczNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490273734", "bodyText": "What about move it to a util class?", "author": "danielezonca", "createdAt": "2020-09-17T14:05:10Z", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -64,12 +70,41 @@ public ExplainabilityApiV1(\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<Response> explain(ExplainabilityRequestDto requestDto) {\n+        RequestValidationResult validationResult = validateRequest(requestDto);\n+        if (!validationResult.isValid()) {\n+            return Uni.createFrom().completionStage(\n+                    CompletableFuture.completedFuture(Response.status(400).entity(validationResult.getMessage()).build())\n+            );\n+        }\n+\n         ExplainabilityRequest request = ExplainabilityRequest.from(requestDto);\n         PredictionProvider provider = predictionProviderFactory.createPredictionProvider(request);\n         CompletionStage<Response> result = explanationService.explainAsync(request, provider)\n                 .thenApply(x -> Response.ok(x).build());\n \n         return Uni.createFrom().completionStage(result);\n     }\n+\n+    private RequestValidationResult validateRequest(ExplainabilityRequestDto requestDto) {\n+        if (requestDto == null) {\n+            return new RequestValidationResult(false, \"The request can not be empty.\");\n+        }\n+\n+        if (requestDto.getExecutionId() == null) {\n+            return new RequestValidationResult(false, \"The executionId must be included in the request.\");\n+        }\n+\n+        ModelIdentifierDto modelIdentifierDto = requestDto.getModelIdentifier();\n+\n+        if (modelIdentifierDto == null || isNullOrEmpty(modelIdentifierDto.getResourceType()) || isNullOrEmpty(modelIdentifierDto.getResourceId())) {\n+            return new RequestValidationResult(false, \"The model identifier information is required in the request.\");\n+        }\n+\n+        if (isNullOrEmpty(requestDto.getServiceUrl())) {\n+            return new RequestValidationResult(false, \"The service url information of the application that evaluated the decision is not provided in the request.\");\n+        }\n+\n+        return new RequestValidationResult(true, null);\n+    }", "originalCommit": "6c70ab5556bac2ad3dce3bbf51b89a278fc04c2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53bf44affe63e57666922dff9c46cff35ed86948", "url": "https://github.com/kiegroup/kogito-apps/commit/53bf44affe63e57666922dff9c46cff35ed86948", "message": "refactoring using validators", "committedDate": "2020-09-17T15:10:23Z", "type": "commit"}, {"oid": "affa4c6fe0ad091c4d70789db828ae8b94618720", "url": "https://github.com/kiegroup/kogito-apps/commit/affa4c6fe0ad091c4d70789db828ae8b94618720", "message": "refactoring", "committedDate": "2020-09-17T15:11:26Z", "type": "commit"}, {"oid": "9fb6f1e6ad2dffd97a5c62ae30fcd525015db853", "url": "https://github.com/kiegroup/kogito-apps/commit/9fb6f1e6ad2dffd97a5c62ae30fcd525015db853", "message": "remove unused imports", "committedDate": "2020-09-17T15:14:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNjUxNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490716514", "bodyText": "As far I know, the annotation @Valid works fine with reactive endpoints, so if we annotate the requestDto field with @Valid, it should raise 400 Invalid Request directly.", "author": "Sgitario", "createdAt": "2020-09-18T05:49:44Z", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -64,6 +72,16 @@ public ExplainabilityApiV1(\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<Response> explain(ExplainabilityRequestDto requestDto) {\n+        Set<ConstraintViolation<ExplainabilityRequestDto>> violations = validator.validate(requestDto);", "originalCommit": "9fb6f1e6ad2dffd97a5c62ae30fcd525015db853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0NTg4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490945880", "bodyText": "Thanks @Sgitario , this module was new for me, good to know :) lmkwyt", "author": "r00ta", "createdAt": "2020-09-18T13:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNjUxNA=="}], "type": "inlineReview"}, {"oid": "84d3e4a9361d303615dc6899a03b15f2fb667988", "url": "https://github.com/kiegroup/kogito-apps/commit/84d3e4a9361d303615dc6899a03b15f2fb667988", "message": "refactoring", "committedDate": "2020-09-18T13:22:40Z", "type": "commit"}, {"oid": "4707faea06a2db8006201aa27d0d3f7484ed3f76", "url": "https://github.com/kiegroup/kogito-apps/commit/4707faea06a2db8006201aa27d0d3f7484ed3f76", "message": "remove unused imports, refactoring", "committedDate": "2020-09-18T14:42:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2Njg0MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r491066841", "bodyText": "I think this service is a leftover", "author": "Sgitario", "createdAt": "2020-09-18T16:38:38Z", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -44,13 +46,16 @@\n \n     protected ExplanationService explanationService;\n     protected PredictionProviderFactory predictionProviderFactory;\n+    protected Validator validator;", "originalCommit": "4707faea06a2db8006201aa27d0d3f7484ed3f76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e5161aa4928ed2929c2e3d3af82f4633741df735", "url": "https://github.com/kiegroup/kogito-apps/commit/e5161aa4928ed2929c2e3d3af82f4633741df735", "message": "remove unused dependency", "committedDate": "2020-09-21T06:51:37Z", "type": "commit"}, {"oid": "b610e7cd36f1572d8bd039b5fbf70c06a43c2e9a", "url": "https://github.com/kiegroup/kogito-apps/commit/b610e7cd36f1572d8bd039b5fbf70c06a43c2e9a", "message": "Merge branch 'master' into KOGITO-3372-fix-explainability-bad-requests", "committedDate": "2020-09-21T08:21:35Z", "type": "commit"}]}