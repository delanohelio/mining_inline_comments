{"pr_number": 468, "pr_title": "KOGITO-3291: Implement security at Quarkus level for Management Console", "pr_createdAt": "2020-09-25T05:45:37Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/468", "timeline": [{"oid": "f0d78bca4b2b3c7e687091239efacf8275d006cf", "url": "https://github.com/kiegroup/kogito-apps/commit/f0d78bca4b2b3c7e687091239efacf8275d006cf", "message": "KOGITO-3291: updated kogito-realm.json to map the user groups and remove comments", "committedDate": "2020-09-28T09:49:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjY3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private Set<String> roles= Collections.emptySet();\n          \n          \n            \n                    private Set<String> roles = Collections.emptySet();", "author": "cristianonicolai", "createdAt": "2020-09-29T01:05:48Z", "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.credential.TokenCredential;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n+\n+@Path(UserResource.USER_PATH)\n+@Authenticated\n+public class UserResource {\n+\n+    public static final String USER_PATH = \"/api/user\";\n+\n+    @Inject\n+    SecurityIdentity identity;\n+\n+    @GET\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n+    public User me() {\n+        return new User(identity);\n+    }\n+\n+    protected void setSecurityIdentity(SecurityIdentity securityIdentity) {\n+        this.identity = securityIdentity;\n+    }\n+\n+    public static class User {\n+\n+        private String userName = \"Anonymous\";\n+        private Set<String> roles= Collections.emptySet();", "originalCommit": "f0d78bca4b2b3c7e687091239efacf8275d006cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjc0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                identity.getPrincipal()!=null &&\n          \n          \n            \n                                identity.getPrincipal() != null &&", "author": "cristianonicolai", "createdAt": "2020-09-29T01:06:11Z", "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.credential.TokenCredential;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n+\n+@Path(UserResource.USER_PATH)\n+@Authenticated\n+public class UserResource {\n+\n+    public static final String USER_PATH = \"/api/user\";\n+\n+    @Inject\n+    SecurityIdentity identity;\n+\n+    @GET\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n+    public User me() {\n+        return new User(identity);\n+    }\n+\n+    protected void setSecurityIdentity(SecurityIdentity securityIdentity) {\n+        this.identity = securityIdentity;\n+    }\n+\n+    public static class User {\n+\n+        private String userName = \"Anonymous\";\n+        private Set<String> roles= Collections.emptySet();\n+        private String token = \"\";\n+\n+        User(SecurityIdentity identity) {\n+            if(identity != null &&\n+                    identity.getPrincipal()!=null &&", "originalCommit": "f0d78bca4b2b3c7e687091239efacf8275d006cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjgwMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                identity.getCredential(TokenCredential.class)!=null) {\n          \n          \n            \n                                identity.getCredential(TokenCredential.class) != null) {", "author": "cristianonicolai", "createdAt": "2020-09-29T01:06:21Z", "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.credential.TokenCredential;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n+\n+@Path(UserResource.USER_PATH)\n+@Authenticated\n+public class UserResource {\n+\n+    public static final String USER_PATH = \"/api/user\";\n+\n+    @Inject\n+    SecurityIdentity identity;\n+\n+    @GET\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n+    public User me() {\n+        return new User(identity);\n+    }\n+\n+    protected void setSecurityIdentity(SecurityIdentity securityIdentity) {\n+        this.identity = securityIdentity;\n+    }\n+\n+    public static class User {\n+\n+        private String userName = \"Anonymous\";\n+        private Set<String> roles= Collections.emptySet();\n+        private String token = \"\";\n+\n+        User(SecurityIdentity identity) {\n+            if(identity != null &&\n+                    identity.getPrincipal()!=null &&\n+                    identity.getCredential(TokenCredential.class)!=null) {", "originalCommit": "f0d78bca4b2b3c7e687091239efacf8275d006cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "00316f59f063418efdb4c0658ff8e37105607013", "url": "https://github.com/kiegroup/kogito-apps/commit/00316f59f063418efdb4c0658ff8e37105607013", "message": "KOGITO-3291: Implement security at Quarkus level for Management Console", "committedDate": "2020-09-30T06:04:21Z", "type": "commit"}, {"oid": "826e26bebcefe7ae35bb7fc571414f372b8b15c3", "url": "https://github.com/kiegroup/kogito-apps/commit/826e26bebcefe7ae35bb7fc571414f372b8b15c3", "message": "KOGITO-3291: updated kogito-realm.json to map the user groups and remove comments", "committedDate": "2020-09-30T06:04:21Z", "type": "commit"}, {"oid": "5cae92b13a47296234501840d7257afc4304905d", "url": "https://github.com/kiegroup/kogito-apps/commit/5cae92b13a47296234501840d7257afc4304905d", "message": " KOGITO-3291: Removed keycloak integration from react", "committedDate": "2020-09-30T09:19:02Z", "type": "commit"}, {"oid": "5cae92b13a47296234501840d7257afc4304905d", "url": "https://github.com/kiegroup/kogito-apps/commit/5cae92b13a47296234501840d7257afc4304905d", "message": " KOGITO-3291: Removed keycloak integration from react", "committedDate": "2020-09-30T09:19:02Z", "type": "forcePushed"}, {"oid": "fb841f9b4573fe1a562f34194b98ffd379121bac", "url": "https://github.com/kiegroup/kogito-apps/commit/fb841f9b4573fe1a562f34194b98ffd379121bac", "message": "KOGITO-3291: updated security commons testing", "committedDate": "2020-09-30T11:37:29Z", "type": "commit"}]}