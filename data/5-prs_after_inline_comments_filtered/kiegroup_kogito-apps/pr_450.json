{"pr_number": 450, "pr_title": "[KOGITO-3297] Bump CloudEvents api to 2.x", "pr_createdAt": "2020-09-08T20:24:04Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/450", "timeline": [{"oid": "927e7a09f7394aefe34ce45072a6efe06c2c71ad", "url": "https://github.com/kiegroup/kogito-apps/commit/927e7a09f7394aefe34ce45072a6efe06c2c71ad", "message": "[KOGITO-3297] Bump CloudEvents api to 2.x\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-08T20:23:39Z", "type": "commit"}, {"oid": "3b3869edb7aaa780e5397f72604fdb6bedb29c59", "url": "https://github.com/kiegroup/kogito-apps/commit/3b3869edb7aaa780e5397f72604fdb6bedb29c59", "message": "[KOGITO-3297] Fix explainability tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-09T07:34:01Z", "type": "commit"}, {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20", "url": "https://github.com/kiegroup/kogito-apps/commit/e794c16e87e81d2f0512af1af8a2384633ed4b20", "message": "[KOGITO-3297] Remove E\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-14T10:19:13Z", "type": "commit"}, {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20", "url": "https://github.com/kiegroup/kogito-apps/commit/e794c16e87e81d2f0512af1af8a2384633ed4b20", "message": "[KOGITO-3297] Remove E\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-14T10:19:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMjMzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487822335", "bodyText": "What about refactor getCloudEventType() to return TypeReference<E>?\nObjectMapper can be specified as constructor parameter and then you can move deserialization logic here and isolate business logic for subclasses like:\n    protected abstract void internalHandleCloudEvent(final CloudEvent cloudEvent, final E payload);\n\n    protected abstract void handleCloudEvent(final CloudEvent cloudEvent) {\n        final E payload;\n        try {\n            payload = mapper.readValue(cloudEvent.getData(), getCloudEventType());\n        } catch (IOException e) {\n            LOG.error(\"Unable to deserialize CloudEvent data as \" + getCloudEventType().getName(), e);\n            return;\n        }\n        if (event == null) {\n            LOG.error(\"Received CloudEvent with id {} from {} with empty data\", cloudEvent.getId(), cloudEvent.getSource());\n            return;\n        }\n\n        LOG.debug(\"Received CloudEvent with id {} from {}\", cloudEvent.getId(), cloudEvent.getSource());\n\n        internalHandleCloudEvent(cloudEvent, payload);\n    }", "author": "danielezonca", "createdAt": "2020-09-14T10:51:55Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/BaseEventConsumer.java", "diffHunk": "@@ -50,16 +49,14 @@ public BaseEventConsumer(final TrustyService service) {\n         return message.ack();\n     }\n \n-    protected Optional<CloudEventImpl<E>> decodeCloudEvent(final String payload) {\n+    protected Optional<CloudEvent> decodeCloudEvent(final String payload) {\n         try {\n-            return Optional.of(CloudEventUtils.decode(payload, getCloudEventType()));\n+            return Optional.of(CloudEventUtils.decode(payload));\n         } catch (IllegalStateException e) {\n             LOG.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n             return Optional.empty();\n         }\n     }\n \n-    protected abstract TypeReference<CloudEventImpl<E>> getCloudEventType();\n-\n-    protected abstract void handleCloudEvent(final CloudEventImpl<E> cloudEvent);\n+    protected abstract void handleCloudEvent(final CloudEvent cloudEvent);", "originalCommit": "e794c16e87e81d2f0512af1af8a2384633ed4b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4NzE1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r488187150", "bodyText": "Done, thanks for the suggestion", "author": "ruromero", "createdAt": "2020-09-14T20:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMjMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzQ1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487827450", "bodyText": "Please do not mix injection on field and on constructor: move all the injection to constructor", "author": "danielezonca", "createdAt": "2020-09-14T11:01:59Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/ExplainabilityResultConsumer.java", "diffHunk": "@@ -46,17 +44,17 @@\n import org.slf4j.LoggerFactory;\n \n @ApplicationScoped\n-public class ExplainabilityResultConsumer extends BaseEventConsumer<ExplainabilityResultDto> {\n+public class ExplainabilityResultConsumer extends BaseEventConsumer {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityResultConsumer.class);\n \n-    private static final TypeReference<CloudEventImpl<ExplainabilityResultDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n-    };\n-\n     private ExplainabilityResultConsumer() {\n         //CDI proxy\n     }\n \n+    @Inject\n+    ObjectMapper mapper;\n+\n     @Inject\n     public ExplainabilityResultConsumer(TrustyService service) {", "originalCommit": "e794c16e87e81d2f0512af1af8a2384633ed4b20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzU2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487827562", "bodyText": "Please do not mix injection on field and on constructor: move all the injection to constructor", "author": "danielezonca", "createdAt": "2020-09-14T11:02:11Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConsumer.java", "diffHunk": "@@ -33,15 +31,15 @@\n import org.kie.kogito.trusty.service.messaging.BaseEventConsumer;\n \n @ApplicationScoped\n-public class ModelEventConsumer extends BaseEventConsumer<ModelEvent> {\n-\n-    private static final TypeReference<CloudEventImpl<ModelEvent>> CLOUD_EVENT_TYPE_REF = new TypeReference<>() {\n-    };\n+public class ModelEventConsumer extends BaseEventConsumer {\n \n     private  ModelEventConsumer() {\n         //CDI proxy\n     }\n \n+    @Inject\n+    ObjectMapper mapper;\n+\n     @Inject", "originalCommit": "e794c16e87e81d2f0512af1af8a2384633ed4b20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzYyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487827627", "bodyText": "Please do not mix injection on field and on constructor: move all the injection to constructor", "author": "danielezonca", "createdAt": "2020-09-14T11:02:18Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "diffHunk": "@@ -33,15 +31,15 @@\n import org.kie.kogito.trusty.service.messaging.BaseEventConsumer;\n \n @ApplicationScoped\n-public class TraceEventConsumer extends BaseEventConsumer<TraceEvent> {\n-\n-    private static final TypeReference<CloudEventImpl<TraceEvent>> CLOUD_EVENT_TYPE_REF = new TypeReference<>() {\n-    };\n+public class TraceEventConsumer extends BaseEventConsumer {\n \n     private TraceEventConsumer() {\n         //CDI proxy\n     }\n \n+    @Inject\n+    ObjectMapper mapper;\n+\n     @Inject", "originalCommit": "e794c16e87e81d2f0512af1af8a2384633ed4b20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca1a9cb5f76ca7831ed43c969865610206150062", "url": "https://github.com/kiegroup/kogito-apps/commit/ca1a9cb5f76ca7831ed43c969865610206150062", "message": "[KOGITO-3297] Code review\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-14T20:01:05Z", "type": "commit"}, {"oid": "d707e67cf29657797995f89fbcdc6b99f38ee181", "url": "https://github.com/kiegroup/kogito-apps/commit/d707e67cf29657797995f89fbcdc6b99f38ee181", "message": "[KOGITO-3297] Fix tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-18T13:17:33Z", "type": "commit"}, {"oid": "d707e67cf29657797995f89fbcdc6b99f38ee181", "url": "https://github.com/kiegroup/kogito-apps/commit/d707e67cf29657797995f89fbcdc6b99f38ee181", "message": "[KOGITO-3297] Fix tests\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-09-18T13:17:33Z", "type": "forcePushed"}]}