{"pr_number": 294, "pr_title": "[KOGITO-2537] Consume and persist TraceEvents in trusty-service", "pr_createdAt": "2020-06-24T14:39:24Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/294", "timeline": [{"oid": "0968259aec0726fa4f2ead6664492c4f5bd98ee9", "url": "https://github.com/kiegroup/kogito-apps/commit/0968259aec0726fa4f2ead6664492c4f5bd98ee9", "message": "[KOGITO-2537] Improve Decision model", "committedDate": "2020-06-26T16:13:15Z", "type": "forcePushed"}, {"oid": "4219a646def83bb545ea352c635a073868a927bc", "url": "https://github.com/kiegroup/kogito-apps/commit/4219a646def83bb545ea352c635a073868a927bc", "message": "[KOGITO-2537] Extend Decision model", "committedDate": "2020-07-01T18:11:57Z", "type": "forcePushed"}, {"oid": "69510deed4ddeee31e210bcd0feb92db0b7417df", "url": "https://github.com/kiegroup/kogito-apps/commit/69510deed4ddeee31e210bcd0feb92db0b7417df", "message": "[KOGITO-2537] Fix Decision inputs and outcomes", "committedDate": "2020-07-02T07:51:15Z", "type": "forcePushed"}, {"oid": "b9c0aade1a33a8f3eebc90afed2fdf44c83852d4", "url": "https://github.com/kiegroup/kogito-apps/commit/b9c0aade1a33a8f3eebc90afed2fdf44c83852d4", "message": "[KOGITO-2537] Improve trusty-service APIs", "committedDate": "2020-07-03T11:06:59Z", "type": "forcePushed"}, {"oid": "0cff921ffdba337e1f7c550ace140324467aeb8e", "url": "https://github.com/kiegroup/kogito-apps/commit/0cff921ffdba337e1f7c550ace140324467aeb8e", "message": "[KOGITO-2537] Improve trusty-service API tests", "committedDate": "2020-07-07T13:24:46Z", "type": "forcePushed"}, {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "url": "https://github.com/kiegroup/kogito-apps/commit/e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "message": "[KOGITO-2537] Reduce code smells", "committedDate": "2020-07-08T07:48:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMTM2MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450011360", "bodyText": "Could you use @JsonProperty? I think that even if it's more verbose, it helps a lot in the maintenance of the code", "author": "r00ta", "createdAt": "2020-07-06T06:38:06Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/DecisionOutcomeResponse.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+\n+public class DecisionOutcomeResponse {\n+\n+    private String outcomeId;\n+    private String outcomeName;\n+    private String evaluationStatus;\n+    private TypedValueResponse outcomeResult;\n+    private List<TypedValueResponse> outcomeInputs;\n+    private List<MessageResponse> messages;\n+    private boolean hasErrors;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0ODA0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452248048", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T14:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjk2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450012967", "bodyText": "What about adding a body with the reason why the request failed? For example in the case of getOutcomeById, the executionId might be correct but not the outcomeId.", "author": "r00ta", "createdAt": "2020-07-06T06:42:30Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -55,21 +61,96 @@\n     )\n     @Operation(summary = \"Gets The decision header with details.\", description = \"Gets the decision detail header.\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Response getExecutionById(\n+    public Response getById(\n             @Parameter(\n                     name = \"executionId\",\n                     description = \"The execution ID.\",\n                     required = true,\n                     schema = @Schema(implementation = String.class)\n             ) @PathParam(\"executionId\") String executionId) {\n+        return handleDecisionRequest(executionId, ExecutionHeaderResponse::fromExecution);\n+    }\n \n-        Decision decision;\n+    @GET\n+    @Path(\"/{executionId}/structuredInputs\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the decision structured inputs.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionStructuredInputsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the decision structured inputs.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getStructuredInputs(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+        return handleDecisionRequest(executionId, DecisionStructuredInputsResponse::from);\n+    }\n+\n+    @GET\n+    @Path(\"/{executionId}/outcomes\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the decision outcomes.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionOutcomesResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the decision outcomes.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getOutcomes(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+        return handleDecisionRequest(executionId, DecisionOutcomesResponse::from);\n+    }\n+\n+    @GET\n+    @Path(\"/{executionId}/outcomes/{outcomeId}\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets a specific outcome of a decision.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionOutcomeResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets a specific outcome of a decision.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getOutcomeById(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId,\n+            @Parameter(\n+                    name = \"outcomeId\",\n+                    description = \"The outcome ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"outcomeId\") String outcomeId) {\n+        return handleDecisionRequest(executionId, decision -> decision.getOutcomes().stream()\n+                .filter(outcome -> outcomeId != null && outcomeId.equals(outcome.getOutcomeId()))\n+                .findFirst()\n+                .map(DecisionOutcomeResponse::from)\n+                .orElse(null)\n+        );\n+    }\n+\n+    private Response handleDecisionRequest(String executionId, Function<Decision, Object> transformer) {\n+        return retrieveDecision(executionId)\n+                .map(transformer)\n+                .map(obj -> Response.ok(obj).build())\n+                .orElseGet(() -> Response.status(Response.Status.BAD_REQUEST.getStatusCode()).build());", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2MjgxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452262818", "bodyText": "Imho we should return different error codes: 400 if the request is malformed and 404 if the resource is not found.\nRegarding the outcome API, if either the executionId or the outcomeId is well formed but not found in the storage, the resource is not found, which means returning 404.", "author": "kostola", "createdAt": "2020-07-09T14:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0ODA4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456448081", "bodyText": "I think this topic should be discussed among all the \"stakeholders\" (including FE guys). Let's keep this behavior for this PR and move the discussion to a dedicated ticket.", "author": "kostola", "createdAt": "2020-07-17T13:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1OTY1OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456459658", "bodyText": "Dedicated ticket created.", "author": "kostola", "createdAt": "2020-07-17T13:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMzU0OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450013548", "bodyText": "Could you use @JsonProperty explicitly?", "author": "r00ta", "createdAt": "2020-07-06T06:43:59Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/DecisionStructuredInputsResponse.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class DecisionStructuredInputsResponse {\n+\n+    private List<TypedValueResponse> inputs;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0ODM4NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452248384", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T14:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMzU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODc2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450018766", "bodyText": "What about moving this class to persistence-commons-infinispan and refactor also the data index marshallers?", "author": "r00ta", "createdAt": "2020-07-06T06:56:59Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/AbstractModelMarshaller.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+\n+abstract class AbstractModelMarshaller<T> extends AbstractMarshaller implements org.infinispan.protostream.MessageMarshaller<T> {", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NTIyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452255229", "bodyText": "Tbh my knowledge of the persistence component is limited and I can't tell clearly if this may be useful somewhere else.\n@danielezonca what do you think?", "author": "kostola", "createdAt": "2020-07-09T14:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NDE0NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454554144", "bodyText": "Not sure if it can be applied to all usages of the library, let's do this investigation/refactoring in another ticket", "author": "danielezonca", "createdAt": "2020-07-14T18:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2ODc2MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456468760", "bodyText": "Dedicated ticket created.", "author": "kostola", "createdAt": "2020-07-17T14:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTg0NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450021845", "bodyText": "Move constants to TypedValue class?", "author": "r00ta", "createdAt": "2020-07-06T07:04:05Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/TypedValueModelMarshaller.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueModelMarshaller extends AbstractModelMarshaller<TypedValue> {\n+\n+    public static final String NAME_FIELD = \"name\";\n+    public static final String TYPE_REF_FIELD = \"typeRef\";\n+    public static final String VALUE_FIELD = \"value\";", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxMTA5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452311090", "bodyText": "Why exactly are you asking me to move these contsants to the model class?\nThey are used only in the marshaller and theoretically it could be possible to store the model object with totally different field names than the ones in the model class.", "author": "kostola", "createdAt": "2020-07-09T15:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2NzUwOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452667508", "bodyText": "Because they reflect the field name and this is an information of the model class. For example if you rename a property this thing would be broken. If you move the constants to the model class and use them here, you don't have to worry about keeping the mapping up to date", "author": "r00ta", "createdAt": "2020-07-10T07:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MDYwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452850604", "bodyText": "Ok sorry I didn't realize that these field names are used also when querying the Storage object using the generic persistence API. I will fix this and all the similar issues you pointed out.", "author": "kostola", "createdAt": "2020-07-10T13:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMTE1MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454331151", "bodyText": "Fixed \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-14T12:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjIwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022202", "bodyText": "Move constants to MessageModel class?", "author": "r00ta", "createdAt": "2020-07-06T07:05:00Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/MessageModelMarshaller.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+\n+public class MessageModelMarshaller extends AbstractModelMarshaller<Message> {\n+\n+    public static final String CATEGORY_FIELD = \"category\";\n+    public static final String EXCEPTION_FIELD = \"exception\";\n+    public static final String LEVEL_FIELD = \"level\";\n+    public static final String SOURCE_ID_FIELD = \"sourceId\";\n+    public static final String TEXT_FIELD = \"text\";\n+    public static final String TYPE_FIELD = \"type\";", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxMTQyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452311420", "bodyText": "Same as this comment", "author": "kostola", "createdAt": "2020-07-09T15:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMTUwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454331500", "bodyText": "Fixed \ud83d\udc4d (because of this reply)", "author": "kostola", "createdAt": "2020-07-14T12:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjQxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022417", "bodyText": "Move constants to MeaageExceptionField class?", "author": "r00ta", "createdAt": "2020-07-06T07:05:28Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/MessageExceptionFieldModelMarshaller.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+\n+public class MessageExceptionFieldModelMarshaller extends AbstractModelMarshaller<MessageExceptionField> {\n+\n+    public static final String CAUSE_FIELD = \"cause\";\n+    public static final String CLASS_NAME_FIELD = \"className\";\n+    public static final String MESSAGE_FIELD = \"message\";", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxMTUwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452311504", "bodyText": "Same as this comment", "author": "kostola", "createdAt": "2020-07-09T15:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMTkwNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454331904", "bodyText": "Fixed \ud83d\udc4d (because of this reply)", "author": "kostola", "createdAt": "2020-07-14T12:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjU5OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022599", "bodyText": "Move constants to DecisionOutcome class?", "author": "r00ta", "createdAt": "2020-07-06T07:05:52Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionOutcomeModelMarshaller.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class DecisionOutcomeModelMarshaller extends AbstractModelMarshaller<DecisionOutcome> {\n+\n+    public static final String EVALUATION_STATUS_FIELD = \"evaluationStatus\";\n+    public static final String MESSAGES_FIELD = \"messages\";\n+    public static final String OUTCOME_ID_FIELD = \"outcomeId\";\n+    public static final String OUTCOME_INPUTS_FIELD = \"outcomeInputs\";\n+    public static final String OUTCOME_NAME_FIELD = \"outcomeName\";\n+    public static final String OUTCOME_RESULT_FIELD = \"outcomeResult\";", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxMTU2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452311562", "bodyText": "Same as this comment", "author": "kostola", "createdAt": "2020-07-09T15:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMTk4Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454331987", "bodyText": "Fixed \ud83d\udc4d (because of this reply)", "author": "kostola", "createdAt": "2020-07-14T12:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjc3Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022776", "bodyText": "Move constants to Decision class?", "author": "r00ta", "createdAt": "2020-07-06T07:06:19Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionModelMarshaller.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class DecisionModelMarshaller extends AbstractModelMarshaller<Decision> {\n+\n+    public static final String INPUTS_FIELD = \"inputs\";\n+    public static final String OUTCOMES_FIELD = \"outcomes\";", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxMTYxNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452311617", "bodyText": "Same as this comment", "author": "kostola", "createdAt": "2020-07-09T15:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMjA0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454332043", "bodyText": "Fixed \ud83d\udc4d (because of this reply)", "author": "kostola", "createdAt": "2020-07-14T12:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDA5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450024090", "bodyText": "Log as warn instead of error?", "author": "r00ta", "createdAt": "2020-07-06T07:09:28Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            // TODO: implement proper error strategy in case of issues with decoding of the CloudEvent\n+            LOG.error(\"Catched IllegalStateException while decoding CloudEvent\", e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+\n+        if (cloudEvent.getData().isEmpty()) {\n+            LOG.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTYwMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452301602", "bodyText": "Now that you pointed out, I agree with you since a malformed CloudEvent is an unwanted circumstance but it doesn't affect the execution of the Trusty service itself.", "author": "kostola", "createdAt": "2020-07-09T15:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNzI1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452307253", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T15:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDI0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450024243", "bodyText": "Log as warn?", "author": "r00ta", "createdAt": "2020-07-06T07:09:54Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            // TODO: implement proper error strategy in case of issues with decoding of the CloudEvent\n+            LOG.error(\"Catched IllegalStateException while decoding CloudEvent\", e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+\n+        if (cloudEvent.getData().isEmpty()) {\n+            LOG.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOG.debug(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        TraceEvent traceEvent = cloudEvent.getData().get();\n+        TraceEventType traceEventType = traceEvent.getHeader().getType();\n+\n+        if (traceEventType == TraceEventType.DMN) {\n+            service.storeDecision(attributes.getId(), converter.toDecision(traceEvent));\n+        } else {\n+            LOG.error(\"Unsupported TraceEvent type {}\", traceEventType);", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNzExMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452307110", "bodyText": "Done \ud83d\udc4d (same reason as here)", "author": "kostola", "createdAt": "2020-07-09T15:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450027863", "bodyText": "Rename tracing to messaging?", "author": "r00ta", "createdAt": "2020-07-06T07:18:00Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNzMzOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452307339", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T15:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODMwOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028309", "bodyText": "Could you use @JsonProperty explicitly?", "author": "r00ta", "createdAt": "2020-07-06T07:19:00Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/TypedValueResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueResponse {\n+\n+    private String name;\n+    private String typeRef;\n+    private JsonNode value;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MDY4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452270689", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T14:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODUzNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028537", "bodyText": "Could you use @JsonProperty explicitly?", "author": "r00ta", "createdAt": "2020-07-06T07:19:28Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageResponse.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+\n+public class MessageResponse {\n+\n+    private String level;\n+    private String category;\n+    private String type;\n+    private String sourceId;\n+    private String text;\n+    private MessageExceptionFieldResponse exception;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MDc5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452270796", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T14:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODYyNA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028624", "bodyText": "Could you use @JsonProperty explicitly?", "author": "r00ta", "createdAt": "2020-07-06T07:19:39Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageExceptionFieldResponse.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+\n+public class MessageExceptionFieldResponse {\n+\n+    private String className;\n+    private String message;\n+    private MessageExceptionFieldResponse cause;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MDkyMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452270921", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T14:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODczOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028738", "bodyText": "Could you use @JsonProperty explicitly?", "author": "r00ta", "createdAt": "2020-07-06T07:19:56Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/DecisionOutcomesResponse.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+\n+public class DecisionOutcomesResponse {\n+\n+    private ExecutionHeaderResponse header;\n+    private List<DecisionOutcomeResponse> outcomes;\n+", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MTEwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452271107", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T14:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyOTM4OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450029389", "bodyText": "In which API is this going to be returned?", "author": "r00ta", "createdAt": "2020-07-06T07:21:25Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageResponse.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+\n+public class MessageResponse {", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MzQ4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452273480", "bodyText": "The outcomes API returns a list of DecisionOutcomesResponse, each of those contains a list of MessageResponse.", "author": "kostola", "createdAt": "2020-07-09T14:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyOTM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMjQ3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450032473", "bodyText": "Where is the components property? Was the API discussed in the meanwhile? AFAIK the payload should look like the following (an example):\n    {\n      \"name\": \"Transactions\",\n      \"typeRef\": \"tTransactions\",\n      \"value\": null,\n      \"components\": [\n        [\n          {\n            \"name\": \"Auth Code\",\n            \"typeRef\": \"tAuthCode\",\n            \"value\": \"Authorized\",\n            \"components\": null\n          },\n          {\n            \"name\": \"Amount\",\n            \"typeRef\": \"number\",\n            \"value\": 10000,\n            \"components\": null\n          },\n          {\n            \"name\": \"Card Type\",\n            \"typeRef\": \"tCardType\",\n            \"value\": \"Debit\",\n            \"components\": null\n          },\n          {\n            \"name\": \"Location\",\n            \"typeRef\": \"tLocation\",\n            \"value\": \"Local\",\n            \"components\": null\n          }\n        ]\n      ]\n}", "author": "r00ta", "createdAt": "2020-07-06T07:27:56Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/TypedValueResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueResponse {\n+\n+    private String name;", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MDE5NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452290195", "bodyText": "The current structure of TraceEvent doesn't contain any information about custom data types, which is necessary if we want to build the structure in your comment.\nThe only thing I can know about a input/output value is the top level type. So I decided for this version to skip the components field and simply serialize the whole variable in the value field.\nI know it's not aligned with the API structure implemented in the PoC, but that's the best we can do at the moment.\nImho we must open a dedicated ticket to enrich the TraceEvent with information about custom types, so that it would finally be possible to implement this structure.", "author": "kostola", "createdAt": "2020-07-09T15:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMjQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMjU5OQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454332599", "bodyText": "Opened this ticket for this purpose", "author": "kostola", "createdAt": "2020-07-14T12:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMjQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNTg5NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450035894", "bodyText": "components property?", "author": "r00ta", "createdAt": "2020-07-06T07:35:17Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/TypedValueModelMarshaller.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueModelMarshaller extends AbstractModelMarshaller<TypedValue> {\n+\n+    public static final String NAME_FIELD = \"name\";", "originalCommit": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNTAyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452305023", "bodyText": "Check this comment", "author": "kostola", "createdAt": "2020-07-09T15:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNTg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTYwNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450919605", "bodyText": "Remove underline in all test names?", "author": "r00ta", "createdAt": "2020-07-07T14:43:49Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/api/DecisionsApiV1Test.java", "diffHunk": "@@ -16,42 +16,226 @@\n \n package org.kie.kogito.trusty.service.api;\n \n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.junit.mockito.InjectMock;\n+import io.restassured.filter.log.ResponseLoggingFilter;\n import io.restassured.http.ContentType;\n-import org.junit.jupiter.api.Assertions;\n+import io.restassured.response.Response;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.responses.DecisionOutcomeResponse;\n+import org.kie.kogito.trusty.service.responses.DecisionOutcomesResponse;\n+import org.kie.kogito.trusty.service.responses.DecisionStructuredInputsResponse;\n import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n-import org.mockito.Mockito;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n \n import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.when;\n \n @QuarkusTest\n public class DecisionsApiV1Test {\n \n+    private static final String TEST_EXECUTION_ID = \"executionId\";\n+    private static final String TEST_OUTCOME_ID = \"FirstOutcome\";\n+\n     @InjectMock\n     ITrustyService executionService;\n \n     @Test\n-    void givenAValidRequestWhenExecutionEndpointIsCalledThenTheDefaultValuesAreCorrect() {\n+    void test_GetExecutionById() throws Exception {", "originalCommit": "0cff921ffdba337e1f7c550ace140324467aeb8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNjY1Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452306656", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T15:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3NjI3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r451376274", "bodyText": "In which API do we return this message?", "author": "r00ta", "createdAt": "2020-07-08T08:34:47Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+\n+public class MessageResponse {\n+\n+    private String level;\n+    private String category;\n+    private String type;\n+    private String sourceId;\n+    private String text;\n+    private MessageExceptionFieldResponse exception;\n+\n+    private MessageResponse() {\n+    }\n+\n+    public MessageResponse(String level, String category, String type, String sourceId, String text, MessageExceptionFieldResponse exception) {", "originalCommit": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0OTc3NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452249774", "bodyText": "The outcomes API returns a list of DecisionOutcomesResponse, each of those contains a list of MessageResponse.", "author": "kostola", "createdAt": "2020-07-09T14:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3NjI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDA2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r451380066", "bodyText": "what about exceptions?\n\nI might be wrong, but since this is running on the main event loop, if an exception occours it is stopped and no event is consumed anymore. Could you double check?\nif an event is corrupted or something, our consumer will be stuck forever on that event until it is removed from the topic right?\nwhat is our retry policy?", "author": "r00ta", "createdAt": "2020-07-08T08:41:00Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }", "originalCommit": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2OTgxMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452269813", "bodyText": "My answers:\n\n\nIn case of unexpected exceptions, yes this may be true. To be honest I don't know if we want to catch any exception to make sure the event loop keeps running, because it may be a fatal error (e.g. OutOfMemoryError).\n\n\nNope, if the serialized event contained in the Message<String> is somehow corrupted, the decodeCloudEvent handles the exception and returns an empty Optional. This means that the event is not handled, but the message is acked anyway to avoid being stuck in a always failing retry loop.\n\n\nWe never discussed this and we definitely should. Maybe in another ticket? (@danielezonca wdyt?)", "author": "kostola", "createdAt": "2020-07-09T14:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3ODM0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452978343", "bodyText": "For the case 1 I think we should be a bit conservative and handle it. Just as example, the database might be not available and an exception would be raised when trying to store the event -> the only way to make the application work again would be a new deployment which is quite bad. It would be nice to have an integration test for that (assuming that what I wrote in the first comment is correct about the event loop)", "author": "r00ta", "createdAt": "2020-07-10T17:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0NDU3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456444573", "bodyText": "Let's discuss all the topics related to errors/retry in the dedicated ticket", "author": "kostola", "createdAt": "2020-07-17T13:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MjY2OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r451382668", "bodyText": "Move to another class?", "author": "r00ta", "createdAt": "2020-07-08T08:45:07Z", "path": "trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/model/Message.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.api.model;\n+\n+public class Message {\n+\n+    public enum Level {\n+        ERROR,\n+        WARNING,\n+        INFO;\n+    }", "originalCommit": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwOTI3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452309278", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T15:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MjY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyODIwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452128206", "bodyText": "Can't we simply import \"org.infinispan.protostream.MessageMarshaller\". Is it necessary to use long name here?", "author": "jiripetrlik", "createdAt": "2020-07-09T10:43:51Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/AbstractModelMarshaller.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+\n+abstract class AbstractModelMarshaller<T> extends AbstractMarshaller implements org.infinispan.protostream.MessageMarshaller<T> {", "originalCommit": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNjQ1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452306455", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-09T15:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyODIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODIyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452688223", "bodyText": "error should be better", "author": "danielezonca", "createdAt": "2020-07-10T08:04:09Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            LOG.warn(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);", "originalCommit": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3MzA0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452973040", "bodyText": "I know this is a small detail, but according to this good documentation https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel?view=dotnet-plat-ext-3.1 (don't mind if it's for another language, the levels are the same) I think it's a bit too much to log it as error. It's like logging as error a bad request: here we get a malformed event instead.", "author": "r00ta", "createdAt": "2020-07-10T17:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3NTQ3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452975478", "bodyText": "I would have another remark: In another comment I've raised the topic of the retry policy, or anyway what do we do when there are exceptions during the process of the event. We are building a tool that is somehow transactional, i.e. we should never lose events, we might generate an error when the event is actually removed from the topic without being processed/stored (of course after the retry policy is applied without success).", "author": "r00ta", "createdAt": "2020-07-10T17:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MTI2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456441266", "bodyText": "Let's use error for this PR and discuss this together with the retry policy in the dedicated ticket.", "author": "kostola", "createdAt": "2020-07-17T13:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0Mjc5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456442798", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-17T13:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODUwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452688506", "bodyText": "error", "author": "danielezonca", "createdAt": "2020-07-10T08:04:45Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            LOG.warn(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<TraceEvent> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOG.warn(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());", "originalCommit": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzEyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456443123", "bodyText": "Done \ud83d\udc4d (see this comment)", "author": "kostola", "createdAt": "2020-07-17T13:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4OTE2Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452689162", "bodyText": "error", "author": "danielezonca", "createdAt": "2020-07-10T08:05:58Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            LOG.warn(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<TraceEvent> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOG.warn(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOG.debug(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        TraceEvent traceEvent = optData.get();\n+        TraceEventType traceEventType = traceEvent.getHeader().getType();\n+\n+        if (traceEventType == TraceEventType.DMN) {\n+            service.storeDecision(attributes.getId(), converter.toDecision(traceEvent));\n+        } else {\n+            LOG.warn(\"Unsupported TraceEvent type {}\", traceEventType);", "originalCommit": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ0MzA0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456443046", "bodyText": "Done \ud83d\udc4d (see this comment)", "author": "kostola", "createdAt": "2020-07-17T13:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4OTE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDM3Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452690373", "bodyText": "This is an utility class with no fields so I think we should make all method static + private constructor", "author": "danielezonca", "createdAt": "2020-07-10T08:08:35Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConverter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.MessageLevel;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TraceEventConverter {", "originalCommit": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMTQ0MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456431440", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-17T13:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDgyMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452690822", "bodyText": "Please create a ticket for this and use Test User or even empty string instead of a fake value", "author": "danielezonca", "createdAt": "2020-07-10T08:09:30Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConverter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.MessageLevel;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TraceEventConverter {\n+\n+    public Decision toDecision(TraceEvent event) {\n+\n+        List<TypedValue> inputs = event.getInputs() == null\n+                ? null\n+                : event.getInputs().stream().map(this::toInput).collect(Collectors.toList());\n+\n+        List<DecisionOutcome> outcomes = event.getOutputs() == null\n+                ? null\n+                : event.getOutputs().stream().map(this::toOutcome).collect(Collectors.toList());\n+\n+        return new Decision(\n+                event.getHeader().getExecutionId(),\n+                event.getHeader().getStartTimestamp(),\n+                true,        // TODO: change this default\n+                \"John Doe\",  // TODO: change this default", "originalCommit": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTczMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454329730", "bodyText": "Done \ud83d\udc4d (here is the ticket)", "author": "kostola", "createdAt": "2020-07-14T12:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MzczOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452693738", "bodyText": "What about use this MessageLevel directly in the TraceEvent instead of publish a kie.api.builder class?", "author": "danielezonca", "createdAt": "2020-07-10T08:15:29Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConverter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.MessageLevel;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TraceEventConverter {\n+\n+    public Decision toDecision(TraceEvent event) {\n+\n+        List<TypedValue> inputs = event.getInputs() == null\n+                ? null\n+                : event.getInputs().stream().map(this::toInput).collect(Collectors.toList());\n+\n+        List<DecisionOutcome> outcomes = event.getOutputs() == null\n+                ? null\n+                : event.getOutputs().stream().map(this::toOutcome).collect(Collectors.toList());\n+\n+        return new Decision(\n+                event.getHeader().getExecutionId(),\n+                event.getHeader().getStartTimestamp(),\n+                true,        // TODO: change this default\n+                \"John Doe\",  // TODO: change this default\n+                event.getHeader().getResourceId().getModelName(),\n+                inputs,\n+                outcomes\n+        );\n+    }\n+\n+    public TypedValue toInput(TraceInputValue eventInput) {\n+        return new TypedValue(\n+                eventInput.getName(),\n+                eventInput.getType().getId(),\n+                eventInput.getValue()\n+        );\n+    }\n+\n+    public DecisionOutcome toOutcome(TraceOutputValue eventOutput) {\n+        return new DecisionOutcome(\n+                eventOutput.getId(),\n+                eventOutput.getName(),\n+                eventOutput.getStatus(),\n+                new TypedValue(eventOutput.getName(), eventOutput.getType().getId(), eventOutput.getValue()),\n+                null,\n+                eventOutput.getMessages() == null ? null : eventOutput.getMessages().stream().map(this::toMessage).collect(Collectors.toList())\n+        );\n+    }\n+\n+    public Message toMessage(org.kie.kogito.tracing.decision.event.common.Message eventMessage) {\n+        return new Message(\n+                toMessageLevel(eventMessage.getLevel()),\n+                eventMessage.getCategory() == null ? null : eventMessage.getCategory().name(),\n+                eventMessage.getType(),\n+                eventMessage.getSourceId(),\n+                eventMessage.getText(),\n+                toMessageExceptionField(eventMessage.getException())\n+        );\n+    }\n+\n+    public MessageExceptionField toMessageExceptionField(org.kie.kogito.tracing.decision.event.common.MessageExceptionField eventException) {\n+        return eventException == null\n+                ? null\n+                : new MessageExceptionField(eventException.getClassName(), eventException.getMessage(), toMessageExceptionField(eventException.getCause()));\n+    }\n+\n+    public MessageLevel toMessageLevel(org.kie.api.builder.Message.Level eventLevel) {\n+        switch (eventLevel) {\n+            case ERROR:\n+                return MessageLevel.ERROR;\n+            case WARNING:\n+                return MessageLevel.WARNING;\n+            case INFO:\n+                return MessageLevel.INFO;\n+            default:\n+                return null;\n+        }\n+    }", "originalCommit": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454329267", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-14T12:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MzczOA=="}], "type": "inlineReview"}, {"oid": "40f2b11bddfae17e493f9801a2b2f4f0340ffa1b", "url": "https://github.com/kiegroup/kogito-apps/commit/40f2b11bddfae17e493f9801a2b2f4f0340ffa1b", "message": "[KOGITO-2537] Improvements", "committedDate": "2020-07-13T15:00:39Z", "type": "forcePushed"}, {"oid": "5970aafca092432dfd88cf65dd35f48a72a2cee4", "url": "https://github.com/kiegroup/kogito-apps/commit/5970aafca092432dfd88cf65dd35f48a72a2cee4", "message": "[KOGITO-2537] Improvements", "committedDate": "2020-07-13T15:04:23Z", "type": "forcePushed"}, {"oid": "7569f451546ec8e9b36af19168493649a8b9870e", "url": "https://github.com/kiegroup/kogito-apps/commit/7569f451546ec8e9b36af19168493649a8b9870e", "message": "[KOGITO-2537] Improve tests of trusty-storage-infinispan", "committedDate": "2020-07-14T10:40:42Z", "type": "forcePushed"}, {"oid": "9790cee844ce46fdb869ac095799aa30abe7cc66", "url": "https://github.com/kiegroup/kogito-apps/commit/9790cee844ce46fdb869ac095799aa30abe7cc66", "message": "[KOGITO-2537] Add TraceEventConsumerIT", "committedDate": "2020-07-14T14:54:11Z", "type": "forcePushed"}, {"oid": "eff8385069f9b2af5bb4c056b63a64dd5501c2f4", "url": "https://github.com/kiegroup/kogito-apps/commit/eff8385069f9b2af5bb4c056b63a64dd5501c2f4", "message": "[KOGITO-2537] Add workaround for infinispan serialization error of Message model", "committedDate": "2020-07-16T08:51:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NDIyNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454574227", "bodyText": "Can you add some additional assertions?\nFor example number of input and a check on a specific value", "author": "danielezonca", "createdAt": "2020-07-14T18:55:38Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumerIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.vertx.core.Vertx;\n+import io.vertx.kafka.client.producer.KafkaProducer;\n+import io.vertx.kafka.client.producer.KafkaProducerRecord;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.TrustyInfinispanServerTestResource;\n+import org.kie.kogito.trusty.service.TrustyKafkaTestResource;\n+import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+@QuarkusTestResource(TrustyKafkaTestResource.class)\n+class TraceEventConsumerIT {\n+\n+    @Inject\n+    TraceEventConsumer traceEventConsumer;\n+    @Inject\n+    TrustyService trustyService;\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    KafkaProducer<String, String> producer;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+\n+        System.err.println(\"kafka.bootstrap.servers: \" + System.getProperty(TrustyKafkaTestResource.KAFKA_BOOTSTRAP_SERVERS, \"localhost:9092\"));\n+\n+        producer = KafkaProducer.create(Vertx.vertx(), Map.of(\n+                \"bootstrap.servers\", System.getProperty(TrustyKafkaTestResource.KAFKA_BOOTSTRAP_SERVERS, \"localhost:9092\"),\n+                \"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\",\n+                \"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\",\n+                \"acks\", \"all\"\n+        ));\n+    }\n+\n+    @Test\n+    void testCorrectCloudEvent() throws Exception {\n+        sendToKafkaAndRun(IOUtils.resourceToString(\"/TraceEventTest_correct_CloudEvent.json\", StandardCharsets.UTF_8), () ->\n+            assertNotNull(trustyService.getDecisionById(\"82639415-ceb1-411a-b3c8-4832e6a82905\"))\n+        );", "originalCommit": "9790cee844ce46fdb869ac095799aa30abe7cc66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMTE3MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r456431170", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-17T13:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NDIyNw=="}], "type": "inlineReview"}, {"oid": "ba7f0b1fda935aa4375b386c5aeb93ae404412c5", "url": "https://github.com/kiegroup/kogito-apps/commit/ba7f0b1fda935aa4375b386c5aeb93ae404412c5", "message": "[KOGITO-2537] Static TraceEventConverter methods + improved TraceEventConsumerIT", "committedDate": "2020-07-17T13:06:17Z", "type": "forcePushed"}, {"oid": "8e50079f8950757627ce1da913154427cd483540", "url": "https://github.com/kiegroup/kogito-apps/commit/8e50079f8950757627ce1da913154427cd483540", "message": "[KOGITO-2537] Log at error level in TraceEventConsumer", "committedDate": "2020-07-17T14:21:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3OTI4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457179281", "bodyText": "There is the same class (KafkaTestResource) in the data-index, it would be nice to refactor it under a common class that can be re-used by multiple modules", "author": "r00ta", "createdAt": "2020-07-20T08:36:58Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyKafkaTestResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class TrustyKafkaTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    public static final String KAFKA_BOOTSTRAP_SERVERS = \"kafka.bootstrap.servers\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TrustyKafkaTestResource.class);\n+    private static final KafkaContainer KAFKA = new KafkaContainer()\n+            .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+            .withStartupTimeout(Duration.ofSeconds(120));\n+\n+    @Override\n+    public Map<String, String> start() {\n+        if (!KAFKA.isRunning()) {\n+            KAFKA.start();\n+            LOGGER.info(\"Kafka servers: {}\", KAFKA.getBootstrapServers());\n+        }\n+        return singletonMap(KAFKA_BOOTSTRAP_SERVERS, KAFKA.getBootstrapServers());\n+    }\n+\n+    @Override\n+    public void stop() {\n+        KAFKA.stop();\n+    }\n+}", "originalCommit": "8e50079f8950757627ce1da913154427cd483540", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxNzgwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457917807", "bodyText": "Yes, we should discuss this with the data-index developers \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-21T08:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3OTI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MDkzMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457940931", "bodyText": "@kostola can you create a ticket for this?", "author": "r00ta", "createdAt": "2020-07-21T08:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3OTI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjU2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457232566", "bodyText": "This is not really testing that if a property is added to the model class, then it has to be added in the marshaller as well. This is what DecisionMarshallerTest.java was testing (now deleted)", "author": "r00ta", "createdAt": "2020-07-20T09:47:43Z", "path": "trusty/trusty-storage/trusty-storage-infinispan/src/test/java/org/kie/kogito/trusty/storage/infinispan/MarshallerTestTemplate.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.infinispan.testfield.AbstractTestField;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+abstract class MarshallerTestTemplate<T> {\n+\n+    protected abstract T buildEmptyObject();\n+\n+    protected abstract MessageMarshaller<T> buildMarshaller();\n+\n+    protected abstract List<AbstractTestField<T, ?>> getTestFieldList();\n+\n+    @Test\n+    void allPropertiesAreCoveredByTheMarshaller() throws IOException {\n+        List<AbstractTestField<T, ?>> list = getTestFieldList();\n+\n+        T object = buildEmptyObject();\n+        list.forEach(td -> td.setValue(object));\n+\n+        MessageMarshaller.ProtoStreamWriter protoStreamWriter = mock(MessageMarshaller.ProtoStreamWriter.class);\n+        MessageMarshaller<T> marshaller = buildMarshaller();\n+        marshaller.writeTo(protoStreamWriter, object);\n+\n+        assertEquals(list.size(), mockingDetails(protoStreamWriter).getInvocations().size());\n+        for (AbstractTestField<T, ?> td : list) {\n+            td.verifyWriter(protoStreamWriter);\n+        }\n+    }\n+\n+    @Test\n+    void allPropertiesAreCoveredByTheUnmarshaller() throws IOException {\n+        List<AbstractTestField<T, ?>> list = getTestFieldList();\n+\n+        MessageMarshaller.ProtoStreamReader protoStreamReader = mock(MessageMarshaller.ProtoStreamReader.class);\n+        for (AbstractTestField<T, ?> td : list) {\n+            td.mockReader(protoStreamReader);\n+        }\n+\n+        MessageMarshaller<T> marshaller = buildMarshaller();\n+        T output = marshaller.readFrom(protoStreamReader);\n+\n+        assertEquals(list.size(), mockingDetails(protoStreamReader).getInvocations().size());\n+        list.forEach(td -> td.assertValue(output));\n+    }\n+}", "originalCommit": "8e50079f8950757627ce1da913154427cd483540", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM1NjE5MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457356191", "bodyText": "How do you determine exactly if a property is added to the model?\nThe old test iirc used reflection to look for all the methods of the class starting with set. Is this the desired way?", "author": "kostola", "createdAt": "2020-07-20T12:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzOTY2Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457439667", "bodyText": "Yes, that's a way", "author": "r00ta", "createdAt": "2020-07-20T14:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxOTcyMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457919723", "bodyText": "All the tests for model marshallers now share this common logic by inheriting from MarshallerTestTemplate. The subclass only have to declare which fields must be tested.\nI added a new test that checks for all the fields in the model class via reflection and fails if it finds at least one field that is not declared.\nDeclaring the new field in the test class will both solve the failure described above and trigger the test of the marshaller read/write logic.", "author": "kostola", "createdAt": "2020-07-21T08:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjU2Ng=="}], "type": "inlineReview"}, {"oid": "3e0e45d3935da9859a7d34051d1efe7ab2b95dca", "url": "https://github.com/kiegroup/kogito-apps/commit/3e0e45d3935da9859a7d34051d1efe7ab2b95dca", "message": "[KOGITO-2537] Add TraceEventConsumer to trusty-service", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "8ab79287bbe7d975513e2b607dc9b08bdd291d8a", "url": "https://github.com/kiegroup/kogito-apps/commit/8ab79287bbe7d975513e2b607dc9b08bdd291d8a", "message": "[KOGITO-2537] Improve Decision model", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "8124a69817bd78c986c3853952d4031a0ddb9651", "url": "https://github.com/kiegroup/kogito-apps/commit/8124a69817bd78c986c3853952d4031a0ddb9651", "message": "[KOGITO-2537] Extend Decision model", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "d7692819171f08b05f54b1641c7c86e647e96c99", "url": "https://github.com/kiegroup/kogito-apps/commit/d7692819171f08b05f54b1641c7c86e647e96c99", "message": "[KOGITO-2537] Fix Decision inputs and outcomes", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "1e71bcf926ee0c1eeca93210d3ff28e043c4ec72", "url": "https://github.com/kiegroup/kogito-apps/commit/1e71bcf926ee0c1eeca93210d3ff28e043c4ec72", "message": "[KOGITO-2537] Improve trusty-service APIs", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "db3d3b1494bfa0b062505e71f9dc3a234f0b979f", "url": "https://github.com/kiegroup/kogito-apps/commit/db3d3b1494bfa0b062505e71f9dc3a234f0b979f", "message": "[KOGITO-2537] Fix enum serialization/deserialization", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "21feb448f1e44163ad6d9533225f7f8d86833e42", "url": "https://github.com/kiegroup/kogito-apps/commit/21feb448f1e44163ad6d9533225f7f8d86833e42", "message": "[KOGITO-2537] Improve trusty-service API tests", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "89b3680903251d6d02b647a050164623c2bf8f7b", "url": "https://github.com/kiegroup/kogito-apps/commit/89b3680903251d6d02b647a050164623c2bf8f7b", "message": "[KOGITO-2537] Add TraceEventConsumerTest and TraceEventConverterTest", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "daae9948a813a1f4557d47cbbb313948c36afdc7", "url": "https://github.com/kiegroup/kogito-apps/commit/daae9948a813a1f4557d47cbbb313948c36afdc7", "message": "[KOGITO-2537] Reduce code smells", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "57f4f7481d7bad4a9e7d4bd19b64fe3c6b7de812", "url": "https://github.com/kiegroup/kogito-apps/commit/57f4f7481d7bad4a9e7d4bd19b64fe3c6b7de812", "message": "[KOGITO-2537] Add @JsonProperty to trusty-service responses", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "7da72e822c1f41a1f6d09ea2bc27dc81d78f095f", "url": "https://github.com/kiegroup/kogito-apps/commit/7da72e822c1f41a1f6d09ea2bc27dc81d78f095f", "message": "[KOGITO-2537] Minor fixes", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "b7bf78f53f36120fd8db2e3669b5ae44edd73029", "url": "https://github.com/kiegroup/kogito-apps/commit/b7bf78f53f36120fd8db2e3669b5ae44edd73029", "message": "[KOGITO-2537] Move Message.Level to dedicated MessageLevel enum in trusty storage", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "a4403137eca412d4d11355654bc5d175489efec7", "url": "https://github.com/kiegroup/kogito-apps/commit/a4403137eca412d4d11355654bc5d175489efec7", "message": "[KOGITO-2537] Improvements", "committedDate": "2020-07-20T12:48:11Z", "type": "commit"}, {"oid": "cce8e56c7714c827b390933abad839828b654eed", "url": "https://github.com/kiegroup/kogito-apps/commit/cce8e56c7714c827b390933abad839828b654eed", "message": "[KOGITO-2537] Improve tests of trusty-storage-infinispan", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "b9881d91ec40dd43116bba88fee05b383604fc74", "url": "https://github.com/kiegroup/kogito-apps/commit/b9881d91ec40dd43116bba88fee05b383604fc74", "message": "[KOGITO-2537] Remove redundant MessageLevel enum from trusty-storage-api", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "9bb87e3a5d907551cdf0008a35083911c4acd49d", "url": "https://github.com/kiegroup/kogito-apps/commit/9bb87e3a5d907551cdf0008a35083911c4acd49d", "message": "[KOGITO-2537] Add TraceEventConsumerIT", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "d4d3b90432383b1f684410b38586e927a092163e", "url": "https://github.com/kiegroup/kogito-apps/commit/d4d3b90432383b1f684410b38586e927a092163e", "message": "[KOGITO-2537] Add testCloudEventWithErrors to TraceEventConsumerIT", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "0407a93a0460eaafb37bee3eedcb6d4549a872b2", "url": "https://github.com/kiegroup/kogito-apps/commit/0407a93a0460eaafb37bee3eedcb6d4549a872b2", "message": "[KOGITO-2537] Improve marshaller tests", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "0da108c2eb252b326dab644da5aaf8f05cc07305", "url": "https://github.com/kiegroup/kogito-apps/commit/0da108c2eb252b326dab644da5aaf8f05cc07305", "message": "[KOGITO-2537] Add workaround for infinispan serialization error of Message model", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "511917ced9154ca3e704ceac1a142ef289775fc5", "url": "https://github.com/kiegroup/kogito-apps/commit/511917ced9154ca3e704ceac1a142ef289775fc5", "message": "[KOGITO-2537] Remove JSON test resources from trusty-service", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "45102477f5a70e5e6b578f4813d99fa7d06c1c44", "url": "https://github.com/kiegroup/kogito-apps/commit/45102477f5a70e5e6b578f4813d99fa7d06c1c44", "message": "[KOGITO-2537] Static TraceEventConverter methods + improved TraceEventConsumerIT", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "e7b20dbaaff90c77558a33059c9080cd6ee60fc5", "url": "https://github.com/kiegroup/kogito-apps/commit/e7b20dbaaff90c77558a33059c9080cd6ee60fc5", "message": "[KOGITO-2537] Log at error level in TraceEventConsumer", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "url": "https://github.com/kiegroup/kogito-apps/commit/c4f20741e78246497ee1ae09e637b517dc0c2ebc", "message": "[KOGITO-2537] Fix TraceEventConsumerIT", "committedDate": "2020-07-20T12:48:12Z", "type": "commit"}, {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "url": "https://github.com/kiegroup/kogito-apps/commit/c4f20741e78246497ee1ae09e637b517dc0c2ebc", "message": "[KOGITO-2537] Fix TraceEventConsumerIT", "committedDate": "2020-07-20T12:48:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTY3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457455678", "bodyText": "Just for my understanding: isnt't more readable to store the json TraceEvent in the resource and import it?", "author": "r00ta", "createdAt": "2020-07-20T14:47:18Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTestUtils.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.common.Message;\n+import org.kie.kogito.tracing.decision.event.common.MessageCategory;\n+import org.kie.kogito.tracing.decision.event.common.MessageExceptionField;\n+import org.kie.kogito.tracing.decision.event.common.MessageLevel;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.tracing.decision.event.trace.TraceExecutionStep;\n+import org.kie.kogito.tracing.decision.event.trace.TraceExecutionStepType;\n+import org.kie.kogito.tracing.decision.event.trace.TraceHeader;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceResourceId;\n+import org.kie.kogito.tracing.decision.event.trace.TraceType;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TrustyServiceTestUtils {\n+\n+    public static final String CORRECT_CLOUDEVENT_ID = \"82639415-ceb1-411a-b3c8-4832e6a82905\";\n+    public static final String CLOUDEVENT_WITH_ERRORS_ID = \"6f8f5a8b-5477-464c-b5d3-1e3ed399e0da\";\n+    public static final String CLOUDEVENT_WITH_NULL_FIELDS_ID = \"03c3db32-5b93-473f-a83d-39e661e2462e\";\n+    public static final String CLOUDEVENT_WITHOUT_DATA_ID = \"7dad3bf4-14cc-4c8e-aa3c-8f4598865142\";\n+\n+    private static final long CORRECT_CLOUDEVENT_START_TS = 1594105482568L;\n+    private static final long CORRECT_CLOUDEVENT_DURATION = 26L;\n+    private static final long CLOUDEVENT_WITH_ERRORS_START_TS = 1594136494308L;\n+    private static final long CLOUDEVENT_WITH_ERRORS_DURATION = 165L;\n+    private static final long CLOUDEVENT_WITH_NULL_FIELDS_START_TS = 1594136494408L;\n+    private static final long CLOUDEVENT_WITH_NULL_FIELDS_DURATION = 265L;\n+\n+    private static final String EVALUATION_STATUS_SKIPPED = \"SKIPPED\";\n+    private static final String EVALUATION_STATUS_SUCCEEDED = \"SUCCEEDED\";\n+\n+    private static final String MODEL_NAME = \"Traffic Violation\";\n+    private static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+\n+    private static final String EXCEPTION_CAUSE_CLASS_NAME = \"ExceptionCauseClass\";\n+    private static final String EXCEPTION_CAUSE_MESSAGE = \"Exception cause message\";\n+    private static final String EXCEPTION_CLASS_NAME = \"ExceptionClass\";\n+    private static final String EXCEPTION_MESSAGE = \"Exception message\";\n+    private static final String INPUT_DRIVER_JSON = \"{\\\"Age\\\": 25,\\\"Points\\\": 13}\";\n+    private static final String INPUT_DRIVER_NODE_ID = \"_1F9350D7-146D-46F1-85D8-15B5B68AF22A\";\n+    private static final String INPUT_DRIVER_NODE_NAME = \"Driver\";\n+    private static final String INPUT_VIOLATION_JSON = \"{\\\"Type\\\": \\\"speed\\\",\\\"Actual Speed\\\": 140,\\\"Speed Limit\\\": 100}\";\n+    private static final String INPUT_VIOLATION_NODE_ID = \"_1929CBD5-40E0-442D-B909-49CEDE0101DC\";\n+    private static final String INPUT_VIOLATION_NODE_NAME = \"Violation\";\n+    private static final MessageCategory MESSAGE_INFO_CATEGORY = MessageCategory.INTERNAL;\n+    private static final String MESSAGE_INFO_TEXT = \"This is a info test message\";\n+    private static final String MESSAGE_INFO_TYPE = \"INFO_TEST_MESSAGE\";\n+    private static final MessageCategory MESSAGE_ERROR_CATEGORY = MessageCategory.DMN;\n+    private static final String MESSAGE_ERROR_TEXT = \"DMN: Required dependency 'Driver' not found on node 'Should the driver be suspended?' (DMN id: _8A408366-D8E9-4626-ABF3-5F69AA01F880, The referenced node was not found) \";\n+    private static final String MESSAGE_ERROR_TYPE = \"REQ_NOT_FOUND\";\n+    private static final MessageCategory MESSAGE_WARNING_CATEGORY = MessageCategory.INTERNAL;\n+    private static final String MESSAGE_WARNING_TEXT = \"This is a warning test message\";\n+    private static final String MESSAGE_WARNING_TYPE = \"WARNING_TEST_MESSAGE\";\n+    private static final String OUTPUT_FINE_JSON = \"{\\\"Points\\\": 7,\\\"Amount\\\": 1000}\";\n+    private static final String OUTPUT_FINE_NODE_ID = \"_4055D956-1C47-479C-B3F4-BAEB61F1C929\";\n+    private static final String OUTPUT_FINE_NODE_NAME = \"Fine\";\n+    private static final String OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_JSON = \"\\\"Yes\\\"\";\n+    private static final String OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_ID = \"_8A408366-D8E9-4626-ABF3-5F69AA01F880\";\n+    private static final String OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_NAME = \"Should the driver be suspended?\";\n+    private static final String TYPE_DRIVER_NODE_ID = \"_63824D3F-9173-446D-A940-6A7F0FA056BB\";\n+    private static final String TYPE_FINE_NODE_ID = \"_2D4F30EE-21A6-4A78-A524-A5C238D433AE\";\n+    private static final String TYPE_VIOLATION_NODE_ID = \"_40731093-0642-4588-9183-1660FC55053B\";\n+\n+    private static final TraceResourceId trafficViolationResourceId = new TraceResourceId(MODEL_NAMESPACE, MODEL_NAME);\n+    private static final TraceType stringType = new TraceType(null, \"http://www.omg.org/spec/DMN/20180521/FEEL/\", \"string\");\n+    private static final TraceType tDriverType = new TraceType(TYPE_DRIVER_NODE_ID, MODEL_NAMESPACE, \"tDriver\");\n+    private static final TraceType tFineType = new TraceType(TYPE_FINE_NODE_ID, MODEL_NAMESPACE, \"tFine\");\n+    private static final TraceType tViolationType = new TraceType(TYPE_VIOLATION_NODE_ID, MODEL_NAMESPACE, \"tViolation\");\n+\n+    public static CloudEventImpl<TraceEvent> buildCloudEvent(TraceEvent traceEvent) {\n+        return CloudEventUtils.build(\n+                traceEvent.getHeader().getExecutionId(),\n+                URI.create(URLEncoder.encode(traceEvent.getHeader().getResourceId().getModelName(), StandardCharsets.UTF_8)),\n+                traceEvent\n+        );\n+    }\n+\n+    public static String buildCloudEventJsonString(TraceEvent traceEvent) {\n+        return CloudEventUtils.encode(buildCloudEvent(traceEvent));\n+    }\n+\n+    public static CloudEventImpl<TraceEvent> buildCloudEventWithoutData() {\n+        return CloudEventUtils.build(CLOUDEVENT_WITHOUT_DATA_ID, URI.create(URLEncoder.encode(MODEL_NAME, StandardCharsets.UTF_8)), null);\n+    }\n+\n+    public static String buildCloudEventWithoutDataJsonString() {\n+        return CloudEventUtils.encode(buildCloudEventWithoutData());\n+    }\n+\n+    public static TraceEvent buildCorrectTraceEvent() {", "originalCommit": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3NTM4MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457475381", "bodyText": "I asked for this change because we do not (yet?) version the event so store it in json makes hard to refactor/update, even a simple rename is a pain. With this \"factory\" it should be easier as the IDE can update it.\nWhen we will add proper versioning we will have to store it serialized so that we can track backward compatibility too", "author": "danielezonca", "createdAt": "2020-07-20T15:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4NDk2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457484966", "bodyText": "Naive question: why don't we version the event yet?", "author": "r00ta", "createdAt": "2020-07-20T15:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0ODMxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457548318", "bodyText": "Because it is strongly under development and it is supposed to change a lot in the next few weeks until we reach a full version. Until then it will be useless to version because we do not support older versions so it will be just a number to bump without any real backward compatibility. I think it is like work with fixed version instead of SNAPSHOT even during the development and bump at every commit :)", "author": "danielezonca", "createdAt": "2020-07-20T16:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyODc2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457628763", "bodyText": "Ok,  I've created this https://issues.redhat.com/browse/KOGITO-2823", "author": "r00ta", "createdAt": "2020-07-20T19:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MjQ3OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457892478", "bodyText": "FYI I've created the following ticket to check if an uncaught RuntimeException will break the event loop https://issues.redhat.com/browse/KOGITO-2828", "author": "r00ta", "createdAt": "2020-07-21T07:28:38Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);", "originalCommit": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxOTk0Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457919943", "bodyText": "Ok thank you @r00ta \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-21T08:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MjQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzY4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457893682", "bodyText": "Add space?", "author": "r00ta", "createdAt": "2020-07-21T07:30:58Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumerIT.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.vertx.core.Vertx;\n+import io.vertx.kafka.client.producer.KafkaProducer;\n+import io.vertx.kafka.client.producer.KafkaProducerRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.TrustyInfinispanServerTestResource;\n+import org.kie.kogito.trusty.service.TrustyKafkaTestResource;\n+import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CLOUDEVENT_WITH_ERRORS_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CORRECT_CLOUDEVENT_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCloudEventJsonString;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectDecision;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectTraceEvent;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildDecisionWithErrors;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildTraceEventWithErrors;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+@QuarkusTestResource(TrustyKafkaTestResource.class)\n+class TraceEventConsumerIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumerIT.class);\n+\n+    @Inject\n+    TraceEventConsumer traceEventConsumer;\n+    @Inject", "originalCommit": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMDAxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457920012", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-21T08:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5Mzc0Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457893746", "bodyText": "Add space?", "author": "r00ta", "createdAt": "2020-07-21T07:31:05Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumerIT.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.vertx.core.Vertx;\n+import io.vertx.kafka.client.producer.KafkaProducer;\n+import io.vertx.kafka.client.producer.KafkaProducerRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.TrustyInfinispanServerTestResource;\n+import org.kie.kogito.trusty.service.TrustyKafkaTestResource;\n+import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CLOUDEVENT_WITH_ERRORS_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CORRECT_CLOUDEVENT_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCloudEventJsonString;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectDecision;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectTraceEvent;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildDecisionWithErrors;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildTraceEventWithErrors;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+@QuarkusTestResource(TrustyKafkaTestResource.class)\n+class TraceEventConsumerIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumerIT.class);\n+\n+    @Inject\n+    TraceEventConsumer traceEventConsumer;\n+    @Inject\n+    TrustyService trustyService;\n+    @Inject", "originalCommit": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMDA3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457920072", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-07-21T08:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5Mzc0Ng=="}], "type": "inlineReview"}, {"oid": "57c20148502494fddf9da01a8575f6089e1c6b5b", "url": "https://github.com/kiegroup/kogito-apps/commit/57c20148502494fddf9da01a8575f6089e1c6b5b", "message": "[KOGITO-2537] Infinispan marshaller tests check for uncovered fields", "committedDate": "2020-07-21T08:12:50Z", "type": "commit"}]}