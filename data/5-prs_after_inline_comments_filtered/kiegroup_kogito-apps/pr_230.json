{"pr_number": 230, "pr_title": "Kogito 2247 - Trusty service executions endpoint resource", "pr_createdAt": "2020-05-21T14:15:24Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/230", "timeline": [{"oid": "115bf28c0f366ff82ee91abe49a6cdd3468b5a18", "url": "https://github.com/kiegroup/kogito-apps/commit/115bf28c0f366ff82ee91abe49a6cdd3468b5a18", "message": "add trusty project", "committedDate": "2020-05-20T12:31:14Z", "type": "commit"}, {"oid": "b6a19bed2d5f8d25d153d0433f436f6629eedb8e", "url": "https://github.com/kiegroup/kogito-apps/commit/b6a19bed2d5f8d25d153d0433f436f6629eedb8e", "message": "add licences and fix application.properties", "committedDate": "2020-05-20T20:48:34Z", "type": "commit"}, {"oid": "f0c1e970c0d15b787c0d2317106087ec610a480f", "url": "https://github.com/kiegroup/kogito-apps/commit/f0c1e970c0d15b787c0d2317106087ec610a480f", "message": "add READMEs", "committedDate": "2020-05-20T20:56:37Z", "type": "commit"}, {"oid": "e5c617d24d77abcce0e848f9b42f0d410021624e", "url": "https://github.com/kiegroup/kogito-apps/commit/e5c617d24d77abcce0e848f9b42f0d410021624e", "message": "refactoring repo structure - trusty services", "committedDate": "2020-05-21T09:07:20Z", "type": "commit"}, {"oid": "412717790e96ea4740f2909c87c20f730c65524d", "url": "https://github.com/kiegroup/kogito-apps/commit/412717790e96ea4740f2909c87c20f730c65524d", "message": "add executions endpoint implementation + tests", "committedDate": "2020-05-21T13:19:48Z", "type": "commit"}, {"oid": "ffe0c4dac65f4525f63bdf286aa158136088531a", "url": "https://github.com/kiegroup/kogito-apps/commit/ffe0c4dac65f4525f63bdf286aa158136088531a", "message": "update documentation", "committedDate": "2020-05-21T14:07:37Z", "type": "commit"}, {"oid": "fd4fdaf3a36011ece8f0e479fdd058e4af1cbb29", "url": "https://github.com/kiegroup/kogito-apps/commit/fd4fdaf3a36011ece8f0e479fdd058e4af1cbb29", "message": "add api versioning", "committedDate": "2020-05-22T07:49:05Z", "type": "commit"}, {"oid": "05fcee3a1588dab9e0eeffcebb3831cdb5bbb114", "url": "https://github.com/kiegroup/kogito-apps/commit/05fcee3a1588dab9e0eeffcebb3831cdb5bbb114", "message": "refactoring", "committedDate": "2020-05-22T11:33:16Z", "type": "commit"}, {"oid": "fee7ba7fb487ba1e41dc2dafa55320a31f1e7f98", "url": "https://github.com/kiegroup/kogito-apps/commit/fee7ba7fb487ba1e41dc2dafa55320a31f1e7f98", "message": "refactoring", "committedDate": "2020-05-22T11:35:16Z", "type": "commit"}, {"oid": "3c94f8076d42e6ad10d22695bdfbeebeae2cd018", "url": "https://github.com/kiegroup/kogito-apps/commit/3c94f8076d42e6ad10d22695bdfbeebeae2cd018", "message": "refactoring - remove unused imports + code style", "committedDate": "2020-05-22T11:39:46Z", "type": "commit"}, {"oid": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d", "url": "https://github.com/kiegroup/kogito-apps/commit/f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d", "message": "update poms", "committedDate": "2020-05-22T15:20:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjk0Nw==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r429316947", "bodyText": "Why do you want to split \"internal\" representation of the execution and the external one?\nConsidering that this service is designed to serve these kind of data I do not expect this to be needed. I would start simple with only one version and then it is always possible to decouple it.", "author": "danielezonca", "createdAt": "2020-05-22T15:34:06Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionHeaderResponse.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.Date;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.trusty.service.models.Execution;\n+\n+/**\n+ * An execution header.\n+ */\n+public class ExecutionHeaderResponse {", "originalCommit": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyMzE4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r429323182", "bodyText": "It's already needed actually. All the executions we will manipulate will be Decision (and in the future Process) objects.  The Decision object extends the Execution class, and the ExecutionHeaderResponse ensures that only the Execution information is exported.", "author": "r00ta", "createdAt": "2020-05-22T15:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNzEzMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r429317132", "bodyText": "Same comment as ExecutionHeaderResponse class", "author": "danielezonca", "createdAt": "2020-05-22T15:34:27Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionTypeEnumResponse.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.service.models.ExecutionTypeEnum;\n+\n+/**\n+ * The execution enum type.\n+ */\n+public enum ExecutionTypeEnumResponse {", "originalCommit": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNDExMQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r429324111", "bodyText": "For this class we can remove the copy, that's true. In general I prefer to split the internal model and the reponses, but for this enum I can live with it. I will remove", "author": "r00ta", "createdAt": "2020-05-22T15:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNzEzMg=="}], "type": "inlineReview"}, {"oid": "b104d0d5c733523f8cf89905bddb0f64c171f97f", "url": "https://github.com/kiegroup/kogito-apps/commit/b104d0d5c733523f8cf89905bddb0f64c171f97f", "message": "rebase master", "committedDate": "2020-05-22T15:42:16Z", "type": "commit"}, {"oid": "f7c92c8555d58375513ee8e1451d896ad85539e7", "url": "https://github.com/kiegroup/kogito-apps/commit/f7c92c8555d58375513ee8e1451d896ad85539e7", "message": "remove ExecutionTypeEnumResponse", "committedDate": "2020-05-25T07:07:44Z", "type": "commit"}, {"oid": "e11df045de9cf6753d7881b96a0ff8df35470448", "url": "https://github.com/kiegroup/kogito-apps/commit/e11df045de9cf6753d7881b96a0ff8df35470448", "message": "Execution executionDate transformed in executionTimestamp", "committedDate": "2020-05-25T11:02:31Z", "type": "commit"}, {"oid": "b7eecce958d44f26321ce6794e21e0adf33fc5ed", "url": "https://github.com/kiegroup/kogito-apps/commit/b7eecce958d44f26321ce6794e21e0adf33fc5ed", "message": "switch to java8 LocalDate", "committedDate": "2020-05-26T06:47:58Z", "type": "commit"}, {"oid": "22deb0d663fa435ab47093b2a986e67703733d2b", "url": "https://github.com/kiegroup/kogito-apps/commit/22deb0d663fa435ab47093b2a986e67703733d2b", "message": "refactoring", "committedDate": "2020-05-26T06:49:17Z", "type": "commit"}, {"oid": "68c9c750193651086183b69d4477cf817494d1ee", "url": "https://github.com/kiegroup/kogito-apps/commit/68c9c750193651086183b69d4477cf817494d1ee", "message": "use ZonedDateTime", "committedDate": "2020-05-26T07:29:00Z", "type": "commit"}, {"oid": "e94b14df90445b112c2ef1df138e53151863207b", "url": "https://github.com/kiegroup/kogito-apps/commit/e94b14df90445b112c2ef1df138e53151863207b", "message": "update tests", "committedDate": "2020-05-26T07:35:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NTY4Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430455682", "bodyText": "Please split these long lines to make the code more readable.", "author": "jiripetrlik", "createdAt": "2020-05-26T14:28:10Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The trusty api resource.\n+ */\n+@Path(\"v1/executions\")\n+public class ExecutionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutionsApiV1.class);\n+\n+    @Inject\n+    ITrustyService executionService;\n+\n+    /**\n+     * Gets all the headers of the executions that were evaluated within a specified time range.\n+     *\n+     * @param from   The start datetime.\n+     * @param to     The end datetime.\n+     * @param limit  The maximum (non-negative) number of items to be returned.\n+     * @param offset The non-negative pagination offset.\n+     * @param prefix The executionId prefix to be matched in the search.\n+     * @return The execution headers that satisfy the time range, pagination and prefix conditions.\n+     */\n+    @GET\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Returns the execution headers.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionsResponse.class))),", "originalCommit": "e94b14df90445b112c2ef1df138e53151863207b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODgwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430908806", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-05-27T07:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjIxOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430456219", "bodyText": "Please split.", "author": "jiripetrlik", "createdAt": "2020-05-26T14:28:51Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/models/Execution.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.models;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * An execution.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class Execution {\n+\n+    @JsonProperty(\"executionId\")\n+    private String executionId;\n+\n+    @JsonProperty(\"executionTimestamp\")\n+    private Long executionTimestamp;\n+\n+    @JsonProperty(\"hasSucceeded\")\n+    private boolean hasSucceeded;\n+\n+    @JsonProperty(\"executorName\")\n+    private String executorName;\n+\n+    @JsonProperty(\"executedModelName\")\n+    private String executedModelName;\n+\n+    @JsonProperty(\"executionType\")\n+    private ExecutionTypeEnum executionType;\n+\n+    public Execution() {\n+    }\n+\n+    public Execution(String executionId, Long executionTimestamp, boolean hasSucceeded, String executorName, String executedModelName, ExecutionTypeEnum executionType) {", "originalCommit": "e94b14df90445b112c2ef1df138e53151863207b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODg1NA==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430908854", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-05-27T07:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjgzMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430456830", "bodyText": "Please split this line.", "author": "jiripetrlik", "createdAt": "2020-05-26T14:29:40Z", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1Test.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.models.ExecutionTypeEnum;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.mockito.Mockito;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+@QuarkusTest\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class ExecutionsApiV1Test {\n+\n+    @InjectMock\n+    ITrustyService executionService;\n+\n+    @Test\n+    void GivenRequestWithoutLimitAndOffsetParameters_WhenExecutionEndpointIsCalled_ThenTheDefaultValuesAreCorrect() {\n+        Mockito.when(executionService.getExecutionHeaders(any(OffsetDateTime.class), any(OffsetDateTime.class), any(Integer.class), any(Integer.class), any(String.class))).thenReturn(new ArrayList<>());", "originalCommit": "e94b14df90445b112c2ef1df138e53151863207b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODkxMw==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430908913", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-05-27T07:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjgzMA=="}], "type": "inlineReview"}, {"oid": "08f7f546f2d9ee25fb7afb68952309b00569ad5f", "url": "https://github.com/kiegroup/kogito-apps/commit/08f7f546f2d9ee25fb7afb68952309b00569ad5f", "message": "split long lines", "committedDate": "2020-05-27T07:23:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjQwMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430916400", "bodyText": "I just noticed that there are two mandatory query parameters. In general I don't like GET methods that fails with no parameters.\nIs it possible to default to from yesterday to now?", "author": "danielezonca", "createdAt": "2020-05-27T07:38:49Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The trusty api resource.\n+ */\n+@Path(\"v1/executions\")\n+public class ExecutionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutionsApiV1.class);\n+\n+    @Inject\n+    ITrustyService executionService;\n+\n+    /**\n+     * Gets all the headers of the executions that were evaluated within a specified time range.\n+     *\n+     * @param from   The start datetime.\n+     * @param to     The end datetime.\n+     * @param limit  The maximum (non-negative) number of items to be returned.\n+     * @param offset The non-negative pagination offset.\n+     * @param prefix The executionId prefix to be matched in the search.\n+     * @return The execution headers that satisfy the time range, pagination and prefix conditions.\n+     */\n+    @GET\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Returns the execution headers.\",\n+                    responseCode = \"200\",\n+                    content = @Content(mediaType = MediaType.APPLICATION_JSON,\n+                    schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the execution headers\", description = \"Gets the execution headers.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getExecutions(\n+            @Parameter(\n+                    name = \"from\",\n+                    description = \"Start datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @QueryParam(\"from\") String from,\n+            @Parameter(\n+                    name = \"to\",\n+                    description = \"End datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @QueryParam(\"to\") String to,", "originalCommit": "08f7f546f2d9ee25fb7afb68952309b00569ad5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzOTU4MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430939580", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-05-27T08:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjQwMA=="}], "type": "inlineReview"}, {"oid": "95737df20221191d6a5a7b9d91ecb3a027727dcc", "url": "https://github.com/kiegroup/kogito-apps/commit/95737df20221191d6a5a7b9d91ecb3a027727dcc", "message": "default parameters for time range query", "committedDate": "2020-05-27T08:19:15Z", "type": "commit"}, {"oid": "0fb9312b16394cdc8c6711431bc6df2396983521", "url": "https://github.com/kiegroup/kogito-apps/commit/0fb9312b16394cdc8c6711431bc6df2396983521", "message": "remove experimental flag", "committedDate": "2020-05-27T10:19:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MTQxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r431051418", "bodyText": "Can you please create a single parteDate method that takes a String and returns a OffsetDateTime?", "author": "danielezonca", "createdAt": "2020-05-27T11:38:16Z", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The trusty api resource.\n+ */\n+@Path(\"v1/executions\")\n+public class ExecutionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutionsApiV1.class);\n+\n+    @Inject\n+    ITrustyService executionService;\n+\n+    /**\n+     * Gets all the headers of the executions that were evaluated within a specified time range.\n+     *\n+     * @param from   The start datetime.\n+     * @param to     The end datetime.\n+     * @param limit  The maximum (non-negative) number of items to be returned.\n+     * @param offset The non-negative pagination offset.\n+     * @param prefix The executionId prefix to be matched in the search.\n+     * @return The execution headers that satisfy the time range, pagination and prefix conditions.\n+     */\n+    @GET\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Returns the execution headers.\",\n+                    responseCode = \"200\",\n+                    content = @Content(mediaType = MediaType.APPLICATION_JSON,\n+                    schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the execution headers\", description = \"Gets the execution headers.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getExecutions(\n+            @Parameter(\n+                    name = \"from\",\n+                    description = \"Start datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = false,\n+                    schema = @Schema(implementation = String.class)\n+            ) @DefaultValue(\"yesterday\") @QueryParam(\"from\") String from,\n+            @Parameter(\n+                    name = \"to\",\n+                    description = \"End datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = false,\n+                    schema = @Schema(implementation = String.class)\n+            ) @DefaultValue(\"now\") @QueryParam(\"to\") String to,\n+            @Parameter(\n+                    name = \"limit\",\n+                    description = \"Maximum number of results to return.\",\n+                    required = false,\n+                    schema = @Schema(implementation = Integer.class)\n+            ) @DefaultValue(\"100\") @QueryParam(\"limit\") int limit,\n+            @Parameter(\n+                    name = \"offset\",\n+                    description = \"Offset for the pagination.\",\n+                    required = false,\n+                    schema = @Schema(implementation = Integer.class)\n+            ) @DefaultValue(\"0\") @QueryParam(\"offset\") int offset,\n+            @Parameter(\n+                    name = \"search\",\n+                    description = \"Execution ID prefix to be matched\",\n+                    required = false,\n+                    schema = @Schema(implementation = String.class)\n+            ) @DefaultValue(\"\") @QueryParam(\"search\") String prefix) {\n+\n+        if (limit < 0 || offset < 0) {\n+            return Response.status(Response.Status.BAD_REQUEST.getStatusCode(), \"Pagination parameters can not have negative values.\").build();\n+        }\n+\n+        OffsetDateTime fromDate;\n+        OffsetDateTime toDate;\n+        try {\n+            fromDate = from.equals(\"yesterday\") ? OffsetDateTime.now(ZoneOffset.UTC).minusDays(1) :  ZonedDateTime.parse(from, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toOffsetDateTime();\n+            toDate = to.equals(\"now\") ? OffsetDateTime.now(ZoneOffset.UTC) : ZonedDateTime.parse(to, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toOffsetDateTime();", "originalCommit": "0fb9312b16394cdc8c6711431bc6df2396983521", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "815a909d0623fcd6f87198a8baae34af68cf6dcf", "url": "https://github.com/kiegroup/kogito-apps/commit/815a909d0623fcd6f87198a8baae34af68cf6dcf", "message": "extract method to parse date", "committedDate": "2020-05-27T11:59:06Z", "type": "commit"}, {"oid": "0146a9f0c49fa07fd6af469667bc8e392ac41ccf", "url": "https://github.com/kiegroup/kogito-apps/commit/0146a9f0c49fa07fd6af469667bc8e392ac41ccf", "message": "fix code smells", "committedDate": "2020-05-27T12:00:22Z", "type": "commit"}]}