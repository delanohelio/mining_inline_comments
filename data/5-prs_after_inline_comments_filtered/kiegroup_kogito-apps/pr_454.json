{"pr_number": 454, "pr_title": "KOGITO-3279 - more robust LIME perturbation selection", "pr_createdAt": "2020-09-14T13:56:12Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/454", "timeline": [{"oid": "dcf7f5458e96fa7f55e0de5e1e2f31793586468d", "url": "https://github.com/kiegroup/kogito-apps/commit/dcf7f5458e96fa7f55e0de5e1e2f31793586468d", "message": "KOGITO-3279 - more robust LIME perturbation selection", "committedDate": "2020-09-14T13:52:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTA5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/454#discussion_r488815098", "bodyText": "This line seems to me the only difference of this code compared to the other changed method. Can you please refactor to a static utility method?\nI expect it should be possible to create a method that accepts List<Feature> inputFeatures and PerturbationContext perturbationContext and returns List<Feature>", "author": "danielezonca", "createdAt": "2020-09-15T16:50:10Z", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -314,12 +314,26 @@\n             List<Feature> composite = getFeatures(value);\n             List<Feature> newList = new ArrayList<>(composite);\n             if (!newList.isEmpty()) {\n-                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, composite.size())\n-                        .distinct().limit(Math.min(perturbationContext.getNoOfPerturbations(), composite.size())).toArray();\n-                for (int index : indexesToBePerturbed) {\n-                    Feature cf = composite.get(index);\n-                    Feature f = FeatureFactory.copyOf(cf, cf.getType().perturb(cf.getValue(), perturbationContext));\n-                    newList.set(index, f);\n+                // perturb at most in the range [|features|/2), noOfPerturbations]\n+                int lowerBound = (int) Math.min(perturbationContext.getNoOfPerturbations(), 0.5d * composite.size());\n+                int upperBound = (int) Math.max(perturbationContext.getNoOfPerturbations(), 0.5d * composite.size());\n+                upperBound = Math.min(upperBound, composite.size() - 1);\n+                lowerBound = Math.max(1, lowerBound); // lower bound should always greater than zero (not ok to not perturb)\n+                int perturbationSize = 0;\n+                if (lowerBound == upperBound) {\n+                    perturbationSize = lowerBound;\n+                }\n+                else if (upperBound > lowerBound) {\n+                    perturbationSize = perturbationContext.getRandom().ints(lowerBound, 1 + upperBound).findFirst().orElse(1);\n+                }\n+                if (perturbationSize > 0) {\n+                    int[] indexesToBePerturbed = perturbationContext.getRandom().ints(1, newList.size())\n+                            .distinct().limit(perturbationSize).toArray();\n+                    for (int index : indexesToBePerturbed) {\n+                        Feature cf = composite.get(index);\n+                        Feature f = FeatureFactory.copyOf(cf, cf.getType().perturb(cf.getValue(), perturbationContext));\n+                        newList.set(index, f);", "originalCommit": "dcf7f5458e96fa7f55e0de5e1e2f31793586468d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzAyOQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/454#discussion_r489177029", "bodyText": "sure, it makes sense to refactor it in a utility method.", "author": "tteofili", "createdAt": "2020-09-16T05:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTA5OA=="}], "type": "inlineReview"}, {"oid": "12af2c20b0fabc8aaa997ebc3f8b507411d6d490", "url": "https://github.com/kiegroup/kogito-apps/commit/12af2c20b0fabc8aaa997ebc3f8b507411d6d490", "message": "KOGITO-3279 - factor utility method to perturb multiple features", "committedDate": "2020-09-16T14:26:27Z", "type": "commit"}, {"oid": "b2aaa7dc05d7c2933c9fe2b61af8546be7e9def7", "url": "https://github.com/kiegroup/kogito-apps/commit/b2aaa7dc05d7c2933c9fe2b61af8546be7e9def7", "message": "KOGITO-3279 - fixed bug in Type.Boolean perturbation", "committedDate": "2020-09-17T11:16:22Z", "type": "commit"}]}