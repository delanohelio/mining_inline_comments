{"pr_number": 458, "pr_title": "KOGITO-3208: integration test for trusty service and explainability service", "pr_createdAt": "2020-09-16T13:11:52Z", "pr_url": "https://github.com/kiegroup/kogito-apps/pull/458", "timeline": [{"oid": "a73c06d20f89cab34e57f7ae5121d81205845eac", "url": "https://github.com/kiegroup/kogito-apps/commit/a73c06d20f89cab34e57f7ae5121d81205845eac", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-21T19:58:53Z", "type": "forcePushed"}, {"oid": "e9a21a2fdb6acce12a90b42863b321848d35d4c3", "url": "https://github.com/kiegroup/kogito-apps/commit/e9a21a2fdb6acce12a90b42863b321848d35d4c3", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-21T19:59:37Z", "type": "forcePushed"}, {"oid": "463ea19282a4c817c42f39037fdd6d4498ceab7c", "url": "https://github.com/kiegroup/kogito-apps/commit/463ea19282a4c817c42f39037fdd6d4498ceab7c", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-28T13:51:10Z", "type": "forcePushed"}, {"oid": "121910364adfa07873804d9e4d9c213b65c4cede", "url": "https://github.com/kiegroup/kogito-apps/commit/121910364adfa07873804d9e4d9c213b65c4cede", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-09-30T09:29:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMTExMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501711112", "bodyText": "Can we consider some waiting loop which checks regulry if the result is available? It might be faster.", "author": "jiripetrlik", "createdAt": "2020-10-08T13:16:12Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNzQzNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502537436", "bodyText": "Done following this suggestion \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501714550", "bodyText": "Can we run this loop multiple times and evaluate whether multiple invocations are handled correctly and not mixed for example etc.?", "author": "jiripetrlik", "createdAt": "2020-10-08T13:20:38Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);\n+\n+            ExecutionsResponse executionsResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions?limit=1\")\n+                    .then().statusCode(200)\n+                    .extract().as(ExecutionsResponse.class);\n+\n+            assertSame(1, executionsResponse.getHeaders().size());\n+\n+            String executionId = executionsResponse.getHeaders().stream()\n+                    .findFirst()\n+                    .map(ExecutionHeaderResponse::getExecutionId)\n+                    .orElseThrow(IllegalStateException::new);\n+\n+            assertNotNull(executionId);\n+\n+            SalienciesResponse salienciesResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions/decisions/\" + executionId + \"/explanations/saliencies\")\n+                    .then().statusCode(200)\n+                    .extract().as(SalienciesResponse.class);\n+\n+            assertEquals(\"SUCCEEDED\", salienciesResponse.getStatus());", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1NzM1MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r503757350", "bodyText": "Do you mean the whole loop? Generating execution + verifying that it's stored in trusty + verify explainability results?", "author": "kostola", "createdAt": "2020-10-13T08:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA1NzU1NQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r504057555", "bodyText": "Yes. Would it be possible? It will be much more robust integration test if there are multiple evaluation etc. We know that all is processed well and without any mixing of messages etc.", "author": "jiripetrlik", "createdAt": "2020-10-13T15:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NTcxMg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r504495712", "bodyText": "Yes I will do it now \ud83d\ude09", "author": "kostola", "createdAt": "2020-10-14T08:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NDAwNw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r505264007", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-15T07:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDY5MA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501714690", "bodyText": "Unexpected new line.", "author": "jiripetrlik", "createdAt": "2020-10-08T13:20:49Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);\n+\n+            ExecutionsResponse executionsResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions?limit=1\")\n+                    .then().statusCode(200)\n+                    .extract().as(ExecutionsResponse.class);\n+\n+            assertSame(1, executionsResponse.getHeaders().size());\n+\n+            String executionId = executionsResponse.getHeaders().stream()\n+                    .findFirst()\n+                    .map(ExecutionHeaderResponse::getExecutionId)\n+                    .orElseThrow(IllegalStateException::new);\n+\n+            assertNotNull(executionId);\n+\n+            SalienciesResponse salienciesResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions/decisions/\" + executionId + \"/explanations/saliencies\")\n+                    .then().statusCode(200)\n+                    .extract().as(SalienciesResponse.class);\n+\n+            assertEquals(\"SUCCEEDED\", salienciesResponse.getStatus());\n+        }\n+    }\n+", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjM5Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536396", "bodyText": "Removed \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501697335", "bodyText": "What about use this alternative?", "author": "danielezonca", "createdAt": "2020-10-08T12:55:44Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NzcxOA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502267718", "bodyText": "Yes it's definitely cleaner. Thanks!", "author": "kostola", "createdAt": "2020-10-09T08:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjQ5Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536493", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTg5OA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501721898", "bodyText": "Please move to constants:\n\naliases\nports", "author": "danielezonca", "createdAt": "2020-10-08T13:30:40Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNjg2Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502536863", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-09T16:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjUwNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722506", "bodyText": "Is this value fixed?", "author": "danielezonca", "createdAt": "2020-10-08T13:31:35Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzNzg2Ng==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502537866", "bodyText": "Sorry this was a leftover from some previous tests. I removed it now.", "author": "kostola", "createdAt": "2020-10-09T16:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjY3Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722672", "bodyText": "Move to config/constant?", "author": "danielezonca", "createdAt": "2020-10-08T13:31:50Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/InfinispanContainer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class InfinispanContainer extends GenericContainer<InfinispanContainer> {\n+\n+    public InfinispanContainer() {\n+        super(getImageName(\"infinispan\"));  // \"quay.io/infinispan/server:10.1.5.Final\"\n+        addEnv(\"USER\", \"admin\");\n+        addEnv(\"PASS\", \"admin\");\n+        addExposedPort(11222);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzg0Mg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502527842", "bodyText": "This is only the internal exposed port, which should be fixed to this value, it will then be mapped to a random available one by testcontainers. Do you still want to create a config for it?", "author": "kostola", "createdAt": "2020-10-09T15:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjgyNg==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722826", "bodyText": "Move to config/constant?", "author": "danielezonca", "createdAt": "2020-10-08T13:32:02Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/KogitoServiceContainer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class KogitoServiceContainer extends GenericContainer<KogitoServiceContainer> {\n+\n+    public KogitoServiceContainer(String kogitoServiceUrl) {\n+        super(getImageName(\"kogito-service\"));  // \"org.kie.kogito/integration-tests-trusty-service-quarkus:1.0.0-SNAPSHOT\"\n+        addEnv(\"KOGITO_SERVICE_URL\", kogitoServiceUrl);\n+        addExposedPort(8080);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzk3MQ==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502527971", "bodyText": "Same as here.", "author": "kostola", "createdAt": "2020-10-09T15:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMzEyMA==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501723120", "bodyText": "Move to config/constant?", "author": "danielezonca", "createdAt": "2020-10-08T13:32:28Z", "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/TrustyServiceContainer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class TrustyServiceContainer extends GenericContainer<TrustyServiceContainer> {\n+\n+    public TrustyServiceContainer(String infinispanServerList, String kafkaBootstrapServer, boolean explainabilityEnabled) {\n+        super(getImageName(\"trusty-service\"));  // \"org.kie.kogito/trusty-service:1.0.0-SNAPSHOT\"\n+        addEnv(\"INFINISPAN_SERVER_LIST\", infinispanServerList);\n+        addEnv(\"KAFKA_BOOTSTRAP_SERVERS\", kafkaBootstrapServer);\n+        addEnv(\"TRUSTY_EXPLAINABILITY_ENABLED\", String.valueOf(explainabilityEnabled));\n+        addExposedPort(8080);", "originalCommit": "15846b598bacea164df107deba477131e2adfd5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyODA1Mw==", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r502528053", "bodyText": "Same as here.", "author": "kostola", "createdAt": "2020-10-09T15:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMzEyMA=="}], "type": "inlineReview"}, {"oid": "235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "url": "https://github.com/kiegroup/kogito-apps/commit/235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests", "committedDate": "2020-10-15T16:19:24Z", "type": "forcePushed"}, {"oid": "020be89fca56ca30fb4ebacbfe1ef4c1e1235fa4", "url": "https://github.com/kiegroup/kogito-apps/commit/020be89fca56ca30fb4ebacbfe1ef4c1e1235fa4", "message": "KOGITO-3208: implement integration-tests-trusty-service", "committedDate": "2020-10-19T13:50:04Z", "type": "commit"}, {"oid": "93813a404f0331dc8865e906461758b80beccfd2", "url": "https://github.com/kiegroup/kogito-apps/commit/93813a404f0331dc8865e906461758b80beccfd2", "message": "KOGITO-3208: simplify *TrustyExplainabilityEnd2EndIT classes", "committedDate": "2020-10-19T13:50:04Z", "type": "commit"}, {"oid": "56ba57445e9f05fa1d79a031fb107d25c81eaf44", "url": "https://github.com/kiegroup/kogito-apps/commit/56ba57445e9f05fa1d79a031fb107d25c81eaf44", "message": "KOGITO-3208: update root pom.xml\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "99f9f474aa5e79c6b1fd01a15e6d38381670ba25", "url": "https://github.com/kiegroup/kogito-apps/commit/99f9f474aa5e79c6b1fd01a15e6d38381670ba25", "message": "KOGITO-3208: fixes to integration-tests-trusty-service", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "d12c0cc1ea2eef4572f2a100d7b41bbfb61fb3ca", "url": "https://github.com/kiegroup/kogito-apps/commit/d12c0cc1ea2eef4572f2a100d7b41bbfb61fb3ca", "message": "KOGITO-3208: test with multiple executions in AbstractTrustyExplainabilityEnd2EndIT", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "89944dceaf93f7e83bc67deb8c9c9b602060059f", "url": "https://github.com/kiegroup/kogito-apps/commit/89944dceaf93f7e83bc67deb8c9c9b602060059f", "message": "KOGITO-3208: fix integration-tests-trusty-service-springboot/pom.xml", "committedDate": "2020-10-19T13:50:05Z", "type": "commit"}, {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "url": "https://github.com/kiegroup/kogito-apps/commit/5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests", "committedDate": "2020-10-19T13:50:06Z", "type": "commit"}, {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "url": "https://github.com/kiegroup/kogito-apps/commit/5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests", "committedDate": "2020-10-19T13:50:06Z", "type": "forcePushed"}, {"oid": "641445b9ce9004b9f8b3bdd0ca1839af65280d9e", "url": "https://github.com/kiegroup/kogito-apps/commit/641445b9ce9004b9f8b3bdd0ca1839af65280d9e", "message": "KOGITO-3208: restore quarkus.oidc properties in trusty-service", "committedDate": "2020-10-20T15:23:26Z", "type": "commit"}, {"oid": "de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "url": "https://github.com/kiegroup/kogito-apps/commit/de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "message": "Merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-26T08:38:22Z", "type": "commit"}, {"oid": "de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "url": "https://github.com/kiegroup/kogito-apps/commit/de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "message": "Merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-26T08:38:22Z", "type": "forcePushed"}, {"oid": "a36b33347e18c942b8b9e69e8b54280862ac0c48", "url": "https://github.com/kiegroup/kogito-apps/commit/a36b33347e18c942b8b9e69e8b54280862ac0c48", "message": "Merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-27T08:36:25Z", "type": "commit"}, {"oid": "1a35c058f7d6e70ae4afb3f289919eceac4c215d", "url": "https://github.com/kiegroup/kogito-apps/commit/1a35c058f7d6e70ae4afb3f289919eceac4c215d", "message": "KOGITO-3208: merge branch 'master' into 'KOGITO-3208'", "committedDate": "2020-10-30T08:00:17Z", "type": "commit"}, {"oid": "a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d", "url": "https://github.com/kiegroup/kogito-apps/commit/a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d", "message": "KOGITO-3208: fix pom.xml", "committedDate": "2020-10-30T08:51:27Z", "type": "commit"}]}