{"pr_number": 1473, "pr_title": "Add Course Reset Dates banner on Assessment View", "pr_createdAt": "2020-10-23T12:12:19Z", "pr_url": "https://github.com/edx/edx-app-android/pull/1473", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5MjU3OA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r513592578", "bodyText": "private void showPopupWindow(boolean isSuccess) {\n        SnackbarErrorNotification snackbarErrorNotification = new SnackbarErrorNotification(authWebView);\n        if (isSuccess) {\n            snackbarErrorNotification.showError(R.string.assessment_shift_dates_success_msg,\n                    null, R.string.assessment_view_all_dates, new View.OnClickListener() {\n                        @Override\n                        public void onClick(View v) {\n                            Log.i(\"showPopupWindow\", \"Error Click\");\n                        }\n                    });\n        } else {\n            snackbarErrorNotification.showError(R.string.course_dates_reset_unsuccessful, null,\n                    0, null);\n        }\n    }\nAlso\n\nUpdated method name with the appropriate label.\nSnackbar should be hidden after 5-6 sec.", "author": "farhan-arshad-dev", "createdAt": "2020-10-28T16:36:02Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +118,108 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void isProblemXBlock() {\n+        if (unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initPopupWindow();\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), false);\n+        }\n+    }\n+\n+    private void initPopupWindow() {\n+        popupView = getLayoutInflater().inflate(R.layout.popup_due_date_shifted, null, false);\n+        (popupView.findViewById(R.id.btn_dismiss)).setOnClickListener(v -> {\n+            popupWindow.dismiss();\n+        });\n+\n+        popupWindow = new PopupWindow(popupView, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT, false);\n+        popupWindow.setOutsideTouchable(false);\n+    }\n+\n+    private void initInfoBanner(CourseBannerInfoModel courseBannerInfo) {\n+        if (courseBannerInfo == null) {\n+            infoBanner.setVisibility(View.GONE);\n+            return;\n+        }\n+        TextView textView = (TextView) infoBanner.findViewById(R.id.banner_info);\n+        Button button = (Button) infoBanner.findViewById(R.id.btn_shift_dates);\n+        String buttonText = \"\";\n+        // Currently we are only handling RESET_DATES case,\n+        // TODO UPGRADE_TO_GRADED & UPGRADE_TO_RESET will be enable once we are allowed to do payment through mobile\n+        switch (courseBannerInfo.getDatesBannerInfo().getCourseBannerType()) {\n+            case UPGRADE_TO_GRADED:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_graded));\n+                break;\n+            case UPGRADE_TO_RESET:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_reset));\n+                break;\n+            case RESET_DATES:\n+                textView.setText(getText(R.string.course_dates_banner_reset_date));\n+                buttonText = getContextOrThrow().getString(R.string.course_dates_banner_reset_date_button);\n+                break;\n+            case INFO_BANNER:\n+                textView.setText(getText(R.string.course_dates_info_banner));\n+                break;\n+            case BLANK:\n+                infoBanner.setVisibility(View.GONE);\n+                break;\n+        }\n+\n+        if (!TextUtils.isEmpty(textView.getText())) {\n+            if (!TextUtils.isEmpty(buttonText)) {\n+                button.setText(buttonText);\n+                button.setVisibility(View.VISIBLE);\n+                button.setOnClickListener(v -> {\n+                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n+                });\n+            }\n+            infoBanner.setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    private void initObserver() {\n+        courseDateViewModel.getBannerInfo().observe(this, this::initInfoBanner);\n+\n+        courseDateViewModel.getShowLoader().observe(this, flag ->\n+                preloadingListener.setLoadingState(flag ?\n+                        PreLoadingListener.State.MAIN_UNIT_LOADING :\n+                        PreLoadingListener.State.MAIN_UNIT_LOADED));\n+\n+        courseDateViewModel.getResetCourseDates().observe(this, resetCourseDates -> {\n+            if (resetCourseDates != null) {\n+                showPopupWindow(true);\n+                authWebView.loadUrl(true, unit.getBlockUrl());\n+            }\n+        });\n+\n+        courseDateViewModel.getErrorMessage().observe(this, errorMessage -> {\n+            if (errorMessage != null) {\n+                if (errorMessage.getThrowable() instanceof AuthException || errorMessage.getThrowable() instanceof HttpStatusException &&\n+                        ((HttpStatusException) errorMessage.getThrowable()).getStatusCode() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContextOrThrow(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    switch (errorMessage.getErrorCode()) {\n+                        case ErrorMessage.BANNER_INFO_CODE:\n+                            initInfoBanner(null);\n+                            break;\n+                        case ErrorMessage.COURSE_RESET_DATES_CODE:\n+                            showPopupWindow(false);\n+                            break;\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private void showPopupWindow(boolean isSuccess) {\n+        ((TextView) popupView.findViewById(R.id.txt_msg)).setText(isSuccess ?\n+                R.string.assessment_shift_dates_success_msg : R.string.course_dates_reset_unsuccessful);\n+        popupWindow.showAtLocation(authWebView, Gravity.CENTER | Gravity.BOTTOM, 0, 0);\n+    }", "originalCommit": "8e83f8bc7e6f154293f2be9b76fe75a2a8153c66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5NjQ3Mw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r513596473", "bodyText": "IMO, better to convert into kotlin class", "author": "farhan-arshad-dev", "createdAt": "2020-10-28T16:41:11Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -1,23 +1,38 @@\n package org.edx.mobile.view;\n \n import android.os.Bundle;\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n-\n+import android.text.TextUtils;", "originalCommit": "8e83f8bc7e6f154293f2be9b76fe75a2a8153c66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTk0OA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516719948", "bodyText": "not covering it for now", "author": "omerhabib26", "createdAt": "2020-11-03T14:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5NjQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNjI0Nw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r513636247", "bodyText": "I think the app should be a loader while fetching the date banner data.", "author": "farhan-arshad-dev", "createdAt": "2020-10-28T17:35:06Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +118,108 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void isProblemXBlock() {\n+        if (unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initPopupWindow();\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), false);", "originalCommit": "8e83f8bc7e6f154293f2be9b76fe75a2a8153c66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NTM5OQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r514585399", "bodyText": "implemented", "author": "omerhabib26", "createdAt": "2020-10-29T21:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNzI4Ng==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r513637286", "bodyText": "better to rename like fetchDataBannerInfo as isProblemXBlock seems boolean return type method.", "author": "farhan-arshad-dev", "createdAt": "2020-10-28T17:36:35Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -67,6 +88,7 @@ public void onPageStarted() {\n             @Override\n             public void onPageFinished() {\n                 if (authWebView.isPageLoaded()) {\n+                    isProblemXBlock();", "originalCommit": "8e83f8bc7e6f154293f2be9b76fe75a2a8153c66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NTMyNA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r514585324", "bodyText": "update", "author": "omerhabib26", "createdAt": "2020-10-29T21:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNzI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODg2Ng==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r513638866", "bodyText": "can be removed after the snack bar implant, and their usage too.", "author": "farhan-arshad-dev", "createdAt": "2020-10-28T17:38:58Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -27,9 +42,15 @@\n     @InjectView(R.id.auth_webview)\n     private AuthenticatedWebView authWebView;\n \n+    @InjectView(R.id.info_banner)\n+    private LinearLayout infoBanner;\n+\n     @InjectView(R.id.swipe_container)\n     protected SwipeRefreshLayout swipeContainer;\n \n+    private CourseDateViewModel courseDateViewModel;\n+    private View popupView;\n+    private PopupWindow popupWindow;", "originalCommit": "8e83f8bc7e6f154293f2be9b76fe75a2a8153c66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NDEyMQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r514584121", "bodyText": "Removed", "author": "omerhabib26", "createdAt": "2020-10-29T21:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzODg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUxOTkyNQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515519925", "bodyText": "IMO The duration  of the error message visibility is more suitable here.", "author": "farhan-arshad-dev", "createdAt": "2020-10-31T17:34:03Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/notifications/ErrorNotification.java", "diffHunk": "@@ -77,4 +77,19 @@ public abstract void showError(@StringRes final int errorResId,\n                                    @Nullable final Icon icon,\n                                    @StringRes final int actionTextResId,\n                                    @Nullable final View.OnClickListener actionListener);\n+\n+    /**\n+     * Show the error notification according to the provided details.\n+     *\n+     * @param errorResId      The resource ID of the error message.\n+     * @param icon            The error icon.\n+     * @param actionTextResId The resource ID of the action button text.\n+     * @param duration        The duration for which an error will be displayed", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDc2NA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516520764", "bodyText": "done", "author": "omerhabib26", "createdAt": "2020-11-03T09:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUxOTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyMDE1Mg==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515520152", "bodyText": "deserve docstring that duration is not used here cuz Dialog shouldn't auto-hide.", "author": "farhan-arshad-dev", "createdAt": "2020-10-31T17:36:25Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/notifications/DialogErrorNotification.java", "diffHunk": "@@ -57,4 +57,9 @@ public void onClick(DialogInterface dialog, int which) {\n             ).show(baseFragment.getChildFragmentManager(), null);\n         }\n     }\n+\n+    @Override\n+    public void showError(int errorResId, @Nullable Icon icon, int actionTextResId, int duration, @Nullable View.OnClickListener actionListener) {", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNjg1OQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515526859", "bodyText": "same here.", "author": "farhan-arshad-dev", "createdAt": "2020-10-31T18:46:55Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/notifications/FullScreenErrorNotification.java", "diffHunk": "@@ -68,6 +68,11 @@ public void showError(@StringRes final int errorResId,\n         showError(view.getContext().getString(errorResId), icon, actionTextResId, actionListener);\n     }\n \n+    @Override\n+    public void showError(int errorResId, @Nullable Icon icon, int actionTextResId, int duration, @Nullable View.OnClickListener actionListener) {", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzNjQ2NA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516536464", "bodyText": "added", "author": "omerhabib26", "createdAt": "2020-11-03T09:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNjg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNzQ2Nw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515527467", "bodyText": "Un-necessary change.", "author": "farhan-arshad-dev", "createdAt": "2020-10-31T18:53:28Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/notifications/SnackbarErrorNotification.java", "diffHunk": "@@ -116,4 +130,15 @@ public void hideError() {\n             snackbar = null;\n         }\n     }\n+\n+    public void setSnackbarTime(int snackbarTime) {\n+        if (snackbar != null) {\n+            snackbar.setDuration(snackbarTime);\n+        }\n+    }\n+\n+    @Nullable\n+    public Snackbar getSnackbar() {\n+        return snackbar;\n+    }", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMTU2MQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516521561", "bodyText": "removed", "author": "omerhabib26", "createdAt": "2020-11-03T09:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNzQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNzUyMA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515527520", "bodyText": "same need doc-string update.", "author": "farhan-arshad-dev", "createdAt": "2020-10-31T18:54:06Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/notifications/SnackbarErrorNotification.java", "diffHunk": "@@ -54,12 +52,28 @@ public SnackbarErrorNotification(@NonNull final View view) {\n      * @param actionListener  The callback to be invoked when the action button is clicked.\n      */\n     @Override\n+    public void showError(int errorResId, @Nullable Icon icon, int actionTextResId, @Nullable View.OnClickListener actionListener) {\n+        showError(errorResId, icon, actionTextResId, Snackbar.LENGTH_INDEFINITE, actionListener);\n+    }\n+\n+    /**\n+     * Show the error notification as a persistent Snackbar, according to the provided details.\n+     *\n+     * @param errorResId      The resource ID of the error message.\n+     * @param icon            The error icon. This is ignored here, since Snackbar doesn't really support\n+     *                        icons.\n+     * @param actionTextResId The resource ID of the action button text.\n+     * @param duration        The duration for which snackbar will be displayed", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDk5NQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516520995", "bodyText": "done", "author": "omerhabib26", "createdAt": "2020-11-03T09:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUyNzUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDYxOA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515754618", "bodyText": "We have to create the util for  initInfoBanner & showShiftDateSnackBar using at muitple classes.", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:01:28Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), true);\n+        }\n+    }\n+\n+    private void initInfoBanner(CourseBannerInfoModel courseBannerInfo) {\n+        if (courseBannerInfo == null) {\n+            infoBanner.setVisibility(View.GONE);\n+            return;\n+        }\n+        TextView textView = (TextView) infoBanner.findViewById(R.id.banner_info);\n+        Button button = (Button) infoBanner.findViewById(R.id.btn_shift_dates);\n+        String buttonText = \"\";\n+        // Currently we are only handling RESET_DATES case,\n+        // TODO UPGRADE_TO_GRADED & UPGRADE_TO_RESET will be enable once we are allowed to do payment through mobile\n+        switch (courseBannerInfo.getDatesBannerInfo().getCourseBannerType()) {\n+            case UPGRADE_TO_GRADED:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_graded));\n+                break;\n+            case UPGRADE_TO_RESET:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_reset));\n+                break;\n+            case RESET_DATES:\n+                textView.setText(getText(R.string.course_dates_banner_reset_date));\n+                buttonText = getContextOrThrow().getString(R.string.course_dates_banner_reset_date_button);\n+                break;\n+            case INFO_BANNER:\n+                textView.setText(getText(R.string.course_dates_info_banner));\n+                break;\n+            case BLANK:\n+                infoBanner.setVisibility(View.GONE);\n+                break;\n+        }\n+\n+        if (!TextUtils.isEmpty(textView.getText())) {\n+            if (!TextUtils.isEmpty(buttonText)) {\n+                button.setText(buttonText);\n+                button.setVisibility(View.VISIBLE);\n+                button.setOnClickListener(v -> {\n+                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n+                });\n+            }\n+            infoBanner.setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    private void initObserver() {\n+        courseDateViewModel.getBannerInfo().observe(this, this::initInfoBanner);\n+\n+        courseDateViewModel.getShowLoader().observe(this, flag ->\n+                preloadingListener.setLoadingState(flag ?\n+                        PreLoadingListener.State.MAIN_UNIT_LOADING :\n+                        PreLoadingListener.State.MAIN_UNIT_LOADED));\n+\n+        courseDateViewModel.getResetCourseDates().observe(this, resetCourseDates -> {\n+            if (resetCourseDates != null) {\n+                showShiftDateSnackBar(true);\n+                canFetchBannerInfo = false;\n+                authWebView.loadUrl(true, unit.getBlockUrl());\n+            }\n+        });\n+\n+        courseDateViewModel.getErrorMessage().observe(this, errorMessage -> {\n+            if (errorMessage != null) {\n+                if (errorMessage.getThrowable() instanceof AuthException || errorMessage.getThrowable() instanceof HttpStatusException &&\n+                        ((HttpStatusException) errorMessage.getThrowable()).getStatusCode() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContextOrThrow(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    switch (errorMessage.getErrorCode()) {\n+                        case ErrorMessage.BANNER_INFO_CODE:\n+                            initInfoBanner(null);", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTI0Nw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516719247", "bodyText": "I have implemented the initInfoBanner in utils class but for snackbar we have to pass too many arguments so I avoid it", "author": "omerhabib26", "createdAt": "2020-11-03T14:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTE0NQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515755145", "bodyText": "create an intent to move on course dates.", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:03:48Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), true);\n+        }\n+    }\n+\n+    private void initInfoBanner(CourseBannerInfoModel courseBannerInfo) {\n+        if (courseBannerInfo == null) {\n+            infoBanner.setVisibility(View.GONE);\n+            return;\n+        }\n+        TextView textView = (TextView) infoBanner.findViewById(R.id.banner_info);\n+        Button button = (Button) infoBanner.findViewById(R.id.btn_shift_dates);\n+        String buttonText = \"\";\n+        // Currently we are only handling RESET_DATES case,\n+        // TODO UPGRADE_TO_GRADED & UPGRADE_TO_RESET will be enable once we are allowed to do payment through mobile\n+        switch (courseBannerInfo.getDatesBannerInfo().getCourseBannerType()) {\n+            case UPGRADE_TO_GRADED:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_graded));\n+                break;\n+            case UPGRADE_TO_RESET:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_reset));\n+                break;\n+            case RESET_DATES:\n+                textView.setText(getText(R.string.course_dates_banner_reset_date));\n+                buttonText = getContextOrThrow().getString(R.string.course_dates_banner_reset_date_button);\n+                break;\n+            case INFO_BANNER:\n+                textView.setText(getText(R.string.course_dates_info_banner));\n+                break;\n+            case BLANK:\n+                infoBanner.setVisibility(View.GONE);\n+                break;\n+        }\n+\n+        if (!TextUtils.isEmpty(textView.getText())) {\n+            if (!TextUtils.isEmpty(buttonText)) {\n+                button.setText(buttonText);\n+                button.setVisibility(View.VISIBLE);\n+                button.setOnClickListener(v -> {\n+                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n+                });\n+            }\n+            infoBanner.setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    private void initObserver() {\n+        courseDateViewModel.getBannerInfo().observe(this, this::initInfoBanner);\n+\n+        courseDateViewModel.getShowLoader().observe(this, flag ->\n+                preloadingListener.setLoadingState(flag ?\n+                        PreLoadingListener.State.MAIN_UNIT_LOADING :\n+                        PreLoadingListener.State.MAIN_UNIT_LOADED));\n+\n+        courseDateViewModel.getResetCourseDates().observe(this, resetCourseDates -> {\n+            if (resetCourseDates != null) {\n+                showShiftDateSnackBar(true);\n+                canFetchBannerInfo = false;\n+                authWebView.loadUrl(true, unit.getBlockUrl());\n+            }\n+        });\n+\n+        courseDateViewModel.getErrorMessage().observe(this, errorMessage -> {\n+            if (errorMessage != null) {\n+                if (errorMessage.getThrowable() instanceof AuthException || errorMessage.getThrowable() instanceof HttpStatusException &&\n+                        ((HttpStatusException) errorMessage.getThrowable()).getStatusCode() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContextOrThrow(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    switch (errorMessage.getErrorCode()) {\n+                        case ErrorMessage.BANNER_INFO_CODE:\n+                            initInfoBanner(null);\n+                            break;\n+                        case ErrorMessage.COURSE_RESET_DATES_CODE:\n+                            showShiftDateSnackBar(false);\n+                            break;\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private void showShiftDateSnackBar(boolean isSuccess) {\n+        SnackbarErrorNotification snackbarErrorNotification = new SnackbarErrorNotification(authWebView);\n+        if (isSuccess) {\n+            snackbarErrorNotification.showError(R.string.assessment_shift_dates_success_msg,\n+                    null, R.string.assessment_view_all_dates, Snackbar.LENGTH_LONG, v -> Log.i(\"showPopupWindow\", \"Error Click\"));", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4MzMyMw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516583323", "bodyText": "done", "author": "omerhabib26", "createdAt": "2020-11-03T11:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjA4Ng==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515756086", "bodyText": "We have to show the showShiftDateSnackBar on other screens too, Story description\n- Success toast message should also appear when learner shifts date from Course home or Dates page", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:07:26Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), true);\n+        }\n+    }\n+\n+    private void initInfoBanner(CourseBannerInfoModel courseBannerInfo) {\n+        if (courseBannerInfo == null) {\n+            infoBanner.setVisibility(View.GONE);\n+            return;\n+        }\n+        TextView textView = (TextView) infoBanner.findViewById(R.id.banner_info);\n+        Button button = (Button) infoBanner.findViewById(R.id.btn_shift_dates);\n+        String buttonText = \"\";\n+        // Currently we are only handling RESET_DATES case,\n+        // TODO UPGRADE_TO_GRADED & UPGRADE_TO_RESET will be enable once we are allowed to do payment through mobile\n+        switch (courseBannerInfo.getDatesBannerInfo().getCourseBannerType()) {\n+            case UPGRADE_TO_GRADED:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_graded));\n+                break;\n+            case UPGRADE_TO_RESET:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_reset));\n+                break;\n+            case RESET_DATES:\n+                textView.setText(getText(R.string.course_dates_banner_reset_date));\n+                buttonText = getContextOrThrow().getString(R.string.course_dates_banner_reset_date_button);\n+                break;\n+            case INFO_BANNER:\n+                textView.setText(getText(R.string.course_dates_info_banner));\n+                break;\n+            case BLANK:\n+                infoBanner.setVisibility(View.GONE);\n+                break;\n+        }\n+\n+        if (!TextUtils.isEmpty(textView.getText())) {\n+            if (!TextUtils.isEmpty(buttonText)) {\n+                button.setText(buttonText);\n+                button.setVisibility(View.VISIBLE);\n+                button.setOnClickListener(v -> {\n+                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n+                });\n+            }\n+            infoBanner.setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    private void initObserver() {\n+        courseDateViewModel.getBannerInfo().observe(this, this::initInfoBanner);\n+\n+        courseDateViewModel.getShowLoader().observe(this, flag ->\n+                preloadingListener.setLoadingState(flag ?\n+                        PreLoadingListener.State.MAIN_UNIT_LOADING :\n+                        PreLoadingListener.State.MAIN_UNIT_LOADED));\n+\n+        courseDateViewModel.getResetCourseDates().observe(this, resetCourseDates -> {\n+            if (resetCourseDates != null) {\n+                showShiftDateSnackBar(true);\n+                canFetchBannerInfo = false;\n+                authWebView.loadUrl(true, unit.getBlockUrl());\n+            }\n+        });\n+\n+        courseDateViewModel.getErrorMessage().observe(this, errorMessage -> {\n+            if (errorMessage != null) {\n+                if (errorMessage.getThrowable() instanceof AuthException || errorMessage.getThrowable() instanceof HttpStatusException &&\n+                        ((HttpStatusException) errorMessage.getThrowable()).getStatusCode() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContextOrThrow(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    switch (errorMessage.getErrorCode()) {\n+                        case ErrorMessage.BANNER_INFO_CODE:\n+                            initInfoBanner(null);\n+                            break;\n+                        case ErrorMessage.COURSE_RESET_DATES_CODE:\n+                            showShiftDateSnackBar(false);\n+                            break;\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private void showShiftDateSnackBar(boolean isSuccess) {", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxODU0Mw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516718543", "bodyText": "done", "author": "omerhabib26", "createdAt": "2020-11-03T14:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1Njc0MQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515756741", "bodyText": "no need to add canFetchBannerInfo as we have to refresh the course date banner after shifting the date.", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:10:08Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), true);\n+        }\n+    }\n+\n+    private void initInfoBanner(CourseBannerInfoModel courseBannerInfo) {\n+        if (courseBannerInfo == null) {\n+            infoBanner.setVisibility(View.GONE);\n+            return;\n+        }\n+        TextView textView = (TextView) infoBanner.findViewById(R.id.banner_info);\n+        Button button = (Button) infoBanner.findViewById(R.id.btn_shift_dates);\n+        String buttonText = \"\";\n+        // Currently we are only handling RESET_DATES case,\n+        // TODO UPGRADE_TO_GRADED & UPGRADE_TO_RESET will be enable once we are allowed to do payment through mobile\n+        switch (courseBannerInfo.getDatesBannerInfo().getCourseBannerType()) {\n+            case UPGRADE_TO_GRADED:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_graded));\n+                break;\n+            case UPGRADE_TO_RESET:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_reset));\n+                break;\n+            case RESET_DATES:\n+                textView.setText(getText(R.string.course_dates_banner_reset_date));\n+                buttonText = getContextOrThrow().getString(R.string.course_dates_banner_reset_date_button);\n+                break;\n+            case INFO_BANNER:\n+                textView.setText(getText(R.string.course_dates_info_banner));\n+                break;\n+            case BLANK:\n+                infoBanner.setVisibility(View.GONE);\n+                break;\n+        }\n+\n+        if (!TextUtils.isEmpty(textView.getText())) {\n+            if (!TextUtils.isEmpty(buttonText)) {\n+                button.setText(buttonText);\n+                button.setVisibility(View.VISIBLE);\n+                button.setOnClickListener(v -> {\n+                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n+                });\n+            }\n+            infoBanner.setVisibility(View.VISIBLE);\n+        }\n+    }\n+\n+    private void initObserver() {\n+        courseDateViewModel.getBannerInfo().observe(this, this::initInfoBanner);\n+\n+        courseDateViewModel.getShowLoader().observe(this, flag ->\n+                preloadingListener.setLoadingState(flag ?\n+                        PreLoadingListener.State.MAIN_UNIT_LOADING :\n+                        PreLoadingListener.State.MAIN_UNIT_LOADED));\n+\n+        courseDateViewModel.getResetCourseDates().observe(this, resetCourseDates -> {\n+            if (resetCourseDates != null) {\n+                showShiftDateSnackBar(true);\n+                canFetchBannerInfo = false;", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTM5Nw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516719397", "bodyText": "removed", "author": "omerhabib26", "createdAt": "2020-11-03T14:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1Njc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDQ5Ng==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515760496", "bodyText": "initObserver should be move-in onViewCreated and call only once. that also remove the recursive behavior of webview loading.", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:23:45Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initObserver();", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTYwNw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516719607", "bodyText": "Done", "author": "omerhabib26", "createdAt": "2020-11-03T14:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MDQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MTc1OQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515761759", "bodyText": "should be moved in initObserver to avoid the init crash", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:28:30Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTY4NQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516719685", "bodyText": "done", "author": "omerhabib26", "createdAt": "2020-11-03T14:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2MTc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2NTMzMA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515765330", "bodyText": "also need to check the buttonText is empty, cuz button should be hide after shifting the dates.\n        if (!TextUtils.isEmpty(textView.getText())) {\n            if (!TextUtils.isEmpty(buttonText)) {\n                button.setText(buttonText);\n                button.setOnClickListener(v -> {\n                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n                });\n            }\n            infoBanner.setVisibility(View.VISIBLE);\n        }\n        button.setVisibility(TextUtils.isEmpty(buttonText) ? View.GONE : View.VISIBLE);", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:40:35Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -96,6 +119,103 @@ public void onPageLoadProgressChanged(WebView webView, int progress) {\n         }\n     }\n \n+    private void fetchDateBannerInfo() {\n+        if (canFetchBannerInfo && unit.getType() == BlockType.PROBLEM) {\n+            courseDateViewModel = new ViewModelProvider(this, new ViewModelFactory()).get(CourseDateViewModel.class);\n+            initObserver();\n+            courseDateViewModel.fetchCourseDatesBannerInfo(unit.getCourseId(), true);\n+        }\n+    }\n+\n+    private void initInfoBanner(CourseBannerInfoModel courseBannerInfo) {\n+        if (courseBannerInfo == null) {\n+            infoBanner.setVisibility(View.GONE);\n+            return;\n+        }\n+        TextView textView = (TextView) infoBanner.findViewById(R.id.banner_info);\n+        Button button = (Button) infoBanner.findViewById(R.id.btn_shift_dates);\n+        String buttonText = \"\";\n+        // Currently we are only handling RESET_DATES case,\n+        // TODO UPGRADE_TO_GRADED & UPGRADE_TO_RESET will be enable once we are allowed to do payment through mobile\n+        switch (courseBannerInfo.getDatesBannerInfo().getCourseBannerType()) {\n+            case UPGRADE_TO_GRADED:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_graded));\n+                break;\n+            case UPGRADE_TO_RESET:\n+                textView.setText(getText(R.string.course_dates_banner_upgrade_to_reset));\n+                break;\n+            case RESET_DATES:\n+                textView.setText(getText(R.string.course_dates_banner_reset_date));\n+                buttonText = getContextOrThrow().getString(R.string.course_dates_banner_reset_date_button);\n+                break;\n+            case INFO_BANNER:\n+                textView.setText(getText(R.string.course_dates_info_banner));\n+                break;\n+            case BLANK:\n+                infoBanner.setVisibility(View.GONE);\n+                break;\n+        }\n+\n+        if (!TextUtils.isEmpty(textView.getText())) {\n+            if (!TextUtils.isEmpty(buttonText)) {\n+                button.setText(buttonText);\n+                button.setVisibility(View.VISIBLE);\n+                button.setOnClickListener(v -> {\n+                    courseDateViewModel.resetCourseDatesBanner(unit.getCourseId());\n+                });\n+            }\n+            infoBanner.setVisibility(View.VISIBLE);\n+        }", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwNzQ3OQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516507479", "bodyText": "by default button is hidden, and on the response of the date shifted API, banner info API also called so don't need to handle this case", "author": "omerhabib26", "createdAt": "2020-11-03T08:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2NTMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2NjU0NQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r515766545", "bodyText": "no need to add an extra member, can be removed.", "author": "farhan-arshad-dev", "createdAt": "2020-11-02T06:44:49Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseUnitWebViewFragment.java", "diffHunk": "@@ -27,11 +44,16 @@\n     @InjectView(R.id.auth_webview)\n     private AuthenticatedWebView authWebView;\n \n+    @InjectView(R.id.info_banner)\n+    private LinearLayout infoBanner;\n+\n     @InjectView(R.id.swipe_container)\n     protected SwipeRefreshLayout swipeContainer;\n \n+    private CourseDateViewModel courseDateViewModel;\n     private PreLoadingListener preloadingListener;\n     private boolean isPageLoading = false;\n+    private boolean canFetchBannerInfo = true;", "originalCommit": "377acf4c08d816b7bcdb5b6014aabcbcbda4e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTc2Nw==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r516719767", "bodyText": "removed", "author": "omerhabib26", "createdAt": "2020-11-03T14:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc2NjU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MTE4NA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r517141184", "bodyText": "we can revert this change.", "author": "farhan-arshad-dev", "createdAt": "2020-11-04T07:28:38Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/notifications/SnackbarErrorNotification.java", "diffHunk": "@@ -96,7 +112,7 @@ public void onDismissed(Snackbar transientBottomBar, int event) {\n      */\n     public void showOfflineError(final RefreshListener listener) {\n         showError(R.string.offline_text, FontAwesomeIcons.fa_wifi,\n-                R.string.lbl_reload, new View.OnClickListener() {\n+                R.string.lbl_reload, Snackbar.LENGTH_INDEFINITE, new View.OnClickListener() {", "originalCommit": "81dedeb2f8056cf9d1336ce6235cb5fadff6043b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3MDY0NQ==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r517270645", "bodyText": "done", "author": "omerhabib26", "createdAt": "2020-11-04T11:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MTE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MjUyNg==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r517172526", "bodyText": "we can remove R.string.course_dates_reset_title is not using any where else.", "author": "farhan-arshad-dev", "createdAt": "2020-11-04T08:33:19Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseOutlineFragment.java", "diffHunk": "@@ -237,8 +236,7 @@ private void initObserver() {\n                             initDatesBanner(null);\n                             break;\n                         case ErrorMessage.COURSE_RESET_DATES_CODE:\n-                            AlertDialogFragment.newInstance(getString(R.string.course_dates_reset_title),", "originalCommit": "81dedeb2f8056cf9d1336ce6235cb5fadff6043b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NTc5Ng==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r517275796", "bodyText": "removed", "author": "omerhabib26", "createdAt": "2020-11-04T11:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3MjUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NDQxOA==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r517174418", "bodyText": "un-necessary change.", "author": "farhan-arshad-dev", "createdAt": "2020-11-04T08:36:49Z", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseOutlineFragment.java", "diffHunk": "@@ -598,8 +583,7 @@ public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n                     https://stackoverflow.com/a/30552666\n                     https://github.com/material-components/material-components-android/commit/2cb77c9331cc3c6a5034aace0238b96508acf47d\n                      */\n-                    @SuppressLint(\"WrongConstant\")\n-                    final Snackbar snackbar = Snackbar.make(listView,\n+                    @SuppressLint(\"WrongConstant\") final Snackbar snackbar = Snackbar.make(listView,", "originalCommit": "81dedeb2f8056cf9d1336ce6235cb5fadff6043b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwOTIzNg==", "url": "https://github.com/edx/edx-app-android/pull/1473#discussion_r517309236", "bodyText": "removed", "author": "omerhabib26", "createdAt": "2020-11-04T12:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3NDQxOA=="}], "type": "inlineReview"}, {"oid": "0170ec8ad733c1dd482b4361187e6a9abad76903", "url": "https://github.com/edx/edx-app-android/commit/0170ec8ad733c1dd482b4361187e6a9abad76903", "message": "Add Course Reset Dates banner on Assessment View\n- LEARNER-7945\n- Implement CourseDatesViewModel into CourseUnitWebViewFragment.java\n- Added a custom snackbar for response msg\n- Also update the previously implemented dialog with snackbar", "committedDate": "2020-11-04T14:06:27Z", "type": "commit"}, {"oid": "0170ec8ad733c1dd482b4361187e6a9abad76903", "url": "https://github.com/edx/edx-app-android/commit/0170ec8ad733c1dd482b4361187e6a9abad76903", "message": "Add Course Reset Dates banner on Assessment View\n- LEARNER-7945\n- Implement CourseDatesViewModel into CourseUnitWebViewFragment.java\n- Added a custom snackbar for response msg\n- Also update the previously implemented dialog with snackbar", "committedDate": "2020-11-04T14:06:27Z", "type": "forcePushed"}]}