{"pr_number": 954, "pr_title": "feature(aws-datastore): support for hybrid platforms", "pr_createdAt": "2020-11-05T20:19:34Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/954", "timeline": [{"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "url": "https://github.com/aws-amplify/amplify-android/commit/f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>", "committedDate": "2020-11-05T23:23:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Mjg2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520052862", "bodyText": "Should we update equals, hashCode, toString to check this new field?", "author": "richardmcclellan", "createdAt": "2020-11-09T19:08:17Z", "path": "core/src/main/java/com/amplifyframework/core/model/ModelSchema.java", "diffHunk": "@@ -68,19 +68,24 @@\n     // Specifies the indexes of a Model.\n     private final Map<String, ModelIndex> indexes;\n \n+    // Class of the model this schema will represent\n+    private final Class<? extends Model> modelClass;", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMDgxMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521420810", "bodyText": "Good point! Will do.", "author": "jamesonwilliams", "createdAt": "2020-11-11T15:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Mjg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMTYwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521901600", "bodyText": "Done", "author": "jamesonwilliams", "createdAt": "2020-11-12T07:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Mjg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NTAxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520055019", "bodyText": "Maybe update this constructor object to take a single Builder object, so we don't have such a long list of params?", "author": "richardmcclellan", "createdAt": "2020-11-09T19:10:24Z", "path": "core/src/main/java/com/amplifyframework/core/model/ModelSchema.java", "diffHunk": "@@ -68,19 +68,24 @@\n     // Specifies the indexes of a Model.\n     private final Map<String, ModelIndex> indexes;\n \n+    // Class of the model this schema will represent\n+    private final Class<? extends Model> modelClass;\n+\n     private ModelSchema(", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMTU2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521901566", "bodyText": "Done!", "author": "jamesonwilliams", "createdAt": "2020-11-12T07:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzM5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520057396", "bodyText": "Can we simplify this class by removing modelClass entirely, since we will always have a modelSchema now?  Then, whenever we actually need the modelClass, we can just use modelSchema.getModelClass()", "author": "richardmcclellan", "createdAt": "2020-11-09T19:13:10Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java", "diffHunk": "@@ -288,19 +297,23 @@ public Builder variable(@NonNull String key, String type, Object value) {\n             Objects.requireNonNull(this.operation);\n             Objects.requireNonNull(this.responseType);\n \n-            if (modelClass != null) {\n-                // Derive modelSchema and selectionSet from modelClass.\n+            if (modelClass == null && modelSchema == null) {", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5ODMxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521898319", "bodyText": "It would seem so. But when I tried to carry this out, a bunch of tests broke in non-obvious ways. I'd like to flag this one and come back to it. I'll leave a TODO in the code.", "author": "jamesonwilliams", "createdAt": "2020-11-12T07:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzMDg0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522230847", "bodyText": "fair enough!  we can come back to it.", "author": "richardmcclellan", "createdAt": "2020-11-12T16:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Nzg2Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520057863", "bodyText": "Same thing here.  Can we remove the modelClass field, and just use modelSchema.getModelClass() whenever the class is actually needed?", "author": "richardmcclellan", "createdAt": "2020-11-09T19:14:05Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/SelectionSet.java", "diffHunk": "@@ -167,6 +172,7 @@ public int hashCode() {\n         private Class<? extends Model> modelClass;\n         private Operation operation;\n         private GraphQLRequestOptions requestOptions;\n+        private ModelSchema modelSchema;", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNTk5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521125993", "bodyText": "As below, I haven't figured out how to get rid of this without breaking embedded/custom/non-model types, yet.", "author": "jamesonwilliams", "createdAt": "2020-11-11T05:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Nzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzMjE4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522232181", "bodyText": "As discussed, we will come back to this later.", "author": "richardmcclellan", "createdAt": "2020-11-12T16:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Nzg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NTM4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520065382", "bodyText": "Why do you only want to serialize the id, rather than recursively serializing the entire child model?   I think that the native Amplify Android behavior (generated Java models), serializes the complete model graph, right?", "author": "richardmcclellan", "createdAt": "2020-11-09T19:26:55Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();\n+                serializedData.add(entry.getKey(), new JsonPrimitive(hpm.getId()));", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDg3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521100870", "bodyText": "I'm not clear on the current behavior, actually. However, this is the contract I've setup with the Flutter team, for now. I think we can come back and add more data in a non-breaking way, in the future. I believe the current plan is to use a \"shell model\" like we can create with the justId(...) factory methods, on our models.", "author": "jamesonwilliams", "createdAt": "2020-11-11T04:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NTM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5NDkwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521394900", "bodyText": "Got it - I think this is fine for v1, and we can revisit later if needed.", "author": "richardmcclellan", "createdAt": "2020-11-11T14:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NTM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2OTY0MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520069640", "bodyText": "Can we use this method for both Flutter and native Android, and get rid of the getModelFields(Class modelClass, int depth) method?  I think that would simplify this a bit.", "author": "richardmcclellan", "createdAt": "2020-11-09T19:34:25Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/SelectionSet.java", "diffHunk": "@@ -320,5 +337,40 @@ private static boolean isCustomType(@NonNull Field field) {\n             }\n             return typeClass;\n         }\n+\n+        private Set<SelectionSet> getModelFields(ModelSchema modelSchema, int depth) {", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNTEyOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521125128", "bodyText": "I spent a long time trying. The challenge is in supporting custom/embedded/non-model types. The code can clean up dramatically by just using the ModelSchema version, but I can't figure out howto not break embedded types.\nI'll leave a TODO for now, and accept temporary defeat.", "author": "jamesonwilliams", "createdAt": "2020-11-11T05:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2OTY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNDE5NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521424194", "bodyText": "I could totally be missing something, but I'm having trouble understanding what the challenge is.  Since modelClass is a property of a ModelSchema (added in this PR),  can't you just call modelSchema.getModelClass() in each spot where you need a modelClass?\nOr to go from a modelClass to a modelSchema: ModelSchema.from(modelClass)\nI don't think the code related to non-model types needs to change at all - the getNestedCustomTypeFields will still take a Class<?> parameter.", "author": "richardmcclellan", "createdAt": "2020-11-11T15:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2OTY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzMTI4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522231287", "bodyText": "As discussed, we can come back to this later.", "author": "richardmcclellan", "createdAt": "2020-11-12T16:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2OTY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzMjUwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522232502", "bodyText": "As discussed, we will come back to this later.", "author": "richardmcclellan", "createdAt": "2020-11-12T16:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2OTY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTM3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520075373", "bodyText": "Hmm, why are we serializing modelSchema?   Isn't this used when we serialize a model and send to AppSync for doing an update mutation? I don't think we want to send that to AppSync, right?   I guess we might need to serialize it into the local DB though.   Do we need different Gson instances for SQLite vs AppSync now?\nAnother thing I notice is there is no ModelSchemaAdapter in this PR, which means ModelSchema, ModelField, and AuthRule etc, will all be serialized via reflection of their field names.  That means we won't be able to make breaking changes to them in the future, otherwise we could break SQLite deserialization.   Maybe that's fine, but we should at least take that into consideration.", "author": "richardmcclellan", "createdAt": "2020-11-09T19:44:30Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDU1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521100553", "bodyText": "The ModelSchema is only ever used locally on the client, as metadata. It never gets saved to the SQL tables, and it never gets passed to AppSync.\nAt various points in the code, I need to rectify the shape of the serializedData -- iterating over its fields, to understand the type of each one. There are two ways to achieve this:\n\nJust store the modelName, and then retrieve the ModelSchema for that modelName, from the ModelSchemaRegistry;\nStore the entire ModelSchema next to the SerializedModel. This is a little wasteful, but it's pretty convenient, and it only ever happens in memory. Whenever I need to understand the schema for the data, it's right next to it.\n\nI don't think, strictly speaking, there is a need to serialize the ModelSchema. But, it happens to be convenient (at least) in test code. Since I had a deserialize, it felt ~right to implement the serialize method at the same time, in the same place, to show the symmetry of the operation.", "author": "jamesonwilliams", "createdAt": "2020-11-11T04:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMjExOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521432119", "bodyText": "Thanks for clarifying!   Since it isn't getting saved in SQLite, this is not really a concern any more!", "author": "richardmcclellan", "createdAt": "2020-11-11T15:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTc4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520075785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Patch up nested models as HybridPlatformModel themselves.\n          \n          \n            \n                    // Patch up nested models as SerializedModel themselves.", "author": "richardmcclellan", "createdAt": "2020-11-09T19:45:11Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();\n+                serializedData.add(entry.getKey(), new JsonPrimitive(hpm.getId()));\n+            } else {\n+                serializedData.add(entry.getKey(), context.serialize(entry.getValue()));\n+            }\n+        }\n+        result.add(\"serializedData\", serializedData);\n+        return result;\n+    }\n+\n+    @Override\n+    public SerializedModel deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        JsonObject object = json.getAsJsonObject();\n+        ModelSchema modelSchema = context.deserialize(object.get(\"modelSchema\"), ModelSchema.class);\n+\n+        JsonObject serializedDataObject = object.get(\"serializedData\").getAsJsonObject();\n+        Map<String, Object> serializedData = new HashMap<>(GsonObjectConverter.toMap(serializedDataObject));\n+\n+        // Patch up nested models as HybridPlatformModel themselves.", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTQ0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521099448", "bodyText": "Will update -- thanks for catching", "author": "jamesonwilliams", "createdAt": "2020-11-11T04:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3OTQ5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520079499", "bodyText": "Looks like this only goes one level deep.  Should we instead deserialize the whole tree?   I suppose we might need to merge #892, but then, we could right?", "author": "richardmcclellan", "createdAt": "2020-11-09T19:51:42Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();\n+                serializedData.add(entry.getKey(), new JsonPrimitive(hpm.getId()));\n+            } else {\n+                serializedData.add(entry.getKey(), context.serialize(entry.getValue()));\n+            }\n+        }\n+        result.add(\"serializedData\", serializedData);\n+        return result;\n+    }\n+\n+    @Override\n+    public SerializedModel deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        JsonObject object = json.getAsJsonObject();\n+        ModelSchema modelSchema = context.deserialize(object.get(\"modelSchema\"), ModelSchema.class);\n+\n+        JsonObject serializedDataObject = object.get(\"serializedData\").getAsJsonObject();\n+        Map<String, Object> serializedData = new HashMap<>(GsonObjectConverter.toMap(serializedDataObject));\n+\n+        // Patch up nested models as HybridPlatformModel themselves.\n+        for (Map.Entry<String, JsonElement> item : serializedDataObject.entrySet()) {\n+            ModelField field = modelSchema.getFields().get(item.getKey());\n+            if (field != null && field.isModel()) {\n+                serializedData.put(field.getName(), SerializedModel.builder()\n+                    .serializedData(Collections.singletonMap(\"id\", item.getValue().getAsString()))\n+                    .modelSchema(null)\n+                    .build());", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5Nzc1MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521097750", "bodyText": "I think that would be an improvement, yes. It would open the door for an infinite loop, though, wouldn't it? Regardless, I think I'd prefer to tackle it in future work. If it's amenable to you, I'll leave a TODO note here in the code, to capture the future work.", "author": "jamesonwilliams", "createdAt": "2020-11-11T03:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3OTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQwNzk3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521407973", "bodyText": "It would open the door for an infinite loop, though, wouldn't it?\n\nHmm, we'd need to make sure that is avoided.  Given a Blog, and a BlogOwner, they both reference each other, but the Blog is the \"owner\" in the relationship.  We can check this via ModelAssociation::isOwner\nGetting that all working is non-trivial, so tackling at a later date sounds good to me.", "author": "richardmcclellan", "createdAt": "2020-11-11T14:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3OTQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NTc3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520095770", "bodyText": "This can be removed now right?  Since an exception is thrown above if modelSchema is null, I think this code block is unreachable now?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (modelSchema == null) {\n          \n          \n            \n                            // Derive modelSchema from modelClass if not available\n          \n          \n            \n                            modelSchema = ModelSchema.fromModelClass(this.modelClass);\n          \n          \n            \n                        }", "author": "richardmcclellan", "createdAt": "2020-11-09T20:20:40Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java", "diffHunk": "@@ -288,19 +297,23 @@ public Builder variable(@NonNull String key, String type, Object value) {\n             Objects.requireNonNull(this.operation);\n             Objects.requireNonNull(this.responseType);\n \n-            if (modelClass != null) {\n-                // Derive modelSchema and selectionSet from modelClass.\n+            if (modelClass == null && modelSchema == null) {\n+                throw new AmplifyException(\"Both modelSchema and modelClass cannot be null\", \"\");\n+            }\n+\n+            if (modelSchema == null) {\n+                // Derive modelSchema from modelClass if not available\n                 modelSchema = ModelSchema.fromModelClass(this.modelClass);\n+            }", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODA0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521098042", "bodyText": "It doesn't actually work this way -- modelSchema is still potentially null here. The control flow is a little screwy. I'll simplify it, so the behavior is more clear:\nif (modelSchema == null) {\n    if (modelClass == null) {\n        throw new AmplifyException(\n            \"Both modelSchema and modelClass cannot be null\",\n            AmplifyException.TODO_RECOVERY_SUGGESTION\n        );\n    }\n    // Derive modelSchema from modelClass if not available\n    modelSchema = ModelSchema.fromModelClass(this.modelClass);\n}", "author": "jamesonwilliams", "createdAt": "2020-11-11T04:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NTc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5Nzk3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520097979", "bodyText": "Maybe rename hpm to serializedModel?", "author": "richardmcclellan", "createdAt": "2020-11-09T20:24:48Z", "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();", "originalCommit": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NzM3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r521097373", "bodyText": "Yes! This is a leftover. Will update, thanks.", "author": "jamesonwilliams", "createdAt": "2020-11-11T03:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5Nzk3OQ=="}], "type": "inlineReview"}, {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "url": "https://github.com/aws-amplify/amplify-android/commit/e6250d93fbfda752c0aea51afd7c44d9768b35eb", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>", "committedDate": "2020-11-12T08:56:44Z", "type": "commit"}, {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "url": "https://github.com/aws-amplify/amplify-android/commit/e6250d93fbfda752c0aea51afd7c44d9768b35eb", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>", "committedDate": "2020-11-12T08:56:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzNzY4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522237681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * NOTE: Private method and should not be part of {@link DataStoreCategory}\n          \n          \n            \n                 * NOTE: Private method used by hybrid platforms and should not be part of {@link DataStoreCategory}", "author": "richardmcclellan", "createdAt": "2020-11-12T16:24:58Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -409,6 +405,22 @@ public String getVersion() {\n         start(() -> sqliteStorageAdapter.query(itemClass, onQueryResults, onQueryFailure), onQueryFailure);\n     }\n \n+    /**\n+     * Query the DataStore to find all items of the requested model (by name).\n+     * NOTE: Private method and should not be part of {@link DataStoreCategory}", "originalCommit": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5MTc3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522291773", "bodyText": "Applied!", "author": "jamesonwilliams", "createdAt": "2020-11-12T17:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzNzY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDU3Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522240573", "bodyText": "May be something we can do before we run integration tests. I'll make a note of it", "author": "rjuliano", "createdAt": "2020-11-12T16:28:38Z", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/HybridCloudSyncInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import android.content.Context;\n+import androidx.annotation.RawRes;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiCategory;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.category.CategoryConfiguration;\n+import com.amplifyframework.core.category.CategoryType;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.datastore.appsync.AppSyncClient;\n+import com.amplifyframework.datastore.appsync.SerializedModel;\n+import com.amplifyframework.datastore.appsync.SynchronousAppSync;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.logging.AndroidLoggingPlugin;\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.Blog;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+import com.amplifyframework.testutils.HubAccumulator;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.sync.SynchronousApi;\n+import com.amplifyframework.testutils.sync.SynchronousDataStore;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static com.amplifyframework.datastore.DataStoreHubEventFilters.publicationOf;\n+import static com.amplifyframework.datastore.DataStoreHubEventFilters.receiptOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Validates the ability of the {@link AWSDataStorePlugin} to sync data up/down\n+ * from AppSync, when being used by means of \"Hybrid-friendly\" API invocations:\n+ *\n+ *   1. Saving a {@link SerializedModel} via\n+ *      {@link AWSDataStorePlugin#save(Model, Consumer, Consumer)};\n+ *   2. Deleting a {@link SerializedModel} via\n+ *      {@link AWSDataStorePlugin#delete(Model, Consumer, Consumer)};\n+ *   3. Querying for {@link SerializedModel} by means of\n+ *      {@link AWSDataStorePlugin#query(String, QueryOptions, Consumer, Consumer)}.\n+ *\n+ * This test expects a backend API that has support for the {@link Blog} family of models,\n+ * which were defined by the schema in:\n+ * testmodels/src/main/java/com/amplifyframework/testmodels/commentsblog/schema.graphql.\n+ */\n+@Ignore(\n+    \"Over time, this test will create a large DynamoDB table. Even if we delete the content \" +\n+    \"through the AppSyncClient utility, the database will have lots of tombstone'd rows. \" +\n+    \"These entries will be synced, the next time this test runs, and the DataStore initializes. \" +\n+    \"After several runs, that sync will grow large and timeout the test, before the test can \" +\n+    \"run any business logic. A manual workaround exists, by running this cleanup script: \" +\n+    \"https://gist.github.com/jamesonwilliams/c76169676cb99c51d997ef0817eb9278#quikscript-to-clear-appsync-tables\"", "originalCommit": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5MDc4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522290787", "bodyText": "Yes, I think so! I'll work with you on this. Selective Sync may also make this problem go away, if we use a TTL field of some kind.", "author": "jamesonwilliams", "createdAt": "2020-11-12T17:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNjUxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522306517", "bodyText": "Selective Sync may also make this problem go away, if we use a TTL field of some kind.\n\nOoh!  That's a neat idea!", "author": "richardmcclellan", "createdAt": "2020-11-12T18:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3MzYwNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522273606", "bodyText": "Can you delete the ModelClassComparator now?", "author": "richardmcclellan", "createdAt": "2020-11-12T17:13:33Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -99,18 +101,16 @@ public static Builder builder() {\n      * @return An Rx {@link Completable} which can be used to perform the operation.\n      */\n     Completable hydrate() {\n-        ModelClassComparator modelClassComparator =", "originalCommit": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5Mjc3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522292770", "bodyText": "Yes! Done.", "author": "jamesonwilliams", "createdAt": "2020-11-12T17:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3MzYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3OTEwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522279100", "bodyText": "Instead of catching this, can you just have the test throw an AmplifyException, to ensure the test fails for this scenario?", "author": "richardmcclellan", "createdAt": "2020-11-12T17:21:02Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncClientTest.java", "diffHunk": "@@ -88,10 +90,12 @@ public void validateBaseSyncQueryGen() throws JSONException, DataStoreException\n             ) -> {\n                 try {\n                     GraphQLRequest<PaginatedResult<ModelWithMetadata<BlogOwner>>> request =\n-                            endpoint.buildSyncRequest(BlogOwner.class, null, null);\n+                            endpoint.buildSyncRequest(ModelSchema.fromModelClass(BlogOwner.class), null, null);\n                     endpoint.sync(request, onResult, onError);\n                 } catch (DataStoreException datastoreException) {\n                     onError.accept(datastoreException);\n+                } catch (AmplifyException amplifyException) {\n+                    // Todo failed converting Model Class to ModelSchema", "originalCommit": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5Mjg3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522292875", "bodyText": "Yes, will do.", "author": "jamesonwilliams", "createdAt": "2020-11-12T17:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3OTEwMA=="}], "type": "inlineReview"}, {"oid": "b63fdfa804c167b6be563ace0cf25518d4608542", "url": "https://github.com/aws-amplify/amplify-android/commit/b63fdfa804c167b6be563ace0cf25518d4608542", "message": "Addresses 12NOV PR feedback from @richardmcclellan", "committedDate": "2020-11-12T17:41:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMjMyNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522302326", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Configures an AWSDataStorePlugin which is connected to a remote AppSync endpoint,\n          \n          \n            \n                 * Configures an AWSDataStorePlugin which only operates offline (not connected to any remote backend),", "author": "richardmcclellan", "createdAt": "2020-11-12T17:54:03Z", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/HybridOfflineInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.InitializationStatus;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.datastore.appsync.SerializedModel;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.logging.AndroidLoggingPlugin;\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.testmodels.commentsblog.Blog;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.HubAccumulator;\n+import com.amplifyframework.testutils.sync.SynchronousDataStore;\n+import com.amplifyframework.util.GsonFactory;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests support for Hybrid platforms (e.g., Flutter, React Native).\n+ */\n+public final class HybridOfflineInstrumentationTest {\n+    private static final int TIMEOUT_SECONDS = 5;\n+\n+    private SynchronousHybridBehaviors hybridBehaviors;\n+    private SynchronousDataStore normalBehaviors;\n+    private ModelSchema blogOwnerSchema;\n+    private ModelSchema blogSchema;\n+\n+    /**\n+     * Configures an AWSDataStorePlugin which is connected to a remote AppSync endpoint,", "originalCommit": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07d51357cc932daf0a011c8fa49ee6c51ae456f9", "url": "https://github.com/aws-amplify/amplify-android/commit/07d51357cc932daf0a011c8fa49ee6c51ae456f9", "message": "Update aws-datastore/src/androidTest/java/com/amplifyframework/datastore/HybridOfflineInstrumentationTest.java\n\nCo-authored-by: Richard McClellan <ricmccle@amazon.com>", "committedDate": "2020-11-12T18:31:25Z", "type": "commit"}]}