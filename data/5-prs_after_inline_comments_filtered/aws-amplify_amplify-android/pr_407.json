{"pr_number": 407, "pr_title": "[aws-api] Handle AppSync date time scalar types", "pr_createdAt": "2020-04-28T22:30:33Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/407", "timeline": [{"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "url": "https://github.com/aws-amplify/amplify-android/commit/1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "message": "Add classes to represent AppSync date time scalar types", "committedDate": "2020-04-28T21:54:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTQ1MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417589450", "bodyText": "Thoughts on the .scalar packaging? Can we just lump it all in .model?", "author": "jamesonwilliams", "createdAt": "2020-04-29T20:25:15Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonGraphQLResponseFactory.java", "diffHunk": "@@ -18,6 +18,9 @@\n import com.amplifyframework.AmplifyException;\n import com.amplifyframework.api.ApiException;\n import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.core.model.scalar.AWSDate;", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0NjQyNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417646426", "bodyText": "Makes sense to me.  Initially I had separated them since they are AppSync specific models; however, given that they are in core, they can and will be used more broadly as AWS models of time.", "author": "richardmcclellan", "createdAt": "2020-04-29T22:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTc4Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417589786", "bodyText": "Is this here for compat, right now? Would we remove this once we start code-gen'ing AWSDate, instead?", "author": "jamesonwilliams", "createdAt": "2020-04-29T20:25:54Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonGraphQLResponseFactory.java", "diffHunk": "@@ -47,6 +51,10 @@\n                 new GsonBuilder()\n                 .registerTypeAdapter(List.class, new GsonListDeserializer())\n                 .registerTypeAdapter(GraphQLResponse.Error.class, new GsonErrorDeserializer())\n+                .registerTypeAdapter(Date.class, new GsonUtil.DateAdapter())", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1ODk3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417658979", "bodyText": "No, this is not for compat.  This PR will actually break compatibility until the CLI gets updated.   Here's a table describing the old and new types:\n\n\n\nAppSync Type\nJSON Type\nOld Java Type\nNew Java Type\n\n\n\n\nAWSDate\nString\njava.util.Date\ncom.amplifyframework.core.model.AWSDate\n\n\nAWSDateTime\nString\njava.util.Date\ncom.amplifyframework.core.model.AWSDateTime\n\n\nAWSTime\nString\njava.sql.Time\ncom.amplifyframework.core.model.AWSTime\n\n\nAWSTimestamp\nNumber\nLong\njava.util.Date\n\n\n\nSpecifically, for current customers using AWSDate / AWSDateTime, this PR will break serialization because it will try to serialize a String to a java.util.Date, but the registered adapter for java.util.Date now expects a Number. (the previous one expected a String).\nThe implementation serializes AWSTimestamp directly as a java.util.Date.  I decided to go with this instead of wrapping java.util.Date with a custom AWSTimestamp object, mainly because java.util.Date already represents an AWSTimestamp (both are just time since epoch).", "author": "richardmcclellan", "createdAt": "2020-04-29T22:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NDA0OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417674049", "bodyText": "This is a super useful note and table. Thank you!", "author": "jamesonwilliams", "createdAt": "2020-04-29T23:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MDk5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417590993", "bodyText": "The Gson instance should already have been injected in the constructor. If we are going to change where the instance comes from, we should get it by means of constructor injection, instead of by this service locator pattern.\n(Ref: some guy on the internet who has an opinion on Service Locator)", "author": "jamesonwilliams", "createdAt": "2020-04-29T20:28:08Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonListDeserializer.java", "diffHunk": "@@ -70,6 +70,6 @@\n             }\n         }\n \n-        return new Gson().fromJson(json, typeOfT);\n+        return GsonUtil.getGson().fromJson(json, typeOfT);", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMzAzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r418733033", "bodyText": "Good callout!  Injecting via the constructor is a good idea, but I actually realized that this class is not used at all, so I just deleted it :)", "author": "richardmcclellan", "createdAt": "2020-05-01T20:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjkwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r418736904", "bodyText": "If this class was used, it would actually be best to rely on the JsonDeserializationContext object that is already passed in.  You can't directly deserialize the JsonElement that is passed in since it results in endless recursion, but you could manually iterate through the array, and call context.deserialize(arrayElement, clazz); on each one., and then return an array of all of those items.\nI noticed there is a copy of GsonListDeserializer in DataStore (an inner class inside of AppSyncResponseDeserializer).    At some point, that needs to be refactored to use this approach instead of creating a new Gson() instance, because the new instance won't have all the type adapters (for dates/errors) needed to properly deserialize.", "author": "richardmcclellan", "createdAt": "2020-05-01T21:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MDk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNDYxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417624617", "bodyText": "I worry about the naming Util, because classes with such names tend to veer from the Single Responsibility Principle.\nI think this us the case with the current incantation of this class, which has two responsibilities:\n\nCreate an instance of Gson, bound with all type adapters necessary for handling AWS API Plugin constructs;\nBundle together only the date-specific type adapters, but not the the other ones.\n\nSo, ultimately, I think we should rename this class, and modify its contents, to match:\nGsonFactory\nThe GsonFactory would contain a create() or getInstance() method which would access the Gson instance for the plugin. This is basically the getGson() that you currently have.\nPersonally, I think I would then split all of the date/time adapters into their own top-level classes, as siblings to the GsonErrorDeserializer and ListAdapter, etc.\nDateTimeAdapters\nBut, you don't have to make each its own top-level class. You could keep the encapsulation that you currently have, and create this DateTimeAdapters top-level class. It would contain AWSDateAdapter, etc. From GsonFactory, you'd have like:\n.registerTypeAdapter(AWSDate.class, new DateTimeAdapters.AWSDateAdapter())\n\nor something.\nGsonApiAdapters\nPossibly, you could move all of the adapters, including the error and list adapters, into a single envelope. This would contain the date/time adapters, the GsonErrorDeserializer, and the ListAdapter.\nI guess I don't actually think this is a terrific idea, but at least all of the adapters would be defined at the same level  of a class hierarchy.", "author": "jamesonwilliams", "createdAt": "2020-04-29T21:31:16Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonUtil.java", "diffHunk": "@@ -15,19 +15,34 @@\n \n package com.amplifyframework.api.aws;\n \n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.core.model.scalar.AWSDate;\n+import com.amplifyframework.core.model.scalar.AWSDateTime;\n+import com.amplifyframework.core.model.scalar.AWSTime;\n import com.amplifyframework.util.Immutable;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n \n+import java.lang.reflect.Type;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n final class GsonUtil {", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDI1Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r418740256", "bodyText": "All good thoughts!\nI considered the GsonFactory idea to allow an instance to be obtained from anywhere, but then realized that any implementation of JsonDeserializer should really just rely on the JsonDeserializationContext (which is passed in), instead of creating any new Gson instances.  With that in mind, we really only need the Gson instance in one place - in the GsonGraphQLResponseFactory, so I am now just creating the Gson instance inside the GsonGraphQLResponseFactory constructor, and having any sort of utility or factory isn't really necessary.\nThere wasn't a strong reason to keep the serializers and deserializers together, so I moved the Date JsonSerializer static classes into GsonVariablesSerializer, and then created a new TemporalDeserializers class to contain the Deserializers.", "author": "richardmcclellan", "createdAt": "2020-05-01T21:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNDYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNTE3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417625171", "bodyText": "Wrap AppSync.... onto next line and indent +4 from prior line, so you don't have to split the statement after meeting1?", "author": "jamesonwilliams", "createdAt": "2020-04-29T21:32:27Z", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/AppSyncGraphQLRequestFactoryTest.java", "diffHunk": "@@ -125,4 +129,28 @@ public void buildSubscriptionFromClassAndSubscriptionType() throws ApiException\n             subscriptionRequest.getContent()\n         );\n     }\n+\n+    /**\n+     * Validates date serialization when creating GraphQLRequest.\n+     * @throws ApiException from buildMutation potential failure\n+     */\n+    @Test\n+    public void validateDateSerializer() throws ApiException {\n+        // Create expectation\n+        final Meeting meeting1 = Meeting.builder()\n+                .name(\"meeting1\")\n+                .id(\"45a5f600-8aa8-41ac-a529-aed75036f5be\")\n+                .date(new AWSDate(\"2001-02-03\"))\n+                .dateTime(new AWSDateTime(\"2001-02-03T01:30:15Z\"))\n+                .time(new AWSTime(\"01:22:33\"))\n+                .timestamp(new Date(1234567890000L))\n+                .build();\n+\n+        // Act: build a mutation to create a Meeting\n+        GraphQLRequest<Meeting> requestToCreateMeeting1 = AppSyncGraphQLRequestFactory.buildMutation(meeting1,", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyOTA4OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417629089", "bodyText": "More semantically written with the TimeUnit conversion utility as TimeUnit.MILLISECONDS.toSeconds(offsetInMillis)", "author": "jamesonwilliams", "createdAt": "2020-04-29T21:40:36Z", "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSTimeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AWSTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(\n+                \"01:22:33\",\n+                \"01:22:33.444\",\n+                \"01:22:33.444Z\",\n+                \"01:22:33.444+05:30\",\n+                \"01:22:33.444+05:30:15\"\n+        )) {\n+            assertEquals(value, new AWSTime(value).format());\n+        }\n+\n+        // Seconds for time is optional when parsing, but always present in formatted output.\n+        assertEquals(\"01:22:00\", new AWSTime(\"01:22\").format());\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDate() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);\n+        cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        Date date = cal.getTime();\n+        AWSTime awsTime = new AWSTime(date);\n+        assertEquals(date, awsTime.toDate());\n+        assertThrows(IllegalStateException.class, new ThrowingRunnable() {\n+            @Override\n+            public void run() throws Throwable {\n+                awsTime.getOffsetTotalSeconds();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDateWithOffset() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);\n+        TimeZone timeZone = TimeZone.getTimeZone(\"PST\");\n+        cal.setTimeZone(timeZone);\n+        Date date = cal.getTime();\n+        int offsetInMillis = timeZone.getOffset(date.getTime());\n+        int offsetInSeconds = offsetInMillis / 1000;", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMjM3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417632377", "bodyText": "Blargh. The shear quantity of Java's badly designed time APIs is humbling, to bear witness.\nThis particular one has six integers all in a row. Which of course a user would understand to mean:\npublic GregorianCalendar(int year,\n                 int month,\n                 int dayOfMonth,\n                 int hourOfDay,\n                 int minute,\n                 int second)\n\n(Rolls eyes at Java.)\nIn the past, I have seen people \"patch\" this bad API design in the following way. You can set the calendar to the unix epoch, and the patch in the fields, with labels. It is wordy, but the meaning of the various integers becomes unambiguous and you no longer have to pull up the Oracle documentation.\nGregorianCalendar calendar = new GregorianCalendar();\ncalendar.setTimeInMillis(0); // clear\ncalendar.set(Calendar.YEAR, 1970);\ncalendar.set(Calendar.MONTH, Calendar.JANUARY); // 0 is the first month, not 1\ncalendar.set(Calendar.DAY_OF_MONTH, 15); // 1 is the first day, not 0 \ncalendar.set(Calendar.HOUR_OF_DAY, 1); // 1 AM\ncalendar.set(Calendar.MINUTE, 30); // 1:30AM\ncalendar.set(Calendar.SECOND, 15); // 1:30:15AM", "author": "jamesonwilliams", "createdAt": "2020-04-29T21:47:42Z", "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSTimeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AWSTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(\n+                \"01:22:33\",\n+                \"01:22:33.444\",\n+                \"01:22:33.444Z\",\n+                \"01:22:33.444+05:30\",\n+                \"01:22:33.444+05:30:15\"\n+        )) {\n+            assertEquals(value, new AWSTime(value).format());\n+        }\n+\n+        // Seconds for time is optional when parsing, but always present in formatted output.\n+        assertEquals(\"01:22:00\", new AWSTime(\"01:22\").format());\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDate() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2OTcxNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417669716", "bodyText": "The IDE is helpful about inserting names for each parameter, so it's easier to know what each is for, but that doesn't help outside the IDE like in code review :).  I agree it's better to update to set each field as you've described.", "author": "richardmcclellan", "createdAt": "2020-04-29T23:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMjM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNzM4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417637381", "bodyText": "I think you can replace this by a lambda expression. That is:\nIllegalStateException whatWasThrown =\n    assertThrows(IllegalStateException.class, () -> awsTime.getOffsetTotalSeconds());\n\n(assertThrows will also return the thrown exception as a return value, so you can do stuff like make assertions on its getMessage() and getCause(), if you wanted to.)", "author": "jamesonwilliams", "createdAt": "2020-04-29T21:58:41Z", "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSTimeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AWSTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(\n+                \"01:22:33\",\n+                \"01:22:33.444\",\n+                \"01:22:33.444Z\",\n+                \"01:22:33.444+05:30\",\n+                \"01:22:33.444+05:30:15\"\n+        )) {\n+            assertEquals(value, new AWSTime(value).format());\n+        }\n+\n+        // Seconds for time is optional when parsing, but always present in formatted output.\n+        assertEquals(\"01:22:00\", new AWSTime(\"01:22\").format());\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDate() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);\n+        cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        Date date = cal.getTime();\n+        AWSTime awsTime = new AWSTime(date);\n+        assertEquals(date, awsTime.toDate());\n+        assertThrows(IllegalStateException.class, new ThrowingRunnable() {", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MTU3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417661575", "bodyText": "Cool!  I just noticed this was even suggested automatically by the IDE, so I just made this change in one click.", "author": "richardmcclellan", "createdAt": "2020-04-29T23:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNzM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzODI1OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417638258", "bodyText": "I'd split the list creation out of the loop. There's precious little space inside of an if () or a for ()`, and they're a lot easier to read when the contain only the traditional boilerplate.", "author": "jamesonwilliams", "createdAt": "2020-04-29T22:00:28Z", "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSDateTimeTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class AWSDateTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzOTA1Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417639057", "bodyText": "The current checkstyle will flag variable names under lenght 3, for public values and method arguments. It does not check implementation identifiers like this one. I'll leave it up to you, but localTime and zoneOffset would be more consistent with the style in the rest of the current code base.", "author": "jamesonwilliams", "createdAt": "2020-04-29T22:02:12Z", "path": "core/src/main/java/com/amplifyframework/core/model/scalar/AWSTime.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+import org.threeten.bp.DateTimeUtils;\n+import org.threeten.bp.Instant;\n+import org.threeten.bp.LocalDate;\n+import org.threeten.bp.LocalTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.OffsetTime;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+import org.threeten.bp.format.DateTimeParseException;\n+\n+import java.util.Date;\n+\n+/**\n+ * Represents a valid extended ISO-8601 Time string, with an optional timezone offset.\n+ * <p>\n+ * hh:mm:ss.sss\u00b1hh:mm:ss\n+ * OR\n+ * hh:mm:ss.sss\n+ * <p>\n+ * https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html#appsync-defined-scalars\n+ */\n+public final class AWSTime {\n+    private final LocalTime localTime;\n+    private final ZoneOffset zoneOffset;\n+\n+    public AWSTime(@NonNull Date date) {\n+        this.zoneOffset = null;\n+        this.localTime = Instant.ofEpochMilli(date.getTime()).atOffset(ZoneOffset.UTC).toLocalTime();\n+    }\n+\n+    public AWSTime(@NonNull Date date, int offsetInSeconds) {\n+        this.zoneOffset = ZoneOffset.ofTotalSeconds(offsetInSeconds);\n+        this.localTime = Instant.ofEpochMilli(date.getTime()).atOffset(this.zoneOffset).toLocalTime();\n+    }\n+\n+    public AWSTime(@NonNull String text) {\n+        LocalTime lt;\n+        ZoneOffset zo;", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NjEzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417676136", "bodyText": "I don't prefer one style versus the other, but for consistency with current code base style, I'll make this change!", "author": "richardmcclellan", "createdAt": "2020-04-29T23:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzOTA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MDEwMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417640103", "bodyText": "This is just a test class, but a toString() might come in handy if like a jUnit assertFoo(...)-family method ever tries to print it out as part of a message?", "author": "jamesonwilliams", "createdAt": "2020-04-29T22:04:25Z", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/ListMeetingsResult.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.testmodels.meeting.Meeting;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A hypothetical model for some data returned from a GraphQL API.\n+ * This is a placeholder for the model that gets code generated by the\n+ * Amplify CLI.\n+ */\n+final class ListMeetingsResult {\n+    private final List<Meeting> items;\n+\n+    ListMeetingsResult() {\n+        this.items = new ArrayList<>();\n+    }\n+\n+    ListMeetingsResult(final List<Meeting> items) {\n+        this.items = new ArrayList<>();\n+        if (items != null) {\n+            this.items.addAll(items);\n+        }\n+    }\n+\n+    List<Meeting> getItems() {\n+        return ListMeetingsResult.this.items;\n+    }\n+\n+    @Override\n+    public boolean equals(Object thatObject) {\n+        if (this == thatObject) {\n+            return true;\n+        }\n+        if (thatObject == null || getClass() != thatObject.getClass()) {\n+            return false;\n+        }\n+\n+        ListMeetingsResult that = (ListMeetingsResult) thatObject;\n+\n+        return ObjectsCompat.equals(items, that.items);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return items != null ? items.hashCode() : 0;\n+    }", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MTExMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417641110", "bodyText": "Also, if we make the GsonFactory, can we extract the logic at L51 of GsonGraphQLResponseFactory? Can both places share a single, externally-defined/construted Gson instance?", "author": "jamesonwilliams", "createdAt": "2020-04-29T22:06:39Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonUtil.java", "diffHunk": "@@ -75,4 +90,80 @@ private static Object toObject(JsonElement element) {\n         }\n         return null;\n     }\n+\n+    public static Gson getGson() {\n+        if (gson == null) {\n+            gson = new GsonBuilder()", "originalCommit": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MjE0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r418742148", "bodyText": "I did try this idea at first - I created one Gson instance with all the serializers.  I ended up getting a JsonTreeOverflow exception because the GsonListDeserializer was calling itself recursively if the Gson instance inside it called itself.    I've now realized that GsonListDeserializer isn't actually needed, so I deleted it, and now there's only one Gson deserializer instance created in GsonGraphQLResponseFactory, and one Gson serializer instance created in GsonVariablesSerializer.", "author": "richardmcclellan", "createdAt": "2020-05-01T21:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MTExMA=="}], "type": "inlineReview"}, {"oid": "af7a7cc115c95296ffa62ac59901d65c42a1cdf0", "url": "https://github.com/aws-amplify/amplify-android/commit/af7a7cc115c95296ffa62ac59901d65c42a1cdf0", "message": "PR feedback", "committedDate": "2020-05-01T21:53:44Z", "type": "commit"}, {"oid": "b5838181aa5d4f0739efb2ac1c747d21e47ae12b", "url": "https://github.com/aws-amplify/amplify-android/commit/b5838181aa5d4f0739efb2ac1c747d21e47ae12b", "message": "Merge branch 'master' into rm/dates", "committedDate": "2020-05-01T21:58:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NzY0MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r419497640", "bodyText": "Don't you need the List.class binding anymore?", "author": "jamesonwilliams", "createdAt": "2020-05-04T14:54:09Z", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonGraphQLResponseFactory.java", "diffHunk": "@@ -31,24 +34,30 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n \n /**\n  * Converts JSON strings into models of a given type, using Gson.\n  */\n final class GsonGraphQLResponseFactory implements GraphQLResponse.Factory {\n+    private static final String DATA_KEY = \"data\";\n+    private static final String ERRORS_KEY = \"errors\";\n+    private static final String ITEMS_KEY = \"items\";\n+\n     private final Gson gson;\n \n     /**\n      * Default constructor using default Gson object.\n      */\n     GsonGraphQLResponseFactory() {\n-        this(\n-                new GsonBuilder()\n-                .registerTypeAdapter(List.class, new GsonListDeserializer())", "originalCommit": "b5838181aa5d4f0739efb2ac1c747d21e47ae12b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyODQ4MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r419528480", "bodyText": "As far as I can tell, GsonListDeserializer isn't actually used by this factory.  It looks like it was designed mainly to skip the \"items\" level when deserializing an array, but it turns out this is handled manually in GsonGraphQLResponseFactory.\nOf note though, I am just deleting the one in aws-api.  There is a copy of GsonListDeserializer in aws-datastore, and I have not checked to see if that one is used or not.", "author": "richardmcclellan", "createdAt": "2020-05-04T15:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NzY0MA=="}], "type": "inlineReview"}]}