{"pr_number": 353, "pr_title": "[aws-analytics-pinpoint] Introduce builder for AnalyticsEvent", "pr_createdAt": "2020-04-05T15:00:26Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/353", "timeline": [{"oid": "5063d189556d7aa18901702349f6fe3a30c16796", "url": "https://github.com/aws-amplify/amplify-android/commit/5063d189556d7aa18901702349f6fe3a30c16796", "message": "[aws-analytics-pinpoint] Introduce Builder for AnalyticsEvent\n\nPreviously, to send an event using the Amazon Pinpoint plugin, a\ndeveloper had to build a PinpointProperties object and pass it to the\nconstructor of AnalyticsEvent. This change exposes a fluent builder that\nconfigures and returns a complete AnalyticsEvent. This moves Analytics\ncloser to the design document and the iOS implementation.\n\nThe new syntax for creating an AnalyticsEvent is:\n\n```java\nAnalyticsEvent event = AnalyticsEvent.builder()\n     .name(\"EventName\")\n     .addProperty(\"StringProperty\", \"Pancakes\")\n     .addProperty(\"BooleanProperty\", true)\n     .addProperty(\"DoubleProperty\", 3.14)\n     .addProperty(\"IntegerProperty\", 42)\n     .build();\n```\n\nThis change also cleans up some of the related interfaces and behavior:\n\n- Rename AnalyticsEvent (the interface) to AnalyticsEventBehavior and\n  BasicAnalyticsEvent (the implementation) to AnalyticsEvent\n- Remove the concept of PinpointProperties and instead hoist\n  Property-related classes into the Category itself; prefix all\n  of these classes with \"Analytics\"\n- Expand Properties to support Boolean and Integer as well as String and\n  Double by adding AnalyticsBooleanProperty and AnalyticsIntegerProperty\n  and handling their conversion in the Pinpoint plugin\n- Add a generic add method to allow AnalyticsProperties.Builder to\n  handle any type that implements AnalyticsPropertyBehavior<T>\n- Change the signature of\n  AnalyticsCategoryBehavior#unregisterGlobalProperties to accept a\n  variable number of Strings instead of a Set\n- Stop guarding configuration methods like registering and unregistering\n  properties with an enabled check\n- Add iterator, size, and get methods to AnalyticsProperties to\n  encapsulate the underlying Map", "committedDate": "2020-04-09T02:02:19Z", "type": "commit"}, {"oid": "23b6445b85b079c8517a5bd36eef900713a96fa0", "url": "https://github.com/aws-amplify/amplify-android/commit/23b6445b85b079c8517a5bd36eef900713a96fa0", "message": "Suppress MagicNumber rule in test files\n\nIt's common to use MagicNumbers in the arrange and assert activities of\na test, and we were often using a SuppressWarnings annotation for this\npurpose. This change suppresses this rule for any file in test or\nandroidTest directories to allow us to use static numbers for test\npurposes.", "committedDate": "2020-04-09T02:02:19Z", "type": "commit"}, {"oid": "23b6445b85b079c8517a5bd36eef900713a96fa0", "url": "https://github.com/aws-amplify/amplify-android/commit/23b6445b85b079c8517a5bd36eef900713a96fa0", "message": "Suppress MagicNumber rule in test files\n\nIt's common to use MagicNumbers in the arrange and assert activities of\na test, and we were often using a SuppressWarnings annotation for this\npurpose. This change suppresses this rule for any file in test or\nandroidTest directories to allow us to use static numbers for test\npurposes.", "committedDate": "2020-04-09T02:02:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTQxNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r406089415", "bodyText": "nit: could be marked as a static final class", "author": "jamesonwilliams", "createdAt": "2020-04-09T09:51:59Z", "path": "core/src/test/java/com/amplifyframework/analytics/AnalyticsPropertiesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.NoSuchElementException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AnalyticsPropertiesTest {\n+    @Test\n+    public void builderConfiguresCompleteProperties() {\n+        // Arrange: Build a new AnalyticsProperties object\n+        AnalyticsProperties properties = AnalyticsProperties.builder()\n+                .add(\"TimeZone\", \"EDT\")\n+                .add(\"inGeoFence\", false)\n+                .add(\"LoginDuration\", 98.36)\n+                .add(\"ProfileCount\", 2)\n+                .build();\n+\n+        // Assert: Verify the builder correctly constructed the AnalyticsProperties\n+        assertEquals(4, properties.size());\n+\n+        final String timeZone = ((AnalyticsStringProperty) properties.get(\"TimeZone\")).getValue();\n+        final Boolean inGeoFence = ((AnalyticsBooleanProperty) properties.get(\"inGeoFence\")).getValue();\n+        final Double loginDuration = ((AnalyticsDoubleProperty) properties.get(\"LoginDuration\")).getValue();\n+        final Integer profileCount = ((AnalyticsIntegerProperty) properties.get(\"ProfileCount\")).getValue();\n+\n+        assertEquals(4, properties.size());\n+        assertEquals(\"EDT\", timeZone);\n+        assertEquals(Boolean.FALSE, inGeoFence);\n+        assertEquals(Double.valueOf(98.36), loginDuration);\n+        assertEquals(Integer.valueOf(2), profileCount);\n+    }\n+\n+    @Test\n+    public void builderCanAcceptTypesThatImplementAnalyticsPropertiesBehavior() {\n+        // Arrange: Build a FooProperty and pass it to an AnalyticsProperties Builder\n+        Date date = new Date();\n+        FooProperty property = new FooProperty(date);\n+        AnalyticsProperties properties = AnalyticsProperties.builder()\n+                .add(\"SignUpDate\", property)\n+                .build();\n+\n+        // Assert: Ensure we can retrieve the FooProperty value\n+        assertEquals(date, properties.get(\"SignUpDate\").getValue());\n+    }\n+\n+    @Test\n+    public void getRaisesNoSuchElementExceptionWhenPropertyNotFound() {\n+        AnalyticsProperties properties = AnalyticsProperties.builder().build();\n+\n+        assertThrows(NoSuchElementException.class, () -> {\n+            properties.get(\"key-that-doesnt-exist\");\n+        });\n+    }\n+\n+    class FooProperty implements AnalyticsPropertyBehavior<Date> {", "originalCommit": "23b6445b85b079c8517a5bd36eef900713a96fa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}