{"pr_number": 768, "pr_title": "feat(rxbindings) Create operation for subscription", "pr_createdAt": "2020-08-27T20:11:40Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/768", "timeline": [{"oid": "707de0e47c1203622cf75f53867a1632dc43fe9e", "url": "https://github.com/aws-amplify/amplify-android/commit/707de0e47c1203622cf75f53867a1632dc43fe9e", "message": "feat(rxbindings) Create operation for subscriptions", "committedDate": "2020-08-27T19:47:42Z", "type": "commit"}, {"oid": "d6e9fe246eeb4ad18009cccb8f4b81392ec459c5", "url": "https://github.com/aws-amplify/amplify-android/commit/d6e9fe246eeb4ad18009cccb8f4b81392ec459c5", "message": "Merge branch 'feature/rxbindings' into rjuliano/rx-subscriptions", "committedDate": "2020-08-27T21:05:51Z", "type": "commit"}, {"oid": "f9a635a4981fcad8056553f37c5e0264ea22b137", "url": "https://github.com/aws-amplify/amplify-android/commit/f9a635a4981fcad8056553f37c5e0264ea22b137", "message": "Fix  access modifiers", "committedDate": "2020-08-27T22:21:20Z", "type": "commit"}, {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "url": "https://github.com/aws-amplify/amplify-android/commit/a3d18f0d123f78a41c1dbf1489186e48f519a674", "message": "Added test for cancellation", "committedDate": "2020-08-27T23:08:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTY2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478815666", "bodyText": "Is this access level escalation required, for the implementation class? (The public methods will still be public.)", "author": "jamesonwilliams", "createdAt": "2020-08-28T03:51:13Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -26,16 +26,19 @@\n import com.amplifyframework.api.rest.RestOptions;\n import com.amplifyframework.api.rest.RestResponse;\n import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.async.Cancelable;\n import com.amplifyframework.rx.RxAdapters.CancelableBehaviors;\n \n import io.reactivex.rxjava3.core.Observable;\n import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.subjects.BehaviorSubject;\n \n /**\n  * An implementation of the RxApiCategoryBehavior which satisfies the API contract by wrapping\n  * {@link ApiCategoryBehavior} in Rx primitives.\n  */\n-final class RxApiBinding implements RxApiCategoryBehavior {\n+public final class RxApiBinding implements RxApiCategoryBehavior {", "originalCommit": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NDEwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479284102", "bodyText": "Yeah...that's because anything outside of the package wouldn't have access to the RxSubscriptionOperation object. That being said, rather than making this public, I created a top level class called RxOperations where we can put of the Rx-operation related objects. That, we can make public.", "author": "rjuliano", "createdAt": "2020-08-28T13:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTkyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478815924", "bodyText": "does it need to be public?", "author": "jamesonwilliams", "createdAt": "2020-08-28T03:52:16Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {", "originalCommit": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NTg1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479285854", "bodyText": "This one does, but now lives under RxOperations.", "author": "rjuliano", "createdAt": "2020-08-28T13:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjIyNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478816226", "bodyText": "Maybe do this as an inner class (FooConsumer extends Consumer), and initialize it inside the constructor body? S.t. private final Consumer<String> onConnected; is up with the other ordinary declarations?", "author": "jamesonwilliams", "createdAt": "2020-08-28T03:53:39Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {", "originalCommit": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjkyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478816922", "bodyText": "Is there any way to bundle this into the ConnectionState object?", "author": "jamesonwilliams", "createdAt": "2020-08-28T03:56:43Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {\n+            @Override\n+            public void accept(@NonNull String subscriptionId) {\n+                RxSubscriptionOperation.this.subscriptionId = subscriptionId;\n+                connectionStateSubject.onNext(ConnectionState.CONNECTED);\n+            }\n+        };\n+\n+        RxSubscriptionOperation(CancelableBehaviors.StreamEmitter<String, T, ApiException> callbacks) {\n+            connectionStateSubject = BehaviorSubject.create();\n+            subscriptionData = Observable.create(emitter -> {\n+                amplifyOperation = callbacks.streamTo(onConnected::accept,\n+                                                      emitter::onNext,\n+                                                      emitter::onError,\n+                                                      emitter::onComplete);\n+            });\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * retrieve data received by the subscription operation.\n+         * @return Reference to the {@link Observable} with subscription data.\n+         */\n+        public Observable<T> observeSubscriptionData() {\n+            return subscriptionData;\n+        }\n+\n+        /**\n+         * Once the subscription starts, this method returns\n+         * the value of the subscriptionId.\n+         * @return The value of the subscriptionId.\n+         */\n+        public String getSubscriptionId() {", "originalCommit": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NzMxMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479287310", "bodyText": "Good call on this one. Rather that doing it this way, I created a ConnectionStateEvent that has a connectionState and subscriptionId properties. We can expand on that down the road.", "author": "rjuliano", "createdAt": "2020-08-28T13:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNzMxNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478817316", "bodyText": "@palpatim notes:\n\nFWIW, we also notify on \"connecting\" and \"disconnected\" states. \"Connecting\" isn't terribly meaningful, and \"disconnected\" degrades to a completion on the subscription data publisher, so that may not be necessary in Android\n\nNot sure if we need to do this today -- or can defer.", "author": "jamesonwilliams", "createdAt": "2020-08-28T03:58:34Z", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {\n+            @Override\n+            public void accept(@NonNull String subscriptionId) {\n+                RxSubscriptionOperation.this.subscriptionId = subscriptionId;\n+                connectionStateSubject.onNext(ConnectionState.CONNECTED);\n+            }\n+        };\n+\n+        RxSubscriptionOperation(CancelableBehaviors.StreamEmitter<String, T, ApiException> callbacks) {\n+            connectionStateSubject = BehaviorSubject.create();\n+            subscriptionData = Observable.create(emitter -> {\n+                amplifyOperation = callbacks.streamTo(onConnected::accept,\n+                                                      emitter::onNext,\n+                                                      emitter::onError,\n+                                                      emitter::onComplete);\n+            });\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * retrieve data received by the subscription operation.\n+         * @return Reference to the {@link Observable} with subscription data.\n+         */\n+        public Observable<T> observeSubscriptionData() {\n+            return subscriptionData;\n+        }\n+\n+        /**\n+         * Once the subscription starts, this method returns\n+         * the value of the subscriptionId.\n+         * @return The value of the subscriptionId.\n+         */\n+        public String getSubscriptionId() {\n+            return subscriptionId;\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * receive notfication about the status of the subscription connection. Currently,\n+         * only {@link ConnectionState#CONNECTED} is emitted.\n+         * @return Reference to the {@link Observable} that receives connection events.\n+         */\n+        public Observable<ConnectionState> observeConnectionState() {\n+            return connectionStateSubject;\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (amplifyOperation != null) {\n+                amplifyOperation.cancel();\n+            }\n+            connectionStateSubject.onComplete();\n+        }\n+\n+        /**\n+         * Enum representing connection states of a\n+         * subscription operation.\n+         */\n+        public enum ConnectionState {\n+            /**\n+             * The subscription successfully established a connection and is\n+             * ready to receive data.\n+             */\n+            CONNECTED", "originalCommit": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4ODM2NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479288364", "bodyText": "I looked into this, but it will require some additional plumbing to surface those events from the SubscriptionEndpoint class. I will make note to create a task for this.", "author": "rjuliano", "createdAt": "2020-08-28T13:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNzMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNzQ4Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478817486", "bodyText": "I'd add an import ...  for RxSubscriptionOperation.. directly just to cut down on some of this boiler plate a tiny bit.", "author": "jamesonwilliams", "createdAt": "2020-08-28T03:59:24Z", "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxApiBindingTest.java", "diffHunk": "@@ -225,12 +228,20 @@ public void subscribeStartsEmitsValuesAndCompletes() throws InterruptedException\n         );\n \n         // Act: subscribe via binding\n-        TestObserver<GraphQLResponse<Model>> observer =\n-            rxApi.subscribe(request).test();\n+        RxApiBinding.RxSubscriptionOperation<GraphQLResponse<Model>> rxOperation = rxApi.subscribe(request);", "originalCommit": "a3d18f0d123f78a41c1dbf1489186e48f519a674", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a16b4d18938ac33c6400f8a8dc106f6f6bf6210b", "url": "https://github.com/aws-amplify/amplify-android/commit/a16b4d18938ac33c6400f8a8dc106f6f6bf6210b", "message": "Changed event to an object", "committedDate": "2020-08-28T12:52:08Z", "type": "commit"}, {"oid": "ca72c90eef05603d7185a85d1d1af3a1c124ab28", "url": "https://github.com/aws-amplify/amplify-android/commit/ca72c90eef05603d7185a85d1d1af3a1c124ab28", "message": "Created a class to hold rx-operation objects", "committedDate": "2020-08-28T13:20:59Z", "type": "commit"}, {"oid": "875558a31fa598bf2311a12d09234104764aa5ee", "url": "https://github.com/aws-amplify/amplify-android/commit/875558a31fa598bf2311a12d09234104764aa5ee", "message": "Make RxApiBinding package private", "committedDate": "2020-08-28T13:24:04Z", "type": "commit"}, {"oid": "00a58e28567e1917897e0a3f9ff442ce8c4a6a7c", "url": "https://github.com/aws-amplify/amplify-android/commit/00a58e28567e1917897e0a3f9ff442ce8c4a6a7c", "message": "Add static import", "committedDate": "2020-08-28T13:28:39Z", "type": "commit"}]}