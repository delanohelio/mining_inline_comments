{"pr_number": 346, "pr_title": "Implement interpret with AWS Comprehend", "pr_createdAt": "2020-04-03T08:27:39Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/346", "timeline": [{"oid": "ccccfcbd3d7b1c10960233e9f2f77056a21e24d7", "url": "https://github.com/aws-amplify/amplify-android/commit/ccccfcbd3d7b1c10960233e9f2f77056a21e24d7", "message": "Implement online interpret from AWS Comprehend", "committedDate": "2020-04-03T06:10:48Z", "type": "commit"}, {"oid": "7bb3350df2430ff83cb90a5eb45a5be4a829d9a1", "url": "https://github.com/aws-amplify/amplify-android/commit/7bb3350df2430ff83cb90a5eb45a5be4a829d9a1", "message": "Add unit tests", "committedDate": "2020-04-03T06:34:58Z", "type": "commit"}, {"oid": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "url": "https://github.com/aws-amplify/amplify-android/commit/8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "message": "Add instrumentation tests", "committedDate": "2020-04-03T08:22:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxOTc3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403219771", "bodyText": "New!! Don't need to suppress this anymore. :-D", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:22:55Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/SpeechTypeAdapter.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.SpeechType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert AWS Comprehend's part of speech type\n+ * into Amplify-compatible data structure\n+ * (i.e. {@link SpeechType}).\n+ */\n+public final class SpeechTypeAdapter {\n+    @SuppressWarnings(\"checkstyle:all\") private SpeechTypeAdapter() {}", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMzQ1NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403223455", "bodyText": "This looks way too high.\nAmazon service APIs should be returning data within a second, and even that should be in the P99 range.\nEven accounting for SSL handshake, potential retries, etc., I'd expect this value to be an order or magnitude smaller, like ~5 seconds.", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:27:12Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousPredictions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils.sync;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Await;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A utility to perform synchronous calls to the {@link PredictionsCategory}.\n+ * This code is not well suited for production use, but is useful in test\n+ * code, where we want to make a series of sequential assertions after\n+ * performing various operations.\n+ */\n+public final class SynchronousPredictions {\n+    private static final long PREDICTIONS_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(60);", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NjI0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403266247", "bodyText": "unfortunately, a single interpret call can make up to 5 API calls...\nMeanwhile, 1 minute was definitely not my intent LOL. Looks like I forgot to change it after debugging.", "author": "raphkim", "createdAt": "2020-04-03T19:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMzY2Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403223667", "bodyText": "suppression is no longer needed", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:27:28Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousPredictions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils.sync;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Await;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A utility to perform synchronous calls to the {@link PredictionsCategory}.\n+ * This code is not well suited for production use, but is useful in test\n+ * code, where we want to make a series of sequential assertions after\n+ * performing various operations.\n+ */\n+public final class SynchronousPredictions {\n+    private static final long PREDICTIONS_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(60);\n+\n+    private static SynchronousPredictions singleton = null;\n+\n+    @SuppressWarnings(\"checkstyle:all\") private SynchronousPredictions() {}", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNjMxMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403226310", "bodyText": "These things really don't need to be singletons. you could still use a factory, for style points. But, Amplify.Predictions should already be able to multiplex requests from different callers. So there's no benefit to synchronizing access to it, via a singleton like we are here.\nTLDR\n// Alternately, just call this method \"create(...)\". \n@NonNull\npublic static SynchronousPredictions delegatingToAmplify() {\n    return SynchronousPredictions.delgatingTo(Amplify.Preditions);\n}\n\n// Alternately, also just \"create(...)\".\n@NonNull\npublic static SynchronousPredictions delegatingTo(@NonNull PredictionsCategoryBehavior asyncDelegate) {\n    return new SynchronousPredictions(asyncDelegate);\n}", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:30:27Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousPredictions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils.sync;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Await;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A utility to perform synchronous calls to the {@link PredictionsCategory}.\n+ * This code is not well suited for production use, but is useful in test\n+ * code, where we want to make a series of sequential assertions after\n+ * performing various operations.\n+ */\n+public final class SynchronousPredictions {\n+    private static final long PREDICTIONS_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(60);\n+\n+    private static SynchronousPredictions singleton = null;\n+\n+    @SuppressWarnings(\"checkstyle:all\") private SynchronousPredictions() {}\n+\n+    /**\n+     * Gets a singleton instance of the Synchronous Predictions utility.\n+     * @return Singleton instance of Synchronous Predictions\n+     */\n+    @NonNull\n+    public static synchronized SynchronousPredictions singleton() {", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNDE1OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403234158", "bodyText": "Ah, improving upon a naming comment I'd made in another PR, how about InterpretOptions.defaults().", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:39:52Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsInterpretTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions interpret delivers a non-null result\n+ * for valid input.\n+ */\n+public final class AWSPredictionsInterpretTest {\n+\n+    private static SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Amplify and Predictions plugin before the tests.\n+     * @throws Exception if configuration fails\n+     */\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+        TestConfiguration.configureIfNotConfigured();\n+        predictions = SynchronousPredictions.singleton();\n+    }\n+\n+    /**\n+     * Assert that interpret fails for blank input.\n+     * AWS Comprehension will not accept a blank input, so\n+     * an exception is thrown.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testInterpretFailsForNullInput() throws Exception {\n+        predictions.interpret(\"\", InterpretOptions.defaultInstance());", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2ODE2NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403268164", "bodyText": "default vs defaults? Thoughts?", "author": "raphkim", "createdAt": "2020-04-03T19:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNDE1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNTgxMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403235811", "bodyText": "Is it possible to tighten this test by including an additional assertion,\nassertEquals(\n    Arrays.asList(\"the\", \"expected\", \"phrases\"),\n    keyPhrases\n);\n\n?", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:41:58Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsInterpretTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions interpret delivers a non-null result\n+ * for valid input.\n+ */\n+public final class AWSPredictionsInterpretTest {\n+\n+    private static SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Amplify and Predictions plugin before the tests.\n+     * @throws Exception if configuration fails\n+     */\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+        TestConfiguration.configureIfNotConfigured();\n+        predictions = SynchronousPredictions.singleton();\n+    }\n+\n+    /**\n+     * Assert that interpret fails for blank input.\n+     * AWS Comprehension will not accept a blank input, so\n+     * an exception is thrown.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testInterpretFailsForNullInput() throws Exception {\n+        predictions.interpret(\"\", InterpretOptions.defaultInstance());\n+    }\n+\n+    /**\n+     * Assert that english text is detected as English.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testEnglishLanguageDetection() throws Exception {\n+        // Interpret english text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected language is English\n+        Language language = result.getLanguage();\n+        assertNotNull(language);\n+        assertEquals(LanguageType.ENGLISH, language.getValue());\n+    }\n+\n+    /**\n+     * Assert that english text is detected as French.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testFrenchLanguageDetection() throws Exception {\n+        // Interpret french text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-fr.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected language is French\n+        Language language = result.getLanguage();\n+        assertNotNull(language);\n+        assertEquals(LanguageType.FRENCH, language.getValue());\n+    }\n+\n+    /**\n+     * Assert that happy review is detected as positive.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testPositiveSentimentDetection() throws Exception {\n+        // Interpret positive text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"positive-review.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected sentiment is positive\n+        Sentiment sentiment = result.getSentiment();\n+        assertNotNull(sentiment);\n+        assertEquals(SentimentType.POSITIVE, sentiment.getValue());\n+    }\n+\n+    /**\n+     * Assert that unhappy review is detected as negative.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testNegativeSentimentDetection() throws Exception {\n+        // Interpret negative text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"negative-review.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected sentiment is negative\n+        Sentiment sentiment = result.getSentiment();\n+        assertNotNull(sentiment);\n+        assertEquals(SentimentType.NEGATIVE, sentiment.getValue());\n+    }\n+\n+    /**\n+     * Assert that key phrases are detected.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testKeyPhraseDetection() throws Exception {\n+        // Interpret sample text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected key phrases are not empty\n+        List<KeyPhrase> keyPhrases = result.getKeyPhrases();\n+        assertNotNull(keyPhrases);\n+        assertFalse(keyPhrases.isEmpty());", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2ODg4Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403268887", "bodyText": "I would love to, but currently I lack a way to compare a list of features. I'm wondering if I should make two feature instances evaluate .equals() to true if the value matches without looking at the confidence score.", "author": "raphkim", "createdAt": "2020-04-03T19:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMjg3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403832878", "bodyText": "Ohh, gotcha. Hm. Well, I guess you could eval against a list of expected KeyPhrases themselves?\nassertEquals(\n    Arrays.asList(\n        KeyPhrase.builder().value(\"the\").confidence(30).build(),\n        KeyPhrase.builder().value(\"key\").confidence(20).build(),\n        KeyPhrase.builder().value(\"phrases\").confidence(50).build()\n    ),\n    result.getPhrases()\n);\n\nOr if the confidence values returned by the service are not stable/predictable, and you'd rather not do literal assertions on them, maybe just check their ordering:\nassertEquals(\n    Arrays.asList(\"the\", \"key\", \"phrases\"),\n    Observable.fromIterable(results.getKeyPhrases())\n        .sorted() // calls Feature::compareTo, which sorts by confidence?\n        .map(KeyPhrase::getValue) // Ordered by confidence, but just the text values\n        .toList()\n        .blockingGet()\n);\n\nAh crap ... just realized in re-reading it, but we are missing equals/hashCode()/toString() on some of the KeyPhrase, TextFeature, and Feature?", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNjE1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403236154", "bodyText": "Same deal, can we tighten this test by asserting what the entities ought to be?", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:42:27Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsInterpretTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions interpret delivers a non-null result\n+ * for valid input.\n+ */\n+public final class AWSPredictionsInterpretTest {\n+\n+    private static SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Amplify and Predictions plugin before the tests.\n+     * @throws Exception if configuration fails\n+     */\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+        TestConfiguration.configureIfNotConfigured();\n+        predictions = SynchronousPredictions.singleton();\n+    }\n+\n+    /**\n+     * Assert that interpret fails for blank input.\n+     * AWS Comprehension will not accept a blank input, so\n+     * an exception is thrown.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testInterpretFailsForNullInput() throws Exception {\n+        predictions.interpret(\"\", InterpretOptions.defaultInstance());\n+    }\n+\n+    /**\n+     * Assert that english text is detected as English.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testEnglishLanguageDetection() throws Exception {\n+        // Interpret english text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected language is English\n+        Language language = result.getLanguage();\n+        assertNotNull(language);\n+        assertEquals(LanguageType.ENGLISH, language.getValue());\n+    }\n+\n+    /**\n+     * Assert that english text is detected as French.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testFrenchLanguageDetection() throws Exception {\n+        // Interpret french text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-fr.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected language is French\n+        Language language = result.getLanguage();\n+        assertNotNull(language);\n+        assertEquals(LanguageType.FRENCH, language.getValue());\n+    }\n+\n+    /**\n+     * Assert that happy review is detected as positive.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testPositiveSentimentDetection() throws Exception {\n+        // Interpret positive text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"positive-review.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected sentiment is positive\n+        Sentiment sentiment = result.getSentiment();\n+        assertNotNull(sentiment);\n+        assertEquals(SentimentType.POSITIVE, sentiment.getValue());\n+    }\n+\n+    /**\n+     * Assert that unhappy review is detected as negative.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testNegativeSentimentDetection() throws Exception {\n+        // Interpret negative text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"negative-review.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected sentiment is negative\n+        Sentiment sentiment = result.getSentiment();\n+        assertNotNull(sentiment);\n+        assertEquals(SentimentType.NEGATIVE, sentiment.getValue());\n+    }\n+\n+    /**\n+     * Assert that key phrases are detected.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testKeyPhraseDetection() throws Exception {\n+        // Interpret sample text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected key phrases are not empty\n+        List<KeyPhrase> keyPhrases = result.getKeyPhrases();\n+        assertNotNull(keyPhrases);\n+        assertFalse(keyPhrases.isEmpty());\n+    }\n+\n+    /**\n+     * Assert that entities are detected.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testEntityDetection() throws Exception {\n+        // Interpret sample text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected entities are not empty\n+        List<Entity> entities = result.getEntities();\n+        assertNotNull(entities);\n+        assertFalse(entities.isEmpty());", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODA0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403238048", "bodyText": "For these short, one-line inputs, I do much prefer inlining them into the test. Externalizing content into src/androidTest/assets or src/test/resources is valuable for larger payloads - like 40 line JSON documents / pieces of open form text, or things that are copy/pasted from external resources.\nFor things that you've come up with yourself, that are short, it's easier to read the tests if they're just right there.\nTechnically, I guess this is \"DAMP\" (Descriptive and Meaningful Phrasing.)\nUsing the Resources utility can also help maintain DAMP, when the resource becomes unwieldily. So, it can go both ways, really.", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:44:37Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsInterpretTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions interpret delivers a non-null result\n+ * for valid input.\n+ */\n+public final class AWSPredictionsInterpretTest {\n+\n+    private static SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Amplify and Predictions plugin before the tests.\n+     * @throws Exception if configuration fails\n+     */\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+        TestConfiguration.configureIfNotConfigured();\n+        predictions = SynchronousPredictions.singleton();\n+    }\n+\n+    /**\n+     * Assert that interpret fails for blank input.\n+     * AWS Comprehension will not accept a blank input, so\n+     * an exception is thrown.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testInterpretFailsForNullInput() throws Exception {\n+        predictions.interpret(\"\", InterpretOptions.defaultInstance());\n+    }\n+\n+    /**\n+     * Assert that english text is detected as English.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testEnglishLanguageDetection() throws Exception {\n+        // Interpret english text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected language is English\n+        Language language = result.getLanguage();\n+        assertNotNull(language);\n+        assertEquals(LanguageType.ENGLISH, language.getValue());\n+    }\n+\n+    /**\n+     * Assert that english text is detected as French.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testFrenchLanguageDetection() throws Exception {\n+        // Interpret french text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-fr.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected language is French\n+        Language language = result.getLanguage();\n+        assertNotNull(language);\n+        assertEquals(LanguageType.FRENCH, language.getValue());\n+    }\n+\n+    /**\n+     * Assert that happy review is detected as positive.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testPositiveSentimentDetection() throws Exception {\n+        // Interpret positive text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"positive-review.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected sentiment is positive\n+        Sentiment sentiment = result.getSentiment();\n+        assertNotNull(sentiment);\n+        assertEquals(SentimentType.POSITIVE, sentiment.getValue());\n+    }\n+\n+    /**\n+     * Assert that unhappy review is detected as negative.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testNegativeSentimentDetection() throws Exception {\n+        // Interpret negative text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"negative-review.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected sentiment is negative\n+        Sentiment sentiment = result.getSentiment();\n+        assertNotNull(sentiment);\n+        assertEquals(SentimentType.NEGATIVE, sentiment.getValue());\n+    }\n+\n+    /**\n+     * Assert that key phrases are detected.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testKeyPhraseDetection() throws Exception {\n+        // Interpret sample text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected key phrases are not empty\n+        List<KeyPhrase> keyPhrases = result.getKeyPhrases();\n+        assertNotNull(keyPhrases);\n+        assertFalse(keyPhrases.isEmpty());\n+    }\n+\n+    /**\n+     * Assert that entities are detected.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testEntityDetection() throws Exception {\n+        // Interpret sample text and assert non-null result\n+        InterpretResult result = predictions.interpret(\n+                Assets.readAsString(\"sample-text-en.txt\"),\n+                InterpretOptions.defaultInstance()\n+        );\n+        assertNotNull(result);\n+\n+        // Assert detected entities are not empty\n+        List<Entity> entities = result.getEntities();\n+        assertNotNull(entities);\n+        assertFalse(entities.isEmpty());\n+    }\n+\n+    /**\n+     * Assert that interpret correctly labels syntax.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // TODO: What's a better way to compare results?\n+    public void testSyntaxDetection() throws Exception {\n+        final String sampleText = \"I am inevitable.\";", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3MDMzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403270333", "bodyText": "My original intent was to actually bring in large paragraphs, but I ended up using something short for debugging purposes and never changed it back. I may do just that.", "author": "raphkim", "createdAt": "2020-04-03T19:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MDM3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403240378", "bodyText": "Remember, you never want to do \"real work\" in a constructor, even this private TestConfiguration(). If you need to manipulate objects, configure, setup credentials -- this could be done in a factory method.", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:47:29Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/TestConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+\n+/**\n+ * This is a class to help configure Amplify and prepare other test resources\n+ * for Predictions integration tests.\n+ */\n+final class TestConfiguration {\n+\n+    private static final String AMPLIFY_CONFIGURATION_IDENTIFIER = \"amplifyconfiguration\";\n+    private static final String AWS_CONFIGURATION_IDENTIFIER = \"awsconfiguration\";\n+\n+    private static TestConfiguration singleton;\n+\n+    private TestConfiguration() throws Exception {\n+        Context context = ApplicationProvider.getApplicationContext();\n+\n+        Amplify.addPlugin(new AWSPredictionsPlugin());\n+        configureAmplify(context);\n+        setUpCredentials(context);", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MjQ3NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403242475", "bodyText": "I think Roshan found out that the test process will try to load src/androidTest/res/raw/amplifyconfiguration.json, anyway. So, you can likely just use Amplify.configure(getApplicationContext()), as is.\nRegardless, I still am not sure about this getRawResourceId(...) utility, which shifts a resource loading error from compile-time, to runtime. It is possible to find out that file doesn't exist, and \"fail fast\" with a compile time error. To this, you'd just refer to com.amplifyframework.preditions.aws.test.R.raw.amplifyconfiguration, instead of looking up \"amplifyconfiguration\" dynamically through the Android APIs.", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:51:43Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/TestConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+\n+/**\n+ * This is a class to help configure Amplify and prepare other test resources\n+ * for Predictions integration tests.\n+ */\n+final class TestConfiguration {\n+\n+    private static final String AMPLIFY_CONFIGURATION_IDENTIFIER = \"amplifyconfiguration\";\n+    private static final String AWS_CONFIGURATION_IDENTIFIER = \"awsconfiguration\";\n+\n+    private static TestConfiguration singleton;\n+\n+    private TestConfiguration() throws Exception {\n+        Context context = ApplicationProvider.getApplicationContext();\n+\n+        Amplify.addPlugin(new AWSPredictionsPlugin());\n+        configureAmplify(context);\n+        setUpCredentials(context);\n+    }\n+\n+    /**\n+     * Process-wide configuration for the Storage instrumentation tests.\n+     * @return A TestConfiguration instance\n+     * @throws Exception if configuration fails\n+     */\n+    @NonNull\n+    static synchronized TestConfiguration configureIfNotConfigured() throws Exception {\n+        if (singleton == null) {\n+            singleton = new TestConfiguration();\n+        }\n+        return singleton;\n+    }\n+\n+    private static void configureAmplify(Context context) throws AmplifyException {\n+        // Obtain Amplify Configuration\n+        final int configId = Resources.getRawResourceId(context, AMPLIFY_CONFIGURATION_IDENTIFIER);\n+        AmplifyConfiguration configuration = AmplifyConfiguration.fromConfigFile(context, configId);", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3Mjk2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403272960", "bodyText": "I have this here so that a customer can try running the instrumentation test with multiple versions of amplifyconfiguration.json. All they need to do to test using a different configuration would be to change the name of constant variable inside TestConfiguration. In fact, I may actually require this feature myself to test different types of interpret configuration since CLI officially supports one interpret resource per project.", "author": "raphkim", "createdAt": "2020-04-03T19:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MjQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzNTcyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403835724", "bodyText": "Ah, gotcha, hm, that makes sense.\nTo test multiple configs, we'll either have to build some teardown in to the Amplify facade, or not use it, in tests. (This way, we're not \"stuck\" with whatever the first instance of new PredictionsCategory() happens to have, in that static field inside of Amplify.) We could just rework our tests to go against the Category, directly. This would make our tests much more of real-life \"integration\" tests.\nIn other words, like:\nPredictionsCategory predictions = new PredictionsCategory();\npredictions.addPlugin(new AWSPredictionsPlugin());\nCategoryConfiguration predictionsConfiguration =\n    AmplifyConfiguration.fromConfigFile(context, Resources.getRawResourceId(\".../path/...\"))\n        .forCategoryType(CategoryType.PREDICTIONS);\npredictions.configure(predictionsConfiguration, context);\npredictions.initialize(context);", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MjQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MzQxMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403243413", "bodyText": "An escape hatch for Predictions, which gives direct access to\nthe AWS service APIs. Use this to perform low-level operations\nthat are not exposed by Amplify, directly.", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:53:29Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/AWSPredictionsEscapeHatch.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amazonaws.services.comprehend.AmazonComprehendClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * An escape hatch to give low-level access to the AWS SDK.", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NzQ4OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403247488", "bodyText": "You can use a \"provider delegate\" to lookup the configuration, in a lazy way, later. This would allow you to construct the service object at the same time the plugin is constructed. Sometime after that, configure() is complete, and the configuration object is available. Even later, when someone invokes a behavior, the service would call back on the configuration provider delegate, to figure out what to do.\npublic final class AWSPredictionsPlugin ... {\n    private final AWSPredictionsService predictionsService;\n    ...\n    public AWSPredictionsPlugin(...) {\n        predictionsService = new AWSPredictionsService(() -> configuration);\n    }\n    ...\n}\n\nfinal class AWSPredictionsService {\n    private final ConfigurationProvider configProvider;\n\n    AWSPredictionsService(ConfigurationProvider configProvider) {\n        this.configProvider = configProvider;\n    }\n\n    public InterpretResult interpret(....) {\n        // Oh alirght, I need some config ....\n        long lazyLoadedConfigValue = configProvider.getConfiguration().getSomeValue();\n        ...\n    }\n    ...\n    @FunctionalInterface\n    interface ConfigurationProvider {\n        AWSPredictionsPluginConfiguration getConfiguration();\n    }\n}", "author": "jamesonwilliams", "createdAt": "2020-04-03T18:59:11Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/AWSPredictionsPlugin.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.PredictionsPlugin;\n+import com.amplifyframework.predictions.aws.operation.AWSInterpretOperation;\n+import com.amplifyframework.predictions.aws.request.AWSComprehendRequest;\n+import com.amplifyframework.predictions.aws.service.AWSPredictionsService;\n+import com.amplifyframework.predictions.operation.InterpretOperation;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A plugin for the predictions category.\n+ */\n+public final class AWSPredictionsPlugin extends PredictionsPlugin<AWSPredictionsEscapeHatch> {\n+    private static final String AWS_PREDICTIONS_PLUGIN_KEY = \"awsPredictionsPlugin\";\n+\n+    private final ExecutorService executorService;\n+\n+    private AWSPredictionsPluginConfiguration configuration;\n+    private AWSPredictionsService predictionsService;\n+\n+    /**\n+     * Constructs the AWS Predictions Plugin initializing the executor service.\n+     */\n+    public AWSPredictionsPlugin() {\n+        this.executorService = Executors.newCachedThreadPool();\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return AWS_PREDICTIONS_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(JSONObject pluginConfiguration, @NonNull Context context) throws PredictionsException {\n+        this.configuration = AWSPredictionsPluginConfiguration.fromJson(pluginConfiguration);\n+        this.predictionsService = new AWSPredictionsService(configuration);", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODI5MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403248291", "bodyText": "--> 2020", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:00:07Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/AWSPredictionsPluginConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3MzI4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403273281", "bodyText": "darn", "author": "raphkim", "createdAt": "2020-04-03T19:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDQyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403250420", "bodyText": "Do you need to do this, actually?\nIf there is no config, can we just use sane defaults for everything? Maybe we don't want to choose a default region. Or can we?", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:02:58Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/AWSPredictionsPluginConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.configuration.AWSInterpretConfiguration;\n+\n+import com.amazonaws.regions.Region;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configuration options for the {@link AWSPredictionsPlugin}.\n+ * Contains settings for different types of predictions operations\n+ * as well as their network policy.\n+ */\n+public final class AWSPredictionsPluginConfiguration {\n+    private final Region defaultRegion;\n+    private final NetworkPolicy defaultNetworkPolicy;\n+    private final AWSInterpretConfiguration interpretConfiguration;\n+\n+    private AWSPredictionsPluginConfiguration(\n+            Region defaultRegion,\n+            AWSInterpretConfiguration interpretConfiguration\n+    ) {\n+        this.defaultRegion = defaultRegion;\n+        this.defaultNetworkPolicy = NetworkPolicy.AUTO;\n+        this.interpretConfiguration = interpretConfiguration;\n+    }\n+\n+    /**\n+     * Constructs an instance of {@link AWSPredictionsPluginConfiguration} from\n+     * the plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the configuration object for AWS Predictions Plugin\n+     * @throws PredictionsException if configuration is missing or malformed\n+     */\n+    @NonNull\n+    public static AWSPredictionsPluginConfiguration fromJson(JSONObject configurationJson) throws PredictionsException {\n+        if (configurationJson == null) {\n+            throw new PredictionsException(", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDIxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403784219", "bodyText": "I will require it for now, since predictions resources need to be added via CLI anyways", "author": "raphkim", "createdAt": "2020-04-06T00:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDg1OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403250859", "bodyText": "(No longer need the suppresssion.)", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:03:31Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/EntityTypeAdapter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.EntityType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert AWS Comprehend's entity type\n+ * into Amplify-compatible data structure\n+ * (i.e. {@link EntityType}).\n+ */\n+public final class EntityTypeAdapter {\n+    @SuppressWarnings(\"checkstyle:all\") private EntityTypeAdapter() {}", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTQ5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403251493", "bodyText": "You could build an enum for the comprehend keys, too. Then, this adapter logic would map from one enum type, to another.", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:04:17Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/EntityTypeAdapter.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.EntityType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert AWS Comprehend's entity type\n+ * into Amplify-compatible data structure\n+ * (i.e. {@link EntityType}).\n+ */\n+public final class EntityTypeAdapter {\n+    @SuppressWarnings(\"checkstyle:all\") private EntityTypeAdapter() {}\n+\n+    /**\n+     * Converts the entity type string returned by AWS Comprehend\n+     * into a format supported by Amplify Predictions.\n+     * @param entity Entity type returned by AWS Comprehend\n+     * @return Amplify's {@link EntityType} enum\n+     */\n+    @NonNull\n+    public static EntityType fromComprehend(@NonNull String entity) {", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3OTU2Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403679563", "bodyText": "that sounds excessive, considering that there is no performance benefits to doing that and doesn't make it more readable necessarily.", "author": "raphkim", "createdAt": "2020-04-05T10:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMDU4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403830585", "bodyText": "Yea, it's a little subjective I guess. But I appreciate your reasoning. Sounds good!", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1Mjk3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403252971", "bodyText": "Same deal - worth it to enum the comprehend strings, and have the adapter switch form one enum to another?", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:07:20Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/SentimentTypeAdapter.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.SentimentType;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility to convert AWS Comprehend's sentiment type\n+ * into Amplify-compatible data structure\n+ * (i.e. {@link SentimentType}).\n+ */\n+public final class SentimentTypeAdapter {\n+    @SuppressWarnings(\"checkstyle:all\") private SentimentTypeAdapter() {}\n+\n+    /**\n+     * Converts the sentiment string returned by AWS Comprehend\n+     * into a format supported by Amplify Predictions.\n+     * @param sentiment Sentiment type returned by AWS Comprehend\n+     * @return Amplify's {@link SentimentType} enum\n+     */\n+    @NonNull\n+    public static SentimentType fromComprehend(@NonNull String sentiment) {", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MzczMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403253732", "bodyText": "Possible, add a LOG.info(...) inside here \"using defaults...\". User might have accidentally written like interPret or something, and be confused that their badly-spec'd config isn't getting read in.\nAlso, consider enum-ing all the valid config keys:\nenum ConfigKey {\n    INTERPRET(\"interpet\"),\n    ...\n}\n\netc.\nThis would allow you to validate that nothing weird snuck in, e.g.\nfor (jsonKey : jsonKeys) {\n    try {\n        ConfigKey vaildKey = ConfigKey.lookup(jsonKey);\n    } catch (InvalidArgumentException noSuchConfigKey) {\n        // Tell user what the valid config keys are ...\n        // And kindly ask them to refrain from using other ones ...\n    }\n}", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:08:56Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/AWSInterpretConfiguration.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.configuration;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.aws.NetworkPolicy;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configures the behavior for text interpretation.\n+ */\n+public final class AWSInterpretConfiguration {\n+\n+    private static final InterpretType DEFAULT_INTERPRET_TYPE = InterpretType.ALL;\n+    private static final NetworkPolicy DEFAULT_NETWORK_POLICY = NetworkPolicy.AUTO;\n+\n+    private final InterpretType type;\n+    private final NetworkPolicy networkPolicy;\n+\n+    private AWSInterpretConfiguration(\n+            InterpretType type,\n+            NetworkPolicy networkPolicy\n+    ) {\n+        this.type = type;\n+        this.networkPolicy = networkPolicy;\n+    }\n+\n+    /**\n+     * Construct an instance of {@link AWSInterpretConfiguration} from\n+     * plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the interpret configuration\n+     * @throws JSONException if interpret configuration is malformed\n+     */\n+    @NonNull\n+    public static AWSInterpretConfiguration fromJson(@NonNull JSONObject configurationJson) throws JSONException {\n+        // Use default values if the section is missing\n+        if (!configurationJson.has(\"interpret\")) {", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0OTEzOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403749139", "bodyText": "I think having non-standard key snuck in there for no-op comment purpose is fine.", "author": "raphkim", "createdAt": "2020-04-05T19:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MzczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NjE5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403256190", "bodyText": "Is it possible to perform some of these network operations in parallel by passing simultaneously to executorService, and then creating a synchronization barrier that awaits the completion of all of them?", "author": "jamesonwilliams", "createdAt": "2020-04-03T19:13:54Z", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSComprehendService.java", "diffHunk": "@@ -0,0 +1,338 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.service;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.adapter.EntityTypeAdapter;\n+import com.amplifyframework.predictions.aws.adapter.SentimentTypeAdapter;\n+import com.amplifyframework.predictions.aws.adapter.SpeechTypeAdapter;\n+import com.amplifyframework.predictions.aws.configuration.AWSInterpretConfiguration;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.EntityType;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.models.TargetText;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.util.UserAgent;\n+\n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.services.comprehend.AmazonComprehendClient;\n+import com.amazonaws.services.comprehend.model.DetectDominantLanguageRequest;\n+import com.amazonaws.services.comprehend.model.DetectDominantLanguageResult;\n+import com.amazonaws.services.comprehend.model.DetectEntitiesRequest;\n+import com.amazonaws.services.comprehend.model.DetectEntitiesResult;\n+import com.amazonaws.services.comprehend.model.DetectKeyPhrasesRequest;\n+import com.amazonaws.services.comprehend.model.DetectKeyPhrasesResult;\n+import com.amazonaws.services.comprehend.model.DetectSentimentRequest;\n+import com.amazonaws.services.comprehend.model.DetectSentimentResult;\n+import com.amazonaws.services.comprehend.model.DetectSyntaxRequest;\n+import com.amazonaws.services.comprehend.model.DetectSyntaxResult;\n+import com.amazonaws.services.comprehend.model.DominantLanguage;\n+import com.amazonaws.services.comprehend.model.PartOfSpeechTag;\n+import com.amazonaws.services.comprehend.model.SentimentScore;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Predictions service for performing text interpretation.\n+ */\n+final class AWSComprehendService {\n+\n+    private final AmazonComprehendClient comprehend;\n+    private final AWSInterpretConfiguration configuration;\n+\n+    AWSComprehendService(@Nullable AWSInterpretConfiguration configuration) throws PredictionsException {\n+        this.comprehend = createComprehendClient();\n+        this.configuration = configuration;\n+    }\n+\n+    private AmazonComprehendClient createComprehendClient() {\n+        AWSCredentialsProvider credentialsProvider = AWSMobileClient.getInstance();\n+        ClientConfiguration configuration = new ClientConfiguration();\n+        configuration.setUserAgent(UserAgent.string());\n+        return new AmazonComprehendClient(credentialsProvider, configuration);\n+    }\n+\n+    void comprehend(\n+            @NonNull String text,\n+            @NonNull Consumer<InterpretResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        try {\n+            // First obtain the dominant language to begin analysis\n+            final Language dominantLanguage = fetchPredominantLanguage(text);\n+            final LanguageType language = dominantLanguage.getValue();\n+\n+            // Actually analyze text in the context of dominant language\n+            final Sentiment sentiment = fetchSentiment(text, language);\n+            final List<KeyPhrase> keyPhrases = fetchKeyPhrases(text, language);\n+            final List<Entity> entities = fetchEntities(text, language);\n+            final List<Syntax> syntax = fetchSyntax(text, language);", "originalCommit": "8dfc7a3c904736039db2cc32a30c021f7ad33a2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3OTc5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403679796", "bodyText": "That... is actually exactly what I should have been going for haha", "author": "raphkim", "createdAt": "2020-04-05T10:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NjE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NzE1NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r403787155", "bodyText": "on second thought, I think I'll revisit this in the future. This may require each component to be made into its own predictions service method, and I want to see how the final Predictions service with all of the APIs implemented looks before I do that.", "author": "raphkim", "createdAt": "2020-04-06T01:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1NjE5MA=="}], "type": "inlineReview"}, {"oid": "0648ed359225976b2fd857b0aae8a637134bf497", "url": "https://github.com/aws-amplify/amplify-android/commit/0648ed359225976b2fd857b0aae8a637134bf497", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into interpret-aws", "committedDate": "2020-04-05T01:25:17Z", "type": "commit"}, {"oid": "3c0d9b5ba0456dd56079d9b999e9a3dc042fdeb8", "url": "https://github.com/aws-amplify/amplify-android/commit/3c0d9b5ba0456dd56079d9b999e9a3dc042fdeb8", "message": "Apply small suggestions", "committedDate": "2020-04-06T01:02:22Z", "type": "commit"}, {"oid": "3c0d9b5ba0456dd56079d9b999e9a3dc042fdeb8", "url": "https://github.com/aws-amplify/amplify-android/commit/3c0d9b5ba0456dd56079d9b999e9a3dc042fdeb8", "message": "Apply small suggestions", "committedDate": "2020-04-06T01:02:22Z", "type": "forcePushed"}, {"oid": "6f0578f153b423306565b317e772f47a35d4ad39", "url": "https://github.com/aws-amplify/amplify-android/commit/6f0578f153b423306565b317e772f47a35d4ad39", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into interpret-aws", "committedDate": "2020-04-06T23:38:00Z", "type": "commit"}, {"oid": "5971305d4124c9a8fbd68e1625e33fa2bc4e853d", "url": "https://github.com/aws-amplify/amplify-android/commit/5971305d4124c9a8fbd68e1625e33fa2bc4e853d", "message": "checkstyle + naming", "committedDate": "2020-04-06T23:43:34Z", "type": "commit"}, {"oid": "5971305d4124c9a8fbd68e1625e33fa2bc4e853d", "url": "https://github.com/aws-amplify/amplify-android/commit/5971305d4124c9a8fbd68e1625e33fa2bc4e853d", "message": "checkstyle + naming", "committedDate": "2020-04-06T23:43:34Z", "type": "forcePushed"}, {"oid": "a07239c9ee7c6d3ddc81bd913ed570f1cbaab3cf", "url": "https://github.com/aws-amplify/amplify-android/commit/a07239c9ee7c6d3ddc81bd913ed570f1cbaab3cf", "message": "Return percent confidence score", "committedDate": "2020-04-07T02:45:00Z", "type": "commit"}, {"oid": "bf63d3378db35df45c83b592e818befe54ab5b42", "url": "https://github.com/aws-amplify/amplify-android/commit/bf63d3378db35df45c83b592e818befe54ab5b42", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into interpret-aws", "committedDate": "2020-04-07T19:02:39Z", "type": "commit"}, {"oid": "83b80773c5debfb510576bc31abe23a3ae9a8a1b", "url": "https://github.com/aws-amplify/amplify-android/commit/83b80773c5debfb510576bc31abe23a3ae9a8a1b", "message": "Minor change", "committedDate": "2020-04-07T19:12:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MDM4NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r405060385", "bodyText": "Can we update this to use \"the new way\"? OR want to do it in a different PR?", "author": "jamesonwilliams", "createdAt": "2020-04-07T19:31:36Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsInterpretTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions interpret delivers a non-null result\n+ * for valid input.\n+ */\n+public final class AWSPredictionsInterpretTest {\n+\n+    private static SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Amplify and Predictions plugin before the tests.\n+     * @throws Exception if configuration fails\n+     */\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+        TestConfiguration.configureIfNotConfigured();", "originalCommit": "83b80773c5debfb510576bc31abe23a3ae9a8a1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NzE0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r405087148", "bodyText": "I'll follow up in the next PR", "author": "raphkim", "createdAt": "2020-04-07T20:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MDM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MjE5OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r405062198", "bodyText": "I ended up removing these versions of the factory in the other synchronous utils. I want to make it inconvenient for tests to call Amplify, actually (since it will pollute state.) If we require that an PredictionsCategoryBehavior be supplied in order to constrcut SyncrhonousPredictions, then the caller will be guided to use the associated TestPredictionsCategory.create() (or whatever.)", "author": "jamesonwilliams", "createdAt": "2020-04-07T19:34:54Z", "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousPredictions.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils.sync;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsCategoryBehavior;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Await;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A utility to perform synchronous calls to the {@link PredictionsCategory}.\n+ * This code is not well suited for production use, but is useful in test\n+ * code, where we want to make a series of sequential assertions after\n+ * performing various operations.\n+ */\n+public final class SynchronousPredictions {\n+    private static final long PREDICTIONS_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(10);\n+\n+    private final PredictionsCategoryBehavior predictions;\n+\n+    private SynchronousPredictions(PredictionsCategoryBehavior predictions) {\n+        this.predictions = predictions;\n+    }\n+\n+    /**\n+     * Gets an instance of the Synchronous Predictions utility that\n+     * delegates tasks to Amplify.Predictions.\n+     * @return new instance of Synchronous Predictions\n+     */\n+    @NonNull\n+    public static synchronized SynchronousPredictions delegatingToAmplify() {", "originalCommit": "83b80773c5debfb510576bc31abe23a3ae9a8a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2Mjg5MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r405062891", "bodyText": "Can we move over to TestPredictionsCategory factory style?", "author": "jamesonwilliams", "createdAt": "2020-04-07T19:36:14Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/TestConfiguration.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+\n+/**\n+ * This is a class to help configure Amplify and prepare other test resources\n+ * for Predictions integration tests.\n+ */\n+final class TestConfiguration {", "originalCommit": "83b80773c5debfb510576bc31abe23a3ae9a8a1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NjYyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r405086625", "bodyText": "Yes! I think your refactored logic is way cleaner and makes more sense.", "author": "raphkim", "createdAt": "2020-04-07T20:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2Mjg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzYxMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/346#discussion_r405063613", "bodyText": "Note: if you get this to a fresh PredictionsCategory each time, then you can make it as @Before public void setup(), which will help guarantee fresh state for each individual test.\n(Once we get rid of the process singletons, we should kill all of the @BeforeClass. Yea, they might be a little more performance than doing setup before each individual test, but at the cost of potential cross-pollution of the individual tests.)", "author": "jamesonwilliams", "createdAt": "2020-04-07T19:37:46Z", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsInterpretTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.models.Entity;\n+import com.amplifyframework.predictions.models.KeyPhrase;\n+import com.amplifyframework.predictions.models.Language;\n+import com.amplifyframework.predictions.models.LanguageType;\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.models.SpeechType;\n+import com.amplifyframework.predictions.models.Syntax;\n+import com.amplifyframework.predictions.options.InterpretOptions;\n+import com.amplifyframework.predictions.result.InterpretResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests that Predictions interpret delivers a non-null result\n+ * for valid input.\n+ */\n+public final class AWSPredictionsInterpretTest {\n+\n+    private static SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Amplify and Predictions plugin before the tests.\n+     * @throws Exception if configuration fails\n+     */\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {", "originalCommit": "83b80773c5debfb510576bc31abe23a3ae9a8a1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}