{"pr_number": 1027, "pr_title": "fix(datastore) release startStopSemaphore when start returns, not when API sync completes", "pr_createdAt": "2020-12-05T16:00:32Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/1027", "timeline": [{"oid": "c74dac33d6b4c55ce046be5e145d26a802293599", "url": "https://github.com/aws-amplify/amplify-android/commit/c74dac33d6b4c55ce046be5e145d26a802293599", "message": "fix(datastore) release startStopSemaphore after storage observer inits, not when API sync completes", "committedDate": "2020-12-05T15:23:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTQzMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536881431", "bodyText": "The goal of including \"target\" was to distinguish between what we want the orchestrator to be doing, and what it actually is doing right now. apiSyncEnabled I think means \"should be enabled,\" but it's more ambiguous of a name.\nSame  deal with the enum, it was an over-engineered Boolean for the sake of having clearly labeled semantics to the true/false.", "author": "jamesonwilliams", "createdAt": "2020-12-05T19:50:49Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -62,7 +60,7 @@\n     private final MutationProcessor mutationProcessor;\n     private final QueryPredicateProvider queryPredicateProvider;\n     private final StorageObserver storageObserver;\n-    private final Supplier<Mode> targetMode;\n+    private final boolean apiSyncEnabled;", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzExNDY0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r537114642", "bodyText": "I was initially a bit confused by targetMode.   I first had thought it was the end state for any transition and would only differ from currentMode if a transition was in progress, but that is not the case.  targetMode never changes.  For example, during a transition from SYNC_VIA_API to LOCAL_ONLY (due to loss of internet connection), the targetMode is still SYNC_VIA_API.  It is more of a penultimate target mode - the desired mode in the absence of errors.\nYou do have a good counterpoint though that using an enum instead of a boolean is a little better semantically.\napiSyncEnabled doesn't seem ambiguous to me, but maybe that's just because I wrote it :).\nThinking further though - I'm about to add in logic to retry after the orchestrator stops,  However, we only want to retry if it stopped due to an internal error, not if the customer explicitly calls stop().   I'm going to need some state to distinguish between these cases.\nHere's what I'm thinking now:\n\nSwitch back to using the targetMode enum, instead the apiSyncEnabled boolean I added.\nWhen customer calls start(), set targetMode to LOCAL_ONLY or SYNC_VIA_API.  This would be passed in as a parameter to Orchestrator.start().\ntargetMode will no longer be set on Orchestrator initialization.\nWhen customer calls stop(), set targetMode to STOPPED\n\nOnce retry logic is added, the purpose of targetMode will be more clear.", "author": "richardmcclellan", "createdAt": "2020-12-06T20:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTgxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536881819", "bodyText": "You could theoretically add the lock acquisition logic into a doOnSubscribe, to get visual symmetry with the doFinally? This is an idle thought, not a recommendation.", "author": "jamesonwilliams", "createdAt": "2020-12-05T19:53:04Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -145,169 +143,86 @@ public Orchestrator(\n     }\n \n     /**\n-     * Checks if the orchestrator is running in the desired target state.\n-     * @return true if so, false otherwise.\n+     * Start the orchestrator.\n+     * @return A completable which emits success when the orchestrator has transitioned to LOCAL_ONLY (synchronously)\n+     *      and started (asynchronously) the transition to SYNC_VIA_API, if an API is available.\n      */\n-    public boolean isStarted() {\n-        return ObjectsCompat.equals(targetMode.get(), currentMode.get());\n+    public synchronized Completable start() {\n+        return performSynchronized(Completable.fromAction(this::transitionToStarted));\n     }\n \n     /**\n-     * Checks if the orchestrator is stopped.\n-     * @return true if so, false otherwise.\n-     */\n-    @SuppressWarnings(\"unused\")\n-    public boolean isStopped() {\n-        return Mode.STOPPED.equals(currentMode.get());\n-    }\n-\n-    /**\n-     * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n-     * @throws DataStoreException on failure to aquire start stop lock.\n+     * Stop the orchestrator.\n+     * @return A completable which emits success when orchestrator stops\n      */\n-    public synchronized void start() throws DataStoreException {\n-        if (tryAcquireStartStopLock(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n-            if (isStarted()) {\n-                startStopSemaphore.release();\n-                return;\n-            }\n-            disposables.add(transitionCompletable()\n-                .doOnSubscribe(subscriber -> {\n-                    LOG.info(\"Starting the orchestrator.\");\n-                })\n-                .doOnComplete(() -> {\n-                    LOG.info(\"Orchestrator completed a transition\");\n-                    if (isStarted()) {\n-                        Amplify.Hub.publish(HubChannel.DATASTORE,\n-                            HubEvent.create(DataStoreChannelEventName.READY));\n-                    }\n-                })\n-                .doOnError(failure -> {\n-                    LOG.warn(\"Failed to start orchestrator.\", failure);\n-                })\n-                .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n-                .doFinally(startStopSemaphore::release)\n-                .subscribeOn(startStopScheduler)\n-                .subscribe()\n-            );\n-        } else {\n-            throw new DataStoreException(\"Unable to acquire orchestrator lock. Transition currently in \" +\n-                    \"progress.\", \"Retry your request\");\n-        }\n+    public synchronized Completable stop() {\n+        return performSynchronized(transitionToStopped());\n     }\n \n-    private boolean tryAcquireStartStopLock(long opTimeout, TimeUnit timeUnit) {\n+    private Completable performSynchronized(Completable completable) {\n         boolean permitAvailable = startStopSemaphore.availablePermits() > 0;\n         LOG.debug(\"Attempting to acquire lock. Permits available = \" + permitAvailable);\n         try {\n-            if (!startStopSemaphore.tryAcquire(opTimeout, timeUnit)) {\n-                LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");\n-                return false;\n+            if (!startStopSemaphore.tryAcquire(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n+                return Completable.error(new DataStoreException(\"Timed out acquiring lock.\",\n+                        \"Retry your request.\"));\n             }\n         } catch (InterruptedException exception) {\n-            return false;\n+            return Completable.error(new DataStoreException(\"Interrupted while acquiring lock.\",\n+                    \"Retry your request.\"));\n         }\n         LOG.debug(\"Lock acquired.\");\n-        return true;\n+        return completable.doFinally(() -> {", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkxNzU1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536917553", "bodyText": "I did actually try something like that, and agree the visual symmetry would be nice :). It didn't work though, I was getting timeout's trying to acquire the lock.  I'm pretty sure the lock acquisition has to happen before the subscribing to the Completable.", "author": "richardmcclellan", "createdAt": "2020-12-06T00:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjMxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882317", "bodyText": "Should we have transition states for all of the transitions? Does it matter?\n(Stopped) -> (Starting local mode) -> (Local model) -> (Starting API sync) -> (API sync enabled)\n\nand:\n(API sync enabled) -> (stopping api sync) -> (local mode) -> (stopping local mode) -> (Stopped)\n\nReally, this is a state machine. The transitions I list above are only one possible (perhaps even unlikely) traversal through the states.", "author": "jamesonwilliams", "createdAt": "2020-12-05T19:56:23Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -145,169 +143,86 @@ public Orchestrator(\n     }\n \n     /**\n-     * Checks if the orchestrator is running in the desired target state.\n-     * @return true if so, false otherwise.\n+     * Start the orchestrator.\n+     * @return A completable which emits success when the orchestrator has transitioned to LOCAL_ONLY (synchronously)\n+     *      and started (asynchronously) the transition to SYNC_VIA_API, if an API is available.\n      */\n-    public boolean isStarted() {\n-        return ObjectsCompat.equals(targetMode.get(), currentMode.get());\n+    public synchronized Completable start() {\n+        return performSynchronized(Completable.fromAction(this::transitionToStarted));\n     }\n \n     /**\n-     * Checks if the orchestrator is stopped.\n-     * @return true if so, false otherwise.\n-     */\n-    @SuppressWarnings(\"unused\")\n-    public boolean isStopped() {\n-        return Mode.STOPPED.equals(currentMode.get());\n-    }\n-\n-    /**\n-     * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n-     * @throws DataStoreException on failure to aquire start stop lock.\n+     * Stop the orchestrator.\n+     * @return A completable which emits success when orchestrator stops\n      */\n-    public synchronized void start() throws DataStoreException {\n-        if (tryAcquireStartStopLock(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n-            if (isStarted()) {\n-                startStopSemaphore.release();\n-                return;\n-            }\n-            disposables.add(transitionCompletable()\n-                .doOnSubscribe(subscriber -> {\n-                    LOG.info(\"Starting the orchestrator.\");\n-                })\n-                .doOnComplete(() -> {\n-                    LOG.info(\"Orchestrator completed a transition\");\n-                    if (isStarted()) {\n-                        Amplify.Hub.publish(HubChannel.DATASTORE,\n-                            HubEvent.create(DataStoreChannelEventName.READY));\n-                    }\n-                })\n-                .doOnError(failure -> {\n-                    LOG.warn(\"Failed to start orchestrator.\", failure);\n-                })\n-                .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n-                .doFinally(startStopSemaphore::release)\n-                .subscribeOn(startStopScheduler)\n-                .subscribe()\n-            );\n-        } else {\n-            throw new DataStoreException(\"Unable to acquire orchestrator lock. Transition currently in \" +\n-                    \"progress.\", \"Retry your request\");\n-        }\n+    public synchronized Completable stop() {\n+        return performSynchronized(transitionToStopped());\n     }\n \n-    private boolean tryAcquireStartStopLock(long opTimeout, TimeUnit timeUnit) {\n+    private Completable performSynchronized(Completable completable) {\n         boolean permitAvailable = startStopSemaphore.availablePermits() > 0;\n         LOG.debug(\"Attempting to acquire lock. Permits available = \" + permitAvailable);\n         try {\n-            if (!startStopSemaphore.tryAcquire(opTimeout, timeUnit)) {\n-                LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");\n-                return false;\n+            if (!startStopSemaphore.tryAcquire(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n+                return Completable.error(new DataStoreException(\"Timed out acquiring lock.\",\n+                        \"Retry your request.\"));\n             }\n         } catch (InterruptedException exception) {\n-            return false;\n+            return Completable.error(new DataStoreException(\"Interrupted while acquiring lock.\",\n+                    \"Retry your request.\"));\n         }\n         LOG.debug(\"Lock acquired.\");\n-        return true;\n+        return completable.doFinally(() -> {\n+            startStopSemaphore.release();\n+            LOG.debug(\"Lock released.\");\n+        });\n     }\n \n-    private Completable transitionCompletable() {\n-        Mode current = currentMode.get();\n-        Mode target = targetMode.get();\n-        if (ObjectsCompat.equals(current, target)) {\n-            return Completable.complete();\n-        }\n-        LOG.info(String.format(Locale.US,\n-            \"DataStore orchestrator transitioning states. \" +\n-                \"Current mode = %s, target mode = %s.\", current, target\n-        ));\n-\n-        switch (target) {\n+    private void transitionToStarted() throws DataStoreException {\n+        switch (currentMode.get()) {\n             case STOPPED:\n-                return transitionToStopped(current);\n+                LOG.info(\"Starting the orchestrator.\");\n+                startObservingStorageChanges();\n+                if (apiSyncEnabled) {\n+                    startApiSync();\n+                } else {\n+                    LOG.info(\"Started the orchestrator in local only mode.\");\n+                    publishReadyEvent();\n+                }\n+                break;\n             case LOCAL_ONLY:\n-                return transitionToLocalOnly(current);\n+                if (apiSyncEnabled) {\n+                    startApiSync();\n+                }\n+                break;\n+            case SYNC_STARTING:\n             case SYNC_VIA_API:\n-                return transitionToApiSync(current);\n             default:\n-                return unknownMode(target);\n+                break;\n         }\n     }\n \n-    /**\n-     * Stop the orchestrator.\n-     * @return A completable which emits success when orchestrator stops\n-     */\n-    public synchronized Completable stop() {\n+    private Completable transitionToStopped() {\n         LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentMode.get().name());\n-        if (tryAcquireStartStopLock(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n-            disposables.clear();\n-            return transitionToStopped(currentMode.get())\n-                .subscribeOn(startStopScheduler)\n-                .doFinally(startStopSemaphore::release);\n-        } else {\n-            return Completable.error(new DataStoreException(\"Unable to acquire orchestrator lock. \" +\n-                                                                \"Transition currently in progress.\",\n-                                                            \"Retry your operation\"));\n-        }\n-\n-    }\n-\n-    private static Completable unknownMode(Mode mode) {\n-        return Completable.error(new DataStoreException(\n-            \"Orchestrator state machine made reference to unknown mode = \" + mode.name(),\n-            AmplifyException.REPORT_BUG_TO_AWS_SUGGESTION\n-        ));\n-    }\n-\n-    private Completable transitionToStopped(Mode current) {\n-        switch (current) {\n+        disposables.clear();\n+        switch (currentMode.get()) {\n             case SYNC_VIA_API:\n+            case SYNC_STARTING:", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMDY0MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536920641", "bodyText": "I did consider adding the other 3 transitions:\n\nSTOPPED -> LOCAL_ONLY\nSYNC_VIA_API -> LOCAL_ONLY\nLOCAL_ONLY -> STOPPED\n\nUltimately I didn't because all of these transitions are synchronized with the semaphore, so there's no benefit of tracking the state.\nI did have to add SYNC_STARTING (LOCAL_ONLY -> SYNC_VIA_API), since this transition is no longer locked with the semaphore, to ensure the API sync wouldn't ever be started multiple times.", "author": "richardmcclellan", "createdAt": "2020-12-06T00:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NTQ4OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r537685488", "bodyText": "Looking closer at this, when the state was SYNC_STARTING or SYNC_VIA_API, I was always doing the same thing, so I don't actually need both.   I've gotten rid of SYNC_STARTING, and just updated logic to set the state to SYNC_VIA_API as soon as it starts to sync, rather than at the end of sync.  That way, it will still prevent sync from starting more than once.", "author": "richardmcclellan", "createdAt": "2020-12-07T17:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjQwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882405", "bodyText": "Hm, yea! Good fix. This looks bad.", "author": "jamesonwilliams", "createdAt": "2020-12-05T19:56:58Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -319,7 +234,8 @@ private void startObservingStorageChanges() {\n                 throw new TimeoutException(\"Timed out while preparing local-only mode.\");\n             }\n         } catch (Throwable throwable) {\n-            LOG.warn(\"Failed to start observing storage changes.\", throwable);", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjYxMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882611", "bodyText": "Maybe we should rename this now. Formerly, it was kind of a component API between the Orchestrator component and its consumer. Now, it is more like a state internal enumeration of the possible states.\nMaybe this is just a State, now?", "author": "jamesonwilliams", "createdAt": "2020-12-05T19:58:27Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -411,7 +344,7 @@ private Completable stopApiSync() {\n     }\n \n     /**\n-     * The mode of operation for the Orchestrator's synchronization logic.\n+     * The current state of the Orchestrator.\n      */\n     public enum Mode {", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzExNDgzMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r537114831", "bodyText": "I agree!  I think I'll rename this to State, and rename the instances to currentState and targetState.", "author": "richardmcclellan", "createdAt": "2020-12-06T20:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4Mjc1OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882759", "bodyText": "(Comment looks out of date.)", "author": "jamesonwilliams", "createdAt": "2020-12-05T19:59:23Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -80,7 +79,7 @@ public void setup() throws AmplifyException {\n \n         // SUBSCRIPTIONS_ESTABLISHED indicates that the orchestrator is up and running.", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3NzcwNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r537677706", "bodyText": "The preventConcurrentStateTransitions test waits for orchestratorInitObserver before verifying that query is called once:\nverify(mockApi, times(1)).query(any(), any(), any());\n\nSince we are verifying that the sync query happened, it makes sense to wait for SYNC_QUERIES_READY, rather than SUBSCRIPTIONS_ESTABLISHED.  So, this change is more of a \"fix\".  My change to not release the semaphore sooner just uncovered the bug.\nI will update the comment though!", "author": "richardmcclellan", "createdAt": "2020-12-07T17:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4Mjc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjkxMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882912", "bodyText": "maybe TestObserver<Void> observer = orchestrator.start().test()? I think those auto-dispose, which is cool.", "author": "jamesonwilliams", "createdAt": "2020-12-05T20:00:15Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -122,7 +121,7 @@ public void setup() throws AmplifyException {\n     @Test\n     public void itemsPlacedInStorageArePublishedToNetwork() throws AmplifyException {\n         // Arrange: orchestrator is running\n-        orchestrator.start();\n+        orchestrator.start().subscribe();", "originalCommit": "c74dac33d6b4c55ce046be5e145d26a802293599", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "url": "https://github.com/aws-amplify/amplify-android/commit/d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "message": "PR feedback", "committedDate": "2020-12-07T18:14:55Z", "type": "commit"}, {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "url": "https://github.com/aws-amplify/amplify-android/commit/d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "message": "PR feedback", "committedDate": "2020-12-07T18:14:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwODc2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r538008760", "bodyText": "Should this one happen on Schedulers.io() as above?", "author": "jamesonwilliams", "createdAt": "2020-12-08T03:36:15Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -235,47 +235,38 @@ private Completable initializeStorageAdapter(Context context) {\n         ));\n     }\n \n-    private void waitForInitialization(@NonNull Action onComplete, @NonNull Consumer<DataStoreException> onError) {\n-        Completable.create(emitter -> {\n-            categoryInitializationsPending.await();\n-            emitter.onComplete();\n-        })\n-                .timeout(LIFECYCLE_TIMEOUT_MS, TimeUnit.MILLISECONDS)\n-                .subscribeOn(Schedulers.io())\n-                .subscribe(\n-                        onComplete::call,\n-                        throwable -> onError.accept(new DataStoreException(\"Request failed because DataStore is not \" +\n-                                \"initialized.\", throwable, \"Retry your request.\"))\n-            );\n+    private Completable waitForInitialization() {\n+        return Completable.fromAction(() -> categoryInitializationsPending.await())\n+            .timeout(LIFECYCLE_TIMEOUT_MS, TimeUnit.MILLISECONDS)\n+            .subscribeOn(Schedulers.io())\n+            .doOnError(error -> LOG.error(\"DataStore initialization timed out.\", error));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start(@NonNull Action onComplete, @NonNull Consumer<DataStoreException> onError) {\n-        waitForInitialization(() -> {\n-            try {\n-                orchestrator.start();\n-            } catch (DataStoreException exception) {\n-                onError.accept(exception);\n-                return;\n-            }\n-            onComplete.call();\n-        }, onError);\n+        waitForInitialization()\n+            .andThen(orchestrator.start())\n+            .subscribeOn(Schedulers.io())\n+            .subscribe(\n+                onComplete::call,\n+                error -> onError.accept(new DataStoreException(\"Failed to start DataStore.\", error, \"Retry.\"))\n+            );\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop(@NonNull Action onComplete, @NonNull Consumer<DataStoreException> onError) {\n-        waitForInitialization(() -> orchestrator.stop()\n-                .subscribeOn(Schedulers.io())\n-                .subscribe(\n-                    onComplete::call,\n-                    error -> onError.accept(new DataStoreException(\"Failed to stop DataStore.\", error,\n-                            \"Retry your request.\"))), onError);\n+        waitForInitialization()", "originalCommit": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMTk3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r538521971", "bodyText": "I'm pretty sure it isn't needed since the waitForInitialization method switches to Schedulers.io(), but I just added it anyway just to be explicit, in case waitForInitialization ever changes.", "author": "richardmcclellan", "createdAt": "2020-12-08T15:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwODc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwOTc4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r538009782", "bodyText": "The existing test tags end with :test", "author": "jamesonwilliams", "createdAt": "2020-12-08T03:39:28Z", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -61,6 +62,8 @@\n  */\n @RunWith(RobolectricTestRunner.class)\n public final class OrchestratorTest {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");", "originalCommit": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "18914ccf94e0f10952207a27fbc5d6fb7005f844", "url": "https://github.com/aws-amplify/amplify-android/commit/18914ccf94e0f10952207a27fbc5d6fb7005f844", "message": "PR feedback", "committedDate": "2020-12-08T15:50:09Z", "type": "commit"}]}