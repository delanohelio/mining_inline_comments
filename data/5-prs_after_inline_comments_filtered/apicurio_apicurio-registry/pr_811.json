{"pr_number": 811, "pr_title": "Add support for clean Avro issue#643", "pr_createdAt": "2020-09-08T10:19:19Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/811", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMTIyOQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485801229", "bodyText": "Some of this logic is duplicated in JsonSchemaKafkaDeserializer I think - is there an opportunity to consolidate this?", "author": "EricWittmann", "createdAt": "2020-09-09T17:40:21Z", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaDeserializer.java", "diffHunk": "@@ -76,4 +82,40 @@ public U deserialize(String topic, byte[] data) {\n         int start = buffer.position() + buffer.arrayOffset();\n         return readData(schema, buffer, start, length);\n     }\n+\n+    @Override\n+    public U deserialize(String topic, Headers headers, byte[] data) {\n+        if (data == null) {\n+            return null;\n+        }\n+        // check if data contains the magic byte\n+        if (data[0] == MAGIC_BYTE){\n+            return deserialize(topic, data);\n+        } else {\n+            Long id = headerUtils.getGlobalId(headers);\n+            if (id == null) {\n+                String artifactId = headerUtils.getArtifactId(headers);\n+                Integer version = headerUtils.getVersion(headers);\n+                id = toGlobalId(artifactId, version);\n+            }\n+            T schema = getCache().getSchema(id);\n+            ByteBuffer buffer = ByteBuffer.wrap(data);\n+            int length = buffer.limit();\n+            int start = buffer.position();\n+            return readData(headers, schema, buffer, start, length);\n+        }\n+    }\n+\n+    protected Long toGlobalId(String artifactId, Integer version) {\n+        if (artifactId == null) {\n+            throw new RuntimeException(\"ArtifactId not found in headers.\");\n+        }\n+        if (version == null) {\n+            ArtifactMetaData amd = getClient().getArtifactMetaData(artifactId);\n+            return amd.getGlobalId();\n+        } else {\n+            VersionMetaData vmd = getClient().getArtifactVersionMetaData(version, artifactId);\n+            return vmd.getGlobalId();\n+        }\n+    }", "originalCommit": "05bb53ec2f2065798132e45449fca167e460722f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjI1Nw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485802257", "bodyText": "I think this should be apicurio.registry.use.headers to match the other config prop names.", "author": "EricWittmann", "createdAt": "2020-09-09T17:42:06Z", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerDe.java", "diffHunk": "@@ -48,12 +51,19 @@\n     public static final String REGISTRY_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.id-handler\";\n     public static final String REGISTRY_CONFLUENT_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.as-confluent\";\n \n+    // Constants for using headers to store the ids\n+    public static final String USE_HEADERS = \"apicurio.use.headers\";", "originalCommit": "05bb53ec2f2065798132e45449fca167e460722f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2MzczOQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486263739", "bodyText": "Agree", "author": "tagarr", "createdAt": "2020-09-10T11:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzY5NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485803695", "bodyText": "I was expecting the decision point to be a configuration property, not the presence of the Headers object - what determines which variant of serialize is called?", "author": "EricWittmann", "createdAt": "2020-09-09T17:44:51Z", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerializer.java", "diffHunk": "@@ -65,12 +74,18 @@ public AbstractKafkaSerializer(\n             String artifactId = getArtifactIdStrategy().artifactId(topic, isKey(), schema);\n             long id = getGlobalIdStrategy().findId(getClient(), artifactId, artifactType(), schema);\n             ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            out.write(MAGIC_BYTE);\n-            getIdHandler().writeId(id, out);\n-            serializeData(schema, data, out);\n+            if (headerUtils != null) {\n+                headerUtils.addSchemaHeaders(headers, artifactId, id);\n+                serializeData(headers, schema, data, out);\n+            } else {\n+                out.write(MAGIC_BYTE);\n+                getIdHandler().writeId(id, out);\n+                serializeData(schema, data, out);\n+            }", "originalCommit": "05bb53ec2f2065798132e45449fca167e460722f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NjExNQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486266115", "bodyText": "The headerUtil is effectively only created if the config has been set", "author": "tagarr", "createdAt": "2020-09-10T11:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTEwOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485805108", "bodyText": "Isn't this caught above on lines 94-97?", "author": "EricWittmann", "createdAt": "2020-09-09T17:47:33Z", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaDeserializer.java", "diffHunk": "@@ -77,8 +82,24 @@ protected Schema toSchema(Response response) {\n \n     @Override\n     protected U readData(Schema schema, ByteBuffer buffer, int start, int length) {\n+        return readData(null, schema, buffer, start, length);\n+    }\n+\n+    @Override\n+    protected U readData(Headers headers, Schema schema, ByteBuffer buffer, int start, int length) {\n+        AvroEncoding encoding = null;\n+        if (headers != null){\n+            encoding = headerUtils.getEncoding(headers);\n+        }\n+        if (encoding == null) {\n+            // no encoding in header or no headers so use config\n+            encoding = configEncoding;\n+        }\n         try {\n             DatumReader<U> reader = avroDatumProvider.createDatumReader(schema);\n+            if (encoding == null) {\n+                encoding = configEncoding;\n+            }", "originalCommit": "05bb53ec2f2065798132e45449fca167e460722f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NjE2Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486266166", "bodyText": "yes", "author": "tagarr", "createdAt": "2020-09-10T11:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMTY5Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485831693", "bodyText": "Might this be null sometimes?", "author": "EricWittmann", "createdAt": "2020-09-09T18:35:55Z", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaSerializer.java", "diffHunk": "@@ -104,6 +112,12 @@ protected void serializeData(Schema schema, U data, OutputStream out) throws IOE\n         encoder.flush();\n     }\n \n+    @Override\n+    protected void serializeData(Headers headers, Schema schema, U data, ByteArrayOutputStream out) throws IOException {\n+        headerUtils.addEncodingHeader(headers, encoding);", "originalCommit": "05bb53ec2f2065798132e45449fca167e460722f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NjI1Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486266253", "bodyText": "yes", "author": "tagarr", "createdAt": "2020-09-10T11:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMTY5Mw=="}], "type": "inlineReview"}, {"oid": "a51f2c8d0c682cc32a880e2f81d6ee53bf14f142", "url": "https://github.com/Apicurio/apicurio-registry/commit/a51f2c8d0c682cc32a880e2f81d6ee53bf14f142", "message": "Add support for clean Avro issue#643\n\nAdd option to use headers instead of magic\nbyte for serializing the global-ids\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>", "committedDate": "2020-09-10T14:20:06Z", "type": "commit"}, {"oid": "09432122165727e25f30fc7a41224af5de3b26bb", "url": "https://github.com/Apicurio/apicurio-registry/commit/09432122165727e25f30fc7a41224af5de3b26bb", "message": "Add clean avro issue 643\n\nAlways use headerUtils for consumer, so can consume\nany message\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>", "committedDate": "2020-09-10T14:20:06Z", "type": "commit"}, {"oid": "79179625d71d4b75f5cb708624d281a860d78a80", "url": "https://github.com/Apicurio/apicurio-registry/commit/79179625d71d4b75f5cb708624d281a860d78a80", "message": "Add pure avro option issue 643\n\nAdd some comments on the constants\nused by the headers\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>", "committedDate": "2020-09-10T14:20:06Z", "type": "commit"}, {"oid": "d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "url": "https://github.com/Apicurio/apicurio-registry/commit/d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "message": "Add clean avro option\n\nRefactor code according to comments\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>", "committedDate": "2020-09-10T14:20:06Z", "type": "commit"}, {"oid": "d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "url": "https://github.com/Apicurio/apicurio-registry/commit/d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "message": "Add clean avro option\n\nRefactor code according to comments\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>", "committedDate": "2020-09-10T14:20:06Z", "type": "forcePushed"}]}