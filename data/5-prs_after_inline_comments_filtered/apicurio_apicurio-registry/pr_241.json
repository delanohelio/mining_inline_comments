{"pr_number": 241, "pr_title": "Enable metrics. #47", "pr_createdAt": "2020-01-27T14:46:30Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/241", "timeline": [{"oid": "cdcab3462127f1ac77e9a01a3c0ed120917bae8d", "url": "https://github.com/Apicurio/apicurio-registry/commit/cdcab3462127f1ac77e9a01a3c0ed120917bae8d", "message": "Enable metrics. #47", "committedDate": "2020-01-27T14:44:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwODM2Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r371808366", "bodyText": "Surprised to see this here.", "author": "EricWittmann", "createdAt": "2020-01-28T13:43:24Z", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.apicurio.registry.metrics;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+\n+import javax.inject.Inject;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InvocationContext;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.*;\n+import static org.eclipse.microprofile.metrics.MetricUnits.MILLISECONDS;\n+\n+/**\n+ * Interceptor that tracks metrics across all REST resources.\n+ *\n+ * @author Jakub Senko <jsenko@redhat.com>\n+ */\n+@Interceptor\n+@RestMetricsApply", "originalCommit": "cdcab3462127f1ac77e9a01a3c0ed120917bae8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxMTAxNQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r371811015", "bodyText": "Where else is this annotation used and also where is it processed?  I can't figure out who processes this annotation.  Not sure how I missed that part of the review...", "author": "EricWittmann", "createdAt": "2020-01-28T13:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwODM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg5MzE3Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r371893176", "bodyText": "This annotation binds this interceptor to be used on REST resource classes e.g https://github.com/Apicurio/apicurio-registry/pull/241/files?file-filters%5B%5D=.java#diff-f9081a654b4a4101633c7b7b1b7caf1fR78\nIt's collecting metrics across all of them, since the standard metrics annotations can only do this per-class/method.\nIt's possible that such aggregated metrics can be created on the receiver's side e.g. Prometheus, but this could be a way to provide smaller number of more useful metrics.", "author": "jsenko", "createdAt": "2020-01-28T15:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwODM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4Mzk4Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r371983983", "bodyText": "So I guess it's the platform that performs that binding?  The annotation doesn't have to be registered in any way?  Also, the definition of the annotation @RestMetricsApply indicates it can be used on a class or on a method but it's only used (I think) on classes.", "author": "EricWittmann", "createdAt": "2020-01-28T18:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwODM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNjQ4MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r372426481", "bodyText": "Note: I misunderstood, the binding is done via @javax.interceptor.InterceptorBinding", "author": "jsenko", "createdAt": "2020-01-29T14:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwODM2Ng=="}], "type": "inlineReview"}, {"oid": "936bbead945e61445b419d78b8cba2130884cd85", "url": "https://github.com/Apicurio/apicurio-registry/commit/936bbead945e61445b419d78b8cba2130884cd85", "message": "Workaround for a bug in Quarkus", "committedDate": "2020-01-28T15:49:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNjg2Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r372426862", "bodyText": "Note: Remove ElementType.METHOD", "author": "jsenko", "createdAt": "2020-01-29T14:50:45Z", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsApply.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.apicurio.registry.metrics;\n+\n+import javax.interceptor.InterceptorBinding;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * @author Jakub Senko <jsenko@redhat.com>\n+ */\n+@InterceptorBinding\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.TYPE, ElementType.METHOD})", "originalCommit": "cdcab3462127f1ac77e9a01a3c0ed120917bae8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5NDgxNw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/241#discussion_r372494817", "bodyText": "MethodNotFound?", "author": "alesj", "createdAt": "2020-01-29T16:35:48Z", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.apicurio.registry.metrics;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+\n+import javax.inject.Inject;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InvocationContext;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.*;\n+import static org.eclipse.microprofile.metrics.MetricUnits.MILLISECONDS;\n+\n+/**\n+ * Interceptor that tracks metrics across all REST resources.\n+ *\n+ * @author Jakub Senko <jsenko@redhat.com>\n+ */\n+@Interceptor\n+@RestMetricsApply\n+public class RestMetricsInterceptor {\n+\n+\n+    @Inject\n+    @RegistryType(type = APPLICATION)\n+    MetricRegistry metricRegistry;\n+\n+    private Counter counter;\n+\n+    private ConcurrentGauge gauge;\n+\n+    private Timer timer;\n+\n+\n+    void init() {\n+        // Total counter\n+        final Metadata m1 = Metadata.builder()\n+                .withName(REST_REQUEST_COUNT)\n+                .withDescription(REST_REQUEST_COUNT_DESC + \" Across all endpoints.\")\n+                .withType(COUNTER)\n+                .build();\n+        final Tag[] tags1 = {new Tag(\"group\", REST_GROUP_TAG), new Tag(\"metric\", REST_REQUEST_COUNT)};\n+        counter = metricRegistry.counter(m1, tags1);\n+        // Concurrent gauge\n+        final Metadata m2 = Metadata.builder()\n+                .withName(REST_CONCURRENT_REQUEST_COUNT)\n+                .withDescription(REST_CONCURRENT_REQUEST_COUNT_DESC + \" Across all endpoints.\")\n+                .withType(CONCURRENT_GAUGE)\n+                .build();\n+        final Tag[] tags2 = {new Tag(\"group\", REST_GROUP_TAG), new Tag(\"metric\", REST_CONCURRENT_REQUEST_COUNT)};\n+        gauge = metricRegistry.concurrentGauge(m2, tags2);\n+        // Timer\n+        final Metadata m3 = Metadata.builder()\n+                .withName(REST_REQUEST_RESPONSE_TIME)\n+                .withDescription(REST_REQUEST_RESPONSE_TIME_DESC + \" Across all endpoints.\")\n+                .withType(TIMER)\n+                .withUnit(MILLISECONDS)\n+                .build();\n+        final Tag[] tags3 = {new Tag(\"group\", REST_GROUP_TAG), new Tag(\"metric\", REST_REQUEST_RESPONSE_TIME)};\n+        timer = metricRegistry.timer(m3, tags3);\n+    }\n+\n+    @AroundInvoke\n+    public Object intercept(InvocationContext context) throws Exception {\n+        if (counter == null) {\n+            init(); // @PostConstruct causes MethodNotFound ex.", "originalCommit": "936bbead945e61445b419d78b8cba2130884cd85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}