{"pr_number": 558, "pr_title": "fix: encode path parameters", "pr_createdAt": "2020-07-07T22:41:52Z", "pr_url": "https://github.com/twilio/twilio-java/pull/558", "timeline": [{"oid": "26404f7842ff59b98340ce39493aab3f98fff3c4", "url": "https://github.com/twilio/twilio-java/commit/26404f7842ff59b98340ce39493aab3f98fff3c4", "message": "fix: encode path parameters", "committedDate": "2020-07-07T22:39:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTQ1Mg==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r451215452", "bodyText": "Why is this case called out separately, when the above code on line 39 checks for all values >=2? Should we call both functions if expectedParts.length == 3?", "author": "thinkingserious", "createdAt": "2020-07-08T00:26:49Z", "path": "src/test/java/com/twilio/Assert.java", "diffHunk": "@@ -30,15 +30,18 @@ public static void assertUrlsEqual(final String expected, final URL actual) {\n     }\n \n     public static void assertUrlsEqual(final String expected, final String actual) {\n-        String[] expectedParts = expected.split(\"\\\\?\");\n-        String[] actualParts = actual.split(\"\\\\?\");\n+        String[] expectedParts = expected.split(\"[?#]\");\n+        String[] actualParts = actual.split(\"[?#]\");\n \n         assertEquals(expectedParts.length, actualParts.length);\n         assertEquals(expectedParts[0], actualParts[0]);\n \n-        if (expectedParts.length == 2) {\n+        if (expectedParts.length >= 2) {\n             assertQueryStringsEqual(expectedParts[1], actualParts[1]);\n         }\n+        if (expectedParts.length == 3) {", "originalCommit": "26404f7842ff59b98340ce39493aab3f98fff3c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2OTIzMg==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r451869232", "bodyText": "Note the code inside the conditional blocks. If the number of parts is >= 2, then the url contains a query string, which are there compared. If number of parts is 3, then the url also contains a fragment, which then needs to be compared as well.", "author": "eshanholtz", "createdAt": "2020-07-08T22:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTY3NA==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r451215674", "bodyText": "Should we keep the old test, and also add this one? (testing with and without #bar in the URL)", "author": "thinkingserious", "createdAt": "2020-07-08T00:27:35Z", "path": "src/test/java/com/twilio/http/RequestTest.java", "diffHunk": "@@ -196,13 +205,13 @@ public void testRegionAndEdgeInUrl() throws MalformedURLException {\n     }\n \n     @Test\n-    public void testRegionInConstructor() throws MalformedURLException {\n-        final Request request = new Request(HttpMethod.GET, Domains.ACCOUNTS.toString(), \"/path/to/something.json?foo=12.34\", \"region\");\n+    public void testRegionInConstructor() {", "originalCommit": "26404f7842ff59b98340ce39493aab3f98fff3c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2ODU2OQ==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r451868569", "bodyText": "It does not make any meaningful difference to test with and without the fragment on the end, it just adds more code.", "author": "eshanholtz", "createdAt": "2020-07-08T22:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2MDIwMw==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r452260203", "bodyText": "It's a legitimate concern. Like, what if things only work when both query params and fragments are used but fail when it's just one or the other. Not saying it doesn't work in those cases, but someone later may refactor the logic where it does in fact not work properly, but this test would still pass.\nBut, yes, in general, I'm against more test code that can be reduced. Test code is just like source code: it needs to be maintained.", "author": "childish-sambino", "createdAt": "2020-07-09T14:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NTc1NA==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r452385754", "bodyText": "I agree, it's just in this case we already have tests that include just query params. That said, I don't believe we have a test with no query params and just a fragment, but the way it's split, just query params vs just a fragment is treated equivalently.", "author": "eshanholtz", "createdAt": "2020-07-09T17:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxNTY3NA=="}], "type": "inlineReview"}, {"oid": "0c48185b3721ead18655dd3995d33b06775c67f5", "url": "https://github.com/twilio/twilio-java/commit/0c48185b3721ead18655dd3995d33b06775c67f5", "message": "Merge branch 'master' into encode", "committedDate": "2020-07-08T22:43:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NTUyMw==", "url": "https://github.com/twilio/twilio-java/pull/558#discussion_r452255523", "bodyText": "\ud83c\udf89", "author": "childish-sambino", "createdAt": "2020-07-09T14:22:37Z", "path": "src/main/java/com/twilio/http/Request.java", "diffHunk": "@@ -167,15 +169,14 @@ private String buildURL() {\n                 if (targetEdge != null && targetRegion == null)\n                     targetRegion = DEFAULT_REGION;\n \n-                final String host = joinIgnoreNull(\".\", product, targetEdge, targetRegion, domain);\n-\n-                return new URL(parsedUrl.getProtocol(), host, parsedUrl.getPort(), parsedUrl.getFile()).toString();\n-            } catch (final MalformedURLException e) {\n-                throw new ApiException(\"Bad URL: \" + url, e);\n+                host = joinIgnoreNull(\".\", product, targetEdge, targetRegion, domain);\n             }\n-        }\n \n-        return url;\n+            return new URI(parsedUrl.getProtocol(), parsedUrl.getUserInfo(), host, parsedUrl.getPort(),\n+                    parsedUrl.getPath(), parsedUrl.getQuery(), parsedUrl.getRef()).toURL().toString();\n+        } catch (final MalformedURLException | URISyntaxException e) {", "originalCommit": "0c48185b3721ead18655dd3995d33b06775c67f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}