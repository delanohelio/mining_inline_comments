{"pr_number": 9086, "pr_title": "Map source dialog 7658", "pr_createdAt": "2020-05-27T07:03:44Z", "pr_url": "https://github.com/osmandapp/OsmAnd/pull/9086", "timeline": [{"oid": "d254de8598df7352f13de38ede23560631866cb1", "url": "https://github.com/osmandapp/OsmAnd/commit/d254de8598df7352f13de38ede23560631866cb1", "message": "add/edit map source dialog redesign", "committedDate": "2020-05-26T14:06:14Z", "type": "commit"}, {"oid": "6be3458ad3363a70a00138b61a11b2adc99f794c", "url": "https://github.com/osmandapp/OsmAnd/commit/6be3458ad3363a70a00138b61a11b2adc99f794c", "message": "Merge remote-tracking branch 'origin/master' into map_source_dialog_7658\n\n# Conflicts:\n#\tOsmAnd/res/values/strings.xml", "committedDate": "2020-05-27T06:59:47Z", "type": "commit"}, {"oid": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "url": "https://github.com/osmandapp/OsmAnd/commit/2151028d2db0c8ed079aaade2adad04966a0d2f8", "message": "small refactor", "committedDate": "2020-05-27T14:40:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDUyNA==", "url": "https://github.com/osmandapp/OsmAnd/pull/9086#discussion_r431614524", "bodyText": "Wrong call", "author": "max-klaus", "createdAt": "2020-05-28T06:44:22Z", "path": "OsmAnd/src/net/osmand/plus/SQLiteTileSource.java", "diffHunk": "@@ -336,6 +338,8 @@ protected SQLiteConnection getDatabase(){\n \t}\n \n \tpublic void updateFromTileSourceTemplate(TileSourceTemplate r) {\n+\t\tdb = ctx.getSQLiteAPI().getOrCreateDatabase(", "originalCommit": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNzI4NQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/9086#discussion_r431617285", "bodyText": "Extract renameSQLiteFile and renameGpxFile to FileUtilities", "author": "max-klaus", "createdAt": "2020-05-28T06:51:11Z", "path": "OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java", "diffHunk": "@@ -339,7 +328,7 @@ public void onClick(View v) {\n \t\t}\n \t}\n \n-\tprivate static File renameSQLiteFile(OsmandApplication ctx, File source, String newName,\n+\tpublic static File renameSQLiteFile(OsmandApplication ctx, File source, String newName,", "originalCommit": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyNDA2OA==", "url": "https://github.com/osmandapp/OsmAnd/pull/9086#discussion_r431624068", "bodyText": "Import TileSourceManager", "author": "max-klaus", "createdAt": "2020-05-28T07:06:11Z", "path": "OsmAnd/src/net/osmand/plus/mapsource/EditMapSourceDialogFragment.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package net.osmand.plus.mapsource;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.graphics.drawable.Drawable;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.text.Editable;\n+import android.text.TextWatcher;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.widget.ImageButton;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.ContextCompat;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+\n+import com.google.android.material.textfield.TextInputEditText;\n+import com.google.android.material.textfield.TextInputLayout;\n+\n+import net.osmand.AndroidUtils;\n+import net.osmand.IndexConstants;\n+import net.osmand.PlatformUtil;\n+import net.osmand.map.TileSourceManager;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.R;\n+import net.osmand.plus.SQLiteTileSource;\n+import net.osmand.plus.UiUtilities;\n+import net.osmand.plus.base.BaseOsmAndDialogFragment;\n+import net.osmand.plus.mapsource.InputZoomLevelsBottomSheet.OnZoomSetListener;\n+import net.osmand.plus.mapsource.ExpireTimeBottomSheet.OnExpireValueSetListener;\n+import net.osmand.plus.mapsource.MercatorProjectionBottomSheet.OnMercatorSelectedListener;\n+import net.osmand.plus.mapsource.TileStorageFormatBottomSheet.OnTileStorageFormatSelectedListener;\n+import net.osmand.util.Algorithms;\n+\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import static net.osmand.plus.download.ui.LocalIndexesFragment.renameSQLiteFile;\n+\n+public class EditMapSourceDialogFragment extends BaseOsmAndDialogFragment\n+\t\timplements OnZoomSetListener, OnExpireValueSetListener, OnMercatorSelectedListener,\n+\t\tOnTileStorageFormatSelectedListener {\n+\n+\tpublic static final String TAG = EditMapSourceDialogFragment.class.getName();\n+\tstatic final int EXPIRE_TIME_NEVER = -1;\n+\tprivate static final Log LOG = PlatformUtil.getLog(EditMapSourceDialogFragment.class);\n+\tprivate static final String MAPS_PLUGINS_URL = \"https://osmand.net/features/online-maps-plugin\";\n+\tprivate static final String PNG_EXT = \"png\";\n+\tprivate static final int MAX_ZOOM = 17;\n+\tprivate static final int MIN_ZOOM = 5;\n+\tprivate static final int TILE_SIZE = 256;\n+\tprivate static final int BIT_DENSITY = 16;\n+\tprivate static final int AVG_SIZE = 32000;\n+\tprivate static final String EDIT_LAYER_NAME_KEY = \"edit_layer_name_key\";\n+\tprivate static final String MIN_ZOOM_KEY = \"min_zoom_key\";\n+\tprivate static final String MAX_ZOOM_KEY = \"max_zoom_key\";\n+\tprivate static final String EXPIRE_TIME_KEY = \"expire_time_key\";\n+\tprivate static final String ELLIPTIC_KEY = \"elliptic_key\";\n+\tprivate static final String SQLITE_DB_KEY = \"sqlite_db_key\";\n+\tprivate OsmandApplication app;\n+\tprivate TextInputEditText nameEditText;\n+\tprivate TextInputEditText urlEditText;\n+\tprivate LinearLayout contentContainer;\n+\tprivate FrameLayout saveBtn;\n+\tprivate TextView saveBtnTitle;\n+\tprivate TileSourceManager.TileSourceTemplate template;", "originalCommit": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyNjk1OA==", "url": "https://github.com/osmandapp/OsmAnd/pull/9086#discussion_r431626958", "bodyText": "Import View", "author": "max-klaus", "createdAt": "2020-05-28T07:12:16Z", "path": "OsmAnd/src/net/osmand/plus/mapsource/EditMapSourceDialogFragment.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package net.osmand.plus.mapsource;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.graphics.drawable.Drawable;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.text.Editable;\n+import android.text.TextWatcher;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.widget.ImageButton;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.ContextCompat;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+\n+import com.google.android.material.textfield.TextInputEditText;\n+import com.google.android.material.textfield.TextInputLayout;\n+\n+import net.osmand.AndroidUtils;\n+import net.osmand.IndexConstants;\n+import net.osmand.PlatformUtil;\n+import net.osmand.map.TileSourceManager;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.R;\n+import net.osmand.plus.SQLiteTileSource;\n+import net.osmand.plus.UiUtilities;\n+import net.osmand.plus.base.BaseOsmAndDialogFragment;\n+import net.osmand.plus.mapsource.InputZoomLevelsBottomSheet.OnZoomSetListener;\n+import net.osmand.plus.mapsource.ExpireTimeBottomSheet.OnExpireValueSetListener;\n+import net.osmand.plus.mapsource.MercatorProjectionBottomSheet.OnMercatorSelectedListener;\n+import net.osmand.plus.mapsource.TileStorageFormatBottomSheet.OnTileStorageFormatSelectedListener;\n+import net.osmand.util.Algorithms;\n+\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import static net.osmand.plus.download.ui.LocalIndexesFragment.renameSQLiteFile;\n+\n+public class EditMapSourceDialogFragment extends BaseOsmAndDialogFragment\n+\t\timplements OnZoomSetListener, OnExpireValueSetListener, OnMercatorSelectedListener,\n+\t\tOnTileStorageFormatSelectedListener {\n+\n+\tpublic static final String TAG = EditMapSourceDialogFragment.class.getName();\n+\tstatic final int EXPIRE_TIME_NEVER = -1;\n+\tprivate static final Log LOG = PlatformUtil.getLog(EditMapSourceDialogFragment.class);\n+\tprivate static final String MAPS_PLUGINS_URL = \"https://osmand.net/features/online-maps-plugin\";\n+\tprivate static final String PNG_EXT = \"png\";\n+\tprivate static final int MAX_ZOOM = 17;\n+\tprivate static final int MIN_ZOOM = 5;\n+\tprivate static final int TILE_SIZE = 256;\n+\tprivate static final int BIT_DENSITY = 16;\n+\tprivate static final int AVG_SIZE = 32000;\n+\tprivate static final String EDIT_LAYER_NAME_KEY = \"edit_layer_name_key\";\n+\tprivate static final String MIN_ZOOM_KEY = \"min_zoom_key\";\n+\tprivate static final String MAX_ZOOM_KEY = \"max_zoom_key\";\n+\tprivate static final String EXPIRE_TIME_KEY = \"expire_time_key\";\n+\tprivate static final String ELLIPTIC_KEY = \"elliptic_key\";\n+\tprivate static final String SQLITE_DB_KEY = \"sqlite_db_key\";\n+\tprivate OsmandApplication app;\n+\tprivate TextInputEditText nameEditText;\n+\tprivate TextInputEditText urlEditText;\n+\tprivate LinearLayout contentContainer;\n+\tprivate FrameLayout saveBtn;\n+\tprivate TextView saveBtnTitle;\n+\tprivate TileSourceManager.TileSourceTemplate template;\n+\t@Nullable\n+\tprivate String editedLayerName;\n+\tprivate String urlToLoad = \"\";\n+\tprivate int minZoom = MIN_ZOOM;\n+\tprivate int maxZoom = MAX_ZOOM;\n+\tprivate int expireTimeMinutes = EXPIRE_TIME_NEVER;\n+\tprivate boolean elliptic = false;\n+\tprivate boolean sqliteDB = false;\n+\tprivate boolean nightMode;\n+\n+\tpublic static void showInstance(@NonNull FragmentManager fm,\n+\t\t\t\t\t\t\t\t\t@Nullable Fragment targetFragment,\n+\t\t\t\t\t\t\t\t\t@Nullable String editedLayerName) {\n+\t\tEditMapSourceDialogFragment fragment = new EditMapSourceDialogFragment();\n+\t\tfragment.setTargetFragment(targetFragment, 0);\n+\t\tfragment.setEditedLayerName(editedLayerName);\n+\t\tfragment.show(fm, TAG);\n+\t}\n+\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tapp = getMyApplication();\n+\t\tnightMode = !app.getSettings().isLightContent();\n+\t}\n+\n+\t@Override\n+\tpublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+\t\tif (savedInstanceState != null) {\n+\t\t\teditedLayerName = savedInstanceState.getString(EDIT_LAYER_NAME_KEY);\n+\t\t\tminZoom = savedInstanceState.getInt(MIN_ZOOM_KEY);\n+\t\t\tmaxZoom = savedInstanceState.getInt(MAX_ZOOM_KEY);\n+\t\t\texpireTimeMinutes = savedInstanceState.getInt(EXPIRE_TIME_KEY);\n+\t\t\telliptic = savedInstanceState.getBoolean(ELLIPTIC_KEY);\n+\t\t\tsqliteDB = savedInstanceState.getBoolean(SQLITE_DB_KEY);\n+\t\t}\n+\t\tView root = UiUtilities.getMaterialInflater(app, nightMode).inflate(R.layout.fragment_edit_map_source, container, false);\n+\t\tToolbar toolbar = root.findViewById(R.id.toolbar);\n+\t\tImageButton iconHelp = root.findViewById(R.id.toolbar_action);\n+\t\tDrawable closeDrawable = app.getUIUtilities().getIcon(AndroidUtils.getNavigationIconResId(app),\n+\t\t\t\tnightMode ? R.color.active_buttons_and_links_text_dark : R.color.active_buttons_and_links_text_light);\n+\t\tDrawable helpDrawable = app.getUIUtilities().getIcon(R.drawable.ic_action_help,\n+\t\t\t\tnightMode ? R.color.active_buttons_and_links_text_dark : R.color.active_buttons_and_links_text_light);\n+\t\ticonHelp.setImageDrawable(helpDrawable);\n+\t\ticonHelp.setOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View view) {\n+\t\t\t\tonHelpClick();\n+\t\t\t}\n+\t\t});\n+\t\ttoolbar.setNavigationIcon(closeDrawable);\n+\t\ttoolbar.setNavigationContentDescription(R.string.shared_string_close);\n+\t\ttoolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View v) {\n+\t\t\t\tshowExitDialog();\n+\t\t\t}\n+\t\t});\n+\t\tint boxStrokeColor = nightMode\n+\t\t\t\t? ContextCompat.getColor(app, R.color.app_bar_color_light)\n+\t\t\t\t: ContextCompat.getColor(app, R.color.active_buttons_and_links_bg_pressed_dark);\n+\t\tTextInputLayout nameInputLayout = root.findViewById(R.id.name_input_layout);\n+\t\tnameInputLayout.setBoxStrokeColor(boxStrokeColor);\n+\t\tnameEditText = root.findViewById(R.id.name_edit_text);\n+\t\tTextInputLayout urlInputLayout = root.findViewById(R.id.url_input_layout);\n+\t\turlInputLayout.setBoxStrokeColor(boxStrokeColor);\n+\t\turlEditText = root.findViewById(R.id.url_edit_text);\n+\t\tnameEditText.addTextChangedListener(getTextWatcher());\n+\t\turlEditText.addTextChangedListener(getTextWatcher());\n+\t\tcontentContainer = root.findViewById(R.id.content_container);\n+\t\tsaveBtn = root.findViewById(R.id.save_button);\n+\t\tsaveBtnTitle = root.findViewById(R.id.save_button_title);\n+\t\tsaveBtn.setOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View view) {\n+\t\t\t\tsaveTemplate();\n+\t\t\t\tdismiss();\n+\t\t\t}\n+\t\t});\n+\t\ttemplate = new TileSourceManager.TileSourceTemplate(\"\", \"\", PNG_EXT, MAX_ZOOM, MIN_ZOOM, TILE_SIZE, BIT_DENSITY, AVG_SIZE);\n+\t\tif (editedLayerName != null) {\n+\t\t\tif (!editedLayerName.endsWith(IndexConstants.SQLITE_EXT)) {\n+\t\t\t\tFile f = app.getAppPath(IndexConstants.TILES_INDEX_DIR + editedLayerName);\n+\t\t\t\ttemplate = TileSourceManager.createTileSourceTemplate(f);\n+\t\t\t\tsqliteDB = false;\n+\t\t\t} else {\n+\t\t\t\tList<TileSourceManager.TileSourceTemplate> knownTemplates = TileSourceManager.getKnownSourceTemplates();\n+\t\t\t\tFile tPath = app.getAppPath(IndexConstants.TILES_INDEX_DIR);\n+\t\t\t\tFile dir = new File(tPath, editedLayerName);\n+\t\t\t\tSQLiteTileSource sqLiteTileSource = new SQLiteTileSource(app, dir, knownTemplates);\n+\t\t\t\tsqLiteTileSource.couldBeDownloadedFromInternet();\n+\t\t\t\ttemplate = new TileSourceManager.TileSourceTemplate(sqLiteTileSource.getName(),\n+\t\t\t\t\t\tsqLiteTileSource.getUrlTemplate(), PNG_EXT, sqLiteTileSource.getMaximumZoomSupported(),\n+\t\t\t\t\t\tsqLiteTileSource.getMinimumZoomSupported(), sqLiteTileSource.getTileSize(),\n+\t\t\t\t\t\tsqLiteTileSource.getBitDensity(), AVG_SIZE);\n+\t\t\t\ttemplate.setExpirationTimeMinutes(sqLiteTileSource.getExpirationTimeMinutes());\n+\t\t\t\ttemplate.setEllipticYTile(sqLiteTileSource.isEllipticYTile());\n+\t\t\t\tsqliteDB = true;\n+\t\t\t}\n+\t\t}\n+\t\tif (savedInstanceState == null) {\n+\t\t\turlToLoad = template.getUrlTemplate();\n+\t\t\texpireTimeMinutes = template.getExpirationTimeMinutes();\n+\t\t\tminZoom = template.getMinimumZoomSupported();\n+\t\t\tmaxZoom = template.getMaximumZoomSupported();\n+\t\t\telliptic = template.isEllipticYTile();\n+\t\t}\n+\t\tupdateUi();\n+\t\treturn root;\n+\t}\n+\n+\t@Override\n+\tpublic void onSaveInstanceState(@NonNull Bundle outState) {\n+\t\toutState.putString(EDIT_LAYER_NAME_KEY, editedLayerName);\n+\t\toutState.putInt(MIN_ZOOM_KEY, minZoom);\n+\t\toutState.putInt(MAX_ZOOM_KEY, maxZoom);\n+\t\toutState.putInt(EXPIRE_TIME_KEY, expireTimeMinutes);\n+\t\toutState.putBoolean(ELLIPTIC_KEY, elliptic);\n+\t\toutState.putBoolean(SQLITE_DB_KEY, sqliteDB);\n+\t\tsuper.onSaveInstanceState(outState);\n+\t}\n+\n+\t@Override\n+\tpublic void onResume() {\n+\t\tsuper.onResume();\n+\t\tDialog dialog = getDialog();\n+\t\tif (dialog != null) {\n+\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n+\t\t\t\t\tif (keyCode == android.view.KeyEvent.KEYCODE_BACK) {\n+\t\t\t\t\t\tif (event.getAction() == KeyEvent.ACTION_DOWN) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tshowExitDialog();\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onZoomSet(int min, int max) {\n+\t\t\tminZoom = min;\n+\t\t\tmaxZoom = max;\n+\t\t\tupdateDescription(ConfigurationItem.ZOOM_LEVELS);\n+\t}\n+\n+\t@Override\n+\tpublic void onExpireValueSet(int expireValue) {\n+\t\t\texpireTimeMinutes = expireValue;\n+\t\t\tupdateDescription(ConfigurationItem.EXPIRE_TIME);\n+\t}\n+\n+\t@Override\n+\tpublic void onMercatorSelected(boolean elliptic) {\n+\t\tif (isAdded()) {\n+\t\t\tthis.elliptic = elliptic;\n+\t\t\tupdateDescription(ConfigurationItem.MERCATOR_PROJECTION);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onStorageFormatSelected(boolean sqliteDb) {\n+\t\tif (isAdded()) {\n+\t\t\tthis.sqliteDB = sqliteDb;\n+\t\t\tupdateDescription(ConfigurationItem.STORAGE_FORMAT);\n+\t\t}\n+\t}\n+\n+\tprivate TextWatcher getTextWatcher() {\n+\t\treturn new TextWatcher() {\n+\t\t\t@Override\n+\t\t\tpublic void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n+\t\t\t\tString s = charSequence.toString();\n+\t\t\t\tif (Algorithms.isEmpty(s)) {\n+\t\t\t\t\tsaveBtn.setEnabled(false);\n+\t\t\t\t\tsaveBtnTitle.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tsaveBtn.setEnabled(true);\n+\t\t\t\t\tsaveBtnTitle.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void afterTextChanged(Editable editable) {\n+\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tprivate void saveTemplate() {\n+\t\ttry {\n+\t\t\tString newName = nameEditText.getText().toString();\n+\t\t\tString urlToLoad = urlEditText.getText().toString();\n+\t\t\ttemplate.setName(newName);\n+\t\t\ttemplate.setUrlToLoad(urlToLoad.isEmpty() ? null : urlToLoad.replace(\"{$x}\", \"{1}\").replace(\"{$y}\", \"{2}\").replace(\"{$z}\", \"{0}\"));\n+\t\t\ttemplate.setMinZoom(minZoom);\n+\t\t\ttemplate.setMaxZoom(maxZoom);\n+\t\t\ttemplate.setEllipticYTile(elliptic);\n+\t\t\ttemplate.setExpirationTimeMinutes(expireTimeMinutes);\n+\t\t\tFile f = app.getAppPath(IndexConstants.TILES_INDEX_DIR + editedLayerName);\n+\t\t\tif (f.exists()) {\n+\t\t\t\tint extIndex = f.getName().lastIndexOf('.');\n+\t\t\t\tString ext = extIndex == -1 ? \"\" : f.getName().substring(extIndex);\n+\t\t\t\tString originalName = extIndex == -1 ? f.getName() : f.getName().substring(0, extIndex);\n+\t\t\t\tif (!Algorithms.objectEquals(newName, originalName)) {\n+\t\t\t\t\tif (IndexConstants.SQLITE_EXT.equals(ext) && sqliteDB) {\n+\t\t\t\t\t\trenameSQLiteFile(app, f, newName, null);\n+\t\t\t\t\t} else if (!sqliteDB) {\n+\t\t\t\t\t\tf.renameTo(app.getAppPath(IndexConstants.TILES_INDEX_DIR + newName));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (sqliteDB) {\n+\t\t\t\tif (!f.exists() || f.isDirectory()) {\n+\t\t\t\t\tSQLiteTileSource sqLiteTileSource =\n+\t\t\t\t\t\t\tnew SQLiteTileSource(app, newName, minZoom,\n+\t\t\t\t\t\t\t\t\tmaxZoom, urlToLoad, \"0,1,2,3\",\n+\t\t\t\t\t\t\t\t\telliptic, false, \"\", expireTimeMinutes > 0,\n+\t\t\t\t\t\t\t\t\texpireTimeMinutes * 60 * 1000L, false, \"\"\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\tsqLiteTileSource.createDataBase();\n+\t\t\t\t} else {\n+\t\t\t\t\tList<TileSourceManager.TileSourceTemplate> knownTemplates = TileSourceManager.getKnownSourceTemplates();\n+\t\t\t\t\tSQLiteTileSource sqLiteTileSource = new SQLiteTileSource(app, f, knownTemplates);\n+\t\t\t\t\tsqLiteTileSource.couldBeDownloadedFromInternet();\n+\t\t\t\t\tsqLiteTileSource.updateFromTileSourceTemplate(template);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tgetSettings().installTileSource(template);\n+\t\t\t}\n+\t\t\tFragment fragment = getTargetFragment();\n+\t\t\tif (fragment instanceof OnMapSourceUpdateListener) {\n+\t\t\t\t((OnMapSourceUpdateListener) fragment).onMapSourceUpdated();\n+\t\t\t}\n+\t\t} catch (RuntimeException e) {\n+\t\t\tLOG.error(\"Error on saving template \" + e);\n+\t\t}\n+\t}\n+\n+\tprivate void updateUi() {\n+\t\tnameEditText.setText(editedLayerName != null ? editedLayerName.replace(IndexConstants.SQLITE_EXT, \"\") : \"\");\n+\t\turlEditText.setText(urlToLoad);\n+\t\taddConfigurationItems(ConfigurationItem.values());\n+\t}\n+\n+\tprivate void onHelpClick() {\n+\t\tIntent i = new Intent(Intent.ACTION_VIEW);\n+\t\ti.setData(Uri.parse(MAPS_PLUGINS_URL));\n+\t\tif (AndroidUtils.isIntentSafe(app, i)) {\n+\t\t\tstartActivity(i);\n+\t\t}\n+\t}\n+\n+\tprivate void showExitDialog() {\n+\t\tContext themedContext = UiUtilities.getThemedContext(getActivity(), nightMode);\n+\t\tAlertDialog.Builder dismissDialog = new AlertDialog.Builder(themedContext);\n+\t\tdismissDialog.setTitle(getString(R.string.shared_string_dismiss));\n+\t\tdismissDialog.setMessage(getString(R.string.exit_without_saving));\n+\t\tdismissDialog.setNegativeButton(R.string.shared_string_cancel, null);\n+\t\tdismissDialog.setPositiveButton(R.string.shared_string_exit, new DialogInterface.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\tdismiss();\n+\t\t\t}\n+\t\t});\n+\t\tdismissDialog.show();\n+\t}\n+\n+\tprivate String getDescription(ConfigurationItem item) {\n+\t\tswitch (item) {\n+\t\t\tcase ZOOM_LEVELS:\n+\t\t\t\tString min = getString(R.string.ltr_or_rtl_combine_via_space, getString(R.string.shared_string_min), String.valueOf(minZoom));\n+\t\t\t\tString max = getString(R.string.ltr_or_rtl_combine_via_space, getString(R.string.shared_string_max), String.valueOf(maxZoom));\n+\t\t\t\treturn getString(R.string.ltr_or_rtl_combine_via_bold_point, min, max);\n+\t\t\tcase EXPIRE_TIME:\n+\t\t\t\treturn expireTimeMinutes == EXPIRE_TIME_NEVER\n+\t\t\t\t\t\t? getString(R.string.shared_string_never)\n+\t\t\t\t\t\t: getString(R.string.ltr_or_rtl_combine_via_space, String.valueOf(expireTimeMinutes), getString(R.string.osmand_parking_minute));\n+\t\t\tcase MERCATOR_PROJECTION:\n+\t\t\t\treturn elliptic ? getString(R.string.edit_tilesource_elliptic_tile) : getString(R.string.pseudo_mercator_projection);\n+\t\t\tcase STORAGE_FORMAT:\n+\t\t\t\treturn sqliteDB ? getString(R.string.sqlite_db_file) : getString(R.string.one_image_per_tile);\n+\t\t\tdefault:\n+\t\t\t\treturn \"\";\n+\t\t}\n+\t}\n+\n+\tprivate View.OnClickListener getClickListener(final ConfigurationItem item) {", "originalCommit": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyODMyNw==", "url": "https://github.com/osmandapp/OsmAnd/pull/9086#discussion_r431628327", "bodyText": "Why onZoomSet and onExpireValueSet without isAdded() ?", "author": "max-klaus", "createdAt": "2020-05-28T07:15:03Z", "path": "OsmAnd/src/net/osmand/plus/mapsource/EditMapSourceDialogFragment.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package net.osmand.plus.mapsource;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.graphics.drawable.Drawable;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.text.Editable;\n+import android.text.TextWatcher;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.widget.ImageButton;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.ContextCompat;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+\n+import com.google.android.material.textfield.TextInputEditText;\n+import com.google.android.material.textfield.TextInputLayout;\n+\n+import net.osmand.AndroidUtils;\n+import net.osmand.IndexConstants;\n+import net.osmand.PlatformUtil;\n+import net.osmand.map.TileSourceManager;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.R;\n+import net.osmand.plus.SQLiteTileSource;\n+import net.osmand.plus.UiUtilities;\n+import net.osmand.plus.base.BaseOsmAndDialogFragment;\n+import net.osmand.plus.mapsource.InputZoomLevelsBottomSheet.OnZoomSetListener;\n+import net.osmand.plus.mapsource.ExpireTimeBottomSheet.OnExpireValueSetListener;\n+import net.osmand.plus.mapsource.MercatorProjectionBottomSheet.OnMercatorSelectedListener;\n+import net.osmand.plus.mapsource.TileStorageFormatBottomSheet.OnTileStorageFormatSelectedListener;\n+import net.osmand.util.Algorithms;\n+\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import static net.osmand.plus.download.ui.LocalIndexesFragment.renameSQLiteFile;\n+\n+public class EditMapSourceDialogFragment extends BaseOsmAndDialogFragment\n+\t\timplements OnZoomSetListener, OnExpireValueSetListener, OnMercatorSelectedListener,\n+\t\tOnTileStorageFormatSelectedListener {\n+\n+\tpublic static final String TAG = EditMapSourceDialogFragment.class.getName();\n+\tstatic final int EXPIRE_TIME_NEVER = -1;\n+\tprivate static final Log LOG = PlatformUtil.getLog(EditMapSourceDialogFragment.class);\n+\tprivate static final String MAPS_PLUGINS_URL = \"https://osmand.net/features/online-maps-plugin\";\n+\tprivate static final String PNG_EXT = \"png\";\n+\tprivate static final int MAX_ZOOM = 17;\n+\tprivate static final int MIN_ZOOM = 5;\n+\tprivate static final int TILE_SIZE = 256;\n+\tprivate static final int BIT_DENSITY = 16;\n+\tprivate static final int AVG_SIZE = 32000;\n+\tprivate static final String EDIT_LAYER_NAME_KEY = \"edit_layer_name_key\";\n+\tprivate static final String MIN_ZOOM_KEY = \"min_zoom_key\";\n+\tprivate static final String MAX_ZOOM_KEY = \"max_zoom_key\";\n+\tprivate static final String EXPIRE_TIME_KEY = \"expire_time_key\";\n+\tprivate static final String ELLIPTIC_KEY = \"elliptic_key\";\n+\tprivate static final String SQLITE_DB_KEY = \"sqlite_db_key\";\n+\tprivate OsmandApplication app;\n+\tprivate TextInputEditText nameEditText;\n+\tprivate TextInputEditText urlEditText;\n+\tprivate LinearLayout contentContainer;\n+\tprivate FrameLayout saveBtn;\n+\tprivate TextView saveBtnTitle;\n+\tprivate TileSourceManager.TileSourceTemplate template;\n+\t@Nullable\n+\tprivate String editedLayerName;\n+\tprivate String urlToLoad = \"\";\n+\tprivate int minZoom = MIN_ZOOM;\n+\tprivate int maxZoom = MAX_ZOOM;\n+\tprivate int expireTimeMinutes = EXPIRE_TIME_NEVER;\n+\tprivate boolean elliptic = false;\n+\tprivate boolean sqliteDB = false;\n+\tprivate boolean nightMode;\n+\n+\tpublic static void showInstance(@NonNull FragmentManager fm,\n+\t\t\t\t\t\t\t\t\t@Nullable Fragment targetFragment,\n+\t\t\t\t\t\t\t\t\t@Nullable String editedLayerName) {\n+\t\tEditMapSourceDialogFragment fragment = new EditMapSourceDialogFragment();\n+\t\tfragment.setTargetFragment(targetFragment, 0);\n+\t\tfragment.setEditedLayerName(editedLayerName);\n+\t\tfragment.show(fm, TAG);\n+\t}\n+\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tapp = getMyApplication();\n+\t\tnightMode = !app.getSettings().isLightContent();\n+\t}\n+\n+\t@Override\n+\tpublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+\t\tif (savedInstanceState != null) {\n+\t\t\teditedLayerName = savedInstanceState.getString(EDIT_LAYER_NAME_KEY);\n+\t\t\tminZoom = savedInstanceState.getInt(MIN_ZOOM_KEY);\n+\t\t\tmaxZoom = savedInstanceState.getInt(MAX_ZOOM_KEY);\n+\t\t\texpireTimeMinutes = savedInstanceState.getInt(EXPIRE_TIME_KEY);\n+\t\t\telliptic = savedInstanceState.getBoolean(ELLIPTIC_KEY);\n+\t\t\tsqliteDB = savedInstanceState.getBoolean(SQLITE_DB_KEY);\n+\t\t}\n+\t\tView root = UiUtilities.getMaterialInflater(app, nightMode).inflate(R.layout.fragment_edit_map_source, container, false);\n+\t\tToolbar toolbar = root.findViewById(R.id.toolbar);\n+\t\tImageButton iconHelp = root.findViewById(R.id.toolbar_action);\n+\t\tDrawable closeDrawable = app.getUIUtilities().getIcon(AndroidUtils.getNavigationIconResId(app),\n+\t\t\t\tnightMode ? R.color.active_buttons_and_links_text_dark : R.color.active_buttons_and_links_text_light);\n+\t\tDrawable helpDrawable = app.getUIUtilities().getIcon(R.drawable.ic_action_help,\n+\t\t\t\tnightMode ? R.color.active_buttons_and_links_text_dark : R.color.active_buttons_and_links_text_light);\n+\t\ticonHelp.setImageDrawable(helpDrawable);\n+\t\ticonHelp.setOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View view) {\n+\t\t\t\tonHelpClick();\n+\t\t\t}\n+\t\t});\n+\t\ttoolbar.setNavigationIcon(closeDrawable);\n+\t\ttoolbar.setNavigationContentDescription(R.string.shared_string_close);\n+\t\ttoolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View v) {\n+\t\t\t\tshowExitDialog();\n+\t\t\t}\n+\t\t});\n+\t\tint boxStrokeColor = nightMode\n+\t\t\t\t? ContextCompat.getColor(app, R.color.app_bar_color_light)\n+\t\t\t\t: ContextCompat.getColor(app, R.color.active_buttons_and_links_bg_pressed_dark);\n+\t\tTextInputLayout nameInputLayout = root.findViewById(R.id.name_input_layout);\n+\t\tnameInputLayout.setBoxStrokeColor(boxStrokeColor);\n+\t\tnameEditText = root.findViewById(R.id.name_edit_text);\n+\t\tTextInputLayout urlInputLayout = root.findViewById(R.id.url_input_layout);\n+\t\turlInputLayout.setBoxStrokeColor(boxStrokeColor);\n+\t\turlEditText = root.findViewById(R.id.url_edit_text);\n+\t\tnameEditText.addTextChangedListener(getTextWatcher());\n+\t\turlEditText.addTextChangedListener(getTextWatcher());\n+\t\tcontentContainer = root.findViewById(R.id.content_container);\n+\t\tsaveBtn = root.findViewById(R.id.save_button);\n+\t\tsaveBtnTitle = root.findViewById(R.id.save_button_title);\n+\t\tsaveBtn.setOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View view) {\n+\t\t\t\tsaveTemplate();\n+\t\t\t\tdismiss();\n+\t\t\t}\n+\t\t});\n+\t\ttemplate = new TileSourceManager.TileSourceTemplate(\"\", \"\", PNG_EXT, MAX_ZOOM, MIN_ZOOM, TILE_SIZE, BIT_DENSITY, AVG_SIZE);\n+\t\tif (editedLayerName != null) {\n+\t\t\tif (!editedLayerName.endsWith(IndexConstants.SQLITE_EXT)) {\n+\t\t\t\tFile f = app.getAppPath(IndexConstants.TILES_INDEX_DIR + editedLayerName);\n+\t\t\t\ttemplate = TileSourceManager.createTileSourceTemplate(f);\n+\t\t\t\tsqliteDB = false;\n+\t\t\t} else {\n+\t\t\t\tList<TileSourceManager.TileSourceTemplate> knownTemplates = TileSourceManager.getKnownSourceTemplates();\n+\t\t\t\tFile tPath = app.getAppPath(IndexConstants.TILES_INDEX_DIR);\n+\t\t\t\tFile dir = new File(tPath, editedLayerName);\n+\t\t\t\tSQLiteTileSource sqLiteTileSource = new SQLiteTileSource(app, dir, knownTemplates);\n+\t\t\t\tsqLiteTileSource.couldBeDownloadedFromInternet();\n+\t\t\t\ttemplate = new TileSourceManager.TileSourceTemplate(sqLiteTileSource.getName(),\n+\t\t\t\t\t\tsqLiteTileSource.getUrlTemplate(), PNG_EXT, sqLiteTileSource.getMaximumZoomSupported(),\n+\t\t\t\t\t\tsqLiteTileSource.getMinimumZoomSupported(), sqLiteTileSource.getTileSize(),\n+\t\t\t\t\t\tsqLiteTileSource.getBitDensity(), AVG_SIZE);\n+\t\t\t\ttemplate.setExpirationTimeMinutes(sqLiteTileSource.getExpirationTimeMinutes());\n+\t\t\t\ttemplate.setEllipticYTile(sqLiteTileSource.isEllipticYTile());\n+\t\t\t\tsqliteDB = true;\n+\t\t\t}\n+\t\t}\n+\t\tif (savedInstanceState == null) {\n+\t\t\turlToLoad = template.getUrlTemplate();\n+\t\t\texpireTimeMinutes = template.getExpirationTimeMinutes();\n+\t\t\tminZoom = template.getMinimumZoomSupported();\n+\t\t\tmaxZoom = template.getMaximumZoomSupported();\n+\t\t\telliptic = template.isEllipticYTile();\n+\t\t}\n+\t\tupdateUi();\n+\t\treturn root;\n+\t}\n+\n+\t@Override\n+\tpublic void onSaveInstanceState(@NonNull Bundle outState) {\n+\t\toutState.putString(EDIT_LAYER_NAME_KEY, editedLayerName);\n+\t\toutState.putInt(MIN_ZOOM_KEY, minZoom);\n+\t\toutState.putInt(MAX_ZOOM_KEY, maxZoom);\n+\t\toutState.putInt(EXPIRE_TIME_KEY, expireTimeMinutes);\n+\t\toutState.putBoolean(ELLIPTIC_KEY, elliptic);\n+\t\toutState.putBoolean(SQLITE_DB_KEY, sqliteDB);\n+\t\tsuper.onSaveInstanceState(outState);\n+\t}\n+\n+\t@Override\n+\tpublic void onResume() {\n+\t\tsuper.onResume();\n+\t\tDialog dialog = getDialog();\n+\t\tif (dialog != null) {\n+\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n+\t\t\t\t\tif (keyCode == android.view.KeyEvent.KEYCODE_BACK) {\n+\t\t\t\t\t\tif (event.getAction() == KeyEvent.ACTION_DOWN) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tshowExitDialog();\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onZoomSet(int min, int max) {\n+\t\t\tminZoom = min;\n+\t\t\tmaxZoom = max;\n+\t\t\tupdateDescription(ConfigurationItem.ZOOM_LEVELS);\n+\t}\n+\n+\t@Override\n+\tpublic void onExpireValueSet(int expireValue) {\n+\t\t\texpireTimeMinutes = expireValue;\n+\t\t\tupdateDescription(ConfigurationItem.EXPIRE_TIME);\n+\t}\n+\n+\t@Override\n+\tpublic void onMercatorSelected(boolean elliptic) {\n+\t\tif (isAdded()) {", "originalCommit": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyOTA0OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/9086#discussion_r431629049", "bodyText": "Why randoms and invertedY hardcoded?", "author": "max-klaus", "createdAt": "2020-05-28T07:16:32Z", "path": "OsmAnd/src/net/osmand/plus/mapsource/EditMapSourceDialogFragment.java", "diffHunk": "@@ -0,0 +1,453 @@\n+package net.osmand.plus.mapsource;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.graphics.drawable.Drawable;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.text.Editable;\n+import android.text.TextWatcher;\n+import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.widget.ImageButton;\n+import android.widget.ImageView;\n+import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.ContextCompat;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+\n+import com.google.android.material.textfield.TextInputEditText;\n+import com.google.android.material.textfield.TextInputLayout;\n+\n+import net.osmand.AndroidUtils;\n+import net.osmand.IndexConstants;\n+import net.osmand.PlatformUtil;\n+import net.osmand.map.TileSourceManager;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.R;\n+import net.osmand.plus.SQLiteTileSource;\n+import net.osmand.plus.UiUtilities;\n+import net.osmand.plus.base.BaseOsmAndDialogFragment;\n+import net.osmand.plus.mapsource.InputZoomLevelsBottomSheet.OnZoomSetListener;\n+import net.osmand.plus.mapsource.ExpireTimeBottomSheet.OnExpireValueSetListener;\n+import net.osmand.plus.mapsource.MercatorProjectionBottomSheet.OnMercatorSelectedListener;\n+import net.osmand.plus.mapsource.TileStorageFormatBottomSheet.OnTileStorageFormatSelectedListener;\n+import net.osmand.util.Algorithms;\n+\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.logging.Log;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import static net.osmand.plus.download.ui.LocalIndexesFragment.renameSQLiteFile;\n+\n+public class EditMapSourceDialogFragment extends BaseOsmAndDialogFragment\n+\t\timplements OnZoomSetListener, OnExpireValueSetListener, OnMercatorSelectedListener,\n+\t\tOnTileStorageFormatSelectedListener {\n+\n+\tpublic static final String TAG = EditMapSourceDialogFragment.class.getName();\n+\tstatic final int EXPIRE_TIME_NEVER = -1;\n+\tprivate static final Log LOG = PlatformUtil.getLog(EditMapSourceDialogFragment.class);\n+\tprivate static final String MAPS_PLUGINS_URL = \"https://osmand.net/features/online-maps-plugin\";\n+\tprivate static final String PNG_EXT = \"png\";\n+\tprivate static final int MAX_ZOOM = 17;\n+\tprivate static final int MIN_ZOOM = 5;\n+\tprivate static final int TILE_SIZE = 256;\n+\tprivate static final int BIT_DENSITY = 16;\n+\tprivate static final int AVG_SIZE = 32000;\n+\tprivate static final String EDIT_LAYER_NAME_KEY = \"edit_layer_name_key\";\n+\tprivate static final String MIN_ZOOM_KEY = \"min_zoom_key\";\n+\tprivate static final String MAX_ZOOM_KEY = \"max_zoom_key\";\n+\tprivate static final String EXPIRE_TIME_KEY = \"expire_time_key\";\n+\tprivate static final String ELLIPTIC_KEY = \"elliptic_key\";\n+\tprivate static final String SQLITE_DB_KEY = \"sqlite_db_key\";\n+\tprivate OsmandApplication app;\n+\tprivate TextInputEditText nameEditText;\n+\tprivate TextInputEditText urlEditText;\n+\tprivate LinearLayout contentContainer;\n+\tprivate FrameLayout saveBtn;\n+\tprivate TextView saveBtnTitle;\n+\tprivate TileSourceManager.TileSourceTemplate template;\n+\t@Nullable\n+\tprivate String editedLayerName;\n+\tprivate String urlToLoad = \"\";\n+\tprivate int minZoom = MIN_ZOOM;\n+\tprivate int maxZoom = MAX_ZOOM;\n+\tprivate int expireTimeMinutes = EXPIRE_TIME_NEVER;\n+\tprivate boolean elliptic = false;\n+\tprivate boolean sqliteDB = false;\n+\tprivate boolean nightMode;\n+\n+\tpublic static void showInstance(@NonNull FragmentManager fm,\n+\t\t\t\t\t\t\t\t\t@Nullable Fragment targetFragment,\n+\t\t\t\t\t\t\t\t\t@Nullable String editedLayerName) {\n+\t\tEditMapSourceDialogFragment fragment = new EditMapSourceDialogFragment();\n+\t\tfragment.setTargetFragment(targetFragment, 0);\n+\t\tfragment.setEditedLayerName(editedLayerName);\n+\t\tfragment.show(fm, TAG);\n+\t}\n+\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tapp = getMyApplication();\n+\t\tnightMode = !app.getSettings().isLightContent();\n+\t}\n+\n+\t@Override\n+\tpublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+\t\tif (savedInstanceState != null) {\n+\t\t\teditedLayerName = savedInstanceState.getString(EDIT_LAYER_NAME_KEY);\n+\t\t\tminZoom = savedInstanceState.getInt(MIN_ZOOM_KEY);\n+\t\t\tmaxZoom = savedInstanceState.getInt(MAX_ZOOM_KEY);\n+\t\t\texpireTimeMinutes = savedInstanceState.getInt(EXPIRE_TIME_KEY);\n+\t\t\telliptic = savedInstanceState.getBoolean(ELLIPTIC_KEY);\n+\t\t\tsqliteDB = savedInstanceState.getBoolean(SQLITE_DB_KEY);\n+\t\t}\n+\t\tView root = UiUtilities.getMaterialInflater(app, nightMode).inflate(R.layout.fragment_edit_map_source, container, false);\n+\t\tToolbar toolbar = root.findViewById(R.id.toolbar);\n+\t\tImageButton iconHelp = root.findViewById(R.id.toolbar_action);\n+\t\tDrawable closeDrawable = app.getUIUtilities().getIcon(AndroidUtils.getNavigationIconResId(app),\n+\t\t\t\tnightMode ? R.color.active_buttons_and_links_text_dark : R.color.active_buttons_and_links_text_light);\n+\t\tDrawable helpDrawable = app.getUIUtilities().getIcon(R.drawable.ic_action_help,\n+\t\t\t\tnightMode ? R.color.active_buttons_and_links_text_dark : R.color.active_buttons_and_links_text_light);\n+\t\ticonHelp.setImageDrawable(helpDrawable);\n+\t\ticonHelp.setOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View view) {\n+\t\t\t\tonHelpClick();\n+\t\t\t}\n+\t\t});\n+\t\ttoolbar.setNavigationIcon(closeDrawable);\n+\t\ttoolbar.setNavigationContentDescription(R.string.shared_string_close);\n+\t\ttoolbar.setNavigationOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View v) {\n+\t\t\t\tshowExitDialog();\n+\t\t\t}\n+\t\t});\n+\t\tint boxStrokeColor = nightMode\n+\t\t\t\t? ContextCompat.getColor(app, R.color.app_bar_color_light)\n+\t\t\t\t: ContextCompat.getColor(app, R.color.active_buttons_and_links_bg_pressed_dark);\n+\t\tTextInputLayout nameInputLayout = root.findViewById(R.id.name_input_layout);\n+\t\tnameInputLayout.setBoxStrokeColor(boxStrokeColor);\n+\t\tnameEditText = root.findViewById(R.id.name_edit_text);\n+\t\tTextInputLayout urlInputLayout = root.findViewById(R.id.url_input_layout);\n+\t\turlInputLayout.setBoxStrokeColor(boxStrokeColor);\n+\t\turlEditText = root.findViewById(R.id.url_edit_text);\n+\t\tnameEditText.addTextChangedListener(getTextWatcher());\n+\t\turlEditText.addTextChangedListener(getTextWatcher());\n+\t\tcontentContainer = root.findViewById(R.id.content_container);\n+\t\tsaveBtn = root.findViewById(R.id.save_button);\n+\t\tsaveBtnTitle = root.findViewById(R.id.save_button_title);\n+\t\tsaveBtn.setOnClickListener(new View.OnClickListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View view) {\n+\t\t\t\tsaveTemplate();\n+\t\t\t\tdismiss();\n+\t\t\t}\n+\t\t});\n+\t\ttemplate = new TileSourceManager.TileSourceTemplate(\"\", \"\", PNG_EXT, MAX_ZOOM, MIN_ZOOM, TILE_SIZE, BIT_DENSITY, AVG_SIZE);\n+\t\tif (editedLayerName != null) {\n+\t\t\tif (!editedLayerName.endsWith(IndexConstants.SQLITE_EXT)) {\n+\t\t\t\tFile f = app.getAppPath(IndexConstants.TILES_INDEX_DIR + editedLayerName);\n+\t\t\t\ttemplate = TileSourceManager.createTileSourceTemplate(f);\n+\t\t\t\tsqliteDB = false;\n+\t\t\t} else {\n+\t\t\t\tList<TileSourceManager.TileSourceTemplate> knownTemplates = TileSourceManager.getKnownSourceTemplates();\n+\t\t\t\tFile tPath = app.getAppPath(IndexConstants.TILES_INDEX_DIR);\n+\t\t\t\tFile dir = new File(tPath, editedLayerName);\n+\t\t\t\tSQLiteTileSource sqLiteTileSource = new SQLiteTileSource(app, dir, knownTemplates);\n+\t\t\t\tsqLiteTileSource.couldBeDownloadedFromInternet();\n+\t\t\t\ttemplate = new TileSourceManager.TileSourceTemplate(sqLiteTileSource.getName(),\n+\t\t\t\t\t\tsqLiteTileSource.getUrlTemplate(), PNG_EXT, sqLiteTileSource.getMaximumZoomSupported(),\n+\t\t\t\t\t\tsqLiteTileSource.getMinimumZoomSupported(), sqLiteTileSource.getTileSize(),\n+\t\t\t\t\t\tsqLiteTileSource.getBitDensity(), AVG_SIZE);\n+\t\t\t\ttemplate.setExpirationTimeMinutes(sqLiteTileSource.getExpirationTimeMinutes());\n+\t\t\t\ttemplate.setEllipticYTile(sqLiteTileSource.isEllipticYTile());\n+\t\t\t\tsqliteDB = true;\n+\t\t\t}\n+\t\t}\n+\t\tif (savedInstanceState == null) {\n+\t\t\turlToLoad = template.getUrlTemplate();\n+\t\t\texpireTimeMinutes = template.getExpirationTimeMinutes();\n+\t\t\tminZoom = template.getMinimumZoomSupported();\n+\t\t\tmaxZoom = template.getMaximumZoomSupported();\n+\t\t\telliptic = template.isEllipticYTile();\n+\t\t}\n+\t\tupdateUi();\n+\t\treturn root;\n+\t}\n+\n+\t@Override\n+\tpublic void onSaveInstanceState(@NonNull Bundle outState) {\n+\t\toutState.putString(EDIT_LAYER_NAME_KEY, editedLayerName);\n+\t\toutState.putInt(MIN_ZOOM_KEY, minZoom);\n+\t\toutState.putInt(MAX_ZOOM_KEY, maxZoom);\n+\t\toutState.putInt(EXPIRE_TIME_KEY, expireTimeMinutes);\n+\t\toutState.putBoolean(ELLIPTIC_KEY, elliptic);\n+\t\toutState.putBoolean(SQLITE_DB_KEY, sqliteDB);\n+\t\tsuper.onSaveInstanceState(outState);\n+\t}\n+\n+\t@Override\n+\tpublic void onResume() {\n+\t\tsuper.onResume();\n+\t\tDialog dialog = getDialog();\n+\t\tif (dialog != null) {\n+\t\t\tdialog.setOnKeyListener(new DialogInterface.OnKeyListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n+\t\t\t\t\tif (keyCode == android.view.KeyEvent.KEYCODE_BACK) {\n+\t\t\t\t\t\tif (event.getAction() == KeyEvent.ACTION_DOWN) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tshowExitDialog();\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onZoomSet(int min, int max) {\n+\t\t\tminZoom = min;\n+\t\t\tmaxZoom = max;\n+\t\t\tupdateDescription(ConfigurationItem.ZOOM_LEVELS);\n+\t}\n+\n+\t@Override\n+\tpublic void onExpireValueSet(int expireValue) {\n+\t\t\texpireTimeMinutes = expireValue;\n+\t\t\tupdateDescription(ConfigurationItem.EXPIRE_TIME);\n+\t}\n+\n+\t@Override\n+\tpublic void onMercatorSelected(boolean elliptic) {\n+\t\tif (isAdded()) {\n+\t\t\tthis.elliptic = elliptic;\n+\t\t\tupdateDescription(ConfigurationItem.MERCATOR_PROJECTION);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onStorageFormatSelected(boolean sqliteDb) {\n+\t\tif (isAdded()) {\n+\t\t\tthis.sqliteDB = sqliteDb;\n+\t\t\tupdateDescription(ConfigurationItem.STORAGE_FORMAT);\n+\t\t}\n+\t}\n+\n+\tprivate TextWatcher getTextWatcher() {\n+\t\treturn new TextWatcher() {\n+\t\t\t@Override\n+\t\t\tpublic void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n+\t\t\t\tString s = charSequence.toString();\n+\t\t\t\tif (Algorithms.isEmpty(s)) {\n+\t\t\t\t\tsaveBtn.setEnabled(false);\n+\t\t\t\t\tsaveBtnTitle.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tsaveBtn.setEnabled(true);\n+\t\t\t\t\tsaveBtnTitle.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void afterTextChanged(Editable editable) {\n+\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tprivate void saveTemplate() {\n+\t\ttry {\n+\t\t\tString newName = nameEditText.getText().toString();\n+\t\t\tString urlToLoad = urlEditText.getText().toString();\n+\t\t\ttemplate.setName(newName);\n+\t\t\ttemplate.setUrlToLoad(urlToLoad.isEmpty() ? null : urlToLoad.replace(\"{$x}\", \"{1}\").replace(\"{$y}\", \"{2}\").replace(\"{$z}\", \"{0}\"));\n+\t\t\ttemplate.setMinZoom(minZoom);\n+\t\t\ttemplate.setMaxZoom(maxZoom);\n+\t\t\ttemplate.setEllipticYTile(elliptic);\n+\t\t\ttemplate.setExpirationTimeMinutes(expireTimeMinutes);\n+\t\t\tFile f = app.getAppPath(IndexConstants.TILES_INDEX_DIR + editedLayerName);\n+\t\t\tif (f.exists()) {\n+\t\t\t\tint extIndex = f.getName().lastIndexOf('.');\n+\t\t\t\tString ext = extIndex == -1 ? \"\" : f.getName().substring(extIndex);\n+\t\t\t\tString originalName = extIndex == -1 ? f.getName() : f.getName().substring(0, extIndex);\n+\t\t\t\tif (!Algorithms.objectEquals(newName, originalName)) {\n+\t\t\t\t\tif (IndexConstants.SQLITE_EXT.equals(ext) && sqliteDB) {\n+\t\t\t\t\t\trenameSQLiteFile(app, f, newName, null);\n+\t\t\t\t\t} else if (!sqliteDB) {\n+\t\t\t\t\t\tf.renameTo(app.getAppPath(IndexConstants.TILES_INDEX_DIR + newName));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (sqliteDB) {\n+\t\t\t\tif (!f.exists() || f.isDirectory()) {\n+\t\t\t\t\tSQLiteTileSource sqLiteTileSource =\n+\t\t\t\t\t\t\tnew SQLiteTileSource(app, newName, minZoom,\n+\t\t\t\t\t\t\t\t\tmaxZoom, urlToLoad, \"0,1,2,3\",", "originalCommit": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f69dc384dc4b7652540458e0a7604a97b60480d8", "url": "https://github.com/osmandapp/OsmAnd/commit/f69dc384dc4b7652540458e0a7604a97b60480d8", "message": "refactor LocalIndexesFragment", "committedDate": "2020-05-28T08:43:03Z", "type": "commit"}, {"oid": "88d3dc12eebfb84b4e3f5e8538222df2a1ca67cf", "url": "https://github.com/osmandapp/OsmAnd/commit/88d3dc12eebfb84b4e3f5e8538222df2a1ca67cf", "message": "refactor EditMapSourceDialogFragment", "committedDate": "2020-05-28T09:11:14Z", "type": "commit"}, {"oid": "0e93d406669788d3c3bad529d5deb6c3bee8f6f4", "url": "https://github.com/osmandapp/OsmAnd/commit/0e93d406669788d3c3bad529d5deb6c3bee8f6f4", "message": "refactor renameFile", "committedDate": "2020-05-28T10:14:05Z", "type": "commit"}, {"oid": "fac931e801cbc9ebe19b30b01576c40135283e5f", "url": "https://github.com/osmandapp/OsmAnd/commit/fac931e801cbc9ebe19b30b01576c40135283e5f", "message": "refactor SQLiteTileSource and FileUtils", "committedDate": "2020-05-28T11:55:40Z", "type": "commit"}, {"oid": "848eb2cfbee61c2102d57773212ffb5600c7ea29", "url": "https://github.com/osmandapp/OsmAnd/commit/848eb2cfbee61c2102d57773212ffb5600c7ea29", "message": "refactor", "committedDate": "2020-05-28T12:32:20Z", "type": "commit"}, {"oid": "1bb9aa16496fdcf48385361afc1670c323167eeb", "url": "https://github.com/osmandapp/OsmAnd/commit/1bb9aa16496fdcf48385361afc1670c323167eeb", "message": "small refactor", "committedDate": "2020-05-28T14:35:25Z", "type": "commit"}]}