{"pr_number": 3473, "pr_title": "Improve the documentation of Receiver", "pr_createdAt": "2020-07-14T03:28:20Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3473", "timeline": [{"oid": "2d364fe1ca73ad512fb1b8295a5dcb0f4a64d924", "url": "https://github.com/typetools/checker-framework/commit/2d364fe1ca73ad512fb1b8295a5dcb0f4a64d924", "message": "Improve the documentation of Receiver", "committedDate": "2020-07-13T23:13:29Z", "type": "commit"}, {"oid": "d69d9a0d2ac87366159b25add077728e76c49203", "url": "https://github.com/typetools/checker-framework/commit/d69d9a0d2ac87366159b25add077728e76c49203", "message": "Clarifications", "committedDate": "2020-07-13T23:28:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454478378", "bodyText": "Our \"Java\" expression language supports #1, but it is parsed into a LocalVariable.  So this comment here doesn't really make sense.", "author": "smillst", "createdAt": "2020-07-14T16:19:12Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,8 +447,22 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * The poorly-named Receiver class is actually a Java AST. Each subclass represents a different\n-     * type of expression, such as MethodCall, ArrayAccess, LocalVariable, etc.\n+     * This class represents a Java expression and its type. However, it does not represent all\n+     * possible Java expressions (for example, it does not represent a ternary expression; use\n+     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports", "originalCommit": "d69d9a0d2ac87366159b25add077728e76c49203", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzk3Ng==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454503976", "bodyText": "@smillst Can you clarify your concern?  Do you mean that it doesn't make sense to call #1 a formal parameter?  From the perspective of a user that's what it is used for.  The Java compiler and JVM do treat formal parameters as local variables, but I think of that as an implementation detail.  Can you suggest alternate wording if this comment is misleading?", "author": "mernst", "createdAt": "2020-07-14T16:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMjI4Ng==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454512286", "bodyText": "The Javadoc seems to imply that there are Receiver classes for the extensions to the Java language, but there aren't.  #1 is represented by a local variable and <self> is  converted before parsing by the Lock Checker.", "author": "smillst", "createdAt": "2020-07-14T17:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNzI4NQ==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454537285", "bodyText": "Thanks for clarifying.", "author": "mernst", "createdAt": "2020-07-14T17:52:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA=="}], "type": "inlineReview"}, {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d", "url": "https://github.com/typetools/checker-framework/commit/1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d", "message": "Clarify how extensions are represented", "committedDate": "2020-07-14T17:51:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODM1MQ==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456688351", "bodyText": "From @smillst comment #3473 (comment) it sounds like <self> isn't handled here at all. So we probably should instead highlight such checker-specific extensions?", "author": "wmdietl", "createdAt": "2020-07-17T21:48:15Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "originalCommit": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwODM3Mw==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456708373", "bodyText": "I will remove the mention from here, since it is specific to Checker Framework syntax.", "author": "mernst", "createdAt": "2020-07-17T23:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODQyOQ==", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456688429", "bodyText": "Should the not be no?", "author": "wmdietl", "createdAt": "2020-07-17T21:48:32Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "originalCommit": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d8c1744f054739e8a62b02403f005fbbd6695336", "url": "https://github.com/typetools/checker-framework/commit/d8c1744f054739e8a62b02403f005fbbd6695336", "message": "Merge ../checker-framework-branch-master into receiver-documentation", "committedDate": "2020-07-17T22:54:11Z", "type": "commit"}, {"oid": "e9a7c26b5b2da5a72c2e2e98e81f159c1b604857", "url": "https://github.com/typetools/checker-framework/commit/e9a7c26b5b2da5a72c2e2e98e81f159c1b604857", "message": "Address code review feedback", "committedDate": "2020-07-17T23:02:58Z", "type": "commit"}, {"oid": "05f50b9cffd15ef01bbddc83844d41291c9891db", "url": "https://github.com/typetools/checker-framework/commit/05f50b9cffd15ef01bbddc83844d41291c9891db", "message": "Qualify support for self", "committedDate": "2020-07-20T15:21:44Z", "type": "commit"}]}