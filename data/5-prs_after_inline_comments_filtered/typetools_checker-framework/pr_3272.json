{"pr_number": 3272, "pr_title": "Add GenericAnnotatedTypeFactory#getExceptionalExitStore", "pr_createdAt": "2020-04-26T16:43:27Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3272", "timeline": [{"oid": "b03e275e926d5c6852fd0d741e193ef89ee5161a", "url": "https://github.com/typetools/checker-framework/commit/b03e275e926d5c6852fd0d741e193ef89ee5161a", "message": "Add GenericAnnotatedTypeFactory#getExceptionalExitStore", "committedDate": "2020-04-26T16:40:12Z", "type": "commit"}, {"oid": "bff58750ec45c4febe1707254b378cc370bc1127", "url": "https://github.com/typetools/checker-framework/commit/bff58750ec45c4febe1707254b378cc370bc1127", "message": "Remove assert.", "committedDate": "2020-04-26T16:44:13Z", "type": "commit"}, {"oid": "9fc12d105ffae82e08a2d7d40ebafd383094a8a4", "url": "https://github.com/typetools/checker-framework/commit/9fc12d105ffae82e08a2d7d40ebafd383094a8a4", "message": "Correct javadoc.", "committedDate": "2020-04-26T16:47:12Z", "type": "commit"}, {"oid": "3f2aef667c41bc7319c874a9a46e704a56f5ab29", "url": "https://github.com/typetools/checker-framework/commit/3f2aef667c41bc7319c874a9a46e704a56f5ab29", "message": "Fix.", "committedDate": "2020-04-26T16:48:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ1Nzc0NQ==", "url": "https://github.com/typetools/checker-framework/pull/3272#discussion_r415457745", "bodyText": "It looks like that method implementation needs to be improved to me closer to how getRegularExitStore is implemented.", "author": "wmdietl", "createdAt": "2020-04-27T01:50:31Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1195,13 +1224,21 @@ protected void analyze(\n             if (regularExitStore != null) {\n                 regularExitStores.put(method, regularExitStore);\n             }\n+            Store exceptionalExitStore = analysis.getExceptionalExitStore();", "originalCommit": "3f2aef667c41bc7319c874a9a46e704a56f5ab29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d494aae8d98bd28e4a25ebb572a16f70adac09ad", "url": "https://github.com/typetools/checker-framework/commit/d494aae8d98bd28e4a25ebb572a16f70adac09ad", "message": "Merge branch 'master' into exceptionalExit", "committedDate": "2020-04-29T19:52:24Z", "type": "commit"}, {"oid": "84aa27688e5452bc436752dd7de98d350ebab898", "url": "https://github.com/typetools/checker-framework/commit/84aa27688e5452bc436752dd7de98d350ebab898", "message": "Fix NPE.", "committedDate": "2020-04-29T19:53:59Z", "type": "commit"}, {"oid": "8964a623f01619c8d38083959fd71e2f6a9d124c", "url": "https://github.com/typetools/checker-framework/commit/8964a623f01619c8d38083959fd71e2f6a9d124c", "message": "Add annotation.", "committedDate": "2020-04-30T14:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjEwNg==", "url": "https://github.com/typetools/checker-framework/pull/3272#discussion_r418302106", "bodyText": "We don't check postconditions on exception exit. JML would have syntax for that, if I remember correctly. But here we only check postconditions on regular exits.", "author": "wmdietl", "createdAt": "2020-04-30T21:33:59Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -828,6 +830,12 @@ public AnnotationMirror getAnnotationMirrorFromJavaExpressionString(\n      */\n     protected IdentityHashMap<Tree, Store> regularExitStores;\n \n+    /**\n+     * A mapping from methods (or other code blocks) to their exceptional exit store (used to check", "originalCommit": "8964a623f01619c8d38083959fd71e2f6a9d124c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjY4Nw==", "url": "https://github.com/typetools/checker-framework/pull/3272#discussion_r418302687", "bodyText": "The their the part is odd.", "author": "wmdietl", "createdAt": "2020-04-30T21:35:09Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -842,14 +850,34 @@ public AnnotationMirror getAnnotationMirrorFromJavaExpressionString(\n      * Returns the regular exit store for a method or another code block (such as static\n      * initializers).\n      *\n+     * @param tree a MethodTree or other code block, such as a static initializer\n      * @return the regular exit store, or {@code null}, if there is no such store (because the\n      *     method cannot exit through the regular exit block).\n      */\n-    public @Nullable Store getRegularExitStore(Tree t) {\n-        return regularExitStores.get(t);\n+    public @Nullable Store getRegularExitStore(Tree tree) {\n+        return regularExitStores.get(tree);\n+    }\n+\n+    /**\n+     * Returns the exceptional exit store for a method or another code block (such as static\n+     * initializers).\n+     *\n+     * @param tree a MethodTree or other code block, such as a static initializer\n+     * @return the exceptional exit store, or {@code null}, if there is no such store.\n+     */\n+    public @Nullable Store getExceptionalExitStore(Tree tree) {\n+        return exceptionalExitStores.get(tree);\n     }\n \n-    /** @return all return node and store pairs for a given method */\n+    /**\n+     * Returns a list of all return statements of {@code method} paired with their the corresponding", "originalCommit": "8964a623f01619c8d38083959fd71e2f6a9d124c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzAwMg==", "url": "https://github.com/typetools/checker-framework/pull/3272#discussion_r418303002", "bodyText": "Also a their the.", "author": "wmdietl", "createdAt": "2020-04-30T21:35:55Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -842,14 +850,34 @@ public AnnotationMirror getAnnotationMirrorFromJavaExpressionString(\n      * Returns the regular exit store for a method or another code block (such as static\n      * initializers).\n      *\n+     * @param tree a MethodTree or other code block, such as a static initializer\n      * @return the regular exit store, or {@code null}, if there is no such store (because the\n      *     method cannot exit through the regular exit block).\n      */\n-    public @Nullable Store getRegularExitStore(Tree t) {\n-        return regularExitStores.get(t);\n+    public @Nullable Store getRegularExitStore(Tree tree) {\n+        return regularExitStores.get(tree);\n+    }\n+\n+    /**\n+     * Returns the exceptional exit store for a method or another code block (such as static\n+     * initializers).\n+     *\n+     * @param tree a MethodTree or other code block, such as a static initializer\n+     * @return the exceptional exit store, or {@code null}, if there is no such store.\n+     */\n+    public @Nullable Store getExceptionalExitStore(Tree tree) {\n+        return exceptionalExitStores.get(tree);\n     }\n \n-    /** @return all return node and store pairs for a given method */\n+    /**\n+     * Returns a list of all return statements of {@code method} paired with their the corresponding\n+     * {@link TransferResult}. If {@code method} has no return statement, then the empty list is\n+     * returned.\n+     *\n+     * @param methodTree method whose return statements should be returned\n+     * @return a list of all return statements of {@code method} paired with their the corresponding", "originalCommit": "8964a623f01619c8d38083959fd71e2f6a9d124c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d30af8cb9688d45ed9b54a2a47a5bdb07107ae03", "url": "https://github.com/typetools/checker-framework/commit/d30af8cb9688d45ed9b54a2a47a5bdb07107ae03", "message": "Correct Javadoc.", "committedDate": "2020-05-01T19:20:11Z", "type": "commit"}]}