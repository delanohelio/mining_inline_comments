{"pr_number": 10117, "pr_title": "Closing yielder from ParallelMergeCombiningSequence should trigger cancellation", "pr_createdAt": "2020-07-01T07:14:47Z", "pr_url": "https://github.com/apache/druid/pull/10117", "timeline": [{"oid": "4f818f5db76b3441d5b75e8aa1bab8930ac9906c", "url": "https://github.com/apache/druid/commit/4f818f5db76b3441d5b75e8aa1bab8930ac9906c", "message": "cancel parallel merge combine sequence on yielder close", "committedDate": "2020-07-01T06:40:06Z", "type": "commit"}, {"oid": "9ea92e66fe75099f7b802266a27b4ef846018fc9", "url": "https://github.com/apache/druid/commit/9ea92e66fe75099f7b802266a27b4ef846018fc9", "message": "finish incomplete comment", "committedDate": "2020-07-01T06:44:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjc2OA==", "url": "https://github.com/apache/druid/pull/10117#discussion_r448502768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (RuntimeException rex) {\n          \n          \n            \n                }\n          \n          \n            \n                catch (RuntimeException rex) {", "author": "jihoonson", "createdAt": "2020-07-01T17:09:08Z", "path": "core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java", "diffHunk": "@@ -611,6 +637,86 @@ private void assertResult(\n     Assert.assertEquals(0, pool.getRunningThreadCount());\n     combiningYielder.close();\n     parallelMergeCombineYielder.close();\n+    // cancellation trigger should not be set if sequence was fully yielded and close is called\n+    // (though shouldn't actually matter even if it was...)\n+    Assert.assertFalse(parallelMergeCombineSequence.getCancellationGizmo().isCancelled());\n+  }\n+\n+  private void assertResultWithEarlyClose(\n+      List<Sequence<IntPair>> sequences,\n+      int batchSize,\n+      int yieldAfter,\n+      int closeYielderAfter,\n+      Consumer<ParallelMergeCombiningSequence.MergeCombineMetrics> reporter\n+  )\n+      throws InterruptedException, IOException\n+  {\n+    final CombiningSequence<IntPair> combiningSequence = CombiningSequence.create(\n+        new MergeSequence<>(INT_PAIR_ORDERING, Sequences.simple(sequences)),\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN\n+    );\n+\n+    final ParallelMergeCombiningSequence<IntPair> parallelMergeCombineSequence = new ParallelMergeCombiningSequence<>(\n+        pool,\n+        sequences,\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN,\n+        true,\n+        5000,\n+        0,\n+        TEST_POOL_SIZE,\n+        yieldAfter,\n+        batchSize,\n+        ParallelMergeCombiningSequence.DEFAULT_TASK_TARGET_RUN_TIME_MILLIS,\n+        reporter\n+    );\n+\n+    Yielder<IntPair> combiningYielder = Yielders.each(combiningSequence);\n+    Yielder<IntPair> parallelMergeCombineYielder = Yielders.each(parallelMergeCombineSequence);\n+\n+    IntPair prev = null;\n+\n+    int yields = 0;\n+    while (!combiningYielder.isDone() && !parallelMergeCombineYielder.isDone()) {\n+      if (yields >= closeYielderAfter) {\n+        parallelMergeCombineYielder.close();\n+        combiningYielder.close();\n+        break;\n+      } else {\n+        yields++;\n+        Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+        Assert.assertNotEquals(parallelMergeCombineYielder.get(), prev);\n+        prev = parallelMergeCombineYielder.get();\n+        combiningYielder = combiningYielder.next(combiningYielder.get());\n+        parallelMergeCombineYielder = parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      }\n+    }\n+    // trying to next the yielder creates sadness for you\n+    final String expectedExceptionMsg = \"Already closed\";\n+    try {\n+      Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+      parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      // this should explode so the contradictory next statement should not be reached\n+      Assert.assertTrue(false);\n+    } catch (RuntimeException rex) {", "originalCommit": "9ea92e66fe75099f7b802266a27b4ef846018fc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6956a6447a80e5a05790d6912cb23e39230f943b", "url": "https://github.com/apache/druid/commit/6956a6447a80e5a05790d6912cb23e39230f943b", "message": "Update core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java\r\n\r\nFixes checkstyle", "committedDate": "2020-07-01T17:09:27Z", "type": "commit"}]}