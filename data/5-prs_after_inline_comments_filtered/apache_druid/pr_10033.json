{"pr_number": 10033, "pr_title": "Allow append to existing datasources when dynamic partitioning is used", "pr_createdAt": "2020-06-14T21:57:46Z", "pr_url": "https://github.com/apache/druid/pull/10033", "timeline": [{"oid": "edafd1617b27eff2eef812e46976930d75fd09e8", "url": "https://github.com/apache/druid/commit/edafd1617b27eff2eef812e46976930d75fd09e8", "message": "Fill in the core partition set size properly for batch ingestion with\ndynamic partitioning", "committedDate": "2020-06-10T00:19:40Z", "type": "commit"}, {"oid": "771eec1364aa3e2707a4c10d97cb372b15807842", "url": "https://github.com/apache/druid/commit/771eec1364aa3e2707a4c10d97cb372b15807842", "message": "Merge branch 'master' of github.com:apache/druid into dynamic-partition-atomic-update", "committedDate": "2020-06-10T00:21:58Z", "type": "commit"}, {"oid": "f1aeddb63487c4e646acc7b541fd00a3079479df", "url": "https://github.com/apache/druid/commit/f1aeddb63487c4e646acc7b541fd00a3079479df", "message": "incomplete javadoc", "committedDate": "2020-06-10T00:37:38Z", "type": "commit"}, {"oid": "42e37e2e85f58af0b0da4c7fcf6cfad29af4dadb", "url": "https://github.com/apache/druid/commit/42e37e2e85f58af0b0da4c7fcf6cfad29af4dadb", "message": "Address comments", "committedDate": "2020-06-10T23:51:06Z", "type": "commit"}, {"oid": "d5e197ea19b23d8cd68d61d9c5bb12da66a53332", "url": "https://github.com/apache/druid/commit/d5e197ea19b23d8cd68d61d9c5bb12da66a53332", "message": "fix tests", "committedDate": "2020-06-11T00:20:19Z", "type": "commit"}, {"oid": "99842f9d4793e185ab5c156ea1ff66b8ee187737", "url": "https://github.com/apache/druid/commit/99842f9d4793e185ab5c156ea1ff66b8ee187737", "message": "fix json serde, add tests", "committedDate": "2020-06-11T01:13:07Z", "type": "commit"}, {"oid": "b2222b9a6596a88a9f44aa966adc364ba087c10e", "url": "https://github.com/apache/druid/commit/b2222b9a6596a88a9f44aa966adc364ba087c10e", "message": "checkstyle", "committedDate": "2020-06-11T03:18:48Z", "type": "commit"}, {"oid": "f8ac529290320e64c4dd3e44a0c5d86f218397cd", "url": "https://github.com/apache/druid/commit/f8ac529290320e64c4dd3e44a0c5d86f218397cd", "message": "Set core partition set size for hash-partitioned segments properly in\nbatch ingestion", "committedDate": "2020-06-11T22:00:40Z", "type": "commit"}, {"oid": "4600bd689c3ab3e1580d7e531ff3751cf13b855a", "url": "https://github.com/apache/druid/commit/4600bd689c3ab3e1580d7e531ff3751cf13b855a", "message": "test for both parallel and single-threaded task", "committedDate": "2020-06-11T22:23:52Z", "type": "commit"}, {"oid": "7448773ca598453cc27308da38eca0929a2de337", "url": "https://github.com/apache/druid/commit/7448773ca598453cc27308da38eca0929a2de337", "message": "unused variables", "committedDate": "2020-06-11T22:56:03Z", "type": "commit"}, {"oid": "08e2635fe76a93377e219cec5963338ec748a0d5", "url": "https://github.com/apache/druid/commit/08e2635fe76a93377e219cec5963338ec748a0d5", "message": "fix test", "committedDate": "2020-06-12T00:39:13Z", "type": "commit"}, {"oid": "30cae0e323316f123c96b3db7023c0d68c0df4f6", "url": "https://github.com/apache/druid/commit/30cae0e323316f123c96b3db7023c0d68c0df4f6", "message": "unused imports", "committedDate": "2020-06-12T02:34:51Z", "type": "commit"}, {"oid": "5664a6c4d3324f343971f9f8f655cabe46cbfd1e", "url": "https://github.com/apache/druid/commit/5664a6c4d3324f343971f9f8f655cabe46cbfd1e", "message": "add hash/range buckets", "committedDate": "2020-06-13T07:48:09Z", "type": "commit"}, {"oid": "f2c9bf3631eb39eb755a300385d12e2afdc2eef0", "url": "https://github.com/apache/druid/commit/f2c9bf3631eb39eb755a300385d12e2afdc2eef0", "message": "some test adjustment and missing json serde", "committedDate": "2020-06-13T15:47:24Z", "type": "commit"}, {"oid": "af2b6958752674affa4a7e05019263eafe07cb0e", "url": "https://github.com/apache/druid/commit/af2b6958752674affa4a7e05019263eafe07cb0e", "message": "centralized partition id allocation in parallel and simple tasks", "committedDate": "2020-06-13T20:37:06Z", "type": "commit"}, {"oid": "209ad92b4d62f946565af2abf59c8b33e90a53de", "url": "https://github.com/apache/druid/commit/209ad92b4d62f946565af2abf59c8b33e90a53de", "message": "Merge branch 'master' of github.com:apache/druid into hash-partition-core-set", "committedDate": "2020-06-13T20:47:34Z", "type": "commit"}, {"oid": "ae87c94af7f3e95fd4c3e060ac5c794decb24e73", "url": "https://github.com/apache/druid/commit/ae87c94af7f3e95fd4c3e060ac5c794decb24e73", "message": "remove string partition chunk", "committedDate": "2020-06-13T21:19:21Z", "type": "commit"}, {"oid": "dbe705a9cfac40042b280530dace57ce8f12cd6e", "url": "https://github.com/apache/druid/commit/dbe705a9cfac40042b280530dace57ce8f12cd6e", "message": "revive string partition chunk", "committedDate": "2020-06-13T21:33:13Z", "type": "commit"}, {"oid": "71e23248749c98d209cdc6dfc8cd7c589db1bc18", "url": "https://github.com/apache/druid/commit/71e23248749c98d209cdc6dfc8cd7c589db1bc18", "message": "fill numCorePartitions for hadoop", "committedDate": "2020-06-13T21:40:18Z", "type": "commit"}, {"oid": "d6655afe81acba63caf0ea68a84f1466fb07b6dc", "url": "https://github.com/apache/druid/commit/d6655afe81acba63caf0ea68a84f1466fb07b6dc", "message": "clean up hash stuffs", "committedDate": "2020-06-13T22:15:07Z", "type": "commit"}, {"oid": "7d0d3b90918793f36681e6201985156df2a1ca7e", "url": "https://github.com/apache/druid/commit/7d0d3b90918793f36681e6201985156df2a1ca7e", "message": "resolved todos", "committedDate": "2020-06-13T22:21:40Z", "type": "commit"}, {"oid": "6cff5b86a07367b73d0e3f147366ffd3ecb01334", "url": "https://github.com/apache/druid/commit/6cff5b86a07367b73d0e3f147366ffd3ecb01334", "message": "javadocs", "committedDate": "2020-06-13T23:40:56Z", "type": "commit"}, {"oid": "07a9e1b984abb976e3105104400e22032a73748f", "url": "https://github.com/apache/druid/commit/07a9e1b984abb976e3105104400e22032a73748f", "message": "Fix tests", "committedDate": "2020-06-13T23:48:11Z", "type": "commit"}, {"oid": "6e0ac6ef7f396c42501dbb3b6786ae45486e0d45", "url": "https://github.com/apache/druid/commit/6e0ac6ef7f396c42501dbb3b6786ae45486e0d45", "message": "add more tests", "committedDate": "2020-06-14T00:02:56Z", "type": "commit"}, {"oid": "4a27771ffe6a0c6cf784d2516ece13a91d6f671c", "url": "https://github.com/apache/druid/commit/4a27771ffe6a0c6cf784d2516ece13a91d6f671c", "message": "doc", "committedDate": "2020-06-14T00:05:06Z", "type": "commit"}, {"oid": "7eaed9bdd649bfc571e5159dff4e758ba6935168", "url": "https://github.com/apache/druid/commit/7eaed9bdd649bfc571e5159dff4e758ba6935168", "message": "unused imports", "committedDate": "2020-06-14T01:14:10Z", "type": "commit"}, {"oid": "2db0a77acf690f15d8bcbb404aae391e7c59e7bf", "url": "https://github.com/apache/druid/commit/2db0a77acf690f15d8bcbb404aae391e7c59e7bf", "message": "Allow append to existing datasources when dynamic partitioing is used", "committedDate": "2020-06-14T21:34:49Z", "type": "commit"}, {"oid": "374a466a33e971933d53cf853001f986327b3873", "url": "https://github.com/apache/druid/commit/374a466a33e971933d53cf853001f986327b3873", "message": "fix test", "committedDate": "2020-06-14T21:57:54Z", "type": "commit"}, {"oid": "1106c92f4cc5fc02ce3b8e7eafd64607de3e556e", "url": "https://github.com/apache/druid/commit/1106c92f4cc5fc02ce3b8e7eafd64607de3e556e", "message": "checkstyle", "committedDate": "2020-06-14T22:31:29Z", "type": "commit"}, {"oid": "f109a5a0740c1c187b18a0974e6fe582b2ecc511", "url": "https://github.com/apache/druid/commit/f109a5a0740c1c187b18a0974e6fe582b2ecc511", "message": "checkstyle", "committedDate": "2020-06-14T22:41:38Z", "type": "commit"}, {"oid": "19d6546159123e2ab66feef5fbad6c82de749c8c", "url": "https://github.com/apache/druid/commit/19d6546159123e2ab66feef5fbad6c82de749c8c", "message": "fix test", "committedDate": "2020-06-14T22:47:17Z", "type": "commit"}, {"oid": "4d56a8870504bc88f822fd1842297a3eeeb5d2fe", "url": "https://github.com/apache/druid/commit/4d56a8870504bc88f822fd1842297a3eeeb5d2fe", "message": "fix test", "committedDate": "2020-06-15T00:55:41Z", "type": "commit"}, {"oid": "0475a63bbfe3b2a8b17ae976568d03c90fc79b60", "url": "https://github.com/apache/druid/commit/0475a63bbfe3b2a8b17ae976568d03c90fc79b60", "message": "fix other tests..", "committedDate": "2020-06-15T04:44:24Z", "type": "commit"}, {"oid": "4da2f8b11deea1fcc622473043d6b1e896eda049", "url": "https://github.com/apache/druid/commit/4da2f8b11deea1fcc622473043d6b1e896eda049", "message": "checkstyle", "committedDate": "2020-06-15T16:23:58Z", "type": "commit"}, {"oid": "f246bbbc298e33e1bf0cbdc63d0270b1813e2e70", "url": "https://github.com/apache/druid/commit/f246bbbc298e33e1bf0cbdc63d0270b1813e2e70", "message": "hansle unknown core partitions size in overlord segment allocation", "committedDate": "2020-06-15T21:39:37Z", "type": "commit"}, {"oid": "d85a49a12238ae70ee4a257d809a644eef55c2bd", "url": "https://github.com/apache/druid/commit/d85a49a12238ae70ee4a257d809a644eef55c2bd", "message": "fail to append when numCorePartitions is unknown", "committedDate": "2020-06-17T03:26:35Z", "type": "commit"}, {"oid": "5f48e446eceb5a14c057ed5a8b3c9d0232e23a7d", "url": "https://github.com/apache/druid/commit/5f48e446eceb5a14c057ed5a8b3c9d0232e23a7d", "message": "log", "committedDate": "2020-06-17T03:29:03Z", "type": "commit"}, {"oid": "4af415f9fd111c67570fb817b591a23616a3637a", "url": "https://github.com/apache/druid/commit/4af415f9fd111c67570fb817b591a23616a3637a", "message": "fix comment; rename to be more intuitive", "committedDate": "2020-06-17T16:46:21Z", "type": "commit"}, {"oid": "21dea745f28abba1ab96bbd05294662e56668c50", "url": "https://github.com/apache/druid/commit/21dea745f28abba1ab96bbd05294662e56668c50", "message": "double append test", "committedDate": "2020-06-18T20:16:47Z", "type": "commit"}, {"oid": "8dc81b52cd3c3783aa4ab13540e81e8bca709202", "url": "https://github.com/apache/druid/commit/8dc81b52cd3c3783aa4ab13540e81e8bca709202", "message": "Merge branch 'master' of github.com:apache/druid into append-dynamic", "committedDate": "2020-06-19T02:10:01Z", "type": "commit"}, {"oid": "402c2dc9d9b4b71fdf6e94389c51535ae6a634cd", "url": "https://github.com/apache/druid/commit/402c2dc9d9b4b71fdf6e94389c51535ae6a634cd", "message": "cleanup complete(); add tests", "committedDate": "2020-06-23T17:59:07Z", "type": "commit"}, {"oid": "92a6e901f4d09612ceab0f4eddce1afb5feeebf8", "url": "https://github.com/apache/druid/commit/92a6e901f4d09612ceab0f4eddce1afb5feeebf8", "message": "fix build", "committedDate": "2020-06-23T20:19:31Z", "type": "commit"}, {"oid": "b423e964d258d2ba2f9760fa3224026157e98d0d", "url": "https://github.com/apache/druid/commit/b423e964d258d2ba2f9760fa3224026157e98d0d", "message": "add tests", "committedDate": "2020-06-24T04:36:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NjE5Mg==", "url": "https://github.com/apache/druid/pull/10033#discussion_r444696192", "bodyText": "just curious, this doesn't need to change, why does this test use new ObjectMapper() instead of MAPPER?", "author": "clintropolis", "createdAt": "2020-06-24T07:25:09Z", "path": "core/src/test/java/org/apache/druid/timeline/partition/HashBasedNumberedPartialShardSpecTest.java", "diffHunk": "@@ -73,5 +73,21 @@ public void testJsonPropertyNames() throws IOException\n     Assert.assertEquals(expected.getPartitionDimensions(), map.get(\"partitionDimensions\"));\n     Assert.assertEquals(expected.getBucketId(), map.get(\"bucketId\"));\n     Assert.assertEquals(expected.getNumBuckets(), map.get(\"numPartitions\"));\n+    Assert.assertEquals(expected.getBucketId(), map.get(\"bucketId\"));\n+  }\n+\n+  @Test\n+  public void testComplete()\n+  {\n+    final HashBasedNumberedPartialShardSpec partialShardSpec = new HashBasedNumberedPartialShardSpec(\n+        ImmutableList.of(\"dim\"),\n+        2,\n+        4\n+    );\n+    final ShardSpec shardSpec = partialShardSpec.complete(new ObjectMapper(), 1, 3);", "originalCommit": "b423e964d258d2ba2f9760fa3224026157e98d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDEyOA==", "url": "https://github.com/apache/druid/pull/10033#discussion_r445310128", "bodyText": "Ah, I didn't notice it while copying these tests \ud83d\ude05", "author": "jihoonson", "createdAt": "2020-06-25T05:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NjE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMzk5MA==", "url": "https://github.com/apache/druid/pull/10033#discussion_r444723990", "bodyText": "nit, typo: Segmens\n\"testAppendLinearlyPartitionedSegmentsToHashPartitionedDatasourceSuccessfullyAppend\"", "author": "clintropolis", "createdAt": "2020-06-24T08:17:42Z", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/RangePartitionMultiPhaseParallelIndexingTest.java", "diffHunk": "@@ -201,48 +208,122 @@ private static void writeRow(\n   public void createsCorrectRangePartitions() throws Exception\n   {\n     int targetRowsPerSegment = NUM_ROW / DIM_FILE_CARDINALITY / NUM_PARTITION;\n-    final Set<DataSegment> publishedSegments;\n+    final Set<DataSegment> publishedSegments = runTestTask(\n+        new SingleDimensionPartitionsSpec(\n+            targetRowsPerSegment,\n+            null,\n+            DIM1,\n+            false\n+        ),\n+        useMultivalueDim ? TaskState.FAILED : TaskState.SUCCESS,\n+        false\n+    );\n+\n+    if (!useMultivalueDim) {\n+      assertRangePartitions(publishedSegments);\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendLinearlyPartitionedSegmensToHashPartitionedDatasourceSuccessfullyAppend()", "originalCommit": "b423e964d258d2ba2f9760fa3224026157e98d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDE1Ng==", "url": "https://github.com/apache/druid/pull/10033#discussion_r445310156", "bodyText": "Thanks \ud83d\udc4d", "author": "jihoonson", "createdAt": "2020-06-25T05:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMzk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNzgwNQ==", "url": "https://github.com/apache/druid/pull/10033#discussion_r444727805", "bodyText": "How do we end up with these mixed shard spec situations, minor compaction? Like I understand why these evaluate to true given how the checks work, just trying to understand how it happens since afaict only dynamic can be appended.", "author": "clintropolis", "createdAt": "2020-06-24T08:24:21Z", "path": "server/src/test/java/org/apache/druid/server/shard/SingleDimensionShardSpecTest.java", "diffHunk": "@@ -142,6 +146,16 @@ public void testPossibleInDomain()\n     Assert.assertTrue(shard7.possibleInDomain(domain2));\n   }\n \n+  @Test\n+  public void testSharePartitionSpace()\n+  {\n+    final SingleDimensionShardSpec shardSpec = makeSpec(\"start\", \"end\");\n+    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n+    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n+    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));", "originalCommit": "b423e964d258d2ba2f9760fa3224026157e98d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDE3MA==", "url": "https://github.com/apache/druid/pull/10033#discussion_r445310170", "bodyText": "Your understanding is correct. I added HashBasedNumberedPartialShardSpec and SingleDimensionPartialShardSpec in #7547 but they are not in use yet. They will be used once we support append with non-dynamic or non-dynamic with segment locking.", "author": "jihoonson", "createdAt": "2020-06-25T05:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNzgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NjAzOQ==", "url": "https://github.com/apache/druid/pull/10033#discussion_r445196039", "bodyText": "Should this be partialShardSpec.useNonRootGenerationPartitionSpace(); instead of !partialShardSpec.useNonRootGenerationPartitionSpace(); ?", "author": "maytasm", "createdAt": "2020-06-24T22:00:04Z", "path": "core/src/main/java/org/apache/druid/timeline/partition/ShardSpec.java", "diffHunk": "@@ -125,8 +125,13 @@ default short getAtomicUpdateGroupSize()\n   boolean possibleInDomain(Map<String, RangeSet<String>> domain);\n \n   /**\n-   * Returns true if two segments of this and other shardSpecs can exist in the same time chunk.\n+   * Returns true if this shardSpec and the given {@link PartialShardSpec} share the same partition space.\n+   * Any implementation of {@link OverwriteShardSpec} should return true.\n+   *\n+   * @see PartitionIds\n    */\n-  @JsonIgnore\n-  boolean isCompatible(Class<? extends ShardSpec> other);\n+  default boolean sharePartitionSpace(PartialShardSpec partialShardSpec)\n+  {\n+    return !partialShardSpec.useNonRootGenerationPartitionSpace();", "originalCommit": "b423e964d258d2ba2f9760fa3224026157e98d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxODkwNQ==", "url": "https://github.com/apache/druid/pull/10033#discussion_r445218905", "bodyText": "Seems like the java doc for ShardSpec#sharePartitionSpace and OverwriteShardSpec#sharePartitionSpace should be updated", "author": "maytasm", "createdAt": "2020-06-24T23:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NjAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDE4Mw==", "url": "https://github.com/apache/druid/pull/10033#discussion_r445310183", "bodyText": "Ah, all ShardSpecs share the same root-generation partition space except OverwriteShardSpec. So, the current code is correct. I updated the javadoc to make it more clear.", "author": "jihoonson", "createdAt": "2020-06-25T05:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NjAzOQ=="}], "type": "inlineReview"}, {"oid": "b4e702bc1719e0101ad106ebd0ef437dc7ba6bbb", "url": "https://github.com/apache/druid/commit/b4e702bc1719e0101ad106ebd0ef437dc7ba6bbb", "message": "address comments", "committedDate": "2020-06-25T05:08:11Z", "type": "commit"}, {"oid": "9025e3beeb1471b1e767f08031aeb37ead68e809", "url": "https://github.com/apache/druid/commit/9025e3beeb1471b1e767f08031aeb37ead68e809", "message": "checkstyle", "committedDate": "2020-06-25T05:10:00Z", "type": "commit"}]}