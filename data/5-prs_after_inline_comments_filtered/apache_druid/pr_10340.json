{"pr_number": 10340, "pr_title": "Fix VARIANCE aggregator comparator", "pr_createdAt": "2020-09-01T23:56:29Z", "pr_url": "https://github.com/apache/druid/pull/10340", "timeline": [{"oid": "68d699095f3fa4a3dd3e153c0828250195ac150a", "url": "https://github.com/apache/druid/commit/68d699095f3fa4a3dd3e153c0828250195ac150a", "message": "Fix VARIANCE aggregator comparator\n\nThe comparator for the variance aggregator used to compare values using the\ncount. This is now fixed to compare values using the variance. If the variance\nis equal, the count and sum are used as tie breakers.", "committedDate": "2020-09-01T23:52:44Z", "type": "commit"}, {"oid": "68e50474d047c1510faca2debc7280c77b362d4d", "url": "https://github.com/apache/druid/commit/68e50474d047c1510faca2debc7280c77b362d4d", "message": "fix tests + sql compatible mode", "committedDate": "2020-09-02T04:57:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw==", "url": "https://github.com/apache/druid/pull/10340#discussion_r482515733", "bodyText": "Hmm, I wonder if this should be NullHandling.defaultDoubleValue().\nWill this just happen if nothing gets read?", "author": "gianm", "createdAt": "2020-09-02T21:59:11Z", "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "diffHunk": "@@ -239,7 +240,9 @@ public Comparator getComparator()\n   @Override\n   public Object finalizeComputation(@Nullable Object object)\n   {\n-    return object == null ? null : ((VarianceAggregatorCollector) object).getVariance(isVariancePop);\n+    return object == null || ((VarianceAggregatorCollector) object).count == 0\n+           ? null", "originalCommit": "68e50474d047c1510faca2debc7280c77b362d4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA2MzY5MA==", "url": "https://github.com/apache/druid/pull/10340#discussion_r483063690", "bodyText": "I think so. I was able to hit this bug because of VarianceSqlAggregatorTest#testVarianceOrderBy One of the columns had no value for a row that was being grouped on.\nI then read this comment in getVariance(...)\n// in SQL standard, we should return null for zero elements. But druid there should not be such a case\n\nwhich is why I returned null.\nI guess it could be nicer to return NullHandling.defaultDoubleValue() instead", "author": "suneet-s", "createdAt": "2020-09-03T15:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1ODc3Ng==", "url": "https://github.com/apache/druid/pull/10340#discussion_r483158776", "bodyText": "Ah, that comment is out of date. It used to be true but now timeseries queries can return a single row, SQL-style, even if there's no input data. There's a test for it in TImeseriesQueryRunnerTest -> testEmptyTimeseries. It looks like it's expecting NullHandling.defaultDoubleValue() for the aggregators it tests.", "author": "gianm", "createdAt": "2020-09-03T17:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MDIyNA==", "url": "https://github.com/apache/druid/pull/10340#discussion_r483160224", "bodyText": "I approved the patch, but please also change the comment to become accurate. Perhaps also include a test like the empty timeseries one I mentioned.", "author": "gianm", "createdAt": "2020-09-03T18:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDY0OA==", "url": "https://github.com/apache/druid/pull/10340#discussion_r483164648", "bodyText": "\ud83d\udc4d I'll add the test and push up a new patch", "author": "suneet-s", "createdAt": "2020-09-03T18:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODg4NQ==", "url": "https://github.com/apache/druid/pull/10340#discussion_r482518885", "bodyText": "Will this sort the same way as getVariance(isVariancePop) in finalizeComputation?", "author": "gianm", "createdAt": "2020-09-02T22:03:15Z", "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorCollector.java", "diffHunk": "@@ -60,11 +60,11 @@ public static VarianceAggregatorCollector from(ByteBuffer buffer)\n   }\n \n   public static final Comparator<VarianceAggregatorCollector> COMPARATOR = (o1, o2) -> {\n-    int compare = Longs.compare(o1.count, o2.count);\n+    int compare = Doubles.compare(o1.nvariance, o2.nvariance);", "originalCommit": "68e50474d047c1510faca2debc7280c77b362d4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA2MTI5Ng==", "url": "https://github.com/apache/druid/pull/10340#discussion_r483061296", "bodyText": "I think so. I based this on the comment against the nvariance variable\ndouble nvariance; // sum[x-avg^2] (this is actually n times of the variance)\n\ngetVariance(isVariancePop) looks like it divides by the count to get variance instead of n * variance.", "author": "suneet-s", "createdAt": "2020-09-03T15:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODg4NQ=="}], "type": "inlineReview"}, {"oid": "93d7b4b08275e0cc1766e9a5f3d397397beb9341", "url": "https://github.com/apache/druid/commit/93d7b4b08275e0cc1766e9a5f3d397397beb9341", "message": "Merge remote-tracking branch 'upstream/master' into variance", "committedDate": "2020-09-03T15:26:37Z", "type": "commit"}, {"oid": "8f50ff02d9b1db27e0623d60f46dfb8bee6b3947", "url": "https://github.com/apache/druid/commit/8f50ff02d9b1db27e0623d60f46dfb8bee6b3947", "message": "code review", "committedDate": "2020-09-03T15:31:12Z", "type": "commit"}, {"oid": "578a83034b28efdbe4d1a0827910b66267e2fa0f", "url": "https://github.com/apache/druid/commit/578a83034b28efdbe4d1a0827910b66267e2fa0f", "message": "more tests", "committedDate": "2020-09-03T22:19:28Z", "type": "commit"}, {"oid": "211531ac047186ef4d75091b1bcb8495e44ef47a", "url": "https://github.com/apache/druid/commit/211531ac047186ef4d75091b1bcb8495e44ef47a", "message": "fix last test", "committedDate": "2020-09-03T23:01:30Z", "type": "commit"}]}