{"pr_number": 9831, "pr_title": "Add equivalent test coverage for all RHS join impls", "pr_createdAt": "2020-05-06T07:52:06Z", "pr_url": "https://github.com/apache/druid/pull/9831", "timeline": [{"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab", "url": "https://github.com/apache/druid/commit/9f5110f8ccd5387c901d03a57981ba23c1fed1ab", "message": "Add equivalent test coverage for all RHS join impls", "committedDate": "2020-05-06T07:18:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0Njc4MQ==", "url": "https://github.com/apache/druid/pull/9831#discussion_r421046781", "bodyText": "Should this have remainderNeeded set to true like it's done in testCreateConditionAlwaysTrue()?", "author": "ccaominh", "createdAt": "2020-05-06T19:43:27Z", "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()\n+  {\n+    JoinConditionAnalysis condition = JoinConditionAnalysis.forExpression(\"0\", PREFIX, ExprMacroTable.nil());\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);", "originalCommit": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExODI5Mw==", "url": "https://github.com/apache/druid/pull/9831#discussion_r421118293", "bodyText": "Yes. Typo. Fixed", "author": "maytasm", "createdAt": "2020-05-06T22:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0Njc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0ODgwNg==", "url": "https://github.com/apache/druid/pull/9831#discussion_r421048806", "bodyText": "Is the idea that this should not throw an exception? If so, perhaps add that to the test name or add a comment.", "author": "ccaominh", "createdAt": "2020-05-06T19:47:00Z", "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()", "originalCommit": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExODM5OQ==", "url": "https://github.com/apache/druid/pull/9831#discussion_r421118399", "bodyText": "Done", "author": "maytasm", "createdAt": "2020-05-06T22:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0ODgwNg=="}], "type": "inlineReview"}, {"oid": "64ffb9180e8883c519ed84ed3f6bd906bb7d19d6", "url": "https://github.com/apache/druid/commit/64ffb9180e8883c519ed84ed3f6bd906bb7d19d6", "message": "address comments", "committedDate": "2020-05-06T22:01:24Z", "type": "commit"}]}