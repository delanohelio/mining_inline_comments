{"pr_number": 10388, "pr_title": "allow vectorized query engines to utilize vectorized virtual columns", "pr_createdAt": "2020-09-12T01:43:24Z", "pr_url": "https://github.com/apache/druid/pull/10388", "timeline": [{"oid": "2365aded617bcec332f4901e9eccdcf04e07eafe", "url": "https://github.com/apache/druid/commit/2365aded617bcec332f4901e9eccdcf04e07eafe", "message": "allow vectorized query engines to utilize vectorized virtual column implementations", "committedDate": "2020-09-12T01:33:53Z", "type": "commit"}, {"oid": "b88bd174add261800c2a34ef10553c78fd391034", "url": "https://github.com/apache/druid/commit/b88bd174add261800c2a34ef10553c78fd391034", "message": "javadoc, refactor, checkstyle", "committedDate": "2020-09-12T02:17:06Z", "type": "commit"}, {"oid": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e", "url": "https://github.com/apache/druid/commit/294b58a304248a6ccecd1aed2e3c6d2d7c57332e", "message": "intellij inspection and more javadoc", "committedDate": "2020-09-12T03:32:25Z", "type": "commit"}, {"oid": "8f9bfb58a801f2be561f2891a33b17ee46b7948c", "url": "https://github.com/apache/druid/commit/8f9bfb58a801f2be561f2891a33b17ee46b7948c", "message": "better", "committedDate": "2020-09-12T05:18:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2OTUzOA==", "url": "https://github.com/apache/druid/pull/10388#discussion_r487369538", "bodyText": "nit: using RangeIndexedInts may be simpler when reading code.", "author": "jihoonson", "createdAt": "2020-09-12T05:11:05Z", "path": "processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoVectorizedVirtualColumn.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.virtual;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.ColumnInspector;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.IdLookup;\n+import org.apache.druid.segment.VirtualColumn;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.data.IndexedInts;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class AlwaysTwoVectorizedVirtualColumn implements VirtualColumn\n+{\n+  private final String outputName;\n+  private final ColumnCapabilities capabilities;\n+  private final boolean dictionaryEncoded;\n+\n+  public AlwaysTwoVectorizedVirtualColumn(\n+      String name,\n+      ColumnCapabilities capabilites\n+  )\n+  {\n+    this.outputName = name;\n+    this.capabilities = capabilites;\n+    this.dictionaryEncoded = capabilites.isDictionaryEncoded().isTrue() &&\n+                             capabilites.areDictionaryValuesUnique().isTrue();\n+  }\n+\n+  @Override\n+  public boolean canVectorize(ColumnInspector inspector)\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public String getOutputName()\n+  {\n+    return outputName;\n+  }\n+\n+  @Override\n+  public DimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec, ColumnSelectorFactory factory)\n+  {\n+    throw new IllegalStateException(\"don't call this\");\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(String columnName, ColumnSelectorFactory factory)\n+  {\n+    throw new IllegalStateException(\"don't call this\");\n+  }\n+\n+  @Override\n+  public SingleValueDimensionVectorSelector makeSingleValueVectorDimensionSelector(\n+      DimensionSpec dimensionSpec,\n+      VectorColumnSelectorFactory factory\n+  )\n+  {\n+    return new SingleValueDimensionVectorSelector()\n+    {\n+      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n+      private final int[] rowVector = new int[inspector.getMaxVectorSize()];\n+\n+      @Override\n+      public int[] getRowVector()\n+      {\n+\n+        return rowVector;\n+      }\n+\n+      @Override\n+      public int getValueCardinality()\n+      {\n+        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n+      }\n+\n+      @Nullable\n+      @Override\n+      public String lookupName(int id)\n+      {\n+        return \"2\";\n+      }\n+\n+      @Override\n+      public boolean nameLookupPossibleInAdvance()\n+      {\n+        return dictionaryEncoded;\n+      }\n+\n+      @Nullable\n+      @Override\n+      public IdLookup idLookup()\n+      {\n+        return null;\n+      }\n+\n+      @Override\n+      public int getMaxVectorSize()\n+      {\n+        return inspector.getMaxVectorSize();\n+      }\n+\n+      @Override\n+      public int getCurrentVectorSize()\n+      {\n+        return inspector.getCurrentVectorSize();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public MultiValueDimensionVectorSelector makeMultiValueVectorDimensionSelector(\n+      DimensionSpec dimensionSpec,\n+      VectorColumnSelectorFactory factory\n+  )\n+  {\n+    final IndexedInts[] rowVector = new IndexedInts[factory.getVectorSizeInspector().getMaxVectorSize()];\n+    Arrays.fill(rowVector, new IndexedInts()", "originalCommit": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MDI5NQ==", "url": "https://github.com/apache/druid/pull/10388#discussion_r487370295", "bodyText": "It might be nice to add some Javaodc saying that the aggregator created by this factory verifies values read from vectorSelector as well as counting.", "author": "jihoonson", "createdAt": "2020-09-12T05:20:51Z", "path": "processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoCounterAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.virtual;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.aggregation.CountAggregatorFactory;\n+import org.apache.druid.query.aggregation.CountVectorAggregator;\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.data.IndexedInts;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.junit.Assert;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class AlwaysTwoCounterAggregatorFactory extends CountAggregatorFactory", "originalCommit": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b706ed0201efeb9508045b2080792bbdc86568b", "url": "https://github.com/apache/druid/commit/1b706ed0201efeb9508045b2080792bbdc86568b", "message": "review stuffs", "committedDate": "2020-09-12T05:39:52Z", "type": "commit"}, {"oid": "5920653d6a4f16e5b18a0b6da32809691b4863ba", "url": "https://github.com/apache/druid/commit/5920653d6a4f16e5b18a0b6da32809691b4863ba", "message": "fix incorrect refactor, thanks tests", "committedDate": "2020-09-12T08:06:18Z", "type": "commit"}, {"oid": "ad0419ce2d4e895acb804136653adcda32b5afe5", "url": "https://github.com/apache/druid/commit/ad0419ce2d4e895acb804136653adcda32b5afe5", "message": "minor adjustments", "committedDate": "2020-09-14T17:04:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODM1OQ==", "url": "https://github.com/apache/druid/pull/10388#discussion_r488348359", "bodyText": "How do you decide between columnCapabilities.hasMultipleValues().isFalse() and !columnCapabilities.hasMultipleValues().isMaybeTrue() - I'm never sure which one to check", "author": "suneet-s", "createdAt": "2020-09-15T02:41:11Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "diffHunk": "@@ -70,24 +73,47 @@ public static boolean canVectorize(\n       @Nullable final Filter filter\n   )\n   {\n-    // Multi-value dimensions are not yet supported.\n-    //\n-    // Two notes here about how we're handling this check:\n-    //   1) After multi-value dimensions are supported, we could alter \"GroupByQueryEngineV2.isAllSingleValueDims\"\n-    //      to accept a ColumnSelectorFactory, which makes more sense than using a StorageAdapter (see #8013).\n-    //   2) Technically using StorageAdapter here is bad since it only looks at real columns, but they might\n-    //      be shadowed by virtual columns (again, see #8013). But it's fine for now since adapter.canVectorize\n-    //      always returns false if there are any virtual columns.\n-    //\n-    // This situation should sort itself out pretty well once this engine supports multi-valued columns. Then we\n-    // won't have to worry about having this all-single-value-dims check here.\n-\n-    return GroupByQueryEngineV2.isAllSingleValueDims(adapter::getColumnCapabilities, query.getDimensions(), true)\n+    Function<String, ColumnCapabilities> capabilitiesFunction = name ->\n+        query.getVirtualColumns().getColumnCapabilitiesWithFallback(adapter, name);\n+\n+    return canVectorizeDimensions(capabilitiesFunction, query.getDimensions())\n            && query.getDimensions().stream().allMatch(DimensionSpec::canVectorize)\n            && query.getAggregatorSpecs().stream().allMatch(aggregatorFactory -> aggregatorFactory.canVectorize(adapter))\n            && adapter.canVectorize(filter, query.getVirtualColumns(), false);\n   }\n \n+  public static boolean canVectorizeDimensions(\n+      final Function<String, ColumnCapabilities> capabilitiesFunction,\n+      final List<DimensionSpec> dimensions\n+  )\n+  {\n+    return dimensions\n+        .stream()\n+        .allMatch(\n+            dimension -> {\n+              if (dimension.mustDecorate()) {\n+                // group by on multi value dimensions are not currently supported\n+                // DimensionSpecs that decorate may turn singly-valued columns into multi-valued selectors.\n+                // To be safe, we must return false here.\n+                return false;\n+              }\n+\n+              // Now check column capabilities.\n+              final ColumnCapabilities columnCapabilities = capabilitiesFunction.apply(dimension.getDimension());\n+              // null here currently means the column does not exist, nil columns can be vectorized\n+              if (columnCapabilities == null) {\n+                return true;\n+              }\n+              // strings must be single valued, dictionary encoded, and have unique dictionary entries\n+              if (ValueType.STRING.equals(columnCapabilities.getType())) {\n+                return columnCapabilities.hasMultipleValues().isFalse() &&", "originalCommit": "ad0419ce2d4e895acb804136653adcda32b5afe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODk5MA==", "url": "https://github.com/apache/druid/pull/10388#discussion_r488348990", "bodyText": "Well, I guess the example I gave is equivalent. Maybe a better way to ask that question is should UNKNOWN be treated as multi-value or single value?", "author": "suneet-s", "createdAt": "2020-09-15T02:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODM1OQ=="}], "type": "inlineReview"}]}