{"pr_number": 10479, "pr_title": "Fix compaction task slot computation in auto compaction", "pr_createdAt": "2020-10-05T18:10:16Z", "pr_url": "https://github.com/apache/druid/pull/10479", "timeline": [{"oid": "60ac7e71b88867d81e4e7602faeb4bf1d895bf19", "url": "https://github.com/apache/druid/commit/60ac7e71b88867d81e4e7602faeb4bf1d895bf19", "message": "Fix compaction task slot computation in auto compaction", "committedDate": "2020-10-05T18:05:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNTU1OQ==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499815559", "bodyText": "I might be missing something....but in a non parallel mode, wouldn't this still count as 2 instead of 1?", "author": "maytasm", "createdAt": "2020-10-05T19:15:01Z", "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/CompactSegments.java", "diffHunk": "@@ -277,7 +300,8 @@ private CoordinatorStats doRun(\n         );\n         LOG.infoSegments(segmentsToCompact, \"Compacting segments\");\n         // Count the compaction task itself + its sub tasks\n-        numSubmittedTasks += findNumMaxConcurrentSubTasks(config.getTuningConfig()) + 1;\n+        numSubmittedTasks++;\n+        numCompactionTasksAndSubtasks += findMaxNumTaskSlotsUsedByOneCompactionTask(config.getTuningConfig()) + 1;", "originalCommit": "60ac7e71b88867d81e4e7602faeb4bf1d895bf19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNzUzMQ==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499817531", "bodyText": "^ Are there tests for this?", "author": "maytasm", "createdAt": "2020-10-05T19:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNTU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNjMxOQ==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499906319", "bodyText": "Oops, good catch. It was always counting an extra slot regardless of the mode of the compaction task. Added tests.", "author": "jihoonson", "createdAt": "2020-10-05T22:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNTU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNjg1Mg==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499816852", "bodyText": "Why do we need both numSubmittedTasks and numCompactionTasksAndSubtasks?\nIf we are using numSubmittedTasks as the stats, then the stat will be different. Previously, it includes subtasks and now it doesn't. Maybe this should be documented? Otherwise you might see your stat for this changed drastically.", "author": "maytasm", "createdAt": "2020-10-05T19:17:32Z", "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/CompactSegments.java", "diffHunk": "@@ -277,7 +300,8 @@ private CoordinatorStats doRun(\n         );\n         LOG.infoSegments(segmentsToCompact, \"Compacting segments\");\n         // Count the compaction task itself + its sub tasks\n-        numSubmittedTasks += findNumMaxConcurrentSubTasks(config.getTuningConfig()) + 1;\n+        numSubmittedTasks++;", "originalCommit": "60ac7e71b88867d81e4e7602faeb4bf1d895bf19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNjM1NA==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499906354", "bodyText": "I think the previous one was wrong. It should count only the number of compaction tasks, not including its subtasks. I think this change would be fine since it's not documented yet. But yes, we should document it and all missing metrics.", "author": "jihoonson", "createdAt": "2020-10-05T22:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNjg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxODQwMA==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499818400", "bodyText": "Is this duplicated from indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java?", "author": "maytasm", "createdAt": "2020-10-05T19:20:51Z", "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/CompactSegments.java", "diffHunk": "@@ -180,24 +183,43 @@ public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params)\n   }\n \n   /**\n-   * Each compaction task can run a parallel indexing task. When we count the number of current running\n-   * compaction tasks, we should count the sub tasks of the parallel indexing task as well. However, we currently\n-   * don't have a good way to get the number of current running sub tasks except poking each supervisor task,\n-   * which is complex to handle all kinds of failures. Here, we simply return {@code maxNumConcurrentSubTasks} instead\n-   * to estimate the number of sub tasks conservatively. This should be ok since it won't affect to the performance of\n-   * other ingestion types.\n+   * Returns the maximum number of task slots used by one compaction task at any time when the task is issued with\n+   * the given tuningConfig.\n    */\n-  private int findNumMaxConcurrentSubTasks(@Nullable ClientCompactionTaskQueryTuningConfig tuningConfig)\n+  @VisibleForTesting\n+  static int findMaxNumTaskSlotsUsedByOneCompactionTask(@Nullable ClientCompactionTaskQueryTuningConfig tuningConfig)\n   {\n-    if (tuningConfig != null && tuningConfig.getMaxNumConcurrentSubTasks() != null) {\n-      // The actual number of subtasks might be smaller than the configured max.\n-      // However, we use the max to simplify the estimation here.\n-      return tuningConfig.getMaxNumConcurrentSubTasks();\n+    if (isParallelMode(tuningConfig)) {\n+      @Nullable Integer maxNumConcurrentSubTasks = tuningConfig.getMaxNumConcurrentSubTasks();\n+      // Max number of task slots used in parallel mode = maxNumConcurrentSubTasks + 1 (supervisor task)\n+      return (maxNumConcurrentSubTasks == null ? 1 : maxNumConcurrentSubTasks) + 1;\n     } else {\n-      return 0;\n+      return 1;\n     }\n   }\n \n+  /**\n+   * Returns true if the compaction task can run in the parallel mode with the given tuningConfig.\n+   * This method should be synchronized with ParallelIndexSupervisorTask.isParallelMode(InputSource, ParallelIndexTuningConfig).\n+   */\n+  @VisibleForTesting\n+  static boolean isParallelMode(@Nullable ClientCompactionTaskQueryTuningConfig tuningConfig)", "originalCommit": "60ac7e71b88867d81e4e7602faeb4bf1d895bf19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxODUwOQ==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499818509", "bodyText": "Can we combine them?", "author": "maytasm", "createdAt": "2020-10-05T19:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxODQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNjM4MQ==", "url": "https://github.com/apache/druid/pull/10479#discussion_r499906381", "bodyText": "They can't be merged for now since they are in different modules. There will be a cyclic dependency if I add a dependency for indexing-service in server since indexing-service already has one for server.", "author": "jihoonson", "createdAt": "2020-10-05T22:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxODQwMA=="}], "type": "inlineReview"}, {"oid": "f17f70c888387a4d8242a1d364344e381189aa76", "url": "https://github.com/apache/druid/commit/f17f70c888387a4d8242a1d364344e381189aa76", "message": "add tests for task counting", "committedDate": "2020-10-05T22:26:44Z", "type": "commit"}]}