{"pr_number": 9760, "pr_title": "Fix potential NPEs in joins", "pr_createdAt": "2020-04-23T22:27:18Z", "pr_url": "https://github.com/apache/druid/pull/9760", "timeline": [{"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159", "url": "https://github.com/apache/druid/commit/f33bbfc85bd33da048fe07d3bb4e092d4beea159", "message": "Fix potential NPEs in joins\n\nintelliJ reported issues with potential NPEs. This was first hit in testing\nwith a filter being pushed down to the left hand table when joining against\nan indexed table.", "committedDate": "2020-04-23T22:21:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw==", "url": "https://github.com/apache/druid/pull/9760#discussion_r414166093", "bodyText": "should this return 0 if the idLookup does not exist?", "author": "suneet-s", "createdAt": "2020-04-23T22:29:12Z", "path": "processing/src/main/java/org/apache/druid/segment/join/PossiblyNullDimensionSelector.java", "diffHunk": "@@ -138,7 +138,8 @@ public int lookupId(@Nullable String name)\n       // id 0 is always null for this selector impl.\n       return 0;\n     } else {\n-      return baseSelector.idLookup().lookupId(name) + nullAdjustment;\n+      IdLookup idLookup = baseSelector.idLookup();\n+      return (idLookup == null ? 0 : idLookup.lookupId(name)) + nullAdjustment;", "originalCommit": "f33bbfc85bd33da048fe07d3bb4e092d4beea159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODI1Nw==", "url": "https://github.com/apache/druid/pull/9760#discussion_r414898257", "bodyText": "It should probably fail if idLooup = null.", "author": "jihoonson", "createdAt": "2020-04-24T22:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3Njc5Mg==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416976792", "bodyText": "A null idLookup there should be an error condition, since the caller should check if idLookup() returned null before calling lookupId(name) on the PossiblyNullDimensionSelector", "author": "jon-wei", "createdAt": "2020-04-28T23:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NjkzMw==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416986933", "bodyText": "Added an assert statement with an explanation of why it should never be null in here", "author": "suneet-s", "createdAt": "2020-04-28T23:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw=="}], "type": "inlineReview"}, {"oid": "9f9797e4c5d29c54bf098511932ea6e3447978eb", "url": "https://github.com/apache/druid/commit/9f9797e4c5d29c54bf098511932ea6e3447978eb", "message": "More null check cleanup", "committedDate": "2020-04-24T16:40:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA==", "url": "https://github.com/apache/druid/pull/9760#discussion_r414282640", "bodyText": "When can entry be null?", "author": "jihoonson", "createdAt": "2020-04-24T04:25:21Z", "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -277,7 +277,7 @@ public void matchRemainder()\n     } else {\n       currentIterator = Iterators.filter(\n           extractor.iterable().iterator(),\n-          entry -> !matchedKeys.contains(entry.getKey())\n+          entry -> entry != null && !matchedKeys.contains(entry.getKey())", "originalCommit": "f33bbfc85bd33da048fe07d3bb4e092d4beea159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNTgwNA==", "url": "https://github.com/apache/druid/pull/9760#discussion_r414905804", "bodyText": "It doesn't look like this can actually happen, I think.\nIn theory iterator.next() can return null, but MapLookupExtractor#iterable (the only implementation today that does not throw an exception) returns map.entrySet() which should never contain a null element.", "author": "suneet-s", "createdAt": "2020-04-24T22:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NTkzNA==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416985934", "bodyText": "Yeah. It also doesn't seem reasonable that a \"row\" can be null. I think it's a false warning because of the Predicate interface of Guava. It would be better to suppress warning instead of checking null.", "author": "jihoonson", "createdAt": "2020-04-28T23:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Mjg1Ng==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416992856", "bodyText": "good call. Looks like this is on a hot path too, so I've added an inspection suppression instead of an assert not null. \ud83d\udc4d", "author": "suneet-s", "createdAt": "2020-04-28T23:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA=="}], "type": "inlineReview"}, {"oid": "d09a9d474e0f714ac1286309b585357533a39cdb", "url": "https://github.com/apache/druid/commit/d09a9d474e0f714ac1286309b585357533a39cdb", "message": "Merge remote-tracking branch 'upstream/master' into join-npe", "committedDate": "2020-04-28T16:23:23Z", "type": "commit"}, {"oid": "5d1bfed5ffe2ed51a269f5b06cc3e244964862f6", "url": "https://github.com/apache/druid/commit/5d1bfed5ffe2ed51a269f5b06cc3e244964862f6", "message": "Optimize filter value rewrite for IndexedTable", "committedDate": "2020-04-28T16:24:22Z", "type": "commit"}, {"oid": "65375a85f8626d25d170c91fd4bdbe6819fd31e4", "url": "https://github.com/apache/druid/commit/65375a85f8626d25d170c91fd4bdbe6819fd31e4", "message": "Add unit tests for LookupJoinable", "committedDate": "2020-04-28T21:32:59Z", "type": "commit"}, {"oid": "9a3de21a19f43f115c92c385ddb800a914fda4bd", "url": "https://github.com/apache/druid/commit/9a3de21a19f43f115c92c385ddb800a914fda4bd", "message": "Add tests for IndexedTableJoinable", "committedDate": "2020-04-28T21:51:16Z", "type": "commit"}, {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50", "url": "https://github.com/apache/druid/commit/79eb23832004e90ed498aa1448d3bc9513cd6b50", "message": "Merge remote-tracking branch 'upstream/master' into join-npe", "committedDate": "2020-04-28T21:53:11Z", "type": "commit"}, {"oid": "e18ee5ac39feb028286929dd2d652a2a13b3f3c2", "url": "https://github.com/apache/druid/commit/e18ee5ac39feb028286929dd2d652a2a13b3f3c2", "message": "Add non null assert for dimension selector", "committedDate": "2020-04-28T22:47:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTU5Mw==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416975593", "bodyText": "What's the impact of removing the distinct() call (is it just unnecessary since they're being collected to a set already?)", "author": "jon-wei", "createdAt": "2020-04-28T23:04:25Z", "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "diffHunk": "@@ -79,7 +79,7 @@ private JoinConditionAnalysis(\n                                                                 .allMatch(expr -> expr.isLiteral() && expr.eval(\n                                                                     ExprUtils.nilBindings()).asBoolean());\n     canHashJoin = nonEquiConditions.stream().allMatch(Expr::isLiteral);\n-    rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).distinct().collect(Collectors.toSet());\n+    rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).collect(Collectors.toSet());", "originalCommit": "79eb23832004e90ed498aa1448d3bc9513cd6b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NDg2Mg==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416984862", "bodyText": "should be a no-op. intelliJ suggested it's un-necessary since we're collecting to a set", "author": "suneet-s", "createdAt": "2020-04-28T23:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NzUxOQ==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416977519", "bodyText": "\ud83d\udc4d", "author": "jon-wei", "createdAt": "2020-04-28T23:09:13Z", "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinable.java", "diffHunk": "@@ -95,18 +96,23 @@ public JoinMatcher makeJoinMatcher(\n       boolean allowNonKeyColumnSearch\n   )\n   {\n+    if (!ALL_COLUMNS.contains(searchColumnName) || !ALL_COLUMNS.contains(retrievalColumnName)) {\n+      return ImmutableSet.of();\n+    }\n     Set<String> correlatedValues;\n     if (LookupColumnSelectorFactory.KEY_COLUMN.equals(searchColumnName)) {\n       if (LookupColumnSelectorFactory.KEY_COLUMN.equals(retrievalColumnName)) {\n         correlatedValues = ImmutableSet.of(searchColumnValue);\n       } else {\n-        correlatedValues = ImmutableSet.of(extractor.apply(searchColumnName));\n+        // This should not happen in practice because the column to be joined on must be a key.\n+        correlatedValues = Collections.singleton(extractor.apply(searchColumnValue));", "originalCommit": "79eb23832004e90ed498aa1448d3bc9513cd6b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw==", "url": "https://github.com/apache/druid/pull/9760#discussion_r416989237", "bodyText": "Does all callers need to check the returned eval? Seems there are a couple of missing places.", "author": "jihoonson", "createdAt": "2020-04-28T23:42:58Z", "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "diffHunk": "@@ -50,11 +50,13 @@ public MultiValueExpressionDimensionSelector(ColumnValueSelector<ExprEval> baseS\n     this.baseSelector = baseSelector;\n   }\n \n+  @Nullable", "originalCommit": "79eb23832004e90ed498aa1448d3bc9513cd6b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzMTUwNg==", "url": "https://github.com/apache/druid/pull/9760#discussion_r417031506", "bodyText": "I'd like to do this in phases, there are about 600+ issues that intelliJ reports in the druid-processing sub module. I'll pick through more of them in my next PR. Once they are fixed, I will enable these warnings in the inspections job", "author": "suneet-s", "createdAt": "2020-04-29T02:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzMjU4MA==", "url": "https://github.com/apache/druid/pull/9760#discussion_r417032580", "bodyText": "Oh I meant for this method. This method is technically private and only used in this class. Some of the callers are still not checking nulls, for example here.", "author": "jihoonson", "createdAt": "2020-04-29T02:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NzgwOQ==", "url": "https://github.com/apache/druid/pull/9760#discussion_r417047809", "bodyText": "These are checked on the hot loop. I've removed them for now, it's hard to reason whether or not it's possible to return null here. I think it can't, but I'm not 100% sure so I'm reverting this change and the associated null check", "author": "suneet-s", "createdAt": "2020-04-29T03:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NzYzMg==", "url": "https://github.com/apache/druid/pull/9760#discussion_r417587632", "bodyText": "Oh yeah, it doesn't seem possible to return null since ColumnValueSelector returns an ExprEval.", "author": "jihoonson", "createdAt": "2020-04-29T20:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}], "type": "inlineReview"}, {"oid": "94507aaca0812b01b730acd099b6fe0e435b7205", "url": "https://github.com/apache/druid/commit/94507aaca0812b01b730acd099b6fe0e435b7205", "message": "Supress null warning in LookupJoinMatcher", "committedDate": "2020-04-28T23:54:47Z", "type": "commit"}, {"oid": "9e7ffc047a403d2492a868b960bcb8148ebb1b81", "url": "https://github.com/apache/druid/commit/9e7ffc047a403d2492a868b960bcb8148ebb1b81", "message": "remove some null checks on hot path", "committedDate": "2020-04-29T03:38:01Z", "type": "commit"}]}