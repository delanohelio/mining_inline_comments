{"pr_number": 10006, "pr_title": "lpad and rpad functions match postrges behavior in SQL compatible mode", "pr_createdAt": "2020-06-09T00:43:31Z", "pr_url": "https://github.com/apache/druid/pull/10006", "timeline": [{"oid": "a91399c4652c5e21ede221499bad8c963dc8fe89", "url": "https://github.com/apache/druid/commit/a91399c4652c5e21ede221499bad8c963dc8fe89", "message": "lpad and rpad functions deal with empty pad\n\nReturn null if the pad string used by the `lpad` and `rpad` functions is\nan empty string", "committedDate": "2020-06-09T00:40:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODU5Ng==", "url": "https://github.com/apache/druid/pull/10006#discussion_r437078596", "bodyText": "Shouldn't this call rpad()? (same below)", "author": "ccaominh", "createdAt": "2020-06-09T00:55:26Z", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +211,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 10, \"\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 1, \"\");\n+    Assert.assertNull(lpad);\n   }\n \n   @Test\n   public void testRpad()\n   {\n-    String s1 = StringUtils.rpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"abcdede\");\n+    String rpad = StringUtils.rpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"abcdede\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"abcded\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", rpad);\n \n-    String s2 = StringUtils.rpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"abcded\");\n+    rpad = StringUtils.rpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", rpad);\n \n-    String s3 = StringUtils.rpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    rpad = StringUtils.rpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(rpad);\n \n-    String s4 = StringUtils.rpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    rpad = StringUtils.lpad(\"abc\", 10, \"\");", "originalCommit": "a91399c4652c5e21ede221499bad8c963dc8fe89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDU2NA==", "url": "https://github.com/apache/druid/pull/10006#discussion_r437080564", "bodyText": "\ud83e\udd26 bad copy paste", "author": "suneet-s", "createdAt": "2020-06-09T01:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODg5Nw==", "url": "https://github.com/apache/druid/pull/10006#discussion_r437078897", "bodyText": "Doesn't rpad() need a similar change?", "author": "ccaominh", "createdAt": "2020-06-09T00:56:37Z", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n+    if (len < 0 || pad.isEmpty()) {", "originalCommit": "a91399c4652c5e21ede221499bad8c963dc8fe89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NDIwNA==", "url": "https://github.com/apache/druid/pull/10006#discussion_r437084204", "bodyText": "Yeah I thought I made the change because FunctionTest was passing. Fixed now.\nI debugged it, and saw that FunctionTest passes because it treats the empty string as null ( probably the default null handling mode in the Expr system), so the rpad function thinks the pad that is passed in is null, not empty.", "author": "suneet-s", "createdAt": "2020-06-09T01:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODg5Nw=="}], "type": "inlineReview"}, {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862", "url": "https://github.com/apache/druid/commit/170ec786fa1c8323faa0a247aea3f25499b4a862", "message": "Fix rpad", "committedDate": "2020-06-09T01:13:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Njk0NA==", "url": "https://github.com/apache/druid/pull/10006#discussion_r437096944", "bodyText": "Afaik we don't traditionally annotate things explicitly with @Nonnull, in preference of using @Nullable and @EverythingIsNonnullByDefault in package.info, however I guess we haven't gone through and set that everywhere. However, to be more consistent with other places in the code maybe that would be better?", "author": "clintropolis", "createdAt": "2020-06-09T02:06:35Z", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)", "originalCommit": "170ec786fa1c8323faa0a247aea3f25499b4a862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5OTA4Mg==", "url": "https://github.com/apache/druid/pull/10006#discussion_r437099082", "bodyText": "To add to this, there are plenty of existing @Nonnull annotations in the code, so this change isn't really required, mostly just expressing my preference to keep things from getting too verbose \ud83d\ude05", "author": "clintropolis", "createdAt": "2020-06-09T02:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Njk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxMTU0Mw==", "url": "https://github.com/apache/druid/pull/10006#discussion_r438311543", "bodyText": "I was going to remove the annotations, but then I saw that we don't have @EverythingIsNonnullByDefault on this package. Since this is in core, I'm a little more paranoid about adding the annotation to this package. \ud83d\ude05\nI'd like to keep this as is for now.", "author": "suneet-s", "createdAt": "2020-06-10T18:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Njk0NA=="}], "type": "inlineReview"}, {"oid": "778d47c275938ed89452057f6c82f8127a8cd25b", "url": "https://github.com/apache/druid/commit/778d47c275938ed89452057f6c82f8127a8cd25b", "message": "Merge remote-tracking branch 'upstream/master' into lpad", "committedDate": "2020-06-09T17:19:35Z", "type": "commit"}, {"oid": "98889d8a308d76fb7a96ba6baedd2734c57043fd", "url": "https://github.com/apache/druid/commit/98889d8a308d76fb7a96ba6baedd2734c57043fd", "message": "Merge remote-tracking branch 'upstream/master' into lpad", "committedDate": "2020-06-10T15:15:59Z", "type": "commit"}, {"oid": "62909d94c9526e2d12f662109595b671dc90298f", "url": "https://github.com/apache/druid/commit/62909d94c9526e2d12f662109595b671dc90298f", "message": "Merge remote-tracking branch 'upstream/master' into lpad", "committedDate": "2020-06-10T17:53:06Z", "type": "commit"}, {"oid": "b3857fe7dfa9fa22eb64272c57c135e3c8bb97dd", "url": "https://github.com/apache/druid/commit/b3857fe7dfa9fa22eb64272c57c135e3c8bb97dd", "message": "Match PostgreSQL behavior in SQL compliant null handling mode", "committedDate": "2020-06-11T00:44:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MzYwOQ==", "url": "https://github.com/apache/druid/pull/10006#discussion_r438493609", "bodyText": "Looks like postgres returns an empty string for this case (but mysql returns null)", "author": "ccaominh", "createdAt": "2020-06-11T01:29:26Z", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +204,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);", "originalCommit": "b3857fe7dfa9fa22eb64272c57c135e3c8bb97dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MzY3MA==", "url": "https://github.com/apache/druid/pull/10006#discussion_r438493670", "bodyText": "Similar comment as lpad", "author": "ccaominh", "createdAt": "2020-06-11T01:29:42Z", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +204,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 10, \"\");\n+    Assert.assertEquals(\"abc\", lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 1, \"\");\n+    Assert.assertEquals(\"a\", lpad);\n   }\n \n   @Test\n   public void testRpad()\n   {\n-    String s1 = StringUtils.rpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"abcdede\");\n+    String rpad = StringUtils.rpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"abcdede\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"abcded\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", rpad);\n \n-    String s2 = StringUtils.rpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"abcded\");\n+    rpad = StringUtils.rpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", rpad);\n \n-    String s3 = StringUtils.rpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    rpad = StringUtils.rpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(rpad);", "originalCommit": "b3857fe7dfa9fa22eb64272c57c135e3c8bb97dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed26264a871de173cf9ec8cefed73a23f36e6dfc", "url": "https://github.com/apache/druid/commit/ed26264a871de173cf9ec8cefed73a23f36e6dfc", "message": "Match PostgreSQL behavior for pad -ve len", "committedDate": "2020-06-11T01:41:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDE3Nw==", "url": "https://github.com/apache/druid/pull/10006#discussion_r439670177", "bodyText": "nit: should the pad.isEmpty check be outside of the for loop since it isn't going to change over the course of the loop?", "author": "clintropolis", "createdAt": "2020-06-12T22:44:33Z", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -472,30 +473,36 @@ public static String repeat(String s, int count)\n   /**\n    * Returns the string left-padded with the string pad to a length of len characters.\n    * If str is longer than len, the return value is shortened to len characters.\n-   * Lpad and rpad functions are migrated from flink's scala function with minor refactor\n+   * This function is migrated from flink's scala function with minor refactor\n    * https://github.com/apache/flink/blob/master/flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/runtime/functions/ScalarFunctions.scala\n+   * - Modified to handle empty pad string.\n+   * - Padding of negative length return an empty string.\n    *\n    * @param base The base string to be padded\n    * @param len  The length of padded string\n    * @param pad  The pad string\n    *\n-   * @return the string left-padded with pad to a length of len\n+   * @return the string left-padded with pad to a length of len or null if the pad is empty or the len is less than 0.\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nonnull\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n-      return null;\n-    } else if (len == 0) {\n+    if (len <= 0) {\n       return \"\";\n     }\n \n-    char[] data = new char[len];\n-\n     // The length of the padding needed\n     int pos = Math.max(len - base.length(), 0);\n \n+    // short-circuit if there is no pad and we need to add a padding\n+    if (pos > 0 && pad.isEmpty()) {\n+      return base;\n+    }\n+\n+    char[] data = new char[len];\n+\n     // Copy the padding\n-    for (int i = 0; i < pos; i += pad.length()) {\n+    for (int i = 0; !pad.isEmpty() && i < pos; i += pad.length()) {", "originalCommit": "ed26264a871de173cf9ec8cefed73a23f36e6dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5ODc2OQ==", "url": "https://github.com/apache/druid/pull/10006#discussion_r440298769", "bodyText": "Done", "author": "suneet-s", "createdAt": "2020-06-15T16:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDI5Nw==", "url": "https://github.com/apache/druid/pull/10006#discussion_r439670297", "bodyText": "same comment about moving pad.isEmpty out", "author": "clintropolis", "createdAt": "2020-06-12T22:45:09Z", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -512,37 +519,47 @@ public static String lpad(String base, Integer len, String pad)\n   /**\n    * Returns the string right-padded with the string pad to a length of len characters.\n    * If str is longer than len, the return value is shortened to len characters.\n+   * This function is migrated from flink's scala function with minor refactor\n+   * https://github.com/apache/flink/blob/master/flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/runtime/functions/ScalarFunctions.scala\n+   * - Modified to handle empty pad string.\n+   * - Modified to only copy the pad string if needed (this implementation mimics lpad).\n+   * - Padding of negative length return an empty string.\n    *\n    * @param base The base string to be padded\n    * @param len  The length of padded string\n    * @param pad  The pad string\n    *\n-   * @return the string right-padded with pad to a length of len\n+   * @return the string right-padded with pad to a length of len or null if the pad is empty or the len is less than 0.\n    */\n-  public static String rpad(String base, Integer len, String pad)\n+  @Nonnull\n+  public static String rpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n-      return null;\n-    } else if (len == 0) {\n+    if (len <= 0) {\n       return \"\";\n     }\n \n-    char[] data = new char[len];\n-\n-    int pos = 0;\n+    // The length of the padding needed\n+    int paddingLen = Math.max(len - base.length(), 0);\n \n-    // Copy the base\n-    for (; pos < base.length() && pos < len; pos++) {\n-      data[pos] = base.charAt(pos);\n+    // short-circuit if there is no pad and we need to add a padding\n+    if (paddingLen > 0 && pad.isEmpty()) {\n+      return base;\n     }\n \n+    char[] data = new char[len];\n+\n     // Copy the padding\n-    for (; pos < len; pos += pad.length()) {\n-      for (int i = 0; i < pad.length() && i < len - pos; i++) {\n-        data[pos + i] = pad.charAt(i);\n+    for (int i = len - paddingLen; !pad.isEmpty() && i < len; i += pad.length()) {", "originalCommit": "ed26264a871de173cf9ec8cefed73a23f36e6dfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5ODg0OA==", "url": "https://github.com/apache/druid/pull/10006#discussion_r440298848", "bodyText": "Done", "author": "suneet-s", "createdAt": "2020-06-15T16:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDI5Nw=="}], "type": "inlineReview"}, {"oid": "e27ccb64f21e2a510e91bf9670e98672349d436b", "url": "https://github.com/apache/druid/commit/e27ccb64f21e2a510e91bf9670e98672349d436b", "message": "Merge remote-tracking branch 'upstream/master' into lpad", "committedDate": "2020-06-15T16:19:53Z", "type": "commit"}, {"oid": "217443a401a19b3b4ce93842326db5bc072cf195", "url": "https://github.com/apache/druid/commit/217443a401a19b3b4ce93842326db5bc072cf195", "message": "address review comments", "committedDate": "2020-06-15T16:28:15Z", "type": "commit"}]}