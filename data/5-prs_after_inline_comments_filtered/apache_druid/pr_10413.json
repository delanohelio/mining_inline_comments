{"pr_number": 10413, "pr_title": "Add last_compaction_state to sys.segments table", "pr_createdAt": "2020-09-21T23:33:30Z", "pr_url": "https://github.com/apache/druid/pull/10413", "timeline": [{"oid": "e5b8cb189edb0770f6e41a46030349836623ad20", "url": "https://github.com/apache/druid/commit/e5b8cb189edb0770f6e41a46030349836623ad20", "message": "Add is_compacted to sys.segments table", "committedDate": "2020-09-21T23:25:31Z", "type": "commit"}, {"oid": "09b8f9bf4def85911ef8ce18e7bcad12dff89548", "url": "https://github.com/apache/druid/commit/09b8f9bf4def85911ef8ce18e7bcad12dff89548", "message": "change is_compacted to last_compaction_state", "committedDate": "2020-09-22T00:31:34Z", "type": "commit"}, {"oid": "33959d2fd5183ebf08c45e1b61a953d4301dc382", "url": "https://github.com/apache/druid/commit/33959d2fd5183ebf08c45e1b61a953d4301dc382", "message": "fix tests", "committedDate": "2020-09-22T20:02:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMTI0NQ==", "url": "https://github.com/apache/druid/pull/10413#discussion_r493031245", "bodyText": "super nit - to link to where the default is.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * compaction task (true by default).\n          \n          \n            \n               * compaction task (true by default). {@link org.apache.druid.indexing.common.task.Tasks#DEFAULT_STORE_COMPACTION_STATE}.", "author": "suneet-s", "createdAt": "2020-09-22T21:01:19Z", "path": "core/src/main/java/org/apache/druid/timeline/DataSegment.java", "diffHunk": "@@ -100,7 +100,7 @@\n   /**\n    * Stores some configurations of the compaction task which created this segment.\n    * This field is filled in the metadata store only when \"storeCompactionState\" is set true in the context of the\n-   * compaction task which is false by default.\n+   * compaction task (true by default).", "originalCommit": "33959d2fd5183ebf08c45e1b61a953d4301dc382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNTA3Mg==", "url": "https://github.com/apache/druid/pull/10413#discussion_r493205072", "bodyText": "Done", "author": "maytasm", "createdAt": "2020-09-23T05:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMTI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNzExNQ==", "url": "https://github.com/apache/druid/pull/10413#discussion_r493037115", "bodyText": "CompactionState includes the PartitionsSpec and indexSpec.\nWhat should a caller of the API do with these?\nThe compaction state appears to be an unbounded json object. Do we foresee any issues around serializing the entire json blob every time we need to call the sys table?", "author": "suneet-s", "createdAt": "2020-09-22T21:13:22Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/SystemSchema.java", "diffHunk": "@@ -311,7 +312,8 @@ public TableType getJdbcTableType()\n                 val.isOvershadowed() ? IS_OVERSHADOWED_TRUE : IS_OVERSHADOWED_FALSE,\n                 segment.getShardSpec(),\n                 segment.getDimensions(),\n-                segment.getMetrics()\n+                segment.getMetrics(),\n+                segment.getLastCompactionState()", "originalCommit": "33959d2fd5183ebf08c45e1b61a953d4301dc382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxNTU2MA==", "url": "https://github.com/apache/druid/pull/10413#discussion_r493215560", "bodyText": "Both PartitionsSpec and indexSpec can be helpful in determining the cause of query performance issue. We will also want to know what segments auto compaction will compact as both of those Spec determine that. 'indexSpec' can also impact query performance (see shape shifting PR).\nCompactionState is a small json and is already stored in memory as part of the DataSegment. We are also returning the shardSpec so this should not be a problem.", "author": "maytasm", "createdAt": "2020-09-23T05:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNzExNQ=="}], "type": "inlineReview"}, {"oid": "0c9727e66efd9bcff08893aa4fc021e348dc95bc", "url": "https://github.com/apache/druid/commit/0c9727e66efd9bcff08893aa4fc021e348dc95bc", "message": "fix tests", "committedDate": "2020-09-22T22:17:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTg1MA==", "url": "https://github.com/apache/druid/pull/10413#discussion_r493085850", "bodyText": "I think you should use putIfAbsent. That will allow the user to provide a STORE_COMPACTION_STATE_KEY that is different from the default value of true if needed.\nAlso nit: use a constant for the default value", "author": "suneet-s", "createdAt": "2020-09-22T23:18:42Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java", "diffHunk": "@@ -422,6 +422,7 @@ ParallelIndexSupervisorTask newTask(String taskId, ParallelIndexIngestionSpec in\n   {\n     final Map<String, Object> newContext = new HashMap<>(getContext());\n     newContext.put(CTX_KEY_APPENDERATOR_TRACKING_TASK_ID, getId());\n+    newContext.put(CompactSegments.STORE_COMPACTION_STATE_KEY, getContextValue(Tasks.STORE_COMPACTION_STATE_KEY, true));", "originalCommit": "0c9727e66efd9bcff08893aa4fc021e348dc95bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzNTg5NA==", "url": "https://github.com/apache/druid/pull/10413#discussion_r493235894", "bodyText": "Done", "author": "maytasm", "createdAt": "2020-09-23T06:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NTg1MA=="}], "type": "inlineReview"}, {"oid": "7ea1d41074d7b37958b7111a4789dc12ac2fcf02", "url": "https://github.com/apache/druid/commit/7ea1d41074d7b37958b7111a4789dc12ac2fcf02", "message": "address comments", "committedDate": "2020-09-23T06:48:27Z", "type": "commit"}]}