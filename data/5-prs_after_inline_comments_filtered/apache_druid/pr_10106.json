{"pr_number": 10106, "pr_title": "Add validation for authenticator and authorizer name", "pr_createdAt": "2020-07-01T00:19:58Z", "pr_url": "https://github.com/apache/druid/pull/10106", "timeline": [{"oid": "339fdc2fa9ac20a17dd42b49c5a5106e210a01a4", "url": "https://github.com/apache/druid/commit/339fdc2fa9ac20a17dd42b49c5a5106e210a01a4", "message": "Add validation for authorizer name", "committedDate": "2020-07-01T00:13:46Z", "type": "commit"}, {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b", "url": "https://github.com/apache/druid/commit/66b4f28bfb52acaf3243a2277167c5ae1cec322b", "message": "fix deps", "committedDate": "2020-07-01T14:28:41Z", "type": "commit"}, {"oid": "40f205faa584ae87df5b74585d2c1d0216694a1b", "url": "https://github.com/apache/druid/commit/40f205faa584ae87df5b74585d2c1d0216694a1b", "message": "add javadocs", "committedDate": "2020-07-01T17:37:53Z", "type": "commit"}, {"oid": "45a8e1c50a668c889d111cbe65a06b6ba8d224eb", "url": "https://github.com/apache/druid/commit/45a8e1c50a668c889d111cbe65a06b6ba8d224eb", "message": "Merge remote-tracking branch 'upstream/master' into lgtm-2", "committedDate": "2020-07-01T17:38:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTE1Nw==", "url": "https://github.com/apache/druid/pull/10106#discussion_r448641157", "bodyText": "It would be good to also use this constant in AuthorizerResourceFilter.filter and in the @PathParam annotations of BasicAuthorizerResource. There's a lot of places where the string \"authorizerName\" appears, and using a constant would emphasize that this specific string is important.", "author": "gianm", "createdAt": "2020-07-01T22:07:36Z", "path": "server/src/main/java/org/apache/druid/server/security/AuthorizerNameValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.security;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * A class that validates the name of an authorizer.\n+ */\n+public class AuthorizerNameValidator implements Consumer<String>\n+{\n+  private static final String AUTHORIZER_NAME = \"authorizerName\";", "originalCommit": "66b4f28bfb52acaf3243a2277167c5ae1cec322b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTYwOQ==", "url": "https://github.com/apache/druid/pull/10106#discussion_r448641609", "bodyText": "Why not use an interface named AuthorizerNameValidator? Then the interface could have javadocs explaining the expected usage and contract.", "author": "gianm", "createdAt": "2020-07-01T22:08:56Z", "path": "server/src/main/java/org/apache/druid/server/initialization/AuthorizerMapperModule.java", "diffHunk": "@@ -58,7 +62,10 @@ public void configure(Binder binder)\n     binder.bind(AuthorizerMapper.class)\n           .toProvider(new AuthorizerMapperProvider())\n           .in(LazySingleton.class);\n-\n+    binder.bind(new TypeLiteral<Consumer<String>>() {})", "originalCommit": "66b4f28bfb52acaf3243a2277167c5ae1cec322b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MjE5Ng==", "url": "https://github.com/apache/druid/pull/10106#discussion_r448642196", "bodyText": "What happens if it's not found, and indexOf returns -1, then the +1 makes us do .get(0)?", "author": "gianm", "createdAt": "2020-07-01T22:10:24Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/AuthorizerResourceFilter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.overlord.http.security;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import com.sun.jersey.spi.container.ContainerRequest;\n+import com.sun.jersey.spi.container.ContainerRequestFilter;\n+import com.sun.jersey.spi.container.ContainerResponseFilter;\n+import com.sun.jersey.spi.container.ResourceFilter;\n+import org.apache.druid.server.security.AuthorizerValidation;\n+\n+import javax.inject.Inject;\n+import java.util.function.Consumer;\n+\n+public class AuthorizerResourceFilter implements ResourceFilter, ContainerRequestFilter\n+{\n+  private final Consumer<String> authorizerNameValidator;\n+\n+  @Inject\n+  AuthorizerResourceFilter(@AuthorizerValidation Consumer<String> authorizerNameValidator)\n+  {\n+    this.authorizerNameValidator = authorizerNameValidator;\n+  }\n+\n+  @Override\n+  public ContainerRequestFilter getRequestFilter()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public ContainerResponseFilter getResponseFilter()\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public ContainerRequest filter(ContainerRequest request)\n+  {\n+    String authorizerName = Preconditions.checkNotNull(\n+        request.getPathSegments()\n+               .get(\n+                   Iterables.indexOf(", "originalCommit": "66b4f28bfb52acaf3243a2277167c5ae1cec322b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MzU0Mg==", "url": "https://github.com/apache/druid/pull/10106#discussion_r448643542", "bodyText": "Are you sure this is right? I would think that getPath() returns the contents of the path segment (i.e., the name of the authorizer), not the name of the path segment.", "author": "gianm", "createdAt": "2020-07-01T22:14:24Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/AuthorizerResourceFilter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.overlord.http.security;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import com.sun.jersey.spi.container.ContainerRequest;\n+import com.sun.jersey.spi.container.ContainerRequestFilter;\n+import com.sun.jersey.spi.container.ContainerResponseFilter;\n+import com.sun.jersey.spi.container.ResourceFilter;\n+import org.apache.druid.server.security.AuthorizerValidation;\n+\n+import javax.inject.Inject;\n+import java.util.function.Consumer;\n+\n+public class AuthorizerResourceFilter implements ResourceFilter, ContainerRequestFilter\n+{\n+  private final Consumer<String> authorizerNameValidator;\n+\n+  @Inject\n+  AuthorizerResourceFilter(@AuthorizerValidation Consumer<String> authorizerNameValidator)\n+  {\n+    this.authorizerNameValidator = authorizerNameValidator;\n+  }\n+\n+  @Override\n+  public ContainerRequestFilter getRequestFilter()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public ContainerResponseFilter getResponseFilter()\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public ContainerRequest filter(ContainerRequest request)\n+  {\n+    String authorizerName = Preconditions.checkNotNull(\n+        request.getPathSegments()\n+               .get(\n+                   Iterables.indexOf(\n+                       request.getPathSegments(),\n+                       input -> \"authorizerName\".equals(input.getPath())", "originalCommit": "66b4f28bfb52acaf3243a2277167c5ae1cec322b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNzEzMw==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453037133", "bodyText": "You're correct. This was supposed to be db, but after seeing this comment, authorizerName was not always pre-fixed with db, so I decided to add the validation inside the resource filter. I think I might want to add an integration test for this, seeing that this patch that I pushed up was totally busted. I'll add that within the next couple days hopefully.", "author": "suneet-s", "createdAt": "2020-07-10T19:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MzU0Mg=="}], "type": "inlineReview"}, {"oid": "87551f1ae2018ef15b2625759985508a50b0a3dd", "url": "https://github.com/apache/druid/commit/87551f1ae2018ef15b2625759985508a50b0a3dd", "message": "Do not use resource filters", "committedDate": "2020-07-10T19:18:08Z", "type": "commit"}, {"oid": "faf74b27164d3528c89548e41c2b591bd499e803", "url": "https://github.com/apache/druid/commit/faf74b27164d3528c89548e41c2b591bd499e803", "message": "Merge remote-tracking branch 'upstream/master' into lgtm-2", "committedDate": "2020-07-10T19:18:22Z", "type": "commit"}, {"oid": "3a8a3d6ba2aa45d439c1594205a0f88ccd10d612", "url": "https://github.com/apache/druid/commit/3a8a3d6ba2aa45d439c1594205a0f88ccd10d612", "message": "Fix BasicAuthenticatorResource as well", "committedDate": "2020-07-10T23:27:25Z", "type": "commit"}, {"oid": "e7e00b2ae51990c83141efa953a8b0b71cda0fbe", "url": "https://github.com/apache/druid/commit/e7e00b2ae51990c83141efa953a8b0b71cda0fbe", "message": "Add integration tests", "committedDate": "2020-07-10T23:59:23Z", "type": "commit"}, {"oid": "2a1b9cc2232abe776d50ed77fa4ec0e46b8ef3e4", "url": "https://github.com/apache/druid/commit/2a1b9cc2232abe776d50ed77fa4ec0e46b8ef3e4", "message": "Merge remote-tracking branch 'upstream/master' into lgtm-2", "committedDate": "2020-07-11T00:01:34Z", "type": "commit"}, {"oid": "a278641f2f7fcc7783790a1bd73de763100067d0", "url": "https://github.com/apache/druid/commit/a278641f2f7fcc7783790a1bd73de763100067d0", "message": "fix test", "committedDate": "2020-07-11T01:32:51Z", "type": "commit"}, {"oid": "25ffb81fb7659f53865429954edeab0ad704096b", "url": "https://github.com/apache/druid/commit/25ffb81fb7659f53865429954edeab0ad704096b", "message": "fix", "committedDate": "2020-07-11T02:46:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4OTc2NQ==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453789765", "bodyText": "Why are these methods not static? It doesn't seem to need to inject this class if they are static.", "author": "jihoonson", "createdAt": "2020-07-13T16:51:27Z", "path": "server/src/main/java/org/apache/druid/server/security/AuthValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.security;\n+\n+import org.apache.druid.common.utils.IdUtils;\n+\n+/**\n+ * Utility functions to validate the an authorizer.\n+ */\n+public class AuthValidator\n+{\n+  private static final String AUTHORIZER_NAME = \"authorizerName\";\n+  private static final String AUTHENTICATOR_NAME = \"authenticatorName\";\n+\n+  /**\n+   * Validates the provided authorizerName.\n+   *\n+   * @param authorizerName the name of the authorizer.\n+   * @throws IllegalArgumentException on invalid authorizer names.\n+   */\n+  public void validateAuthorizerName(String authorizerName)", "originalCommit": "25ffb81fb7659f53865429954edeab0ad704096b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5NTc5Mg==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453795792", "bodyText": "It's easier to test non static methods when they are used in other classes", "author": "suneet-s", "createdAt": "2020-07-13T17:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4OTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDUyOA==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453790528", "bodyText": "Can this check be added in BasicSecurityResourceFilter instead of adding it everywhere? BasicSecurityResourceFilter is used by both BasicAuthenticationResource and BasicAuthorizerResource.", "author": "jihoonson", "createdAt": "2020-07-13T16:52:43Z", "path": "extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authentication/endpoint/BasicAuthenticatorResource.java", "diffHunk": "@@ -102,6 +106,7 @@ public Response getAllUsers(\n       @PathParam(\"authenticatorName\") final String authenticatorName\n   )\n   {\n+    authValidator.validateAuthenticatorName(authenticatorName);", "originalCommit": "25ffb81fb7659f53865429954edeab0ad704096b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNTI2OQ==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453825269", "bodyText": "I thought about adding this to a filter like I did here - https://github.com/apache/druid/pull/10106/files/66b4f28bfb52acaf3243a2277167c5ae1cec322b#diff-d816117984574d3000bb1c8b6faaccb0\nHowever, this resource has many different paths that pre-fix the authenticator/ authorizer name -/db/{authenticatorName}, /listen/{authenticatorName}, /listen/users/{authorizerName} and /listen/groupMappings/{authorizerName}.\nSo I figured this would be error-prone, since there isn't a consistent way to access the authenticator / authorizer name.\nI think doing this in a filter makes the code cleaner, but I worry about missing an endpoint or getting the logic correct when picking the authorizer name from the path.\nI'm open to suggestions on how to do this correctly :)", "author": "suneet-s", "createdAt": "2020-07-13T17:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA3NDk5Ng==", "url": "https://github.com/apache/druid/pull/10106#discussion_r454074996", "bodyText": "I see. I was worrying about that this way is easy to forget when we add a new API, but it seems like the other way is error-prone as well.", "author": "jihoonson", "createdAt": "2020-07-14T03:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4OTA3Mg==", "url": "https://github.com/apache/druid/pull/10106#discussion_r454089072", "bodyText": "yeah :(", "author": "suneet-s", "createdAt": "2020-07-14T04:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTcwMw==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453791703", "bodyText": "Why do we mock authValidator here? It doesn't seem hard to use the real method. I would suggest to use the real method in that case since we can catch potential side effects easily if we modify the logic of authValidator.", "author": "jihoonson", "createdAt": "2020-07-13T16:54:39Z", "path": "extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/basic/authentication/endpoint/BasicAuthenticatorResourceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.basic.authentication.endpoint;\n+\n+import org.apache.druid.security.basic.authentication.entity.BasicAuthenticatorCredentialUpdate;\n+import org.apache.druid.server.security.AuthValidator;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.nio.charset.StandardCharsets;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class BasicAuthenticatorResourceTest\n+{\n+  private static final String AUTHENTICATOR_NAME = \"AUTHENTICATOR_NAME\";\n+  private static final String INVALID_AUTHENTICATOR_NAME = \"INVALID_AUTHENTICATOR_NAME\";\n+  private static final String USER_NAME = \"USER_NAME\";\n+  private static final byte[] SERIALIZED_USER_MAP = \"SERIALIZED_USER_MAP\".getBytes(StandardCharsets.UTF_8);\n+  @Mock(answer = Answers.RETURNS_MOCKS)\n+  private BasicAuthenticatorResourceHandler handler;\n+  @Mock\n+  private AuthValidator authValidator;\n+  @Mock\n+  private HttpServletRequest req;\n+  @Mock\n+  private BasicAuthenticatorCredentialUpdate update;\n+\n+  private BasicAuthenticatorResource target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doThrow(IllegalArgumentException.class)\n+           .when(authValidator)\n+           .validateAuthenticatorName(INVALID_AUTHENTICATOR_NAME);", "originalCommit": "25ffb81fb7659f53865429954edeab0ad704096b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTg1NQ==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453791855", "bodyText": "Same for BasicAuthorizerResourceFilter.", "author": "jihoonson", "createdAt": "2020-07-13T16:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyNzc4Mg==", "url": "https://github.com/apache/druid/pull/10106#discussion_r453827782", "bodyText": "I didn't want to include the logic in this unit test, that's why I chose to mock it. I like this de-coupling because if the logic in AuthValidator changes in the future, we don't need to update all the test classes that use AuthValidator.\nThe tests that validate whether or not a name is valid are written in AuthValidatorTest, so any change in logic should be caught by that test.\nThese tests just validate that if the AuthValidator encounters an invalid auth name, an appropriate exception is thrown.", "author": "suneet-s", "createdAt": "2020-07-13T17:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA3NTAwNA==", "url": "https://github.com/apache/druid/pull/10106#discussion_r454075004", "bodyText": "OK.", "author": "jihoonson", "createdAt": "2020-07-14T03:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTcwMw=="}], "type": "inlineReview"}]}