{"pr_number": 10412, "pr_title": "prometheus metric exporter", "pr_createdAt": "2020-09-21T06:03:33Z", "pr_url": "https://github.com/apache/druid/pull/10412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNDU5Mw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513124593", "bodyText": "final, and static maybe, so that we can reuse this object/regex in other places", "author": "ArvinZheng", "createdAt": "2020-10-28T01:23:08Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitterConfig.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.ws.BindingType;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitterConfig\n+{\n+\n+  Pattern pattern = Pattern.compile(\"[a-zA-Z_:][a-zA-Z0-9_:]*\");", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513125045", "bodyText": "Reuse the pattern in PrometheusEmitterConfig", "author": "ArvinZheng", "createdAt": "2020-10-28T01:24:38Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3OTc1MA==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515679750", "bodyText": "These two is not the same regex. The one in PromtheusEmitterConfig is for namespace regex that need to start with alphabetic character.", "author": "Tiaaa", "createdAt": "2020-11-01T22:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTUwMw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r516431503", "bodyText": "Oh, sorry, my bad.", "author": "ArvinZheng", "createdAt": "2020-11-03T05:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTEyNQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513125125", "bodyText": "Reuse the pattern in PrometheusEmitterConfig", "author": "ArvinZheng", "createdAt": "2020-10-28T01:24:51Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDI3Mg==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515680272", "bodyText": "used the one in PrometheusEmitter.java", "author": "Tiaaa", "createdAt": "2020-11-01T22:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTEyMg==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513165122", "bodyText": "maybe we can rename the map to registeredMetrics and then we could rename this method to getRegisteredMetrics(), I feel like this will be easier to read", "author": "ArvinZheng", "createdAt": "2020-10-28T03:53:57Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");\n+    }\n+  }\n+\n+  public Map<String, DimensionsAndCollector> getMap()", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDQxNQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515680415", "bodyText": "sure", "author": "Tiaaa", "createdAt": "2020-11-01T22:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTc5OQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513165799", "bodyText": "maybe readConfig or loadConfig?", "author": "ArvinZheng", "createdAt": "2020-10-28T03:56:37Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NjQyOQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513166429", "bodyText": "typo, metric dimensions at types -> metric dimensions and types, maybe we could replace it by metric configuration", "author": "ArvinZheng", "createdAt": "2020-10-28T03:59:23Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDUzMg==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515680532", "bodyText": "Changed to metric configuration", "author": "Tiaaa", "createdAt": "2020-11-01T22:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NjQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzE2NQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513167165", "bodyText": "maybe replace metric dimensions and types by metric configuration?", "author": "ArvinZheng", "createdAt": "2020-10-28T04:02:26Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzI4Ng==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513167286", "bodyText": "same as above", "author": "ArvinZheng", "createdAt": "2020-10-28T04:02:54Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2OTU2Mg==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513169562", "bodyText": "private?", "author": "ArvinZheng", "createdAt": "2020-10-28T04:11:42Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513173646", "bodyText": "potential NPE? if the configured strategy is not pushgateway, then this pushGateway wouldn't have been instantiated", "author": "ArvinZheng", "createdAt": "2020-10-28T04:28:54Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTAyNw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513175027", "bodyText": "Also should we use a more meaningful label name for identifier instead of using the config.getNamespace()?", "author": "ArvinZheng", "createdAt": "2020-10-28T04:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MTcxNg==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515681716", "bodyText": "Will add the null check - however flush() for this emitter should only called by close() which strategy check already done.", "author": "Tiaaa", "createdAt": "2020-11-01T22:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mzc5Mw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515683793", "bodyText": "For the identifier label name, any suggestion? The config.namespace will be set in config files for each service. So for example peon task it could be peon=taskXXX as groupingKey.", "author": "Tiaaa", "createdAt": "2020-11-01T22:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513175823", "bodyText": "we should schedule a task to push updates periodically when the strategy is set to pushgateway", "author": "ArvinZheng", "createdAt": "2020-10-28T04:37:16Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4NDc4Nw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515684787", "bodyText": "Added, every 5min sounds reasonable?", "author": "Tiaaa", "createdAt": "2020-11-01T23:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2NTk5Mg==", "url": "https://github.com/apache/druid/pull/10412#discussion_r557865992", "bodyText": "Sorry I missed this - I think the scheduled executor may not be necessary. Main reason we've added strategy pushgateway is for things that are potentially too short-lived to be scraped by prometheus (in druid that's really just peon tasks). Things that are living long enough to be pushing every 5 minutes are likely not \"task\" based, and may be better fit for normal scraping.  I lean toward keeping things simple, and pushing once at close seems sufficient.", "author": "michaelschiff", "createdAt": "2021-01-15T05:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODc4NDQxOQ==", "url": "https://github.com/apache/druid/pull/10412#discussion_r558784419", "bodyText": "Given the only metric pushed by peon is \"last pushed timestamp\", I think it's valid to remove the scheduled task. Removed.", "author": "Tiaaa", "createdAt": "2021-01-16T02:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA==", "url": "https://github.com/apache/druid/pull/10412#discussion_r513178070", "bodyText": "return Optional.ofNullable(map.get(name)).orElse(map.get(service + \"_\" + name));", "author": "ArvinZheng", "createdAt": "2020-10-28T04:46:16Z", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {", "originalCommit": "0842ebacfc24789926c71879b88cdff5c95ba325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4NTgzMw==", "url": "https://github.com/apache/druid/pull/10412#discussion_r515685833", "bodyText": "Changed the second part to a getOrDefault() for simplification. I don't see the need of changing this function return type from DimensionsAndCollector to Optional<DimensionsAndCollector>", "author": "Tiaaa", "createdAt": "2020-11-01T23:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTMwMA==", "url": "https://github.com/apache/druid/pull/10412#discussion_r516431300", "bodyText": "you don't need to change the return type, but anyway this is a minor comment, feel free to pick whichever you prefer", "author": "ArvinZheng", "createdAt": "2020-11-03T05:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA=="}], "type": "inlineReview"}, {"oid": "ccbfbb7ae7f97b955a9d6384c5d24111186a66c2", "url": "https://github.com/apache/druid/commit/ccbfbb7ae7f97b955a9d6384c5d24111186a66c2", "message": "prometheus-emitter", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "bb8eb39996da6b907b31771f5ce7160c89daf078", "url": "https://github.com/apache/druid/commit/bb8eb39996da6b907b31771f5ce7160c89daf078", "message": "use existing jetty server to expose prometheus collection endpoint", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "ad4346675308091b1eb593de3252eaed1540976b", "url": "https://github.com/apache/druid/commit/ad4346675308091b1eb593de3252eaed1540976b", "message": "unused variables", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "b04eaba556ea8fd4013b1908482df947bf1445f4", "url": "https://github.com/apache/druid/commit/b04eaba556ea8fd4013b1908482df947bf1445f4", "message": "better variable names", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "82f408bc82d439aa279b975f64b27cfa5b09b527", "url": "https://github.com/apache/druid/commit/82f408bc82d439aa279b975f64b27cfa5b09b527", "message": "removed unused dependencies", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "b6750ccb030863c4938a63b097ccca6c3b4e76c5", "url": "https://github.com/apache/druid/commit/b6750ccb030863c4938a63b097ccca6c3b4e76c5", "message": "more metric definitions", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "2dc2ced4e88d5747afc3266f4ab9d23564c8a40b", "url": "https://github.com/apache/druid/commit/2dc2ced4e88d5747afc3266f4ab9d23564c8a40b", "message": "reorganize", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "c2a71319eefe72e33571762f0b0a65bf85b99e49", "url": "https://github.com/apache/druid/commit/c2a71319eefe72e33571762f0b0a65bf85b99e49", "message": "use prometheus HTTPServer instead of hooking into Jetty server", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "5a91cc0befcf8de3a580d6b63da4a63e724af912", "url": "https://github.com/apache/druid/commit/5a91cc0befcf8de3a580d6b63da4a63e724af912", "message": "temporary empty help string", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "a7851af284c28d3d13daf62b7fd1788220e696ca", "url": "https://github.com/apache/druid/commit/a7851af284c28d3d13daf62b7fd1788220e696ca", "message": "temporary non-empty help.  fix incorrect dimension value in JSON (also updated statsd json)", "committedDate": "2021-01-16T02:27:01Z", "type": "commit"}, {"oid": "a2136385527aaa6b61f6e61221a2327da628cc48", "url": "https://github.com/apache/druid/commit/a2136385527aaa6b61f6e61221a2327da628cc48", "message": "added full help text.  added metric conversion factor for timers that are not using seconds. Correct metric dimension name in documentation", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "2ec1a9b8a90a3391f1d9f440c7eed7e7cd93d657", "url": "https://github.com/apache/druid/commit/2ec1a9b8a90a3391f1d9f440c7eed7e7cd93d657", "message": "added documentation for prometheus emitter", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "13d3fc3ac4f990ab21a507dc9562d3e973833e78", "url": "https://github.com/apache/druid/commit/13d3fc3ac4f990ab21a507dc9562d3e973833e78", "message": "safety for invalid labelNames", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "cd392eb803e0154c8db828880fe0b6c040ca7a90", "url": "https://github.com/apache/druid/commit/cd392eb803e0154c8db828880fe0b6c040ca7a90", "message": "fix travis checks", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "8246c3c18bbcd7acd835ab1ebdf1b8cbeb7e098e", "url": "https://github.com/apache/druid/commit/8246c3c18bbcd7acd835ab1ebdf1b8cbeb7e098e", "message": "Unit test and better sanitization of metrics names and label values", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "8ab89f28ae6136a98648de51290e334b82bbf448", "url": "https://github.com/apache/druid/commit/8ab89f28ae6136a98648de51290e334b82bbf448", "message": "add precondition to check namespace against regex", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "9b4c70d3920c26924ad1c5801c04854698d4baa2", "url": "https://github.com/apache/druid/commit/9b4c70d3920c26924ad1c5801c04854698d4baa2", "message": "use precompiled regex", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "5221655a60f8e8623f32ccca9f95cee327af497d", "url": "https://github.com/apache/druid/commit/5221655a60f8e8623f32ccca9f95cee327af497d", "message": "remove static imports. fix metric types", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "abae5c02aa8c2840b24b254f6a921a796ae8ec13", "url": "https://github.com/apache/druid/commit/abae5c02aa8c2840b24b254f6a921a796ae8ec13", "message": "better docs. fix possible NPE in PrometheusEmitterConfig. Guard against multiple calls to PrometheusEmitter.start()", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "fa4a985c9d9d9e390d555e86822110200e4ad49d", "url": "https://github.com/apache/druid/commit/fa4a985c9d9d9e390d555e86822110200e4ad49d", "message": "Update regex for label-value replacements to allow internal numeric values.  Additional tests", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "5689f444b291bdc702969a6fb68d6c5c9707789e", "url": "https://github.com/apache/druid/commit/5689f444b291bdc702969a6fb68d6c5c9707789e", "message": "Adds missing license header\nupdates website/.spelling to add words used in prometheus-emitter docs.\nupdates docs/operations/metrics.md to correct the spelling of\nbufferPoolName", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "1c355951470522470a98a0924b605829260479e0", "url": "https://github.com/apache/druid/commit/1c355951470522470a98a0924b605829260479e0", "message": "fixes version in extensions-contrib/prometheus-emitter", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "456486aa197ad2295d546d37455f005f41be90a1", "url": "https://github.com/apache/druid/commit/456486aa197ad2295d546d37455f005f41be90a1", "message": "fix style guide errors", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "8827fbf78bc2cd3fc8f193e52284b88c742616da", "url": "https://github.com/apache/druid/commit/8827fbf78bc2cd3fc8f193e52284b88c742616da", "message": "update import ordering", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "ba4a67242ad8f2b087b5cf2c672556158ee29d78", "url": "https://github.com/apache/druid/commit/ba4a67242ad8f2b087b5cf2c672556158ee29d78", "message": "add another word to website/.spelling", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "7aed5e1b54d484520a0cbec6b810e0458b1463a2", "url": "https://github.com/apache/druid/commit/7aed5e1b54d484520a0cbec6b810e0458b1463a2", "message": "remove unthrown declared exception", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "f079d67c30e19bce9e4356037f745f31f4042d04", "url": "https://github.com/apache/druid/commit/f079d67c30e19bce9e4356037f745f31f4042d04", "message": "remove unused import", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "76278f102baf0caf1244b5083eb1497db7866dcc", "url": "https://github.com/apache/druid/commit/76278f102baf0caf1244b5083eb1497db7866dcc", "message": "Pushgateway strategy for metrics", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "1e2e78ced09ca617d97df7105c912cb47f146ed7", "url": "https://github.com/apache/druid/commit/1e2e78ced09ca617d97df7105c912cb47f146ed7", "message": "typo", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "45412cc55dad7c84397f9bac1c5aba2e475a04f7", "url": "https://github.com/apache/druid/commit/45412cc55dad7c84397f9bac1c5aba2e475a04f7", "message": "Format fix and nullable strategy", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "6c248ce6f863413077b22de7a25030c9f57caccf", "url": "https://github.com/apache/druid/commit/6c248ce6f863413077b22de7a25030c9f57caccf", "message": "Update pom file for prometheus-emitter", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "7d4f7656799fdeaabb94e0fb199d2af9c4489de0", "url": "https://github.com/apache/druid/commit/7d4f7656799fdeaabb94e0fb199d2af9c4489de0", "message": "code review comments. Counter to gauge for cache metrics, periodical task to pushGateway", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "4d90a419d93c2a929d7f2ae38a72f40fc16567ea", "url": "https://github.com/apache/druid/commit/4d90a419d93c2a929d7f2ae38a72f40fc16567ea", "message": "Syntax fix", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "3a7a2b620309f2353830366d87d8da5a37cdce6f", "url": "https://github.com/apache/druid/commit/3a7a2b620309f2353830366d87d8da5a37cdce6f", "message": "Dimension label regex include numeric character back, fix previous commit", "committedDate": "2021-01-16T02:27:02Z", "type": "commit"}, {"oid": "3a7a2b620309f2353830366d87d8da5a37cdce6f", "url": "https://github.com/apache/druid/commit/3a7a2b620309f2353830366d87d8da5a37cdce6f", "message": "Dimension label regex include numeric character back, fix previous commit", "committedDate": "2021-01-16T02:27:02Z", "type": "forcePushed"}, {"oid": "b61f1b3129a06afd527adbc8cc60228496e04473", "url": "https://github.com/apache/druid/commit/b61f1b3129a06afd527adbc8cc60228496e04473", "message": "bump prometheus-emitter pom dev version", "committedDate": "2021-01-16T02:33:25Z", "type": "commit"}, {"oid": "b1b8d61a8b62702d31defaa6ed7a7036436c38b6", "url": "https://github.com/apache/druid/commit/b1b8d61a8b62702d31defaa6ed7a7036436c38b6", "message": "Remove scheduled task inside poen that push metrics", "committedDate": "2021-01-16T02:53:30Z", "type": "commit"}, {"oid": "e7e9e2fc4df68cc89c8828ecf05bd2acb830b8ae", "url": "https://github.com/apache/druid/commit/e7e9e2fc4df68cc89c8828ecf05bd2acb830b8ae", "message": "Fix checkstyle", "committedDate": "2021-02-07T22:35:24Z", "type": "commit"}, {"oid": "bffc63dc4254e1f4d3d758ae10b9848690551e85", "url": "https://github.com/apache/druid/commit/bffc63dc4254e1f4d3d758ae10b9848690551e85", "message": "Merge branch 'master' into feature/prometheus-metric-exporter", "committedDate": "2021-02-07T22:36:56Z", "type": "commit"}, {"oid": "b405b558b2176a6262b72ba4bd15ac0f3e1dc895", "url": "https://github.com/apache/druid/commit/b405b558b2176a6262b72ba4bd15ac0f3e1dc895", "message": "Unit test coverage", "committedDate": "2021-02-10T20:46:30Z", "type": "commit"}, {"oid": "a449027000fab0062c4bb1432790453ad0b67621", "url": "https://github.com/apache/druid/commit/a449027000fab0062c4bb1432790453ad0b67621", "message": "Merge branch 'master' into feature/prometheus-metric-exporter", "committedDate": "2021-02-10T20:47:34Z", "type": "commit"}, {"oid": "8f3463fc4d4675c69a46ac1026df1dad78aecc79", "url": "https://github.com/apache/druid/commit/8f3463fc4d4675c69a46ac1026df1dad78aecc79", "message": "Unit test coverage", "committedDate": "2021-02-16T00:07:36Z", "type": "commit"}, {"oid": "5cafe2f298f4c0964a1027df9d29bbfe9e80ab4c", "url": "https://github.com/apache/druid/commit/5cafe2f298f4c0964a1027df9d29bbfe9e80ab4c", "message": "Spelling", "committedDate": "2021-02-16T01:28:07Z", "type": "commit"}, {"oid": "c5074528195abec923b97e25181404034839b397", "url": "https://github.com/apache/druid/commit/c5074528195abec923b97e25181404034839b397", "message": "Merge branch 'master' into feature/prometheus-metric-exporter", "committedDate": "2021-02-27T00:28:18Z", "type": "commit"}, {"oid": "42048a57524fdcd63851b8c70d0bfde6d27c226f", "url": "https://github.com/apache/druid/commit/42048a57524fdcd63851b8c70d0bfde6d27c226f", "message": "Doc fix", "committedDate": "2021-03-02T01:23:12Z", "type": "commit"}, {"oid": "807f8dded488869f2147fe7337c3b64f64ec4e78", "url": "https://github.com/apache/druid/commit/807f8dded488869f2147fe7337c3b64f64ec4e78", "message": "spelling", "committedDate": "2021-03-02T20:00:09Z", "type": "commit"}]}