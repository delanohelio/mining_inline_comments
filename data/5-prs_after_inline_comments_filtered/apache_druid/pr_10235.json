{"pr_number": 10235, "pr_title": "Add \"offset\" parameter to GroupBy query.", "pr_createdAt": "2020-08-04T01:14:29Z", "pr_url": "https://github.com/apache/druid/pull/10235", "timeline": [{"oid": "8b49201d95abb4757145d293322a2303f0ceee72", "url": "https://github.com/apache/druid/commit/8b49201d95abb4757145d293322a2303f0ceee72", "message": "Add \"offset\" parameter to GroupBy query.\n\nIt works by doing the query as normal and then throwing away the first\n\"offset\" number of rows on the broker.", "committedDate": "2020-08-04T01:14:09Z", "type": "commit"}, {"oid": "dc5bf2264ea9dd69cbb3dfe4508493415fd597da", "url": "https://github.com/apache/druid/commit/dc5bf2264ea9dd69cbb3dfe4508493415fd597da", "message": "Stabilize GroupBy sorts.", "committedDate": "2020-08-04T02:36:44Z", "type": "commit"}, {"oid": "a6d801214fec20afd7b7ee685e75b8836b51854d", "url": "https://github.com/apache/druid/commit/a6d801214fec20afd7b7ee685e75b8836b51854d", "message": "Fix inspections.", "committedDate": "2020-08-04T02:39:35Z", "type": "commit"}, {"oid": "e003dc3421bc495e52b0f549686f175192bd81f9", "url": "https://github.com/apache/druid/commit/e003dc3421bc495e52b0f549686f175192bd81f9", "message": "Fix suppression.", "committedDate": "2020-08-04T02:43:35Z", "type": "commit"}, {"oid": "384cc4567dee6afa228e1a76a5c84e706872f009", "url": "https://github.com/apache/druid/commit/384cc4567dee6afa228e1a76a5c84e706872f009", "message": "Fixups.", "committedDate": "2020-08-04T04:18:32Z", "type": "commit"}, {"oid": "cb2732aca4e9b43637e46c3ded6b46688b64fb86", "url": "https://github.com/apache/druid/commit/cb2732aca4e9b43637e46c3ded6b46688b64fb86", "message": "Move TopNSequence to druid-core.", "committedDate": "2020-08-04T06:45:58Z", "type": "commit"}, {"oid": "219cfa8e5f384a0ec39bba5b762a01b084c20546", "url": "https://github.com/apache/druid/commit/219cfa8e5f384a0ec39bba5b762a01b084c20546", "message": "Addl comments.", "committedDate": "2020-08-04T08:16:28Z", "type": "commit"}, {"oid": "3e1107975aa794d731588ceaf9282d2b0c57298e", "url": "https://github.com/apache/druid/commit/3e1107975aa794d731588ceaf9282d2b0c57298e", "message": "NumberedElement equals verification.", "committedDate": "2020-08-04T22:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NjgxOQ==", "url": "https://github.com/apache/druid/pull/10235#discussion_r465346819", "bodyText": "What does 'least first' mean? Is this referring to .thenComparing by the number?", "author": "clintropolis", "createdAt": "2020-08-04T21:42:21Z", "path": "core/src/main/java/org/apache/druid/collections/StableLimitingSorter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.collections;\n+\n+import com.google.common.collect.MinMaxPriorityQueue;\n+import com.google.common.collect.Ordering;\n+\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+/**\n+ * Simultaneously sorts and limits its input.\n+ *\n+ * The sort is stable, meaning that equal elements (as determined by the comparator) will not be reordered.\n+ *\n+ * Not thread-safe.\n+ *\n+ * Note: this class doesn't have its own unit tests. It is tested along with\n+ * {@link org.apache.druid.java.util.common.guava.TopNSequence} in \"TopNSequenceTest\".\n+ */\n+public class StableLimitingSorter<T>\n+{\n+  private final MinMaxPriorityQueue<NumberedElement<T>> queue;\n+\n+  private long count = 0;\n+\n+  public StableLimitingSorter(final Comparator<T> comparator, final int limit)\n+  {\n+    this.queue = MinMaxPriorityQueue\n+        .orderedBy(\n+            Ordering.from(\n+                Comparator.<NumberedElement<T>, T>comparing(NumberedElement::getElement, comparator)\n+                    .thenComparing(NumberedElement::getNumber)\n+            )\n+        )\n+        .maximumSize(limit)\n+        .create();\n+  }\n+\n+  /**\n+   * Offer an element to the sorter.\n+   */\n+  public void add(T element)\n+  {\n+    queue.offer(new NumberedElement<>(element, count++));\n+  }\n+\n+  /**\n+   * Drain elements in sorted order (least first).", "originalCommit": "219cfa8e5f384a0ec39bba5b762a01b084c20546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1NzAxNA==", "url": "https://github.com/apache/druid/pull/10235#discussion_r465957014", "bodyText": "It means the elements are returned in ascending order.", "author": "gianm", "createdAt": "2020-08-05T19:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NjgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTcyMw==", "url": "https://github.com/apache/druid/pull/10235#discussion_r465361723", "bodyText": "Is the plan to update Sorting to store the offset, and computeSorting to set it when creating it from the calcite Sort in a follow-up so that this works in SQL?", "author": "clintropolis", "createdAt": "2020-08-04T22:17:50Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -928,6 +928,7 @@ public GroupByQuery toGroupByQuery()\n         sorting != null\n         ? new DefaultLimitSpec(\n             sorting.getOrderBys(),\n+            0,", "originalCommit": "219cfa8e5f384a0ec39bba5b762a01b084c20546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2MDc2Mw==", "url": "https://github.com/apache/druid/pull/10235#discussion_r465960763", "bodyText": "Yes.", "author": "gianm", "createdAt": "2020-08-05T19:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTk5MA==", "url": "https://github.com/apache/druid/pull/10235#discussion_r465361990", "bodyText": "Are these changes from the stabilization?", "author": "clintropolis", "createdAt": "2020-08-04T22:18:36Z", "path": "processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java", "diffHunk": "@@ -3700,7 +3702,7 @@ public void testGroupByWithOrderOnHyperUnique()\n             query,\n             \"1970-01-01T00:00:00.000Z\",\n             \"market\",\n-            \"upfront\",\n+            \"total_market\",", "originalCommit": "219cfa8e5f384a0ec39bba5b762a01b084c20546", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2MDgxMA==", "url": "https://github.com/apache/druid/pull/10235#discussion_r465960810", "bodyText": "Yes.", "author": "gianm", "createdAt": "2020-08-05T19:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTk5MA=="}], "type": "inlineReview"}, {"oid": "aeb52ed1e41cda97ac3ae4d79e3dd20987d92749", "url": "https://github.com/apache/druid/commit/aeb52ed1e41cda97ac3ae4d79e3dd20987d92749", "message": "Changes from review.", "committedDate": "2020-08-05T19:51:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjE3Ng==", "url": "https://github.com/apache/druid/pull/10235#discussion_r469416176", "bodyText": "Should this perhaps be 'Limit for this query...' instead of 'Offset for this query...'?", "author": "abhishekrb19", "createdAt": "2020-08-12T17:16:15Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/orderby/DefaultLimitSpec.java", "diffHunk": "@@ -113,12 +139,32 @@ public DefaultLimitSpec(\n     return columns;\n   }\n \n+  /**\n+   * Offset for this query; behaves like SQL \"OFFSET\". Zero means no offset. Negative values are invalid.\n+   */\n   @JsonProperty\n+  @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+  public int getOffset()\n+  {\n+    return offset;\n+  }\n+\n+  /**\n+   * Offset for this query; behaves like SQL \"LIMIT\". Will always be positive. {@link Integer#MAX_VALUE} is used in", "originalCommit": "aeb52ed1e41cda97ac3ae4d79e3dd20987d92749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1Mjc2MA==", "url": "https://github.com/apache/druid/pull/10235#discussion_r469552760", "bodyText": "Good catch. I raised a separate PR for it: #10269", "author": "gianm", "createdAt": "2020-08-12T21:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNjE3Ng=="}], "type": "inlineReview"}]}