{"pr_number": 9507, "pr_title": "optionally disable all of hardcoded zookeeper use", "pr_createdAt": "2020-03-12T06:20:16Z", "pr_url": "https://github.com/apache/druid/pull/9507", "timeline": [{"oid": "746ffeb5504c2126094a24728d0aca8a420868de", "url": "https://github.com/apache/druid/commit/746ffeb5504c2126094a24728d0aca8a420868de", "message": "optionally disable all of hardcoded zookeeper use", "committedDate": "2020-03-12T06:08:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzk5Mw==", "url": "https://github.com/apache/druid/pull/9507#discussion_r396907993", "bodyText": "Hmm, is this actually true if still using zk segment loading? It was wrong before for the same reasons I think for http segment loading. Maybe this resource should accept either segment loader like SegmentListerResource, or we should have another http resource that we bind instead depending which mode is enabled?", "author": "clintropolis", "createdAt": "2020-03-24T05:22:18Z", "path": "server/src/main/java/org/apache/druid/server/http/HistoricalResource.java", "diffHunk": "@@ -50,14 +50,14 @@ public HistoricalResource(\n   @Produces(MediaType.APPLICATION_JSON)\n   public Response getLoadStatus()\n   {\n-    return Response.ok(ImmutableMap.of(\"cacheInitialized\", coordinator.isStarted())).build();\n+    return Response.ok(ImmutableMap.of(\"cacheInitialized\", segmentLoadDropHandler.isStarted())).build();\n   }\n \n   @GET\n   @Path(\"/readiness\")\n   public Response getReadiness()\n   {\n-    if (coordinator.isStarted()) {\n+    if (segmentLoadDropHandler.isStarted()) {", "originalCommit": "746ffeb5504c2126094a24728d0aca8a420868de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNDAwNg==", "url": "https://github.com/apache/druid/pull/9507#discussion_r397314006", "bodyText": "primary thing checked  by this endpoint is  that  historical startup  sequence has  finished  loading/announcing segments that  it already had  on disk which  is often a time consuming activity. that is still  ensured by segmentLoadDropHandler.isStarted()", "author": "himanshug", "createdAt": "2020-03-24T16:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTg0OQ==", "url": "https://github.com/apache/druid/pull/9507#discussion_r396909849", "bodyText": "I haven't looked too closely yet, but I wonder if this would be better if this was marked as @Nullable and returned null instead of throwing the runtime exception, and shift the burden of validating that curator is available to the settings that do require it, such as inventory, segment loading, and task management? The other stuff might be able to be simplified a bit and not have to care about having the setting, and could probably avoid having some of the signature changes to use providers.", "author": "clintropolis", "createdAt": "2020-03-24T05:29:26Z", "path": "server/src/main/java/org/apache/druid/curator/CuratorModule.java", "diffHunk": "@@ -63,15 +63,20 @@\n   @Override\n   public void configure(Binder binder)\n   {\n+    JsonConfigProvider.bind(binder, CURATOR_CONFIG_PREFIX, ZkEnablementConfig.class);\n     JsonConfigProvider.bind(binder, CURATOR_CONFIG_PREFIX, CuratorConfig.class);\n     JsonConfigProvider.bind(binder, EXHIBITOR_CONFIG_PREFIX, ExhibitorConfig.class);\n   }\n \n   @Provides\n   @LazySingleton\n   @SuppressForbidden(reason = \"System#err\")\n-  public CuratorFramework makeCurator(CuratorConfig config, EnsembleProvider ensembleProvider, Lifecycle lifecycle)\n+  public CuratorFramework makeCurator(ZkEnablementConfig zkEnablementConfig, CuratorConfig config, EnsembleProvider ensembleProvider, Lifecycle lifecycle)", "originalCommit": "746ffeb5504c2126094a24728d0aca8a420868de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNTUzOA==", "url": "https://github.com/apache/druid/pull/9507#discussion_r397315538", "bodyText": "Main reason for failing loudly here is so that if I forgot to disable zk in some code  path, then this method would immediately  fail on node start with  guice injection errors leading to  quick discovery of exactly what is missed.\nthis helped me catch quite a few places that I missed.", "author": "himanshug", "createdAt": "2020-03-24T17:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDEwOQ==", "url": "https://github.com/apache/druid/pull/9507#discussion_r396910109", "bodyText": "This doesn't necessarily need to change in this PR, but it seems kind of leaky that this thing has a CuratorFramework at all, it seems like the load peon should provide this check so it can just be a no-op for non-zk. and then DruidCoordinator no longer needs a curator or zk paths I think?", "author": "clintropolis", "createdAt": "2020-03-24T05:30:39Z", "path": "server/src/main/java/org/apache/druid/server/coordinator/DruidCoordinator.java", "diffHunk": "@@ -443,7 +455,7 @@ public void moveSegment(\n             () -> {\n               try {\n                 if (serverInventoryView.isSegmentLoadedByServer(toServer.getName(), segment) &&\n-                    curator.checkExists().forPath(toLoadQueueSegPath) == null &&\n+                    (curator == null || curator.checkExists().forPath(toLoadQueueSegPath) == null) &&", "originalCommit": "746ffeb5504c2126094a24728d0aca8a420868de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNjY0Nw==", "url": "https://github.com/apache/druid/pull/9507#discussion_r397316647", "bodyText": "yeah, I hope zk based segment management will just go away and this will go as well.", "author": "himanshug", "createdAt": "2020-03-24T17:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDkxNQ==", "url": "https://github.com/apache/druid/pull/9507#discussion_r396910915", "bodyText": "Just thinking out loud, doesn't need to be addressed in this PR, it seems like maybe LoadQueueTaskMaster maybe needs some sort of peon factory that is set by config so that it doesn't have to care about individual implementations or curators and the like", "author": "clintropolis", "createdAt": "2020-03-24T05:33:46Z", "path": "server/src/main/java/org/apache/druid/server/coordinator/LoadQueueTaskMaster.java", "diffHunk": "@@ -67,7 +68,7 @@ public LoadQueuePeon giveMePeon(ImmutableDruidServer server)\n       return new HttpLoadQueuePeon(server.getURL(), jsonMapper, httpClient, config, peonExec, callbackExec);\n     } else {\n       return new CuratorLoadQueuePeon(\n-          curator,\n+          curatorFrameworkProvider.get(),", "originalCommit": "746ffeb5504c2126094a24728d0aca8a420868de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNzUyMw==", "url": "https://github.com/apache/druid/pull/9507#discussion_r397317523", "bodyText": "could be, but you know my preference by now :)\nI wish people would migrate  to using HTTP segment management and that would remain the only way and this would be deleted.", "author": "himanshug", "createdAt": "2020-03-24T17:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDE3Mw==", "url": "https://github.com/apache/druid/pull/9507#discussion_r396914173", "bodyText": "It seems like this class is almost entirely to handle zk stuff, does it need to be bound and exist at all if zk is disabled?", "author": "clintropolis", "createdAt": "2020-03-24T05:46:27Z", "path": "server/src/main/java/org/apache/druid/server/coordination/BatchDataSegmentAnnouncer.java", "diffHunk": "@@ -99,13 +107,28 @@ public BatchDataSegmentAnnouncer(\n       return rv;\n     };\n \n-    if (this.config.isSkipSegmentAnnouncementOnZk()) {\n+    isSkipSegmentAnnouncementOnZk = !zkEnablementConfig.isEnabled() || config.isSkipSegmentAnnouncementOnZk();", "originalCommit": "746ffeb5504c2126094a24728d0aca8a420868de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyMDk0NA==", "url": "https://github.com/apache/druid/pull/9507#discussion_r397320944", "bodyText": "this is also calling methods in\nprivate final ChangeRequestHistory<DataSegmentChangeRequest> changes = new ChangeRequestHistory<>();\nwhich is used by the http endpoint for segment sync.\nHowever, yeah it takes more work to announce stuff in zk so  it looks like that this class is primarily doing that whereas it is actually supporting both.\nIf/When we are able to delete zk based segment management this class would shrink significantly.\nAlso, unrelated, it could possibly be refactored to separate two things it is doing so that things are more clear.\nHowever, you know my preference, just delete  zk stuff :)", "author": "himanshug", "createdAt": "2020-03-24T17:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDE3Mw=="}], "type": "inlineReview"}, {"oid": "42c0c853dd92edfd2b040c764d0ba1454515f4e4", "url": "https://github.com/apache/druid/commit/42c0c853dd92edfd2b040c764d0ba1454515f4e4", "message": "Merge remote-tracking branch 'apache/master' into optional_disable_zk", "committedDate": "2020-05-30T00:42:20Z", "type": "commit"}, {"oid": "867f624865405d8a2771a34ad9142b1a24be62f9", "url": "https://github.com/apache/druid/commit/867f624865405d8a2771a34ad9142b1a24be62f9", "message": "Merge remote-tracking branch 'origin/master' into optional_disable_zk", "committedDate": "2020-10-26T18:52:13Z", "type": "commit"}, {"oid": "2382d1d351ec9ed3ebe03e39f678b9ade28584f4", "url": "https://github.com/apache/druid/commit/2382d1d351ec9ed3ebe03e39f678b9ade28584f4", "message": "fix DruidCoordinatorTest compilation", "committedDate": "2020-10-26T19:12:00Z", "type": "commit"}, {"oid": "2ac97849bfe22d017e964b28a807ef1da034a690", "url": "https://github.com/apache/druid/commit/2ac97849bfe22d017e964b28a807ef1da034a690", "message": "fix test in DruidCoordinatorTest", "committedDate": "2020-10-26T21:44:48Z", "type": "commit"}, {"oid": "02badd876adbe766d8701be5ed1fb62542a85e2f", "url": "https://github.com/apache/druid/commit/02badd876adbe766d8701be5ed1fb62542a85e2f", "message": "fix strict compilation", "committedDate": "2020-10-26T22:12:14Z", "type": "commit"}]}