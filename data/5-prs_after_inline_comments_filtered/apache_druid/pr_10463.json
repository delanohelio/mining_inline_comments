{"pr_number": 10463, "pr_title": "adjustments to Kafka integration tests to allow running against Azure Event Hubs streams", "pr_createdAt": "2020-10-02T06:08:05Z", "pr_url": "https://github.com/apache/druid/pull/10463", "timeline": [{"oid": "f0acfd1f48f82b5abdbc0af2d21bca5e1d8efcd2", "url": "https://github.com/apache/druid/commit/f0acfd1f48f82b5abdbc0af2d21bca5e1d8efcd2", "message": "adjustments to kafka integration tests to allow running against azure event hubs in kafka mode", "committedDate": "2020-10-02T05:28:59Z", "type": "commit"}, {"oid": "d0ad8a54673505c4e0696abc2618fb4fc2b01b01", "url": "https://github.com/apache/druid/commit/d0ad8a54673505c4e0696abc2618fb4fc2b01b01", "message": "oops", "committedDate": "2020-10-02T12:20:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3Mjk2OQ==", "url": "https://github.com/apache/druid/pull/10463#discussion_r498872969", "bodyText": "How does this flatten the map? It looks like it's just ignoring any value that isn't a String?", "author": "suneet-s", "createdAt": "2020-10-02T14:54:55Z", "path": "integration-tests/src/main/java/org/apache/druid/testing/DockerConfigProvider.java", "diffHunk": "@@ -260,4 +269,32 @@ public String getStreamEndpoint()\n       }\n     };\n   }\n+\n+  // there is probably a better way to do this...\n+  static class ArbitraryPropertiesJsonDeserializer extends JsonDeserializer<Map<String, String>>\n+  {\n+    @Override\n+    public Map<String, String> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n+        throws IOException\n+    {\n+      // reading like this results in a map that has both nested objects and also flattened string pairs\n+      // so the map looks something like this:\n+\n+      //    {\n+      //      \"a\" : { \"b\": { \"c\" : \"d\" }}},\n+      //      \"a.b.c\":\"d\"\n+      //    }\n+\n+      // filtering out the top level keys which do not have string values produces what we want here that\n+      // '-Ddruid.test.config.properites.some.property.key=foo' -> { \"some.property.key\":\"foo\"}\n+      Map<String, Object> parsed = jsonParser.readValueAs(Map.class);\n+      Map<String, String> flat = new HashMap<>();\n+      for (Map.Entry<String, Object> entry : parsed.entrySet()) {\n+        if (entry.getValue() instanceof String) {\n+          flat.put(entry.getKey(), (String) entry.getValue());\n+        }\n+      }", "originalCommit": "d0ad8a54673505c4e0696abc2618fb4fc2b01b01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMTAzOQ==", "url": "https://github.com/apache/druid/pull/10463#discussion_r499031039", "bodyText": "TBH I'm not entirely sure why the map ends up like it does coming from jackson, but I tried to explain what is going on here in the comments above. This block is just filtering out non-string values, leaving only the flat map after it is done.", "author": "clintropolis", "createdAt": "2020-10-02T20:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3Mjk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNDQzNA==", "url": "https://github.com/apache/druid/pull/10463#discussion_r499034434", "bodyText": "I misread your comment earlier I thought an input of\n{\"a\" : { \"b\": { \"c\" : \"d\" }}}}\nwould be converted to a map with an entry like\n\"a.b.c\":\"d\"\n\nTo help me understand, could you describe an example (sample input + expected output) where the default Deserializer would produce a different output from what this deserializer does?", "author": "suneet-s", "createdAt": "2020-10-02T20:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3Mjk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1NzQ3Nw==", "url": "https://github.com/apache/druid/pull/10463#discussion_r499157477", "bodyText": "If its not been discussed before, its the org.apache.druid.guice.JsonConfigurator#hieraricalPutValue behind such kind of duplicate values. Its possible that passing properties such as below may work\ndruid.test.config.properties={\"kafka.test.property.security.protocol\": \"SASL_SSL\", \"kafka.test.property.sasl.mechanism\":\"PLAIN\"}", "author": "abhishekagarwal87", "createdAt": "2020-10-03T15:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3Mjk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3NTAxMg==", "url": "https://github.com/apache/druid/pull/10463#discussion_r498875012", "bodyText": "Maybe move this to line 56 so that the config can override other properties like acks if needed in the future", "author": "suneet-s", "createdAt": "2020-10-02T14:58:08Z", "path": "integration-tests/src/main/java/org/apache/druid/testing/utils/KafkaEventWriter.java", "diffHunk": "@@ -42,8 +42,8 @@\n   public KafkaEventWriter(IntegrationTestingConfig config, boolean txnEnabled)\n   {\n     Properties properties = new Properties();\n-    KafkaUtil.addPropertiesFromTestConfig(config, properties);\n     properties.setProperty(\"bootstrap.servers\", config.getKafkaHost());\n+    KafkaUtil.addPropertiesFromTestConfig(config, properties);", "originalCommit": "d0ad8a54673505c4e0696abc2618fb4fc2b01b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0624e82271ab325e22767267f4b86e9ce37ae987", "url": "https://github.com/apache/druid/commit/0624e82271ab325e22767267f4b86e9ce37ae987", "message": "make better", "committedDate": "2020-10-02T21:52:45Z", "type": "commit"}, {"oid": "efb8b2d17dbc4c54cb31139447831376b8cf6724", "url": "https://github.com/apache/druid/commit/efb8b2d17dbc4c54cb31139447831376b8cf6724", "message": "more better", "committedDate": "2020-10-02T21:58:41Z", "type": "commit"}]}