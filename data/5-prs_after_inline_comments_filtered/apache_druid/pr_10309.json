{"pr_number": 10309, "pr_title": "introduce DynamicConfigProvider interface and make kafka consumer props extensible", "pr_createdAt": "2020-08-22T03:12:47Z", "pr_url": "https://github.com/apache/druid/pull/10309", "timeline": [{"oid": "0842256390d21f1c8678fea3f4d10d547592a05f", "url": "https://github.com/apache/druid/commit/0842256390d21f1c8678fea3f4d10d547592a05f", "message": "introduce DynamicConfigProvider interface and make kafka consumer props extensible", "committedDate": "2020-08-22T03:06:02Z", "type": "commit"}, {"oid": "bc575c338f85a088214888f81b5e63d915243cd9", "url": "https://github.com/apache/druid/commit/bc575c338f85a088214888f81b5e63d915243cd9", "message": "fix intellij inspection error", "committedDate": "2020-08-22T06:14:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzczNg==", "url": "https://github.com/apache/druid/pull/10309#discussion_r475253736", "bodyText": "should this return Map<String, Object> to support a wider range of possible configuration value types since any extension other than Kafka could use it?", "author": "abhishekagarwal87", "createdAt": "2020-08-23T19:05:21Z", "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is used to get [secure] configuration in various places in an extensible way.\n+ */\n+@ExtensionPoint\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = MapBasedDynamicConfigProvider.class)\n+@JsonSubTypes(value = {\n+    @JsonSubTypes.Type(name = \"map\", value = MapBasedDynamicConfigProvider.class),\n+})\n+public interface DynamicConfigProvider\n+{\n+  Map<String, String> getConfig();", "originalCommit": "bc575c338f85a088214888f81b5e63d915243cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4OTg1MQ==", "url": "https://github.com/apache/druid/pull/10309#discussion_r476789851", "bodyText": "Intention of this interface certainly is to be used everywhere we get extensible user config (currently the places that are using PasswordProvider), while a cursory look says that Map<String, String> would be sufficient for all the places but I see the desire to have it be more generic. I am probably gonna parameterize the interface to DynamicConfigProvider<T> so that client code would be able to work without typecasting but interface would still serve use case of any value types.", "author": "himanshug", "createdAt": "2020-08-25T22:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzczNg=="}], "type": "inlineReview"}, {"oid": "24fa183c413830a05c9b692526291f0a82a1e2e0", "url": "https://github.com/apache/druid/commit/24fa183c413830a05c9b692526291f0a82a1e2e0", "message": "make DynamicConfigProvider generic\n\nChange-Id: I2e3e89f8617b6fe7fc96859deca4011f609dc5a3", "committedDate": "2020-08-26T16:56:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzU4MQ==", "url": "https://github.com/apache/druid/pull/10309#discussion_r534373581", "bodyText": "nit: should we annotate PasswordProvider as @Deprecated in favor of this class?", "author": "jihoonson", "createdAt": "2020-12-02T18:03:45Z", "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is used to get [secure] configuration in various places in an extensible way.\n+ */\n+@ExtensionPoint\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = MapStringDynamicConfigProvider.class)\n+@JsonSubTypes(value = {\n+    @JsonSubTypes.Type(name = \"mapString\", value = MapStringDynamicConfigProvider.class),\n+})\n+public interface DynamicConfigProvider<T>", "originalCommit": "24fa183c413830a05c9b692526291f0a82a1e2e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTE2MQ==", "url": "https://github.com/apache/druid/pull/10309#discussion_r534549161", "bodyText": "I didn't mark that deprecated because users wanting to have their own extension for db password must still implement a PasswordProvider ,\nhowever, for Druid devs, any new credential/extensible-config type thing must use DynamicConfigProvider ... so PasswordProvider is \"deprecated\" in that sense.\nwill mark it deprecated and add few comments.", "author": "himanshug", "createdAt": "2020-12-02T23:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzU4MQ=="}], "type": "inlineReview"}, {"oid": "1cebe8bb51924a4066066ab2b6fb155588c1c4f9", "url": "https://github.com/apache/druid/commit/1cebe8bb51924a4066066ab2b6fb155588c1c4f9", "message": "deprecate PasswordProvider", "committedDate": "2020-12-02T23:23:52Z", "type": "commit"}]}