{"pr_number": 9251, "pr_title": "fix some issues with filters on numeric columns with nulls", "pr_createdAt": "2020-01-24T09:19:23Z", "pr_url": "https://github.com/apache/druid/pull/9251", "timeline": [{"oid": "4bafeff00e73f24679c47dc945440dacc20dfcb1", "url": "https://github.com/apache/druid/commit/4bafeff00e73f24679c47dc945440dacc20dfcb1", "message": "fix issue with long column predicate filters and nulls", "committedDate": "2020-01-24T09:10:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5Mjg0OA==", "url": "https://github.com/apache/druid/pull/9251#discussion_r370892848", "bodyText": "How about moving these three tests to BoundFilterTest? I suggest this for two reasons:\n\nThis test isn't adding much to coverage of the SQL layer.\nBoundFilterTest extends from BaseFilterTest which tests a whole big matrix of configurations, so coverage of the lower level stuff will be better vs. using CalciteQueryTest.", "author": "gianm", "createdAt": "2020-01-25T00:08:49Z", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -3198,6 +3198,69 @@ public void testNullLongTopN() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testLongPredicateFilterNulls() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM druid.numfoo\\n\"\n+        + \"WHERE l1 > 3\",\n+        ImmutableList.of(\n+            Druids.newTimeseriesQueryBuilder()\n+                  .dataSource(CalciteTests.DATASOURCE3)\n+                  .intervals(querySegmentSpec(Filtration.eternity()))\n+                  .granularity(Granularities.ALL)\n+                  .filters(bound(\"l1\", \"3\", null, true, false, null, StringComparators.NUMERIC))", "originalCommit": "4bafeff00e73f24679c47dc945440dacc20dfcb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MzQzMw==", "url": "https://github.com/apache/druid/pull/9251#discussion_r370893433", "bodyText": "Yeah, I'm working on adding some tests here to get the extra coverage", "author": "clintropolis", "createdAt": "2020-01-25T00:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5Mjg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NDk4Mg==", "url": "https://github.com/apache/druid/pull/9251#discussion_r370894982", "bodyText": "Rad.", "author": "gianm", "createdAt": "2020-01-25T00:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5Mjg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2ODI2Mw==", "url": "https://github.com/apache/druid/pull/9251#discussion_r371168263", "bodyText": "I did some refactoring around BaseFilterTest to add in numeric columns with null values, and bumped into some additional issues. First one in the JavascriptDimFilter, whose numeric predicates did not implement applyNull, meaning you couldn't specifically filter for the null value. The 'in' filter I believe also has this problem, assuming that something like .. x IN (1, 2, NULL) is valid, but is more involved to fix so I didn't do it in this PR (assuming it needs fixed?).\nI also ran into some issues with vectorized value and predicate matchers on numeric null columns. The initial issue is that the matchers were not checking the null bitmap, however once that was in place I bumped into another issue that the null vector could be incorrectly polluted with the wrong null information in the case where the null bitmap ran out of values before the end of the column (likely) because it was breaking from the loop instead of writing false values until the end vector offset.\nI added tests for all of these cases.\nI did not dig into the expression filter for fear of what I might run into, but will investigate this as a follow-up to this PR, along with any remaining filters which I did not address.", "author": "clintropolis", "createdAt": "2020-01-27T10:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5Mjg0OA=="}], "type": "inlineReview"}, {"oid": "db5da9929429321672e208234f6064df28c6c6e8", "url": "https://github.com/apache/druid/commit/db5da9929429321672e208234f6064df28c6c6e8", "message": "dang", "committedDate": "2020-01-26T01:20:12Z", "type": "commit"}, {"oid": "c9a427e630ce42d1ff80ef28db22ac227eeba869", "url": "https://github.com/apache/druid/commit/c9a427e630ce42d1ff80ef28db22ac227eeba869", "message": "uncomment a thing", "committedDate": "2020-01-26T01:23:47Z", "type": "commit"}, {"oid": "e84c0c720ec0a03b61d2bdbee39962512a20e20c", "url": "https://github.com/apache/druid/commit/e84c0c720ec0a03b61d2bdbee39962512a20e20c", "message": "styles", "committedDate": "2020-01-26T02:26:50Z", "type": "commit"}, {"oid": "1d841e9f273ffad65b18fb17d8ac667975ad3c37", "url": "https://github.com/apache/druid/commit/1d841e9f273ffad65b18fb17d8ac667975ad3c37", "message": "oops", "committedDate": "2020-01-26T03:35:07Z", "type": "commit"}, {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e", "url": "https://github.com/apache/druid/commit/67b5a08b6a6729da258c71c092eacfb282404b4e", "message": "allcaps", "committedDate": "2020-01-26T12:51:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjYzMQ==", "url": "https://github.com/apache/druid/pull/9251#discussion_r371536631", "bodyText": "How about using Arrays.fill to fill the rest with falses, and then break? Should be somewhat more efficient.", "author": "gianm", "createdAt": "2020-01-27T23:17:56Z", "path": "processing/src/main/java/org/apache/druid/segment/vector/VectorSelectorUtils.java", "diffHunk": "@@ -57,7 +57,8 @@\n         final int row = i + startOffset;\n         nullIterator.advanceIfNeeded(row);\n         if (!nullIterator.hasNext()) {\n-          break;", "originalCommit": "67b5a08b6a6729da258c71c092eacfb282404b4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MzE5MQ==", "url": "https://github.com/apache/druid/pull/9251#discussion_r371543191", "bodyText": "\ud83d\udc4d will change", "author": "clintropolis", "createdAt": "2020-01-27T23:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjY2NQ==", "url": "https://github.com/apache/druid/pull/9251#discussion_r371536665", "bodyText": "Same comment.", "author": "gianm", "createdAt": "2020-01-27T23:18:03Z", "path": "processing/src/main/java/org/apache/druid/segment/vector/VectorSelectorUtils.java", "diffHunk": "@@ -71,7 +72,8 @@\n         final int row = currentOffsets[i];\n         nullIterator.advanceIfNeeded(row);\n         if (!nullIterator.hasNext()) {\n-          break;", "originalCommit": "67b5a08b6a6729da258c71c092eacfb282404b4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjg0NA==", "url": "https://github.com/apache/druid/pull/9251#discussion_r371536844", "bodyText": "Did you mean javax.annotation.Nullable?", "author": "gianm", "createdAt": "2020-01-27T23:18:36Z", "path": "processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java", "diffHunk": "@@ -24,8 +24,20 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Iterables;\n+import junitparams.converters.Nullable;", "originalCommit": "67b5a08b6a6729da258c71c092eacfb282404b4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0MzIwNw==", "url": "https://github.com/apache/druid/pull/9251#discussion_r371543207", "bodyText": "Heh, oops, gg intellij", "author": "clintropolis", "createdAt": "2020-01-27T23:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjg0NA=="}], "type": "inlineReview"}, {"oid": "7c6bbb255fa373285ee70ee7dd673c2f27af5233", "url": "https://github.com/apache/druid/commit/7c6bbb255fa373285ee70ee7dd673c2f27af5233", "message": "review stuff", "committedDate": "2020-01-27T23:55:45Z", "type": "commit"}]}