{"pr_number": 10208, "pr_title": "Cluster wide default query context setting", "pr_createdAt": "2020-07-24T08:26:30Z", "pr_url": "https://github.com/apache/druid/pull/10208", "timeline": [{"oid": "48a734d35b28d3a1ffaf5181199cd123d38709a9", "url": "https://github.com/apache/druid/commit/48a734d35b28d3a1ffaf5181199cd123d38709a9", "message": "Cluster wide default query context setting", "committedDate": "2020-07-24T08:17:10Z", "type": "commit"}, {"oid": "f1f0b703d12c5a4811ca502dbfaf170b440abc9a", "url": "https://github.com/apache/druid/commit/f1f0b703d12c5a4811ca502dbfaf170b440abc9a", "message": "Cluster wide default query context setting", "committedDate": "2020-07-24T08:18:14Z", "type": "commit"}, {"oid": "4c38606da6d53ae34d57ec285dc5ade9b77410ea", "url": "https://github.com/apache/druid/commit/4c38606da6d53ae34d57ec285dc5ade9b77410ea", "message": "Cluster wide default query context setting", "committedDate": "2020-07-24T08:20:26Z", "type": "commit"}, {"oid": "bffe50df6e7c4bf28f1bffbef4dca180ddeea114", "url": "https://github.com/apache/druid/commit/bffe50df6e7c4bf28f1bffbef4dca180ddeea114", "message": "add docs", "committedDate": "2020-07-24T09:47:30Z", "type": "commit"}, {"oid": "ae207503896c7b03dd1d54ef0ca521171b33365d", "url": "https://github.com/apache/druid/commit/ae207503896c7b03dd1d54ef0ca521171b33365d", "message": "fix docs", "committedDate": "2020-07-24T19:35:47Z", "type": "commit"}, {"oid": "317917084d851581afd1416abb5ea5f2300b79d6", "url": "https://github.com/apache/druid/commit/317917084d851581afd1416abb5ea5f2300b79d6", "message": "update props", "committedDate": "2020-07-25T05:55:49Z", "type": "commit"}, {"oid": "c4efd3cbd25cd5208afd29f4e68c9dadddcb9b2e", "url": "https://github.com/apache/druid/commit/c4efd3cbd25cd5208afd29f4e68c9dadddcb9b2e", "message": "fix checkstyle", "committedDate": "2020-07-25T05:57:01Z", "type": "commit"}, {"oid": "1e9de7908d6937df4ec889cfa4ebe9e8efb5ef72", "url": "https://github.com/apache/druid/commit/1e9de7908d6937df4ec889cfa4ebe9e8efb5ef72", "message": "fix checkstyle", "committedDate": "2020-07-25T05:58:47Z", "type": "commit"}, {"oid": "8d8771adc84e9a81416004f01595189c1484a460", "url": "https://github.com/apache/druid/commit/8d8771adc84e9a81416004f01595189c1484a460", "message": "fix checkstyle", "committedDate": "2020-07-25T06:00:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDQ2OA==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461094468", "bodyText": "mergeing -> merging", "author": "jon-wei", "createdAt": "2020-07-27T18:43:43Z", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,50 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in mergeing of the configs is as follow:", "originalCommit": "8d8771adc84e9a81416004f01595189c1484a460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNzkxNw==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461227917", "bodyText": "Done", "author": "maytasm", "createdAt": "2020-07-27T23:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDUyOA==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461094528", "bodyText": "codeded -> coded", "author": "jon-wei", "createdAt": "2020-07-27T18:43:50Z", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,50 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in mergeing of the configs is as follow:\n+ * Hard codeded default values (from {@link QueryContexts} can be override by", "originalCommit": "8d8771adc84e9a81416004f01595189c1484a460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyODE0OQ==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461228149", "bodyText": "Re-wrote this point", "author": "maytasm", "createdAt": "2020-07-27T23:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDUyOA=="}], "type": "inlineReview"}, {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf", "url": "https://github.com/apache/druid/commit/bca5d4ef785c77db090c941ad435ba39cd842adf", "message": "update docs", "committedDate": "2020-07-27T23:31:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NDg4NQ==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461874885", "bodyText": "I think .override.default. is sort of redundant and overly nested, please either make this druid.query.default.context or maybe druid.query.override.context, but I think the default works a little better.", "author": "clintropolis", "createdAt": "2020-07-28T20:58:38Z", "path": "server/src/main/java/org/apache/druid/guice/QueryToolChestModule.java", "diffHunk": "@@ -97,7 +97,7 @@ public void configure(Binder binder)\n \n     binder.bind(QueryToolChestWarehouse.class).to(MapQueryToolChestWarehouse.class);\n \n-    JsonConfigProvider.bind(binder, \"druid.query\", QueryConfig.class);\n+    JsonConfigProvider.bind(binder, \"druid.query.override.default.context\", OverrideDefaultQueryContext.class);", "originalCommit": "bca5d4ef785c77db090c941ad435ba39cd842adf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NTc5MQ==", "url": "https://github.com/apache/druid/pull/10208#discussion_r462045791", "bodyText": "Changed to druid.query.default.context", "author": "maytasm", "createdAt": "2020-07-29T05:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NDg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MDUyNQ==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461880525", "bodyText": "This doesn't seem very flexible or future proof, what if we ever want to add any defaults that are not context parameters? The way this currently is we would need to add another config class that either has this as a property and remove the binding to this, or we ensure that doesn't itself have a context property and just have bindings for both. Why not just making this @JsonProperty(\"context\") and binding the class itself to the parent path? Is there some benefit to doing it this way that I'm missing?", "author": "clintropolis", "createdAt": "2020-07-28T21:08:23Z", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();\n \n-  public Vectorize getVectorize()\n+  @JsonAnyGetter", "originalCommit": "bca5d4ef785c77db090c941ad435ba39cd842adf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MTI3Mw==", "url": "https://github.com/apache/druid/pull/10208#discussion_r462091273", "bodyText": "Done.", "author": "maytasm", "createdAt": "2020-07-29T07:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MDUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTI5OQ==", "url": "https://github.com/apache/druid/pull/10208#discussion_r461925299", "bodyText": "I'm wondering if it's possible to initialize configs with the default values in QueryContexts if they are missing and remove those defaults from QueryContexts. In this way, we can keep all default values in a single place and compute query context values in a more structured way. I think it's possible by keeping all default values in a map somewhere and overriding them with user-provided default values when initializing this class.", "author": "jihoonson", "createdAt": "2020-07-28T22:18:12Z", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();", "originalCommit": "bca5d4ef785c77db090c941ad435ba39cd842adf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Mjc1Ng==", "url": "https://github.com/apache/druid/pull/10208#discussion_r462082756", "bodyText": "Yes. That is definitely possible and is a good point. I think that will just be moving things around from QueryContexts into this class (into the constructor). Since that does not impact the end-user (meaning that the defaults will remains the same, the way user specify the override are the same, etc.), I think we can do it in a separate PR.", "author": "maytasm", "createdAt": "2020-07-29T07:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTA0Nw==", "url": "https://github.com/apache/druid/pull/10208#discussion_r462489047", "bodyText": "I'm OK with doing it as a follow-up.", "author": "jihoonson", "createdAt": "2020-07-29T18:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTI5OQ=="}], "type": "inlineReview"}, {"oid": "1dcab079467b04ef471289b7a15c6bd81f7143a0", "url": "https://github.com/apache/druid/commit/1dcab079467b04ef471289b7a15c6bd81f7143a0", "message": "address comments", "committedDate": "2020-07-29T07:43:52Z", "type": "commit"}, {"oid": "e42c8a98feedef7904659d8ebe56035d4f832134", "url": "https://github.com/apache/druid/commit/e42c8a98feedef7904659d8ebe56035d4f832134", "message": "fix checkstyle", "committedDate": "2020-07-29T07:45:19Z", "type": "commit"}, {"oid": "b52e3d5cd3fbde1f1e6ab2a2beb4f2b3849a2638", "url": "https://github.com/apache/druid/commit/b52e3d5cd3fbde1f1e6ab2a2beb4f2b3849a2638", "message": "fix checkstyle", "committedDate": "2020-07-29T07:46:32Z", "type": "commit"}, {"oid": "810622040a010abf1925cfe36bd7e4e29d93618d", "url": "https://github.com/apache/druid/commit/810622040a010abf1925cfe36bd7e4e29d93618d", "message": "fix checkstyle", "committedDate": "2020-07-29T07:49:11Z", "type": "commit"}, {"oid": "8901b719a877ed562be6f4208055333fbaf55f33", "url": "https://github.com/apache/druid/commit/8901b719a877ed562be6f4208055333fbaf55f33", "message": "fix checkstyle", "committedDate": "2020-07-29T07:51:14Z", "type": "commit"}, {"oid": "46613b6f42195e87fdbb38ea09baf2acc7ba58f9", "url": "https://github.com/apache/druid/commit/46613b6f42195e87fdbb38ea09baf2acc7ba58f9", "message": "fix checkstyle", "committedDate": "2020-07-29T07:52:03Z", "type": "commit"}, {"oid": "56ad5cf5a587b49a4d6b2dbba43a6613ed22837f", "url": "https://github.com/apache/druid/commit/56ad5cf5a587b49a4d6b2dbba43a6613ed22837f", "message": "fix NPE", "committedDate": "2020-07-29T19:08:59Z", "type": "commit"}]}