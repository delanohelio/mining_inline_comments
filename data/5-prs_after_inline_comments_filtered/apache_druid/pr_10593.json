{"pr_number": 10593, "pr_title": "IncrementalIndex Tests and Benchmarks Parametrization", "pr_createdAt": "2020-11-18T13:56:44Z", "pr_url": "https://github.com/apache/druid/pull/10593", "timeline": [{"oid": "559a9e8afcb3bf1ac42533c9c57b12d99f913eec", "url": "https://github.com/apache/druid/commit/559a9e8afcb3bf1ac42533c9c57b12d99f913eec", "message": "Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale]", "committedDate": "2020-11-30T10:46:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MzQ0Mg==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539593442", "bodyText": "Typo: form -> from", "author": "a2l007", "createdAt": "2020-12-09T19:40:55Z", "path": "processing/src/main/java/org/apache/druid/segment/generator/DataGenerator.java", "diffHunk": "@@ -143,4 +151,54 @@ private long nextTimestamp()\n     }\n   }\n \n+  /**\n+   * Initialize a Java Stream generator for InputRow from this DataGenerator.\n+   *\n+   * @param numOfRows the number of rows to generate\n+   * @return a generator\n+   */\n+  private Stream<InputRow> generator(int numOfRows)\n+  {\n+    return Stream.generate(this::nextRow).limit(numOfRows);\n+  }\n+\n+  /**\n+   * Add rows form any generator to an index.", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxMTIwMg==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541911202", "bodyText": "Fixed", "author": "liran-funaro", "createdAt": "2020-12-13T12:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MzQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYyMTc5MA==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539621790", "bodyText": "Can we use StringUtils.format here instead?", "author": "a2l007", "createdAt": "2020-12-09T20:26:14Z", "path": "processing/src/test/java/org/apache/druid/segment/incremental/IncrementalIndexCreator.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.incremental;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An incremental-index creator for parameterized incremental-index tests.\n+ * It lists all the available incremental-index implementations, and responsible to create and close incremental-index\n+ * instances during the tests.\n+ */\n+public class IncrementalIndexCreator implements Closeable\n+{\n+  public static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+\n+  /**\n+   * Allows adding support for testing unregistered indexes.\n+   * It is used by Druid's extensions for the incremental-index.\n+   *\n+   * @param c    an index spec class\n+   * @param name an index spec name\n+   */\n+  public static void addIndexSpec(Class<?> c, String name)\n+  {\n+    JSON_MAPPER.registerSubtypes(new NamedType(c, name));\n+  }\n+\n+  static {\n+    // The off-heap incremental-index is not registered for production, but we want to include it in the tests.\n+    IncrementalIndexCreator.addIndexSpec(OffheapIncrementalIndexTestSpec.class, OffheapIncrementalIndexTestSpec.TYPE);\n+  }\n+\n+  /**\n+   * Fetch all the available incremental-index implementations.\n+   * It can be used to parametrize the test. If more parameters are needed, use indexTypeCartesianProduct().\n+   * @see #indexTypeCartesianProduct(Collection[]).\n+   *\n+   * @return a list of all the incremental-index implementations types (String)\n+   */\n+  public static List<String> getAppendableIndexTypes()\n+  {\n+    SubtypeResolver resolver = JSON_MAPPER.getSubtypeResolver();\n+    MapperConfig<?> config = JSON_MAPPER.getDeserializationConfig();\n+    AnnotatedClass cls = AnnotatedClassResolver.resolveWithoutSuperTypes(config, AppendableIndexSpec.class);\n+    Collection<NamedType> types = resolver.collectAndResolveSubtypesByClass(config, cls);\n+    return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n+  }\n+\n+  public interface IndexCreator\n+  {\n+    /**\n+     * Build an index given a builder and args.\n+     *\n+     * @param builder an incremental index builder supplied by the framework\n+     * @param args a list of arguments that are used to configure the builder\n+     * @return a new instance of an incremental-index\n+     */\n+    IncrementalIndex<?> createIndex(AppendableIndexBuilder builder, Object... args);\n+  }\n+\n+  private final Closer closer = Closer.create();\n+\n+  private final AppendableIndexSpec appendableIndexSpec;\n+\n+  private final IndexCreator indexCreator;\n+\n+  /**\n+   * Initialize the creator.\n+   *\n+   * @param spec a spec that can generate a incremental-index builder\n+   * @param indexCreator a function that generate an index given a builder and arguments\n+   */\n+  public IncrementalIndexCreator(AppendableIndexSpec spec, IndexCreator indexCreator)\n+  {\n+    this.appendableIndexSpec = spec;\n+    this.indexCreator = indexCreator;\n+  }\n+\n+  /**\n+   * Initialize the creator.\n+   *\n+   * @param indexType an index type (name)\n+   * @param indexCreator a function that generate an index given a builder and arguments\n+   */\n+  public IncrementalIndexCreator(String indexType, IndexCreator indexCreator) throws JsonProcessingException\n+  {\n+    this(parseIndexType(indexType), indexCreator);\n+  }\n+\n+  /**\n+   * Generate an AppendableIndexSpec from index type.\n+   *\n+   * @param indexType an index type\n+   * @return AppendableIndexSpec instance of this type\n+   * @throws JsonProcessingException if failed to to parse the index\n+   */\n+  public static AppendableIndexSpec parseIndexType(String indexType) throws JsonProcessingException\n+  {\n+    return JSON_MAPPER.readValue(\n+        String.format(Locale.ENGLISH, \"{\\\"type\\\": \\\"%s\\\"}\", indexType),", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxMTIxMA==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541911210", "bodyText": "Fixed.", "author": "liran-funaro", "createdAt": "2020-12-13T12:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYyMTc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MDM3Ng==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539660376", "bodyText": "This method is convenient but it would be useful to add more detail on how it can be used.", "author": "a2l007", "createdAt": "2020-12-09T21:27:14Z", "path": "processing/src/test/java/org/apache/druid/segment/incremental/IncrementalIndexCreator.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.incremental;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An incremental-index creator for parameterized incremental-index tests.\n+ * It lists all the available incremental-index implementations, and responsible to create and close incremental-index\n+ * instances during the tests.\n+ */\n+public class IncrementalIndexCreator implements Closeable\n+{\n+  public static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+\n+  /**\n+   * Allows adding support for testing unregistered indexes.\n+   * It is used by Druid's extensions for the incremental-index.\n+   *\n+   * @param c    an index spec class\n+   * @param name an index spec name\n+   */\n+  public static void addIndexSpec(Class<?> c, String name)\n+  {\n+    JSON_MAPPER.registerSubtypes(new NamedType(c, name));\n+  }\n+\n+  static {\n+    // The off-heap incremental-index is not registered for production, but we want to include it in the tests.\n+    IncrementalIndexCreator.addIndexSpec(OffheapIncrementalIndexTestSpec.class, OffheapIncrementalIndexTestSpec.TYPE);\n+  }\n+\n+  /**\n+   * Fetch all the available incremental-index implementations.\n+   * It can be used to parametrize the test. If more parameters are needed, use indexTypeCartesianProduct().\n+   * @see #indexTypeCartesianProduct(Collection[]).\n+   *\n+   * @return a list of all the incremental-index implementations types (String)\n+   */\n+  public static List<String> getAppendableIndexTypes()\n+  {\n+    SubtypeResolver resolver = JSON_MAPPER.getSubtypeResolver();\n+    MapperConfig<?> config = JSON_MAPPER.getDeserializationConfig();\n+    AnnotatedClass cls = AnnotatedClassResolver.resolveWithoutSuperTypes(config, AppendableIndexSpec.class);\n+    Collection<NamedType> types = resolver.collectAndResolveSubtypesByClass(config, cls);\n+    return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n+  }\n+\n+  public interface IndexCreator\n+  {\n+    /**\n+     * Build an index given a builder and args.\n+     *\n+     * @param builder an incremental index builder supplied by the framework\n+     * @param args a list of arguments that are used to configure the builder\n+     * @return a new instance of an incremental-index\n+     */\n+    IncrementalIndex<?> createIndex(AppendableIndexBuilder builder, Object... args);\n+  }\n+\n+  private final Closer closer = Closer.create();\n+\n+  private final AppendableIndexSpec appendableIndexSpec;\n+\n+  private final IndexCreator indexCreator;\n+\n+  /**\n+   * Initialize the creator.\n+   *\n+   * @param spec a spec that can generate a incremental-index builder\n+   * @param indexCreator a function that generate an index given a builder and arguments\n+   */\n+  public IncrementalIndexCreator(AppendableIndexSpec spec, IndexCreator indexCreator)\n+  {\n+    this.appendableIndexSpec = spec;\n+    this.indexCreator = indexCreator;\n+  }\n+\n+  /**\n+   * Initialize the creator.\n+   *\n+   * @param indexType an index type (name)\n+   * @param indexCreator a function that generate an index given a builder and arguments\n+   */\n+  public IncrementalIndexCreator(String indexType, IndexCreator indexCreator) throws JsonProcessingException\n+  {\n+    this(parseIndexType(indexType), indexCreator);\n+  }\n+\n+  /**\n+   * Generate an AppendableIndexSpec from index type.\n+   *\n+   * @param indexType an index type\n+   * @return AppendableIndexSpec instance of this type\n+   * @throws JsonProcessingException if failed to to parse the index\n+   */\n+  public static AppendableIndexSpec parseIndexType(String indexType) throws JsonProcessingException\n+  {\n+    return JSON_MAPPER.readValue(\n+        String.format(Locale.ENGLISH, \"{\\\"type\\\": \\\"%s\\\"}\", indexType),\n+        AppendableIndexSpec.class\n+    );\n+  }\n+\n+  /**\n+   * Create an index given the input args.\n+   *\n+   * @param args The arguments for the index-generator\n+   * @return An incremental-index instance\n+   */\n+  public final IncrementalIndex<?> createIndex(Object... args)\n+  {\n+    return createIndex(indexCreator, args);\n+  }\n+\n+  /**\n+   * Create an index given the input args with a specialized index-creator.\n+   *\n+   * @param args The arguments for the index-generator\n+   * @return An incremental-index instance\n+   */\n+  public final IncrementalIndex<?> createIndex(IndexCreator indexCreator, Object... args)\n+  {\n+    return closer.register(indexCreator.createIndex(appendableIndexSpec.builder(), args));\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    closer.close();\n+\n+    if (appendableIndexSpec instanceof Closeable) {\n+      ((Closeable) appendableIndexSpec).close();\n+    }\n+  }\n+\n+  /**\n+   * Used to parameterize the tests with all the permutations of the parameters\n+   * together with all the incremental index implementations.\n+   *\n+   * @param c a list of collections of parameters\n+   * @return the cartesian product of all parameters\n+   */\n+  public static List<Object[]> indexTypeCartesianProduct(Collection<?>... c)", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxMTY4Mw==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541911683", "bodyText": "Added", "author": "liran-funaro", "createdAt": "2020-12-13T12:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MDM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MzE0OA==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539663148", "bodyText": "In addition to saying parameterized incremental-index tests, could you please add more info in the javadoc specifying what are the configurable parameters?", "author": "a2l007", "createdAt": "2020-12-09T21:31:47Z", "path": "processing/src/test/java/org/apache/druid/segment/incremental/IncrementalIndexCreator.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.incremental;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An incremental-index creator for parameterized incremental-index tests.\n+ * It lists all the available incremental-index implementations, and responsible to create and close incremental-index\n+ * instances during the tests.\n+ */\n+public class IncrementalIndexCreator implements Closeable", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk3MzQ4NQ==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541973485", "bodyText": "I added more detailed documentation for this class.", "author": "liran-funaro", "createdAt": "2020-12-13T18:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MzE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDg2NA==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539664864", "bodyText": "Does this method need public visibility?", "author": "a2l007", "createdAt": "2020-12-09T21:34:34Z", "path": "processing/src/test/java/org/apache/druid/segment/incremental/IncrementalIndexCreator.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.incremental;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import org.apache.druid.jackson.DefaultObjectMapper;\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An incremental-index creator for parameterized incremental-index tests.\n+ * It lists all the available incremental-index implementations, and responsible to create and close incremental-index\n+ * instances during the tests.\n+ */\n+public class IncrementalIndexCreator implements Closeable\n+{\n+  public static final ObjectMapper JSON_MAPPER = new DefaultObjectMapper();\n+\n+  /**\n+   * Allows adding support for testing unregistered indexes.\n+   * It is used by Druid's extensions for the incremental-index.\n+   *\n+   * @param c    an index spec class\n+   * @param name an index spec name\n+   */\n+  public static void addIndexSpec(Class<?> c, String name)\n+  {\n+    JSON_MAPPER.registerSubtypes(new NamedType(c, name));\n+  }\n+\n+  static {\n+    // The off-heap incremental-index is not registered for production, but we want to include it in the tests.\n+    IncrementalIndexCreator.addIndexSpec(OffheapIncrementalIndexTestSpec.class, OffheapIncrementalIndexTestSpec.TYPE);\n+  }\n+\n+  /**\n+   * Fetch all the available incremental-index implementations.\n+   * It can be used to parametrize the test. If more parameters are needed, use indexTypeCartesianProduct().\n+   * @see #indexTypeCartesianProduct(Collection[]).\n+   *\n+   * @return a list of all the incremental-index implementations types (String)\n+   */\n+  public static List<String> getAppendableIndexTypes()\n+  {\n+    SubtypeResolver resolver = JSON_MAPPER.getSubtypeResolver();\n+    MapperConfig<?> config = JSON_MAPPER.getDeserializationConfig();\n+    AnnotatedClass cls = AnnotatedClassResolver.resolveWithoutSuperTypes(config, AppendableIndexSpec.class);\n+    Collection<NamedType> types = resolver.collectAndResolveSubtypesByClass(config, cls);\n+    return types.stream().map(NamedType::getName).filter(Objects::nonNull).distinct().collect(Collectors.toList());\n+  }\n+\n+  public interface IndexCreator\n+  {\n+    /**\n+     * Build an index given a builder and args.\n+     *\n+     * @param builder an incremental index builder supplied by the framework\n+     * @param args a list of arguments that are used to configure the builder\n+     * @return a new instance of an incremental-index\n+     */\n+    IncrementalIndex<?> createIndex(AppendableIndexBuilder builder, Object... args);\n+  }\n+\n+  private final Closer closer = Closer.create();\n+\n+  private final AppendableIndexSpec appendableIndexSpec;\n+\n+  private final IndexCreator indexCreator;\n+\n+  /**\n+   * Initialize the creator.\n+   *\n+   * @param spec a spec that can generate a incremental-index builder\n+   * @param indexCreator a function that generate an index given a builder and arguments\n+   */\n+  public IncrementalIndexCreator(AppendableIndexSpec spec, IndexCreator indexCreator)\n+  {\n+    this.appendableIndexSpec = spec;\n+    this.indexCreator = indexCreator;\n+  }\n+\n+  /**\n+   * Initialize the creator.\n+   *\n+   * @param indexType an index type (name)\n+   * @param indexCreator a function that generate an index given a builder and arguments\n+   */\n+  public IncrementalIndexCreator(String indexType, IndexCreator indexCreator) throws JsonProcessingException\n+  {\n+    this(parseIndexType(indexType), indexCreator);\n+  }\n+\n+  /**\n+   * Generate an AppendableIndexSpec from index type.\n+   *\n+   * @param indexType an index type\n+   * @return AppendableIndexSpec instance of this type\n+   * @throws JsonProcessingException if failed to to parse the index\n+   */\n+  public static AppendableIndexSpec parseIndexType(String indexType) throws JsonProcessingException\n+  {\n+    return JSON_MAPPER.readValue(\n+        String.format(Locale.ENGLISH, \"{\\\"type\\\": \\\"%s\\\"}\", indexType),\n+        AppendableIndexSpec.class\n+    );\n+  }\n+\n+  /**\n+   * Create an index given the input args.\n+   *\n+   * @param args The arguments for the index-generator\n+   * @return An incremental-index instance\n+   */\n+  public final IncrementalIndex<?> createIndex(Object... args)\n+  {\n+    return createIndex(indexCreator, args);\n+  }\n+\n+  /**\n+   * Create an index given the input args with a specialized index-creator.\n+   *\n+   * @param args The arguments for the index-generator\n+   * @return An incremental-index instance\n+   */\n+  public final IncrementalIndex<?> createIndex(IndexCreator indexCreator, Object... args)\n+  {\n+    return closer.register(indexCreator.createIndex(appendableIndexSpec.builder(), args));\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    closer.close();\n+\n+    if (appendableIndexSpec instanceof Closeable) {\n+      ((Closeable) appendableIndexSpec).close();\n+    }\n+  }\n+\n+  /**\n+   * Used to parameterize the tests with all the permutations of the parameters\n+   * together with all the incremental index implementations.\n+   *\n+   * @param c a list of collections of parameters\n+   * @return the cartesian product of all parameters\n+   */\n+  public static List<Object[]> indexTypeCartesianProduct(Collection<?>... c)\n+  {\n+    Collection<?>[] args = new Collection<?>[c.length + 1];\n+    args[0] = getAppendableIndexTypes();\n+    System.arraycopy(c, 0, args, 1, c.length);\n+    return cartesianProduct(args);\n+  }\n+\n+  /**\n+   * Generates all the permutations of the parameters.\n+   *\n+   * @param c a list of collections of parameters\n+   * @return the cartesian product of all parameters\n+   */\n+  public static List<Object[]> cartesianProduct(Collection<?>... c)", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxMTgyOA==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541911828", "bodyText": "No. Changed to private.", "author": "liran-funaro", "createdAt": "2020-12-13T12:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDMzNw==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539720337", "bodyText": "I see there are other usages of gen.nextRow() that haven't been replaced. Is the plan to replace them in an follow up PR?", "author": "a2l007", "createdAt": "2020-12-09T23:17:24Z", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IncrementalIndexReadBenchmark.java", "diffHunk": "@@ -110,28 +119,28 @@ public void setup() throws IOException\n     );\n \n     incIndex = makeIncIndex();\n+    gen.addToIndex(incIndex, rowsPerSegment);", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMzM2MQ==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541903361", "bodyText": "It wasn't planned, but I don't mind creating a follow-up PR for that or replacing everything in this PR.\nWhat do you think is better?", "author": "liran-funaro", "createdAt": "2020-12-13T11:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MjUyNA==", "url": "https://github.com/apache/druid/pull/10593#discussion_r543642524", "bodyText": "Changing it in a follow-up PR sounds good to me.", "author": "a2l007", "createdAt": "2020-12-15T19:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDExODk4Mw==", "url": "https://github.com/apache/druid/pull/10593#discussion_r544118983", "bodyText": "OK. I'll publish a new PR for this once this PR is merged.", "author": "liran-funaro", "createdAt": "2020-12-16T08:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMTczNQ==", "url": "https://github.com/apache/druid/pull/10593#discussion_r539721735", "bodyText": "This logging is generally useful as it helps track the status of the benchmark run. Could this be incorporated as part of addToIndex?\nThis comment applies to the same change for the remaining places as well.", "author": "a2l007", "createdAt": "2020-12-09T23:20:33Z", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/indexing/IncrementalIndexReadBenchmark.java", "diffHunk": "@@ -110,28 +119,28 @@ public void setup() throws IOException\n     );\n \n     incIndex = makeIncIndex();\n+    gen.addToIndex(incIndex, rowsPerSegment);\n+  }\n \n-    for (int j = 0; j < rowsPerSegment; j++) {\n-      InputRow row = gen.nextRow();\n-      if (j % 10000 == 0) {\n-        log.info(j + \" rows generated.\");", "originalCommit": "1f06fb2b4a8e719eff60a0a45257ff571fe1b32a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk2NzM5Mg==", "url": "https://github.com/apache/druid/pull/10593#discussion_r541967392", "bodyText": "I modified the DataGenerator to produce log events every 10,000 rows.", "author": "liran-funaro", "createdAt": "2020-12-13T17:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMTczNQ=="}], "type": "inlineReview"}, {"oid": "1df4fecc62eb104bd19f1e21fbc970a6604ec63c", "url": "https://github.com/apache/druid/commit/1df4fecc62eb104bd19f1e21fbc970a6604ec63c", "message": "Remove redundant IncrementalIndex.Builder", "committedDate": "2020-12-22T10:37:20Z", "type": "commit"}, {"oid": "f4e0be979d48c14c51a952f3237e5daab8d98212", "url": "https://github.com/apache/druid/commit/f4e0be979d48c14c51a952f3237e5daab8d98212", "message": "Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex", "committedDate": "2020-12-22T10:37:21Z", "type": "commit"}, {"oid": "33a613f71befc23770d212b47a532c472c5055a2", "url": "https://github.com/apache/druid/commit/33a613f71befc23770d212b47a532c472c5055a2", "message": "Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale]", "committedDate": "2020-12-22T10:37:21Z", "type": "commit"}, {"oid": "0d9369442d2310b4640ff5ff226e5608b1bc62d2", "url": "https://github.com/apache/druid/commit/0d9369442d2310b4640ff5ff226e5608b1bc62d2", "message": "Fix Intellij errors: declared exception is never thrown", "committedDate": "2020-12-22T10:37:22Z", "type": "commit"}, {"oid": "07a64123dc722e4e5b3050a02d2776266ec75c5f", "url": "https://github.com/apache/druid/commit/07a64123dc722e4e5b3050a02d2776266ec75c5f", "message": "Add documentation and validate before closing objects on tearDown.", "committedDate": "2020-12-22T10:37:22Z", "type": "commit"}, {"oid": "1ead19a14af7835b0a9a3153134afe27a75cd7fa", "url": "https://github.com/apache/druid/commit/1ead19a14af7835b0a9a3153134afe27a75cd7fa", "message": "Add documentation to OffheapIncrementalIndexTestSpec", "committedDate": "2020-12-22T10:37:22Z", "type": "commit"}, {"oid": "1ffdf56a680f8a6a805b440fd75b9cb97d05b9d6", "url": "https://github.com/apache/druid/commit/1ffdf56a680f8a6a805b440fd75b9cb97d05b9d6", "message": "Doc corrections and minor changes.", "committedDate": "2020-12-22T10:37:23Z", "type": "commit"}, {"oid": "a4ebea5236b9ca700eae84086b776af32bbeeafa", "url": "https://github.com/apache/druid/commit/a4ebea5236b9ca700eae84086b776af32bbeeafa", "message": "Add logging for generated rows.", "committedDate": "2020-12-22T10:37:23Z", "type": "commit"}, {"oid": "43461f9a876880325220d1f39ebfedbc6bef9960", "url": "https://github.com/apache/druid/commit/43461f9a876880325220d1f39ebfedbc6bef9960", "message": "Refactor new tests/benchmarks.", "committedDate": "2020-12-22T10:37:23Z", "type": "commit"}, {"oid": "fc9037972b37621b3788e174b12fd55fe47b492c", "url": "https://github.com/apache/druid/commit/fc9037972b37621b3788e174b12fd55fe47b492c", "message": "Improve IncrementalIndexCreator documentation", "committedDate": "2020-12-22T10:37:24Z", "type": "commit"}, {"oid": "781871798bed88416d20d8897d635c48deb6136b", "url": "https://github.com/apache/druid/commit/781871798bed88416d20d8897d635c48deb6136b", "message": "Add required tests for DataGenerator", "committedDate": "2020-12-22T10:37:24Z", "type": "commit"}, {"oid": "7527dde6471aab28b1a5ffd187b747db898b1d18", "url": "https://github.com/apache/druid/commit/7527dde6471aab28b1a5ffd187b747db898b1d18", "message": "Revert \"rollupOpportunity\" to be a string", "committedDate": "2020-12-22T10:37:24Z", "type": "commit"}, {"oid": "7527dde6471aab28b1a5ffd187b747db898b1d18", "url": "https://github.com/apache/druid/commit/7527dde6471aab28b1a5ffd187b747db898b1d18", "message": "Revert \"rollupOpportunity\" to be a string", "committedDate": "2020-12-22T10:37:24Z", "type": "forcePushed"}]}