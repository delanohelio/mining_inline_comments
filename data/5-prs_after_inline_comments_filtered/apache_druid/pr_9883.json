{"pr_number": 9883, "pr_title": "Remove payload field from table sys.segment", "pr_createdAt": "2020-05-17T02:08:36Z", "pr_url": "https://github.com/apache/druid/pull/9883", "timeline": [{"oid": "78246ef8a3ef8565c788a017b182f7c7622115a7", "url": "https://github.com/apache/druid/commit/78246ef8a3ef8565c788a017b182f7c7622115a7", "message": "remove payload field from table sys.segments", "committedDate": "2020-05-16T14:01:57Z", "type": "commit"}, {"oid": "1e72393028598726eeae07813cefae7a1f4e131c", "url": "https://github.com/apache/druid/commit/1e72393028598726eeae07813cefae7a1f4e131c", "message": "update doc", "committedDate": "2020-05-17T01:01:50Z", "type": "commit"}, {"oid": "2d10d48f6fca65482a660fb100b913d2d2e932d4", "url": "https://github.com/apache/druid/commit/2d10d48f6fca65482a660fb100b913d2d2e932d4", "message": "fix test", "committedDate": "2020-05-17T02:05:21Z", "type": "commit"}, {"oid": "4bc81881364b88ed764bb14e9847b6801ae94181", "url": "https://github.com/apache/druid/commit/4bc81881364b88ed764bb14e9847b6801ae94181", "message": "fix CI failure", "committedDate": "2020-06-08T00:40:49Z", "type": "commit"}, {"oid": "a36fe1cc0b5a87184992d22a83597a6461ad37fd", "url": "https://github.com/apache/druid/commit/a36fe1cc0b5a87184992d22a83597a6461ad37fd", "message": "add necessary fields", "committedDate": "2020-06-22T10:45:45Z", "type": "commit"}, {"oid": "b713308d75d926275475f9db28ce00485cf9058d", "url": "https://github.com/apache/druid/commit/b713308d75d926275475f9db28ce00485cf9058d", "message": "fix doc", "committedDate": "2020-06-22T11:08:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MzM2MQ==", "url": "https://github.com/apache/druid/pull/9883#discussion_r446493361", "bodyText": "Why these fields are null, i think available segments would have shardSpec, dimensions and metrics as well", "author": "surekhasaharan", "createdAt": "2020-06-27T06:44:58Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/SystemSchema.java", "diffHunk": "@@ -333,33 +330,30 @@ public TableType getJdbcTableType()\n               root\n           ))\n           .transform(val -> {\n-            try {\n-              if (segmentsAlreadySeen.contains(val.getKey())) {\n-                return null;\n-              }\n-              final PartialSegmentData partialSegmentData = partialSegmentDataMap.get(val.getKey());\n-              final long numReplicas = partialSegmentData == null ? 0L : partialSegmentData.getNumReplicas();\n-              return new Object[]{\n-                  val.getKey(),\n-                  val.getKey().getDataSource(),\n-                  val.getKey().getInterval().getStart().toString(),\n-                  val.getKey().getInterval().getEnd().toString(),\n-                  val.getValue().getSegment().getSize(),\n-                  val.getKey().getVersion(),\n-                  (long) val.getValue().getSegment().getShardSpec().getPartitionNum(),\n-                  numReplicas,\n-                  val.getValue().getNumRows(),\n-                  IS_PUBLISHED_FALSE, // is_published is false for unpublished segments\n-                  // is_available is assumed to be always true for segments announced by historicals or realtime tasks\n-                  IS_AVAILABLE_TRUE,\n-                  val.getValue().isRealtime(),\n-                  IS_OVERSHADOWED_FALSE, // there is an assumption here that unpublished segments are never overshadowed\n-                  jsonMapper.writeValueAsString(val.getKey())\n-              };\n-            }\n-            catch (JsonProcessingException e) {\n-              throw new RE(e, \"Error getting segment payload for segment %s\", val.getKey());\n+            if (segmentsAlreadySeen.contains(val.getKey())) {\n+              return null;\n             }\n+            final PartialSegmentData partialSegmentData = partialSegmentDataMap.get(val.getKey());\n+            final long numReplicas = partialSegmentData == null ? 0L : partialSegmentData.getNumReplicas();\n+            return new Object[]{\n+                val.getKey(),\n+                val.getKey().getDataSource(),\n+                val.getKey().getInterval().getStart().toString(),\n+                val.getKey().getInterval().getEnd().toString(),\n+                val.getValue().getSegment().getSize(),\n+                val.getKey().getVersion(),\n+                (long) val.getValue().getSegment().getShardSpec().getPartitionNum(),\n+                numReplicas,\n+                val.getValue().getNumRows(),\n+                IS_PUBLISHED_FALSE, // is_published is false for unpublished segments\n+                // is_available is assumed to be always true for segments announced by historicals or realtime tasks\n+                IS_AVAILABLE_TRUE,\n+                val.getValue().isRealtime(),\n+                IS_OVERSHADOWED_FALSE, // there is an assumption here that unpublished segments are never overshadowed\n+                null,\n+                null,\n+                null", "originalCommit": "b713308d75d926275475f9db28ce00485cf9058d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDEwNw==", "url": "https://github.com/apache/druid/pull/9883#discussion_r446494107", "bodyText": "I think you can get the values for those fields by adding them to AvailableSegmentMetadata from DruidSchema and populating in PartialSegmentData in SystemSchema", "author": "surekhasaharan", "createdAt": "2020-06-27T06:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MzM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc1NTU4MQ==", "url": "https://github.com/apache/druid/pull/9883#discussion_r446755581", "bodyText": "Hi @surekhasaharan, I have filled these null fields.", "author": "yuanlihan", "createdAt": "2020-06-29T03:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MzM2MQ=="}], "type": "inlineReview"}, {"oid": "89a0d6b59d907bf520c6db81525bc0dba8b464a2", "url": "https://github.com/apache/druid/commit/89a0d6b59d907bf520c6db81525bc0dba8b464a2", "message": "fix comment", "committedDate": "2020-06-29T03:32:34Z", "type": "commit"}]}