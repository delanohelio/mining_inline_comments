{"pr_number": 10332, "pr_title": "Fix stringFirst/stringLast rollup during ingestion", "pr_createdAt": "2020-08-28T22:08:11Z", "pr_url": "https://github.com/apache/druid/pull/10332", "timeline": [{"oid": "5a29404c7c38047825daa28d3d6c0d3cdf18e634", "url": "https://github.com/apache/druid/commit/5a29404c7c38047825daa28d3d6c0d3cdf18e634", "message": "Add IndexMergerRollupTest\n\nThis changelist adds a test to merge indexes with StringFirst/StringLast aggregator.", "committedDate": "2020-08-29T00:07:46Z", "type": "commit"}, {"oid": "a883363489346a5f6ea12a0185f10b1e83c5a2d7", "url": "https://github.com/apache/druid/commit/a883363489346a5f6ea12a0185f10b1e83c5a2d7", "message": "Fix StringFirstAggregateCombiner/StringLastAggregateCombiner\n\nThe segment-level type for stringFirst/stringLast is SerializablePairLongString,\nnot String. This changelist fixes it.", "committedDate": "2020-08-29T00:07:53Z", "type": "commit"}, {"oid": "1cd4a205aabbd0eceb574fbd414ef348909166a0", "url": "https://github.com/apache/druid/commit/1cd4a205aabbd0eceb574fbd414ef348909166a0", "message": "Fix EarliestLatestAnySqlAggregator to handle COMPLEX type\n\nThis changelist allows EarliestLatestAnySqlAggregator to accept COMPLEX\ntype as an operand. For its return type, we set it to VARCHAR, since\nCOMPLEX column is only generated by stringFirst/stringLast during ingestion\nrollup.", "committedDate": "2020-08-29T00:07:53Z", "type": "commit"}, {"oid": "1cd4a205aabbd0eceb574fbd414ef348909166a0", "url": "https://github.com/apache/druid/commit/1cd4a205aabbd0eceb574fbd414ef348909166a0", "message": "Fix EarliestLatestAnySqlAggregator to handle COMPLEX type\n\nThis changelist allows EarliestLatestAnySqlAggregator to accept COMPLEX\ntype as an operand. For its return type, we set it to VARCHAR, since\nCOMPLEX column is only generated by stringFirst/stringLast during ingestion\nrollup.", "committedDate": "2020-08-29T00:07:53Z", "type": "forcePushed"}, {"oid": "6c00cea00c294f09b79f57af7ae1fc67f9993b95", "url": "https://github.com/apache/druid/commit/6c00cea00c294f09b79f57af7ae1fc67f9993b95", "message": "Return value with smaller timestamp in StringFirstAggregatorFactory.combine function", "committedDate": "2020-09-02T03:26:56Z", "type": "commit"}, {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "url": "https://github.com/apache/druid/commit/f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "message": "Add integration tests for stringFirst/stringLast during ingestion", "committedDate": "2020-09-02T05:15:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2NjcwMg==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482566702", "bodyText": "wow! Is there a test for this somewhere?", "author": "suneet-s", "createdAt": "2020-09-02T22:49:33Z", "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstAggregatorFactory.java", "diffHunk": "@@ -188,7 +188,7 @@ public Comparator getComparator()\n   @Override\n   public Object combine(Object lhs, Object rhs)\n   {\n-    return TIME_COMPARATOR.compare(lhs, rhs) > 0 ? lhs : rhs;\n+    return TIME_COMPARATOR.compare(lhs, rhs) < 0 ? lhs : rhs;", "originalCommit": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MDA0Ng==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482590046", "bodyText": "Yes. The existing test case was testing the wrong behavior. The fix to the test is also in this PR.", "author": "joykent99", "createdAt": "2020-09-02T23:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2NjcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2OTMxNA==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482569314", "bodyText": "We should reuse this instance across all calls to toDruidAggregation", "author": "suneet-s", "createdAt": "2020-09-02T22:51:43Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/EarliestLatestAnySqlAggregator.java", "diffHunk": "@@ -227,14 +257,14 @@ public Aggregation toDruidAggregation(\n           aggregatorType.name(),\n           null,\n           SqlKind.OTHER_FUNCTION,\n-          ReturnTypes.ARG0,\n+          new EarliestLatestReturnTypeInference(0),", "originalCommit": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MDY2MA==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482590660", "bodyText": "Sounds good.", "author": "joykent99", "createdAt": "2020-09-02T23:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2OTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDA5OA==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482570098", "bodyText": "shouldn't this remain STRING ?", "author": "suneet-s", "createdAt": "2020-09-02T22:52:22Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/EarliestLatestAnySqlAggregator.java", "diffHunk": "@@ -227,14 +257,14 @@ public Aggregation toDruidAggregation(\n           aggregatorType.name(),\n           null,\n           SqlKind.OTHER_FUNCTION,\n-          ReturnTypes.ARG0,\n+          new EarliestLatestReturnTypeInference(0),\n           InferTypes.RETURN_TYPE,\n           OperandTypes.or(\n               OperandTypes.NUMERIC,\n               OperandTypes.BOOLEAN,\n               OperandTypes.sequence(\n                   \"'\" + aggregatorType.name() + \"(expr, maxBytesPerString)'\\n\",\n-                  OperandTypes.STRING,\n+                  OperandTypes.ANY,", "originalCommit": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MTkxNA==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482591914", "bodyText": "When we specify \"stringFirst/stringLast\" in ingestion MetricsSpec, the type for the columns stored in segments is OTHER. With STRING type here, the SQL will report an error when trying to call earliest/latest on those columns.", "author": "joykent99", "createdAt": "2020-09-02T23:18:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MzI5NQ==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482593295", "bodyText": "If you have any suggestions on where is a good place to add a test for this, that would be great!", "author": "joykent99", "createdAt": "2020-09-02T23:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNzc5Mg==", "url": "https://github.com/apache/druid/pull/10332#discussion_r485137792", "bodyText": "Usually I sql add tests to CalciteQueryTest You can see testEarliestAggregators as an example. You could write a test in here to validate the SQL translation works, but I think you need to update CalciteTests#INDEX_SCHEMA_DIFFERENT_DIM3_M1_TYPES to add an earliest / latest aggregator. Then you should be able to test a SQL test in CalciteQueryTest - hope this helps", "author": "suneet-s", "createdAt": "2020-09-08T19:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NzQ1NA==", "url": "https://github.com/apache/druid/pull/10332#discussion_r482597454", "bodyText": "This is the fix to the existing test for StringFirstAggregatorFactory.combine() fixes.", "author": "joykent99", "createdAt": "2020-09-02T23:26:44Z", "path": "processing/src/test/java/org/apache/druid/query/aggregation/first/StringFirstAggregationTest.java", "diffHunk": "@@ -115,7 +117,7 @@ public void testCombine()\n   {\n     SerializablePairLongString pair1 = new SerializablePairLongString(1467225000L, \"AAAA\");\n     SerializablePairLongString pair2 = new SerializablePairLongString(1467240000L, \"BBBB\");\n-    Assert.assertEquals(pair2, stringFirstAggFactory.combine(pair1, pair2));\n+    Assert.assertEquals(pair1, stringFirstAggFactory.combine(pair1, pair2));", "originalCommit": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9699955e3f731443558379ef15843133794e11b", "url": "https://github.com/apache/druid/commit/f9699955e3f731443558379ef15843133794e11b", "message": "Use one EarliestLatestReturnTypeInference instance", "committedDate": "2020-09-03T00:27:00Z", "type": "commit"}, {"oid": "1c8c7e98f94f5cbf60f28f5d4536607d367042c1", "url": "https://github.com/apache/druid/commit/1c8c7e98f94f5cbf60f28f5d4536607d367042c1", "message": "Merge remote-tracking branch 'upstream/master' into feature-fix-stringfirstlast-ingestion", "committedDate": "2020-09-08T20:34:47Z", "type": "commit"}]}