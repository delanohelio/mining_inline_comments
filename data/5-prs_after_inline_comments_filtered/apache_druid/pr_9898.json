{"pr_number": 9898, "pr_title": "support Aliyun OSS service as deep storage", "pr_createdAt": "2020-05-20T06:09:03Z", "pr_url": "https://github.com/apache/druid/pull/9898", "timeline": [{"oid": "1cda01f78d424d3e02768635add18b64c69897e2", "url": "https://github.com/apache/druid/commit/1cda01f78d424d3e02768635add18b64c69897e2", "message": "init commit, all tests passed", "committedDate": "2020-05-20T03:44:37Z", "type": "commit"}, {"oid": "baa94bc2329d66ec3d3e217a51f5c12e52298fc2", "url": "https://github.com/apache/druid/commit/baa94bc2329d66ec3d3e217a51f5c12e52298fc2", "message": "fix format\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-20T03:44:37Z", "type": "commit"}, {"oid": "8d3de81ff4d0578623a84bf8f959cc9034344f0c", "url": "https://github.com/apache/druid/commit/8d3de81ff4d0578623a84bf8f959cc9034344f0c", "message": "data stored successfully", "committedDate": "2020-05-20T03:44:38Z", "type": "commit"}, {"oid": "23cd7a1275e07924189ce4858e6e425898fae699", "url": "https://github.com/apache/druid/commit/23cd7a1275e07924189ce4858e6e425898fae699", "message": "modify config path", "committedDate": "2020-05-20T03:44:38Z", "type": "commit"}, {"oid": "399d53623b413910cc1377371a58008f96dc9eee", "url": "https://github.com/apache/druid/commit/399d53623b413910cc1377371a58008f96dc9eee", "message": "add doc", "committedDate": "2020-05-20T03:44:38Z", "type": "commit"}, {"oid": "38a893ab53494cc3582ed2413aa99a0fb1314eaa", "url": "https://github.com/apache/druid/commit/38a893ab53494cc3582ed2413aa99a0fb1314eaa", "message": "add aliyun-oss extension to project", "committedDate": "2020-05-20T03:45:10Z", "type": "commit"}, {"oid": "2860f94b6304fb349b94b2da24cea6f57466bb60", "url": "https://github.com/apache/druid/commit/2860f94b6304fb349b94b2da24cea6f57466bb60", "message": "remove descriptor deletion code to avoid warning message output by aliyun client", "committedDate": "2020-05-20T03:45:10Z", "type": "commit"}, {"oid": "a97f6cacdb36d5eb3a0bc92a00a54584862fa955", "url": "https://github.com/apache/druid/commit/a97f6cacdb36d5eb3a0bc92a00a54584862fa955", "message": "fix warnings reported by lgtm-com", "committedDate": "2020-05-20T12:50:45Z", "type": "commit"}, {"oid": "57597f6c8b4cac7803fb27f56d679af8b9b623a5", "url": "https://github.com/apache/druid/commit/57597f6c8b4cac7803fb27f56d679af8b9b623a5", "message": "fix ci warnings\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-20T15:04:34Z", "type": "commit"}, {"oid": "be7f522c7ada8d6a297885c598a3a3083d956660", "url": "https://github.com/apache/druid/commit/be7f522c7ada8d6a297885c598a3a3083d956660", "message": "fix errors reported by intellj inspection check\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-20T15:47:56Z", "type": "commit"}, {"oid": "3ff0dcb132c661c998447017cc9c2d4badd9fa33", "url": "https://github.com/apache/druid/commit/3ff0dcb132c661c998447017cc9c2d4badd9fa33", "message": "fix doc spelling check\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-20T15:51:35Z", "type": "commit"}, {"oid": "60c8b9c5456df9dca417df544914090fda098185", "url": "https://github.com/apache/druid/commit/60c8b9c5456df9dca417df544914090fda098185", "message": "fix dependency warnings reported by ci\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-20T16:00:28Z", "type": "commit"}, {"oid": "f931414a21dfcce601e2b6fb6d761f1be06bdfe3", "url": "https://github.com/apache/druid/commit/f931414a21dfcce601e2b6fb6d761f1be06bdfe3", "message": "fix warnings reported by CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-23T12:47:26Z", "type": "commit"}, {"oid": "f931414a21dfcce601e2b6fb6d761f1be06bdfe3", "url": "https://github.com/apache/druid/commit/f931414a21dfcce601e2b6fb6d761f1be06bdfe3", "message": "fix warnings reported by CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-23T12:47:26Z", "type": "forcePushed"}, {"oid": "757e84e75035dc6cad76ebaf32cd2b45045e0f97", "url": "https://github.com/apache/druid/commit/757e84e75035dc6cad76ebaf32cd2b45045e0f97", "message": "add package configuration to support showing extension info\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-05-26T02:32:21Z", "type": "commit"}, {"oid": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "url": "https://github.com/apache/druid/commit/b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "message": "add IT test cases and fix bugs\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-06-16T06:26:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODEyOQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441968129", "bodyText": "s3 -> Aliyun OSS", "author": "jon-wei", "createdAt": "2020-06-18T04:56:37Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/data/input/aliyun/OssEntity.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.google.common.base.Predicate;\n+import org.apache.druid.data.input.RetryingInputEntity;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.storage.aliyun.OssStorageDruidModule;\n+import org.apache.druid.storage.aliyun.OssUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class OssEntity extends RetryingInputEntity\n+{\n+  private final OSS ossClient;\n+  private final CloudObjectLocation object;\n+\n+  OssEntity(OSS ossClient, CloudObjectLocation coords)\n+  {\n+    this.ossClient = ossClient;\n+    this.object = coords;\n+  }\n+\n+  @Override\n+  public URI getUri()\n+  {\n+    return object.toUri(OssStorageDruidModule.SCHEME);\n+  }\n+\n+  @Override\n+  protected InputStream readFrom(long offset) throws IOException\n+  {\n+    final GetObjectRequest request = new GetObjectRequest(object.getBucket(), object.getPath());\n+    request.setRange(offset, -1 /*from offset to end*/);\n+\n+    try {\n+      final OSSObject ossObject = ossClient.getObject(request);\n+      if (ossObject == null) {\n+        throw new ISE(\n+            \"Failed to get an s3 object for bucket[%s], key[%s], and start[%d]\",", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODcxNQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441968715", "bodyText": "Suggest making \"aliyun-oss\" a constant", "author": "jon-wei", "createdAt": "2020-06-18T04:58:55Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/firehose/aliyun/StaticOssFirehoseFactory.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.firehose.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import org.apache.druid.data.input.FiniteFirehoseFactory;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.StringInputRowParser;\n+import org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.aliyun.OssUtils;\n+import org.apache.druid.utils.CompressionUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Builds firehoses that read from a predefined list of aliyun-oss objects and then dry up.\n+ */\n+public class StaticOssFirehoseFactory extends PrefetchableTextFilesFirehoseFactory<URI>\n+{\n+  private static final Logger log = new Logger(StaticOssFirehoseFactory.class);\n+  private static final int MAX_LISTING_LENGTH = 1024;\n+\n+  private final OSS client;\n+  private final List<URI> uris;\n+  private final List<URI> prefixes;\n+\n+  @JsonCreator\n+  public StaticOssFirehoseFactory(\n+      @JacksonInject OSS client,\n+      @JsonProperty(\"uris\") List<URI> uris,\n+      @JsonProperty(\"prefixes\") List<URI> prefixes,\n+      @JsonProperty(\"maxCacheCapacityBytes\") Long maxCacheCapacityBytes,\n+      @JsonProperty(\"maxFetchCapacityBytes\") Long maxFetchCapacityBytes,\n+      @JsonProperty(\"prefetchTriggerBytes\") Long prefetchTriggerBytes,\n+      @JsonProperty(\"fetchTimeout\") Long fetchTimeout,\n+      @JsonProperty(\"maxFetchRetry\") Integer maxFetchRetry\n+  )\n+  {\n+    super(maxCacheCapacityBytes, maxFetchCapacityBytes, prefetchTriggerBytes, fetchTimeout, maxFetchRetry);\n+    this.client = Preconditions.checkNotNull(client, \"client\");\n+    this.uris = uris == null ? new ArrayList<>() : uris;\n+    this.prefixes = prefixes == null ? new ArrayList<>() : prefixes;\n+\n+    if (!this.uris.isEmpty() && !this.prefixes.isEmpty()) {\n+      throw new IAE(\"uris and prefixes cannot be used together\");\n+    }\n+\n+    if (this.uris.isEmpty() && this.prefixes.isEmpty()) {\n+      throw new IAE(\"uris or prefixes must be specified\");\n+    }\n+\n+    for (final URI inputURI : this.uris) {\n+      Preconditions.checkArgument(\"aliyun-oss\".equals(inputURI.getScheme()), \"input uri scheme == aliyun-oss (%s)\", inputURI);", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTU0Mg==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441971542", "bodyText": "I think equals/hashcode should have uris, prefixes, etc.", "author": "jon-wei", "createdAt": "2020-06-18T05:10:30Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/data/input/aliyun/OssInputSource.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import org.apache.druid.data.input.InputEntity;\n+import org.apache.druid.data.input.InputFileAttribute;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.SplitHintSpec;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.aliyun.OssInputDataConfig;\n+import org.apache.druid.storage.aliyun.OssStorageDruidModule;\n+import org.apache.druid.storage.aliyun.OssUtils;\n+import org.apache.druid.utils.Streams;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class OssInputSource extends CloudObjectInputSource\n+{\n+  private final Supplier<OSS> clientSupplier;\n+  @JsonProperty(\"properties\")\n+  private final OssClientConfig inputSourceConfig;\n+  private final OssInputDataConfig inputDataConfig;\n+\n+  /**\n+   * Constructor for OssInputSource\n+   *\n+   * @param client            The default client built with all default configs\n+   *                          from Guice. This injected singleton client is used when {@param inputSourceConfig}\n+   *                          is not provided and hence\n+   * @param inputDataConfig   Stores the configuration for options related to reading input data\n+   * @param uris              User provided uris to read input data\n+   * @param prefixes          User provided prefixes to read input data\n+   * @param objects           User provided cloud objects values to read input data\n+   * @param inputSourceConfig User provided properties for overriding the default aliyun-oss configuration\n+   */\n+  @JsonCreator\n+  public OssInputSource(\n+      @JacksonInject OSS client,\n+      @JacksonInject OssInputDataConfig inputDataConfig,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable OssClientConfig inputSourceConfig\n+  )\n+  {\n+    super(OssStorageDruidModule.SCHEME, uris, prefixes, objects);\n+    this.inputDataConfig = Preconditions.checkNotNull(inputDataConfig, \"inputDataConfig\");\n+    Preconditions.checkNotNull(client, \"client\");\n+    this.inputSourceConfig = inputSourceConfig;\n+    this.clientSupplier = Suppliers.memoize(\n+        () -> {\n+          if (inputSourceConfig != null) {\n+            return inputSourceConfig.buildClient();\n+          } else {\n+            return client;\n+          }\n+        }\n+    );\n+  }\n+\n+\n+  @Nullable\n+  @JsonProperty(\"properties\")\n+  public OssClientConfig getOssInputSourceConfig()\n+  {\n+    return inputSourceConfig;\n+  }\n+\n+  @Override\n+  protected InputEntity createEntity(CloudObjectLocation location)\n+  {\n+    return new OssEntity(clientSupplier.get(), location);\n+  }\n+\n+  @Override\n+  protected Stream<InputSplit<List<CloudObjectLocation>>> getPrefixesSplitStream(@Nonnull SplitHintSpec splitHintSpec)\n+  {\n+    final Iterator<List<OSSObjectSummary>> splitIterator = splitHintSpec.split(\n+        getIterableObjectsFromPrefixes().iterator(),\n+        object -> new InputFileAttribute(object.getSize())\n+    );\n+\n+    return Streams.sequentialStreamFrom(splitIterator)\n+                  .map(objects -> objects.stream()\n+                                         .map(OssUtils::summaryToCloudObjectLocation)\n+                                         .collect(Collectors.toList()))\n+                  .map(InputSplit::new);\n+  }\n+\n+  @Override\n+  public SplittableInputSource<List<CloudObjectLocation>> withSplit(InputSplit<List<CloudObjectLocation>> split)\n+  {\n+    return new OssInputSource(\n+        clientSupplier.get(),\n+        inputDataConfig,\n+        null,\n+        null,\n+        split.get(),\n+        getOssInputSourceConfig()\n+    );\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(super.hashCode(), inputSourceConfig);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    if (!super.equals(o)) {\n+      return false;\n+    }\n+    OssInputSource that = (OssInputSource) o;", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxMjgxMg==", "url": "https://github.com/apache/druid/pull/9898#discussion_r445612812", "bodyText": "it's super.equals which checks uris and prefixes", "author": "FrankChen021", "createdAt": "2020-06-25T14:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MzQ3Nw==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441973477", "bodyText": "Suggest renaming this to avoid having the same name as the S3 version", "author": "jon-wei", "createdAt": "2020-06-18T05:17:59Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/ObjectSummaryIterator.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import org.apache.druid.java.util.common.RE;\n+\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Iterator class used by {@link OssUtils#objectSummaryIterator}.\n+ * <p>\n+ * As required by the specification of that method, this iterator is computed incrementally in batches of\n+ * {@code maxListLength}. The first call is made at the same time the iterator is constructed.\n+ *\n+ */\n+public class ObjectSummaryIterator implements Iterator<OSSObjectSummary>", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NDY4NA==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441974684", "bodyText": "This should preserve the original javadoc about being adapted from jets3t code:\n   * Adapted from org.jets3t.service.model.StorageObject.isDirectoryPlaceholder(). Does not include the check for\n   * legacy JetS3t directory placeholder objects, since it is based on content-type, which isn't available in an\n   * S3ObjectSummary.\n\nCan you also add an entry noting the usage here?\nhttps://github.com/apache/druid/blob/master/LICENSE#L276", "author": "jon-wei", "createdAt": "2020-06-18T05:22:47Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/ObjectSummaryIterator.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import org.apache.druid.java.util.common.RE;\n+\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Iterator class used by {@link OssUtils#objectSummaryIterator}.\n+ * <p>\n+ * As required by the specification of that method, this iterator is computed incrementally in batches of\n+ * {@code maxListLength}. The first call is made at the same time the iterator is constructed.\n+ *\n+ */\n+public class ObjectSummaryIterator implements Iterator<OSSObjectSummary>\n+{\n+  private final OSS client;\n+  private final Iterator<URI> prefixesIterator;\n+  private final int maxListingLength;\n+\n+  private ListObjectsRequest request;\n+  private ObjectListing result;\n+  private Iterator<OSSObjectSummary> objectSummaryIterator;\n+  private OSSObjectSummary currentObjectSummary;\n+\n+  ObjectSummaryIterator(\n+      final OSS client,\n+      final Iterable<URI> prefixes,\n+      final int maxListingLength\n+  )\n+  {\n+    this.client = client;\n+    this.prefixesIterator = prefixes.iterator();\n+    this.maxListingLength = maxListingLength;\n+\n+    prepareNextRequest();\n+    fetchNextBatch();\n+    advanceObjectSummary();\n+  }\n+\n+  @Override\n+  public boolean hasNext()\n+  {\n+    return currentObjectSummary != null;\n+  }\n+\n+  @Override\n+  public OSSObjectSummary next()\n+  {\n+    if (currentObjectSummary == null) {\n+      throw new NoSuchElementException();\n+    }\n+\n+    final OSSObjectSummary retVal = currentObjectSummary;\n+    advanceObjectSummary();\n+    return retVal;\n+  }\n+\n+  private void prepareNextRequest()\n+  {\n+    final URI currentUri = prefixesIterator.next();\n+    final String currentBucket = currentUri.getAuthority();\n+    final String currentPrefix = OssUtils.extractKey(currentUri);\n+\n+    request = new ListObjectsRequest(currentBucket, currentPrefix, null, null, maxListingLength);\n+  }\n+\n+  private void fetchNextBatch()\n+  {\n+    try {\n+      result = OssUtils.retry(() -> client.listObjects(request));\n+      request.setMarker(result.getNextMarker());\n+      objectSummaryIterator = result.getObjectSummaries().iterator();\n+    }\n+    catch (OSSException e) {\n+      throw new RE(\n+          e,\n+          \"Failed to get object summaries from S3 bucket[%s], prefix[%s]; S3 error: %s\",\n+          request.getBucketName(),\n+          request.getPrefix(),\n+          e.getMessage()\n+      );\n+    }\n+    catch (Exception e) {\n+      throw new RE(\n+          e,\n+          \"Failed to get object summaries from S3 bucket[%s], prefix[%s]\",\n+          request.getBucketName(),\n+          request.getPrefix()\n+      );\n+    }\n+  }\n+\n+  /**\n+   * Advance objectSummaryIterator to the next non-placeholder, updating \"currentObjectSummary\".\n+   */\n+  private void advanceObjectSummary()\n+  {\n+    while (objectSummaryIterator.hasNext() || result.isTruncated() || prefixesIterator.hasNext()) {\n+      while (objectSummaryIterator.hasNext()) {\n+        currentObjectSummary = objectSummaryIterator.next();\n+        // skips directories and empty objects\n+        if (!isDirectoryPlaceholder(currentObjectSummary) && currentObjectSummary.getSize() > 0) {\n+          return;\n+        }\n+      }\n+\n+      // Exhausted \"objectSummaryIterator\" without finding a non-placeholder.\n+      if (result.isTruncated()) {\n+        fetchNextBatch();\n+      } else if (prefixesIterator.hasNext()) {\n+        prepareNextRequest();\n+        fetchNextBatch();\n+      }\n+    }\n+\n+    // Truly nothing left to read.\n+    currentObjectSummary = null;\n+  }\n+\n+  /**\n+   * Checks if a given object is a directory placeholder and should be ignored.", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNTI2Nw==", "url": "https://github.com/apache/druid/pull/9898#discussion_r445615267", "bodyText": "There's no directory placeholder in aliyun OSS, so I made change to this function. As a result, there's no need to add a declaration to license", "author": "FrankChen021", "createdAt": "2020-06-25T14:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NDY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1NDI5OA==", "url": "https://github.com/apache/druid/pull/9898#discussion_r445754298", "bodyText": "@FrankChen021 The code is still derived from jets3t code, so it must be accounted for in LICENSE.", "author": "jon-wei", "createdAt": "2020-06-25T18:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NDY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExNjY3Ng==", "url": "https://github.com/apache/druid/pull/9898#discussion_r446116676", "bodyText": "@jon-wei  LICENSE has been updated in the latest commit, please check it again.", "author": "FrankChen021", "createdAt": "2020-06-26T11:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NDY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3Njk3MQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441976971", "bodyText": "Have you tested this with a Hadoop cluster before? If so, cool. If not, that's fine, we can just document that Hadoop is untested with it.", "author": "jon-wei", "createdAt": "2020-06-18T05:30:50Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssDataSegmentPusher.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+import org.apache.druid.segment.SegmentUtils;\n+import org.apache.druid.segment.loading.DataSegmentPusher;\n+import org.apache.druid.timeline.DataSegment;\n+import org.apache.druid.utils.CompressionUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class OssDataSegmentPusher implements DataSegmentPusher\n+{\n+  private static final EmittingLogger log = new EmittingLogger(OssDataSegmentPusher.class);\n+\n+  private final OSS client;\n+  private final OssStorageConfig config;\n+\n+  @Inject\n+  public OssDataSegmentPusher(\n+      OSS client,\n+      OssStorageConfig config\n+  )\n+  {\n+    this.client = client;\n+    this.config = config;\n+  }\n+\n+  @Override\n+  public String getPathForHadoop()\n+  {\n+    return StringUtils.format(\"%s/%s\", config.getBucket(), config.getPrefix());", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjQzOQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r445616439", "bodyText": "It has not been tested in hadoop cluster yet, because in our test environment, all data are ingested from kafka.", "author": "FrankChen021", "createdAt": "2020-06-25T14:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3Njk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3OTgwMQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441979801", "bodyText": "If there's only one aliyun URI scheme, this binding isn't needed", "author": "jon-wei", "createdAt": "2020-06-18T05:40:57Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssStorageDruidModule.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Binder;\n+import com.google.inject.Provides;\n+import com.google.inject.multibindings.MapBinder;\n+import org.apache.druid.data.SearchableVersionedDataFinder;\n+import org.apache.druid.data.input.aliyun.OssClientConfig;\n+import org.apache.druid.guice.Binders;\n+import org.apache.druid.guice.JsonConfigProvider;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.initialization.DruidModule;\n+\n+import java.util.List;\n+\n+public class OssStorageDruidModule implements DruidModule\n+{\n+  public static final String SCHEME = \"aliyun-oss\";\n+  public static final String SCHEME_S3N = \"aliyun-oss_3n\";\n+  public static final String SCHEME_ZIP = \"aliyun-oss_zip\";\n+\n+  @Override\n+  public List<? extends Module> getJacksonModules()\n+  {\n+    return ImmutableList.of(\n+        new Module()\n+        {\n+          @Override\n+          public String getModuleName()\n+          {\n+            return \"DruidOss-\" + System.identityHashCode(this);\n+          }\n+\n+          @Override\n+          public Version version()\n+          {\n+            return Version.unknownVersion();\n+          }\n+\n+          @Override\n+          public void setupModule(SetupContext context)\n+          {\n+            context.registerSubtypes(OssLoadSpec.class);\n+          }\n+        }\n+    );\n+  }\n+\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n+             .addBinding(SCHEME)\n+             .to(OssTimestampVersionedDataFinder.class)\n+             .in(LazySingleton.class);\n+    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n+             .addBinding(SCHEME_S3N)", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4MDM5NQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r441980395", "bodyText": "Please remove the unused code", "author": "jon-wei", "createdAt": "2020-06-18T05:43:04Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssUtils.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.AccessControlList;\n+import com.aliyun.oss.model.CannedAccessControlList;\n+import com.aliyun.oss.model.DeleteObjectsRequest;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.RetryUtils;\n+import org.apache.druid.java.util.common.RetryUtils.Task;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class OssUtils\n+{\n+  private static final String SCHEME = OssStorageDruidModule.SCHEME;\n+  private static final Joiner JOINER = Joiner.on(\"/\").skipNulls();\n+  private static final Logger log = new Logger(OssUtils.class);\n+\n+\n+  static boolean isServiceExceptionRecoverable(OSSException ex)\n+  {\n+    final boolean isIOException = ex.getCause() instanceof IOException;\n+    final boolean isTimeout = \"RequestTimeout\".equals(ex.getErrorCode());\n+    final boolean badStatusCode = false; //ex. == 400 || ex.getStatusCode() == 403 || ex.getStatusCode() == 404;\n+    return !badStatusCode && (isIOException || isTimeout);\n+  }\n+\n+  public static final Predicate<Throwable> RETRYABLE = new Predicate<Throwable>()\n+  {\n+    @Override\n+    public boolean apply(Throwable e)\n+    {\n+      if (e == null) {\n+        return false;\n+      } else if (e instanceof IOException) {\n+        return true;\n+      } else if (e instanceof OSSException) {\n+        return isServiceExceptionRecoverable((OSSException) e);\n+      } else {\n+        return apply(e.getCause());\n+      }\n+    }\n+  };\n+\n+  /**\n+   * Retries aliyun-oss operations that fail due to io-related exceptions. Service-level exceptions (access denied, file not\n+   * found, etc) are not retried.\n+   */\n+  static <T> T retry(Task<T> f) throws Exception\n+  {\n+    return RetryUtils.retry(f, RETRYABLE, RetryUtils.DEFAULT_MAX_TRIES);\n+  }\n+\n+  static boolean isObjectInBucketIgnoringPermission(\n+      OSS client,\n+      String bucketName,\n+      String objectKey\n+  )\n+  {\n+    try {\n+      return client.doesObjectExist(bucketName, objectKey);\n+    }\n+    catch (OSSException e) {\n+      if (e.getErrorCode().equals(\"NoSuchKey\")) {\n+        // Object is inaccessible to current user, but does exist.\n+        return true;\n+      }\n+      // Something else has gone wrong\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * Create an iterator over a set of aliyun-oss objects specified by a set of prefixes.\n+   * <p>\n+   * For each provided prefix URI, the iterator will walk through all objects that are in the same bucket as the\n+   * provided URI and whose keys start with that URI's path, except for directory placeholders (which will be\n+   * ignored). The iterator is computed incrementally by calling {@link OSS#listObjects} for\n+   * each prefix in batches of {@param maxListLength}. The first call is made at the same time the iterator is\n+   * constructed.\n+   */\n+  public static Iterator<OSSObjectSummary> objectSummaryIterator(\n+      final OSS client,\n+      final Iterable<URI> prefixes,\n+      final int maxListingLength\n+  )\n+  {\n+    return new ObjectSummaryIterator(client, prefixes, maxListingLength);\n+  }\n+\n+  /**\n+   * Create an {@link URI} from the given {@link OSSObjectSummary}. The result URI is composed as below.\n+   *\n+   * <pre>\n+   * {@code aliyun-oss://{BUCKET_NAME}/{OBJECT_KEY}}\n+   * </pre>\n+   */\n+  public static URI summaryToUri(OSSObjectSummary object)\n+  {\n+    return summaryToCloudObjectLocation(object).toUri(SCHEME);\n+  }\n+\n+  public static CloudObjectLocation summaryToCloudObjectLocation(OSSObjectSummary object)\n+  {\n+    return new CloudObjectLocation(object.getBucketName(), object.getKey());\n+  }\n+\n+  static String constructSegmentPath(String baseKey, String storageDir)\n+  {\n+    return JOINER.join(\n+        baseKey.isEmpty() ? null : baseKey,\n+        storageDir\n+    ) + \"/index.zip\";\n+  }\n+\n+  static CannedAccessControlList grantFullControlToBucketOwner(OSS client, String bucket)\n+  {\n+    final AccessControlList acl = client.getBucketAcl(bucket);\n+    return acl.getCannedACL();\n+    //acl.grantAllPermissions(new Grant(new Grantee(acl.getOwner().getId()), Permission.FullControl));", "originalCommit": "b2a9e25e5a4397ec0bd43a547d87ba7357af6eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b6d72a7530c80a075acdf651fbaff4027a58d82", "url": "https://github.com/apache/druid/commit/5b6d72a7530c80a075acdf651fbaff4027a58d82", "message": "1. code review comments adopted\n2. change schema from 'aliyun-oss' to 'oss'\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-06-24T05:14:16Z", "type": "commit"}, {"oid": "5ee9ddcf11fec2bc387b21334481409335b6da07", "url": "https://github.com/apache/druid/commit/5ee9ddcf11fec2bc387b21334481409335b6da07", "message": "add license info\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-06-26T11:00:02Z", "type": "commit"}, {"oid": "7f255d09e78b707e4650307c757c1dfc294ba421", "url": "https://github.com/apache/druid/commit/7f255d09e78b707e4650307c757c1dfc294ba421", "message": "fix doc\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-06-28T03:11:10Z", "type": "commit"}, {"oid": "b09263fbfaebe441b40c7287d097436d7b14fa57", "url": "https://github.com/apache/druid/commit/b09263fbfaebe441b40c7287d097436d7b14fa57", "message": "exclude execution of IT testcases of OSS extension from CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-06-28T07:41:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM5MDQ3Mw==", "url": "https://github.com/apache/druid/pull/9898#discussion_r447390473", "bodyText": "nit: azure -> aliyun", "author": "clintropolis", "createdAt": "2020-06-30T03:44:42Z", "path": "integration-tests/src/test/java/org/apache/druid/tests/TestNGGroup.java", "diffHunk": "@@ -76,6 +76,13 @@\n    */\n   public static final String AZURE_DEEP_STORAGE = \"azure-deep-storage\";\n \n+  /**\n+   * This group is not part of CI. To run this group, azure configs/credentials for your azure must be provided in a file.", "originalCommit": "b09263fbfaebe441b40c7287d097436d7b14fa57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NjE5OA==", "url": "https://github.com/apache/druid/pull/9898#discussion_r448146198", "bodyText": "it's been fixed", "author": "FrankChen021", "createdAt": "2020-07-01T06:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM5MDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNzgzNg==", "url": "https://github.com/apache/druid/pull/9898#discussion_r447407836", "bodyText": "Should be oss instead of s3.", "author": "jihoonson", "createdAt": "2020-06-30T04:51:14Z", "path": "extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssTaskLogsTest.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.ClientException;\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.model.AccessControlList;\n+import com.aliyun.oss.model.DeleteObjectsRequest;\n+import com.aliyun.oss.model.Grant;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.Owner;\n+import com.aliyun.oss.model.PutObjectRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.common.utils.CurrentTimeMillisSupplier;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.easymock.EasyMock;\n+import org.easymock.EasyMockRunner;\n+import org.easymock.EasyMockSupport;\n+import org.easymock.Mock;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@RunWith(EasyMockRunner.class)\n+public class OssTaskLogsTest extends EasyMockSupport\n+{\n+\n+  private static final String KEY_1 = \"key1\";\n+  private static final String KEY_2 = \"key2\";\n+  private static final String TEST_BUCKET = \"test_bucket\";\n+  private static final String TEST_PREFIX = \"test_prefix\";\n+  private static final URI PREFIX_URI = URI.create(StringUtils.format(\"s3://%s/%s\", TEST_BUCKET, TEST_PREFIX));", "originalCommit": "b09263fbfaebe441b40c7287d097436d7b14fa57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NjI5NQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r448146295", "bodyText": "it's been fixed", "author": "FrankChen021", "createdAt": "2020-07-01T06:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwNzgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwODI1NA==", "url": "https://github.com/apache/druid/pull/9898#discussion_r447408254", "bodyText": "nit: I see many variable names containing s3. They are all found in only unit tests and don't affect to production code, but would be nice to clean them up.", "author": "jihoonson", "createdAt": "2020-06-30T04:52:54Z", "path": "extensions-contrib/aliyun-oss-extensions/src/test/java/org/apache/druid/storage/aliyun/OssDataSegmentMoverTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSSClient;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.CopyObjectRequest;\n+import com.aliyun.oss.model.CopyObjectResult;\n+import com.aliyun.oss.model.ListObjectsRequest;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.aliyun.oss.model.ObjectListing;\n+import com.aliyun.oss.model.PutObjectResult;\n+import com.aliyun.oss.model.StorageClass;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.Intervals;\n+import org.apache.druid.java.util.common.MapUtils;\n+import org.apache.druid.segment.loading.SegmentLoadingException;\n+import org.apache.druid.timeline.DataSegment;\n+import org.apache.druid.timeline.partition.NoneShardSpec;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class OssDataSegmentMoverTest\n+{\n+  private static final DataSegment SOURCE_SEGMENT = new DataSegment(\n+      \"test\",\n+      Intervals.of(\"2013-01-01/2013-01-02\"),\n+      \"1\",\n+      ImmutableMap.of(\n+          \"key\",\n+          \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\",\n+          \"bucket\",\n+          \"main\"\n+      ),\n+      ImmutableList.of(\"dim1\", \"dim1\"),\n+      ImmutableList.of(\"metric1\", \"metric2\"),\n+      NoneShardSpec.instance(),\n+      0,\n+      1\n+  );\n+\n+  @Test\n+  public void testMove() throws Exception\n+  {\n+    MockClient mockClient = new MockClient();\n+    OssDataSegmentMover mover = new OssDataSegmentMover(mockClient, new OssStorageConfig());\n+\n+    mockClient.putObject(\n+        \"main\",\n+        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n+    );\n+\n+    DataSegment movedSegment = mover.move(\n+        SOURCE_SEGMENT,\n+        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n+    );\n+\n+    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n+    Assert.assertEquals(\n+        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\",\n+        MapUtils.getString(targetLoadSpec, \"key\")\n+    );\n+    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n+    Assert.assertTrue(mockClient.didMove());\n+  }\n+\n+  @Test\n+  public void testMoveNoop() throws Exception\n+  {\n+    MockClient mockS3Client = new MockClient();", "originalCommit": "b09263fbfaebe441b40c7287d097436d7b14fa57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0ODQ4OA==", "url": "https://github.com/apache/druid/pull/9898#discussion_r448148488", "bodyText": "all s3 in  this extension have been fixed", "author": "FrankChen021", "createdAt": "2020-07-01T06:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQwODI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMTM0MQ==", "url": "https://github.com/apache/druid/pull/9898#discussion_r447411341", "bodyText": "nit: FiniteFirehoseFactory is deprecated and it's not recommend to implement it. You can keep this implementation if you want, but it can be deleted sooner or later.", "author": "jihoonson", "createdAt": "2020-06-30T05:04:18Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/firehose/aliyun/StaticOssFirehoseFactory.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.firehose.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.aliyun.oss.OSSException;\n+import com.aliyun.oss.model.GetObjectRequest;\n+import com.aliyun.oss.model.OSSObject;\n+import com.aliyun.oss.model.OSSObjectSummary;\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import org.apache.druid.data.input.FiniteFirehoseFactory;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.StringInputRowParser;\n+import org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.aliyun.OssStorageDruidModule;\n+import org.apache.druid.storage.aliyun.OssUtils;\n+import org.apache.druid.utils.CompressionUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Builds firehoses that read from a predefined list of aliyun OSS objects and then dry up.\n+ */\n+public class StaticOssFirehoseFactory extends PrefetchableTextFilesFirehoseFactory<URI>", "originalCommit": "b09263fbfaebe441b40c7287d097436d7b14fa57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDE1OA==", "url": "https://github.com/apache/druid/pull/9898#discussion_r448150158", "bodyText": "it's kept for further deletion :)", "author": "FrankChen021", "createdAt": "2020-07-01T06:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMTM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMTk2Mg==", "url": "https://github.com/apache/druid/pull/9898#discussion_r447411962", "bodyText": "nit: hmm, DruidOss sounds like Druid open source software. Maybe DruidAliyunOss is better?", "author": "jihoonson", "createdAt": "2020-06-30T05:06:18Z", "path": "extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssStorageDruidModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.aliyun;\n+\n+import com.aliyun.oss.OSS;\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Binder;\n+import com.google.inject.Provides;\n+import com.google.inject.multibindings.MapBinder;\n+import org.apache.druid.data.SearchableVersionedDataFinder;\n+import org.apache.druid.data.input.aliyun.OssClientConfig;\n+import org.apache.druid.guice.Binders;\n+import org.apache.druid.guice.JsonConfigProvider;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.initialization.DruidModule;\n+\n+import java.util.List;\n+\n+public class OssStorageDruidModule implements DruidModule\n+{\n+  public static final String SCHEME = \"oss\";\n+  public static final String SCHEME_ZIP = \"oss_zip\";\n+\n+  @Override\n+  public List<? extends Module> getJacksonModules()\n+  {\n+    return ImmutableList.of(\n+        new Module()\n+        {\n+          @Override\n+          public String getModuleName()\n+          {\n+            return \"DruidOss-\" + System.identityHashCode(this);", "originalCommit": "b09263fbfaebe441b40c7287d097436d7b14fa57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDE4Mg==", "url": "https://github.com/apache/druid/pull/9898#discussion_r448150182", "bodyText": "it's been fixed.", "author": "FrankChen021", "createdAt": "2020-07-01T06:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMTk2Mg=="}], "type": "inlineReview"}, {"oid": "b158c0dae5df10fce32bc0a9b7a3b38b1a77c4a4", "url": "https://github.com/apache/druid/commit/b158c0dae5df10fce32bc0a9b7a3b38b1a77c4a4", "message": "put the extensions under contrib group and add to distribution", "committedDate": "2020-07-01T06:30:46Z", "type": "commit"}, {"oid": "57ffebbc2abefcef46afc6553007563b13ae0deb", "url": "https://github.com/apache/druid/commit/57ffebbc2abefcef46afc6553007563b13ae0deb", "message": "fix names in test cases", "committedDate": "2020-07-01T06:32:13Z", "type": "commit"}, {"oid": "8c434ce5729751425b5d7ba2e5906e6c38468187", "url": "https://github.com/apache/druid/commit/8c434ce5729751425b5d7ba2e5906e6c38468187", "message": "add unit test to cover OssInputSource", "committedDate": "2020-07-01T06:32:46Z", "type": "commit"}, {"oid": "cd44f1d8b3d072cd7647ea91903a7a34c7c898ed", "url": "https://github.com/apache/druid/commit/cd44f1d8b3d072cd7647ea91903a7a34c7c898ed", "message": "fix names in test cases", "committedDate": "2020-07-01T06:41:23Z", "type": "commit"}, {"oid": "870a124d6f8372c0d06638ac6fb9a54494e52d5d", "url": "https://github.com/apache/druid/commit/870a124d6f8372c0d06638ac6fb9a54494e52d5d", "message": "fix dependency problem reported by CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>", "committedDate": "2020-07-02T01:54:50Z", "type": "commit"}]}