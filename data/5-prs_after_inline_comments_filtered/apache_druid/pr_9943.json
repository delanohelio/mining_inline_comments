{"pr_number": 9943, "pr_title": "fix unsafe concurrent access in StreamAppenderatorDriver", "pr_createdAt": "2020-05-28T04:48:05Z", "pr_url": "https://github.com/apache/druid/pull/9943", "timeline": [{"oid": "8b979418c85689b0194b77e3538ea6d5b22f2b70", "url": "https://github.com/apache/druid/commit/8b979418c85689b0194b77e3538ea6d5b22f2b70", "message": "fix unsafe concurrent access in StreamAppenderatorDriver\n\nduring segment publishing we do streaming operations on a collection not\nsafe for concurrent modification. To guarantee correct results we must\nalso guard any operations on the stream itself.\n\nThis may explain the issue seen in https://github.com/apache/druid/issues/9845", "committedDate": "2020-05-28T04:44:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTgxOA==", "url": "https://github.com/apache/druid/pull/9943#discussion_r432265818", "bodyText": "Since the only uses of these methods is just to get the segment identifier and collect it to a set\n...\n        .map(SegmentWithState::getSegmentIdentifier)\n        .collect(Collectors.toSet());\n\nshould these methods instead just return Set<SegmentIdWithShardSpec> instead of a stream so we can't make the error?", "author": "clintropolis", "createdAt": "2020-05-29T05:40:01Z", "path": "server/src/main/java/org/apache/druid/segment/realtime/appenderator/BaseAppenderatorDriver.java", "diffHunk": "@@ -427,30 +428,36 @@ protected AppenderatorDriverAddResult append(\n \n   /**\n    * Returns a stream of {@link SegmentWithState} for the given sequenceNames.\n+   *\n+   * Note: it is not enough to synchronize on segments to access to this method,\n+   * any operation on the resulting stream must also be synchronized on segments.\n    */\n+  @GuardedBy(\"segments\")\n   Stream<SegmentWithState> getSegmentWithStates(Collection<String> sequenceNames)\n   {\n-    synchronized (segments) {\n-      return sequenceNames\n-          .stream()\n-          .map(segments::get)\n-          .filter(Objects::nonNull)\n-          .flatMap(segmentsForSequence -> segmentsForSequence.intervalToSegmentStates.values().stream())\n-          .flatMap(segmentsOfInterval -> segmentsOfInterval.getAllSegments().stream());\n-    }\n+    return sequenceNames", "originalCommit": "8b979418c85689b0194b77e3538ea6d5b22f2b70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxMzczNQ==", "url": "https://github.com/apache/druid/pull/9943#discussion_r432613735", "bodyText": "we can definitely change the methods to do the full reduction. It seemed we had plans to use this for other things, but I can certainly simplify it", "author": "xvrl", "createdAt": "2020-05-29T16:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MDM1MA==", "url": "https://github.com/apache/druid/pull/9943#discussion_r432770350", "bodyText": "@clintropolis I've update the code to return the fully materialized collections rather than streams.", "author": "xvrl", "createdAt": "2020-05-29T22:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTgxOA=="}], "type": "inlineReview"}, {"oid": "b495a60dd64be630c75a4db8d8ac839436bb46b8", "url": "https://github.com/apache/druid/commit/b495a60dd64be630c75a4db8d8ac839436bb46b8", "message": "remove streams", "committedDate": "2020-05-29T22:40:18Z", "type": "commit"}, {"oid": "b495a60dd64be630c75a4db8d8ac839436bb46b8", "url": "https://github.com/apache/druid/commit/b495a60dd64be630c75a4db8d8ac839436bb46b8", "message": "remove streams", "committedDate": "2020-05-29T22:40:18Z", "type": "forcePushed"}]}