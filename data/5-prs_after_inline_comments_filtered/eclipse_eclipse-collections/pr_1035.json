{"pr_number": 1035, "pr_title": "Add toImmutableList/Set/Bag to RichIterable interface.", "pr_createdAt": "2020-11-26T08:03:51Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/1035", "timeline": [{"oid": "bee3058253159032e872f25ccfc3127532dc5b13", "url": "https://github.com/eclipse/eclipse-collections/commit/bee3058253159032e872f25ccfc3127532dc5b13", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2020-11-27T19:42:21Z", "type": "forcePushed"}, {"oid": "c2f1922b3c89597f614442dc2e9509129f64b3ba", "url": "https://github.com/eclipse/eclipse-collections/commit/c2f1922b3c89597f614442dc2e9509129f64b3ba", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2020-11-29T04:22:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532246128", "bodyText": "These should live with the other to*() methods, probably right after toBiMap().\nThe other to*() methods are not default - why the difference?", "author": "motlin", "createdAt": "2020-11-29T18:16:29Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java", "diffHunk": "@@ -2487,4 +2490,34 @@ default void appendString(Appendable appendable, String separator)\n         this.forEach(each -> target.put(groupByFunction.apply(each), collectFunction.apply(each)));\n         return target;\n     }\n+\n+    /**\n+     * Converts the RichIterable to the default ImmutableList implementation.\n+     *\n+     * @since 11.0\n+     */\n+    default ImmutableList<T> toImmutableList()\n+    {\n+        return this.toList().toImmutable();\n+    }\n+\n+    /**\n+     * Converts the RichIterable to the default ImmutableSet implementation.\n+     *\n+     * @since 11.0\n+     */\n+    default ImmutableSet<T> toImmutableSet()\n+    {\n+        return this.toSet().toImmutable();\n+    }\n+\n+    /**\n+     * Converts the RichIterable to the default ImmutableBag implementation.\n+     *\n+     * @since 11.0\n+     */\n+    default ImmutableBag<T> toImmutableBag()\n+    {\n+        return this.toBag().toImmutable();\n+    }", "originalCommit": "c2f1922b3c89597f614442dc2e9509129f64b3ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjI4MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532246280", "bodyText": "toImmutableSortedSet(), toImmutableSortedBag(), toImmutableMap(), toImmutableSortedMap()? Separate PR?", "author": "motlin", "createdAt": "2020-11-29T18:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1MTc5MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532251791", "bodyText": "Why prefer this.to<type>().toImmutable() over <type>s.immutable.withAll(this)?", "author": "motlin", "createdAt": "2020-11-29T19:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1Mjk4OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532252988", "bodyText": "to<type>() implementations appear to have various overrides, so the code is not the same.", "author": "mohrezaei", "createdAt": "2020-11-29T19:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1ODAwMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532258002", "bodyText": "@motlin Yes, I was planning for separate PRs for the other to methods since they have more overrides. I wanted to see if these made sense first.", "author": "donraab", "createdAt": "2020-11-29T19:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1ODQwNg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532258406", "bodyText": "Why prefer this.to<type>().toImmutable() over <type>s.immutable.withAll(this)?\n\nMy gut feel is that this made the most sense for the default case, but happy to change the default implementation. I'm also curious if there might be opportunities for optimizations in various implementations.", "author": "donraab", "createdAt": "2020-11-29T20:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2MjY5Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532262696", "bodyText": "Both have different opportunities for optimization. My thought is that if both are as optimized as possible, the this.to<type>().toImmutable() form will still make one more copy.\nIt kind of doesn't matter. Even if these methods are \"slow\" I'd still use them. It's just hard to see in a code review where these methods ought to be overridden imagining if they were not default methods.", "author": "motlin", "createdAt": "2020-11-29T20:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2NzA4Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532267086", "bodyText": "Both have different opportunities for optimization. My thought is that if both are as optimized as possible, the this.to<type>().toImmutable() form will still make one more copy.\nIt kind of doesn't matter. Even if these methods are \"slow\" I'd still use them. It's just hard to see in a code review where these methods ought to be overridden imagining if they were not default methods.\n\nFor this PR I was really just looking for confirmation that these method names and signatures make sense. We can choose to optimize them by reducing copying. This will further illustrate their value and support the cost of adding them.", "author": "donraab", "createdAt": "2020-11-29T21:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI4MTAyMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532281020", "bodyText": "@motlin @mohrezaei I'm going to change the code to use Craig's suggested approach. Another benefit is that all of the factory methods are optimized for empty.", "author": "donraab", "createdAt": "2020-11-29T22:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI4Mjk4OQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532282989", "bodyText": "withAll creates an intermediate array. It would be best to get rid of that first. There is some optimization around small sets that appears to be buggy and should be fixed at the same time. Instead of creating an array, the iterable should be used to construct a UnifiedSet. If the set size is small, then it should be converted to a small immutable set, otherwise wrapped to immutable.\nbug: pass in a list of size 1000 that has the same item. Instead of a singleton immutable set, the current code creates an wrapped unified set with a single entry.", "author": "mohrezaei", "createdAt": "2020-11-29T23:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwOTA1MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r532309050", "bodyText": "@mohrezaei These changes definitely make sense. I think we need to revisit the withAll implementations for the immutable factories across the board. I will create issues for these.", "author": "donraab", "createdAt": "2020-11-30T01:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0NjEyOA=="}], "type": "inlineReview"}, {"oid": "16d9a3cc03cb6653e1f5610ddbc2679ace84349e", "url": "https://github.com/eclipse/eclipse-collections/commit/16d9a3cc03cb6653e1f5610ddbc2679ace84349e", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2020-11-29T23:03:40Z", "type": "forcePushed"}, {"oid": "9d279ce38c92ef3330b0a38b3e5dd8fdafb06eda", "url": "https://github.com/eclipse/eclipse-collections/commit/9d279ce38c92ef3330b0a38b3e5dd8fdafb06eda", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2021-01-12T20:29:37Z", "type": "forcePushed"}, {"oid": "fd06ecc5d947e57cccd2b49b388d3d6edf5a9792", "url": "https://github.com/eclipse/eclipse-collections/commit/fd06ecc5d947e57cccd2b49b388d3d6edf5a9792", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2021-02-09T03:21:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzI2OTc5NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r573269795", "bodyText": "Overrides like this don't hurt, but aren't really necessary, since withAll() has the same optimization.\n    @Override\n    public <T> ImmutableBag<T> withAll(Iterable<? extends T> items)\n    {\n        if (items instanceof ImmutableBag<?>)\n        {\n            return (ImmutableBag<T>) items;\n        }\n        if (items instanceof Bag<?>)\n        {\n            Bag<T> bag = (Bag<T>) items;\n            if (bag.isEmpty())\n            {\n                return this.with();\n            }\n            if (bag.size() == 1)\n            {\n                return this.with(bag.getFirst());\n            }\n            if (bag.sizeDistinct() < ImmutableArrayBag.MAXIMUM_USEFUL_ARRAY_BAG_SIZE)\n            {\n                return ImmutableArrayBag.copyFrom(bag);\n            }\n            return new ImmutableHashBag<>(bag);\n        }\n        return this.of((T[]) Iterate.toArray(items));\n    }", "author": "motlin", "createdAt": "2021-02-09T21:54:47Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/ImmutableBag.java", "diffHunk": "@@ -219,4 +219,15 @@\n      */\n     @Override\n     ImmutableList<ObjectIntPair<T>> bottomOccurrences(int count);\n+\n+    /**\n+     * Overrides toImmutableBag in RichIterable to return this.\n+     *\n+     * @since 11.0\n+     */\n+    @Override\n+    default ImmutableBag<T> toImmutableBag()\n+    {\n+        return this;\n+    }", "originalCommit": "fd06ecc5d947e57cccd2b49b388d3d6edf5a9792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQwOTM5Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1035#discussion_r573409397", "bodyText": "@motlin I prefer the clarity of the direct return.", "author": "donraab", "createdAt": "2021-02-10T02:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzI2OTc5NQ=="}], "type": "inlineReview"}, {"oid": "1054589421cc9f938756a3db8d642883d091ffe2", "url": "https://github.com/eclipse/eclipse-collections/commit/1054589421cc9f938756a3db8d642883d091ffe2", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2021-02-14T00:17:46Z", "type": "forcePushed"}, {"oid": "b4d4a51b82ff1453240f174f6302d3a5c5702b6b", "url": "https://github.com/eclipse/eclipse-collections/commit/b4d4a51b82ff1453240f174f6302d3a5c5702b6b", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2021-02-14T20:12:18Z", "type": "commit"}, {"oid": "b4d4a51b82ff1453240f174f6302d3a5c5702b6b", "url": "https://github.com/eclipse/eclipse-collections/commit/b4d4a51b82ff1453240f174f6302d3a5c5702b6b", "message": "Add toImmutableList/Set/Bag to RichIterable interface.\n\nSigned-off-by: Donald Raab <Donald.Raab@bnymellon.com>", "committedDate": "2021-02-14T20:12:18Z", "type": "forcePushed"}]}