{"pr_number": 801, "pr_title": "Add withMap to MutableMap", "pr_createdAt": "2020-02-21T16:34:32Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/801", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODYxMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r382908610", "bodyText": "Can you add a test case for empty maps?\n\nInput map is empty, target map is non-empty\nInput map is empty, target map is empty\nInput map is non-empty, target map is empty", "author": "nikhilnanivadekar", "createdAt": "2020-02-22T12:15:55Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,18 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);", "originalCommit": "1a06fe19338216bd9da901980aeddf85410493af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjI4MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r383032280", "bodyText": "I added them!", "author": "aboullaite", "createdAt": "2020-02-23T19:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODYxMA=="}], "type": "inlineReview"}, {"oid": "cd739f34a11055470d32453a76a59f022e412f09", "url": "https://github.com/eclipse/eclipse-collections/commit/cd739f34a11055470d32453a76a59f022e412f09", "message": "Add withMap to MutableMap\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-02-23T07:48:13Z", "type": "forcePushed"}, {"oid": "c99f1d8c22f59370f778ea23c563272e6715aa0d", "url": "https://github.com/eclipse/eclipse-collections/commit/c99f1d8c22f59370f778ea23c563272e6715aa0d", "message": "Release version 10.2.0.", "committedDate": "2020-02-11T15:58:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzE1OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387433158", "bodyText": "additional keys and values (it should be plural)", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:37:52Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -152,6 +152,25 @@ default boolean removeIf(Predicate2<? super K, ? super V> predicate)\n      */\n     MutableMapIterable<K, V> withKeyValue(K key, V value);\n \n+    /**\n+     * This method allows mutable, fixed size, and immutable maps the ability to add elements of a Map to their existing\n+     * elements. In order to support fixed size maps, a new instance of a map would have to be returned including the\n+     * keys and values of the original plus the additional key and value. In the case of mutable maps, the original map", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzU3MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387433571", "bodyText": "are we supporting this on fixed size and immutable maps?", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:40:01Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -152,6 +152,25 @@ default boolean removeIf(Predicate2<? super K, ? super V> predicate)\n      */\n     MutableMapIterable<K, V> withKeyValue(K key, V value);\n \n+    /**\n+     * This method allows mutable, fixed size, and immutable maps the ability to add elements of a Map to their existing", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNjI5MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389326291", "bodyText": "I am planning to! but I'll fix this one first, merge, and work on fixed size and immutable maps support as well.", "author": "aboullaite", "createdAt": "2020-03-08T01:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzk0Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387433947", "bodyText": "Please add since 10.3.0", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:41:53Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -152,6 +152,25 @@ default boolean removeIf(Predicate2<? super K, ? super V> predicate)\n      */\n     MutableMapIterable<K, V> withKeyValue(K key, V value);\n \n+    /**\n+     * This method allows mutable, fixed size, and immutable maps the ability to add elements of a Map to their existing\n+     * elements. In order to support fixed size maps, a new instance of a map would have to be returned including the\n+     * keys and values of the original plus the additional key and value. In the case of mutable maps, the original map\n+     * is modified and then returned. In order to use this method properly with mutable and fixed size maps the\n+     * following approach must be taken:\n+     * <p>\n+     * <pre>\n+     * map = map.withKeyValue(\"new key\", \"new value\");\n+     * </pre>\n+     * In the case of FixedSizeMap, a new instance will be returned by withKeyValue, and any variables that\n+     * previously referenced the original map will need to be redirected to reference the new instance. In the case\n+     * of a FastMap or UnifiedMap, you will be replacing the reference to map with map, since FastMap and UnifiedMap\n+     * will both return \"this\" after calling put on themselves.\n+     *\n+     * @see #put(Object, Object)\n+     */\n+    MutableMapIterable<K, V> withMap(Map<K, V> map);", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjM0MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389402341", "bodyText": "\"with mutable maps\"\nI feel like this must mean \"immutable\" no?\nDoes the method return this? It should say so.\nThis behaves kind of like putAll() right? The link in @see should be to putAll if so.", "author": "motlin", "createdAt": "2020-03-08T20:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzMzk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDA5Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387434096", "bodyText": "@donraab suggests to have a since tag on each interface.", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:42:40Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/sorted/MutableSortedMap.java", "diffHunk": "@@ -244,6 +245,9 @@\n     @Override\n     MutableSortedMap<K, V> withKeyValue(K key, V value);\n \n+    @Override\n+    MutableSortedMap<K, V> withMap(Map<K, V> map);", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDQ1MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387434451", "bodyText": "thank you for fixing this!", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:44:08Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/ordered/mutable/UnmodifiableMutableOrderedMap.java", "diffHunk": "@@ -162,7 +162,13 @@ public void clear()\n     @Override\n     public MutableOrderedMap<K, V> withKeyValue(K key, V value)\n     {\n-        throw new UnsupportedOperationException(\"Cannot call collectKeysAndValues() on \" + this.getClass().getSimpleName());\n+        throw new UnsupportedOperationException(\"Cannot call withKeyValue() on \" + this.getClass().getSimpleName());", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDg3NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387434875", "bodyText": "You can simplify this test to:\nVerify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf(\"a\"))));", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:46:05Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -161,6 +164,36 @@ public void withKeyValue()\n         Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withKeyValue(1, 'a'));\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTA0Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315042", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf(\"a\"));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T21:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NTQwMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r403745401", "bodyText": "Instead of \"mutation\" I think you mean \"mutable\"", "author": "motlin", "createdAt": "2020-04-05T19:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NTQ4Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r403745482", "bodyText": "edited inline", "author": "motlin", "createdAt": "2020-04-05T19:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDk3OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387434978", "bodyText": "Maps.mutable.empty()", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:46:34Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -161,6 +164,36 @@ public void withKeyValue()\n         Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withKeyValue(1, 'a'));\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTA4NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315085", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T21:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTA0MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435040", "bodyText": "refer to above.", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:46:47Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -161,6 +164,36 @@ public void withKeyValue()\n         Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withKeyValue(1, 'a'));\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTA5NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435094", "bodyText": "Maps.mutable.empty()", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:47:07Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -161,6 +164,36 @@ public void withKeyValue()\n         Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withKeyValue(1, 'a'));\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmptyAndTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(Collections.emptyMap()));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTE1OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315158", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(Collections.emptyMap()));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(Maps.mutable.empty()));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T21:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTMwNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435304", "bodyText": "This can be simplified to Maps.mutable.with(\"B\", 22, \"C\", 3)", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:48:12Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,50 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTQxOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435418", "bodyText": "Maps.mutable.empty()", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:48:43Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,50 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"B\", 22 },\n+                { \"C\", 3 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(simpleMap);\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTIzNw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315237", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());\n          \n          \n            \n                    MutableMapIterable<String, Integer> mapWith = map.withMap(Maps..mutable.empty());", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T21:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTQ1Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435453", "bodyText": "Sample as above", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:48:55Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,50 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"B\", 22 },\n+                { \"C\", 3 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(simpleMap);\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 2), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMap();\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTUwMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435502", "bodyText": "Maps.mutable.empty()", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:49:08Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,50 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"B\", 22 },\n+                { \"C\", 3 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(simpleMap);\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 2), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMap();\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"A\", 1 },\n+                { \"B\", 2 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(simpleMap);\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 2), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapEmptyAndTargetEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMap();\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTMxNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315314", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());\n          \n          \n            \n                    MutableMapIterable<String, Integer> mapWith = map.withMap(Maps.mutable.empty());", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTYxOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r387435618", "bodyText": "Please revert this. It causes confusion while reviewing git history.", "author": "nikhilnanivadekar", "createdAt": "2020-03-04T03:49:43Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -638,6 +685,7 @@ public void rehash_null_collision()\n     public void updateValue()\n     {\n         MutableMapIterable<Integer, Integer> map = this.newMap();\n+", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTMyNg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315326", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTEyMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315123", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(\n          \n          \n            \n                            Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(\n          \n          \n            \n                            Maps.mutable.with(1, Character.valueOf(\"a\"))));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T21:57:56Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/bimap/mutable/UnmodifiableBiMapTest.java", "diffHunk": "@@ -161,6 +164,36 @@ public void withKeyValue()\n         Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withKeyValue(1, 'a'));\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.getEmptyMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTIyNg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n          \n          \n            \n                            { \"B\", 22 },\n          \n          \n            \n                            { \"C\", 3 },\n          \n          \n            \n                    }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n          \n          \n            \n                    Map<String, Integer> simpleMap = Maps.mutable.with(\"B\", 22, \"C\", 3);", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T21:59:36Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,50 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"B\", 22 },\n+                { \"C\", 3 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTI3OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n          \n          \n            \n                            { \"A\", 1 },\n          \n          \n            \n                            { \"B\", 2 },\n          \n          \n            \n                    }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n          \n          \n            \n                    Map<String, Integer> simpleMap = Maps.mutable.with(\"A\", 1, \"B\", 2);", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:00:37Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/MutableMapIterableTestCase.java", "diffHunk": "@@ -560,6 +563,50 @@ public void withKeyValue()\n         Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 11, \"B\", 2), mapWith);\n     }\n \n+    @Test\n+    public void withMap()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"B\", 22 },\n+                { \"C\", 3 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(simpleMap);\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 22, \"C\", 3), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMapWithKeysValues(\"A\", 1, \"B\", 2);\n+        MutableMapIterable<String, Integer> mapWith = map.withMap(Collections.emptyMap());\n+        Assert.assertSame(map, mapWith);\n+        Verify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 1, \"B\", 2), mapWith);\n+    }\n+\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        MutableMapIterable<String, Integer> map = this.newMap();\n+        Map<String, Integer> simpleMap = Stream.of(new Object[][] {\n+                { \"A\", 1 },\n+                { \"B\", 2 },\n+        }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTM5MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315390", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n          \n          \n            \n                            Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n          \n          \n            \n                            Maps.mutable.with(1, Character.valueOf(\"a\"))));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:02:06Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMapTest.java", "diffHunk": "@@ -284,6 +288,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTM5Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:02:26Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMapTest.java", "diffHunk": "@@ -284,6 +288,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTQxNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315415", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(\n          \n          \n            \n                            Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Maps.mutable.with(1, Character.valueOf(\"a\")));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:03:08Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMapTest.java", "diffHunk": "@@ -284,6 +288,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTQzMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315432", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Collections.emptyMap()));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Maps.mutable.empty()));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:03:22Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/mutable/UnmodifiableMutableMapTest.java", "diffHunk": "@@ -284,6 +288,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmptyAndTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Collections.emptyMap()));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTQ4OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n          \n          \n            \n                            Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.with(1, Character.valueOf(\"a\"))));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:03:59Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/sorted/mutable/UnmodifiableTreeMapTest.java", "diffHunk": "@@ -348,6 +351,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTQ5Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Maps.mutable.empty()));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:04:15Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/sorted/mutable/UnmodifiableTreeMapTest.java", "diffHunk": "@@ -348,6 +351,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTUyMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(\n          \n          \n            \n                            Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Maps.mutable.with(1, Character.valueOf(\"a\")));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:04:42Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/sorted/mutable/UnmodifiableTreeMapTest.java", "diffHunk": "@@ -348,6 +351,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNTUyNw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389315527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Collections.emptyMap()));\n          \n          \n            \n                    Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Maps.mutable.empty()));", "author": "nikhilnanivadekar", "createdAt": "2020-03-07T22:04:58Z", "path": "unit-tests/src/test/java/org/eclipse/collections/impl/map/sorted/mutable/UnmodifiableTreeMapTest.java", "diffHunk": "@@ -348,6 +351,36 @@ public void withKeyValue()\n         this.newMapWithKeysValues(1, \"One\", 2, \"2\").withKeyValue(null, null);\n     }\n \n+    @Override\n+    @Test\n+    public void withMap()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMapWithKeyValue(1, 'a').withMap(Collections.emptyMap()));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(\n+                Stream.of(new Object[][] {{ 1, 'a' }}).collect(Collectors.toMap(data -> (Integer) data[0], data -> (Character) data[1]))));\n+    }\n+\n+    @Override\n+    @Test\n+    public void withMapEmptyAndTargetEmpty()\n+    {\n+        Verify.assertThrows(UnsupportedOperationException.class, () -> this.newMap().withMap(Collections.emptyMap()));", "originalCommit": "54218d3199873683ab0e0584d2cc754a63fdb47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjc1Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389402753", "bodyText": "I don't think we should have a null check.\nInstead of delegating to forEach, I think we should be delegating to putAll() which sometimes is better optimized (See UnifiedMap for an example).\nTaken together, the implementation for all mutable maps will be:\nthis.putAll(map);\nreturn this;\nWhich means the implementations can be pulled up to interfaces as default methods. AbstractMutable*Maps will be unchanged.", "author": "motlin", "createdAt": "2020-03-08T20:32:55Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/AbstractMutableBiMap.java", "diffHunk": "@@ -153,6 +153,17 @@ else if (other == value || value.equals(other))\n         return this;\n     }\n \n+    @Override\n+    public MutableBiMap<K, V> withMap(Map<K, V> map)\n+    {\n+        if (map == null)\n+        {\n+            throw new IllegalArgumentException(\"Cannot Add a null Map!\");\n+        }\n+        map.forEach(this::put);\n+        return this;\n+    }", "originalCommit": "8d44430fcfd7c19b140098f4c797282ef790cc34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNjE3NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389406174", "bodyText": "The null check is following the discussion we had previously in this PR! is just to trigger IAE instead of NPE! If the default behaviour should be to trigger NPEs instead, then I remove it and update the tests! WDYT ?", "author": "aboullaite", "createdAt": "2020-03-08T21:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNzAwMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389407002", "bodyText": "Yes, I replied. Repeating here:\n\nIt's not a big deal either way, but Effective Java Item 72: Favor the use of standard exceptions says \"If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException.\"\n\nIn addition, this method feels very similar to putAll(). If you call Map.putAll(null) on any map, including our own implementations, you'll get a NullPointerException. None of them have a null check either.", "author": "motlin", "createdAt": "2020-03-08T21:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwNzkwNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389407905", "bodyText": "Got it! Thanks", "author": "aboullaite", "createdAt": "2020-03-08T21:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNTgxNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389415814", "bodyText": "@motlin @nikhilnanivadekar I'm facing some test failures after removing the null checks from the methods! I was expecting everything to return NPE from underlying methods, but seems its not the case! some classes (org.eclipse.collections.impl.map.mutable.ConcurrentHashMap for example) are triggering IAE since they use java.util.Map#putAll(Map) method, however others (org.eclipse.collections.impl.bimap.mutable.HashBiMap) trigger NPE, since putAll(Map) method is overridden in org.eclipse.collections.impl.bimap.mutable.AbstractMutableBiMap\nHow should I deal with such a case from your PoV!", "author": "aboullaite", "createdAt": "2020-03-08T23:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMjg2MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r389402860", "bodyText": "Synchronized wrappers should delegate to methods of the same name. But then return this, the wrapper.", "author": "motlin", "createdAt": "2020-03-08T20:33:52Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java", "diffHunk": "@@ -291,6 +292,20 @@ public V forcePut(K key, V value)\n         }\n     }\n \n+    @Override\n+    public MutableBiMap<K, V> withMap(Map<K, V> map)\n+    {\n+        if (map == null)\n+        {\n+            throw new IllegalArgumentException(\"Cannot Add a null Map!\");\n+        }\n+        synchronized (this.lock)\n+        {\n+            map.forEach(this::put);\n+            return this;\n+        }", "originalCommit": "8d44430fcfd7c19b140098f4c797282ef790cc34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NjI1Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r390546252", "bodyText": "While I do think we should pull the method up, we need it to have the correct generics, which is a breaking change. It needs the bounded wildcards ? extends K, ? extends V", "author": "motlin", "createdAt": "2020-03-10T19:05:12Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -161,11 +161,15 @@ default boolean removeIf(Predicate2<? super K, ? super V> predicate)\n      * map = map.withMap(someMap);\n      * </pre>\n      *\n-     * @see #put(Object, Object)\n+     * @see #putAll(Map)\n      *\n      * @since 10.3.0\n      */\n-    MutableMapIterable<K, V> withMap(Map<K, V> map);\n+    default MutableMapIterable<K, V> withMap(Map<K, V> map)", "originalCommit": "a9f93439e40347ffdb8f857c604594b4cf02043f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NDYyNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r390554625", "bodyText": "Oh yes! That is true. Fixing it right away", "author": "aboullaite", "createdAt": "2020-03-10T19:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NjI1Mg=="}], "type": "inlineReview"}, {"oid": "10b847394d0d829c4f97dfda08a6b8bf8bf05bbd", "url": "https://github.com/eclipse/eclipse-collections/commit/10b847394d0d829c4f97dfda08a6b8bf8bf05bbd", "message": "Fix withMap params with correct genirics\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-03-10T20:39:17Z", "type": "forcePushed"}, {"oid": "7bf3c42d1b43058c43e7017ba6c62fde85fd9a1e", "url": "https://github.com/eclipse/eclipse-collections/commit/7bf3c42d1b43058c43e7017ba6c62fde85fd9a1e", "message": "Add withMap to MutableMap\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nCheck map nullability and throw IAE when its the case\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nupdate javadoc for MutableMapIterable\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nremove fixedsize and immutable maps & use Eclipse Collection in test\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nUpdate MutableMapIterable.java\n\npull withmap definition to  interface as default method\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nFix withMap params with correct genirics\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-03-20T10:36:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTQ0MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r395729440", "bodyText": "Not accurate. @nikhilnanivadekar added this in 2018.", "author": "motlin", "createdAt": "2020-03-20T15:52:12Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/factory/map/MutableMapFactory.java", "diffHunk": "@@ -72,6 +72,9 @@\n \n     <K, V> MutableMap<K, V> ofMap(Map<? extends K, ? extends V> map);\n \n+    /**\n+     * @since 10.3.0\n+     */", "originalCommit": "7bf3c42d1b43058c43e7017ba6c62fde85fd9a1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2MDgyOA==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r395760828", "bodyText": "My bad! shouldn't be here! fixing it ...", "author": "aboullaite", "createdAt": "2020-03-20T16:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDI4NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r395730285", "bodyText": "this could be this.putAll instead of this.getDelegate().putAll but I'm not sure if that matters", "author": "motlin", "createdAt": "2020-03-20T15:53:28Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/bimap/mutable/SynchronizedBiMap.java", "diffHunk": "@@ -291,6 +292,16 @@ public V forcePut(K key, V value)\n         }\n     }\n \n+    @Override\n+    public MutableBiMap<K, V> withMap(Map<? extends K, ? extends V> map)\n+    {\n+        synchronized (this.lock)\n+        {\n+            this.getDelegate().putAll(map);", "originalCommit": "7bf3c42d1b43058c43e7017ba6c62fde85fd9a1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDY2MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r395730661", "bodyText": "Any reason not to do this.putAll(); return this; ?", "author": "motlin", "createdAt": "2020-03-20T15:53:59Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/mutable/ConcurrentHashMap.java", "diffHunk": "@@ -1979,6 +1979,12 @@ public void zeroOutQueuePosition()\n         return (ConcurrentHashMap<K, V>) super.withKeyValue(key, value);\n     }\n \n+    @Override\n+    public ConcurrentHashMap<K, V> withMap(Map<? extends  K, ? extends V> map)\n+    {\n+        return (ConcurrentHashMap<K, V>) super.withMap(map);", "originalCommit": "7bf3c42d1b43058c43e7017ba6c62fde85fd9a1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1OTM4NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r395759385", "bodyText": "I basically followed the same coding style here for all with* methods! only reason is consistency", "author": "aboullaite", "createdAt": "2020-03-20T16:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MDg0Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r401950843", "bodyText": "@molin Can you take a look at this and review/approve? I took a quick look and didn't see any casts.", "author": "donraab", "createdAt": "2020-04-01T22:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDY2MQ=="}], "type": "inlineReview"}, {"oid": "16bb919f73c1c5195492c9b427db65f03e1f5a00", "url": "https://github.com/eclipse/eclipse-collections/commit/16bb919f73c1c5195492c9b427db65f03e1f5a00", "message": "Add withMap to MutableMap\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nCheck map nullability and throw IAE when its the case\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nupdate javadoc for MutableMapIterable\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nremove fixedsize and immutable maps & use Eclipse Collection in test\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nUpdate MutableMapIterable.java\n\npull withmap definition to  interface as default method\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nFix withMap params with correct genirics\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nremove since from MutalbleMapFactory\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-03-20T17:50:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NTEzMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r403745131", "bodyText": "The javadoc seems wrong. At first I thought this was going to be about a method on mutable/immutable maps. If you're not sure if the method is mutating or not, then the safe thing to do is:\nnewReference = oldReference.possiblyMutatingMethod(args)\n\nThis one is specifically on mutable maps so the guidance doesn't need to be, and should not be followed. If you just delete \"In order to use this method properly\" until the end, I think it's good.", "author": "motlin", "createdAt": "2020-04-05T19:18:37Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -152,6 +152,25 @@ default boolean removeIf(Predicate2<? super K, ? super V> predicate)\n      */\n     MutableMapIterable<K, V> withKeyValue(K key, V value);\n \n+    /**\n+     * This method allows mutable maps the ability to add elements of a Map to their existing\n+     * elements. The original map is modified and then returned. In order to use this method properly with mutable maps\n+     * the following approach must be taken:\n+     * <p>\n+     * <pre>\n+     * map = map.withMap(someMap);\n+     * </pre>", "originalCommit": "16bb919f73c1c5195492c9b427db65f03e1f5a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NjU0MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r403756541", "bodyText": "Roger that!", "author": "aboullaite", "createdAt": "2020-04-05T21:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NTMzNQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r403745335", "bodyText": "Some of the synchronized wrappers call this.putAll and some call this.getDelegate.putAll. I prefer this.putAll, like we see here.", "author": "motlin", "createdAt": "2020-04-05T19:20:35Z", "path": "eclipse-collections/src/main/java/org/eclipse/collections/impl/map/sorted/mutable/SynchronizedSortedMap.java", "diffHunk": "@@ -122,6 +123,16 @@ public SynchronizedSortedMap(MutableSortedMap<K, V> newMap, Object lock)\n         }\n     }\n \n+    @Override\n+    public MutableSortedMap<K, V> withMap(Map<? extends K, ? extends V> map)\n+    {\n+        synchronized (this.lock)\n+        {\n+            this.putAll(map);\n+            return this;", "originalCommit": "16bb919f73c1c5195492c9b427db65f03e1f5a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "31c55d6e90c254b915e66feecd813e15a5919734", "url": "https://github.com/eclipse/eclipse-collections/commit/31c55d6e90c254b915e66feecd813e15a5919734", "message": "Add withMap to MutableMap\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nCheck map nullability and throw IAE when its the case\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nupdate javadoc for MutableMapIterable\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nremove fixedsize and immutable maps & use Eclipse Collection in test\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nUpdate MutableMapIterable.java\n\npull withmap definition to  interface as default method\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nFix withMap params with correct genirics\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nremove since from MutalbleMapFactory\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nfix java doc and unify withmap call in synchronized\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>\n\nfix java doc and unify withmap call in synchronized\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-05T21:40:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5OTM1NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/801#discussion_r407099355", "bodyText": "The wording is confusing to me. I'd suggest something like \"Copies all of the mappings from the specified map to this map and returns this map\" or \"Similar to putAll() but returns this instead of void\"", "author": "motlin", "createdAt": "2020-04-11T19:06:07Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMapIterable.java", "diffHunk": "@@ -152,6 +152,20 @@ default boolean removeIf(Predicate2<? super K, ? super V> predicate)\n      */\n     MutableMapIterable<K, V> withKeyValue(K key, V value);\n \n+    /**\n+     * This method allows mutable maps the ability to add elements of a Map to their existing\n+     * elements. The original map is modified and then returned.", "originalCommit": "31c55d6e90c254b915e66feecd813e15a5919734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "48e1540cb375fa6d9eceed99ee512473424537fd", "url": "https://github.com/eclipse/eclipse-collections/commit/48e1540cb375fa6d9eceed99ee512473424537fd", "message": "Add `withMap()` to MutableMap. Closes #761", "committedDate": "2020-04-11T19:11:09Z", "type": "forcePushed"}, {"oid": "5606b14de14df5202e3e23c50ede88c3f8e07c18", "url": "https://github.com/eclipse/eclipse-collections/commit/5606b14de14df5202e3e23c50ede88c3f8e07c18", "message": "Add `withMap()` to MutableMap. Closes #761\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-11T19:14:50Z", "type": "forcePushed"}, {"oid": "34e5512ae0001cca7fea14da8e5dbb7b52ff2123", "url": "https://github.com/eclipse/eclipse-collections/commit/34e5512ae0001cca7fea14da8e5dbb7b52ff2123", "message": "Add `withMap()` to MutableMap. Closes #761", "committedDate": "2020-04-11T20:02:33Z", "type": "forcePushed"}, {"oid": "cd0912515704e5354b01d20a84547143c09ccdd4", "url": "https://github.com/eclipse/eclipse-collections/commit/cd0912515704e5354b01d20a84547143c09ccdd4", "message": "Add MutableMapIterable overrides in all interfaces that extend it\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-11T20:00:29Z", "type": "forcePushed"}, {"oid": "4776a4b105d21d8c127e6ba6ff2bd389ca8f8457", "url": "https://github.com/eclipse/eclipse-collections/commit/4776a4b105d21d8c127e6ba6ff2bd389ca8f8457", "message": "Add `withMap()` to MutableMap. Closes #761", "committedDate": "2020-04-11T20:28:08Z", "type": "forcePushed"}, {"oid": "ec1b7736f0207de6381e75f6425861540ab59ab8", "url": "https://github.com/eclipse/eclipse-collections/commit/ec1b7736f0207de6381e75f6425861540ab59ab8", "message": "Add `withMap()` to MutableMap. Closes #761\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-11T20:32:44Z", "type": "forcePushed"}, {"oid": "161822b1a93229e594630e9b851a86e92e982094", "url": "https://github.com/eclipse/eclipse-collections/commit/161822b1a93229e594630e9b851a86e92e982094", "message": "Add `withMap()` to MutableMap. Closes #761\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-11T21:08:56Z", "type": "commit"}, {"oid": "161822b1a93229e594630e9b851a86e92e982094", "url": "https://github.com/eclipse/eclipse-collections/commit/161822b1a93229e594630e9b851a86e92e982094", "message": "Add `withMap()` to MutableMap. Closes #761\n\nSigned-off-by: Mohammed Aboullaite <aboullaite.mohammed@gmail.com>", "committedDate": "2020-04-11T21:08:56Z", "type": "forcePushed"}]}