{"pr_number": 431, "pr_title": "Begin migration away from SportPaper APIs", "pr_createdAt": "2020-04-26T21:28:25Z", "pr_url": "https://github.com/PGMDev/PGM/pull/431", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxNTI0MA==", "url": "https://github.com/PGMDev/PGM/pull/431#discussion_r416915240", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nThis code uses '%s' to format int: priority (declared at line 230). This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 241. Consider formatting this data with '%d' instead.", "author": "Electroid", "createdAt": "2020-04-28T20:53:41Z", "path": "core/src/main/java/tc/oc/pgm/PGMConfig.java", "diffHunk": "@@ -0,0 +1,549 @@\n+package tc.oc.pgm;\n+\n+import static tc.oc.pgm.util.text.TextParser.parseBoolean;\n+import static tc.oc.pgm.util.text.TextParser.parseComponent;\n+import static tc.oc.pgm.util.text.TextParser.parseComponentLegacy;\n+import static tc.oc.pgm.util.text.TextParser.parseDuration;\n+import static tc.oc.pgm.util.text.TextParser.parseEnum;\n+import static tc.oc.pgm.util.text.TextParser.parseInteger;\n+import static tc.oc.pgm.util.text.TextParser.parseLogLevel;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import net.kyori.text.Component;\n+import org.bukkit.ChatColor;\n+import org.bukkit.configuration.ConfigurationSection;\n+import org.bukkit.configuration.file.FileConfiguration;\n+import org.bukkit.permissions.Permission;\n+import org.bukkit.permissions.PermissionDefault;\n+import tc.oc.pgm.api.Config;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.Permissions;\n+import tc.oc.pgm.util.bukkit.BukkitUtils;\n+import tc.oc.pgm.util.text.TextException;\n+\n+public final class PGMConfig implements Config {\n+\n+  // log-level\n+  private final Level logLevel;\n+\n+  // database-uri\n+  private final String databaseUri;\n+\n+  // motd\n+  private final String motd;\n+\n+  // map.*\n+  private final List<String> mapSources;\n+  private final String mapPoolFile;\n+\n+  // countdown.*\n+  private final Duration startTime;\n+  private final Duration huddleTime;\n+  private final Duration cycleTime;\n+\n+  // restart.*\n+  private final Duration uptimeLimit;\n+  private final long matchLimit;\n+\n+  // gameplay.*\n+  private final boolean woolRefill;\n+\n+  // join.*\n+  private final long minPlayers;\n+  private final boolean limitJoin;\n+  private final boolean priorityKick;\n+  private final boolean balanceJoin;\n+  private final boolean queueJoin;\n+  private final boolean anytimeJoin;\n+\n+  // ui.*\n+  private final boolean showSideBar;\n+  private final boolean showTabList;\n+  private final boolean showProximity;\n+  private final boolean showFireworks;\n+  private final boolean participantsSeeObservers;\n+\n+  // sidebar.*\n+  private final Component header;\n+  private final Component footer;\n+\n+  // community.*\n+  private final boolean communityMode;\n+\n+  // groups.*\n+  private final List<Group> groups;\n+\n+  // experiments.*\n+  private final Map<String, Object> experiments;\n+\n+  PGMConfig(FileConfiguration config, File dataFolder) throws TextException {\n+    handleLegacyConfig(config, dataFolder);\n+\n+    this.logLevel = parseLogLevel(config.getString(\"log-level\", \"info\"));\n+\n+    this.databaseUri =\n+        config.getString(\n+            \"database-uri\", \"jdbc:sqlite:\" + new File(dataFolder, \"pgm.db\").getAbsolutePath());\n+\n+    final String motd = config.getString(\"motd\");\n+    this.motd = motd == null || motd.isEmpty() ? null : parseComponentLegacy(motd);\n+\n+    this.mapSources = config.getStringList(\"map.sources\");\n+    final String mapPoolFile = config.getString(\"map.pools\");\n+    this.mapPoolFile =\n+        mapPoolFile == null || mapPoolFile.isEmpty()\n+            ? null\n+            : new File(dataFolder, mapPoolFile).getAbsolutePath();\n+\n+    this.startTime = parseDuration(config.getString(\"countdown.start\", \"30s\"));\n+    this.huddleTime = parseDuration(config.getString(\"countdown.huddle\", \"0s\"));\n+    this.cycleTime = parseDuration(config.getString(\"countdown.cycle\", \"30s\"));\n+\n+    this.uptimeLimit = parseDuration(config.getString(\"restart.uptime\", \"1d\"));\n+    this.matchLimit = parseInteger(config.getString(\"restart.match-limit\", \"30\"));\n+\n+    this.woolRefill = parseBoolean(config.getString(\"gameplay.refill-wool\", \"true\"));\n+\n+    this.minPlayers = parseInteger(config.getString(\"join.min-players\", \"1\"));\n+    this.limitJoin = parseBoolean(config.getString(\"join.limit\", \"true\"));\n+    this.priorityKick = parseBoolean(config.getString(\"join.priority-kick\", \"true\"));\n+    this.balanceJoin = parseBoolean(config.getString(\"join.balance\", \"true\"));\n+    this.queueJoin = parseBoolean(config.getString(\"join.queue\", \"false\"));\n+    this.anytimeJoin = parseBoolean(config.getString(\"join.anytime\", \"true\"));\n+\n+    this.showProximity = parseBoolean(config.getString(\"ui.proximity\", \"false\"));\n+    this.showSideBar = parseBoolean(config.getString(\"ui.sidebar\", \"true\"));\n+    this.showTabList = parseBoolean(config.getString(\"ui.tablist\", \"true\"));\n+    this.participantsSeeObservers =\n+        parseBoolean(config.getString(\"ui.participants-see-observers\", \"true\"));\n+    this.showFireworks = parseBoolean(config.getString(\"ui.fireworks\", \"true\"));\n+    final String header = config.getString(\"sidebar.header\");\n+    this.header = header == null || header.isEmpty() ? null : parseComponent(header);\n+    final String footer = config.getString(\"sidebar.footer\");\n+    this.footer = footer == null || footer.isEmpty() ? null : parseComponent(footer);\n+\n+    this.communityMode = parseBoolean(config.getString(\"community.enabled\", \"true\"));\n+\n+    final ConfigurationSection section = config.getConfigurationSection(\"groups\");\n+    this.groups = new ArrayList<>();\n+    if (section != null) {\n+      for (String key : section.getKeys(false)) {\n+        groups.add(new Group(section.getConfigurationSection(key)));\n+      }\n+    }\n+\n+    final ConfigurationSection experiments = config.getConfigurationSection(\"experiments\");\n+    this.experiments = experiments == null ? ImmutableMap.of() : experiments.getValues(false);\n+  }\n+\n+  // TODO: Can be removed after 1.0 release\n+  private static void handleLegacyConfig(FileConfiguration config, File dataFolder) {\n+    // A somewhat hacky way of determining if this config need to be converted\n+    if (config.get(\"arrow-removal\") == null) return;\n+\n+    if (config.getBoolean(\"map-pools.enabled\", true)) {\n+      renameKey(config, \"map-pools.path\", \"map.pools\");\n+    } else {\n+      config.set(\"map.pools\", \"\");\n+    }\n+    config.set(\"map-pools\", null);\n+\n+    if (!config.getBoolean(\"restart.enabled\", true)) {\n+      config.set(\"restart.uptime\", -1);\n+      config.set(\"restart.match-limit\", -1);\n+    }\n+    config.set(\"restart.memory\", null);\n+    config.set(\"restart.enabled\", null);\n+\n+    renameKey(config, \"start.countdown\", \"countdown.start\");\n+    renameKey(config, \"start.huddle\", \"countdown.huddle\");\n+    if (!config.getBoolean(\"start.auto\", true)) {\n+      config.set(\"countdown.start\", -1);\n+    }\n+    config.set(\"start\", null);\n+\n+    renameKey(config, \"cycle.countdown\", \"countdown.cycle\");\n+    if (!config.getBoolean(\"cycle.match-empty.enabled\", true)) {\n+      config.set(\"join.min-players\", 0);\n+    }\n+    config.set(\"cycle\", null);\n+\n+    renameKey(config, \"join.mid-match\", \"join.anytime\");\n+    if (config.getBoolean(\"join.commit-players\", false)\n+        || config.getBoolean(\"teams.require-even\")) {\n+      config.set(\"join.queue\", true);\n+    }\n+    config.set(\"join.commit-players\", null);\n+    renameKey(config, \"join.capacity.enabled\", \"join.limit\");\n+    config.set(\"join.capacity\", null);\n+\n+    renameKey(config, \"teams.try-balance\", \"join.balance\");\n+    renameKey(config, \"minimum-players\", \"join.min-players\");\n+\n+    config.set(\"teams\", null);\n+    config.set(\"broadcast\", null);\n+    config.set(\"arrow-removal\", null);\n+    config.set(\"fishing\", null);\n+\n+    renameKey(config, \"scoreboard.show-proximity\", \"ui.proximity\");\n+    config.set(\"scoreboard\", null);\n+\n+    renameKey(config, \"wool.auto-refill\", \"gameplay.refill-wool\");\n+    config.set(\"wool\", null);\n+\n+    renameKey(config, \"player-list.enabled\", \"ui.tablist\");\n+    config.set(\"player-list\", null);\n+\n+    if (config.getBoolean(\"motd.enabled\", true)) {\n+      final String format =\n+          config\n+              .getString(\"motd.format\")\n+              .replace(\"{state.color}\", \"{2}\")\n+              .replace(\"{map.name}\", \"{1}\")\n+              .replace(\"{map.version}\", \"1.0.0\")\n+              .replace(\"{state.name}\", \"Idle\")\n+              .replace(\"{state.name-lower}\", \"idle\");\n+      config.set(\"motd\", format);\n+    } else {\n+      config.set(\"motd\", \"\");\n+    }\n+\n+    // priority:id:prefix\n+    final List<String> groups = new ArrayList<>();\n+\n+    final ConfigurationSection section = config.getConfigurationSection(\"groups\");\n+    if (section != null) {\n+      for (String key : section.getKeys(false)) {\n+        final String id = section.getBoolean(key + \".op\", false) ? \"op\" : key;\n+        final int priority = section.getInt(key + \".priority\", Integer.MAX_VALUE);\n+        String prefix = null;\n+        try {\n+          prefix =\n+              \"&\"\n+                  + parseEnum(section.getString(key + \".prefix.color\"), ChatColor.class).getChar()\n+                  + section.getString(key + \".prefix.symbol\");\n+        } catch (TextException | NullPointerException e) {\n+          // No-op\n+        }\n+\n+        groups.add(String.format(\"%s|%s|%s\", priority, id, prefix == null ? \"\" : prefix));", "originalCommit": "4d10bcb1a2aaf19972e892ef537a4f5accdbf601", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxNTI0NA==", "url": "https://github.com/PGMDev/PGM/pull/431#discussion_r416915244", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\nFix\nConsider closing the following resource: connection. Currently, there are execution paths that do not contain closure statements, e.g., when exception is thrown by Connection.setAutoCommit. Either a) close connection in a try-finally block or b) close the resource by declaring connection in a try-with-resources block.\nMore info\nView resource management guidelines at oracle.com (external link).", "author": "Electroid", "createdAt": "2020-04-28T20:53:41Z", "path": "core/src/main/java/tc/oc/pgm/db/DatastoreImpl.java", "diffHunk": "@@ -40,8 +39,7 @@ public DatastoreImpl(File file) throws SQLException {\n           \"Could not find SQLite3 driver class (likely due to a jar shading issue)\", e);\n     }\n \n-    final Connection connection =\n-        DriverManager.getConnection(\"jdbc:sqlite:\" + file.getAbsolutePath());\n+    final Connection connection = DriverManager.getConnection(uri);", "originalCommit": "4d10bcb1a2aaf19972e892ef537a4f5accdbf601", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNDI0OQ==", "url": "https://github.com/PGMDev/PGM/pull/431#discussion_r417634249", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem\nThis line of code contains a resource that might not be closed properly. Resource leaks can cause your system to slow down or crash.\nFix\nConsider closing the following resource: connection. The resource is referenced in statements at the following line: 64. The resource is returned at line: 66. There are other execution paths that neither close the resource nor return it, e.g., when exception is thrown by Connection.setAutoCommit. To prevent this resource leak, close connection along these other paths before you exit this method.\nMore info\nView resource management guidelines at oracle.com (external link).", "author": "Electroid", "createdAt": "2020-04-29T21:51:42Z", "path": "core/src/main/java/tc/oc/pgm/db/SQLDatastore.java", "diffHunk": "@@ -0,0 +1,307 @@\n+package tc.oc.pgm.db;\n+\n+import static tc.oc.pgm.db.SettingsImpl.bitSettings;\n+\n+import java.io.File;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import tc.oc.pgm.api.Datastore;\n+import tc.oc.pgm.api.PGM;\n+import tc.oc.pgm.api.map.MapActivity;\n+import tc.oc.pgm.api.player.Username;\n+import tc.oc.pgm.api.setting.SettingKey;\n+import tc.oc.pgm.api.setting.SettingValue;\n+import tc.oc.pgm.api.setting.Settings;\n+import tc.oc.pgm.util.ClassLogger;\n+\n+public class SQLDatastore implements Datastore {\n+\n+  private final Logger logger;\n+  private final Connection connection;\n+  private final ExecutorService executorService;\n+\n+  public SQLDatastore(@Nullable String uri, ExecutorService executorService) throws SQLException {\n+    this.logger = ClassLogger.get(PGM.get().getLogger(), getClass());\n+    this.executorService = executorService;\n+    this.connection = getConnection(uri);\n+\n+    initUsername();\n+    initSettings();\n+    initMapActivity();\n+  }\n+\n+  private static Connection getConnection(@Nullable String uri) throws SQLException {\n+    if (uri == null || uri.isEmpty()) {\n+      uri = \"sqlite:\" + new File(PGM.get().getDataFolder(), \"pgm.db\").getAbsolutePath();\n+    }\n+\n+    if (!uri.startsWith(\"jdbc:\")) {\n+      uri = \"jdbc:\" + uri;\n+    }\n+\n+    try {\n+      if (uri.startsWith(\"jdbc:sqlite\")) {\n+        Class.forName(\"org.sqlite.JDBC\");\n+      } else if (uri.startsWith(\"jdbc:mysql\")) {\n+        Class.forName(\"com.mysql.jdbc.Driver\");\n+      }\n+    } catch (ClassNotFoundException e) {\n+      throw new SQLException(\n+          \"Unable to load database driver class (your server likely does not support your database)\");\n+    }\n+\n+    final Connection connection = DriverManager.getConnection(uri);", "originalCommit": "51e42529289c7803b9269e4888a7520b398f0d3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9687a53531c82583767cb6d53e01c90538870ef", "url": "https://github.com/PGMDev/PGM/commit/a9687a53531c82583767cb6d53e01c90538870ef", "message": "Merge with other translations refactor\n\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>", "committedDate": "2020-05-01T18:14:24Z", "type": "forcePushed"}, {"oid": "693b60f9a103883b761d1ab3505f684a4ca5e440", "url": "https://github.com/PGMDev/PGM/commit/693b60f9a103883b761d1ab3505f684a4ca5e440", "message": "Begin migration away from SportPaper APIs\n* Introduce text utilities, removes the old translation code\n* Revamp the config, allow for community features to be disabled\n* Add support for MySQL and related databases\n* Allow observer and participant permissions to be changed\n* Improve pre-match loading, also fixed a tab list glitch\n* Add support for /join queues\n* Remove various NMS hacks and methods\n\nCo-authored-by: KingOfSquares <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>", "committedDate": "2020-05-01T21:26:18Z", "type": "commit"}, {"oid": "693b60f9a103883b761d1ab3505f684a4ca5e440", "url": "https://github.com/PGMDev/PGM/commit/693b60f9a103883b761d1ab3505f684a4ca5e440", "message": "Begin migration away from SportPaper APIs\n* Introduce text utilities, removes the old translation code\n* Revamp the config, allow for community features to be disabled\n* Add support for MySQL and related databases\n* Allow observer and participant permissions to be changed\n* Improve pre-match loading, also fixed a tab list glitch\n* Add support for /join queues\n* Remove various NMS hacks and methods\n\nCo-authored-by: KingOfSquares <simonmorland@gmail.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>", "committedDate": "2020-05-01T21:26:18Z", "type": "forcePushed"}, {"oid": "66fd3877e876f47d4e2e890ae537b27784dacf08", "url": "https://github.com/PGMDev/PGM/commit/66fd3877e876f47d4e2e890ae537b27784dacf08", "message": "Add /vanish for staff\n\nCo-authored-by: applenick <applenick@users.noreply.github.com>\nSigned-off-by: Ashcon Partovi <ashcon@partovi.net>", "committedDate": "2020-05-01T22:20:38Z", "type": "commit"}]}