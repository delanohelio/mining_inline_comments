{"pr_number": 2977, "pr_title": "Migrate to Armeria 0.98.2", "pr_createdAt": "2020-02-13T08:00:24Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/2977", "timeline": [{"oid": "30c7de31f8793cda7d9d3398ca20557df8248a9b", "url": "https://github.com/openzipkin/zipkin/commit/30c7de31f8793cda7d9d3398ca20557df8248a9b", "message": "Migrate to Armeria 0.98.1", "committedDate": "2020-02-13T07:59:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA4MQ==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378701081", "bodyText": "I might be missing some subtlety that required using the old version of the code with its own timings instead of Armeria's, let me know.", "author": "anuraaga", "createdAt": "2020-02-13T08:01:32Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java", "diffHunk": "@@ -129,23 +128,13 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n     AttributeKey.valueOf(Boolean.class, \"PROMETHEUS_METRICS_SET\");\n \n   public static void setup(RequestContext ctx, MeterRegistry registry, String metricName) {\n-    if (ctx.hasAttr(PROMETHEUS_METRICS_SET)) {\n+    if (ctx.attr(PROMETHEUS_METRICS_SET) == null) {\n       return;\n     }\n-    ctx.attr(PROMETHEUS_METRICS_SET).set(true);\n+    ctx.setAttr(PROMETHEUS_METRICS_SET, true);\n \n-    ctx.log().addListener(log -> onRequest(log, registry, metricName),\n-      RequestLogAvailability.REQUEST_HEADERS,\n-      RequestLogAvailability.REQUEST_CONTENT);\n-  }\n-\n-  private static void onRequest(RequestLog log, MeterRegistry registry, String metricName) {\n-    Clock clock = registry.config().clock();\n-    long startTime = clock.monotonicTime();\n-    log.addListener(requestLog -> {\n-      getTimeBuilder(requestLog, metricName).register(registry)\n-        .record(clock.monotonicTime() - startTime, TimeUnit.NANOSECONDS);\n-    }, RequestLogAvailability.COMPLETE);\n+    ctx.log().whenComplete().thenAccept(log -> getTimeBuilder(log, metricName).register(registry)\n+      .record(log.totalDurationNanos(), TimeUnit.NANOSECONDS));", "originalCommit": "30c7de31f8793cda7d9d3398ca20557df8248a9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNzE0OA==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378917148", "bodyText": "main thing is to keep our Prometheus stable so folks using grafana dont wake up to have their graphs broken. I will look carefully though", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNDIzNA==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378934234", "bodyText": "what you've done is fine. As long as the metric name/dimension matches, it is better to reuse armeria's duration because we don't do much besides invoke a controller anyway.", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NjgxNw==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378756817", "bodyText": "nit: Could use server.activeLocalPort()?\nhttps://github.com/line/armeria/blob/9061e241961c806951dd855be65fd871131a1835/core/src/main/java/com/linecorp/armeria/server/Server.java#L185-L193", "author": "ikhoon", "createdAt": "2020-02-13T09:56:43Z", "path": "zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServer.java", "diffHunk": "@@ -246,7 +246,7 @@ private Response get(String path) throws IOException {\n   }\n \n   public static String url(Server server, String path) {\n-    return \"http://localhost:\" + server.activePort().get().localAddress().getPort() + path;\n+    return \"http://localhost:\" + server.activePort().localAddress().getPort() + path;", "originalCommit": "30c7de31f8793cda7d9d3398ca20557df8248a9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd", "url": "https://github.com/openzipkin/zipkin/commit/faa794ed76144fd07aefa942decf0926e621b5dd", "message": "Exclamation", "committedDate": "2020-02-13T15:20:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMjMyOA==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378932328", "bodyText": "nice", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:27:53Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java", "diffHunk": "@@ -86,7 +73,7 @@ Endpoint getEndpoint() {\n       //\n       // We are blocking up to the connection timeout which should be enough time for any DNS\n       // resolution that hasn't happened yet to finish.\n-      empty = result.awaitInitialEndpoints(timeoutMillis, TimeUnit.MILLISECONDS).isEmpty();\n+      empty = result.whenReady().get().isEmpty();", "originalCommit": "faa794ed76144fd07aefa942decf0926e621b5dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMzEwOQ==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378933109", "bodyText": "agree", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:28:56Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java", "diffHunk": "@@ -33,28 +34,28 @@\n import zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.HttpLogging;\n \n // Exposed as a bean so that zipkin-aws can use this for api requests to get initial endpoints.\n-public class HttpClientFactory implements Function<Endpoint, WebClient>, Closeable {\n+public class HttpClientFactory implements Function<EndpointGroup, WebClient>, Closeable {\n   final SessionProtocol protocol;\n   final ClientOptions options;\n-  final ClientFactory delegate;\n+  final ClientFactory clientFactory;\n   final int timeout;\n   final List<Consumer<ClientOptionsBuilder>> customizers;\n \n   HttpClientFactory(ZipkinElasticsearchStorageProperties es, ClientFactory factory,\n     SessionProtocol protocol, List<Consumer<ClientOptionsBuilder>> customizers\n   ) {\n-    this.delegate = factory;\n+    this.clientFactory = factory;", "originalCommit": "faa794ed76144fd07aefa942decf0926e621b5dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMzU4MA==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378933580", "bodyText": "this is curious.. partial?", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:29:37Z", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -150,9 +151,13 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n \n     return client -> {\n       client.decorator((delegate, ctx, req) -> {\n-        String name = ctx.attr(HttpCall.NAME).get();\n-        if (name != null) { // override the span name if set\n-          spanCustomizer.name(name);\n+        RequestLogAccess log = ctx.log();\n+        if (log.isAvailable(RequestLogProperty.NAME)) {\n+          String name = log.partial().name();", "originalCommit": "faa794ed76144fd07aefa942decf0926e621b5dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3NDk1MQ==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r379274951", "bodyText": "Added a comment maybe it helps", "author": "anuraaga", "createdAt": "2020-02-14T06:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMzU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTEyMg==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378935122", "bodyText": "cool", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:31:55Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java", "diffHunk": "@@ -212,7 +211,8 @@ public Factory(WebClient httpClient) {\n \n   CompletableFuture<AggregatedHttpResponse> sendRequest() {\n     final HttpResponse response;\n-    try (SafeCloseable ignored = Clients.withContextCustomizer(ctx -> ctx.attr(NAME).set(name))) {\n+    try (SafeCloseable ignored =\n+           Clients.withContextCustomizer(ctx -> ctx.logBuilder().name(name))) {", "originalCommit": "faa794ed76144fd07aefa942decf0926e621b5dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTI3OQ==", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378935279", "bodyText": "handy", "author": "codefromthecrypt", "createdAt": "2020-02-13T15:32:10Z", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java", "diffHunk": "@@ -223,16 +222,15 @@\n     AtomicReference<RequestLog> log = new AtomicReference<>();\n     http = new HttpCall.Factory(WebClient.builder(server.httpUri(\"/\"))\n       .decorator((client, ctx, req) -> {\n-        ctx.log().addListener(log::set, RequestLogAvailability.COMPLETE);\n+        ctx.log().whenComplete().thenAccept(log::set);", "originalCommit": "faa794ed76144fd07aefa942decf0926e621b5dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5792c6f34e02e46a1f45a95c4a25d7b1db53758b", "url": "https://github.com/openzipkin/zipkin/commit/5792c6f34e02e46a1f45a95c4a25d7b1db53758b", "message": "Scrubs", "committedDate": "2020-02-14T06:56:46Z", "type": "commit"}, {"oid": "24dc67d1738916a524aa8627794c0d1b54b39237", "url": "https://github.com/openzipkin/zipkin/commit/24dc67d1738916a524aa8627794c0d1b54b39237", "message": "Remove RawContentLogger", "committedDate": "2020-02-14T07:09:40Z", "type": "commit"}, {"oid": "b46c1e4398a15ca73d67bad02ef3b948291fc71f", "url": "https://github.com/openzipkin/zipkin/commit/b46c1e4398a15ca73d67bad02ef3b948291fc71f", "message": "Workaround https://github.com/line/armeria/issues/2493", "committedDate": "2020-02-14T07:33:14Z", "type": "commit"}, {"oid": "737e329e78f428f6519629eec36491927e7c700d", "url": "https://github.com/openzipkin/zipkin/commit/737e329e78f428f6519629eec36491927e7c700d", "message": "Different exception", "committedDate": "2020-02-15T05:47:01Z", "type": "commit"}, {"oid": "a29a6e92acbd28adf3df12e51c7cbf8cac3544ca", "url": "https://github.com/openzipkin/zipkin/commit/a29a6e92acbd28adf3df12e51c7cbf8cac3544ca", "message": "0.98.2 and fixes", "committedDate": "2020-02-18T08:11:42Z", "type": "commit"}, {"oid": "00c5c8b6e889d53a0c7b2115c6914bf97089fd71", "url": "https://github.com/openzipkin/zipkin/commit/00c5c8b6e889d53a0c7b2115c6914bf97089fd71", "message": "Man", "committedDate": "2020-02-18T08:54:34Z", "type": "commit"}, {"oid": "2be14eb31339015212892bdbefb92e847314a098", "url": "https://github.com/openzipkin/zipkin/commit/2be14eb31339015212892bdbefb92e847314a098", "message": "Nice test", "committedDate": "2020-02-21T04:39:35Z", "type": "commit"}]}