{"pr_number": 3174, "pr_title": "Created CondMatches.java", "pr_createdAt": "2020-07-19T20:38:05Z", "pr_url": "https://github.com/SkriptLang/Skript/pull/3174", "timeline": [{"oid": "df47115e27f99eff87cb315e80fe5224a81901e3", "url": "https://github.com/SkriptLang/Skript/commit/df47115e27f99eff87cb315e80fe5224a81901e3", "message": "Create CondMatches.java", "committedDate": "2020-07-19T20:35:05Z", "type": "commit"}, {"oid": "1aed4b343e9bd45b1979069aa343eeb9dc837de8", "url": "https://github.com/SkriptLang/Skript/commit/1aed4b343e9bd45b1979069aa343eeb9dc837de8", "message": "As usual I forgot the skript copyright comment", "committedDate": "2020-07-19T20:38:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzQwOA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456953408", "bodyText": "Maybe rename these fields? string and regex for example \ud83d\ude03", "author": "APickledWalrus", "createdAt": "2020-07-19T20:43:33Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% match[es] %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> text1;", "originalCommit": "1aed4b343e9bd45b1979069aa343eeb9dc837de8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDU5Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456954592", "bodyText": "\ud83d\udc4d", "author": "DeltaRays", "createdAt": "2020-07-19T20:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY0MA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456953640", "bodyText": "I think you can just use Expression#getArray here. The returned arrays won't be null, but they may be empty.", "author": "APickledWalrus", "createdAt": "2020-07-19T20:45:38Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% match[es] %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> text1;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> text2;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, SkriptParser.ParseResult parseResult) {\n+\t\ttext1 = (Expression<String>) exprs[0];\n+\t\ttext2 = (Expression<String>) exprs[1];\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt1 = text1.getAll(e);", "originalCommit": "1aed4b343e9bd45b1979069aa343eeb9dc837de8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDU1Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456954552", "bodyText": "\ud83d\udc4d  okay", "author": "DeltaRays", "createdAt": "2020-07-19T20:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDU4OA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456954588", "bodyText": "Will do, thanks", "author": "DeltaRays", "createdAt": "2020-07-19T20:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgyMA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456953820", "bodyText": "I would make using matches required. Using just match sound weird to me. Are there any situations where using match would be better though?", "author": "APickledWalrus", "createdAt": "2020-07-19T20:47:47Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% match[es] %strings%\");", "originalCommit": "1aed4b343e9bd45b1979069aa343eeb9dc837de8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDU3NA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456954574", "bodyText": "Yeah, in %strings% match %string%", "author": "DeltaRays", "createdAt": "2020-07-19T20:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTM0Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456955342", "bodyText": "Even with single strings, you should still use matches, no?\nSee this example:\nif \"123456 HELLO\" match \"\\d\": vs if \"123456 HELLO\" matches \"\\d\":", "author": "APickledWalrus", "createdAt": "2020-07-19T21:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1ODE0Mw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456958143", "bodyText": "Yeah but %strings% means multiple ones\n\"hello\" and \"hey\" match \"\\d+\"", "author": "DeltaRays", "createdAt": "2020-07-19T21:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1ODk1NA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r456958954", "bodyText": "Woops! I read your original message as %string% match %string%, not %strings% match %string%\nSorry lol", "author": "APickledWalrus", "createdAt": "2020-07-19T21:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgyMA=="}], "type": "inlineReview"}, {"oid": "ced82d1cd1d85d5190ef072d0bd8ca42e33d2c9f", "url": "https://github.com/SkriptLang/Skript/commit/ced82d1cd1d85d5190ef072d0bd8ca42e33d2c9f", "message": "Update CondMatches.java", "committedDate": "2020-07-19T20:56:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NzA2Nw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r457087067", "bodyText": "Shouldn't this be Pattern[] patterns?", "author": "Wealthyturtle", "createdAt": "2020-07-20T06:16:10Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ *   This file is part of Skript.\n+ *\n+ *  Skript is free software: you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n+ *\n+ *  Skript is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License\n+ *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% match[es] %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, SkriptParser.ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt1 = strings.getArray(e);\n+\t\tString[] txt2 = regex.getArray(e);\n+\t\tif (txt1.length < 1 || txt2.length < 1) return false;\n+\t\tObject[] patterns = Arrays.stream(txt2)", "originalCommit": "ced82d1cd1d85d5190ef072d0bd8ca42e33d2c9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MTEwNQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r457141105", "bodyText": "Yeah but apparently Object[] can't be cast to Pattern[] and I haven't found anything that returns an array of patterns from the Stream", "author": "DeltaRays", "createdAt": "2020-07-20T07:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NzA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI4ODA0OQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r457288049", "bodyText": "See https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-", "author": "TPGamesNL", "createdAt": "2020-07-20T11:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NzA2Nw=="}], "type": "inlineReview"}, {"oid": "12f5edb280013a5ae9ba6c646e79aae217b2fa14", "url": "https://github.com/SkriptLang/Skript/commit/12f5edb280013a5ae9ba6c646e79aae217b2fa14", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-20T07:45:39Z", "type": "commit"}, {"oid": "650a3d20cc1ede9cb901eac94cd29b917411fd32", "url": "https://github.com/SkriptLang/Skript/commit/650a3d20cc1ede9cb901eac94cd29b917411fd32", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-20T10:35:55Z", "type": "commit"}, {"oid": "d706611abcb14cc1ffd2fea741fbf48567e59f9a", "url": "https://github.com/SkriptLang/Skript/commit/d706611abcb14cc1ffd2fea741fbf48567e59f9a", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-20T21:50:31Z", "type": "commit"}, {"oid": "25598fa919590fe5cc0d23c8b851f8398b640a84", "url": "https://github.com/SkriptLang/Skript/commit/25598fa919590fe5cc0d23c8b851f8398b640a84", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-22T07:06:35Z", "type": "commit"}, {"oid": "801fae2b51d1c83416f9abcd292fb93fc35ffb8e", "url": "https://github.com/SkriptLang/Skript/commit/801fae2b51d1c83416f9abcd292fb93fc35ffb8e", "message": "Added negation to the condition (doesn't match), removed an unnecessary array and added tests", "committedDate": "2020-07-22T07:44:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTAwNA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458625004", "bodyText": "Are you sure you want to use Matcher#find() here and not Matcher#matches()?\nAlso, you're using allMatch for both of these, but I think that should be dependant on whether it's an and list or an or list (see https://github.com/SkriptLang/Skript/blob/master/src/main/java/ch/njol/skript/lang/Expression.java#L76)", "author": "TPGamesNL", "createdAt": "2020-07-22T08:29:24Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% (1\u00a6match[es]|2\u00a6does(n't| not) match) %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, SkriptParser.ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt1 = strings.getArray(e);\n+\t\tString[] patterns = regex.getArray(e);\n+\t\tif (txt1.length < 1 || patterns.length < 1) return false;\n+\t\treturn Arrays.stream(txt1)\n+\t\t\t.allMatch((str) -> Arrays.stream(patterns)\n+\t\t\t\t.allMatch((pattern) -> (Pattern.compile(pattern).matcher(str).find()))) == isNegated();", "originalCommit": "801fae2b51d1c83416f9abcd292fb93fc35ffb8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5OTE5Ng==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458699196", "bodyText": "Yeah, I already asked in the skript-chat discord server whether or not skript would automatically do something based on whether or not and or 'or' were used, and since nobody answered I didn't know", "author": "DeltaRays", "createdAt": "2020-07-22T10:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5OTI4Nw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458699287", "bodyText": "Thanks", "author": "DeltaRays", "createdAt": "2020-07-22T10:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwOTk0OQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458709949", "bodyText": "Also I wanted to use Matcher.find() because .matches() matches the entire string and I don't want it to have to match that. Users can just use ^ and $ to match the beginning and end", "author": "DeltaRays", "createdAt": "2020-07-22T11:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxMzA0NQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458713045", "bodyText": "Also I wanted to use Matcher.find() because .matches() matches the entire string and I don't want it to have to match that. Users can just use ^ and $ to match the beginning and end\n\nIn that case you should probably think about the syntax again, because %string% matches %string% implies that one string matches some regex pattern, AKA the whole string matches some regex pattern, not a part of the given string (%string% partially matches %string% maybe, and if you're going for something like that, you should make partially optional to either match the full string or part of it)", "author": "TPGamesNL", "createdAt": "2020-07-22T11:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyOTE2NQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458629165", "bodyText": "Pattern compilation can be computationally expensive... does this compile all the pattern strings once only? Or does it do a compilation every comparison?", "author": "Wealthyturtle", "createdAt": "2020-07-22T08:36:16Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% (1\u00a6match[es]|2\u00a6does(n't| not) match) %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, SkriptParser.ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt1 = strings.getArray(e);\n+\t\tString[] patterns = regex.getArray(e);\n+\t\tif (txt1.length < 1 || patterns.length < 1) return false;\n+\t\treturn Arrays.stream(txt1)\n+\t\t\t.allMatch((str) -> Arrays.stream(patterns)\n+\t\t\t\t.allMatch((pattern) -> (Pattern.compile(pattern).matcher(str).find()))) == isNegated();", "originalCommit": "801fae2b51d1c83416f9abcd292fb93fc35ffb8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5NTg4MA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458695880", "bodyText": "I'll run a few tests", "author": "DeltaRays", "createdAt": "2020-07-22T10:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyOTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MDI0NA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458760244", "bodyText": "Yeah, the new method will be better", "author": "DeltaRays", "createdAt": "2020-07-22T12:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyOTE2NQ=="}], "type": "inlineReview"}, {"oid": "bf5da05b9259057aabbcd4abcadf473a2a76ca8b", "url": "https://github.com/SkriptLang/Skript/commit/bf5da05b9259057aabbcd4abcadf473a2a76ca8b", "message": "Improved the system to make it more efficient and to make it support 'or' in both the strings to check and in the regexes to check. I also added a few other tests for 'or' and 'and', and for negative conditions (don't match, doesn't match, etc.)", "committedDate": "2020-07-22T12:37:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4ODQ4Mw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458788483", "bodyText": "Full stop here", "author": "Wealthyturtle", "createdAt": "2020-07-22T13:24:36Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions\")", "originalCommit": "bf5da05b9259057aabbcd4abcadf473a2a76ca8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db30cc1315399e54c3d2df5a02f4fb74047cdba0", "url": "https://github.com/SkriptLang/Skript/commit/db30cc1315399e54c3d2df5a02f4fb74047cdba0", "message": "Added a dot at the end of the description", "committedDate": "2020-07-22T13:41:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODU1Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r458978552", "bodyText": "What's the rationale behind using a parallel stream here?", "author": "chatasma", "createdAt": "2020-07-22T17:56:12Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions.\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% (1\u00a6match[es]|2\u00a6do[es](n't| not) match) %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt = strings.getAll(e);\n+\t\tString[] regexes = regex.getAll(e);\n+\t\tif (txt.length < 1 || regexes.length < 1) return false;\n+\t\tboolean result;\n+\t\tboolean stringAnd = strings.getAnd();\n+\t\tboolean regexAnd = regex.getAnd();\n+\t\tif (stringAnd) {\n+\t\t\tif (regexAnd) {\n+\t\t\t\tresult = Arrays.stream(txt).parallel().allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> pattern.matcher(str).find())));", "originalCommit": "db30cc1315399e54c3d2df5a02f4fb74047cdba0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyMjI4Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r459022282", "bodyText": "It's not that needed in this case but parallel streams are faster than sequential ones in general, as they run tasks on different threads", "author": "DeltaRays", "createdAt": "2020-07-22T19:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNzY0MA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r459027640", "bodyText": "i'm not sure that it's worth it", "author": "Pikachu920", "createdAt": "2020-07-22T19:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTY3Mw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r459035673", "bodyText": "Yeah, I don't know whether or not it is", "author": "DeltaRays", "createdAt": "2020-07-22T19:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODU1Mg=="}], "type": "inlineReview"}, {"oid": "66e6e7ca14be116c52d2dc693a951d86ab8fc96a", "url": "https://github.com/SkriptLang/Skript/commit/66e6e7ca14be116c52d2dc693a951d86ab8fc96a", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-22T19:09:53Z", "type": "commit"}, {"oid": "303534809f80872a72b0299d284978e871f14a29", "url": "https://github.com/SkriptLang/Skript/commit/303534809f80872a72b0299d284978e871f14a29", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-23T07:04:14Z", "type": "commit"}, {"oid": "dc6e8f185fbf88b3cc3ab7c9217b4ceddc1da8f8", "url": "https://github.com/SkriptLang/Skript/commit/dc6e8f185fbf88b3cc3ab7c9217b4ceddc1da8f8", "message": "Removed .parallel()", "committedDate": "2020-07-23T07:25:15Z", "type": "commit"}, {"oid": "515f3cea28d7c7c5bba28dbc6041bbaed9cfe96a", "url": "https://github.com/SkriptLang/Skript/commit/515f3cea28d7c7c5bba28dbc6041bbaed9cfe96a", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-24T07:44:31Z", "type": "commit"}, {"oid": "d4ab998ebb494ac62cd0947a0e995c9ce4583fb9", "url": "https://github.com/SkriptLang/Skript/commit/d4ab998ebb494ac62cd0947a0e995c9ce4583fb9", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-24T15:02:35Z", "type": "commit"}, {"oid": "9783860bd3e70e8b825e22dd5b857af5639c4a60", "url": "https://github.com/SkriptLang/Skript/commit/9783860bd3e70e8b825e22dd5b857af5639c4a60", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-26T09:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NDYxNg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r463264616", "bodyText": "IMO, you should just surround matches and doesn't match, but that's more of my formatting opinion", "author": "APickledWalrus", "createdAt": "2020-07-30T20:53:04Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions.\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% (1\u00a6match[es]|2\u00a6do[es](n't| not) match) %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt = strings.getAll(e);\n+\t\tString[] regexes = regex.getAll(e);\n+\t\tif (txt.length < 1 || regexes.length < 1) return false;\n+\t\tboolean result;\n+\t\tboolean stringAnd = strings.getAnd();\n+\t\tboolean regexAnd = regex.getAnd();\n+\t\tif (stringAnd) {\n+\t\t\tif (regexAnd) {\n+\t\t\t\tresult = Arrays.stream(txt).allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> pattern.matcher(str).find())));\n+\t\t\t} else {\n+\t\t\t\tresult = Arrays.stream(txt).allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).anyMatch((pattern -> pattern.matcher(str).find())));\n+\t\t\t}\n+\t\t} else if (regexAnd) {\n+\t\t\tresult = Arrays.stream(txt).anyMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> pattern.matcher(str).find())));\n+\t\t} else {\n+\t\t\tresult = Arrays.stream(txt).anyMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).anyMatch((pattern -> pattern.matcher(str).find())));\n+\t\t\t\n+\t\t}\n+\t\treturn result == isNegated();\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString(@Nullable Event e, boolean debug) {\n+\t\treturn strings.toString(e, debug) + \" \" + (isNegated() ? \"matches\" : \"doesn't match\") + \" \" + regex.toString(e, debug);", "originalCommit": "9783860bd3e70e8b825e22dd5b857af5639c4a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTgzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r463551838", "bodyText": "What do you mean?", "author": "DeltaRays", "createdAt": "2020-07-31T11:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NDYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4OTYxNg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r463589616", "bodyText": "Oh, it was a nitpicky comment, I just meant to do \" matches \" and \" doesn\u2019t \" instead of the + \" \", but looking at it now I don\u2019t think it really matters", "author": "APickledWalrus", "createdAt": "2020-07-31T12:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NDYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NDc3Mw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r463264773", "bodyText": "Whitespace \ud83d\ude28", "author": "APickledWalrus", "createdAt": "2020-07-30T20:53:23Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions.\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class, \"%strings% (1\u00a6match[es]|2\u00a6do[es](n't| not) match) %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt = strings.getAll(e);\n+\t\tString[] regexes = regex.getAll(e);\n+\t\tif (txt.length < 1 || regexes.length < 1) return false;\n+\t\tboolean result;\n+\t\tboolean stringAnd = strings.getAnd();\n+\t\tboolean regexAnd = regex.getAnd();\n+\t\tif (stringAnd) {\n+\t\t\tif (regexAnd) {\n+\t\t\t\tresult = Arrays.stream(txt).allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> pattern.matcher(str).find())));\n+\t\t\t} else {\n+\t\t\t\tresult = Arrays.stream(txt).allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).anyMatch((pattern -> pattern.matcher(str).find())));\n+\t\t\t}\n+\t\t} else if (regexAnd) {\n+\t\t\tresult = Arrays.stream(txt).anyMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> pattern.matcher(str).find())));\n+\t\t} else {\n+\t\t\tresult = Arrays.stream(txt).anyMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).anyMatch((pattern -> pattern.matcher(str).find())));\n+\t\t\t", "originalCommit": "9783860bd3e70e8b825e22dd5b857af5639c4a60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "20796acace7db480f553eb8e810e7d2940674b3f", "url": "https://github.com/SkriptLang/Skript/commit/20796acace7db480f553eb8e810e7d2940674b3f", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-07-31T11:15:05Z", "type": "commit"}, {"oid": "784e939527c0b0d8beeda4b869f8bee30a8b3cda", "url": "https://github.com/SkriptLang/Skript/commit/784e939527c0b0d8beeda4b869f8bee30a8b3cda", "message": "Removed an empty line", "committedDate": "2020-07-31T11:16:48Z", "type": "commit"}, {"oid": "6e93c09f5a9e3c58200ac639ed4eefdd79f85a7f", "url": "https://github.com/SkriptLang/Skript/commit/6e93c09f5a9e3c58200ac639ed4eefdd79f85a7f", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-08-02T16:25:06Z", "type": "commit"}, {"oid": "b0e3bb645d0f0798c60448b8e4ddbce0e5abf772", "url": "https://github.com/SkriptLang/Skript/commit/b0e3bb645d0f0798c60448b8e4ddbce0e5abf772", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-09-08T18:53:52Z", "type": "commit"}, {"oid": "5ea9ec665bb8c4e598ee77b611d17d7351b67f54", "url": "https://github.com/SkriptLang/Skript/commit/5ea9ec665bb8c4e598ee77b611d17d7351b67f54", "message": "Made it so you can partially match strings and added more tests", "committedDate": "2020-09-26T11:41:19Z", "type": "commit"}, {"oid": "08f7a3509e4c154ea733fd8c7e6a451fb8e2c8db", "url": "https://github.com/SkriptLang/Skript/commit/08f7a3509e4c154ea733fd8c7e6a451fb8e2c8db", "message": "Merge branch 'master' into CondMatches", "committedDate": "2020-09-26T11:44:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjI2NA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r497072264", "bodyText": "In my opinion, I feel this description is quite lacklustre.\nI know that you have regex matching available here, but there is absolutely no mention of it. I recommend updating the description to give more detail on what this condition actually does.", "author": "ShaneBeee", "createdAt": "2020-09-29T21:31:18Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Test whether strings match defined regular expressions.\")", "originalCommit": "08f7a3509e4c154ea733fd8c7e6a451fb8e2c8db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1NjYzNw==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r497256637", "bodyText": "It mentioned regular expressions though, do you mean explaining what regex is? If so the description would need to be way longer, and some people learn by reading the docs, others by watching YouTube tutorials, so doing that wouldn\u2019t really be helpful, at most what could be done would be to link a few resources", "author": "DeltaRays", "createdAt": "2020-09-30T05:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTc4MA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r499281780", "bodyText": "No, regex doesn't need to be explained, but it isn't mentioned at all. If someone where to open the docs and search for \"regex\", they're not going to find anything, since its not mentioned here.", "author": "ShaneBeee", "createdAt": "2020-10-04T19:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU0OTg4NQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r499549885", "bodyText": "But regular expression and regex mean the same thing", "author": "DeltaRays", "createdAt": "2020-10-05T12:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NzI3OA==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r499857278", "bodyText": "Not everyone knows that.... again, as I've said, if someone SEARCHES the word \"regex\" they aren't going to find any results.", "author": "ShaneBeee", "createdAt": "2020-10-05T20:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3MjI2NA=="}], "type": "inlineReview"}, {"oid": "da1edc27a7ceab70a3a81529aef33637c23cc9c3", "url": "https://github.com/SkriptLang/Skript/commit/da1edc27a7ceab70a3a81529aef33637c23cc9c3", "message": "Update CondMatches.java", "committedDate": "2020-09-30T05:43:55Z", "type": "commit"}, {"oid": "36d6a713aefe7fff6bef743f8d73e9e1fba66d2e", "url": "https://github.com/SkriptLang/Skript/commit/36d6a713aefe7fff6bef743f8d73e9e1fba66d2e", "message": "Merge branch 'dev-2.5' into CondMatches", "committedDate": "2020-09-30T05:48:44Z", "type": "commit"}, {"oid": "69788b1a776ffc9047ad21b2232af63cf622f810", "url": "https://github.com/SkriptLang/Skript/commit/69788b1a776ffc9047ad21b2232af63cf622f810", "message": "Merge branch 'dev-2.5' into CondMatches", "committedDate": "2020-10-05T12:09:05Z", "type": "commit"}, {"oid": "82fb3a230a1e8d554469bc66d50a9bc494e70d35", "url": "https://github.com/SkriptLang/Skript/commit/82fb3a230a1e8d554469bc66d50a9bc494e70d35", "message": "Updated license", "committedDate": "2020-10-05T14:54:19Z", "type": "commit"}, {"oid": "2dae812bf0d2a51f29f7a5b1e569ba252ef80c96", "url": "https://github.com/SkriptLang/Skript/commit/2dae812bf0d2a51f29f7a5b1e569ba252ef80c96", "message": "Merge branch 'dev-2.5' into CondMatches", "committedDate": "2020-10-10T10:59:12Z", "type": "commit"}, {"oid": "2e308ac0de94f7ac645433f49151fb4d6140aeb5", "url": "https://github.com/SkriptLang/Skript/commit/2e308ac0de94f7ac645433f49151fb4d6140aeb5", "message": "Updated the description of CondMatches", "committedDate": "2020-10-10T11:00:22Z", "type": "commit"}, {"oid": "05d29f1a672071904ff3720e5298d11c65ef9646", "url": "https://github.com/SkriptLang/Skript/commit/05d29f1a672071904ff3720e5298d11c65ef9646", "message": "Merge remote-tracking branch 'origin/CondMatches' into CondMatches", "committedDate": "2020-10-10T11:00:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ5MDk2MQ==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r519490961", "bodyText": "Am I crazy, or is this backwards?\n(isNegated() ? \"matches\" : \"doesn't match\")", "author": "ShaneBeee", "createdAt": "2020-11-08T23:10:51Z", "path": "src/main/java/ch/njol/skript/conditions/CondMatches.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright Peter G\u00fcttinger, SkriptLang team and contributors\n+ */\n+\n+package ch.njol.skript.conditions;\n+\n+import java.util.Arrays;\n+import java.util.regex.Pattern;\n+\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.lang.Condition;\n+import ch.njol.skript.lang.Expression;\n+import ch.njol.skript.lang.SkriptParser.ParseResult;\n+import ch.njol.util.Kleenean;\n+\n+@Name(\"Matches\")\n+@Description(\"Checks whether the defined strings match the input regexes (Regular expressions).\")\n+@Examples({\"on chat:\",\n+\t\"\\tif message partially matches \\\"\\\\d\\\":\",\n+\t\"\\t\\tsend \\\"Message contains a digit!\\\"\",\n+\t\"\\tif message doesn't match \\\"[A-Za-z]+\\\":\",\n+\t\"\\t\\tsend \\\"Message doesn't only contain letters!\\\"\"})\n+@Since(\"INSERT VERSION\")\n+public class CondMatches extends Condition {\n+\t\n+\tstatic {\n+\t\tSkript.registerCondition(CondMatches.class,\n+\t\t\t\"%strings% (1\u00a6match[es]|2\u00a6do[es](n't| not) match) %strings%\",\n+\t\t\t\"%strings% (1\u00a6partially match[es]|2\u00a6do[es](n't| not) partially match) %strings%\");\n+\t}\n+\t\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> strings;\n+\t@SuppressWarnings(\"null\")\n+\tExpression<String> regex;\n+\t\n+\tboolean partial;\n+\t\n+\t@Override\n+\t@SuppressWarnings({\"unchecked\", \"null\"})\n+\tpublic boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {\n+\t\tstrings = (Expression<String>) exprs[0];\n+\t\tregex = (Expression<String>) exprs[1];\n+\t\tpartial = matchedPattern == 1;\n+\t\tsetNegated(parseResult.mark == 1);\n+\t\treturn true;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean check(Event e) {\n+\t\tString[] txt = strings.getAll(e);\n+\t\tString[] regexes = regex.getAll(e);\n+\t\tif (txt.length < 1 || regexes.length < 1) return false;\n+\t\tboolean result;\n+\t\tboolean stringAnd = strings.getAnd();\n+\t\tboolean regexAnd = regex.getAnd();\n+\t\tif (stringAnd) {\n+\t\t\tif (regexAnd) {\n+\t\t\t\tresult = Arrays.stream(txt).allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> matches(str, pattern))));\n+\t\t\t} else {\n+\t\t\t\tresult = Arrays.stream(txt).allMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).anyMatch((pattern -> matches(str, pattern))));\n+\t\t\t}\n+\t\t} else if (regexAnd) {\n+\t\t\tresult = Arrays.stream(txt).anyMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).allMatch((pattern -> matches(str, pattern))));\n+\t\t} else {\n+\t\t\tresult = Arrays.stream(txt).anyMatch((str) -> Arrays.stream(regexes).parallel().map(Pattern::compile).anyMatch((pattern -> matches(str, pattern))));\n+\t\t}\n+\t\treturn result == isNegated();\n+\t}\n+\t\n+\tpublic boolean matches(String str, Pattern pattern) {\n+\t\treturn partial ? pattern.matcher(str).find() : str.matches(pattern.pattern());\n+\t}\n+\t\n+\t@Override\n+\tpublic String toString(@Nullable Event e, boolean debug) {\n+\t\treturn strings.toString(e, debug) + \" \" + (isNegated() ? \"matches\" : \"doesn't match\") + \" \" + regex.toString(e, debug);", "originalCommit": "05d29f1a672071904ff3720e5298d11c65ef9646", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MTAxNg==", "url": "https://github.com/SkriptLang/Skript/pull/3174#discussion_r520751016", "bodyText": "oops", "author": "DeltaRays", "createdAt": "2020-11-10T17:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ5MDk2MQ=="}], "type": "inlineReview"}, {"oid": "f306bca22ad94e01499959b8c35cc5d1a690e8ee", "url": "https://github.com/SkriptLang/Skript/commit/f306bca22ad94e01499959b8c35cc5d1a690e8ee", "message": "Merge branch 'dev-2.5' into CondMatches", "committedDate": "2020-11-10T17:38:03Z", "type": "commit"}, {"oid": "a809fbd3333d1e7b667842a48dc504be994d4aec", "url": "https://github.com/SkriptLang/Skript/commit/a809fbd3333d1e7b667842a48dc504be994d4aec", "message": "Update CondMatches.java", "committedDate": "2020-11-10T17:42:46Z", "type": "commit"}, {"oid": "335f3f9251998099b48c3ede3fc70f37ad5ebc3e", "url": "https://github.com/SkriptLang/Skript/commit/335f3f9251998099b48c3ede3fc70f37ad5ebc3e", "message": "Merge branch 'dev-2.5' into CondMatches", "committedDate": "2020-11-13T18:19:50Z", "type": "commit"}]}