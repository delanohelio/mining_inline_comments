{"pr_number": 3206, "pr_title": "Expr pierce level", "pr_createdAt": "2020-07-24T19:18:41Z", "pr_url": "https://github.com/SkriptLang/Skript/pull/3206", "timeline": [{"oid": "9b3297793ff477c72d1f697fb9810a0f0eb38e26", "url": "https://github.com/SkriptLang/Skript/commit/9b3297793ff477c72d1f697fb9810a0f0eb38e26", "message": "Added `arrow pierce level` (it doesn't work with tridents)", "committedDate": "2020-07-24T19:12:43Z", "type": "commit"}, {"oid": "6b5ab586e2512cb069afe4ca31e5adc713a9faca", "url": "https://github.com/SkriptLang/Skript/commit/6b5ab586e2512cb069afe4ca31e5adc713a9faca", "message": "Added a condition to check if the arrowPierceLevel method exists", "committedDate": "2020-07-24T19:15:16Z", "type": "commit"}, {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593", "url": "https://github.com/SkriptLang/Skript/commit/71dcde3c018a6366ef1555bee7f1910d4364c593", "message": "replaced projectile with arrow", "committedDate": "2020-07-24T19:17:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNjI0NA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460316244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n          \n          \n            \n            \t\tif (Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n          \n          \n            \n            \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");", "author": "Matocolotoe", "createdAt": "2020-07-24T22:35:35Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNjM3OQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460316379", "bodyText": "Debug line there", "author": "Matocolotoe", "createdAt": "2020-07-24T22:36:07Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTE3Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319172", "bodyText": "Use getArray", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:47:08Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTI4MQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319281", "bodyText": "The statement after the if should be on its own line", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:47:33Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());\n+\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTYzMA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319630", "bodyText": "If the previous if statement has braces, this one should as well", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:49:02Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());\n+\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t} else if (entity instanceof Arrow)", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDAyNg==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320026", "bodyText": "Use getArray", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:50:38Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDEzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320138", "bodyText": "Should also support add and remove changers considering you are able to use those this way:\nincrease shot arrow's pierce level by 1\n\nForgot to mention this on your other PR for knockback strength", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:51:06Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDQzNQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320435", "bodyText": "This should be a constant as well, declared before the static block since you also have the same check being used there", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:52:17Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDg0OA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320848", "bodyText": "Should specify that it applies to anything considered arrows since we don't know if Mojang is going to add more arrow-like projectiles.", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:53:48Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3NjQzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460376438", "bodyText": "Yeah but it didn\u2019t work with tridents and using projectile seemed too generic", "author": "DeltaRays", "createdAt": "2020-07-25T07:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDg0OA=="}], "type": "inlineReview"}, {"oid": "19b91796a2dbe8d978c1edf37709a4509e6ce371", "url": "https://github.com/SkriptLang/Skript/commit/19b91796a2dbe8d978c1edf37709a4509e6ce371", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-07-25T07:22:03Z", "type": "commit"}, {"oid": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "url": "https://github.com/SkriptLang/Skript/commit/8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "message": "Added the REMOVE and the ADD modes", "committedDate": "2020-07-25T17:48:48Z", "type": "commit"}, {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "url": "https://github.com/SkriptLang/Skript/commit/0aa195d593628e0ad712b26a043a2391c5cd76a3", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-07-26T09:49:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTMzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255338", "bodyText": "This should be changed to a switch statement", "author": "APickledWalrus", "createdAt": "2020-07-30T20:34:42Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTYwMQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255601", "bodyText": "Curly brackets on the IF statements \ud83d\ude0e", "author": "APickledWalrus", "createdAt": "2020-07-30T20:35:12Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTc2NA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255764", "bodyText": "IF statement should be on it's own line", "author": "APickledWalrus", "createdAt": "2020-07-30T20:35:30Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NzUzNQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463257535", "bodyText": "this should be private", "author": "APickledWalrus", "createdAt": "2020-07-30T20:39:09Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c23516c2f54adfa10afda03cafe516ba406afaad", "url": "https://github.com/SkriptLang/Skript/commit/c23516c2f54adfa10afda03cafe516ba406afaad", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-07-31T11:13:07Z", "type": "commit"}, {"oid": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "url": "https://github.com/SkriptLang/Skript/commit/5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "message": "Updated everything (thanks apickledwalrus)", "committedDate": "2020-07-31T11:13:26Z", "type": "commit"}, {"oid": "65f48de1ff8c61548c15daeb11e4737df0ce89c9", "url": "https://github.com/SkriptLang/Skript/commit/65f48de1ff8c61548c15daeb11e4737df0ce89c9", "message": "Merge remote-tracking branch 'origin/ExprPierceLevel' into ExprPierceLevel", "committedDate": "2020-07-31T11:13:53Z", "type": "commit"}, {"oid": "9e7981eef43ad642885adaba9e76b0546b2c30e7", "url": "https://github.com/SkriptLang/Skript/commit/9e7981eef43ad642885adaba9e76b0546b2c30e7", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-08-02T16:24:00Z", "type": "commit"}, {"oid": "91539864f224ac8ae4ad4b0e189160d745e09bc7", "url": "https://github.com/SkriptLang/Skript/commit/91539864f224ac8ae4ad4b0e189160d745e09bc7", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-09-08T18:40:08Z", "type": "commit"}, {"oid": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "url": "https://github.com/SkriptLang/Skript/commit/8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-09-26T09:54:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MzYxNg==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r495483616", "bodyText": "You should add a default case that asserts false", "author": "APickledWalrus", "createdAt": "2020-09-26T18:39:55Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;", "originalCommit": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "72675726749f9cb5d103c040df33073b42e8b442", "url": "https://github.com/SkriptLang/Skript/commit/72675726749f9cb5d103c040df33073b42e8b442", "message": "Added a default case", "committedDate": "2020-09-26T19:03:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMTIwNw==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r496321207", "bodyText": "I think you can just test Skript.methodExists(Arrow.class, \"getPierceLevel\") for here.\nAlso, if this method is not guaranteed to exist in all versions supported by Skript, can you add a @RequiredPlugins MC version?", "author": "Wealthyturtle", "createdAt": "2020-09-29T01:22:37Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))", "originalCommit": "72675726749f9cb5d103c040df33073b42e8b442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0NTY5OA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r496445698", "bodyText": "\ud83d\udc4d", "author": "DeltaRays", "createdAt": "2020-09-29T06:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMTIwNw=="}], "type": "inlineReview"}, {"oid": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "url": "https://github.com/SkriptLang/Skript/commit/aa17d7a45b30b92b759d72bacfd8899030117a9c", "message": "Updated ExprArrowPierceLevel.java", "committedDate": "2020-09-29T06:32:46Z", "type": "commit"}, {"oid": "19e6a9dc05881c02e2d5be49cfa94a2a154b63d6", "url": "https://github.com/SkriptLang/Skript/commit/19e6a9dc05881c02e2d5be49cfa94a2a154b63d6", "message": "Merge branch 'dev-2.5' into ExprPierceLevel", "committedDate": "2020-09-29T21:56:35Z", "type": "commit"}, {"oid": "6e29f2f58ad5611f77693cf44354b9f65c400148", "url": "https://github.com/SkriptLang/Skript/commit/6e29f2f58ad5611f77693cf44354b9f65c400148", "message": "update license header", "committedDate": "2020-09-29T21:57:16Z", "type": "commit"}]}