{"pr_number": 8145, "pr_title": "add functionality to validate Mutual SSL certificate as a Header", "pr_createdAt": "2020-02-04T15:30:17Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8145", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzQyMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374823422", "bodyText": "don't we need \"\\n\" after BEGIN_CERTIFICATE_STRING?", "author": "bhathiya", "createdAt": "2020-02-04T17:45:56Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/common/MutualSSLCertificateHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.gateway.handlers.common;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.core.axis2.Axis2MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.apache.synapse.transport.nhttp.NhttpConstants;\n+import org.wso2.carbon.apimgt.gateway.APIMgtGatewayConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+\n+import java.util.Map;\n+\n+import javax.security.cert.X509Certificate;\n+\n+public class MutualSSLCertificateHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(MutualSSLCertificateHandler.class);\n+\n+    @Override\n+    public boolean handleRequest(MessageContext messageContext) {\n+\n+        X509Certificate certificateFromMessageContext = null;\n+        org.apache.axis2.context.MessageContext axis2MsgContext =\n+                ((Axis2MessageContext) messageContext).getAxis2MessageContext();\n+        Map headers = (Map) (axis2MsgContext)\n+                .getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+\n+        Object sslCertObject = axis2MsgContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        if (sslCertObject != null) {\n+            X509Certificate[] x509Certificates = (X509Certificate[]) sslCertObject;\n+            if (x509Certificates.length > 0) {\n+                certificateFromMessageContext = x509Certificates[0];\n+            }\n+        }\n+        if (certificateFromMessageContext != null) {\n+            if (!headers.containsKey(Utils.getClientCertificateHeader())) {\n+                try {\n+                    byte[] base64Encoded = Base64.encodeBase64(certificateFromMessageContext.getEncoded());\n+                    String base64EncodedString =\n+                            APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING.concat(new String(base64Encoded)).concat(", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3NDkwMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375074902", "bodyText": "this was handle in APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING", "author": "tharindu1st", "createdAt": "2020-02-05T06:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA3ODg2Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375078867", "bodyText": "shall we follow one approach for both for consistency?", "author": "bhathiya", "createdAt": "2020-02-05T06:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyOTAxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374829017", "bodyText": "shall we swap if and else, and negate the condition?", "author": "bhathiya", "createdAt": "2020-02-04T17:57:10Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzMTgxOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374831819", "bodyText": "and I think we can move this to above L265.", "author": "bhathiya", "createdAt": "2020-02-04T18:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyOTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzMjk2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374832968", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.error(\"Error while Convert into X509Certificate\", e);\n          \n          \n            \n                                log.error(\"Error while converting the certificate to X509Certificate\", e);", "author": "bhathiya", "createdAt": "2020-02-04T18:04:47Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNDU2Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374834566", "bodyText": "shall we put a debug log for the else case?", "author": "bhathiya", "createdAt": "2020-02-04T18:08:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNjY5Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374836693", "bodyText": "can't System.getProperty(\"javax.net.ssl.trustStorePassword\") be null?", "author": "bhathiya", "createdAt": "2020-02-04T18:12:18Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.certificatemgt.reloader;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+\n+/**\n+ * This class used to load new certificate file into Memory\n+ */\n+public class CertificateReLoader implements Runnable {\n+\n+    private static final Log log = LogFactory.getLog(CertificateReLoader.class);\n+    private static char[] TRUST_STORE_PASSWORD = System.getProperty(\"javax.net.ssl.trustStorePassword\").toCharArray();", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNzEzMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374837131", "bodyText": "formatting error", "author": "bhathiya", "createdAt": "2020-02-04T18:13:10Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoaderUtil.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.certificatemgt.reloader;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Utility to start CertificateReLoader\n+ */\n+public class CertificateReLoaderUtil {\n+\n+    private static ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+    private CertificateReLoaderUtil() {\n+\n+    }\n+\n+    private static long lastUpdatedTimeStamp;\n+\n+    public static void startCertificateReLoader() {\n+\n+        CertificateReLoader certificateReLoader = new CertificateReLoader();\n+            executor.scheduleAtFixedRate(certificateReLoader, 60, getCertificateReLoaderInterval(), TimeUnit.SECONDS);", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTkxMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r374839910", "bodyText": "shall we change this to enable to match with apimgt.mutual_ssl.enable_client_validation?", "author": "bhathiya", "createdAt": "2020-02-04T18:18:28Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }\n+            } catch (APIManagementException e) {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                        \"Error while Convert into X509Certificate\", e);\n+            }\n+        } else {\n+            return certificateFromMessageContext;\n+        }\n+    }\n+\n+    private boolean isClientCertificateValidationDisable() {", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzM0MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375057341", "bodyText": "Client Certificate Validation disabled. Hence returning client certificate from header\"", "author": "fazlan-nazeem", "createdAt": "2020-02-05T04:46:56Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzQ0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375057449", "bodyText": "Error while converting ...", "author": "fazlan-nazeem", "createdAt": "2020-02-05T04:47:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/authenticator/MutualSSLAuthenticator.java", "diffHunk": "@@ -236,4 +243,77 @@ public String getRequestOrigin() {\n     public int getPriority() {\n         return 0;\n     }\n+\n+    /**\n+     * Return Client Certificate from Message Context or from Header.\n+     * @param axis2MessageContext\n+     * @return X509 Certificate Object\n+     * @throws APISecurityException\n+     */\n+    private X509Certificate getClientCertificate(org.apache.axis2.context.MessageContext axis2MessageContext)\n+            throws APISecurityException {\n+\n+        Map headers =\n+                (Map) axis2MessageContext.getProperty(org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+        Object sslCertObject = axis2MessageContext.getProperty(NhttpConstants.SSL_CLIENT_AUTH_CERT_X509);\n+        X509Certificate certificateFromMessageContext = null;\n+        X509Certificate certificateFromHeader = null;\n+        if (sslCertObject != null) {\n+            X509Certificate[] certs = (X509Certificate[]) sslCertObject;\n+            certificateFromMessageContext = certs[0];\n+        }\n+        if (headers.containsKey(Utils.getClientCertificateHeader())) {\n+            String base64EncodedCertificate =\n+                    (String) headers.get(Utils.getClientCertificateHeader());\n+            if (base64EncodedCertificate != null) {\n+                base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                        replaceAll(APIMgtGatewayConstants.BEGIN_CERTIFICATE_STRING, \"\")\n+                        .replaceAll(APIMgtGatewayConstants.END_CERTIFICATE_STRING, \"\");\n+\n+                byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+                try (InputStream inputStream = new ByteArrayInputStream(bytes)) {\n+                    X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+                    if (APIUtil.isCertificateExistInTrustStore(x509Certificate)) {\n+                        certificateFromHeader = x509Certificate;\n+                    }\n+                } catch (IOException | CertificateException | APIManagementException e) {\n+                    log.error(\"Error while Convert into X509Certificate\", e);\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            \"Error while Convert into X509Certificate\", e);\n+                }\n+            }\n+        }\n+        // Certificate available in header\n+        if (certificateFromHeader != null) {\n+            if (isClientCertificateValidationDisable()){\n+                log.debug(\"Client Certificate Validation disable hence returning client certificate from header\");\n+                return certificateFromHeader;\n+            }\n+            try {\n+                if (!APIUtil.isCertificateExistInTrustStore(certificateFromMessageContext)) {\n+                    log.error(\"Certificate in messageContext not available in truststore\");\n+                    return null;\n+                } else {\n+                    return certificateFromHeader;\n+                }\n+            } catch (APIManagementException e) {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                        \"Error while Convert into X509Certificate\", e);", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1NzYyNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375057626", "bodyText": "Unable to find the certificate", "author": "fazlan-nazeem", "createdAt": "2020-02-05T04:48:28Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/certificatemgt/reloader/CertificateReLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.certificatemgt.reloader;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+\n+/**\n+ * This class used to load new certificate file into Memory\n+ */\n+public class CertificateReLoader implements Runnable {\n+\n+    private static final Log log = LogFactory.getLog(CertificateReLoader.class);\n+    private static char[] TRUST_STORE_PASSWORD = System.getProperty(\"javax.net.ssl.trustStorePassword\").toCharArray();\n+    private static String TRUST_STORE = System.getProperty(\"javax.net.ssl.trustStore\");\n+\n+    @Override\n+    public void run() {\n+\n+        File trustStoreFile = new File(TRUST_STORE);\n+        FileInputStream localTrustStoreStream;\n+        try {\n+            long lastUpdatedTimeStamp = CertificateReLoaderUtil.getLastUpdatedTimeStamp();\n+            long lastModified = trustStoreFile.lastModified();\n+            if (lastUpdatedTimeStamp != lastModified) {\n+                CertificateReLoaderUtil.setLastUpdatedTimeStamp(lastModified);\n+                localTrustStoreStream = new FileInputStream(trustStoreFile);\n+                KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+                trustStore.load(localTrustStoreStream, TRUST_STORE_PASSWORD);\n+                ServiceReferenceHolder.getInstance().setTrustStore(trustStore);\n+            }\n+\n+        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException e) {\n+            log.error(\"Certificate Couldn't find\", e);", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1OTk5OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8145#discussion_r375059998", "bodyText": "Exists", "author": "fazlan-nazeem", "createdAt": "2020-02-05T05:01:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java", "diffHunk": "@@ -10087,4 +10097,37 @@ public static boolean isDefaultApplicationCreationDisabledForTenant(int tenantId\n         }\n         return state;\n     }\n+\n+    /**\n+     * Validate Certificate exist in TrustStore\n+     * @param certificate\n+     * @return true if certificate exist in truststore\n+     * @throws APIManagementException\n+     */\n+    public static boolean isCertificateExistInTrustStore(X509Certificate certificate) throws APIManagementException {", "originalCommit": "e9b6e1cbd070c2ab49c77c83ce97a03a724f37aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "479207db8cc1c3227b2a98d7a922e99254ae9b3e", "url": "https://github.com/wso2/carbon-apimgt/commit/479207db8cc1c3227b2a98d7a922e99254ae9b3e", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-05T08:31:46Z", "type": "forcePushed"}, {"oid": "4a925e8a7b89265182bb325f1b33d9365763f811", "url": "https://github.com/wso2/carbon-apimgt/commit/4a925e8a7b89265182bb325f1b33d9365763f811", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-05T09:25:07Z", "type": "forcePushed"}, {"oid": "0d842d52bb02b0ab7448151f58b85b70dc2a7656", "url": "https://github.com/wso2/carbon-apimgt/commit/0d842d52bb02b0ab7448151f58b85b70dc2a7656", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-05T09:46:36Z", "type": "forcePushed"}, {"oid": "b1ed0111a89965f8f2fc3cea53a0e60b9185b259", "url": "https://github.com/wso2/carbon-apimgt/commit/b1ed0111a89965f8f2fc3cea53a0e60b9185b259", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-05T09:53:37Z", "type": "forcePushed"}, {"oid": "bf5604c28921a809371e8466d5938d1feb694e09", "url": "https://github.com/wso2/carbon-apimgt/commit/bf5604c28921a809371e8466d5938d1feb694e09", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-05T09:54:04Z", "type": "forcePushed"}, {"oid": "88983ca36b36afcc0d1b2c7cd0d0e348fb6e6e34", "url": "https://github.com/wso2/carbon-apimgt/commit/88983ca36b36afcc0d1b2c7cd0d0e348fb6e6e34", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-07T11:31:15Z", "type": "forcePushed"}, {"oid": "4bbc2c9d5058ca63eab894d386e7801be612a47e", "url": "https://github.com/wso2/carbon-apimgt/commit/4bbc2c9d5058ca63eab894d386e7801be612a47e", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-09T16:42:54Z", "type": "forcePushed"}, {"oid": "b5f914d4b2aa7ee1f60b06882a081d3b21af546f", "url": "https://github.com/wso2/carbon-apimgt/commit/b5f914d4b2aa7ee1f60b06882a081d3b21af546f", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-09T17:40:44Z", "type": "commit"}, {"oid": "b5f914d4b2aa7ee1f60b06882a081d3b21af546f", "url": "https://github.com/wso2/carbon-apimgt/commit/b5f914d4b2aa7ee1f60b06882a081d3b21af546f", "message": "add functionality to validate Mutual SSL certificate as a Header", "committedDate": "2020-02-09T17:40:44Z", "type": "forcePushed"}]}