{"pr_number": 8488, "pr_title": "Adding feature for subscription tier update in an existing subscription", "pr_createdAt": "2020-05-12T06:06:20Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8488", "timeline": [{"oid": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "url": "https://github.com/wso2/carbon-apimgt/commit/3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "message": "adding subscription tier update in an existing subscription", "committedDate": "2020-05-12T12:52:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjU0Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424636546", "bodyText": "remove newline", "author": "fazlan-nazeem", "createdAt": "2020-05-13T18:13:43Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionUpdateSimpleWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.API;\n+import org.wso2.carbon.apimgt.api.model.APIProduct;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.SubscriptionWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+public class SubscriptionUpdateSimpleWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionUpdateSimpleWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_UPDATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return null;\n+    }\n+\n+    /**\n+     * This method executes subscription update simple workflow and return workflow response back to the caller\n+     *\n+     * @param workflowDTO The WorkflowDTO which contains workflow contextual information related to the workflow\n+     * @return workflow response back to the caller\n+     * @throws WorkflowException Thrown when the workflow execution was not fully performed\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+        WorkflowResponse workflowResponse = complete(workflowDTO);\n+        super.publishEvents(workflowDTO);\n+\n+        return workflowResponse;\n+    }\n+\n+    /**\n+     * This method is responsible for updating monetization logic and returns the execute method.\n+     *\n+     * @param workflowDTO The WorkflowDTO which contains workflow contextual information related to the workflow\n+     * @return workflow response to the caller by returning the execute() method\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse monetizeSubscription(WorkflowDTO workflowDTO, API api) throws WorkflowException {\n+        // implementation is not provided in this version\n+        return execute(workflowDTO);\n+    }\n+\n+    @Override\n+    public WorkflowResponse monetizeSubscription(WorkflowDTO workflowDTO, APIProduct apiProduct) throws WorkflowException {\n+        // implementation is not provided in this version\n+        return execute(workflowDTO);\n+    }\n+\n+    /**\n+     * This method completes subscription update simple workflow and return workflow response back to the caller\n+     *\n+     * @param workflowDTO The WorkflowDTO which contains workflow contextual information related to the workflow\n+     * @return workflow response back to the caller\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n+        ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+        SubscriptionWorkflowDTO subscriptionWorkflowDTO = (SubscriptionWorkflowDTO)workflowDTO;\n+        try {\n+            if (subscriptionWorkflowDTO.getStatus() == WorkflowStatus.APPROVED) {\n+                apiMgtDAO.updateSubscriptionStatusAndTier(Integer.parseInt(subscriptionWorkflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.UNBLOCKED, subscriptionWorkflowDTO.getRequestedTierName());\n+            } else if (subscriptionWorkflowDTO.getStatus() == WorkflowStatus.CREATED ||\n+                    subscriptionWorkflowDTO.getStatus() == WorkflowStatus.REGISTERED) {\n+                apiMgtDAO.updateSubscriptionStatus(Integer.parseInt(subscriptionWorkflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.TIER_UPDATE_PENDING);\n+            } else if (subscriptionWorkflowDTO.getStatus() == WorkflowStatus.REJECTED) {\n+                apiMgtDAO.updateSubscriptionStatusAndTier(Integer.parseInt(subscriptionWorkflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.UNBLOCKED, subscriptionWorkflowDTO.getTierName());\n+            }\n+", "originalCommit": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNDYxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424834617", "bodyText": "resolved", "author": "CrowleyRajapakse", "createdAt": "2020-05-14T02:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjk2MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424636960", "bodyText": "remove unwanted newlines", "author": "fazlan-nazeem", "createdAt": "2020-05-13T18:14:27Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/SubscriptionUpdateWSWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+*  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*/\n+\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.axiom.om.util.AXIOMUtil;\n+import org.apache.axis2.AxisFault;\n+import org.apache.axis2.Constants;\n+import org.apache.axis2.addressing.EndpointReference;\n+import org.apache.axis2.client.Options;\n+import org.apache.axis2.client.ServiceClient;\n+import org.apache.axis2.transport.http.HTTPConstants;\n+import org.apache.axis2.transport.http.HttpTransportProperties;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.SubscriptionWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+\n+import javax.xml.stream.XMLStreamException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SubscriptionUpdateWSWorkflowExecutor extends WorkflowExecutor {\n+    private static final Log log = LogFactory.getLog(SubscriptionUpdateWSWorkflowExecutor.class);\n+    private String serviceEndpoint;\n+    private String username;\n+    private char[] password;\n+    private String contentType;\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_UPDATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return null;\n+    }\n+\n+    /**\n+     * This method is used to execute the workflow without giving a workflow response back to the caller to execute\n+     * some other task after completing the workflow\n+     *\n+     * @param workflowDTO - The WorkflowDTO which contains workflow contextual information related to the workflow.\n+     * @throws WorkflowException\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        try {\n+            String action = WorkflowConstants.UPDATE_SUBSCRIPTION_WS_ACTION;\n+            ServiceClient client = getClient(action);\n+            String payload = \"<wor:SubscriptionApprovalWorkFlowProcessRequest \" +\n+                    \"         xmlns:wor=\\\"http://workflow.subscription.apimgt.carbon.wso2.org\\\">\\n\" +\n+                    \"         <wor:apiName>$1</wor:apiName>\\n\" +\n+                    \"         <wor:apiVersion>$2</wor:apiVersion>\\n\" +\n+                    \"         <wor:apiContext>$3</wor:apiContext>\\n\" +\n+                    \"         <wor:apiProvider>$4</wor:apiProvider>\\n\" +\n+                    \"         <wor:subscriber>$5</wor:subscriber>\\n\" +\n+                    \"         <wor:applicationName>$6</wor:applicationName>\\n\" +\n+                    \"         <wor:tierName>$7</wor:tierName>\\n\" +\n+                    \"         <wor:workflowExternalRef>$8</wor:workflowExternalRef>\\n\" +\n+                    \"         <wor:callBackURL>$9</wor:callBackURL>\\n\" +\n+                    \"      </wor:SubscriptionApprovalWorkFlowProcessRequest>\";\n+\n+            SubscriptionWorkflowDTO subsWorkflowDTO = (SubscriptionWorkflowDTO) workflowDTO;\n+            String callBackURL = subsWorkflowDTO.getCallbackUrl();\n+\n+            payload = payload.replace(\"$1\", subsWorkflowDTO.getApiName());\n+            payload = payload.replace(\"$2\", subsWorkflowDTO.getApiVersion());\n+            payload = payload.replace(\"$3\", subsWorkflowDTO.getApiContext());\n+            payload = payload.replace(\"$4\", subsWorkflowDTO.getApiProvider());\n+            payload = payload.replace(\"$5\", subsWorkflowDTO.getSubscriber());\n+            payload = payload.replace(\"$6\", subsWorkflowDTO.getApplicationName());\n+            payload = payload.replace(\"$7\", subsWorkflowDTO.getTierName());\n+            payload = payload.replace(\"$8\", subsWorkflowDTO.getExternalWorkflowReference());\n+            payload = payload.replace(\"$9\", callBackURL != null ? callBackURL : \"?\");\n+\n+            client.fireAndForget(AXIOMUtil.stringToOM(payload));\n+            super.execute(workflowDTO);\n+        } catch (AxisFault axisFault) {\n+            log.error(\"Error sending out message\", axisFault);\n+            throw new WorkflowException(\"Error sending out message\", axisFault);\n+        } catch (XMLStreamException e) {\n+            log.error(\"Error converting String to OMElement\", e);\n+            throw new WorkflowException(\"Error converting String to OMElement\", e);\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+        log.info(\"Subscription Update [Complete] Workflow Invoked. Workflow ID : \" + workflowDTO\n+                .getExternalWorkflowReference() + \"Workflow State : \" + workflowDTO.getStatus());\n+\n+        if (WorkflowStatus.APPROVED.equals(workflowDTO.getStatus())) {\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            try {\n+                apiMgtDAO.updateSubscriptionStatus(Integer.parseInt(workflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.UNBLOCKED);\n+            } catch (APIManagementException e) {\n+                log.error(\"Could not complete subscription update workflow\", e);\n+                throw new WorkflowException(\"Could not complete subscription update workflow\", e);\n+            }\n+        } else if (WorkflowStatus.REJECTED.equals(workflowDTO.getStatus())) {\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            try {\n+                apiMgtDAO.updateSubscriptionStatus(Integer.parseInt(workflowDTO.getWorkflowReference()),\n+                        APIConstants.SubscriptionStatus.REJECTED);\n+            } catch (APIManagementException e) {\n+                log.error(\"Could not complete subscription update workflow\", e);\n+                throw new WorkflowException(\"Could not complete subscription update workflow\", e);\n+            }\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    @Override\n+    public void cleanUpPendingTask(String workflowExtRef) throws WorkflowException {\n+        String errorMsg = null;\n+        super.cleanUpPendingTask(workflowExtRef);\n+        try {\n+            String action = WorkflowConstants.DELETE_SUBSCRIPTION_WS_ACTION;\n+            ServiceClient client = getClient(action);\n+            String payload = \"<wor:CancelSubscriptionApprovalWorkflowProcessRequest \" +\n+                    \"           xmlns:wor=\\\"http://workflow.subscription.apimgt.carbon.wso2.org\\\">\\n\" +\n+                    \"           <wor:workflowExtRef>\" + workflowExtRef + \"</wor:workflowExtRef>\\n\" +\n+                    \"        </wor:CancelSubscriptionApprovalWorkflowProcessRequest>\";\n+\n+            client.fireAndForget(AXIOMUtil.stringToOM(payload));\n+        } catch (AxisFault axisFault) {\n+            errorMsg = \"Error sending out cancel pending subscription approval process message. cause: \" + axisFault\n+                    .getMessage();\n+            throw new WorkflowException(errorMsg, axisFault);\n+        } catch (XMLStreamException e) {\n+            errorMsg = \"Error converting subscription cleanup String to OMElement. cause: \" + e.getMessage();\n+            throw new WorkflowException(errorMsg, e);\n+        }\n+    }\n+\n+    /**\n+     * Retrieves configured ServiceClient for communication with external services\n+     *\n+     * @param action web service action to use\n+     * @return configured service client\n+     * @throws AxisFault\n+     */\n+    public ServiceClient getClient(String action) throws AxisFault {\n+        ServiceClient client = new ServiceClient(\n+                ServiceReferenceHolder.getInstance().getContextService().getClientConfigContext(), null);\n+        Options options = new Options();\n+        options.setAction(action);\n+        options.setTo(new EndpointReference(serviceEndpoint));\n+\n+        if (contentType != null) {\n+            options.setProperty(Constants.Configuration.MESSAGE_TYPE, contentType);\n+        } else {\n+            options.setProperty(Constants.Configuration.MESSAGE_TYPE, HTTPConstants.MEDIA_TYPE_TEXT_XML);\n+        }\n+\n+        HttpTransportProperties.Authenticator auth = new HttpTransportProperties.Authenticator();\n+\n+        // Assumes authentication is required if username and password is given\n+        if (username != null && !username.isEmpty() && password != null && password.length != 0) {\n+            auth.setUsername(username);\n+            auth.setPassword(String.valueOf(password));\n+            auth.setPreemptiveAuthentication(true);\n+            List<String> authSchemes = new ArrayList<String>();\n+            authSchemes.add(HttpTransportProperties.Authenticator.BASIC);\n+            auth.setAuthSchemes(authSchemes);\n+\n+            if (contentType == null) {\n+                options.setProperty(Constants.Configuration.MESSAGE_TYPE, HTTPConstants.MEDIA_TYPE_TEXT_XML);\n+            }\n+            options.setProperty(HTTPConstants.AUTHENTICATE, auth);\n+            options.setManageSession(true);\n+        }\n+        client.setOptions(options);\n+", "originalCommit": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNDY2MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424834660", "bodyText": "resolved", "author": "CrowleyRajapakse", "createdAt": "2020-05-14T02:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzIwMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424637201", "bodyText": "formatting issue", "author": "fazlan-nazeem", "createdAt": "2020-05-13T18:14:52Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/WorkflowExecutorFactory.java", "diffHunk": "@@ -113,6 +113,9 @@ public WorkflowDTO createWorkflowDTO(String wfType) {\n         }else if(WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_CREATION.equals(wfType)){\n             workflowDTO = new SubscriptionWorkflowDTO();\n             workflowDTO.setWorkflowType(wfType);\n+        }else if(WorkflowConstants.WF_TYPE_AM_SUBSCRIPTION_UPDATE.equals(wfType)){", "originalCommit": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNDY4OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424834689", "bodyText": "resolved", "author": "CrowleyRajapakse", "createdAt": "2020-05-14T02:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTc3Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424635776", "bodyText": "formatting", "author": "tharindu1st", "createdAt": "2020-05-13T18:12:24Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java", "diffHunk": "@@ -466,11 +468,25 @@\n             \"   API_ID = ? \" +\n             \"   AND APPLICATION_ID = ?\";\n \n+    public static final String RETRIEVE_SUBSCRIPTION_ID_SQL =\n+            \" SELECT \" +\n+                    \"   SUBSCRIPTION_ID \" +\n+                    \" FROM \" +\n+                    \"   AM_SUBSCRIPTION \" +\n+                    \" WHERE \" +\n+                    \"   UUID = ? \";\n+\n     public static final String ADD_SUBSCRIPTION_SQL =\n             \" INSERT INTO \" +\n             \"   AM_SUBSCRIPTION (TIER_ID,API_ID,APPLICATION_ID,SUB_STATUS,SUBS_CREATE_STATE,CREATED_BY,CREATED_TIME, \" +\n-                    \"UPDATED_TIME, UUID) \" +\n-            \" VALUES (?,?,?,?,?,?,?,?,?)\";\n+                    \"UPDATED_TIME, UUID, TIER_ID_PENDING) \" +", "originalCommit": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNDcyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424834723", "bodyText": "resolved", "author": "CrowleyRajapakse", "createdAt": "2020-05-14T02:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzODkwMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424638900", "bodyText": "use exceptionCodes", "author": "tharindu1st", "createdAt": "2020-05-13T18:17:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/SubscriptionsApiServiceImpl.java", "diffHunk": "@@ -244,6 +244,107 @@ public Response subscriptionsPost(SubscriptionDTO body, String xWSO2Tenant, Mess\n         return null;\n     }\n \n+    /**\n+     * Update already created subscriptions with the details specified in the body parameter\n+     *\n+     * @param body        new subscription details\n+     * @return newly added subscription as a SubscriptionDTO if successful\n+     */\n+    @Override\n+    public Response subscriptionsSubscriptionIdPut(SubscriptionDTO body, String subscriptionId, String xWSO2Tenant, MessageContext messageContext) {\n+        String username = RestApiUtil.getLoggedInUsername();\n+        String tenantDomain = RestApiUtil.getRequestedTenantDomain(xWSO2Tenant);\n+        APIConsumer apiConsumer;\n+\n+        try {\n+            apiConsumer = RestApiUtil.getConsumer(username);\n+            String applicationId = body.getApplicationId();\n+            String currentThrottlingPolicy = body.getThrottlingPolicy();\n+            String requestedThrottlingPolicy = body.getRequestedThrottlingPolicy();\n+\n+            //Check whether the subscription status is not empty and also not blocked\n+            if (body.getStatus() != null) {\n+                if (body.getStatus().value() == \"BLOCKED\" || body.getStatus().value() == \"ON_HOLD\"\n+                        || body.getStatus().value() == \"REJECTED\") {\n+                    RestApiUtil.handleBadRequest(\n+                            \"Cannot update subscriptions with provided status\", log);\n+                    return null;\n+                }\n+            } else {\n+                RestApiUtil.handleBadRequest(\n+                        \"Request must contain status of the subscription\", log);\n+                return null;\n+            }\n+\n+            //check whether user is permitted to access the API. If the API does not exist,\n+            // this will throw a APIMgtResourceNotFoundException\n+            if (body.getApiId() != null) {\n+                if (!RestAPIStoreUtils.isUserAccessAllowedForAPIByUUID(body.getApiId(), tenantDomain)) {\n+                    RestApiUtil.handleAuthorizationFailure(RestApiConstants.RESOURCE_API, body.getApiId(), log);\n+                }\n+            }  else {\n+                RestApiUtil.handleBadRequest(\n+                        \"Request must contain either apiIdentifier or apiProductIdentifier and the relevant type\", log);\n+                return null;\n+            }\n+\n+            Application application = apiConsumer.getApplicationByUUID(applicationId);\n+            if (application == null) {\n+                //required application not found\n+                RestApiUtil.handleResourceNotFoundError(RestApiConstants.RESOURCE_APPLICATION, applicationId, log);\n+                return null;\n+            }\n+\n+            if (!RestAPIStoreUtils.isUserAccessAllowedForApplication(application)) {\n+                //application access failure occurred\n+                RestApiUtil.handleAuthorizationFailure(RestApiConstants.RESOURCE_APPLICATION, applicationId, log);\n+            }\n+\n+            ApiTypeWrapper apiTypeWrapper = apiConsumer.getAPIorAPIProductByUUID(body.getApiId(), tenantDomain);\n+\n+            //Validation for allowed throttling tiers and Tenant based validation for subscription. If failed this will\n+            //  throw an APIMgtAuthorizationFailedException with the reason as the message\n+            RestAPIStoreUtils.checkSubscriptionAllowed(apiTypeWrapper, body.getThrottlingPolicy());\n+\n+            apiTypeWrapper.setTier(body.getThrottlingPolicy());\n+\n+            SubscriptionResponse subscriptionResponse = apiConsumer\n+                    .updateSubscription(apiTypeWrapper, username, application.getId(), subscriptionId,\n+                            currentThrottlingPolicy, requestedThrottlingPolicy);\n+            SubscribedAPI addedSubscribedAPI = apiConsumer\n+                    .getSubscriptionByUUID(subscriptionResponse.getSubscriptionUUID());\n+            SubscriptionDTO addedSubscriptionDTO = SubscriptionMappingUtil.fromSubscriptionToDTO(addedSubscribedAPI);\n+            WorkflowResponse workflowResponse = subscriptionResponse.getWorkflowResponse();\n+            if (workflowResponse instanceof HttpWorkflowResponse) {\n+                String payload = workflowResponse.getJSONPayload();\n+                addedSubscriptionDTO.setRedirectionParams(payload);\n+            }\n+\n+            return Response.ok(new URI(RestApiConstants.RESOURCE_PATH_SUBSCRIPTIONS + \"/\" +\n+                    addedSubscribedAPI.getUUID())).entity(addedSubscriptionDTO).build();\n+\n+        } catch (APIMgtAuthorizationFailedException e) {\n+            //this occurs when the api:application:tier mapping is not allowed. The reason for the message is taken from\n+            // the message of the exception e\n+            RestApiUtil.handleAuthorizationFailure(e.getMessage(), e, log);", "originalCommit": "3f8c9e4739baf6f2136a66075f8fa35d2c4fc411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNTEwOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8488#discussion_r424835109", "bodyText": "It seems this APIMgtAuthorizationFailedException is handled like same as this in all other usages.", "author": "CrowleyRajapakse", "createdAt": "2020-05-14T02:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzODkwMA=="}], "type": "inlineReview"}, {"oid": "252d2c422442265d215b03f8905c33e4eb7755f9", "url": "https://github.com/wso2/carbon-apimgt/commit/252d2c422442265d215b03f8905c33e4eb7755f9", "message": "adding subscription tier update in an existing subscription", "committedDate": "2020-05-14T02:21:35Z", "type": "forcePushed"}, {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "url": "https://github.com/wso2/carbon-apimgt/commit/f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "message": "adding subscription tier update in an existing subscription", "committedDate": "2020-05-18T09:59:06Z", "type": "commit"}, {"oid": "f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "url": "https://github.com/wso2/carbon-apimgt/commit/f62bece0ce3ef65d5d7b663d22dca5d6b3ce07ce", "message": "adding subscription tier update in an existing subscription", "committedDate": "2020-05-18T09:59:06Z", "type": "forcePushed"}]}