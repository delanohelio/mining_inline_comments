{"pr_number": 8595, "pr_title": "Introduce an admin REST API to import tenant theme", "pr_createdAt": "2020-05-28T08:31:54Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8595", "timeline": [{"oid": "fb8159849c21f633958ff21963a55d40da2ca155", "url": "https://github.com/wso2/carbon-apimgt/commit/fb8159849c21f633958ff21963a55d40da2ca155", "message": "Change tenant theme import REST API resource name", "committedDate": "2020-05-29T05:01:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MDcxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432390717", "bodyText": "add context information", "author": "tgtshanika", "createdAt": "2020-05-29T10:16:18Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");", "originalCommit": "fb8159849c21f633958ff21963a55d40da2ca155", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjgwMDc0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r572800744", "bodyText": "Fixed with 6ae0bc7", "author": "hisanhunais", "createdAt": "2021-02-09T11:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MDcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MTI1Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432391256", "bodyText": "context info", "author": "tgtshanika", "createdAt": "2020-05-29T10:17:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+\n+                        int len;\n+                        while ((len = zipInputStream.read(buffer)) > 0) {\n+                            fileOutputStream.write(buffer, 0, len);\n+                        }\n+\n+                        fileOutputStream.close();\n+                    } else {\n+                        handleException(\n+                                \"Unsupported file is uploaded with tenant theme by \" + tenantDomain + \" : file name : \"\n+                                        + zipEntry.getName());\n+                    }\n+\n+                }\n+                zipEntry = zipInputStream.getNextEntry();\n+            }\n+\n+            zipInputStream.closeEntry();\n+            zipInputStream.close();\n+\n+        } catch (IOException ex) {\n+            handleException(\"Failed to deploy tenant theme\", ex);", "originalCommit": "fb8159849c21f633958ff21963a55d40da2ca155", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjgwMDAyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r572800021", "bodyText": "Fixed with 6ae0bc7", "author": "hisanhunais", "createdAt": "2021-02-09T11:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTExNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432415117", "bodyText": "remove new line", "author": "tgtshanika", "createdAt": "2020-05-29T11:10:58Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+\n+                        int len;\n+                        while ((len = zipInputStream.read(buffer)) > 0) {\n+                            fileOutputStream.write(buffer, 0, len);\n+                        }\n+\n+                        fileOutputStream.close();\n+                    } else {\n+                        handleException(\n+                                \"Unsupported file is uploaded with tenant theme by \" + tenantDomain + \" : file name : \"\n+                                        + zipEntry.getName());\n+                    }\n+", "originalCommit": "fb8159849c21f633958ff21963a55d40da2ca155", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc5ODUyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r572798520", "bodyText": "Fixed with 6ae0bc7", "author": "hisanhunais", "createdAt": "2021-02-09T11:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNjM3MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r432416370", "bodyText": "check whether we can reuse org.wso2.carbon.apimgt.impl.utils.APIUtil.handleException;", "author": "tgtshanika", "createdAt": "2020-05-29T11:13:54Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/TenantThemeImportManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.apimgt.rest.api.admin.v1.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+public class TenantThemeImportManager {\n+\n+    private static final Log log = LogFactory.getLog(TenantThemeImportManager.class);\n+\n+    //using a set for file extensions white list since it will be faster to search\n+    private static final Set<String> EXTENSION_WHITELIST = new HashSet<String>(Arrays.asList(\n+            \"css\", \"jpg\", \"png\", \"gif\", \"svg\", \"ttf\", \"html\", \"js\", \"json\", \"ico\"));\n+\n+    public static String getStoreTenantThemesPath() {\n+\n+        return \"repository\" + File.separator + \"deployment\" + File.separator + \"server\" + File.separator + \"jaggeryapps\"\n+                + File.separator + \"devportal\" + File.separator + \"site\" + File.separator + \"public\"\n+                + File.separator + \"tenant_themes\" + File.separator;\n+    }\n+\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = getStoreTenantThemesPath() + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    handleException(\"Unable to create tenant theme directory\");\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+\n+                        int len;\n+                        while ((len = zipInputStream.read(buffer)) > 0) {\n+                            fileOutputStream.write(buffer, 0, len);\n+                        }\n+\n+                        fileOutputStream.close();\n+                    } else {\n+                        handleException(\n+                                \"Unsupported file is uploaded with tenant theme by \" + tenantDomain + \" : file name : \"\n+                                        + zipEntry.getName());\n+                    }\n+\n+                }\n+                zipEntry = zipInputStream.getNextEntry();\n+            }\n+\n+            zipInputStream.closeEntry();\n+            zipInputStream.close();\n+\n+        } catch (IOException ex) {\n+            handleException(\"Failed to deploy tenant theme\", ex);\n+        } finally {\n+            IOUtils.closeQuietly(zipInputStream);\n+            IOUtils.closeQuietly(themeFile);\n+        }\n+    }\n+\n+    private static void handleException(String msg) throws APIManagementException {\n+", "originalCommit": "fb8159849c21f633958ff21963a55d40da2ca155", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc5OTE3Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r572799172", "bodyText": "Fixed with 6ae0bc7", "author": "hisanhunais", "createdAt": "2021-02-09T11:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNjM3MA=="}], "type": "inlineReview"}, {"oid": "3122cb4fe8cd5ea4700e06d64a2a67c4f084fe84", "url": "https://github.com/wso2/carbon-apimgt/commit/3122cb4fe8cd5ea4700e06d64a2a67c4f084fe84", "message": "Introduce an admin REST API to import tenant theme", "committedDate": "2020-05-30T00:31:56Z", "type": "commit"}, {"oid": "909daac27dc7184ba96efef171897e3427e02e3d", "url": "https://github.com/wso2/carbon-apimgt/commit/909daac27dc7184ba96efef171897e3427e02e3d", "message": "Change tenant theme import REST API resource name", "committedDate": "2020-05-30T00:31:57Z", "type": "commit"}, {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97", "url": "https://github.com/wso2/carbon-apimgt/commit/6ae0bc73c2aefce667fc3908529e7750aaa25d97", "message": "Fix review comments", "committedDate": "2020-05-30T09:18:40Z", "type": "commit"}, {"oid": "6ae0bc73c2aefce667fc3908529e7750aaa25d97", "url": "https://github.com/wso2/carbon-apimgt/commit/6ae0bc73c2aefce667fc3908529e7750aaa25d97", "message": "Fix review comments", "committedDate": "2020-05-30T09:18:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2MzUwMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r554663501", "bodyText": "Shall we remove the empty lines. Please check other places as well.", "author": "vithu30", "createdAt": "2021-01-11T02:30:04Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "diffHunk": "@@ -55,4 +73,89 @@ public static boolean isBlockConditionAccessibleToUser(String user, BlockConditi\n         return !StringUtils.isBlank(blockCondition.getTenantDomain()) && blockCondition.getTenantDomain()\n                 .equals(userTenantDomain);\n     }\n+\n+    /**\n+     * Extract the content of the provided tenant theme archive\n+     *\n+     * @param themeFile    content relevant to the tenant theme\n+     * @param tenantDomain tenant to which the theme is imported\n+     * @throws APIManagementException if an error occurs while importing tenant theme\n+     */\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = \"repository\" + File.separator + \"deployment\" + File.separator + \"server\"\n+                + File.separator + \"jaggeryapps\" + File.separator + \"devportal\" + File.separator + \"site\"\n+                + File.separator + \"public\" + File.separator + \"tenant_themes\" + File.separator + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    APIUtil.handleException(\"Unable to create tenant theme directory at \" + outputFolder);\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+", "originalCommit": "6ae0bc73c2aefce667fc3908529e7750aaa25d97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc5MjA4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r571792080", "bodyText": "Fixed with e22c474", "author": "hisanhunais", "createdAt": "2021-02-08T05:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2MzUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg5MDY4NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r554890685", "bodyText": "shall we remove this extra line?", "author": "kavishkafernando", "createdAt": "2021-01-11T08:41:47Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/RestApiAdminUtils.java", "diffHunk": "@@ -55,4 +73,89 @@ public static boolean isBlockConditionAccessibleToUser(String user, BlockConditi\n         return !StringUtils.isBlank(blockCondition.getTenantDomain()) && blockCondition.getTenantDomain()\n                 .equals(userTenantDomain);\n     }\n+\n+    /**\n+     * Extract the content of the provided tenant theme archive\n+     *\n+     * @param themeFile    content relevant to the tenant theme\n+     * @param tenantDomain tenant to which the theme is imported\n+     * @throws APIManagementException if an error occurs while importing tenant theme\n+     */\n+    public static void deployTenantTheme(InputStream themeFile, String tenantDomain) throws APIManagementException {\n+\n+        ZipInputStream zipInputStream = null;\n+        byte[] buffer = new byte[1024];\n+\n+        String outputFolder = \"repository\" + File.separator + \"deployment\" + File.separator + \"server\"\n+                + File.separator + \"jaggeryapps\" + File.separator + \"devportal\" + File.separator + \"site\"\n+                + File.separator + \"public\" + File.separator + \"tenant_themes\" + File.separator + tenantDomain;\n+\n+        try {\n+            //create output directory if it does not exist\n+            File folder = new File(outputFolder);\n+            if (!folder.exists()) {\n+                if (!folder.mkdirs()) {\n+                    APIUtil.handleException(\"Unable to create tenant theme directory at \" + outputFolder);\n+                }\n+            } else {\n+                //remove existing files inside the directory\n+                FileUtils.cleanDirectory(folder);\n+            }\n+\n+            //get the zip file content\n+            zipInputStream = new ZipInputStream(themeFile);\n+            //get the zipped file list entry\n+            ZipEntry zipEntry = zipInputStream.getNextEntry();\n+\n+            while (zipEntry != null) {\n+\n+                String fileName = zipEntry.getName();\n+                APIUtil.validateFileName(fileName);\n+                File newFile = new File(outputFolder + File.separator + fileName);\n+                String canonicalizedNewFilePath = newFile.getCanonicalPath();\n+                String canonicalizedDestinationPath = new File(outputFolder).getCanonicalPath();\n+                if (!canonicalizedNewFilePath.startsWith(canonicalizedDestinationPath)) {\n+                    APIUtil.handleException(\n+                            \"Attempt to upload invalid zip archive with file at \" + fileName + \". File path is \" +\n+                                    \"outside target directory\");\n+                }\n+\n+                if (zipEntry.isDirectory()) {\n+                    if (!newFile.exists()) {\n+                        boolean status = newFile.mkdir();\n+                        if (!status) {\n+                            APIUtil.handleException(\"Error while creating \" + newFile.getName() + \" directory\");\n+                        }\n+                    }\n+                } else {\n+                    String ext = FilenameUtils.getExtension(zipEntry.getName());\n+                    if (EXTENSION_WHITELIST.contains(ext)) {\n+                        //create all non exists folders\n+                        //else you will hit FileNotFoundException for compressed folder\n+                        new File(newFile.getParent()).mkdirs();\n+                        FileOutputStream fileOutputStream = new FileOutputStream(newFile);\n+", "originalCommit": "6ae0bc73c2aefce667fc3908529e7750aaa25d97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc5MjExNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8595#discussion_r571792114", "bodyText": "Fixed with e22c474", "author": "hisanhunais", "createdAt": "2021-02-08T05:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg5MDY4NQ=="}], "type": "inlineReview"}]}