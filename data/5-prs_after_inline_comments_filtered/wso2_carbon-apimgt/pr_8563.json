{"pr_number": 8563, "pr_title": "Support for In Memory Subscription validation", "pr_createdAt": "2020-05-25T07:49:01Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjI0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429792244", "bodyText": "do we need the commented code?", "author": "bhathiya", "createdAt": "2020-05-25T08:05:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.api.model.subscription.CachableEntity;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Policy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.util.SubscriptionDataStoreUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class SubscriptionDataStoreImpl implements SubscriptionDataStore {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataStoreImpl.class);\n+\n+    // Maps for keeping Subscription related details.\n+    private Map<String, ApplicationKeyMapping> applicationKeyMappingMap;\n+    private Map<Integer, Application> applicationMap;\n+    private Map<String, API> apiMap;\n+    //    private Map<String, Policy> policyMap;\n+//    private Map<String, APIPolicy> apiPolicyMap;\n+    private Map<String, SubscriptionPolicy> subscriptionPolicyMap;\n+    private Map<String, ApplicationPolicy> appPolicyMap;\n+    private Map<String, Subscription> subscriptionMap;\n+    private Map<String, Subscriber> subscriberMap;\n+    public static final int LOADING_POOL_SIZE = 7;\n+    private int tenantId = MultitenantConstants.SUPER_TENANT_ID;\n+    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(LOADING_POOL_SIZE);\n+\n+    public SubscriptionDataStoreImpl(int tenantId) {\n+\n+        this.tenantId = tenantId;\n+        initializeStore();\n+    }\n+\n+    public SubscriptionDataStoreImpl() {\n+\n+        initializeStore();\n+    }\n+\n+    private void initializeStore() {\n+\n+        this.applicationKeyMappingMap = new ConcurrentHashMap<>();\n+        this.applicationMap = new ConcurrentHashMap<>();\n+        this.apiMap = new ConcurrentHashMap<>();\n+//        this.policyMap = new ConcurrentHashMap<>();\n+        this.subscriptionPolicyMap = new ConcurrentHashMap<>();\n+        this.appPolicyMap = new ConcurrentHashMap<>();\n+//        this.apiPolicyMap = new ConcurrentHashMap<>();\n+        this.subscriptionMap = new ConcurrentHashMap<>();\n+        this.subscriberMap = new ConcurrentHashMap<>();\n+        initializeLoadingTasks();\n+    }\n+\n+    @Override\n+    public SubscriptionDataStore getInstance(int tenantId) {\n+\n+        return new SubscriptionDataStoreImpl(tenantId);\n+    }\n+\n+    @Override\n+    public Application getApplicationById(int appId) {\n+\n+        return applicationMap.get(appId);\n+    }\n+\n+    @Override\n+    public ApplicationKeyMapping getKeyMappingByKey(String key) {\n+\n+        return applicationKeyMappingMap.get(key);\n+    }\n+\n+    @Override\n+    public API getApiByContextAndVersion(String context, String version) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public SubscriptionPolicy getSubscriptionPolicyByName(String policyName, int tenantId) {\n+\n+        String key = InMemorySubscriptionValidationConstants.POLICY_TYPE.SUBSCRIPTION +\n+                SubscriptionDataStoreUtil.getPolicyCacheKey(policyName, tenantId);\n+        return subscriptionPolicyMap.get(key);\n+    }\n+\n+    @Override\n+    public ApplicationPolicy getApplicationPolicyByName(String policyName, int tenantId) {\n+\n+        String key = InMemorySubscriptionValidationConstants.POLICY_TYPE.APPLICATION +\n+                SubscriptionDataStoreUtil.getPolicyCacheKey(policyName, tenantId);\n+        return appPolicyMap.get(key);\n+    }\n+\n+    @Override\n+    public Subscription getSubscriptionById(int appId, int apiId) {\n+\n+        return subscriptionMap.get(SubscriptionDataStoreUtil.getSubscriptionCacheKey(appId, apiId));\n+    }\n+\n+    public void initializeLoadingTasks() {\n+\n+        Runnable apiTask = new PopulateTask<String, API>(apiMap,\n+                () -> {\n+                    try {\n+                        log.debug(\"Calling loadAllApis. \");\n+                        return new SubscriptionDataLoaderImpl().loadAllApis(tenantId);\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Exception while loading APIs \" + e);\n+                    }\n+                    return null;\n+                });\n+\n+        executorService.schedule(apiTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable subscriptionLoadingTask = new PopulateTask<String, Subscription>(subscriptionMap,\n+                () -> {\n+                    try {\n+                        log.debug(\"Calling loadAllSubscriptions.\");\n+                        return new SubscriptionDataLoaderImpl().loadAllSubscriptions(tenantId);\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Exception while loading Subscriptions \" + e);\n+                    }\n+                    return null;\n+                });\n+\n+        executorService.schedule(subscriptionLoadingTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable applicationLoadingTask = new PopulateTask<Integer, Application>(applicationMap,\n+                () -> {\n+                    try {\n+                        log.debug(\"Calling loadAllApplications.\");\n+                        return new SubscriptionDataLoaderImpl().loadAllApplications(tenantId);\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Exception while loading Applications \" + e);\n+                    }\n+                    return null;\n+                });\n+\n+        executorService.schedule(applicationLoadingTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable keyMappingsTask =\n+                new PopulateTask<String, ApplicationKeyMapping>(applicationKeyMappingMap,\n+                        () -> {\n+                            try {\n+                                log.debug(\"Calling loadAllKeyMappings.\");\n+                                return new SubscriptionDataLoaderImpl().loadAllKeyMappings(tenantId);\n+                            } catch (APIManagementException e) {\n+                                log.error(\"Exception while loading ApplicationKeyMapping \" + e);\n+                            }\n+                            return null;\n+                        });\n+\n+        executorService.schedule(keyMappingsTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable subPolicyLoadingTask =\n+                new PopulateTask<String, SubscriptionPolicy>(subscriptionPolicyMap,\n+                        () -> {\n+                            try {\n+                                log.debug(\"Calling loadAllSubscriptionPolicies.\");\n+                                return new SubscriptionDataLoaderImpl().loadAllSubscriptionPolicies(tenantId);\n+                            } catch (APIManagementException e) {\n+                                log.error(\"Exception while loading Subscription Policies \" + e);\n+                            }\n+                            return null;\n+                        });\n+\n+        executorService.schedule(subPolicyLoadingTask, 0, TimeUnit.SECONDS);\n+\n+        Runnable appPolicyLoadingTask =\n+                new PopulateTask<String, ApplicationPolicy>(appPolicyMap,\n+                        () -> {\n+                            try {\n+                                log.debug(\"Calling loadAllAppPolicies.\");\n+                                return new SubscriptionDataLoaderImpl().loadAllAppPolicies(tenantId);\n+                            } catch (APIManagementException e) {\n+                                log.error(\"Exception while loading Application Policies \" + e);\n+                            }\n+                            return null;\n+                        });\n+\n+        executorService.schedule(appPolicyLoadingTask, 0, TimeUnit.SECONDS);\n+//todo load subscribers\n+//        Runnable apiPolicyLoadingTask = //todo validate from local cache\n+//                new PeriodicPopulateTask<String, APIPolicy>(apiPolicyMap,\n+//                        () -> {\n+//                            try {\n+//                                log.debug(\"Calling loadAllApiPolicies.\");\n+//                                return dataLoader.loadAllApiPolicies();\n+//                            } catch (APIManagementException e) {\n+//                                log.error(\"Exception while loading Api Policies\");\n+//                            }\n+//                            return null;\n+//                        });\n+//\n+//        executorService.scheduleAtFixedRate(apiPolicyLoadingTask, 0,\n+//                this.mapBasedSubscriptionStoreConfig.getPolicyLoadingFrequency(), TimeUnit.SECONDS);", "originalCommit": "b9d87038d375f4b2c817907e3c69d5f75ee78df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2MDQ0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429860440", "bodyText": "this needs to implement.", "author": "isharac", "createdAt": "2020-05-25T10:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjQyNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429792425", "bodyText": "can you please clean up the code?", "author": "bhathiya", "createdAt": "2020-05-25T08:06:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.api.model.subscription.CachableEntity;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Policy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.util.SubscriptionDataStoreUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class SubscriptionDataStoreImpl implements SubscriptionDataStore {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataStoreImpl.class);\n+\n+    // Maps for keeping Subscription related details.\n+    private Map<String, ApplicationKeyMapping> applicationKeyMappingMap;\n+    private Map<Integer, Application> applicationMap;\n+    private Map<String, API> apiMap;\n+    //    private Map<String, Policy> policyMap;\n+//    private Map<String, APIPolicy> apiPolicyMap;\n+    private Map<String, SubscriptionPolicy> subscriptionPolicyMap;\n+    private Map<String, ApplicationPolicy> appPolicyMap;\n+    private Map<String, Subscription> subscriptionMap;\n+    private Map<String, Subscriber> subscriberMap;\n+    public static final int LOADING_POOL_SIZE = 7;\n+    private int tenantId = MultitenantConstants.SUPER_TENANT_ID;\n+    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(LOADING_POOL_SIZE);\n+\n+    public SubscriptionDataStoreImpl(int tenantId) {\n+\n+        this.tenantId = tenantId;\n+        initializeStore();\n+    }\n+\n+    public SubscriptionDataStoreImpl() {\n+\n+        initializeStore();\n+    }\n+\n+    private void initializeStore() {\n+\n+        this.applicationKeyMappingMap = new ConcurrentHashMap<>();\n+        this.applicationMap = new ConcurrentHashMap<>();\n+        this.apiMap = new ConcurrentHashMap<>();\n+//        this.policyMap = new ConcurrentHashMap<>();\n+        this.subscriptionPolicyMap = new ConcurrentHashMap<>();\n+        this.appPolicyMap = new ConcurrentHashMap<>();\n+//        this.apiPolicyMap = new ConcurrentHashMap<>();", "originalCommit": "b9d87038d375f4b2c817907e3c69d5f75ee78df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzM5Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429833397", "bodyText": "sure.  thanks", "author": "isharac", "createdAt": "2020-05-25T09:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MDIwMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429790202", "bodyText": "SUBSCRIPTION_LOAD_SQL -> GET_ALL_SUBSCRIPTIONS", "author": "tharindu1st", "createdAt": "2020-05-25T08:01:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/InMemorySubscriptionValidationConstants.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.api;\n+\n+public class InMemorySubscriptionValidationConstants {\n+\n+    public static final String APPLICATION_LOAD_SQL =\n+            \" SELECT \" +\n+                    \"   APP.APPLICATION_ID AS APP_ID,\" +\n+                    \"   APP.NAME AS NAME,\" +\n+                    \"   APP.APPLICATION_TIER AS TIER,\" +\n+                    \"   APP.TOKEN_TYPE AS TOKEN_TYPE,\" +\n+                    \"   APP.GROUP_ID AS GROUP_ID,\" +\n+                    \"   SUB.SUBSCRIBER_ID AS SUB_ID,\" +\n+                    \"   SUB.TENANT_ID AS TENANT_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION AS APP,\" +\n+                    \"   AM_SUBSCRIBER AS SUB\" +\n+                    \" WHERE \" +\n+                    \"   APP.SUBSCRIBER_ID = SUB.SUBSCRIBER_ID \";\n+\n+    public static final String SUBSCRIPTION_LOAD_SQL =", "originalCommit": "b9d87038d375f4b2c817907e3c69d5f75ee78df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzI3Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429833276", "bodyText": "changed", "author": "isharac", "createdAt": "2020-05-25T09:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MDIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MDgwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429790808", "bodyText": "same goes here", "author": "tharindu1st", "createdAt": "2020-05-25T08:02:52Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/InMemorySubscriptionValidationConstants.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.api;\n+\n+public class InMemorySubscriptionValidationConstants {\n+\n+    public static final String APPLICATION_LOAD_SQL =\n+            \" SELECT \" +\n+                    \"   APP.APPLICATION_ID AS APP_ID,\" +\n+                    \"   APP.NAME AS NAME,\" +\n+                    \"   APP.APPLICATION_TIER AS TIER,\" +\n+                    \"   APP.TOKEN_TYPE AS TOKEN_TYPE,\" +\n+                    \"   APP.GROUP_ID AS GROUP_ID,\" +\n+                    \"   SUB.SUBSCRIBER_ID AS SUB_ID,\" +\n+                    \"   SUB.TENANT_ID AS TENANT_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION AS APP,\" +\n+                    \"   AM_SUBSCRIBER AS SUB\" +\n+                    \" WHERE \" +\n+                    \"   APP.SUBSCRIBER_ID = SUB.SUBSCRIBER_ID \";\n+\n+    public static final String SUBSCRIPTION_LOAD_SQL =\n+            \"SELECT \" +\n+                    \"   SUBSCRIPTION_ID AS SUB_ID,\" +\n+                    \"   TIER_ID AS TIER,\" +\n+                    \"   API_ID AS API_ID,\" +\n+                    \"   APPLICATION_ID AS APP_ID,\" +\n+                    \"   SUB_STATUS AS STATUS\" +\n+                    \" FROM \" +\n+                    \"   AM_SUBSCRIPTION\";\n+\n+    public static final String GET_SUBSCRIPTION_SQL =\n+            \"SELECT \" +\n+                    \"   SUBSCRIPTION_ID AS SUB_ID,\" +\n+                    \"   TIER_ID AS TIER,\" +\n+                    \"   API_ID AS API_ID,\" +\n+                    \"   APPLICATION_ID AS APP_ID,\" +\n+                    \"   SUB_STATUS AS STATUS\" +\n+                    \" FROM \" +\n+                    \"   AM_SUBSCRIPTION\" +\n+                    \" WHERE \" +\n+                    \"   SUBSCRIPTION_ID = ? \";\n+\n+    public static final String SUBSCRIPTION_POLICY_LOAD_SQL =\n+            \"SELECT \" +\n+                    \"   POLICY_ID,\" +\n+                    \"   NAME,\" +\n+                    \"   RATE_LIMIT_COUNT,\" +\n+                    \"   RATE_LIMIT_TIME_UNIT,\" +\n+                    \"   QUOTA_TYPE,\" +\n+                    \"   STOP_ON_QUOTA_REACH, \" +\n+                    \"   TENANT_ID \" +\n+                    \"FROM \" +\n+                    \"   AM_POLICY_SUBSCRIPTION\";\n+\n+    public static final String APPLICATION_POLICY_LOAD_SQL =\n+            \"SELECT \" +\n+                    \"   POLICY_ID,\" +\n+                    \"   NAME,\" +\n+                    \"   QUOTA_TYPE,\" +\n+                    \"   TENANT_ID \" +\n+                    \"FROM \" +\n+                    \"   AM_POLICY_APPLICATION\";\n+\n+    public static final String APIS_LOAD_SQL =\n+            \"SELECT \" +\n+                    \" API_ID,\" +\n+                    \" API_PROVIDER,\" +\n+                    \" API_NAME,\" +\n+                    \" API_TIER,\" +\n+                    \" API_VERSION,\" +\n+                    \" CONTEXT \" +\n+                    \" FROM \" +\n+                    \"   AM_API\";\n+\n+    public static final String AM_KEY_MAPPINGS =\n+            \"SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   CONSUMER_KEY,\" +\n+                    \"   KEY_TYPE,\" +\n+                    \"   STATE\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION_KEY_MAPPING\";\n+\n+    public static final String AM_KEY_MAPPING =\n+            \"SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   CONSUMER_KEY,\" +\n+                    \"   KEY_TYPE,\" +\n+                    \"   STATE \" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION_KEY_MAPPING\" +\n+                    \" WHERE \" +\n+                    \"APPLICATION_ID = ? \" +\n+                    \"AND KEY_TYPE = ? \";\n+\n+    public static final String AM_KEY_MAPPING_BY_CONSUMERKAY =\n+            \"SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   CONSUMER_KEY,\" +\n+                    \"   KEY_TYPE,\" +\n+                    \"   STATE \" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION_KEY_MAPPING\" +\n+                    \" WHERE \" +\n+                    \"CONSUMER_KEY = ? \";\n+\n+    public static final String TENANT_APPLICATION_LOAD_SQL =\n+            \" SELECT \" +\n+                    \"   APP.APPLICATION_ID AS APP_ID,\" +\n+                    \"   APP.NAME AS NAME,\" +\n+                    \"   APP.APPLICATION_TIER AS TIER,\" +\n+                    \"   APP.TOKEN_TYPE AS TOKEN_TYPE,\" +\n+                    \"   APP.GROUP_ID AS GROUP_ID,\" +\n+                    \"   SUB.SUBSCRIBER_ID AS SUB_ID,\" +\n+                    \"   SUB.TENANT_ID AS TENANT_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION AS APP,\" +\n+                    \"   AM_SUBSCRIBER AS SUB\" +\n+                    \" WHERE \" +\n+                    \"   APP.SUBSCRIBER_ID = SUB.SUBSCRIBER_ID \" +\n+                    \"   AND SUB.TENANT_ID = ?\";\n+\n+    public static final String GET_APPLICATION_BY_ID_SQL =\n+            \" SELECT \" +\n+                    \"   APPLICATION_ID,\" +\n+                    \"   NAME,\" +\n+                    \"   APPLICATION_TIER,\" +\n+                    \"   TOKEN_TYPE,\" +\n+                    \"   SUBSCRIBER_ID,\" +\n+                    \"   GROUP_ID\" +\n+                    \" FROM \" +\n+                    \"   AM_APPLICATION\" +\n+                    \" WHERE \" +\n+                    \"   APPLICATION_ID = ? \";\n+\n+    public static final String TENANT_SUBSCRIPTION_LOAD_SQL =", "originalCommit": "b9d87038d375f4b2c817907e3c69d5f75ee78df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzI0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429833244", "bodyText": "changed", "author": "isharac", "createdAt": "2020-05-25T09:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MDgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjExOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429792119", "bodyText": "Do we need this", "author": "tharindu1st", "createdAt": "2020-05-25T08:05:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -631,6 +634,15 @@ private Permissions() {\n     public static final String API_KEY_VALIDATOR_APPLICATION_ACCESS_TOKEN_VALIDATION_PERIOD = API_KEY_VALIDATOR\n             + \"ApplicationTokenDefaultValidityPeriod\";\n \n+    public static class ApiKeyValidator {", "originalCommit": "b9d87038d375f4b2c817907e3c69d5f75ee78df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzEzNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429833137", "bodyText": "no, will remove it", "author": "isharac", "createdAt": "2020-05-25T09:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTc1MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429795750", "bodyText": "Shall we make Integer-> String and bring key as context:version", "author": "tharindu1st", "createdAt": "2020-05-25T08:13:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/SubscriptionValidationDAO.java", "diffHunk": "@@ -0,0 +1,639 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.model.subscription.API;\n+import org.wso2.carbon.apimgt.api.model.subscription.Application;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.api.model.subscription.Policy;\n+import org.wso2.carbon.apimgt.api.model.subscription.Subscription;\n+import org.wso2.carbon.apimgt.api.model.subscription.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class SubscriptionValidationDAO {\n+\n+    private static Log log = LogFactory.getLog(SubscriptionValidationDAO.class);\n+\n+    /*\n+     * This method can be used to retrieve all the APIs in the database\n+     *\n+     * @return {@link Map<Integer, API>}\n+     * */\n+    public static Map<Integer, API> getAllApis() {\n+\n+        Map<Integer, API> apiMap = new HashMap<>();", "originalCommit": "b9d87038d375f4b2c817907e3c69d5f75ee78df9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzczNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r429833735", "bodyText": "will do", "author": "isharac", "createdAt": "2020-05-25T09:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTc1MA=="}], "type": "inlineReview"}, {"oid": "d883f06d099e5fe84ed5a62fe9333140e668629f", "url": "https://github.com/wso2/carbon-apimgt/commit/d883f06d099e5fe84ed5a62fe9333140e668629f", "message": "refactor code", "committedDate": "2020-05-25T12:26:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MzI3Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433163277", "bodyText": "Do we have to make this a static field?", "author": "chamilaadhi", "createdAt": "2020-06-01T10:42:44Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataLoaderImpl.java", "diffHunk": "@@ -0,0 +1,497 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.util.EntityUtils;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.SubscriptionValidationConfig;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.keymgt.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataLoader;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.exception.DataLoadingException;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SubscriptionDataLoaderImpl implements SubscriptionDataLoader {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataLoaderImpl.class);\n+    private static SubscriptionValidationConfig subscriptionValidationConfig;\n+", "originalCommit": "739701366d9eca725312c083611da577ad77b526", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2NDA5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433164095", "bodyText": "If subscriptionValidationConfig is static then you would get a warning here saying \"The static field  should be accessed in a static way\"", "author": "chamilaadhi", "createdAt": "2020-06-01T10:44:42Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataLoaderImpl.java", "diffHunk": "@@ -0,0 +1,497 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.util.EntityUtils;\n+import org.wso2.carbon.apimgt.api.InMemorySubscriptionValidationConstants;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.SubscriptionValidationConfig;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.apimgt.keymgt.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataLoader;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscriber;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.exception.DataLoadingException;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SubscriptionDataLoaderImpl implements SubscriptionDataLoader {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataLoaderImpl.class);\n+    private static SubscriptionValidationConfig subscriptionValidationConfig;\n+\n+    public static final int retrievalTimeoutInSeconds = 15;\n+    public static final int retrievalRetries = 15;\n+    public static final String UTF8 = \"UTF-8\";\n+\n+    public SubscriptionDataLoaderImpl() {\n+\n+        this.subscriptionValidationConfig = ServiceReferenceHolder.getInstance()\n+                .getAPIManagerConfigurationService().getAPIManagerConfiguration()\n+                .getSubscriptionValidationConfig();\n+    }", "originalCommit": "739701366d9eca725312c083611da577ad77b526", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "41c1d104511d69e4860b5b76093a8b5f757d34c4", "url": "https://github.com/wso2/carbon-apimgt/commit/41c1d104511d69e4860b5b76093a8b5f757d34c4", "message": "in-Memory subscription validation support", "committedDate": "2020-06-02T04:53:49Z", "type": "commit"}, {"oid": "786cf722b75bf12a24d6a8e30b8436ae70c885d9", "url": "https://github.com/wso2/carbon-apimgt/commit/786cf722b75bf12a24d6a8e30b8436ae70c885d9", "message": "fix review commets", "committedDate": "2020-06-02T04:53:49Z", "type": "commit"}, {"oid": "bfa01312af4fef0a9e3a65676c5186e02191cc00", "url": "https://github.com/wso2/carbon-apimgt/commit/bfa01312af4fef0a9e3a65676c5186e02191cc00", "message": "refactor code", "committedDate": "2020-06-02T04:53:49Z", "type": "commit"}, {"oid": "f8c8bccfff9d2c80422c39b96b006e713edf1c69", "url": "https://github.com/wso2/carbon-apimgt/commit/f8c8bccfff9d2c80422c39b96b006e713edf1c69", "message": "add url mapping rest APIs and some code refactoring", "committedDate": "2020-06-02T04:53:49Z", "type": "commit"}, {"oid": "03aa9a18241916f1bcf944c9c3d4487a23018cac", "url": "https://github.com/wso2/carbon-apimgt/commit/03aa9a18241916f1bcf944c9c3d4487a23018cac", "message": "suggested changes in the code review", "committedDate": "2020-06-02T04:53:49Z", "type": "commit"}, {"oid": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "url": "https://github.com/wso2/carbon-apimgt/commit/3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "message": "Merge remote-tracking branch 'origin/master' into ishara-master\n\n# Conflicts:\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIManagerConfiguration.java", "committedDate": "2020-06-02T04:58:41Z", "type": "commit"}, {"oid": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "url": "https://github.com/wso2/carbon-apimgt/commit/3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "message": "Merge remote-tracking branch 'origin/master' into ishara-master\n\n# Conflicts:\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIManagerConfiguration.java", "committedDate": "2020-06-02T04:58:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY1MTc0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433651749", "bodyText": "shall we keep the existing subscription validation logic and remove it once the in-memory validation is there", "author": "chamilaadhi", "createdAt": "2020-06-02T06:39:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/handlers/DefaultKeyValidationHandler.java", "diffHunk": "@@ -261,4 +261,10 @@ public boolean validateScopes(TokenValidationContext validationContext) throws A\n         }\n         return true;\n     }\n+\n+    public boolean validateSubscription(TokenValidationContext tokenValidationContext)\n+            throws APIKeyMgtException {\n+        //todo validate using inmemory store\n+        return true;", "originalCommit": "3aa4d03a06b7cbdf077a27dc397c7c85b4283e61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3MDc2NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433670764", "bodyText": "sure", "author": "isharac", "createdAt": "2020-06-02T07:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY1MTc0OQ=="}], "type": "inlineReview"}, {"oid": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238", "url": "https://github.com/wso2/carbon-apimgt/commit/c48e6d3589c1f151e3e9b18b86d5abcef11d0238", "message": "remove dummy method", "committedDate": "2020-06-02T06:45:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNDE4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433724183", "bodyText": "Seems like the enabled property is not set here", "author": "chamilaadhi", "createdAt": "2020-06-02T08:56:38Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/SubscriptionValidationConfig.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl;\n+\n+public class SubscriptionValidationConfig {\n+\n+    private boolean enabled;\n+    private String serviceURL;\n+    private String username;\n+    private String password;\n+\n+    private SubscriptionValidationConfig() {\n+\n+    }\n+\n+    public String getServiceURL() {\n+\n+        return serviceURL;\n+    }\n+\n+    public String getUsername() {\n+\n+        return username;\n+    }\n+\n+    public String getPassword() {\n+\n+        return password;\n+    }\n+\n+    public boolean isEnabled() {\n+\n+        return enabled;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+\n+        this.enabled = enabled;\n+    }\n+\n+    public static class Builder {\n+\n+        private boolean enabled;\n+        private String serviceURL;\n+        private String username;\n+        private String password;\n+\n+        public Builder serviceURL(String serviceURL) {\n+\n+            this.serviceURL = serviceURL;\n+            return this;\n+        }\n+\n+        public Builder username(String username) {\n+\n+            this.username = username;\n+            return this;\n+        }\n+\n+        public Builder password(String password) {\n+\n+            this.password = password;\n+            return this;\n+        }\n+\n+        public Builder(boolean enabled) {\n+\n+            this.enabled = enabled;\n+        }\n+\n+        public SubscriptionValidationConfig build() {\n+\n+            SubscriptionValidationConfig subscriptionValidationConfig = new SubscriptionValidationConfig();\n+            subscriptionValidationConfig.serviceURL = serviceURL;\n+            subscriptionValidationConfig.username = username;\n+            subscriptionValidationConfig.password = password;\n+            return subscriptionValidationConfig;", "originalCommit": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNjAzMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434326030", "bodyText": "fixed", "author": "isharac", "createdAt": "2020-06-03T06:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNDE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczNDgyNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r433734825", "bodyText": "here we are retrieving using the tenant id . but we set the map using the tenant domain. need to use same way", "author": "chamilaadhi", "createdAt": "2020-06-02T09:14:21Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/SubscriptionDataHolder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt;\n+\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.impl.SubscriptionDataStoreImpl;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/*\n+ * This class holds tenant wise subscription data stores\n+ * */\n+public class SubscriptionDataHolder {\n+\n+    private Map<String, SubscriptionDataStore> subscriptionStore =\n+            new ConcurrentHashMap<>();\n+    private static SubscriptionDataHolder instance = new SubscriptionDataHolder();\n+\n+    public static SubscriptionDataHolder getInstance() {\n+\n+        return instance;\n+    }\n+\n+    public void registerTenantSubscriptionStore(String tenantDomain) {\n+\n+        SubscriptionDataStore tenantStore = subscriptionStore.get(tenantDomain);\n+        if (tenantStore == null) {\n+            tenantStore = new SubscriptionDataStoreImpl(tenantDomain);\n+        }\n+        subscriptionStore.put(tenantDomain, tenantStore);\n+    }\n+\n+    public void unregisterTenantSubscriptionStore(int tenantId) {\n+\n+        subscriptionStore.remove(tenantId);\n+    }\n+\n+    public SubscriptionDataStore getTenantSubscriptionStore(int tenantId) {\n+\n+        return subscriptionStore.get(tenantId);", "originalCommit": "c48e6d3589c1f151e3e9b18b86d5abcef11d0238", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "434bdb7d78df4fc883cdcb60f54d760f838b8ed5", "url": "https://github.com/wso2/carbon-apimgt/commit/434bdb7d78df4fc883cdcb60f54d760f838b8ed5", "message": "fix tenantId", "committedDate": "2020-06-02T09:34:39Z", "type": "commit"}, {"oid": "4cd1d72754dc1a306d7f7de2d9d48cf0b9e2d2e9", "url": "https://github.com/wso2/carbon-apimgt/commit/4cd1d72754dc1a306d7f7de2d9d48cf0b9e2d2e9", "message": "Merge remote-tracking branch 'origin/master' into ishara-master\n\n# Conflicts:\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/webapp/WEB-INF/beans.xml\n#\tcomponents/apimgt/org.wso2.carbon.apimgt.internal.service/swagger.json", "committedDate": "2020-06-02T09:46:06Z", "type": "commit"}, {"oid": "19b1e5975e502b4d358c1415e71a432161d6a52c", "url": "https://github.com/wso2/carbon-apimgt/commit/19b1e5975e502b4d358c1415e71a432161d6a52c", "message": "fix tenantId", "committedDate": "2020-06-02T10:04:47Z", "type": "commit"}, {"oid": "5dcd9353206267148980d99c80ccb84f9adaa724", "url": "https://github.com/wso2/carbon-apimgt/commit/5dcd9353206267148980d99c80ccb84f9adaa724", "message": "Merge remote-tracking branch 'origin/master' into ishara-master", "committedDate": "2020-06-03T00:31:40Z", "type": "commit"}, {"oid": "f6d7ea678c1fea53e16536217059123471dc21e3", "url": "https://github.com/wso2/carbon-apimgt/commit/f6d7ea678c1fea53e16536217059123471dc21e3", "message": "fix at response reading", "committedDate": "2020-06-03T02:11:10Z", "type": "commit"}, {"oid": "a618c7522e2b6e83312264e0b451eb9d65b0b94b", "url": "https://github.com/wso2/carbon-apimgt/commit/a618c7522e2b6e83312264e0b451eb9d65b0b94b", "message": "fix at response reading", "committedDate": "2020-06-03T04:48:29Z", "type": "commit"}, {"oid": "46624521490978c77cfdce2bafd455b8a2e67f20", "url": "https://github.com/wso2/carbon-apimgt/commit/46624521490978c77cfdce2bafd455b8a2e67f20", "message": "add enabled property", "committedDate": "2020-06-03T05:10:21Z", "type": "commit"}, {"oid": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a", "url": "https://github.com/wso2/carbon-apimgt/commit/90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a", "message": "add missing class", "committedDate": "2020-06-03T05:36:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1ODg0Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434358842", "bodyText": "missed to implement", "author": "chamilaadhi", "createdAt": "2020-06-03T07:21:13Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.keymgt.model.impl;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.subscription.CacheableEntity;\n+import org.wso2.carbon.apimgt.keymgt.model.SubscriptionDataStore;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.API;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Application;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Policy;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.Subscription;\n+import org.wso2.carbon.apimgt.keymgt.model.entity.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.keymgt.model.util.SubscriptionDataStoreUtil;\n+import org.wso2.carbon.base.MultitenantConstants;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+public class SubscriptionDataStoreImpl implements SubscriptionDataStore {\n+\n+    private static final Log log = LogFactory.getLog(SubscriptionDataStoreImpl.class);\n+    public enum POLICY_TYPE {\n+        SUBSCRIPTION,\n+        APPLICATION\n+    }\n+    // Maps for keeping Subscription related details.\n+    private Map<String, ApplicationKeyMapping> applicationKeyMappingMap;\n+    private Map<Integer, Application> applicationMap;\n+    private Map<String, API> apiMap;\n+    private Map<String, SubscriptionPolicy> subscriptionPolicyMap;\n+    private Map<String, ApplicationPolicy> appPolicyMap;\n+    private Map<String, Subscription> subscriptionMap;\n+    public static final int LOADING_POOL_SIZE = 7;\n+    private String tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;\n+    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(LOADING_POOL_SIZE);\n+\n+    public SubscriptionDataStoreImpl(String tenantDomain) {\n+\n+        this.tenantDomain = tenantDomain;\n+        initializeStore();\n+    }\n+\n+    public SubscriptionDataStoreImpl() {\n+\n+        initializeStore();\n+    }\n+\n+    private void initializeStore() {\n+\n+        this.applicationKeyMappingMap = new ConcurrentHashMap<>();\n+        this.applicationMap = new ConcurrentHashMap<>();\n+        this.apiMap = new ConcurrentHashMap<>();\n+        this.subscriptionPolicyMap = new ConcurrentHashMap<>();\n+        this.appPolicyMap = new ConcurrentHashMap<>();\n+        this.subscriptionMap = new ConcurrentHashMap<>();\n+        initializeLoadingTasks();\n+    }\n+\n+    @Override\n+    public Application getApplicationById(int appId) {\n+\n+        return applicationMap.get(appId);\n+    }\n+\n+    @Override\n+    public ApplicationKeyMapping getKeyMappingByKey(String key) {\n+\n+        return applicationKeyMappingMap.get(key);\n+    }\n+\n+    @Override\n+    public API getApiByContextAndVersion(String context, String version) {\n+\n+        return null;", "originalCommit": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTc1NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434595754", "bodyText": "rateLimitCount,rateLimitTimeUnit,stopOnQuotaReach are not set", "author": "chamilaadhi", "createdAt": "2020-06-03T14:08:43Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/java/org/wso2/carbon/apimgt/internal/service/utils/SubscriptionValidationDataUtil.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.internal.service.utils;\n+\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.model.subscription.API;\n+import org.wso2.carbon.apimgt.api.model.subscription.Application;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationKeyMapping;\n+import org.wso2.carbon.apimgt.api.model.subscription.ApplicationPolicy;\n+import org.wso2.carbon.apimgt.api.model.subscription.Subscription;\n+import org.wso2.carbon.apimgt.api.model.subscription.SubscriptionPolicy;\n+import org.wso2.carbon.apimgt.api.model.subscription.URLMapping;\n+import org.wso2.carbon.apimgt.internal.service.dto.APIDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.APIListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationAttributeDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationKeyMappingDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationKeyMappingListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationPolicyDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.ApplicationPolicyListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.GroupIdDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionPolicyDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.SubscriptionPolicyListDTO;\n+import org.wso2.carbon.apimgt.internal.service.dto.URLMappingDTO;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SubscriptionValidationDataUtil {\n+\n+    public static APIDTO fromAPItoDTO(API model) throws APIManagementException {\n+\n+        APIDTO apidto = null;\n+        if (model != null) {\n+            apidto = new APIDTO();\n+            apidto.setApiId(model.getApiId());\n+            apidto.setVersion(model.getVersion());\n+            apidto.setContext(model.getContext());\n+            apidto.setPolicy(model.getPolicy());\n+            apidto.setProvider(model.getProvider());\n+            List<URLMapping> urlMappings = model.getAllResources();\n+            List<URLMappingDTO> urlMappingsDTO = new ArrayList<>();\n+            for (URLMapping urlMapping : urlMappings) {\n+                URLMappingDTO urlMappingDTO = new URLMappingDTO();\n+                urlMappingDTO.setAuthScheme(urlMapping.getAuthScheme());\n+                urlMappingDTO.setHttpMethod(urlMapping.getHttpMethod());\n+                urlMappingDTO.setThrottlingPolicy(urlMapping.getThrottlingPolicy());\n+                urlMappingsDTO.add(urlMappingDTO);\n+            }\n+            apidto.setUrlMaping(urlMappingsDTO);\n+        }\n+        return apidto;\n+    }\n+\n+    public static APIListDTO fromAPIToAPIListDTO(API model) throws APIManagementException {\n+\n+        APIListDTO apiListdto = new APIListDTO();\n+        if (model != null) {\n+            APIDTO apidto = new APIDTO();\n+            apidto.setApiId(model.getApiId());\n+            apidto.setVersion(model.getVersion());\n+            apidto.setContext(model.getContext());\n+            apidto.setPolicy(model.getPolicy());\n+            apidto.setProvider(model.getProvider());\n+            List<URLMapping> urlMappings = model.getAllResources();\n+            List<URLMappingDTO> urlMappingsDTO = new ArrayList<>();\n+            for (URLMapping urlMapping : urlMappings) {\n+                URLMappingDTO urlMappingDTO = new URLMappingDTO();\n+                urlMappingDTO.setAuthScheme(urlMapping.getAuthScheme());\n+                urlMappingDTO.setHttpMethod(urlMapping.getHttpMethod());\n+                urlMappingDTO.setThrottlingPolicy(urlMapping.getThrottlingPolicy());\n+                urlMappingsDTO.add(urlMappingDTO);\n+            }\n+            apidto.setUrlMaping(urlMappingsDTO);\n+            apiListdto.setCount(1);\n+            apiListdto.getList().add(apidto);\n+        } else {\n+            apiListdto.setCount(0);\n+        }\n+        return apiListdto;\n+    }\n+\n+    public static APIListDTO fromAPIListToAPIListDTO(List<API> apiList) throws APIManagementException {\n+\n+        APIListDTO apiListDTO = new APIListDTO();\n+        apiListDTO.getList();\n+\n+        if (apiList != null) {\n+            for (API api : apiList) {\n+                apiListDTO.getList().add(fromAPItoDTO(api));\n+            }\n+            apiListDTO.setCount(apiList.size());\n+        } else {\n+            apiListDTO.setCount(0);\n+        }\n+\n+        return apiListDTO;\n+    }\n+\n+    public static ApplicationListDTO fromApplicationToApplicationListDTO(List<Application> model) {\n+\n+        ApplicationListDTO applicationListDTO = new ApplicationListDTO();\n+        if (model != null) {\n+            for (Application appModel : model) {\n+                ApplicationDTO applicationDTO = new ApplicationDTO();\n+                applicationDTO.setId(appModel.getId());\n+                applicationDTO.setName(appModel.getName());\n+                applicationDTO.setPolicy(appModel.getPolicy());\n+                applicationDTO.setSubName(appModel.getSubName());\n+                applicationDTO.setTokenType(appModel.getTokenType());\n+\n+                Set<String> groupIds = appModel.getGroupIds();\n+                for (String grp : groupIds) {\n+                    GroupIdDTO groupIdDTO = new GroupIdDTO();\n+                    groupIdDTO.setApplicationId(appModel.getId());\n+                    groupIdDTO.setGroupId(grp);\n+                    applicationDTO.getGroupIds().add(groupIdDTO);\n+                }\n+\n+                Map<String, String> attributes = appModel.getAttributesMap();\n+                for (String attrib : attributes.keySet()) {\n+                    ApplicationAttributeDTO applicationAttributeDTO = new ApplicationAttributeDTO();\n+                    applicationAttributeDTO.setName(attrib);\n+                    applicationAttributeDTO.setValue(attributes.get(attrib));\n+                    applicationDTO.getAttributes().add(applicationAttributeDTO);\n+                }\n+                applicationListDTO.getList().add(applicationDTO);\n+            }\n+            applicationListDTO.setCount(model.size());\n+\n+        } else {\n+            applicationListDTO.setCount(0);\n+        }\n+        return applicationListDTO;\n+    }\n+\n+    public static SubscriptionListDTO fromSubscriptionToSubscriptionListDTO(List<Subscription> model) {\n+\n+        SubscriptionListDTO subscriptionListDTO = new SubscriptionListDTO();\n+        if (model != null) {\n+            for (Subscription subsModel : model) {\n+                SubscriptionDTO subscriptionDTO = new SubscriptionDTO();\n+                subscriptionDTO.setApiId(subsModel.getApiId());\n+                subscriptionDTO.setAppId(subsModel.getAppId());\n+                subscriptionDTO.setSubscriptionId(subsModel.getSubscriptionId());\n+                subscriptionDTO.setPolicyId(subsModel.getPolicyId());\n+                subscriptionDTO.setSubscriptionState(subsModel.getSubscriptionState());\n+\n+                subscriptionListDTO.getList().add(subscriptionDTO);\n+\n+            }\n+            subscriptionListDTO.setCount(model.size());\n+\n+        } else {\n+            subscriptionListDTO.setCount(0);\n+        }\n+        return subscriptionListDTO;\n+    }\n+\n+    public static SubscriptionPolicyListDTO fromSubscriptionPolicyToSubscriptionPolicyListDTO(\n+            List<SubscriptionPolicy> model) {\n+\n+        SubscriptionPolicyListDTO subscriptionPolicyListDTO = new SubscriptionPolicyListDTO();\n+        if (model != null) {\n+            for (SubscriptionPolicy subscriptionPolicyModel : model) {\n+                SubscriptionPolicyDTO subscriptionPolicyDTO = new SubscriptionPolicyDTO();\n+                subscriptionPolicyDTO.setId(subscriptionPolicyModel.getId());\n+                subscriptionPolicyDTO.setName(subscriptionPolicyModel.getName());\n+                subscriptionPolicyDTO.setQuotaType(subscriptionPolicyModel.getQuotaType());\n+                subscriptionPolicyDTO.setTenantId(subscriptionPolicyModel.getTenantId());\n+\n+                subscriptionPolicyListDTO.getList().add(subscriptionPolicyDTO);", "originalCommit": "90c7de7e8d9bd3a8e7eac04b0a8971bc0900fe3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNjQ4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8563#discussion_r434936480", "bodyText": "fixed", "author": "isharac", "createdAt": "2020-06-04T01:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTc1NA=="}], "type": "inlineReview"}, {"oid": "5006856fb97952943ad19f8a78f371935b7cd9ca", "url": "https://github.com/wso2/carbon-apimgt/commit/5006856fb97952943ad19f8a78f371935b7cd9ca", "message": "add api-policies API", "committedDate": "2020-06-03T17:01:52Z", "type": "commit"}, {"oid": "f0b3dc1f995348de9c414c29deb2575c32e54b1e", "url": "https://github.com/wso2/carbon-apimgt/commit/f0b3dc1f995348de9c414c29deb2575c32e54b1e", "message": "add url pattern to api", "committedDate": "2020-06-04T01:04:33Z", "type": "commit"}]}