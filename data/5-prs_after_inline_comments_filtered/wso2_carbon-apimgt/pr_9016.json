{"pr_number": 9016, "pr_title": "Configure the ability to add event waiting time in gateway", "pr_createdAt": "2020-07-21T17:44:12Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/9016", "timeline": [{"oid": "2a9dbdc034fb3900a49be90f530aa6a87c2daa81", "url": "https://github.com/wso2/carbon-apimgt/commit/2a9dbdc034fb3900a49be90f530aa6a87c2daa81", "message": "Adding event waiting time config", "committedDate": "2020-07-21T17:24:44Z", "type": "commit"}, {"oid": "8527c2a75748030c8bc767fece1edd411c31248d", "url": "https://github.com/wso2/carbon-apimgt/commit/8527c2a75748030c8bc767fece1edd411c31248d", "message": "Resolve typos in configs", "committedDate": "2020-07-22T07:05:54Z", "type": "commit"}, {"oid": "d404668c3c8f8833721536e301404a4dccddf7c5", "url": "https://github.com/wso2/carbon-apimgt/commit/d404668c3c8f8833721536e301404a4dccddf7c5", "message": "using a scheduler for retrival", "committedDate": "2020-07-22T07:14:10Z", "type": "commit"}, {"oid": "ea85ae9ada4fa3072b56a52f091a1808916a5834", "url": "https://github.com/wso2/carbon-apimgt/commit/ea85ae9ada4fa3072b56a52f091a1808916a5834", "message": "Update the default waiting time", "committedDate": "2020-07-22T07:34:04Z", "type": "commit"}, {"oid": "47d790b739bb69f607230509a18f052222948de5", "url": "https://github.com/wso2/carbon-apimgt/commit/47d790b739bb69f607230509a18f052222948de5", "message": "Refractor methods", "committedDate": "2020-07-22T07:42:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTIyNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458809227", "bodyText": "I think putting it this way would make each and every event handled in a different thread. And be started with a delay. Can we only start a task when an API is need to be deployed.", "author": "jaadds", "createdAt": "2020-07-22T13:53:50Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -81,9 +84,18 @@ public void onMessage(Message message) {\n                              * timestamp - system time of the event published\n                              * event - event data\n                              */\n-                            handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),\n-                                    (Long) map.get(APIConstants.EVENT_TIMESTAMP),\n-                                    (String) map.get(APIConstants.EVENT_PAYLOAD));\n+\n+                            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n+                            final Runnable task = new Runnable() {\n+                                @Override\n+                                public void run() {\n+                                    handleNotificationMessage((String) map.get(APIConstants.EVENT_TYPE),", "originalCommit": "47d790b739bb69f607230509a18f052222948de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMTc4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458821787", "bodyText": "We can do the change like below:\n\nCreate a new ThreadScheduler at the JMSMessageListener with a fixed number of threads.\nWhile submitting the Task to the above Scheduler override the run method either with deploy or undeploy methods.\nUse no delay while submitting the task - we initially discussed about it, but in a later discussion changed the approach.\nNow the thread will be different from JMS event receiving thread. So do the waiting in the same thread by using a thread sleep and continue with the pulling and deployment.", "author": "jaadds", "createdAt": "2020-07-22T14:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTY1OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458885659", "bodyText": "67da620", "author": "Sarangan0219", "createdAt": "2020-07-22T15:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTIyNw=="}], "type": "inlineReview"}, {"oid": "67da6203b4479b5838882a8416f61db2eb3af7fe", "url": "https://github.com/wso2/carbon-apimgt/commit/67da6203b4479b5838882a8416f61db2eb3af7fe", "message": "Refractor code", "committedDate": "2020-07-22T15:02:15Z", "type": "commit"}, {"oid": "aa5f3d322b17eb81e215ad275adf9caff43984f3", "url": "https://github.com/wso2/carbon-apimgt/commit/aa5f3d322b17eb81e215ad275adf9caff43984f3", "message": "Spawn new threads for deploy and undeploy", "committedDate": "2020-07-22T16:17:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjU1OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458942558", "bodyText": "Make this a constant.", "author": "jaadds", "createdAt": "2020-07-22T16:57:02Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -55,6 +58,7 @@\n     private InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n     GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n             .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);", "originalCommit": "aa5f3d322b17eb81e215ad275adf9caff43984f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDk0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458950949", "bodyText": "5e8ba54", "author": "Sarangan0219", "createdAt": "2020-07-22T17:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjU1OA=="}], "type": "inlineReview"}, {"oid": "804a25d93996ba4970ca022d2b9238d9648ca53a", "url": "https://github.com/wso2/carbon-apimgt/commit/804a25d93996ba4970ca022d2b9238d9648ca53a", "message": "resolve merge conflicts", "committedDate": "2020-07-22T16:57:22Z", "type": "commit"}, {"oid": "5e8ba5419c5fc20d7981d5a593400c8ceecf9d2b", "url": "https://github.com/wso2/carbon-apimgt/commit/5e8ba5419c5fc20d7981d5a593400c8ceecf9d2b", "message": "refractor code", "committedDate": "2020-07-22T16:59:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NTM2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458945368", "bodyText": "As a practice give a name to Threads in the thread pool. So use the override of newScheduledThreadPool which accepts a ThreadFactory, and use it to give a name.", "author": "jaadds", "createdAt": "2020-07-22T17:01:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -55,6 +58,7 @@\n     private InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n     GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n             .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);", "originalCommit": "aa5f3d322b17eb81e215ad275adf9caff43984f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjQ2MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458946461", "bodyText": "Log the exception here.", "author": "jaadds", "createdAt": "2020-07-22T17:03:23Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -60,6 +64,11 @@ public void init() throws ArtifactSynchronizerException {\n     public String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException {\n         CloseableHttpResponse httpResponse = null;\n+        try {\n+            Thread.sleep(gatewayArtifactSynchronizerProperties.getEventWaitingTime());\n+        } catch (InterruptedException e) {\n+            // Ignore", "originalCommit": "aa5f3d322b17eb81e215ad275adf9caff43984f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDc5Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458950797", "bodyText": "bb95666", "author": "Sarangan0219", "createdAt": "2020-07-22T17:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0Nzg1MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458947850", "bodyText": "Add a meaningful debug log correlating EventId, APIName and other useful details in the event.", "author": "jaadds", "createdAt": "2020-07-22T17:05:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -111,12 +114,24 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n             gatewayEvent.getGatewayLabels().retainAll(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n             if (!gatewayEvent.getGatewayLabels().isEmpty()) {\n                 String gatewayLabel = gatewayEvent.getGatewayLabels().iterator().next();\n+                Runnable task = null;\n                 if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n-                    inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                    task = new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                        }\n+                    };\n                 } else if (APIConstants.EventType.REMOVE_API_FROM_GATEWAY.name().equals(eventType)) {\n-                    inMemoryApiDeployer.unDeployAPI(gatewayEvent.getApiId(), gatewayLabel);\n-                }\n+                    task = new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            inMemoryApiDeployer.unDeployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                        }\n+                    };\n                 }\n+                scheduler.schedule(task, 1, TimeUnit.MILLISECONDS);", "originalCommit": "aa5f3d322b17eb81e215ad275adf9caff43984f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDc3Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r458950776", "bodyText": "bb95666", "author": "Sarangan0219", "createdAt": "2020-07-22T17:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0Nzg1MA=="}], "type": "inlineReview"}, {"oid": "bb95666b85e9ca2fe650f54b212bcdce5d06008f", "url": "https://github.com/wso2/carbon-apimgt/commit/bb95666b85e9ca2fe650f54b212bcdce5d06008f", "message": "address review comments", "committedDate": "2020-07-22T17:09:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5MDE0OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r546890148", "bodyText": "Don't we have to include context information in the error log? ie: API id", "author": "tgtshanika", "createdAt": "2020-12-21T19:31:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -111,24 +114,39 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n         if ((APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)\n                 || APIConstants.EventType.REMOVE_API_FROM_GATEWAY.name().equals(eventType))\n                 && gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            DeployAPIInGatewayEvent gatewayEvent = new Gson().fromJson(new String(eventDecoded),\n-                    DeployAPIInGatewayEvent.class);\n+            DeployAPIInGatewayEvent gatewayEvent = new Gson().fromJson(new String(eventDecoded), DeployAPIInGatewayEvent.class);\n             gatewayEvent.getGatewayLabels().retainAll(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n             if (!gatewayEvent.getGatewayLabels().isEmpty()) {\n                 String gatewayLabel = gatewayEvent.getGatewayLabels().iterator().next();\n-                try {\n-                    if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n-                        inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n-                        if (debugEnabled) {\n-                            log.debug(gatewayEvent.getEventId() + \" processed and deployed in gateway\");\n+                Runnable task = null;\n+                if (APIConstants.EventType.DEPLOY_API_IN_GATEWAY.name().equals(eventType)) {\n+                    task = new Runnable() {\n+\n+                        @Override public void run() {\n+                            try {\n+                                inMemoryApiDeployer.deployAPI(gatewayEvent.getApiId(), gatewayLabel);\n+                            } catch (ArtifactSynchronizerException e) {\n+                                log.error(\"Error in deploying artifacts\");", "originalCommit": "bb95666b85e9ca2fe650f54b212bcdce5d06008f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc2NTE5OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9016#discussion_r551765198", "bodyText": "Fixed 63c98e7", "author": "Sarangan0219", "createdAt": "2021-01-05T07:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5MDE0OA=="}], "type": "inlineReview"}]}