{"pr_number": 4128, "pr_title": "Role based users in Projects", "pr_createdAt": "2020-06-04T04:41:50Z", "pr_url": "https://github.com/apache/cloudstack/pull/4128", "timeline": [{"oid": "a2056356faabd508ea580679898204a66db62387", "url": "https://github.com/apache/cloudstack/commit/a2056356faabd508ea580679898204a66db62387", "message": "Enable role based users in projects", "committedDate": "2020-05-29T11:42:23Z", "type": "commit"}, {"oid": "2fe531785b79d863226cce55b4492b6672d2a39b", "url": "https://github.com/apache/cloudstack/commit/2fe531785b79d863226cce55b4492b6672d2a39b", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into proj-roleBased-users", "committedDate": "2020-06-04T04:39:05Z", "type": "commit"}, {"oid": "1443602940590682e2a54de61fab3ab0e9993787", "url": "https://github.com/apache/cloudstack/commit/1443602940590682e2a54de61fab3ab0e9993787", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into proj-roleBased-users", "committedDate": "2020-06-04T04:39:35Z", "type": "commit"}, {"oid": "c9b97460dd49f491660e8f643c120057bcd05cbc", "url": "https://github.com/apache/cloudstack/commit/c9b97460dd49f491660e8f643c120057bcd05cbc", "message": "Modified list responses for projectAccounts and invitations to include userid", "committedDate": "2020-06-05T13:17:25Z", "type": "commit"}, {"oid": "44aa2399ca80cf0104df00a0dbd56662f4ae98b5", "url": "https://github.com/apache/cloudstack/commit/44aa2399ca80cf0104df00a0dbd56662f4ae98b5", "message": "revert API parameter change", "committedDate": "2020-06-09T10:34:08Z", "type": "commit"}, {"oid": "6e3af3cda0c3b9b1c20a307440efda13dbaa9c17", "url": "https://github.com/apache/cloudstack/commit/6e3af3cda0c3b9b1c20a307440efda13dbaa9c17", "message": "changes for backward compatability", "committedDate": "2020-06-11T04:01:30Z", "type": "commit"}, {"oid": "7e0a64c442a1401881655ba3f44227d4554331e8", "url": "https://github.com/apache/cloudstack/commit/7e0a64c442a1401881655ba3f44227d4554331e8", "message": "restrict user invitation visibility to only that specific user", "committedDate": "2020-06-12T10:56:53Z", "type": "commit"}, {"oid": "7e0a64c442a1401881655ba3f44227d4554331e8", "url": "https://github.com/apache/cloudstack/commit/7e0a64c442a1401881655ba3f44227d4554331e8", "message": "restrict user invitation visibility to only that specific user", "committedDate": "2020-06-12T10:56:53Z", "type": "forcePushed"}, {"oid": "e2fbd310c561b3657bf346ade6dd9a78a3e40bf5", "url": "https://github.com/apache/cloudstack/commit/e2fbd310c561b3657bf346ade6dd9a78a3e40bf5", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into proj-roleBased-users", "committedDate": "2020-06-12T10:57:39Z", "type": "commit"}, {"oid": "b2730dd5d6963da17eb82998677ce54d9332cda2", "url": "https://github.com/apache/cloudstack/commit/b2730dd5d6963da17eb82998677ce54d9332cda2", "message": "Added additional response params - listProjectAccounts + schema changes + Marvin tests", "committedDate": "2020-06-18T08:41:53Z", "type": "commit"}, {"oid": "b2730dd5d6963da17eb82998677ce54d9332cda2", "url": "https://github.com/apache/cloudstack/commit/b2730dd5d6963da17eb82998677ce54d9332cda2", "message": "Added additional response params - listProjectAccounts + schema changes + Marvin tests", "committedDate": "2020-06-18T08:41:53Z", "type": "forcePushed"}, {"oid": "1f7a81bfc3319ed98cb291c56a0a2231ded129d8", "url": "https://github.com/apache/cloudstack/commit/1f7a81bfc3319ed98cb291c56a0a2231ded129d8", "message": "Refactored code", "committedDate": "2020-06-19T01:06:47Z", "type": "commit"}, {"oid": "0fcb210ad601ad52cb8fb279d904d3fc1a77a715", "url": "https://github.com/apache/cloudstack/commit/0fcb210ad601ad52cb8fb279d904d3fc1a77a715", "message": "Add marvin tests", "committedDate": "2020-06-22T05:18:29Z", "type": "commit"}, {"oid": "0fcb210ad601ad52cb8fb279d904d3fc1a77a715", "url": "https://github.com/apache/cloudstack/commit/0fcb210ad601ad52cb8fb279d904d3fc1a77a715", "message": "Add marvin tests", "committedDate": "2020-06-22T05:18:29Z", "type": "forcePushed"}, {"oid": "f37e9689396a641b5ee04d2fcd6a875cc77ad6da", "url": "https://github.com/apache/cloudstack/commit/f37e9689396a641b5ee04d2fcd6a875cc77ad6da", "message": "Permit root admin to perform operation on/in projects they aren't part of", "committedDate": "2020-06-24T12:20:27Z", "type": "commit"}, {"oid": "96fc8776b8d506409fe9d33ceed08216c7cef307", "url": "https://github.com/apache/cloudstack/commit/96fc8776b8d506409fe9d33ceed08216c7cef307", "message": "Permit domain admins", "committedDate": "2020-06-25T11:00:15Z", "type": "commit"}, {"oid": "ab3b5a12a7a4f7e94114b369b16e4c692f149680", "url": "https://github.com/apache/cloudstack/commit/ab3b5a12a7a4f7e94114b369b16e4c692f149680", "message": "fix query parameter for listing project role permissions", "committedDate": "2020-06-29T05:33:26Z", "type": "commit"}, {"oid": "c1bf01884d12b6ba9a94fe817013707325c7b8c2", "url": "https://github.com/apache/cloudstack/commit/c1bf01884d12b6ba9a94fe817013707325c7b8c2", "message": "review comments (offline)", "committedDate": "2020-06-29T11:36:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NjY1Mg==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448786652", "bodyText": "nit - roletype is enough? unless of course we're using this with projectroletype in some API", "author": "rhtyd", "createdAt": "2020-07-02T06:55:32Z", "path": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java", "diffHunk": "@@ -472,11 +473,16 @@\n     public static final String PROJECT = \"project\";\n     public static final String ROLE = \"role\";\n     public static final String ROLE_ID = \"roleid\";\n+    public static final String ACCOUNT_ROLE_TYPE = \"accountroletype\";", "originalCommit": "c1bf01884d12b6ba9a94fe817013707325c7b8c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzI1MQ==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448787251", "bodyText": "nit - probably this means projectrolepermissionid? (yes, naming is hard, I'm trying to guess what is parameter is for)", "author": "rhtyd", "createdAt": "2020-07-02T06:56:51Z", "path": "api/src/main/java/org/apache/cloudstack/api/ApiConstants.java", "diffHunk": "@@ -472,11 +473,16 @@\n     public static final String PROJECT = \"project\";\n     public static final String ROLE = \"role\";\n     public static final String ROLE_ID = \"roleid\";\n+    public static final String ACCOUNT_ROLE_TYPE = \"accountroletype\";\n+    public static final String PROJECT_ROLE_ID = \"projectroleid\";\n+    public static final String PROJECT_ROLE_NAME = \"projectrolename\";\n+    public static final String PROJECT_ROLE_TYPE = \"projectroletype\";\n     public static final String ROLE_TYPE = \"roletype\";\n     public static final String ROLE_NAME = \"rolename\";\n     public static final String PERMISSION = \"permission\";\n     public static final String RULE = \"rule\";\n     public static final String RULE_ID = \"ruleid\";\n+    public static final String PROJECT_RULE_ID = \"projectruleid\";", "originalCommit": "c1bf01884d12b6ba9a94fe817013707325c7b8c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzYwNQ==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448787605", "bodyText": "Could this cause any exception; maybe return empty array instead or null?", "author": "rhtyd", "createdAt": "2020-07-02T06:57:34Z", "path": "api/src/main/java/org/apache/cloudstack/api/BaseCmd.java", "diffHunk": "@@ -264,6 +269,10 @@ public String getActualCommandName() {\n      */\n     public abstract long getEntityOwnerId();\n \n+    public List<Long> getEntityOwnerIds() {\n+        return null;", "originalCommit": "c1bf01884d12b6ba9a94fe817013707325c7b8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NDEyMw==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448864123", "bodyText": "the only place referenced - ParamProcessWorker class has been handled to check if a null is returned", "author": "Pearl1594", "createdAt": "2020-07-02T09:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDE1Nw==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r450954157", "bodyText": "+1 verified", "author": "nvazquez", "createdAt": "2020-07-07T15:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NzYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4ODkyNQ==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r448788925", "bodyText": "@Pearl1594 can you add a Strings.isNullOrEmpty here", "author": "rhtyd", "createdAt": "2020-07-02T07:00:29Z", "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/dao/ProjectRoleDaoImpl.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl.dao;\n+\n+import java.util.List;\n+\n+import org.apache.cloudstack.acl.ProjectRoleVO;\n+\n+import com.cloud.utils.db.GenericDaoBase;\n+import com.cloud.utils.db.SearchBuilder;\n+import com.cloud.utils.db.SearchCriteria;\n+\n+public class ProjectRoleDaoImpl extends GenericDaoBase<ProjectRoleVO, Long>  implements ProjectRoleDao{\n+    private final SearchBuilder<ProjectRoleVO>  ProjectRoleSearch;\n+\n+    public ProjectRoleDaoImpl() {\n+        super();\n+\n+        ProjectRoleSearch = createSearchBuilder();\n+        ProjectRoleSearch.and(\"name\", ProjectRoleSearch.entity().getName(), SearchCriteria.Op.LIKE);\n+        ProjectRoleSearch.and(\"project_id\", ProjectRoleSearch.entity().getProjectId(), SearchCriteria.Op.EQ);\n+        ProjectRoleSearch.done();\n+\n+    }\n+    @Override\n+    public List<ProjectRoleVO> findByName(String name, Long projectId) {\n+        SearchCriteria<ProjectRoleVO> sc = ProjectRoleSearch.create();\n+        sc.setParameters(\"name\", \"%\" + name + \"%\");", "originalCommit": "c1bf01884d12b6ba9a94fe817013707325c7b8c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d719c81efb732296eab4c641c2c33866efd47bb7", "url": "https://github.com/apache/cloudstack/commit/d719c81efb732296eab4c641c2c33866efd47bb7", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-07-02T08:39:32Z", "type": "commit"}, {"oid": "3e73a91b35876756421087ca45db9a5109f4e847", "url": "https://github.com/apache/cloudstack/commit/3e73a91b35876756421087ca45db9a5109f4e847", "message": "Review comments addressed", "committedDate": "2020-07-03T04:48:34Z", "type": "commit"}, {"oid": "980de0d84b23e492a9e3a8fe180104577749cd19", "url": "https://github.com/apache/cloudstack/commit/980de0d84b23e492a9e3a8fe180104577749cd19", "message": "Merge branch 'cs-dynamic-roles-improvements' of github.com:shapeblue/cloudstack into proj-roleBased-users", "committedDate": "2020-07-03T05:44:17Z", "type": "commit"}, {"oid": "497d72d5966d0fb1c8efaf35080fa1a415fddefe", "url": "https://github.com/apache/cloudstack/commit/497d72d5966d0fb1c8efaf35080fa1a415fddefe", "message": "Merge dynamic role feature & resolve conflicts", "committedDate": "2020-07-03T10:08:42Z", "type": "commit"}, {"oid": "8a531d29f74bd33a91be03108c1db1b9621789cf", "url": "https://github.com/apache/cloudstack/commit/8a531d29f74bd33a91be03108c1db1b9621789cf", "message": "add user access check to projects", "committedDate": "2020-07-06T14:56:36Z", "type": "commit"}, {"oid": "984502b84b9c438c3695dc6f4ce57f3616a59922", "url": "https://github.com/apache/cloudstack/commit/984502b84b9c438c3695dc6f4ce57f3616a59922", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into proj-roleBased-users", "committedDate": "2020-07-07T08:01:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDg1Nw==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r450954857", "bodyText": "Minor one: this can be written in one line", "author": "nvazquez", "createdAt": "2020-07-07T15:31:17Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -68,11 +89,49 @@ public String getDisplayText() {\n         return displayText;\n     }\n \n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public Long getDomainId() {\n+        if (domainId != null) {\n+            return domainId;\n+        }\n+        return CallContext.current().getCallingAccount().getDomainId();\n+    }\n+\n+    public ProjectAccount.Role getRoleType(String role) {\n+        String type = role.substring(0, 1).toUpperCase() + role.substring(1).toLowerCase();\n+        if (!EnumUtils.isValidEnum(ProjectAccount.Role.class, type)) {\n+            throw new InvalidParameterValueException(\"Only Admin or Regular project role types are valid\");\n+        }\n+        return Enum.valueOf(ProjectAccount.Role.class, type);\n+    }\n+\n+    public ProjectAccount.Role getAccountRole() {\n+        if (roleType != null) {\n+            return getRoleType(roleType);\n+        }\n+        return ProjectAccount.Role.Regular;\n+    }\n+\n+    public Long getAccountId() {\n+        return accountId;\n+    }\n+\n     @Override\n     public String getCommandName() {\n         return s_name;\n     }\n \n+    public Boolean isSwapOwner() {\n+        if (swapOwner != null) {", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODExMA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258110", "bodyText": "done", "author": "Pearl1594", "createdAt": "2020-07-08T03:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDYyMw==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451154623", "bodyText": "May I suggest StringUtils.isNotBlank(roleType) here? It checks for null and empty cases", "author": "nvazquez", "createdAt": "2020-07-07T21:29:42Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddAccountToProjectCmd.java", "diffHunk": "@@ -72,6 +87,21 @@ public String getEmail() {\n         return email;\n     }\n \n+    public Long getProjectRoleId() {\n+        return projectRoleId;\n+    }\n+\n+    public ProjectAccount.Role getRoleType() {\n+        if (roleType != null) {", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODE1MA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258150", "bodyText": "done", "author": "Pearl1594", "createdAt": "2020-07-08T03:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDkzNA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451154934", "bodyText": "Same as above", "author": "nvazquez", "createdAt": "2020-07-07T21:30:22Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/account/AddUserToProjectCmd.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.user.account;\n+\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseAsyncCmd;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.ProjectResponse;\n+import org.apache.cloudstack.api.response.ProjectRoleResponse;\n+import org.apache.cloudstack.api.response.SuccessResponse;\n+import org.apache.cloudstack.api.response.UserResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.EnumUtils;\n+\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.InvalidParameterValueException;\n+import com.cloud.projects.ProjectAccount;\n+\n+@APICommand(name = AddUserToProjectCmd.APINAME, description = \"Adds user to a project\", responseObject = SuccessResponse.class, since = \"4.14\",\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false, authorized = {RoleType.Admin, RoleType.DomainAdmin, RoleType.ResourceAdmin, RoleType.User})\n+public class AddUserToProjectCmd extends BaseAsyncCmd {\n+    public static final String APINAME = \"addUserToProject\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.PROJECT_ID,\n+            type = BaseCmd.CommandType.UUID,\n+            entityType = ProjectResponse.class,\n+            required = true,\n+            description = \"ID of the project to add the user to\")\n+    private Long projectId;\n+\n+    @Parameter(name = ApiConstants.USER_ID, type = BaseCmd.CommandType.UUID, entityType = UserResponse.class,\n+            description = \"User UUID, required for adding account from external provisioning system\")\n+    private Long userId;\n+\n+    @Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, description = \"email ID of user to which invitation to the project is going to be sent\")\n+    private String email;\n+\n+    @Parameter(name = ApiConstants.PROJECT_ROLE_ID, type = BaseCmd.CommandType.UUID, entityType = ProjectRoleResponse.class,\n+            description = \"ID of the project role\", validations = {ApiArgValidator.PositiveNumber})\n+    private Long projectRoleId;\n+\n+    @Parameter(name = ApiConstants.ROLE_TYPE, type = BaseCmd.CommandType.STRING,\n+            description = \"Project role type to be assigned to the user - Admin/Regular\")\n+    private String roleType;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public Long getProjectId() {\n+        return projectId;\n+    }\n+\n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public String getEmail() { return email; }\n+\n+    public Long getProjectRoleId() {\n+        return projectRoleId;\n+    }\n+\n+    public ProjectAccount.Role getRoleType() {\n+        if (roleType != null) {", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODE3MA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258170", "bodyText": "done", "author": "Pearl1594", "createdAt": "2020-07-08T03:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTcxMg==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451155712", "bodyText": "Same", "author": "nvazquez", "createdAt": "2020-07-07T21:31:57Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -68,11 +89,49 @@ public String getDisplayText() {\n         return displayText;\n     }\n \n+    public Long getUserId() {\n+        return userId;\n+    }\n+\n+    public Long getDomainId() {\n+        if (domainId != null) {\n+            return domainId;\n+        }\n+        return CallContext.current().getCallingAccount().getDomainId();\n+    }\n+\n+    public ProjectAccount.Role getRoleType(String role) {\n+        String type = role.substring(0, 1).toUpperCase() + role.substring(1).toLowerCase();\n+        if (!EnumUtils.isValidEnum(ProjectAccount.Role.class, type)) {\n+            throw new InvalidParameterValueException(\"Only Admin or Regular project role types are valid\");\n+        }\n+        return Enum.valueOf(ProjectAccount.Role.class, type);\n+    }\n+\n+    public ProjectAccount.Role getAccountRole() {\n+        if (roleType != null) {", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODE5OA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258198", "bodyText": "done", "author": "Pearl1594", "createdAt": "2020-07-08T03:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NjUzMA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451156530", "bodyText": "If the second condition is not missing any other condition, then parenthesis can be removed", "author": "nvazquez", "createdAt": "2020-07-07T21:33:39Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/project/UpdateProjectCmd.java", "diffHunk": "@@ -84,14 +143,38 @@ public long getEntityOwnerId() {\n         return _projectService.getProjectOwner(id).getId();\n     }\n \n+    @Override\n+    public List<Long> getEntityOwnerIds() {\n+        return _projectService.getProjectOwners(id);\n+    }\n+\n     /////////////////////////////////////////////////////\n     /////////////// API Implementation///////////////////\n     /////////////////////////////////////////////////////\n \n     @Override\n     public void execute() throws ResourceAllocationException {\n         CallContext.current().setEventDetails(\"Project id: \" + getId());\n-        Project project = _projectService.updateProject(getId(), getDisplayText(), getAccountName());\n+        if (getAccountName() != null && (getUserId() != null)) {", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODIyMg==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258222", "bodyText": "done", "author": "Pearl1594", "createdAt": "2020-07-08T03:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NjUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NDEwMg==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451164102", "bodyText": "Please consider keeping the method's bodies on new lines", "author": "nvazquez", "createdAt": "2020-07-07T21:50:16Z", "path": "engine/schema/src/main/java/org/apache/cloudstack/acl/ProjectRolePermissionVO.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"project_role_permissions\")\n+public class ProjectRolePermissionVO extends RolePermissionBaseVO implements ProjectRolePermission {\n+\n+    @Column(name = \"project_id\")\n+    private long projectId;\n+\n+    @Column(name = \"project_role_id\")\n+    private long projectRoleId;\n+\n+    @Column(name = \"sort_order\")\n+    private long sortOrder = 0;\n+\n+    public ProjectRolePermissionVO() { super(); }", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODI1Nw==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258257", "bodyText": "done", "author": "Pearl1594", "createdAt": "2020-07-08T03:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NDEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MzI0MQ==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451173241", "bodyText": "Why is this required after deletion?", "author": "nvazquez", "createdAt": "2020-07-07T22:12:16Z", "path": "server/src/main/java/org/apache/cloudstack/acl/ProjectRoleManagerImpl.java", "diffHunk": "@@ -0,0 +1,308 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.cloudstack.acl.dao.ProjectRoleDao;\n+import org.apache.cloudstack.acl.dao.ProjectRolePermissionsDao;\n+import org.apache.cloudstack.acl.RolePermissionEntity.Permission;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.CreateProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.DeleteProjectRolePermissionCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolePermissionsCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.ListProjectRolesCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRoleCmd;\n+import org.apache.cloudstack.api.command.admin.acl.project.UpdateProjectRolePermissionCmd;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+\n+import com.cloud.event.ActionEvent;\n+import com.cloud.event.EventTypes;\n+import com.cloud.exception.PermissionDeniedException;\n+import com.cloud.projects.Project;\n+import com.cloud.projects.ProjectAccount;\n+import com.cloud.projects.dao.ProjectAccountDao;\n+import com.cloud.projects.dao.ProjectDao;\n+import com.cloud.user.Account;\n+import com.cloud.user.User;\n+import com.cloud.user.dao.AccountDao;\n+import com.cloud.utils.ListUtils;\n+import com.cloud.utils.component.ManagerBase;\n+import com.cloud.utils.component.PluggableService;\n+import com.cloud.utils.db.Transaction;\n+import com.cloud.utils.db.TransactionCallback;\n+import com.cloud.utils.db.TransactionStatus;\n+import com.cloud.utils.exception.CloudRuntimeException;\n+import com.google.common.base.Strings;\n+\n+public class ProjectRoleManagerImpl extends ManagerBase implements ProjectRoleService, PluggableService {\n+    @Inject\n+    ProjectAccountDao projAccDao;\n+    @Inject\n+    ProjectRoleDao projRoleDao;\n+    @Inject\n+    ProjectDao projectDao;\n+    @Inject\n+    AccountDao accountDao;\n+    @Inject\n+    ProjectRolePermissionsDao projRolePermissionsDao;\n+\n+    private static final Logger LOGGER = Logger.getLogger(ProjectRoleManagerImpl.class);\n+\n+    private Project validateProjectId(Long projectId) {\n+        Project project = projectDao.findById(projectId);\n+        if (project == null) {\n+            throw new CloudRuntimeException(\"Invalid project id provided\");\n+        }\n+        return project;\n+    }\n+\n+    private void checkAccess(Long projectId) {\n+        Project project = validateProjectId(projectId);\n+        CallContext.current().setProject(project);\n+\n+        if (!isEnabled()) {\n+            throw new PermissionDeniedException(\"Dynamic api checker is not enabled, aborting role operation\");\n+        }\n+\n+        User user = getCurrentUser();\n+        Account callerAcc = accountDao.findById(user.getAccountId());\n+\n+        if (callerAcc == null || callerAcc.getRoleId() == null) {\n+            throw new PermissionDeniedException(\"Restricted API called by an invalid user account\");\n+        }\n+\n+        ProjectAccount projectAccount = projAccDao.findByProjectIdUserId(projectId, callerAcc.getAccountId(), user.getId());\n+        if (projectAccount == null) {\n+            projectAccount = projAccDao.findByProjectIdAccountId(projectId, callerAcc.getAccountId());\n+            if (projectAccount == null) {\n+                throw new PermissionDeniedException(\"User/Account not part of project\");\n+            }\n+        }\n+        if (ProjectAccount.Role.Admin != projectAccount.getAccountRole()) {\n+            throw new PermissionDeniedException(\"User unauthorized to perform operation in the project\");\n+        }\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_CREATE, eventDescription = \"creating Project Role\")\n+    public ProjectRole createProjectRole(Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRoleVO>() {\n+            @Override\n+            public ProjectRoleVO doInTransaction(TransactionStatus status) {\n+                return projRoleDao.persist(new ProjectRoleVO(name, description, projectId));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_UPDATE, eventDescription = \"updating Project Role\")\n+    public ProjectRole updateProjectRole(ProjectRole role, Long projectId, String name, String description) {\n+        checkAccess(projectId);\n+        ProjectRoleVO projectRoleVO = (ProjectRoleVO) role;\n+        if (!Strings.isNullOrEmpty(name)) {\n+            projectRoleVO.setName(name);\n+        }\n+        if (!Strings.isNullOrEmpty(description)) {\n+            projectRoleVO.setDescription(description);\n+        }\n+        projRoleDao.update(role.getId(), projectRoleVO);\n+        return projectRoleVO;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return RoleService.EnableDynamicApiChecker.value();\n+    }\n+\n+    @Override\n+    public ProjectRole findProjectRole(Long roleId, Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+\n+        if (roleId != null && roleId < 1L) {\n+            LOGGER.warn(String.format(\"Project Role ID is invalid [%s]\", roleId));\n+            return null;\n+        }\n+\n+        ProjectRoleVO role = projRoleDao.findById(roleId);\n+        if (role == null) {\n+            LOGGER.warn(String.format(\"Project Role not found [id=%s]\", roleId));\n+            return null;\n+        }\n+        if (!(role.getProjectId().equals(projectId))) {\n+            LOGGER.warn(String.format(\"Project role : %s doesn't belong to the project\" + role.getName()));\n+            return null;\n+        }\n+        return role;\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRoles(Long projectId) {\n+        if (projectId == null || projectId < 1L || projectDao.findById(projectId) == null) {\n+            LOGGER.warn(\"Invalid project ID provided\");\n+            return null;\n+        }\n+        return ListUtils.toListOfInterface(projRoleDao.findAllRoles(projectId));\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_CREATE, eventDescription = \"Creating Project Role Permission\")\n+    public ProjectRolePermission createProjectRolePermission(CreateProjectRolePermissionCmd cmd) {\n+        Long projectId = cmd.getProjectId();\n+        Long projectRoleId = cmd.getProjectRoleId();\n+        Rule rule = cmd.getRule();\n+        Permission permission = cmd.getPermission();\n+        String description = cmd.getDescription();\n+        checkAccess(projectId);\n+        return Transaction.execute(new TransactionCallback<ProjectRolePermissionVO>() {\n+            @Override\n+            public ProjectRolePermissionVO doInTransaction(TransactionStatus status) {\n+                try {\n+                    return projRolePermissionsDao.persist(new ProjectRolePermissionVO(projectId, projectRoleId, rule.toString(), permission, description));\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"Project role permission for \" + rule.toString()+ \" seems to already exist.\");\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission order\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, List<ProjectRolePermission> rolePermissionsOrder) {\n+        checkAccess(projectId);\n+        return projectRole != null && rolePermissionsOrder != null && projRolePermissionsDao.update(projectRole, projectId, rolePermissionsOrder);\n+\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_UPDATE, eventDescription = \"updating Project Role Permission\")\n+    public boolean updateProjectRolePermission(Long projectId, ProjectRole projectRole, ProjectRolePermission projectRolePermission, Permission newPermission) {\n+        checkAccess(projectId);\n+        return projectRole != null && projRolePermissionsDao.update(projectRole, projectRolePermission, newPermission);\n+    }\n+\n+    @Override\n+    public ProjectRolePermission findProjectRolePermission(Long projRolePermissionId) {\n+        if (projRolePermissionId == null) {\n+            return null;\n+        }\n+        return projRolePermissionsDao.findById(projRolePermissionId);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_PERMISSION_DELETE, eventDescription = \"deleting Project Role Permission\")\n+    public boolean deleteProjectRolePermission(ProjectRolePermission projectRolePermission) {\n+        checkAccess(projectRolePermission.getProjectId());\n+        return projRolePermissionsDao.remove(projectRolePermission.getId());\n+    }\n+\n+    @Override\n+    public List<ProjectRolePermission> findAllProjectRolePermissions(Long projectId, Long projectRoleId) {\n+        List<? extends ProjectRolePermission> permissions = projRolePermissionsDao.findAllByRoleIdSorted(projectRoleId, projectId);\n+        if (permissions != null) {\n+            return new ArrayList<>(permissions);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public List<ProjectRole> findProjectRolesByName(Long projectId, String roleName) {\n+        List<? extends ProjectRole> roles = null;\n+        if (StringUtils.isNotBlank(roleName)) {\n+            roles = projRoleDao.findByName(roleName, projectId);\n+        }\n+        return ListUtils.toListOfInterface(roles);\n+    }\n+\n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_PROJECT_ROLE_DELETE, eventDescription = \"deleting Project Role\")\n+    public boolean deleteProjectRole(ProjectRole role, Long projectId) {\n+        checkAccess(projectId);\n+        if (role == null) {\n+            return false;\n+        }\n+\n+        Long roleProjectId = role.getProjectId();\n+        if (role.getProjectId() != null && !roleProjectId.equals(projectId)) {\n+            throw new PermissionDeniedException(\"Not authorized to delete the given project role\");\n+        }\n+\n+        List<? extends ProjectAccount> users = projAccDao.listUsersOrAccountsByRole(role.getId());\n+        if (users != null && users.size() != 0) {\n+            throw new PermissionDeniedException(\"Found users that have the project role in use, cannot delete the Project Role\");\n+        }\n+        return Transaction.execute(new TransactionCallback<Boolean>() {\n+            @Override\n+            public Boolean doInTransaction(TransactionStatus status) {\n+                List<? extends ProjectRolePermission> rolePermissions = projRolePermissionsDao.findAllByRoleIdSorted(role.getId(), projectId);\n+                if (rolePermissions != null && !rolePermissions.isEmpty()) {\n+                    for (ProjectRolePermission rolePermission : rolePermissions) {\n+                        projRolePermissionsDao.remove(rolePermission.getId());\n+                    }\n+                }\n+                if (projRoleDao.remove(role.getId())) {\n+                    ProjectRoleVO projRoleVO = projRoleDao.findByIdIncludingRemoved(role.getId());\n+                    projRoleVO.setName(null);", "originalCommit": "984502b84b9c438c3695dc6f4ce57f3616a59922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODQ0Nw==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r451258447", "bodyText": "Only to clear the name of the role from the DB once its been removed. May not be required, but followed what was done for Roles", "author": "Pearl1594", "createdAt": "2020-07-08T03:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MzI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzMjA4OA==", "url": "https://github.com/apache/cloudstack/pull/4128#discussion_r452232088", "bodyText": "I'm ok with leaving the update for consistency", "author": "nvazquez", "createdAt": "2020-07-09T13:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MzI0MQ=="}], "type": "inlineReview"}, {"oid": "c127a4655a672620d8be867b505ebe01e652e559", "url": "https://github.com/apache/cloudstack/commit/c127a4655a672620d8be867b505ebe01e652e559", "message": "Addressed Review comments : Null checks and code formating", "committedDate": "2020-07-08T03:09:38Z", "type": "commit"}, {"oid": "d797395d798df49ad0b88c102ed074b045ecd1b7", "url": "https://github.com/apache/cloudstack/commit/d797395d798df49ad0b88c102ed074b045ecd1b7", "message": "Merge branch 'master' of github.com:shapeblue/cloudstack into proj-roleBased-users", "committedDate": "2020-07-08T03:10:24Z", "type": "commit"}, {"oid": "5fb52ea8d330a8728ff5159e023863907200d02b", "url": "https://github.com/apache/cloudstack/commit/5fb52ea8d330a8728ff5159e023863907200d02b", "message": "Merge branch 'master' into proj-roleBased-users", "committedDate": "2020-07-08T03:12:15Z", "type": "commit"}, {"oid": "ea6e137c2d2327aef446079899500f903d73a422", "url": "https://github.com/apache/cloudstack/commit/ea6e137c2d2327aef446079899500f903d73a422", "message": "allow username to be taken as input for adding users to projects", "committedDate": "2020-07-08T13:45:42Z", "type": "commit"}, {"oid": "f10982cca92c973265a0995fcb07971f61ecbc45", "url": "https://github.com/apache/cloudstack/commit/f10982cca92c973265a0995fcb07971f61ecbc45", "message": "Update marvin test with correct api parameters", "committedDate": "2020-07-08T16:46:12Z", "type": "commit"}, {"oid": "5274bf72eeebac0c14c2e89849da822b94b23976", "url": "https://github.com/apache/cloudstack/commit/5274bf72eeebac0c14c2e89849da822b94b23976", "message": "Added additional fields to listProjects and listProjectAccounts api", "committedDate": "2020-07-09T17:06:50Z", "type": "commit"}, {"oid": "48cf1cf4e513538b863fa87bee304b41d91346c3", "url": "https://github.com/apache/cloudstack/commit/48cf1cf4e513538b863fa87bee304b41d91346c3", "message": "Project roles to be applied to resources of a project", "committedDate": "2020-07-21T15:09:09Z", "type": "commit"}, {"oid": "41b0b5cb53bdf570d56419052cbbaabadc9b8838", "url": "https://github.com/apache/cloudstack/commit/41b0b5cb53bdf570d56419052cbbaabadc9b8838", "message": "restrict view of projects", "committedDate": "2020-07-22T15:02:25Z", "type": "commit"}, {"oid": "318b1c8d4f2a8aacf24c525a310d858f793383b2", "url": "https://github.com/apache/cloudstack/commit/318b1c8d4f2a8aacf24c525a310d858f793383b2", "message": "Handle verification of project roles when apikey is passed", "committedDate": "2020-07-23T07:51:32Z", "type": "commit"}, {"oid": "318b1c8d4f2a8aacf24c525a310d858f793383b2", "url": "https://github.com/apache/cloudstack/commit/318b1c8d4f2a8aacf24c525a310d858f793383b2", "message": "Handle verification of project roles when apikey is passed", "committedDate": "2020-07-23T07:51:32Z", "type": "forcePushed"}, {"oid": "a979dd031c2883ca423c807d620ba9fbe3f48a31", "url": "https://github.com/apache/cloudstack/commit/a979dd031c2883ca423c807d620ba9fbe3f48a31", "message": "vague error message", "committedDate": "2020-07-27T07:58:45Z", "type": "commit"}, {"oid": "296e4bd9cff53033b161b903bfc64fb75e978818", "url": "https://github.com/apache/cloudstack/commit/296e4bd9cff53033b161b903bfc64fb75e978818", "message": "error message description consistency", "committedDate": "2020-07-27T12:33:17Z", "type": "commit"}, {"oid": "5293c32f891b95c8ff87a2e6da1fc871f38fe9d7", "url": "https://github.com/apache/cloudstack/commit/5293c32f891b95c8ff87a2e6da1fc871f38fe9d7", "message": "Allow project roles with same names across projects", "committedDate": "2020-07-28T07:47:32Z", "type": "commit"}, {"oid": "76fe592abc036ef49e599803e72caa78f21d43c8", "url": "https://github.com/apache/cloudstack/commit/76fe592abc036ef49e599803e72caa78f21d43c8", "message": "sql changes for upgrade path", "committedDate": "2020-07-28T13:38:59Z", "type": "commit"}, {"oid": "0acfca1307addb9a1ce2f5172d162dc0e4f629a4", "url": "https://github.com/apache/cloudstack/commit/0acfca1307addb9a1ce2f5172d162dc0e4f629a4", "message": "Merge branch 'master' of https://github.com/apache/cloudstack into proj-roleBased-users", "committedDate": "2020-07-30T07:03:27Z", "type": "commit"}, {"oid": "826f2e71b424a18bea6ee5948bfc036dad3a65d1", "url": "https://github.com/apache/cloudstack/commit/826f2e71b424a18bea6ee5948bfc036dad3a65d1", "message": "Code refactor", "committedDate": "2020-08-10T04:05:49Z", "type": "commit"}, {"oid": "6235d343a3a850a8a3377953e09f0525fcbee105", "url": "https://github.com/apache/cloudstack/commit/6235d343a3a850a8a3377953e09f0525fcbee105", "message": "Merge branch 'master' of https://github.com/apache/cloudstack into proj-roleBased-users", "committedDate": "2020-08-10T04:06:11Z", "type": "commit"}, {"oid": "95a6a4311dd59d95138bda38c5f4c98adc78f699", "url": "https://github.com/apache/cloudstack/commit/95a6a4311dd59d95138bda38c5f4c98adc78f699", "message": "remove results.xml file", "committedDate": "2020-08-10T14:19:36Z", "type": "commit"}, {"oid": "970acd0d09923c6d56ee8d27a9566f0504323a6b", "url": "https://github.com/apache/cloudstack/commit/970acd0d09923c6d56ee8d27a9566f0504323a6b", "message": "detailed description of api parameter", "committedDate": "2020-08-11T08:31:39Z", "type": "commit"}, {"oid": "970acd0d09923c6d56ee8d27a9566f0504323a6b", "url": "https://github.com/apache/cloudstack/commit/970acd0d09923c6d56ee8d27a9566f0504323a6b", "message": "detailed description of api parameter", "committedDate": "2020-08-11T08:31:39Z", "type": "forcePushed"}]}