{"pr_number": 17842, "pr_title": "Allow disabling XXE protection", "pr_createdAt": "2020-11-10T13:02:47Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17842", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDA1Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17842#discussion_r526044053", "bodyText": "Probably some copy-edit Yodafied this sentence :)\n\nthen setting these properties may fail and exception is the thrown", "author": "blazember", "createdAt": "2020-11-18T12:20:47Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/XmlUtil.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static com.hazelcast.internal.nio.IOUtil.closeResource;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.ErrorListener;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.xml.sax.SAXException;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+/**\n+ * Utility class for XML processing.\n+ */\n+public final class XmlUtil {\n+\n+    /**\n+     * System property name which allows disabling XML External Entity protection. This property should only be used as a last\n+     * resort. Hazelcast uses the XXE protection by setting properties {@link XMLConstants#ACCESS_EXTERNAL_DTD} and\n+     * {@link XMLConstants#ACCESS_EXTERNAL_SCHEMA}. These properties are supported in modern XML processors (JAXP 1.5+, Java\n+     * 8+). When an outdated JAXP implementation (e.g. Xerces, Xalan) is also on the classpath and takes precedence, then\n+     * setting these properties may fail and exception is the thrown. Setting this property to true suppresses/ignores the", "originalCommit": "e405cafc63007092fa1c79726e7e49a2fe9b214d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA1MjgxMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17842#discussion_r526052810", "bodyText": "Use colon instead of the point here, so\n\nfixing the classpath, the \" + SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION", "author": "blazember", "createdAt": "2020-11-18T12:35:45Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/XmlUtil.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static com.hazelcast.internal.nio.IOUtil.closeResource;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.ErrorListener;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.xml.sax.SAXException;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+/**\n+ * Utility class for XML processing.\n+ */\n+public final class XmlUtil {\n+\n+    /**\n+     * System property name which allows disabling XML External Entity protection. This property should only be used as a last\n+     * resort. Hazelcast uses the XXE protection by setting properties {@link XMLConstants#ACCESS_EXTERNAL_DTD} and\n+     * {@link XMLConstants#ACCESS_EXTERNAL_SCHEMA}. These properties are supported in modern XML processors (JAXP 1.5+, Java\n+     * 8+). When an outdated JAXP implementation (e.g. Xerces, Xalan) is also on the classpath and takes precedence, then\n+     * setting these properties may fail and exception is the thrown. Setting this property to true suppresses/ignores the\n+     * Exception.\n+     */\n+    public static final String SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION = \"com.hazelcast.internal.disableXxeProtection\";\n+\n+    private static final ILogger LOGGER = Logger.getLogger(XmlUtil.class);\n+\n+    private XmlUtil() {\n+    }\n+\n+    /**\n+     * Returns {@link TransformerFactory} with XXE protection enabled.\n+     */\n+    public static TransformerFactory getTransformerFactory() {\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        setAttribute(transformerFactory, XMLConstants.ACCESS_EXTERNAL_DTD);\n+        setAttribute(transformerFactory, XMLConstants.ACCESS_EXTERNAL_STYLESHEET);\n+        return transformerFactory;\n+    }\n+\n+    /**\n+     * Returns {@link SchemaFactory} with XXE protection enabled.\n+     */\n+    public static SchemaFactory getSchemaFactory() throws SAXException {\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        setProperty(schemaFactory, XMLConstants.ACCESS_EXTERNAL_SCHEMA);\n+        setProperty(schemaFactory, XMLConstants.ACCESS_EXTERNAL_DTD);\n+        return schemaFactory;\n+    }\n+\n+    /**\n+     * Formats given XML String with the given indentation used. If the {@code input} XML string is {@code null}, or\n+     * {@code indent} parameter is negative, or XML transformation fails, then the original value is returned unchanged. The\n+     * {@link IllegalArgumentException} is thrown when {@code indent==0}.\n+     *\n+     * @param input the XML String\n+     * @param indent indentation (number of spaces used for one indentation level)\n+     * @return formatted XML String or the original String if the formatting fails.\n+     * @throws IllegalArgumentException when indentation is equal to zero\n+     */\n+    @SuppressWarnings(\"checkstyle:NPathComplexity\")\n+    public static String format(@Nullable String input, int indent) throws IllegalArgumentException {\n+        if (input == null || indent < 0) {\n+            return input;\n+        }\n+        if (indent == 0) {\n+            throw new IllegalArgumentException(\"Indentation must not be 0.\");\n+        }\n+        StreamResult xmlOutput = null;\n+        try {\n+            Source xmlInput = new StreamSource(new StringReader(input));\n+            xmlOutput = new StreamResult(new StringWriter());\n+            TransformerFactory transformerFactory = getTransformerFactory();\n+            /*\n+             * Older versions of Xalan still use this method of setting indent values.\n+             * Attempt to make this work but don't completely fail if it's a problem.\n+             */\n+            try {\n+                transformerFactory.setAttribute(\"indent-number\", indent);\n+            } catch (IllegalArgumentException e) {\n+                if (LOGGER.isFinestEnabled()) {\n+                    LOGGER.finest(\"Failed to set indent-number attribute; cause: \" + e.getMessage());\n+                }\n+            }\n+            Transformer transformer = transformerFactory.newTransformer();\n+            // workaround IBM Java behavior - the silent ignorance of issues during the transformation.\n+            transformer.setErrorListener(ThrowingErrorListener.INSTANCE);\n+            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+            transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            /*\n+             * Newer versions of Xalan will look for a fully-qualified output property in order to specify amount of\n+             * indentation to use. Attempt to make this work as well but again don't completely fail if it's a problem.\n+             */\n+            try {\n+                transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", Integer.toString(indent));\n+            } catch (IllegalArgumentException e) {\n+                if (LOGGER.isFinestEnabled()) {\n+                    LOGGER.finest(\"Failed to set indent-amount property; cause: \" + e.getMessage());\n+                }\n+            }\n+            transformer.transform(xmlInput, xmlOutput);\n+            return xmlOutput.getWriter().toString();\n+        } catch (Exception e) {\n+            LOGGER.warning(e);\n+            return input;\n+        } finally {\n+            if (xmlOutput != null) {\n+                closeResource(xmlOutput.getWriter());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns ErrorListener implementation which just throws the original error.\n+     */\n+    public ErrorListener getErrorListener() {\n+        return ThrowingErrorListener.INSTANCE;\n+    }\n+\n+    private static void setAttribute(TransformerFactory transformerFactory, String attributeName) {\n+        try {\n+            transformerFactory.setAttribute(attributeName, \"\");\n+        } catch (IllegalArgumentException iae) {\n+            if (Boolean.getBoolean(SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION)) {\n+                LOGGER.warning(\"Enabling XXE protection failed. The attribute \" + attributeName\n+                        + \" is not supported by the TransformerFactory. The \" + SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION\n+                        + \" system property is used so the XML processing continues in the UNSAFE mode!!!\");\n+            } else {\n+                LOGGER.severe(\"Enabling XXE protection failed. The attribute \" + attributeName\n+                        + \" is not supported by the TransformerFactory. This usually mean an outdated XML processor\"\n+                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n+                        + \" fixing the classpath. The \" + SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION", "originalCommit": "e405cafc63007092fa1c79726e7e49a2fe9b214d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA1NjY0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17842#discussion_r526056642", "bodyText": "Probably we can be explicit here by adding that unsafe means the XXE protection is disabled, so\n\n... system property is used so the XML processing continues in the UNSAFE mode with XXE protection disabled !!!\n\nAlso, maybe we can consider using unsecured instead of unsafe to better describe the nature of the condition.\nSame for the below setProperty().", "author": "blazember", "createdAt": "2020-11-18T12:41:59Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/XmlUtil.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static com.hazelcast.internal.nio.IOUtil.closeResource;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.ErrorListener;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.xml.sax.SAXException;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+/**\n+ * Utility class for XML processing.\n+ */\n+public final class XmlUtil {\n+\n+    /**\n+     * System property name which allows disabling XML External Entity protection. This property should only be used as a last\n+     * resort. Hazelcast uses the XXE protection by setting properties {@link XMLConstants#ACCESS_EXTERNAL_DTD} and\n+     * {@link XMLConstants#ACCESS_EXTERNAL_SCHEMA}. These properties are supported in modern XML processors (JAXP 1.5+, Java\n+     * 8+). When an outdated JAXP implementation (e.g. Xerces, Xalan) is also on the classpath and takes precedence, then\n+     * setting these properties may fail and exception is the thrown. Setting this property to true suppresses/ignores the\n+     * Exception.\n+     */\n+    public static final String SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION = \"com.hazelcast.internal.disableXxeProtection\";\n+\n+    private static final ILogger LOGGER = Logger.getLogger(XmlUtil.class);\n+\n+    private XmlUtil() {\n+    }\n+\n+    /**\n+     * Returns {@link TransformerFactory} with XXE protection enabled.\n+     */\n+    public static TransformerFactory getTransformerFactory() {\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        setAttribute(transformerFactory, XMLConstants.ACCESS_EXTERNAL_DTD);\n+        setAttribute(transformerFactory, XMLConstants.ACCESS_EXTERNAL_STYLESHEET);\n+        return transformerFactory;\n+    }\n+\n+    /**\n+     * Returns {@link SchemaFactory} with XXE protection enabled.\n+     */\n+    public static SchemaFactory getSchemaFactory() throws SAXException {\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        setProperty(schemaFactory, XMLConstants.ACCESS_EXTERNAL_SCHEMA);\n+        setProperty(schemaFactory, XMLConstants.ACCESS_EXTERNAL_DTD);\n+        return schemaFactory;\n+    }\n+\n+    /**\n+     * Formats given XML String with the given indentation used. If the {@code input} XML string is {@code null}, or\n+     * {@code indent} parameter is negative, or XML transformation fails, then the original value is returned unchanged. The\n+     * {@link IllegalArgumentException} is thrown when {@code indent==0}.\n+     *\n+     * @param input the XML String\n+     * @param indent indentation (number of spaces used for one indentation level)\n+     * @return formatted XML String or the original String if the formatting fails.\n+     * @throws IllegalArgumentException when indentation is equal to zero\n+     */\n+    @SuppressWarnings(\"checkstyle:NPathComplexity\")\n+    public static String format(@Nullable String input, int indent) throws IllegalArgumentException {\n+        if (input == null || indent < 0) {\n+            return input;\n+        }\n+        if (indent == 0) {\n+            throw new IllegalArgumentException(\"Indentation must not be 0.\");\n+        }\n+        StreamResult xmlOutput = null;\n+        try {\n+            Source xmlInput = new StreamSource(new StringReader(input));\n+            xmlOutput = new StreamResult(new StringWriter());\n+            TransformerFactory transformerFactory = getTransformerFactory();\n+            /*\n+             * Older versions of Xalan still use this method of setting indent values.\n+             * Attempt to make this work but don't completely fail if it's a problem.\n+             */\n+            try {\n+                transformerFactory.setAttribute(\"indent-number\", indent);\n+            } catch (IllegalArgumentException e) {\n+                if (LOGGER.isFinestEnabled()) {\n+                    LOGGER.finest(\"Failed to set indent-number attribute; cause: \" + e.getMessage());\n+                }\n+            }\n+            Transformer transformer = transformerFactory.newTransformer();\n+            // workaround IBM Java behavior - the silent ignorance of issues during the transformation.\n+            transformer.setErrorListener(ThrowingErrorListener.INSTANCE);\n+            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+            transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            /*\n+             * Newer versions of Xalan will look for a fully-qualified output property in order to specify amount of\n+             * indentation to use. Attempt to make this work as well but again don't completely fail if it's a problem.\n+             */\n+            try {\n+                transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", Integer.toString(indent));\n+            } catch (IllegalArgumentException e) {\n+                if (LOGGER.isFinestEnabled()) {\n+                    LOGGER.finest(\"Failed to set indent-amount property; cause: \" + e.getMessage());\n+                }\n+            }\n+            transformer.transform(xmlInput, xmlOutput);\n+            return xmlOutput.getWriter().toString();\n+        } catch (Exception e) {\n+            LOGGER.warning(e);\n+            return input;\n+        } finally {\n+            if (xmlOutput != null) {\n+                closeResource(xmlOutput.getWriter());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns ErrorListener implementation which just throws the original error.\n+     */\n+    public ErrorListener getErrorListener() {\n+        return ThrowingErrorListener.INSTANCE;\n+    }\n+\n+    private static void setAttribute(TransformerFactory transformerFactory, String attributeName) {\n+        try {\n+            transformerFactory.setAttribute(attributeName, \"\");\n+        } catch (IllegalArgumentException iae) {\n+            if (Boolean.getBoolean(SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION)) {\n+                LOGGER.warning(\"Enabling XXE protection failed. The attribute \" + attributeName\n+                        + \" is not supported by the TransformerFactory. The \" + SYSTEM_PROPERTY_DISABLE_XXE_PROTECTION\n+                        + \" system property is used so the XML processing continues in the UNSAFE mode!!!\");", "originalCommit": "e405cafc63007092fa1c79726e7e49a2fe9b214d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNDg0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17842#discussion_r526834842", "bodyText": "\u00dcber-minor: \"no-such-property\" -> \"no-such-attribute\" \ud83d\ude04\nBut it's already good as is, thanks for the updates \ud83d\udc4d", "author": "blazember", "createdAt": "2020-11-19T12:26:26Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/XmlUtilTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static com.hazelcast.internal.util.XmlUtil.SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES;\n+import static com.hazelcast.internal.util.XmlUtil.format;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.xml.sax.SAXException;\n+\n+import com.hazelcast.test.HazelcastSerialClassRunner;\n+import com.hazelcast.test.OverridePropertyRule;\n+import com.hazelcast.test.annotation.QuickTest;\n+\n+@RunWith(HazelcastSerialClassRunner.class)\n+@Category({ QuickTest.class })\n+public class XmlUtilTest {\n+\n+    @Rule\n+    public OverridePropertyRule ignoreXxeFailureProp = OverridePropertyRule\n+            .clear(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES);\n+\n+    @Test\n+    public void testFormat() throws Exception {\n+        assertEquals(\"<a> <b>c</b></a>\", format(\"<a><b>c</b></a>\", 1).replaceAll(\"[\\r\\n]\", \"\"));\n+        assertEquals(\"<a>   <b>c</b></a>\", format(\"<a><b>c</b></a>\", 3).replaceAll(\"[\\r\\n]\", \"\"));\n+        assertEquals(\"<a><b>c</b></a>\", format(\"<a><b>c</b></a>\", -21));\n+\n+        assertThrows(IllegalArgumentException.class, () -> format(\"<a><b>c</b></a>\", 0));\n+\n+        // check if the XXE protection is enabled\n+        String xxeAttack = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\" + \"  <!DOCTYPE test [\\n\"\n+                + \"    <!ENTITY xxe SYSTEM \\\"file:///etc/passwd\\\">\\n\" + \"  ]>\" + \"<a><b>&xxe;</b></a>\";\n+        assertEquals(xxeAttack, format(xxeAttack, 1));\n+\n+        // wrongly formatted XML\n+        assertEquals(\"<a><b>c</b><a>\", format(\"<a><b>c</b><a>\", 1));\n+    }\n+\n+    @Test\n+    public void testGetSchemaFactory() throws Exception {\n+        SchemaFactory schemaFactory = XmlUtil.getSchemaFactory();\n+        assertNotNull(schemaFactory);\n+        assertThrows(SAXException.class, () -> XmlUtil.setProperty(schemaFactory, \"test://no-such-property\"));\n+        ignoreXxeFailureProp.setOrClearProperty(\"false\");\n+        assertThrows(SAXException.class, () -> XmlUtil.setProperty(schemaFactory, \"test://no-such-property\"));\n+        ignoreXxeFailureProp.setOrClearProperty(\"true\");\n+        XmlUtil.setProperty(schemaFactory, \"test://no-such-property\");\n+    }\n+\n+    @Test\n+    public void testGetTransformerFactory() throws Exception {\n+        TransformerFactory transformerFactory = XmlUtil.getTransformerFactory();\n+        assertNotNull(transformerFactory);\n+        assertThrows(IllegalArgumentException.class, () -> XmlUtil.setAttribute(transformerFactory, \"test://no-such-property\"));", "originalCommit": "fdcb633edceb9ee77c67a6b87a80d045fcf51213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY5ODcxNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17842#discussion_r527698716", "bodyText": "nit: all our cluster properties skip the com. part in their name (eg. hazelcast.partition.count), consider removing it?", "author": "vbekiaris", "createdAt": "2020-11-20T13:44:11Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/XmlUtil.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.util;\n+\n+import static com.hazelcast.internal.nio.IOUtil.closeResource;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.ErrorListener;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+\n+import org.xml.sax.SAXException;\n+\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.logging.Logger;\n+\n+/**\n+ * Utility class for XML processing.\n+ */\n+public final class XmlUtil {\n+\n+    /**\n+     * System property name which allows ignoring failures during enabling the XML External Entity protection.\n+     * This property should only be used as a last\n+     * resort. Hazelcast uses the XXE protection by setting properties {@link XMLConstants#ACCESS_EXTERNAL_DTD} and\n+     * {@link XMLConstants#ACCESS_EXTERNAL_SCHEMA}. These properties are supported in modern XML processors (JAXP 1.5+, Java\n+     * 8+). Old JAXP implementations on the classpath (e.g. Xerces, Xalan) may miss the support and they throw exception\n+     * during enabling the XXE protection. Setting this system property to true suppresses/ignores such Exceptions.\n+     */\n+    public static final String SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES = \"com.hazelcast.ignoreXxeProtectionFailures\";", "originalCommit": "fdcb633edceb9ee77c67a6b87a80d045fcf51213", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxMjc3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17842#discussion_r527712770", "bodyText": "good point, will remove it", "author": "kwart", "createdAt": "2020-11-20T14:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY5ODcxNg=="}], "type": "inlineReview"}, {"oid": "932873459f073a31b7ae7a098528f9c553df4fec", "url": "https://github.com/hazelcast/hazelcast/commit/932873459f073a31b7ae7a098528f9c553df4fec", "message": "Allow ignoring XXE protection configuration failures (e.g. cases when an outdated XML processor is on the classpath)", "committedDate": "2020-11-20T14:11:58Z", "type": "commit"}, {"oid": "932873459f073a31b7ae7a098528f9c553df4fec", "url": "https://github.com/hazelcast/hazelcast/commit/932873459f073a31b7ae7a098528f9c553df4fec", "message": "Allow ignoring XXE protection configuration failures (e.g. cases when an outdated XML processor is on the classpath)", "committedDate": "2020-11-20T14:11:58Z", "type": "forcePushed"}]}