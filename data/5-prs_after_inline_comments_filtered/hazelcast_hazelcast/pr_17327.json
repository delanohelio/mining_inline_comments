{"pr_number": 17327, "pr_title": "Added Benchmark for the phonehome process", "pr_createdAt": "2020-08-11T10:32:00Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17327", "timeline": [{"oid": "7219a7ad49a61d9200b6131f59e72e6f8a79b122", "url": "https://github.com/hazelcast/hazelcast/commit/7219a7ad49a61d9200b6131f59e72e6f8a79b122", "message": "Added Benchmark for the phonehome process", "committedDate": "2020-08-11T10:27:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNTEwMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17327#discussion_r468535103", "bodyText": "Maps are covered by the 100k loop below, aren't they?", "author": "erosb", "createdAt": "2020-08-11T12:16:02Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeBenchMark.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.config.AttributeConfig;\n+import com.hazelcast.config.CacheConfig;\n+import com.hazelcast.config.EvictionConfig;\n+import com.hazelcast.config.EvictionPolicy;\n+import com.hazelcast.config.HotRestartConfig;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.IndexConfig;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.QueryCacheConfig;\n+import com.hazelcast.config.WanReplicationRef;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+\n+import javax.cache.CacheManager;\n+import javax.cache.spi.CachingProvider;\n+\n+import static com.hazelcast.cache.CacheTestSupport.createServerCachingProvider;\n+import static com.hazelcast.test.Accessors.getNode;\n+\n+@State(Scope.Benchmark)\n+public class PhoneHomeBenchMark extends HazelcastTestSupport {\n+\n+    private PhoneHome phoneHome;\n+    private Node node;\n+\n+    @Setup\n+    public void setup() {\n+        HazelcastInstance hz = createHazelcastInstance();\n+        node = getNode(hz);\n+        phoneHome = new PhoneHome(node);\n+        CachingProvider cachingProvider = createServerCachingProvider(hz);\n+        CacheManager cacheManager = cachingProvider.getCacheManager();\n+\n+        for (int i = 1; i <= 10000; i++) {\n+            hz.getMap(\"maps\" + i);", "originalCommit": "7219a7ad49a61d9200b6131f59e72e6f8a79b122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNTYxOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17327#discussion_r468535618", "bodyText": "I doubt if getClass().getName() will work here. Does this class implement the MapStore interface.", "author": "erosb", "createdAt": "2020-08-11T12:16:57Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeBenchMark.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.config.AttributeConfig;\n+import com.hazelcast.config.CacheConfig;\n+import com.hazelcast.config.EvictionConfig;\n+import com.hazelcast.config.EvictionPolicy;\n+import com.hazelcast.config.HotRestartConfig;\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.IndexConfig;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.QueryCacheConfig;\n+import com.hazelcast.config.WanReplicationRef;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+\n+import javax.cache.CacheManager;\n+import javax.cache.spi.CachingProvider;\n+\n+import static com.hazelcast.cache.CacheTestSupport.createServerCachingProvider;\n+import static com.hazelcast.test.Accessors.getNode;\n+\n+@State(Scope.Benchmark)\n+public class PhoneHomeBenchMark extends HazelcastTestSupport {\n+\n+    private PhoneHome phoneHome;\n+    private Node node;\n+\n+    @Setup\n+    public void setup() {\n+        HazelcastInstance hz = createHazelcastInstance();\n+        node = getNode(hz);\n+        phoneHome = new PhoneHome(node);\n+        CachingProvider cachingProvider = createServerCachingProvider(hz);\n+        CacheManager cacheManager = cachingProvider.getCacheManager();\n+\n+        for (int i = 1; i <= 10000; i++) {\n+            hz.getMap(\"maps\" + i);\n+            hz.getSet(\"set\" + i);\n+            hz.getQueue(\"queue\" + i);\n+            hz.getMultiMap(\"multimap\" + i);\n+            hz.getList(\"list\" + i);\n+            hz.getRingbuffer(\"ringbuffer\" + i);\n+            hz.getTopic(\"topic\" + i);\n+            hz.getReplicatedMap(\"replicatedmap\" + i);\n+            hz.getCardinalityEstimator(\"cardinalityEstimator\" + i);\n+            hz.getPNCounter(\"PNcounter\" + i);\n+            hz.getFlakeIdGenerator(\"flakeid\" + i);\n+            cacheManager.createCache(\"cache\" + i, new CacheConfig<>(\"cache\" + i));\n+        }\n+\n+        for (int i = 1; i <= 100000; i++) {\n+            IMap<Object, Object> iMap = hz.getMap(\"map\" + i);\n+            MapConfig config = node.getConfig().getMapConfig(\"map\" + i);\n+\n+            if (i % 10 == 0) {\n+                config.getMapStoreConfig().setClassName(getClass().getName()).setEnabled(true);", "originalCommit": "7219a7ad49a61d9200b6131f59e72e6f8a79b122", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "840a230666836313bcb6befd2cd04644f4d98567", "url": "https://github.com/hazelcast/hazelcast/commit/840a230666836313bcb6befd2cd04644f4d98567", "message": "Reduce the quantity of distributed objects\n\nUpdate the quantity of distributed objects", "committedDate": "2020-08-13T12:01:54Z", "type": "forcePushed"}, {"oid": "ba9bde3e6a350889f0c6684f1b507de17c8564fb", "url": "https://github.com/hazelcast/hazelcast/commit/ba9bde3e6a350889f0c6684f1b507de17c8564fb", "message": "Improve the benchmark setup\n\nReduce the quantity of distributed objects\n\nUpdate the quantity of distributed objects", "committedDate": "2020-08-13T12:03:42Z", "type": "forcePushed"}, {"oid": "ef4e21eea2d7dc85be8d719e66bc2bdb44922c79", "url": "https://github.com/hazelcast/hazelcast/commit/ef4e21eea2d7dc85be8d719e66bc2bdb44922c79", "message": "Improve the benchmark setup\n\nReduce the quantity of distributed objects\n\nUpdate the quantity of distributed objects\n\nUpdates", "committedDate": "2020-08-13T12:08:23Z", "type": "commit"}, {"oid": "ef4e21eea2d7dc85be8d719e66bc2bdb44922c79", "url": "https://github.com/hazelcast/hazelcast/commit/ef4e21eea2d7dc85be8d719e66bc2bdb44922c79", "message": "Improve the benchmark setup\n\nReduce the quantity of distributed objects\n\nUpdate the quantity of distributed objects\n\nUpdates", "committedDate": "2020-08-13T12:08:23Z", "type": "forcePushed"}, {"oid": "bb0b76bc6fa8e252ff26dda4f8e55759b305b559", "url": "https://github.com/hazelcast/hazelcast/commit/bb0b76bc6fa8e252ff26dda4f8e55759b305b559", "message": "Merged the two classes in one", "committedDate": "2020-08-13T14:14:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1MjIxNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17327#discussion_r469752216", "bodyText": "Can we please delete this class and move this main method to the PhoneHomeBenchmark itself?", "author": "erosb", "createdAt": "2020-08-13T07:30:39Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/BenchMarkRunner.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class BenchMarkRunner {\n+    public static void main(String[] args) throws RunnerException {", "originalCommit": "4fbaecd3e6cf44b5be98ae3061ff7b1da9f54a9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}