{"pr_number": 16924, "pr_title": "Connection count and getActiveConnections cleanup", "pr_createdAt": "2020-04-24T03:07:50Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16924", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MTgzMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16924#discussion_r414351830", "bodyText": "rogue \\ inserted here", "author": "vbekiaris", "createdAt": "2020-04-24T07:19:42Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/Server.java", "diffHunk": "@@ -39,33 +40,54 @@\n      * Returns a {@link ServerConnectionManager} that is able to handle\n      * connections for the given qualifier.\n      *\n-     * It is important to realize that the returned manager could also\n+     * It is important to realize that the return\\ed manager could also", "originalCommit": "9352e653a2254c5594fc4fd2dd83fa03611ba460", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MjI4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16924#discussion_r414352284", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * for the given an {@link EndpointQualifier}. It for MEMBER there will always be an\n          \n          \n            \n                 * for the given {@link EndpointQualifier}. For {@code MEMBER} there will always be a", "author": "vbekiaris", "createdAt": "2020-04-24T07:20:36Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/Server.java", "diffHunk": "@@ -39,33 +40,54 @@\n      * Returns a {@link ServerConnectionManager} that is able to handle\n      * connections for the given qualifier.\n      *\n-     * It is important to realize that the returned manager could also\n+     * It is important to realize that the return\\ed manager could also\n      * manage other connections; so if you ask for a member connection manager\n      * it could be that you get a connection manager that also handles client\n      * connections. So if you would ask for {@link ServerConnectionManager#getConnections()}\n      * it could contain a mixture of client and member connections.\n      *\n      * @param qualifier the EndpointQualifier used to select the right connection manager.\n      * @return the relevant {@link ServerConnectionManager} that processes connections\n-     * for the given an {@link EndpointQualifier}\n+     * for the given an {@link EndpointQualifier}. It for MEMBER there will always be an", "originalCommit": "9352e653a2254c5594fc4fd2dd83fa03611ba460", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMDcxNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16924#discussion_r414410716", "bodyText": "minor: why specify a merge function instead of using Collectors.toMap(keyMapper, valueMapper)? Collisions are not expected here.", "author": "vbekiaris", "createdAt": "2020-04-24T08:55:51Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServer.java", "diffHunk": "@@ -233,22 +217,18 @@ public synchronized void shutdown() {\n             return emptyMap();\n         }\n \n-        Map<EndpointQualifier, NetworkStats> stats = null;\n-        for (Map.Entry<EndpointQualifier, TcpServerConnectionManager> entry : connectionManagers.entrySet()) {\n-            if (stats == null) {\n-                stats = new HashMap<>();\n-            }\n-            stats.put(entry.getKey(), entry.getValue().getNetworkStats());\n-        }\n-        return stats == null ? emptyMap() : stats;\n+        return connectionManagers.entrySet()\n+                .stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().getNetworkStats(), (a, b) -> b));", "originalCommit": "9352e653a2254c5594fc4fd2dd83fa03611ba460", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4MzI2Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16924#discussion_r414483267", "bodyText": "Intellij code rewrite function :) I'll have a look.", "author": "pveentjer", "createdAt": "2020-04-24T10:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMDcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMzI2Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16924#discussion_r414413266", "bodyText": "minor: EndpointManager -> ConnectionManager", "author": "vbekiaris", "createdAt": "2020-04-24T08:59:35Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/tcp/TcpServerConnectionManager.java", "diffHunk": "@@ -258,13 +264,13 @@ public int getKey() {\n \n     public synchronized void reset(boolean cleanListeners) {\n         acceptedChannels.forEach(IOUtil::closeResource);\n-        connectionsMap.values().forEach(conn -> close(conn, \"EndpointManager is stopping\"));\n-        activeConnections.forEach(conn -> close(conn, \"EndpointManager is stopping\"));\n+        mappedConnections.values().forEach(conn -> close(conn, \"EndpointManager is stopping\"));\n+        connections.forEach(conn -> close(conn, \"EndpointManager is stopping\"));", "originalCommit": "9352e653a2254c5594fc4fd2dd83fa03611ba460", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyMDE4MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16924#discussion_r414420181", "bodyText": "a @Nonnull annotation in this method could help clarify API. It seems there were some methods expecting it might return null but that was not the case.", "author": "vbekiaris", "createdAt": "2020-04-24T09:10:25Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/server/Server.java", "diffHunk": "@@ -39,33 +40,54 @@\n      * Returns a {@link ServerConnectionManager} that is able to handle\n      * connections for the given qualifier.\n      *\n-     * It is important to realize that the returned manager could also\n+     * It is important to realize that the return\\ed manager could also\n      * manage other connections; so if you ask for a member connection manager\n      * it could be that you get a connection manager that also handles client\n      * connections. So if you would ask for {@link ServerConnectionManager#getConnections()}\n      * it could contain a mixture of client and member connections.\n      *\n      * @param qualifier the EndpointQualifier used to select the right connection manager.\n      * @return the relevant {@link ServerConnectionManager} that processes connections\n-     * for the given an {@link EndpointQualifier}\n+     * for the given an {@link EndpointQualifier}. It for MEMBER there will always be an\n+     * ConnectionManager, but for the other ones null could be returned.\n      */\n     ServerConnectionManager getConnectionManager(EndpointQualifier qualifier);\n \n     /**\n-     * Returns all connections that have been successfully established.\n+     * Returns all connections.\n      *\n-     * @return active connections\n+     * This can be a relatively expensive operations the returned collection might be created\n+     * on every invocation. So if you are just interested in count, have a look at\n+     * {@link #connectionCount(Predicate)} method.\n+     *\n+     * @return the connections.", "originalCommit": "9352e653a2254c5594fc4fd2dd83fa03611ba460", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3902e18215a958022d6f4ab63c6405411e8f1de9", "url": "https://github.com/hazelcast/hazelcast/commit/3902e18215a958022d6f4ab63c6405411e8f1de9", "message": "WIP", "committedDate": "2020-04-27T08:11:14Z", "type": "forcePushed"}, {"oid": "cadca25053ec34dbb8eede37cab9eff818d4fcac", "url": "https://github.com/hazelcast/hazelcast/commit/cadca25053ec34dbb8eede37cab9eff818d4fcac", "message": "Further ServerConnection cleanup\n\nRemoved the 'getAllConections' logic because this is an implementation\ndetail.\n\nIntroduces some connection count methods to prevent building up\nconnections and only using it to determine size.", "committedDate": "2020-04-29T06:48:05Z", "type": "forcePushed"}, {"oid": "b85619cfb14b593f60b2610810e3b72fcaa2cebc", "url": "https://github.com/hazelcast/hazelcast/commit/b85619cfb14b593f60b2610810e3b72fcaa2cebc", "message": "Further ServerConnection cleanup\n\nRemoved the 'getAllConections' logic because this is an implementation\ndetail.\n\nIntroduces some connection count methods to prevent building up\nconnections and only using it to determine size.", "committedDate": "2020-04-29T06:56:07Z", "type": "commit"}, {"oid": "b85619cfb14b593f60b2610810e3b72fcaa2cebc", "url": "https://github.com/hazelcast/hazelcast/commit/b85619cfb14b593f60b2610810e3b72fcaa2cebc", "message": "Further ServerConnection cleanup\n\nRemoved the 'getAllConections' logic because this is an implementation\ndetail.\n\nIntroduces some connection count methods to prevent building up\nconnections and only using it to determine size.", "committedDate": "2020-04-29T06:56:07Z", "type": "forcePushed"}]}