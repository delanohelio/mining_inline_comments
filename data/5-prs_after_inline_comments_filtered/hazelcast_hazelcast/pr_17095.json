{"pr_number": 17095, "pr_title": "Fixes test failure in event journal test", "pr_createdAt": "2020-06-17T06:21:18Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17095", "timeline": [{"oid": "1c12dc806b99596701275c53559dda714e639b84", "url": "https://github.com/hazelcast/hazelcast/commit/1c12dc806b99596701275c53559dda714e639b84", "message": "Fixes test failure in event journal test\n\nFixes allowReadingWithFutureSeq to account for\npotential reordering of invocations.\nIn the specific test, the request to read\nfrom event journal with a future sequence may be\nreordered with put request when a client is not yet\naware of partition owners.\nAdditionally, in order to unblock the event journal\nreader several puts may be required.", "committedDate": "2020-06-17T06:19:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNjE4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17095#discussion_r441306183", "bodyText": "removed assertions no longer make sense since we are executing several puts", "author": "vbekiaris", "createdAt": "2020-06-17T06:21:43Z", "path": "hazelcast/src/test/java/com/hazelcast/journal/AbstractEventJournalBasicTest.java", "diffHunk": "@@ -485,34 +484,34 @@ public void allowReadingWithFutureSeq() throws Exception {\n         assertEquals(-1, state.getNewestSequence());\n         assertEventJournalSize(context.dataAdapter, 0);\n \n-        final String key = randomPartitionKey();\n         final Integer value = RANDOM.nextInt();\n         final CountDownLatch latch = new CountDownLatch(1);\n         final int startSequence = 1;\n \n         final BiConsumer<ReadResultSet<EJ_TYPE>, Throwable> callback = (response, t) -> {\n             if (t == null) {\n+                latch.countDown();\n                 assertEquals(1, response.size());\n                 final EventJournalEventAdapter<String, Integer, EJ_TYPE> journalAdapter = context.eventJournalAdapter;\n                 final EJ_TYPE e = response.get(0);\n \n                 assertEquals(ADDED, journalAdapter.getType(e));\n-                assertEquals(key, journalAdapter.getKey(e));", "originalCommit": "1c12dc806b99596701275c53559dda714e639b84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNjQxNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17095#discussion_r441306415", "bodyText": "If the event journal read request was completed exceptionally, rethrow the exception", "author": "vbekiaris", "createdAt": "2020-06-17T06:22:22Z", "path": "hazelcast/src/test/java/com/hazelcast/journal/AbstractEventJournalBasicTest.java", "diffHunk": "@@ -485,34 +484,34 @@ public void allowReadingWithFutureSeq() throws Exception {\n         assertEquals(-1, state.getNewestSequence());\n         assertEventJournalSize(context.dataAdapter, 0);\n \n-        final String key = randomPartitionKey();\n         final Integer value = RANDOM.nextInt();\n         final CountDownLatch latch = new CountDownLatch(1);\n         final int startSequence = 1;\n \n         final BiConsumer<ReadResultSet<EJ_TYPE>, Throwable> callback = (response, t) -> {\n             if (t == null) {\n+                latch.countDown();\n                 assertEquals(1, response.size());\n                 final EventJournalEventAdapter<String, Integer, EJ_TYPE> journalAdapter = context.eventJournalAdapter;\n                 final EJ_TYPE e = response.get(0);\n \n                 assertEquals(ADDED, journalAdapter.getType(e));\n-                assertEquals(key, journalAdapter.getKey(e));\n                 assertEquals(value, journalAdapter.getNewValue(e));\n-                assertNotEquals(startSequence + response.readCount(), response.getNextSequenceToReadFrom());\n-                assertEquals(1, response.getNextSequenceToReadFrom());\n-                latch.countDown();\n             } else {\n-                t.printStackTrace();\n+                rethrow(t);", "originalCommit": "1c12dc806b99596701275c53559dda714e639b84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}