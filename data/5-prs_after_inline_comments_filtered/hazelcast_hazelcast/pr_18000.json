{"pr_number": 18000, "pr_title": "Fixes read of generic record", "pr_createdAt": "2020-12-23T20:10:25Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/18000", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548417028", "bodyText": "Should be javax.annotation.Nonnull", "author": "puzpuzpuz", "createdAt": "2020-12-24T06:42:41Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableGenericRecord.java", "diffHunk": "@@ -16,17 +16,20 @@\n \n package com.hazelcast.internal.serialization.impl.portable;\n \n+import com.hazelcast.internal.serialization.impl.AbstractGenericRecord;\n import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.nio.serialization.FieldDefinition;\n import com.hazelcast.nio.serialization.FieldType;\n import com.hazelcast.nio.serialization.GenericRecord;\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ1OTIwNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548459205", "bodyText": "I wonder if is there a way to tell IDE not to set this by default", "author": "sancar", "createdAt": "2020-12-24T09:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ2MjUyNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548462525", "bodyText": "It would be even nicer to have a linter rule to fail code style validation if org.jetbrains.annotations.NotNull is in use. It seems to be a common pitfall.", "author": "puzpuzpuz", "createdAt": "2020-12-24T09:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNzAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxODcyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548418724", "bodyText": "Should probably use Objects#hashCode, as Objects#hash is nothing more than Arrays#hashCode called on varargs array.", "author": "puzpuzpuz", "createdAt": "2020-12-24T06:49:24Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof AbstractGenericRecord)) {\n+            return false;\n+        }\n+        AbstractGenericRecord that = (AbstractGenericRecord) o;\n+        if (!that.getClassIdentifier().equals(getClassIdentifier())) {\n+            return false;\n+        }\n+        Set<String> thatFieldNames = that.getFieldNames();\n+        Set<String> thisFieldNames = getFieldNames();\n+        if (!Objects.equals(thatFieldNames, thisFieldNames)) {\n+            return false;\n+        }\n+        for (String fieldName : thatFieldNames) {\n+            FieldType thatFieldType = that.getFieldType(fieldName);\n+            FieldType thisFieldType = getFieldType(fieldName);\n+            if (!thatFieldType.equals(thisFieldType)) {\n+                return false;\n+            }\n+            if (thatFieldType.isArrayType()) {\n+                if (!Objects.deepEquals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            } else {\n+                if (!Objects.equals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        int result = Objects.hash(getClassIdentifier());", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTA4MA==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548419080", "bodyText": "nit: could be renamed to fieldNames", "author": "puzpuzpuz", "createdAt": "2020-12-24T06:50:46Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();\n+\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof AbstractGenericRecord)) {\n+            return false;\n+        }\n+        AbstractGenericRecord that = (AbstractGenericRecord) o;\n+        if (!that.getClassIdentifier().equals(getClassIdentifier())) {\n+            return false;\n+        }\n+        Set<String> thatFieldNames = that.getFieldNames();\n+        Set<String> thisFieldNames = getFieldNames();\n+        if (!Objects.equals(thatFieldNames, thisFieldNames)) {\n+            return false;\n+        }\n+        for (String fieldName : thatFieldNames) {\n+            FieldType thatFieldType = that.getFieldType(fieldName);\n+            FieldType thisFieldType = getFieldType(fieldName);\n+            if (!thatFieldType.equals(thisFieldType)) {\n+                return false;\n+            }\n+            if (thatFieldType.isArrayType()) {\n+                if (!Objects.deepEquals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            } else {\n+                if (!Objects.equals(readAny(that, fieldName, thatFieldType), readAny(this, fieldName, thisFieldType))) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public int hashCode() {\n+        int result = Objects.hash(getClassIdentifier());\n+        Set<String> thisFieldNames = getFieldNames();", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548419306", "bodyText": "This method looks like something specific to Portables. How it will work for, say, the new serialization format?", "author": "puzpuzpuz", "createdAt": "2020-12-24T06:51:45Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation\n+ */\n+@SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"})\n+public abstract class AbstractGenericRecord implements GenericRecord {\n+\n+    protected abstract Object getClassIdentifier();", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0NTA1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548445052", "bodyText": "Yes, it will work for the new serialization format as well. That is why the return type is Object and not ClassDefinition", "author": "sancar", "createdAt": "2020-12-24T08:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ1MjQ0MA==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548452440", "bodyText": "Is it going to return the schema itself or schema id?", "author": "puzpuzpuz", "createdAt": "2020-12-24T08:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1NjQwNA==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548556404", "bodyText": "It will return the schema itself", "author": "sancar", "createdAt": "2020-12-24T15:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU4NzA3OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548587079", "bodyText": "Makes sense. It might be a good idea to document the contract for this method.", "author": "puzpuzpuz", "createdAt": "2020-12-24T16:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxOTMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMTI2MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548421261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Implementation of GenericRecord interface to give common equals and hashcode implementation\n          \n          \n            \n             * Implementation of GenericRecord interface to give common equals and hashCode implementations.", "author": "puzpuzpuz", "createdAt": "2020-12-24T06:59:27Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/AbstractGenericRecord.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.nio.serialization.FieldType;\n+import com.hazelcast.nio.serialization.GenericRecord;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Implementation of GenericRecord interface to give common equals and hashcode implementation", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMTQzOA==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548421438", "bodyText": "Should be javax.annotation.Nonnull", "author": "puzpuzpuz", "createdAt": "2020-12-24T07:00:18Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/portable/PortableInternalGenericRecord.java", "diffHunk": "@@ -26,9 +27,11 @@\n import com.hazelcast.nio.serialization.HazelcastSerializationException;\n import com.hazelcast.nio.serialization.Portable;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.jetbrains.annotations.NotNull;", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMjI4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/18000#discussion_r548422283", "bodyText": "nit: looks like a leftover.", "author": "puzpuzpuz", "createdAt": "2020-12-24T07:03:52Z", "path": "hazelcast/src/test/java/com/hazelcast/genericrecord/AbstractGenericRecordTest.java", "diffHunk": "@@ -134,6 +134,8 @@ public void testPutWithoutFactory_readAsPortable() throws IOException {\n         IMap<Object, Object> clusterMap = instances[0].getMap(\"test\");\n         clusterMap.put(1, expected);\n \n+        System.out.println(expected);", "originalCommit": "b457d201635740af365976c2e9de9eff0e3295be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "url": "https://github.com/hazelcast/hazelcast/commit/f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "message": "Fixes read of generic record\n\nPosition of BufferObjectDataInput is corrected so that\nsubsequent items can be read correctly after reading a\ngeneric record.", "committedDate": "2020-12-24T19:36:56Z", "type": "commit"}, {"oid": "f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "url": "https://github.com/hazelcast/hazelcast/commit/f5bc94ac7bd6e2939b9c4b420df719ee85dce41a", "message": "Fixes read of generic record\n\nPosition of BufferObjectDataInput is corrected so that\nsubsequent items can be read correctly after reading a\ngeneric record.", "committedDate": "2020-12-24T19:36:56Z", "type": "forcePushed"}]}