{"pr_number": 17286, "pr_title": "Fix race in (JCache) cache creation", "pr_createdAt": "2020-08-01T15:51:32Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17286", "timeline": [{"oid": "a58cce028c73051c634198d1925a8ecd7333988b", "url": "https://github.com/hazelcast/hazelcast/commit/a58cce028c73051c634198d1925a8ecd7333988b", "message": "Fix race in (JCache) cache creation\n\nFixes #17284", "committedDate": "2020-08-01T15:49:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDkyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17286#discussion_r463974923", "bodyText": "20 looks like a good number:)\nthis is a slow serial test, having more threads than cores should cause enough context switching to trigger the race condition. On my laptop the test fails in +- 50% of runs.", "author": "jerrinot", "createdAt": "2020-08-01T15:54:37Z", "path": "hazelcast/src/test/java/com/hazelcast/cache/CacheCreationTest.java", "diffHunk": "@@ -80,6 +82,45 @@ public void createSingleCache() {\n         cache.get(1);\n     }\n \n+    @Test\n+    public void concurrentCacheCreation() throws InterruptedException {\n+        // see https://github.com/hazelcast/hazelcast/issues/17284\n+        String cacheName = \"myCache\";\n+        int threadCount = Runtime.getRuntime().availableProcessors() * 20;", "originalCommit": "a58cce028c73051c634198d1925a8ecd7333988b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}