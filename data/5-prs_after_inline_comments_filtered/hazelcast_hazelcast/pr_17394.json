{"pr_number": 17394, "pr_title": "SQL TRIM function ", "pr_createdAt": "2020-08-22T19:53:35Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17394", "timeline": [{"oid": "977c38cd535043f2127d900b5cab6a69656cf3cf", "url": "https://github.com/hazelcast/hazelcast/commit/977c38cd535043f2127d900b5cab6a69656cf3cf", "message": "SQL math expressions (#17339)", "committedDate": "2020-08-12T15:23:50Z", "type": "commit"}, {"oid": "298a55b287a0d68f302eb17d2189e10cb7aa10cc", "url": "https://github.com/hazelcast/hazelcast/commit/298a55b287a0d68f302eb17d2189e10cb7aa10cc", "message": "Merge branch 'master' into issues/17339\n\n# Conflicts:\n#\thazelcast/src/test/java/com/hazelcast/sql/impl/SqlTestSupport.java", "committedDate": "2020-08-14T06:01:45Z", "type": "commit"}, {"oid": "474282c2fda86b821e4666ea6ada8bff548f4f89", "url": "https://github.com/hazelcast/hazelcast/commit/474282c2fda86b821e4666ea6ada8bff548f4f89", "message": "Refactored tests", "committedDate": "2020-08-14T06:35:15Z", "type": "commit"}, {"oid": "e3edaf8de7f23d9af988aebc44332c0e4a5128f2", "url": "https://github.com/hazelcast/hazelcast/commit/e3edaf8de7f23d9af988aebc44332c0e4a5128f2", "message": "ABS tests for negative zero", "committedDate": "2020-08-14T06:40:47Z", "type": "commit"}, {"oid": "932c75f84fdec229b719bda8067b0db573bebfda", "url": "https://github.com/hazelcast/hazelcast/commit/932c75f84fdec229b719bda8067b0db573bebfda", "message": "Removed unnecessary tests for Float.MIN_VALUE and Double.MIN_VALUE", "committedDate": "2020-08-14T06:42:31Z", "type": "commit"}, {"oid": "5cd155b6a6d1313e18bd3cc57dfda2c69be7d1b8", "url": "https://github.com/hazelcast/hazelcast/commit/5cd155b6a6d1313e18bd3cc57dfda2c69be7d1b8", "message": "Added missing test for numeric literals in single quotes for CEIL/FLOOR tests", "committedDate": "2020-08-14T06:45:08Z", "type": "commit"}, {"oid": "20a0d1a438f5d09cbf25a948c0af91fc4d0620a4", "url": "https://github.com/hazelcast/hazelcast/commit/20a0d1a438f5d09cbf25a948c0af91fc4d0620a4", "message": "Test for several rows for RAND", "committedDate": "2020-08-14T06:51:12Z", "type": "commit"}, {"oid": "95442d9b91abe7324b404b3fee044505319410ce", "url": "https://github.com/hazelcast/hazelcast/commit/95442d9b91abe7324b404b3fee044505319410ce", "message": "Added \"notAny\" to ROUND/TRUNCATE", "committedDate": "2020-08-14T07:00:40Z", "type": "commit"}, {"oid": "d466387bbc40ac2977bf76730cb827e30455df61", "url": "https://github.com/hazelcast/hazelcast/commit/d466387bbc40ac2977bf76730cb827e30455df61", "message": "Fixed inference for double functions (DECIMAL -> DOUBLE) and RAND (DECIMAL -> BIGINT)", "committedDate": "2020-08-14T07:10:09Z", "type": "commit"}, {"oid": "cbe1191d997e2ec6b6f153bf26bcb58fa23ff189", "url": "https://github.com/hazelcast/hazelcast/commit/cbe1191d997e2ec6b6f153bf26bcb58fa23ff189", "message": "Fixed SpotBugs problem", "committedDate": "2020-08-14T07:34:58Z", "type": "commit"}, {"oid": "493b6d471f6c1fa75b02a2de74eb800763df1d97", "url": "https://github.com/hazelcast/hazelcast/commit/493b6d471f6c1fa75b02a2de74eb800763df1d97", "message": "Changed operand type inference for double functions", "committedDate": "2020-08-14T08:45:54Z", "type": "commit"}, {"oid": "883ec348410adabed42e705bc43486fd47910e34", "url": "https://github.com/hazelcast/hazelcast/commit/883ec348410adabed42e705bc43486fd47910e34", "message": "DoubleFunction: removed concrete functions from JavaDoc.", "committedDate": "2020-08-14T09:02:35Z", "type": "commit"}, {"oid": "f3111ee9c98418fbbe9a62cf6382f033755058d5", "url": "https://github.com/hazelcast/hazelcast/commit/f3111ee9c98418fbbe9a62cf6382f033755058d5", "message": "Explicit inference for RAND", "committedDate": "2020-08-14T11:26:26Z", "type": "commit"}, {"oid": "71084cebcb6c919e0639a367f33369499f968d0d", "url": "https://github.com/hazelcast/hazelcast/commit/71084cebcb6c919e0639a367f33369499f968d0d", "message": "Assert types in RoundTruncateFunction", "committedDate": "2020-08-14T11:35:24Z", "type": "commit"}, {"oid": "9c400000d1523948822545362cc863d509afeabc", "url": "https://github.com/hazelcast/hazelcast/commit/9c400000d1523948822545362cc863d509afeabc", "message": "Extended tests for RAND", "committedDate": "2020-08-14T11:38:25Z", "type": "commit"}, {"oid": "63b76e16d69d95177d08f87bb4efef4f949b83c3", "url": "https://github.com/hazelcast/hazelcast/commit/63b76e16d69d95177d08f87bb4efef4f949b83c3", "message": "Checkstyle", "committedDate": "2020-08-14T11:40:12Z", "type": "commit"}, {"oid": "5ce9f81ee0c5574f58c1197f9107bea75f3c9e51", "url": "https://github.com/hazelcast/hazelcast/commit/5ce9f81ee0c5574f58c1197f9107bea75f3c9e51", "message": "Added lenght overflow handling to ROUND/TRUNCATE", "committedDate": "2020-08-14T12:16:16Z", "type": "commit"}, {"oid": "dfaecc359d9ca7ccc76f148ea7149796ceb862f7", "url": "https://github.com/hazelcast/hazelcast/commit/dfaecc359d9ca7ccc76f148ea7149796ceb862f7", "message": "Merge branch 'master' into issues/17339", "committedDate": "2020-08-15T07:48:45Z", "type": "commit"}, {"oid": "6b2cf5f249013cf53d34b8d63625624de1cde5ca", "url": "https://github.com/hazelcast/hazelcast/commit/6b2cf5f249013cf53d34b8d63625624de1cde5ca", "message": "Predicates", "committedDate": "2020-08-15T14:28:58Z", "type": "commit"}, {"oid": "9654d668ef107bd5a3b7d1dccdcfe4efb8948e4e", "url": "https://github.com/hazelcast/hazelcast/commit/9654d668ef107bd5a3b7d1dccdcfe4efb8948e4e", "message": "WIP on tests", "committedDate": "2020-08-17T07:09:41Z", "type": "commit"}, {"oid": "87bfbdc0702a4b8a10739e64f7f922ccbea4d998", "url": "https://github.com/hazelcast/hazelcast/commit/87bfbdc0702a4b8a10739e64f7f922ccbea4d998", "message": "wip", "committedDate": "2020-08-17T07:32:01Z", "type": "commit"}, {"oid": "a70841209bd9c914591e087d5467c0eb9cefb667", "url": "https://github.com/hazelcast/hazelcast/commit/a70841209bd9c914591e087d5467c0eb9cefb667", "message": "wip", "committedDate": "2020-08-17T09:27:59Z", "type": "commit"}, {"oid": "c857ffa974be0181e3f3f72daefa547ad8e694a2", "url": "https://github.com/hazelcast/hazelcast/commit/c857ffa974be0181e3f3f72daefa547ad8e694a2", "message": "WIP", "committedDate": "2020-08-17T10:56:10Z", "type": "commit"}, {"oid": "5d78551ec10c434ec481669e5c111daf3fddd895", "url": "https://github.com/hazelcast/hazelcast/commit/5d78551ec10c434ec481669e5c111daf3fddd895", "message": "SUBSTRING ready", "committedDate": "2020-08-17T11:39:41Z", "type": "commit"}, {"oid": "fe5c5945af2867d7dab521db69ddc3bcd4bc0c8f", "url": "https://github.com/hazelcast/hazelcast/commit/fe5c5945af2867d7dab521db69ddc3bcd4bc0c8f", "message": "WIP on TRIM", "committedDate": "2020-08-17T12:28:36Z", "type": "commit"}, {"oid": "0bfc5b8d7643a79d9af17efd6c31d8cd95400818", "url": "https://github.com/hazelcast/hazelcast/commit/0bfc5b8d7643a79d9af17efd6c31d8cd95400818", "message": "Merge branch 'master' into sql-trim\n\n# Conflicts:\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/RexToExpression.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/parse/UnsupportedOperationVisitor.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/HazelcastSqlOperatorTable.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/operators/HazelcastSqlLikeOperator.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/operators/HazelcastSqlStringFunction.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/operators/HazelcastSqlSubstringFunction.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java\n#\thazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/ReplaceUnknownOperandTypeInference.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/ParameterEndToEndTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/SqlExpressionIntegrationTestSupport.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/AbsFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/CeilFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/DoubleFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/FloorFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/RandFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/RoundFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/SignFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/math/TruncateFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/predicate/AndPredicateIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/predicate/ComparisonPredicateIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/predicate/IsTrueFalsePredicateIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/predicate/NotPredicateIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/predicate/OrPredicateIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/AsciiFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/CharLengthFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/ConcatFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/InitcapFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/LikeFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/LowerFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/SubstringFunctionIntegrationTest.java\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/UpperFunctionIntegrationTest.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/math/AbsFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/AsciiFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/CharLengthFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/ConcatFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/InitcapFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/LikeFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/LowerFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/SubstringFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/UpperFunction.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/type/converter/Converter.java\n#\thazelcast/src/test/java/com/hazelcast/sql/impl/SqlTestSupport.java", "committedDate": "2020-08-22T12:33:03Z", "type": "commit"}, {"oid": "a48e00b9422982cba66f8867aa2109762647b791", "url": "https://github.com/hazelcast/hazelcast/commit/a48e00b9422982cba66f8867aa2109762647b791", "message": "TRIM works", "committedDate": "2020-08-22T13:05:08Z", "type": "commit"}, {"oid": "1300b87dda5dbb57514390ab03ceb5647a88f809", "url": "https://github.com/hazelcast/hazelcast/commit/1300b87dda5dbb57514390ab03ceb5647a88f809", "message": "Test for ltrim/rtrim/btrim", "committedDate": "2020-08-22T18:37:29Z", "type": "commit"}, {"oid": "a4b79fda34d0d0ab189079c53b7a41baf7704d47", "url": "https://github.com/hazelcast/hazelcast/commit/a4b79fda34d0d0ab189079c53b7a41baf7704d47", "message": "Done", "committedDate": "2020-08-22T19:44:10Z", "type": "commit"}, {"oid": "f41c10fb29e6a926b1db6c88d7edf11664664bd2", "url": "https://github.com/hazelcast/hazelcast/commit/f41c10fb29e6a926b1db6c88d7edf11664664bd2", "message": "Added IDS to SymbolExpression", "committedDate": "2020-08-23T06:33:40Z", "type": "commit"}, {"oid": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843", "url": "https://github.com/hazelcast/hazelcast/commit/b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843", "message": "Added IDS to SymbolExpression", "committedDate": "2020-08-23T06:34:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MDgwNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475760807", "bodyText": "We miss the test for TRIM(' ' FROM null) case", "author": "viliam-durina", "createdAt": "2020-08-24T16:59:49Z", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/string/TrimFunctionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.string;\n+\n+import com.hazelcast.sql.SqlColumnType;\n+import com.hazelcast.sql.impl.SqlErrorCode;\n+import com.hazelcast.sql.impl.expression.SqlExpressionIntegrationTestSupport;\n+import com.hazelcast.sql.support.expressions.ExpressionValue;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.math.BigDecimal;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class TrimFunctionIntegrationTest extends SqlExpressionIntegrationTestSupport {\n+    /**\n+     * Test TRIM usage with custom characters.\n+     * <p>\n+     * We assume that behavior of the input operand is tested elsewhere.\n+     */\n+    @Test\n+    public void test_trim_3_arg() {\n+        // Test normal behavior\n+        put(1);\n+\n+        // Spaces\n+        checkValueInternal(\"SELECT TRIM(LEADING ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"abc  \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"  abc\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ' ' FROM '  abc  ') FROM map\", SqlColumnType.VARCHAR, \"abc\");\n+\n+        // Empty operand should be no-op\n+        checkValueInternal(\"SELECT TRIM(LEADING '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH '' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        // Cannot trim anything because target values are \"protected\" with spaces\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ab' FROM ' ab ') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        // Trim with custom characters\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab ababab\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \"ababab ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ab' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab ababab\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \"ababab ab \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'ba' FROM 'ababab ab ababab') FROM map\", SqlColumnType.VARCHAR, \" ab \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'a' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH 'aa' FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        // Test column\n+        put(new ExpressionValue.StringVal());\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, null);\n+\n+        put(new ExpressionValue.StringVal().field1(\"a\"));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        put(new ExpressionValue.CharacterVal().field1('a'));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \"aa aba \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM 'aa aba aa') FROM map\", SqlColumnType.VARCHAR, \" aba \");\n+\n+        put(new ExpressionValue.BigDecimalVal().field1(BigDecimal.ONE));\n+        checkValueInternal(\"SELECT TRIM(LEADING field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \" 121 11\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \"11 121 \");\n+        checkValueInternal(\"SELECT TRIM(BOTH field1 FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, \" 121 \");\n+\n+        // Test parameter\n+        put(1);\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, null, new Object[] { null });\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab aa\", \"a\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \"aa ab \", \"a\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab \", \"a\");\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab aa\", 'a');\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \"aa ab \", 'a');\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlColumnType.VARCHAR, \" ab \", 'a');\n+\n+        checkFailureInternal(\"SELECT TRIM(LEADING ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+        checkFailureInternal(\"SELECT TRIM(TRAILING ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+        checkFailureInternal(\"SELECT TRIM(BOTH ? FROM 'aa ab aa') FROM map\", SqlErrorCode.DATA_EXCEPTION, \"Cannot implicitly convert parameter at position 0 from INTEGER to VARCHAR\", 1);\n+\n+        checkValueInternal(\"SELECT TRIM(LEADING ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \" aba aa\", \"a\", \"aa aba aa\");\n+        checkValueInternal(\"SELECT TRIM(TRAILING ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \"aa aba \", \"a\", \"aa aba aa\");\n+        checkValueInternal(\"SELECT TRIM(BOTH ? FROM ?) FROM map\", SqlColumnType.VARCHAR, \" aba \", \"a\", \"aa aba aa\");\n+\n+        // Test literals\n+        checkValueInternal(\"SELECT TRIM(LEADING null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(TRAILING null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);\n+        checkValueInternal(\"SELECT TRIM(BOTH null FROM '11 121 11') FROM map\", SqlColumnType.VARCHAR, null);", "originalCommit": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyMDkyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475820926", "bodyText": "Added missing tests", "author": "devozerov", "createdAt": "2020-08-24T18:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MDgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MzU4OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475763589", "bodyText": "Wouldn't it be easier to use ArrayList to build the constructor list and then use toArray on it and avoid this LEN constant? Seems like micro-optimization.", "author": "viliam-durina", "createdAt": "2020-08-24T17:04:48Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java", "diffHunk": "@@ -155,8 +156,9 @@\n     public static final int EXPRESSION_CONCAT = 58;\n     public static final int EXPRESSION_LIKE = 59;\n     public static final int EXPRESSION_SUBSTRING = 60;\n+    public static final int EXPRESSION_TRIM = 61;\n \n-    public static final int LEN = EXPRESSION_SUBSTRING + 1;\n+    public static final int LEN = EXPRESSION_TRIM + 1;", "originalCommit": "b43d4b4a2bbb2adb3c26b5d08183db7f73ef6843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzg5MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r475817890", "bodyText": "Perhaps you are right, it would be easier. But this is a common approach across other hooks, we just follow it here.", "author": "devozerov", "createdAt": "2020-08-24T18:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc2MzU4OQ=="}], "type": "inlineReview"}, {"oid": "a724f9aaaf470d070ec9a2fabc3ec2ece40ac447", "url": "https://github.com/hazelcast/hazelcast/commit/a724f9aaaf470d070ec9a2fabc3ec2ece40ac447", "message": "Grammar", "committedDate": "2020-08-24T17:08:54Z", "type": "commit"}, {"oid": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6", "url": "https://github.com/hazelcast/hazelcast/commit/e7ab5aaaff249516782d956bfa792b15bbc2e3d6", "message": "Added test for TRIM(' ' FROM null)", "committedDate": "2020-08-24T18:43:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4NjgxMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476186811", "bodyText": "never used", "author": "taburet", "createdAt": "2020-08-25T05:30:06Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastInferTypes.java", "diffHunk": "@@ -81,6 +81,18 @@\n         }\n     };\n \n+    public static final SqlOperandTypeInference VARCHAR_IF_UNKNOWN = (callBinding, returnType, operandTypes) -> {", "originalCommit": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzc5OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476243799", "bodyText": "Removed dead code", "author": "devozerov", "createdAt": "2020-08-25T07:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4NjgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODg0OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476188849", "bodyText": "None of the methods are used in this PR except asVarchar.", "author": "taburet", "createdAt": "2020-08-25T05:36:48Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/string/StringExpressionUtils.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression.string;\n+\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.expression.Expression;\n+import com.hazelcast.sql.impl.expression.ExpressionEvalContext;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Utility methods for string functions.\n+ */\n+public final class StringExpressionUtils {", "originalCommit": "e7ab5aaaff249516782d956bfa792b15bbc2e3d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0Mzc0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17394#discussion_r476243744", "bodyText": "An artifact of the bad merge. Removed StringExpressionUtils class.", "author": "devozerov", "createdAt": "2020-08-25T07:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODg0OQ=="}], "type": "inlineReview"}, {"oid": "2a597e1afbd65c396b4418fffd03c2cf422241e8", "url": "https://github.com/hazelcast/hazelcast/commit/2a597e1afbd65c396b4418fffd03c2cf422241e8", "message": "Merge branch 'master' into sql-trim", "committedDate": "2020-08-25T07:41:29Z", "type": "commit"}, {"oid": "2642a19666cc7b66691503dcce204c0a645dcd11", "url": "https://github.com/hazelcast/hazelcast/commit/2642a19666cc7b66691503dcce204c0a645dcd11", "message": "Removed dead code", "committedDate": "2020-08-25T07:44:12Z", "type": "commit"}]}