{"pr_number": 16506, "pr_title": "Enforce stability of Metric names", "pr_createdAt": "2020-01-20T18:06:40Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16506", "timeline": [{"oid": "b83c456311625a42b12db23f19c6c62cdf65a8df", "url": "https://github.com/hazelcast/hazelcast/commit/b83c456311625a42b12db23f19c6c62cdf65a8df", "message": "Add constants for metric descriptor fields except metric names", "committedDate": "2020-01-20T16:21:07Z", "type": "commit"}, {"oid": "7a6917e7fb1da304ce49424876f52c976107cb64", "url": "https://github.com/hazelcast/hazelcast/commit/7a6917e7fb1da304ce49424876f52c976107cb64", "message": "Make name mandatory on @Probe annotation", "committedDate": "2020-01-20T16:28:03Z", "type": "commit"}, {"oid": "ee399525d2e6e1c93bfc3be9695422860b2b471f", "url": "https://github.com/hazelcast/hazelcast/commit/ee399525d2e6e1c93bfc3be9695422860b2b471f", "message": "Extract metric names into a file containing constants", "committedDate": "2020-01-21T09:35:06Z", "type": "commit"}, {"oid": "ee399525d2e6e1c93bfc3be9695422860b2b471f", "url": "https://github.com/hazelcast/hazelcast/commit/ee399525d2e6e1c93bfc3be9695422860b2b471f", "message": "Extract metric names into a file containing constants", "committedDate": "2020-01-21T09:35:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTIxOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369015219", "bodyText": "Self-closing elements not allowed: https://bugs.openjdk.java.net/browse/JDK-8020619", "author": "vojtechtoman", "createdAt": "2020-01-21T13:59:08Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.metrics;\n+\n+/**\n+ * Class holding constants for metric names, prefixes, discriminators etc.\n+ * <p/>", "originalCommit": "b83c456311625a42b12db23f19c6c62cdf65a8df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyODM3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369028378", "bodyText": "Right, I fix this. Thanks for the link \ud83d\udc4d", "author": "blazember", "createdAt": "2020-01-21T14:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTMxMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369031311", "bodyText": "Fixed", "author": "blazember", "createdAt": "2020-01-21T14:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxOTIxMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369019211", "bodyText": "Just wondering - instead of having separate CACHE_DISCRIMINATOR_NAME, EXECUTOR_DISCRIMINATOR_NAME, MAP_DISCRIMINATOR_NAME, GENERAL_DISCRIMINATOR_NAME, wouldn't it be better to have just one - DISCRIMINATOR_NAME? The same maybe for other discriminators.\nBut this is minor and probably just a mater of taste.", "author": "vojtechtoman", "createdAt": "2020-01-21T14:06:24Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.metrics;\n+\n+/**\n+ * Class holding constants for metric names, prefixes, discriminators etc.\n+ * <p/>\n+ *\n+ * IMPORTANT NOTE:\n+ * The constants in this file are meant to be stable and can be changed\n+ * between minor releases only if at all. Changing any of the constants\n+ * in this class might break Management Center or any metrics consumer\n+ * code.\n+ */\n+public final class MetricDescriptorConstants {\n+\n+    // ===[CACHE]=======================================================\n+    public static final String CACHE_PREFIX = \"cache\";\n+    public static final String CACHE_DISCRIMINATOR_NAME = \"name\";", "originalCommit": "b83c456311625a42b12db23f19c6c62cdf65a8df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyNzk5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369027994", "bodyText": "No strong reason for having separate discriminator names. I wanted to keep all related constants around the same section, maybe it's easier to look for what we have for a particular DS, service, etc. There is a GENERAL_DISCRIMINATOR_NAME though, which is the only exception from the above \"guideline\". That's because it is used in a general place. If no strong reasons for changing it, I'd prefer to keep it as is.", "author": "blazember", "createdAt": "2020-01-21T14:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxOTIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMjM4OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369022388", "bodyText": "By default the name of the field or method is used.\n\nNo longer true?", "author": "vojtechtoman", "createdAt": "2020-01-21T14:12:16Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/Probe.java", "diffHunk": "@@ -74,7 +74,7 @@\n      *\n      * @return the name of the Probe.\n      */\n-    String name() default \"\";\n+    String name();", "originalCommit": "7a6917e7fb1da304ce49424876f52c976107cb64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369031184", "bodyText": "Ooops... Fixed.", "author": "blazember", "createdAt": "2020-01-21T14:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMjM4OA=="}], "type": "inlineReview"}, {"oid": "a999a4997db6713ed4508648100173eac8ea2489", "url": "https://github.com/hazelcast/hazelcast/commit/a999a4997db6713ed4508648100173eac8ea2489", "message": "Address review comments", "committedDate": "2020-01-21T14:25:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTA2MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369031060", "bodyText": "btw, <p> is enough :)", "author": "vojtechtoman", "createdAt": "2020-01-21T14:27:01Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n /**\n  * Class holding constants for metric names, prefixes, discriminators etc.\n- * <p/>\n+ * <p></p>", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMzAyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369033024", "bodyText": "I checked in my IntelliJ doc viewer and <p> didn't really separate the two paragraphs, it was just like a new line and I wanted to highlight the note. Maybe it's a rendering issue.", "author": "blazember", "createdAt": "2020-01-21T14:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzODg4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369038884", "bodyText": "Could be. The 'official' Oracle guide says:\n\nIf you have more than one paragraph in the doc comment, separate the paragraphs with a <p> paragraph tag, as shown.", "author": "vojtechtoman", "createdAt": "2020-01-21T14:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5NzA4MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369397081", "bodyText": "Should be [/CLIENT]", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:04:22Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.metrics;\n+\n+/**\n+ * Class holding constants for metric names, prefixes, discriminators etc.\n+ * <p></p>\n+ *\n+ * IMPORTANT NOTE:\n+ * The constants in this file are meant to be stable and can be changed\n+ * between minor releases only if at all. Changing any of the constants\n+ * in this class might break Management Center or any metrics consumer\n+ * code.\n+ */\n+public final class MetricDescriptorConstants {\n+\n+    // ===[CACHE]=======================================================\n+    public static final String CACHE_PREFIX = \"cache\";\n+    public static final String CACHE_DISCRIMINATOR_NAME = \"name\";\n+    public static final String CACHE_METRIC_CREATION_TIME = \"creationTime\";\n+    public static final String CACHE_METRIC_LAST_ACCESS_TIME = \"lastAccessTime\";\n+    public static final String CACHE_METRIC_LAST_UPDATE_TIME = \"lastUpdateTime\";\n+    public static final String CACHE_METRIC_OWNED_ENTRY_COUNT = \"ownedEntryCount\";\n+    public static final String CACHE_METRIC_CACHE_HITS = \"cacheHits\";\n+    public static final String CACHE_METRIC_CACHE_HIT_PERCENTAGE = \"cacheHitPercentage\";\n+    public static final String CACHE_METRIC_CACHE_MISSES = \"cacheMisses\";\n+    public static final String CACHE_METRIC_CACHE_MISS_PERCENTAGE = \"cacheMissPercentage\";\n+    public static final String CACHE_METRIC_CACHE_GETS = \"cacheGets\";\n+    public static final String CACHE_METRIC_CACHE_PUTS = \"cachePuts\";\n+    public static final String CACHE_METRIC_CACHE_REMOVALS = \"cacheRemovals\";\n+    public static final String CACHE_METRIC_CACHE_EVICTIONS = \"cacheEvictions\";\n+    public static final String CACHE_METRIC_AVERAGE_GET_TIME = \"averageGetTime\";\n+    public static final String CACHE_METRIC_AVERAGE_PUT_TIME = \"averagePutTime\";\n+    public static final String CACHE_METRIC_AVERAGE_REMOVAL_TIME = \"averageRemovalTime\";\n+    // ===[/CACHE]======================================================\n+\n+    // ===[CLASS LOADING]===============================================\n+    public static final String CLASSLOADING_FULL_METRIC_LOADED_CLASSES_COUNT = \"classloading.loadedClassesCount\";\n+    public static final String CLASSLOADING_FULL_METRIC_TOTAL_LOADED_CLASSES_COUNT = \"classloading.totalLoadedClassesCount\";\n+    public static final String CLASSLOADING_FULL_METRIC_UNLOADED_CLASSES_COUNT = \"classloading.unloadedClassesCount\";\n+    // ===[/CLASS LOADING]==============================================\n+\n+    // ===[CLIENT]======================================================\n+    public static final String CLIENT_PREFIX_ENDPOINT = \"client.endpoint\";\n+    public static final String CLIENT_PREFIX_INVOCATIONS = \"invocations\";\n+    public static final String CLIENT_PREFIX_LISTENERS = \"listeners\";\n+    public static final String CLIENT_PREFIX_MEMORY = \"memory\";\n+    public static final String CLIENT_PREFIX_MEMORY_MANAGER = \"memorymanager\";\n+    public static final String CLIENT_PREFIX_EXECUTION_SERVICE = \"executionService\";\n+    public static final String CLIENT_METRIC_ENDPOINT_MANAGER_COUNT = \"count\";\n+    public static final String CLIENT_METRIC_ENDPOINT_MANAGER_TOTAL_REGISTRATIONS = \"totalRegistrations\";\n+    public static final String CLIENT_METRIC_CONNECTION_CONNECTIONID = \"connectionId\";\n+    public static final String CLIENT_METRIC_CONNECTION_EVENT_HANDLER_COUNT = \"eventHandlerCount\";\n+    public static final String CLIENT_METRIC_CONNECTION_CLOSED_TIME = \"closedTime\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_PENDING_CALLS = \"pendingCalls\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_STARTED_INVOCATIONS = \"startedInvocations\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_MAX_CURRENT_INVOCATIONS = \"maxCurrentInvocations\";\n+    public static final String CLIENT_METRIC_LISTENER_SERVICE_EVENT_QUEUE_SIZE = \"eventQueueSize\";\n+    public static final String CLIENT_METRIC_LISTENER_SERVICE_EVENTS_PROCESSED = \"eventsProcessed\";\n+    // ===[CLIENT]======================================================", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTM0MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529341", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5NzA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5NzEzMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369397130", "bodyText": "Should be [/EVENT]", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:04:31Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.metrics;\n+\n+/**\n+ * Class holding constants for metric names, prefixes, discriminators etc.\n+ * <p></p>\n+ *\n+ * IMPORTANT NOTE:\n+ * The constants in this file are meant to be stable and can be changed\n+ * between minor releases only if at all. Changing any of the constants\n+ * in this class might break Management Center or any metrics consumer\n+ * code.\n+ */\n+public final class MetricDescriptorConstants {\n+\n+    // ===[CACHE]=======================================================\n+    public static final String CACHE_PREFIX = \"cache\";\n+    public static final String CACHE_DISCRIMINATOR_NAME = \"name\";\n+    public static final String CACHE_METRIC_CREATION_TIME = \"creationTime\";\n+    public static final String CACHE_METRIC_LAST_ACCESS_TIME = \"lastAccessTime\";\n+    public static final String CACHE_METRIC_LAST_UPDATE_TIME = \"lastUpdateTime\";\n+    public static final String CACHE_METRIC_OWNED_ENTRY_COUNT = \"ownedEntryCount\";\n+    public static final String CACHE_METRIC_CACHE_HITS = \"cacheHits\";\n+    public static final String CACHE_METRIC_CACHE_HIT_PERCENTAGE = \"cacheHitPercentage\";\n+    public static final String CACHE_METRIC_CACHE_MISSES = \"cacheMisses\";\n+    public static final String CACHE_METRIC_CACHE_MISS_PERCENTAGE = \"cacheMissPercentage\";\n+    public static final String CACHE_METRIC_CACHE_GETS = \"cacheGets\";\n+    public static final String CACHE_METRIC_CACHE_PUTS = \"cachePuts\";\n+    public static final String CACHE_METRIC_CACHE_REMOVALS = \"cacheRemovals\";\n+    public static final String CACHE_METRIC_CACHE_EVICTIONS = \"cacheEvictions\";\n+    public static final String CACHE_METRIC_AVERAGE_GET_TIME = \"averageGetTime\";\n+    public static final String CACHE_METRIC_AVERAGE_PUT_TIME = \"averagePutTime\";\n+    public static final String CACHE_METRIC_AVERAGE_REMOVAL_TIME = \"averageRemovalTime\";\n+    // ===[/CACHE]======================================================\n+\n+    // ===[CLASS LOADING]===============================================\n+    public static final String CLASSLOADING_FULL_METRIC_LOADED_CLASSES_COUNT = \"classloading.loadedClassesCount\";\n+    public static final String CLASSLOADING_FULL_METRIC_TOTAL_LOADED_CLASSES_COUNT = \"classloading.totalLoadedClassesCount\";\n+    public static final String CLASSLOADING_FULL_METRIC_UNLOADED_CLASSES_COUNT = \"classloading.unloadedClassesCount\";\n+    // ===[/CLASS LOADING]==============================================\n+\n+    // ===[CLIENT]======================================================\n+    public static final String CLIENT_PREFIX_ENDPOINT = \"client.endpoint\";\n+    public static final String CLIENT_PREFIX_INVOCATIONS = \"invocations\";\n+    public static final String CLIENT_PREFIX_LISTENERS = \"listeners\";\n+    public static final String CLIENT_PREFIX_MEMORY = \"memory\";\n+    public static final String CLIENT_PREFIX_MEMORY_MANAGER = \"memorymanager\";\n+    public static final String CLIENT_PREFIX_EXECUTION_SERVICE = \"executionService\";\n+    public static final String CLIENT_METRIC_ENDPOINT_MANAGER_COUNT = \"count\";\n+    public static final String CLIENT_METRIC_ENDPOINT_MANAGER_TOTAL_REGISTRATIONS = \"totalRegistrations\";\n+    public static final String CLIENT_METRIC_CONNECTION_CONNECTIONID = \"connectionId\";\n+    public static final String CLIENT_METRIC_CONNECTION_EVENT_HANDLER_COUNT = \"eventHandlerCount\";\n+    public static final String CLIENT_METRIC_CONNECTION_CLOSED_TIME = \"closedTime\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_PENDING_CALLS = \"pendingCalls\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_STARTED_INVOCATIONS = \"startedInvocations\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_MAX_CURRENT_INVOCATIONS = \"maxCurrentInvocations\";\n+    public static final String CLIENT_METRIC_LISTENER_SERVICE_EVENT_QUEUE_SIZE = \"eventQueueSize\";\n+    public static final String CLIENT_METRIC_LISTENER_SERVICE_EVENTS_PROCESSED = \"eventsProcessed\";\n+    // ===[CLIENT]======================================================\n+\n+    // ===[CLUSTER]=====================================================\n+    public static final String CLUSTER_PREFIX = \"cluster\";\n+    public static final String CLUSTER_PREFIX_CLOCK = \"cluster.clock\";\n+    public static final String CLUSTER_PREFIX_CONNECTION = \"cluster.connection\";\n+    public static final String CLUSTER_PREFIX_HEARTBEAT = \"cluster.heartbeat\";\n+    public static final String CLUSTER_DISCRIMINATOR_ENDPOINT = \"endpoint\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_MAX_CLUSTER_TIME_DIFF = \"maxClusterTimeDiff\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_TIME = \"clusterTime\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_TIME_DIFF = \"clusterTimeDiff\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_UP_TIME = \"clusterUpTime\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_LOCAL_CLOCK_TIME = \"localClockTime\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_START_TIME = \"clusterStartTime\";\n+    public static final String CLUSTER_METRIC_HEARTBEAT_MANAGER_LAST_HEARTBEAT = \"lastHeartbeat\";\n+    public static final String CLUSTER_METRIC_CLUSTER_SERVICE_SIZE = \"size\";\n+    // ===[/CLUSTER]====================================================\n+\n+    // ===[CP SUBSYSTEM]================================================\n+    public static final String CPSUBSYSTEM_PREFIX_RAFT = \"raft\";\n+    public static final String CPSUBSYSTEM_PREFIX_RAFT_GROUP = \"raft.group\";\n+    public static final String CPSUBSYSTEM_PREFIX_RAFT_METADATA = \"raft.metadata\";\n+    public static final String CPSUBSYSTEM_DISCRIMINATOR_GROUPID = \"groupId\";\n+    public static final String CPSUBSYSTEM_TAG_NAME = \"name\";\n+    public static final String CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_GROUPS = \"groups\";\n+    public static final String CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_ACTIVE_MEMBERS = \"activeMembers\";\n+    public static final String CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_ACTIVE_MEMBERS_COMMIT_INDEX =\n+            \"activeMembersCommitIndex\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_TERM = \"term\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_COMMIT_INDEX = \"commitIndex\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_LAST_APPLIED = \"lastApplied\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_LAST_LOG_TERM = \"lastLogTerm\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_SNAPSHOT_INDEX = \"snapshotIndex\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_LAST_LOG_INDEX = \"lastLogIndex\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_NODE_AVAILABLE_LOG_CAPACITY = \"availableLogCapacity\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_SERVICE_NODES = \"nodes\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_SERVICE_DESTROYED_GROUP_IDS = \"destroyedGroupIds\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_SERVICE_TERMINATED_RAFT_NODE_GROUP_IDS = \"terminatedRaftNodeGroupIds\";\n+    public static final String CPSUBSYSTEM_METRIC_RAFT_SERVICE_MISSING_MEMBERS = \"missingMembers\";\n+    // ===[/CP SUBSYSTEM]===============================================\n+\n+    // ===[EVENT]=======================================================\n+    public static final String EVENT_PREFIX = \"event\";\n+    public static final String EVENT_DISCRIMINATOR_SERVICE = \"service\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_THREAD_COUNT = \"threadCount\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_QUEUE_CAPACITY = \"queueCapacity\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_TOTAL_FAILURE_COUNT = \"totalFailureCount\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_REJECTED_COUNT = \"rejectedCount\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_SYNC_DELIVERY_FAILURE_COUNT = \"syncDeliveryFailureCount\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_EVENT_QUEUE_SIZE = \"eventQueueSize\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_EVENTS_PROCESSED = \"eventsProcessed\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_SEGMENT_LISTENER_COUNT = \"listenerCount\";\n+    public static final String EVENT_METRIC_EVENT_SERVICE_SEGMENT_PUBLICATION_COUNT = \"publicationCount\";\n+    // ===[EVENT]=======================================================", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTM0Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529346", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5NzEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTI1Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369399256", "bodyText": "Shouldn't this one have unit = BYTES attribute?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:13:36Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/NioInboundPipeline.java", "diffHunk": "@@ -51,11 +55,11 @@\n     private InboundHandler[] handlers = new InboundHandler[0];\n     private ByteBuffer receiveBuffer;\n \n-    @Probe(name = \"bytesRead\")\n+    @Probe(name = NETWORKING_METRIC_NIO_INBOUND_PIPELINE_BYTES_READ)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTM5OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529399", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTQxNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369399414", "bodyText": "Do we need unit = MS for this one?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:14:13Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/NioInboundPipeline.java", "diffHunk": "@@ -94,7 +98,7 @@ public long load() {\n         }\n     }\n \n-    @Probe(name = \"idleTimeMs\")\n+    @Probe(name = NETWORKING_METRIC_NIO_INBOUND_PIPELINE_IDLE_TIME_MS)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTQxNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529414", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTU5Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369399596", "bodyText": "How about setting the unit = BYTES attribute for this and the next one?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:14:54Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/NioNetworking.java", "diffHunk": "@@ -115,13 +127,13 @@\n     // Currently this is a coarse grained aggregation of the bytes/send received.\n     // In the future you probably want to split this up in member and client and potentially\n     // wan specific.\n-    @Probe\n+    @Probe(name = NETWORKING_METRIC_NIO_NETWORKING_BYTES_SEND)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTQzNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529434", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTc0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369399742", "bodyText": "BYTES unit here as well as in two other BYTES probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:15:34Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/NioOutboundPipeline.java", "diffHunk": "@@ -93,21 +103,21 @@\n     }\n \n     @SuppressWarnings(\"checkstyle:visibilitymodifier\")\n-    @Probe(name = \"writeQueueSize\")\n+    @Probe(name = NETWORKING_METRIC_NIO_OUTBOUND_PIPELINE_WRITE_QUEUE_SIZE)\n     public final Queue<OutboundFrame> writeQueue = new ConcurrentLinkedQueue<>();\n     @SuppressWarnings(\"checkstyle:visibilitymodifier\")\n-    @Probe(name = \"priorityWriteQueueSize\")\n+    @Probe(name = NETWORKING_METRIC_NIO_OUTBOUND_PIPELINE_PRIORITY_WRITE_QUEUE_SIZE)\n     public final Queue<OutboundFrame> priorityWriteQueue = new ConcurrentLinkedQueue<>();\n \n     private OutboundHandler[] handlers = new OutboundHandler[0];\n     private ByteBuffer sendBuffer;\n \n     private final AtomicReference<State> scheduled = new AtomicReference<>(State.SCHEDULED);\n-    @Probe(name = \"bytesWritten\")\n+    @Probe(name = NETWORKING_METRIC_NIO_OUTBOUND_PIPELINE_BYTES_WRITTEN)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTQ1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529452", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5OTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDA3OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369400079", "bodyText": "Wrong unit. Should be MS.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:16:49Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/NioThread.java", "diffHunk": "@@ -185,7 +195,7 @@ public long getEventCount() {\n      *\n      * @return the idle time in ms.\n      */\n-    @Probe\n+    @Probe(name = NETWORKING_METRIC_NIO_THREAD_IDLE_TIME_MS, unit = BYTES)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTQ1OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529459", "bodyText": "Thanks, fixed.", "author": "blazember", "createdAt": "2020-01-22T12:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDI5MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369400290", "bodyText": "Don't we use COUNT by the default? Same question for another probe in this class.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:17:41Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/networking/nio/iobalancer/IOBalancer.java", "diffHunk": "@@ -71,16 +74,16 @@\n     private final LoadTracker inLoadTracker;\n     private final LoadTracker outLoadTracker;\n     private final String hzName;\n-    private final BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<Runnable>();\n+    private final BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>();\n     private volatile boolean enabled;\n     private IOBalancerThread ioBalancerThread;\n \n     // only IOBalancerThread will write to this field.\n-    @Probe\n+    @Probe(name = NETWORKING_METRIC_NIO_IO_BALANCER_IMBALANCE_DETECTED_COUNT, unit = COUNT)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTQ5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529492", "bodyText": "Removed the unit.", "author": "blazember", "createdAt": "2020-01-22T12:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDUyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369400523", "bodyText": "How about ENUM unit here?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:18:30Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/nio/tcp/TcpIpConnection.java", "diffHunk": "@@ -103,7 +104,7 @@ public String getConnectionType() {\n         return connectionType;\n     }\n \n-    @Probe(name = \"connectionType\")\n+    @Probe(name = TCP_METRIC_CONNECTION_CONNECTION_TYPE)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTUxMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529511", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDg1Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369400856", "bodyText": "How about BOOLEAN unit here?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:19:39Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationManager.java", "diffHunk": "@@ -144,10 +146,10 @@\n         delayedResumeMigrationTrigger = new CoalescingDelayedTrigger(\n                 executionService, migrationPauseDelayMs, 2 * migrationPauseDelayMs, this::resumeMigration);\n         this.memberHeartbeatTimeoutMillis = properties.getMillis(ClusterProperty.MAX_NO_HEARTBEAT_SECONDS);\n-        nodeEngine.getMetricsRegistry().registerStaticMetrics(stats, \"partitions\");\n+        nodeEngine.getMetricsRegistry().registerStaticMetrics(stats, PARTITIONS_PREFIX);\n     }\n \n-    @Probe(name = \"migrationActive\")\n+    @Probe(name = MIGRATION_METRIC_MIGRATION_MANAGER_MIGRATION_ACTIVE)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTUyMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529522", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMDg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMTAwMw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369401003", "bodyText": "How about MS unit here and in other time related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:20:18Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/partition/impl/MigrationStats.java", "diffHunk": "@@ -17,48 +17,59 @@\n package com.hazelcast.internal.partition.impl;\n \n import com.hazelcast.internal.metrics.Probe;\n-import com.hazelcast.internal.util.Clock;\n import com.hazelcast.internal.partition.MigrationStateImpl;\n+import com.hazelcast.internal.util.Clock;\n import com.hazelcast.partition.MigrationState;\n \n import java.util.Date;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_COMPLETED_MIGRATIONS;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_ELAPSED_DESTINATION_COMMIT_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_ELAPSED_MIGRATION_OPERATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_ELAPSED_MIGRATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_LAST_REPARTITION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_PLANNED_MIGRATIONS;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_TOTAL_COMPLETED_MIGRATIONS;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_TOTAL_ELAPSED_DESTINATION_COMMIT_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_TOTAL_ELAPSED_MIGRATION_OPERATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MIGRATION_METRIC_TOTAL_ELAPSED_MIGRATION_TIME;\n+\n /**\n  * Collection of stats for partition migration tasks.\n  */\n public class MigrationStats {\n \n-    @Probe\n+    @Probe(name = MIGRATION_METRIC_LAST_REPARTITION_TIME)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTU0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529544", "bodyText": "Added and introduced NS to the ProbeUnit enum for nanoseconds.", "author": "blazember", "createdAt": "2020-01-22T12:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMTAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMjQ1NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369402455", "bodyText": "In other similar probe names we use Ms or Time suffixes. Shouldn't we rename this one and other time probes in this class, until it's not too late?\nBTW I didn't find any usages for them in MC, so the rename shouldn't break MC at least.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:25:33Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationMonitor.java", "diffHunk": "@@ -82,25 +93,25 @@\n     private final ILogger logger;\n     private final ScheduledExecutorService scheduler;\n     private final Address thisAddress;\n-    private final ConcurrentMap<Address, AtomicLong> heartbeatPerMember = new ConcurrentHashMap<Address, AtomicLong>();\n+    private final ConcurrentMap<Address, AtomicLong> heartbeatPerMember = new ConcurrentHashMap<>();\n \n-    @Probe(name = \"backupTimeouts\", level = MANDATORY)\n+    @Probe(name = OPERATION_METRIC_INVOCATION_MONITOR_BACKUP_TIMEOUTS, level = MANDATORY)\n     private final SwCounter backupTimeoutsCount = newSwCounter();\n-    @Probe(name = \"normalTimeouts\", level = MANDATORY)\n+    @Probe(name = OPERATION_METRIC_INVOCATION_MONITOR_NORMAL_TIMEOUTS, level = MANDATORY)\n     private final SwCounter normalTimeoutsCount = newSwCounter();\n-    @Probe\n+    @Probe(name = OPERATION_METRIC_INVOCATION_MONITOR_HEARTBEAT_PACKETS_RECEIVED)\n     private final SwCounter heartbeatPacketsReceived = newSwCounter();\n-    @Probe\n-    private final SwCounter heartbeatPacketsSend = newSwCounter();\n-    @Probe\n+    @Probe(name = OPERATION_METRIC_INVOCATION_MONITOR_HEARTBEAT_PACKETS_SENT)\n+    private final SwCounter heartbeatPacketsSent = newSwCounter();\n+    @Probe(name = OPERATION_METRIC_INVOCATION_MONITOR_DELAYED_EXECUTION_COUNT)\n     private final SwCounter delayedExecutionCount = newSwCounter();\n-    @Probe\n+    @Probe(name = OPERATION_METRIC_INVOCATION_MONITOR_BACKUP_TIMEOUT_MILLIS, unit = MS)\n     private final long backupTimeoutMillis;", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTU1OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529559", "bodyText": "I changed the idleTimeMs to idleTimeMillis instead for the sake of consistency. Time is not accurate here since these are thresholds and frequencies.", "author": "blazember", "createdAt": "2020-01-22T12:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMjQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMjcyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369402724", "bodyText": "How about PERCENT unit here?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:26:26Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/InvocationRegistry.java", "diffHunk": "@@ -84,10 +88,10 @@ public InvocationRegistry(ILogger logger, CallIdSequence callIdSequence) {\n \n     @Override\n     public void provideStaticMetrics(MetricsRegistry registry) {\n-        registry.registerStaticMetrics(this, \"operation\");\n+        registry.registerStaticMetrics(this, OPERATION_PREFIX);\n     }\n \n-    @Probe(name = \"invocations.usedPercentage\")\n+    @Probe(name = OPERATION_METRIC_INVOCATION_REGISTRY_INVOCATIONS_USED_PERCENTAGE)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTU4Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529587", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMjcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMzc5MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369403790", "bodyText": "Don't we use COUNT unit by default? Same question for the next probe here.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:30:21Z", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/MetadataRaftGroupManager.java", "diffHunk": "@@ -115,12 +119,12 @@\n \n     // all fields below are state of the Metadata CP group and put into Metadata snapshot and reset while restarting...\n     // these fields are accessed outside of Raft while restarting or local querying, etc.\n-    @Probe\n+    @Probe(name = CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_GROUPS, unit = COUNT)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTYwMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529602", "bodyText": "Removed the unit.", "author": "blazember", "createdAt": "2020-01-22T12:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwMzc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDA1NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369404054", "bodyText": "Don't we use COUNT by default? Same question for other count probes here.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:31:17Z", "path": "hazelcast/src/main/java/com/hazelcast/cp/internal/RaftService.java", "diffHunk": "@@ -148,19 +158,19 @@\n     private static final int AWAIT_DISCOVERY_STEP_MILLIS = 10;\n \n     private final ReadWriteLock nodeLock = new ReentrantReadWriteLock();\n-    @Probe\n+    @Probe(name = CPSUBSYSTEM_METRIC_RAFT_SERVICE_NODES, unit = COUNT)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTYxOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529618", "bodyText": "Removed the unit.", "author": "blazember", "createdAt": "2020-01-22T12:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDIyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369404226", "bodyText": "Do we need MS unit here? The same question for other time probes in this class.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:31:52Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterClockImpl.java", "diffHunk": "@@ -31,14 +37,14 @@\n \n     private volatile long clusterTimeDiff;\n     private volatile long clusterStartTime = Long.MIN_VALUE;\n-    @Probe(level = MANDATORY)\n+    @Probe(name = CLUSTER_METRIC_CLUSTER_CLOCK_MAX_CLUSTER_TIME_DIFF, level = MANDATORY)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTY0Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529647", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDQ5NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369404495", "bodyText": "Does this probe stand for time? If yes, how about MS unit here?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:32:53Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/cluster/impl/ClusterHeartbeatManager.java", "diffHunk": "@@ -100,7 +101,7 @@\n     private final int icmpIntervalMillis;\n     private final int icmpMaxAttempts;\n \n-    @Probe(name = \"lastHeartbeat\")\n+    @Probe(name = CLUSTER_METRIC_HEARTBEAT_MANAGER_LAST_HEARTBEAT)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTY1Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529656", "bodyText": "Yep, added MS.", "author": "blazember", "createdAt": "2020-01-22T12:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDczOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369404739", "bodyText": "How about specifying BYTES unit here and below?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:33:46Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/memory/MemoryStats.java", "diffHunk": "@@ -35,7 +47,7 @@\n      *\n      * @return total physical memory in bytes.\n      */\n-    @Probe(level = MANDATORY)\n+    @Probe(name = MEMORY_METRIC_TOTAL_PHYSICAL, level = MANDATORY)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTY3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529678", "bodyText": "Added BYTES everywhere.", "author": "blazember", "createdAt": "2020-01-22T12:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTAyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369405023", "bodyText": "Can we shorten the prefix here? The constant name is barely readable, at least for me.", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:34:52Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -0,0 +1,584 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.metrics;\n+\n+/**\n+ * Class holding constants for metric names, prefixes, discriminators etc.\n+ * <p></p>\n+ *\n+ * IMPORTANT NOTE:\n+ * The constants in this file are meant to be stable and can be changed\n+ * between minor releases only if at all. Changing any of the constants\n+ * in this class might break Management Center or any metrics consumer\n+ * code.\n+ */\n+public final class MetricDescriptorConstants {\n+\n+    // ===[CACHE]=======================================================\n+    public static final String CACHE_PREFIX = \"cache\";\n+    public static final String CACHE_DISCRIMINATOR_NAME = \"name\";\n+    public static final String CACHE_METRIC_CREATION_TIME = \"creationTime\";\n+    public static final String CACHE_METRIC_LAST_ACCESS_TIME = \"lastAccessTime\";\n+    public static final String CACHE_METRIC_LAST_UPDATE_TIME = \"lastUpdateTime\";\n+    public static final String CACHE_METRIC_OWNED_ENTRY_COUNT = \"ownedEntryCount\";\n+    public static final String CACHE_METRIC_CACHE_HITS = \"cacheHits\";\n+    public static final String CACHE_METRIC_CACHE_HIT_PERCENTAGE = \"cacheHitPercentage\";\n+    public static final String CACHE_METRIC_CACHE_MISSES = \"cacheMisses\";\n+    public static final String CACHE_METRIC_CACHE_MISS_PERCENTAGE = \"cacheMissPercentage\";\n+    public static final String CACHE_METRIC_CACHE_GETS = \"cacheGets\";\n+    public static final String CACHE_METRIC_CACHE_PUTS = \"cachePuts\";\n+    public static final String CACHE_METRIC_CACHE_REMOVALS = \"cacheRemovals\";\n+    public static final String CACHE_METRIC_CACHE_EVICTIONS = \"cacheEvictions\";\n+    public static final String CACHE_METRIC_AVERAGE_GET_TIME = \"averageGetTime\";\n+    public static final String CACHE_METRIC_AVERAGE_PUT_TIME = \"averagePutTime\";\n+    public static final String CACHE_METRIC_AVERAGE_REMOVAL_TIME = \"averageRemovalTime\";\n+    // ===[/CACHE]======================================================\n+\n+    // ===[CLASS LOADING]===============================================\n+    public static final String CLASSLOADING_FULL_METRIC_LOADED_CLASSES_COUNT = \"classloading.loadedClassesCount\";\n+    public static final String CLASSLOADING_FULL_METRIC_TOTAL_LOADED_CLASSES_COUNT = \"classloading.totalLoadedClassesCount\";\n+    public static final String CLASSLOADING_FULL_METRIC_UNLOADED_CLASSES_COUNT = \"classloading.unloadedClassesCount\";\n+    // ===[/CLASS LOADING]==============================================\n+\n+    // ===[CLIENT]======================================================\n+    public static final String CLIENT_PREFIX_ENDPOINT = \"client.endpoint\";\n+    public static final String CLIENT_PREFIX_INVOCATIONS = \"invocations\";\n+    public static final String CLIENT_PREFIX_LISTENERS = \"listeners\";\n+    public static final String CLIENT_PREFIX_MEMORY = \"memory\";\n+    public static final String CLIENT_PREFIX_MEMORY_MANAGER = \"memorymanager\";\n+    public static final String CLIENT_PREFIX_EXECUTION_SERVICE = \"executionService\";\n+    public static final String CLIENT_METRIC_ENDPOINT_MANAGER_COUNT = \"count\";\n+    public static final String CLIENT_METRIC_ENDPOINT_MANAGER_TOTAL_REGISTRATIONS = \"totalRegistrations\";\n+    public static final String CLIENT_METRIC_CONNECTION_CONNECTIONID = \"connectionId\";\n+    public static final String CLIENT_METRIC_CONNECTION_EVENT_HANDLER_COUNT = \"eventHandlerCount\";\n+    public static final String CLIENT_METRIC_CONNECTION_CLOSED_TIME = \"closedTime\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_PENDING_CALLS = \"pendingCalls\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_STARTED_INVOCATIONS = \"startedInvocations\";\n+    public static final String CLIENT_METRIC_INVOCATIONS_MAX_CURRENT_INVOCATIONS = \"maxCurrentInvocations\";\n+    public static final String CLIENT_METRIC_LISTENER_SERVICE_EVENT_QUEUE_SIZE = \"eventQueueSize\";\n+    public static final String CLIENT_METRIC_LISTENER_SERVICE_EVENTS_PROCESSED = \"eventsProcessed\";\n+    // ===[CLIENT]======================================================\n+\n+    // ===[CLUSTER]=====================================================\n+    public static final String CLUSTER_PREFIX = \"cluster\";\n+    public static final String CLUSTER_PREFIX_CLOCK = \"cluster.clock\";\n+    public static final String CLUSTER_PREFIX_CONNECTION = \"cluster.connection\";\n+    public static final String CLUSTER_PREFIX_HEARTBEAT = \"cluster.heartbeat\";\n+    public static final String CLUSTER_DISCRIMINATOR_ENDPOINT = \"endpoint\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_MAX_CLUSTER_TIME_DIFF = \"maxClusterTimeDiff\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_TIME = \"clusterTime\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_TIME_DIFF = \"clusterTimeDiff\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_UP_TIME = \"clusterUpTime\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_LOCAL_CLOCK_TIME = \"localClockTime\";\n+    public static final String CLUSTER_METRIC_CLUSTER_CLOCK_CLUSTER_START_TIME = \"clusterStartTime\";\n+    public static final String CLUSTER_METRIC_HEARTBEAT_MANAGER_LAST_HEARTBEAT = \"lastHeartbeat\";\n+    public static final String CLUSTER_METRIC_CLUSTER_SERVICE_SIZE = \"size\";\n+    // ===[/CLUSTER]====================================================\n+\n+    // ===[CP SUBSYSTEM]================================================\n+    public static final String CPSUBSYSTEM_PREFIX_RAFT = \"raft\";\n+    public static final String CPSUBSYSTEM_PREFIX_RAFT_GROUP = \"raft.group\";\n+    public static final String CPSUBSYSTEM_PREFIX_RAFT_METADATA = \"raft.metadata\";\n+    public static final String CPSUBSYSTEM_DISCRIMINATOR_GROUPID = \"groupId\";\n+    public static final String CPSUBSYSTEM_TAG_NAME = \"name\";\n+    public static final String CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_GROUPS = \"groups\";\n+    public static final String CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_ACTIVE_MEMBERS = \"activeMembers\";\n+    public static final String CPSUBSYSTEM_METRIC_METADATA_RAFT_GROUP_MANAGER_ACTIVE_MEMBERS_COMMIT_INDEX =", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTY4OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529688", "bodyText": "It became CP.", "author": "blazember", "createdAt": "2020-01-22T12:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTM0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369405344", "bodyText": "Is it possible to specify BYTES unit here and for other memory related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:36:08Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/metricsets/OperatingSystemMetricSet.java", "diffHunk": "@@ -53,22 +64,22 @@ public static void register(MetricsRegistry metricsRegistry) {\n \n         OperatingSystemMXBean mxBean = ManagementFactory.getOperatingSystemMXBean();\n \n-        registerMethod(metricsRegistry, mxBean, \"getCommittedVirtualMemorySize\", \"os.committedVirtualMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getFreePhysicalMemorySize\", \"os.freePhysicalMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getFreeSwapSpaceSize\", \"os.freeSwapSpaceSize\");\n-        registerMethod(metricsRegistry, mxBean, \"getProcessCpuTime\", \"os.processCpuTime\");\n-        registerMethod(metricsRegistry, mxBean, \"getTotalPhysicalMemorySize\", \"os.totalPhysicalMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getTotalSwapSpaceSize\", \"os.totalSwapSpaceSize\");\n-        registerMethod(metricsRegistry, mxBean, \"getMaxFileDescriptorCount\", \"os.maxFileDescriptorCount\");\n-        registerMethod(metricsRegistry, mxBean, \"getOpenFileDescriptorCount\", \"os.openFileDescriptorCount\");\n+        registerMethod(metricsRegistry, mxBean, \"getCommittedVirtualMemorySize\", OS_FULL_METRIC_COMMITTED_VIRTUAL_MEMORY_SIZE);", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTcxOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529719", "bodyText": "I tried this, but the OS metrics tests started failing so excluded it for now. Will take a look separately.", "author": "blazember", "createdAt": "2020-01-22T12:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NDI4Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369544286", "bodyText": "Sure thing. I think that can be done in a separate PR.", "author": "puzpuzpuz", "createdAt": "2020-01-22T12:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTUwNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369405506", "bodyText": "Is it possible to specify MS unit here?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:36:34Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/metricsets/OperatingSystemMetricSet.java", "diffHunk": "@@ -53,22 +64,22 @@ public static void register(MetricsRegistry metricsRegistry) {\n \n         OperatingSystemMXBean mxBean = ManagementFactory.getOperatingSystemMXBean();\n \n-        registerMethod(metricsRegistry, mxBean, \"getCommittedVirtualMemorySize\", \"os.committedVirtualMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getFreePhysicalMemorySize\", \"os.freePhysicalMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getFreeSwapSpaceSize\", \"os.freeSwapSpaceSize\");\n-        registerMethod(metricsRegistry, mxBean, \"getProcessCpuTime\", \"os.processCpuTime\");\n-        registerMethod(metricsRegistry, mxBean, \"getTotalPhysicalMemorySize\", \"os.totalPhysicalMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getTotalSwapSpaceSize\", \"os.totalSwapSpaceSize\");\n-        registerMethod(metricsRegistry, mxBean, \"getMaxFileDescriptorCount\", \"os.maxFileDescriptorCount\");\n-        registerMethod(metricsRegistry, mxBean, \"getOpenFileDescriptorCount\", \"os.openFileDescriptorCount\");\n+        registerMethod(metricsRegistry, mxBean, \"getCommittedVirtualMemorySize\", OS_FULL_METRIC_COMMITTED_VIRTUAL_MEMORY_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getFreePhysicalMemorySize\", OS_FULL_METRIC_FREE_PHYSICAL_MEMORY_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getFreeSwapSpaceSize\", OS_FULL_METRIC_FREE_SWAP_SPACE_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getProcessCpuTime\", OS_FULL_METRIC_PROCESS_CPU_TIME);", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTcyMw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529723", "bodyText": "Same as above.", "author": "blazember", "createdAt": "2020-01-22T12:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY2Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369405662", "bodyText": "Is it possible to specify PERCENT unit here and for other memory related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:37:09Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/metricsets/OperatingSystemMetricSet.java", "diffHunk": "@@ -53,22 +64,22 @@ public static void register(MetricsRegistry metricsRegistry) {\n \n         OperatingSystemMXBean mxBean = ManagementFactory.getOperatingSystemMXBean();\n \n-        registerMethod(metricsRegistry, mxBean, \"getCommittedVirtualMemorySize\", \"os.committedVirtualMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getFreePhysicalMemorySize\", \"os.freePhysicalMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getFreeSwapSpaceSize\", \"os.freeSwapSpaceSize\");\n-        registerMethod(metricsRegistry, mxBean, \"getProcessCpuTime\", \"os.processCpuTime\");\n-        registerMethod(metricsRegistry, mxBean, \"getTotalPhysicalMemorySize\", \"os.totalPhysicalMemorySize\");\n-        registerMethod(metricsRegistry, mxBean, \"getTotalSwapSpaceSize\", \"os.totalSwapSpaceSize\");\n-        registerMethod(metricsRegistry, mxBean, \"getMaxFileDescriptorCount\", \"os.maxFileDescriptorCount\");\n-        registerMethod(metricsRegistry, mxBean, \"getOpenFileDescriptorCount\", \"os.openFileDescriptorCount\");\n+        registerMethod(metricsRegistry, mxBean, \"getCommittedVirtualMemorySize\", OS_FULL_METRIC_COMMITTED_VIRTUAL_MEMORY_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getFreePhysicalMemorySize\", OS_FULL_METRIC_FREE_PHYSICAL_MEMORY_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getFreeSwapSpaceSize\", OS_FULL_METRIC_FREE_SWAP_SPACE_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getProcessCpuTime\", OS_FULL_METRIC_PROCESS_CPU_TIME);\n+        registerMethod(metricsRegistry, mxBean, \"getTotalPhysicalMemorySize\", OS_FULL_METRIC_TOTAL_PHYSICAL_MEMORY_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getTotalSwapSpaceSize\", OS_FULL_METRIC_TOTAL_SWAP_SPACE_SIZE);\n+        registerMethod(metricsRegistry, mxBean, \"getMaxFileDescriptorCount\", OS_FULL_METRIC_MAX_FILE_DESCRIPTOR_COUNT);\n+        registerMethod(metricsRegistry, mxBean, \"getOpenFileDescriptorCount\", OS_FULL_METRIC_OPEN_FILE_DESCRIPTOR_COUNT);\n \n         // value will be between 0.0 and 1.0 or a negative value, if not available\n-        registerMethod(metricsRegistry, mxBean, \"getProcessCpuLoad\", \"os.processCpuLoad\", PERCENTAGE_MULTIPLIER);\n+        registerMethod(metricsRegistry, mxBean, \"getProcessCpuLoad\", OS_FULL_METRIC_PROCESS_CPU_LOAD, PERCENTAGE_MULTIPLIER);", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTczNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529734", "bodyText": "Same.", "author": "blazember", "createdAt": "2020-01-22T12:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTc3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369405770", "bodyText": "Is it possible to specify BYTES unit here and for other memory related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:37:36Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/metricsets/RuntimeMetricSet.java", "diffHunk": "@@ -44,11 +50,12 @@ public static void register(MetricsRegistry metricsRegistry) {\n         Runtime runtime = Runtime.getRuntime();\n         RuntimeMXBean mxBean = ManagementFactory.getRuntimeMXBean();\n \n-        metricsRegistry.registerStaticProbe(runtime, \"runtime.freeMemory\", MANDATORY, Runtime::freeMemory);\n-        metricsRegistry.registerStaticProbe(runtime, \"runtime.totalMemory\", MANDATORY, Runtime::totalMemory);\n-        metricsRegistry.registerStaticProbe(runtime, \"runtime.maxMemory\", MANDATORY, Runtime::maxMemory);\n-        metricsRegistry.registerStaticProbe(runtime, \"runtime.usedMemory\", MANDATORY, JVMUtil::usedMemory);\n-        metricsRegistry.registerStaticProbe(runtime, \"runtime.availableProcessors\", MANDATORY, Runtime::availableProcessors);\n-        metricsRegistry.registerStaticProbe(mxBean, \"runtime.uptime\", MANDATORY, RuntimeMXBean::getUptime);\n+        metricsRegistry.registerStaticProbe(runtime, RUNTIME_FULL_METRIC_FREE_MEMORY, MANDATORY, Runtime::freeMemory);", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTc0Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529746", "bodyText": "And same :)", "author": "blazember", "createdAt": "2020-01-22T12:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjAyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369406028", "bodyText": "Do we need MS unit here and in the next probe?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:38:37Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalExecutorStatsImpl.java", "diffHunk": "@@ -43,17 +49,17 @@\n     private long creationTime;\n \n     // These fields are only accessed through the updaters\n-    @Probe\n+    @Probe(name = EXECUTOR_METRIC_PENDING)\n     private volatile long pending;\n-    @Probe\n+    @Probe(name = EXECUTOR_METRIC_STARTED)\n     private volatile long started;\n-    @Probe\n+    @Probe(name = EXECUTOR_METRIC_COMPLETED)\n     private volatile long completed;\n-    @Probe\n+    @Probe(name = EXECUTOR_METRIC_CANCELLED)\n     private volatile long cancelled;\n-    @Probe\n+    @Probe(name = EXECUTOR_METRIC_TOTAL_START_LATENCY)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyOTc2Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369529763", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjE4Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369406186", "bodyText": "Do we need MS unit here and in other time related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:39:12Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalIndexStatsImpl.java", "diffHunk": "@@ -21,47 +21,60 @@\n import com.hazelcast.json.internal.JsonSerializable;\n import com.hazelcast.query.LocalIndexStats;\n \n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_AVERAGE_HIT_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_AVERAGE_HIT_SELECTIVITY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_HIT_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_INSERT_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_MEMORY_COST;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_QUERY_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_REMOVE_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_INSERT_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_REMOVE_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_UPDATE_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_UPDATE_COUNT;\n+\n /**\n  * Implementation of local index stats that backs the stats exposed through the\n  * public API.\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public class LocalIndexStatsImpl implements LocalIndexStats, JsonSerializable {\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_CREATION_TIME)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NDg5Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369544897", "bodyText": "Looks like this one is left as is.", "author": "puzpuzpuz", "createdAt": "2020-01-22T13:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2ODM2MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369568361", "bodyText": "I think I just forgot to include this in the \"done-bomb\" \u2122\ufe0f\nhttps://github.com/hazelcast/hazelcast/pull/16506/files#diff-f7d1cbd4edc6feeb06d5f8751c82298fR48", "author": "blazember", "createdAt": "2020-01-22T13:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjQwNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369406405", "bodyText": "Do we need BYTES unit here?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:40:02Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalIndexStatsImpl.java", "diffHunk": "@@ -21,47 +21,60 @@\n import com.hazelcast.json.internal.JsonSerializable;\n import com.hazelcast.query.LocalIndexStats;\n \n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_AVERAGE_HIT_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_AVERAGE_HIT_SELECTIVITY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_HIT_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_INSERT_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_MEMORY_COST;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_QUERY_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_REMOVE_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_INSERT_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_REMOVE_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_UPDATE_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_UPDATE_COUNT;\n+\n /**\n  * Implementation of local index stats that backs the stats exposed through the\n  * public API.\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public class LocalIndexStatsImpl implements LocalIndexStats, JsonSerializable {\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_CREATION_TIME)\n     private volatile long creationTime;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_QUERY_COUNT)\n     private volatile long queryCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_HIT_COUNT)\n     private volatile long hitCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_AVERAGE_HIT_LATENCY)\n     private volatile long averageHitLatency;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_AVERAGE_HIT_SELECTIVITY)\n     private volatile double averageHitSelectivity;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_INSERT_COUNT)\n     private volatile long insertCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_TOTAL_INSERT_LATENCY)\n     private volatile long totalInsertLatency;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_UPDATE_COUNT)\n     private volatile long updateCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_TOTAL_UPDATE_LATENCY)\n     private volatile long totalUpdateLatency;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_REMOVE_COUNT)\n     private volatile long removeCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_TOTAL_REMOVE_LATENCY)\n     private volatile long totalRemoveLatency;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_MEMORY_COST)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMDA4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369530083", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjUzMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369406531", "bodyText": "Does it make sense to mark this one with PERCENT or it's not applicable?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:40:27Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalIndexStatsImpl.java", "diffHunk": "@@ -21,47 +21,60 @@\n import com.hazelcast.json.internal.JsonSerializable;\n import com.hazelcast.query.LocalIndexStats;\n \n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_AVERAGE_HIT_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_AVERAGE_HIT_SELECTIVITY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_HIT_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_INSERT_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_MEMORY_COST;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_QUERY_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_REMOVE_COUNT;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_INSERT_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_REMOVE_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_TOTAL_UPDATE_LATENCY;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.MAP_METRIC_INDEX_UPDATE_COUNT;\n+\n /**\n  * Implementation of local index stats that backs the stats exposed through the\n  * public API.\n  */\n @SuppressWarnings(\"checkstyle:methodcount\")\n public class LocalIndexStatsImpl implements LocalIndexStats, JsonSerializable {\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_CREATION_TIME)\n     private volatile long creationTime;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_QUERY_COUNT)\n     private volatile long queryCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_HIT_COUNT)\n     private volatile long hitCount;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_AVERAGE_HIT_LATENCY)\n     private volatile long averageHitLatency;\n \n-    @Probe\n+    @Probe(name = MAP_METRIC_INDEX_AVERAGE_HIT_SELECTIVITY)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMDA5Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369530097", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369406821", "bodyText": "How about MS unit here and in other time related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:41:20Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.java", "diffHunk": "@@ -84,28 +114,27 @@\n             newUpdater(LocalMapStatsImpl.class, \"maxRemoveLatency\");\n \n     private final ConcurrentMap<String, LocalIndexStatsImpl> mutableIndexStats =\n-            new ConcurrentHashMap<String, LocalIndexStatsImpl>();\n-    private final Map<String, LocalIndexStats> indexStats = Collections.<String, LocalIndexStats>unmodifiableMap(\n-            mutableIndexStats);\n+            new ConcurrentHashMap<>();\n+    private final Map<String, LocalIndexStats> indexStats = Collections.unmodifiableMap(mutableIndexStats);\n \n     // These fields are only accessed through the updaters\n-    @Probe\n+    @Probe(name = MAP_METRIC_LAST_ACCESS_TIME)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMDEwMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369530100", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjkwNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369406906", "bodyText": "How about BYTES unit here and in other memory related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:41:37Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalMapStatsImpl.java", "diffHunk": "@@ -115,36 +144,36 @@\n     private volatile long maxPutLatency;\n     private volatile long maxSetLatency;\n     private volatile long maxRemoveLatency;\n-    @Probe\n+    @Probe(name = MAP_METRIC_CREATION_TIME)\n     private volatile long creationTime;\n-    @Probe\n+    @Probe(name = MAP_METRIC_OWNED_ENTRY_COUNT)\n     private volatile long ownedEntryCount;\n-    @Probe\n+    @Probe(name = MAP_METRIC_BACKUP_ENTRY_COUNT)\n     private volatile long backupEntryCount;\n-    @Probe\n+    @Probe(name = MAP_METRIC_OWNED_ENTRY_MEMORY_COST)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzMDEzOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369530139", "bodyText": "Done", "author": "blazember", "createdAt": "2020-01-22T12:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNjkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNzEyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369407121", "bodyText": "How about MS unit here and in other time related probes in this class?", "author": "puzpuzpuz", "createdAt": "2020-01-22T07:42:20Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalQueueStatsImpl.java", "diffHunk": "@@ -43,31 +57,31 @@\n     private static final AtomicLongFieldUpdater<LocalQueueStatsImpl> NUMBER_OF_EVENTS =\n             newUpdater(LocalQueueStatsImpl.class, \"numberOfEvents\");\n \n-    @Probe\n+    @Probe(name = QUEUE_METRIC_OWNED_ITEM_COUNT)\n     private int ownedItemCount;\n-    @Probe\n+    @Probe(name = QUEUE_METRIC_BACKUP_ITEM_COUNT)\n     private int backupItemCount;\n-    @Probe\n+    @Probe(name = QUEUE_METRIC_MIN_AGE)", "originalCommit": "a999a4997db6713ed4508648100173eac8ea2489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0NTEzNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369545135", "bodyText": "Looks like this one is left as is.", "author": "puzpuzpuz", "createdAt": "2020-01-22T13:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNzEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU2OTY1MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16506#discussion_r369569651", "bodyText": "The ages were not updated indeed. Now that's done too.", "author": "blazember", "createdAt": "2020-01-22T13:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNzEyMQ=="}], "type": "inlineReview"}, {"oid": "62f6931991d7c8d92e877a38d84c488c5bfd82e2", "url": "https://github.com/hazelcast/hazelcast/commit/62f6931991d7c8d92e877a38d84c488c5bfd82e2", "message": "Address review comments", "committedDate": "2020-01-22T12:31:30Z", "type": "commit"}, {"oid": "62f6931991d7c8d92e877a38d84c488c5bfd82e2", "url": "https://github.com/hazelcast/hazelcast/commit/62f6931991d7c8d92e877a38d84c488c5bfd82e2", "message": "Address review comments", "committedDate": "2020-01-22T12:31:30Z", "type": "forcePushed"}, {"oid": "75c9208edb427db739e7fd4b8d12fdb9b7ea5b62", "url": "https://github.com/hazelcast/hazelcast/commit/75c9208edb427db739e7fd4b8d12fdb9b7ea5b62", "message": "Address review comments", "committedDate": "2020-01-22T13:50:59Z", "type": "commit"}]}