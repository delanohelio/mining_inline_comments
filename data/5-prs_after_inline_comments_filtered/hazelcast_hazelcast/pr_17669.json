{"pr_number": 17669, "pr_title": "Derive sum & avg result types", "pr_createdAt": "2020-10-02T11:25:27Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17669", "timeline": [{"oid": "ca2d9e019e9263447bdff7681e1089b3ffc27839", "url": "https://github.com/hazelcast/hazelcast/commit/ca2d9e019e9263447bdff7681e1089b3ffc27839", "message": "Derive sum & avg result types", "committedDate": "2020-10-02T11:23:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjg4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17669#discussion_r498826884", "bodyText": "Actual and expected value swapped.", "author": "viliam-durina", "createdAt": "2020-10-02T13:38:28Z", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java", "diffHunk": "@@ -184,6 +184,44 @@ public void narrowestTypeForTest() {\n         assertEquals(type(REAL), narrowestTypeFor(0.1, REAL));\n     }\n \n+    @Test\n+    public void deriveSumTypeTest() {\n+        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(VARCHAR)), type(VARCHAR));", "originalCommit": "ca2d9e019e9263447bdff7681e1089b3ffc27839", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa42a031f420afd5c2ed43abd02c32ba68431f21", "url": "https://github.com/hazelcast/hazelcast/commit/fa42a031f420afd5c2ed43abd02c32ba68431f21", "message": "Swap expected with actual", "committedDate": "2020-10-02T13:46:59Z", "type": "commit"}, {"oid": "eae34b55e75160f080dabda00083815a904e68c5", "url": "https://github.com/hazelcast/hazelcast/commit/eae34b55e75160f080dabda00083815a904e68c5", "message": "Merge branch 'master' into sum-avg-types", "committedDate": "2020-10-07T06:42:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc3NzU3OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17669#discussion_r500777579", "bodyText": "It might be better to use BIGINT for all integer types.", "author": "taburet", "createdAt": "2020-10-07T06:55:21Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java", "diffHunk": "@@ -374,4 +376,72 @@ private static RelDataType literalType(SqlLiteral literal) {\n         return HazelcastTypeFactory.INSTANCE.createSqlType(literal.getTypeName());\n     }\n \n+    @Override\n+    public RelDataType deriveSumType(RelDataTypeFactory typeFactory, RelDataType argumentType) {\n+        if (argumentType instanceof BasicSqlType) {\n+            SqlTypeName type = deriveSumType(argumentType.getSqlTypeName());\n+\n+            if (type.allowsPrec() && argumentType.getPrecision() != RelDataType.PRECISION_NOT_SPECIFIED) {\n+                int precision = typeFactory.getTypeSystem().getMaxPrecision(type);\n+                if (type.allowsScale()) {\n+                    return typeFactory.createTypeWithNullability(\n+                            typeFactory.createSqlType(type, precision, argumentType.getScale()),\n+                            argumentType.isNullable()\n+                    );\n+                } else {\n+                    return typeFactory.createTypeWithNullability(\n+                            typeFactory.createSqlType(type, precision),\n+                            argumentType.isNullable()\n+                    );\n+                }\n+            } else {\n+                return typeFactory.createTypeWithNullability(\n+                        typeFactory.createSqlType(type),\n+                        argumentType.isNullable()\n+                );\n+            }\n+        }\n+        return argumentType;\n+    }\n+\n+    private static SqlTypeName deriveSumType(SqlTypeName type) {\n+        switch (type) {\n+            case TINYINT:\n+            case SMALLINT:\n+                return SqlTypeName.INTEGER;", "originalCommit": "eae34b55e75160f080dabda00083815a904e68c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53760f54fedf14738946796ab9b2fad261a9ee5c", "url": "https://github.com/hazelcast/hazelcast/commit/53760f54fedf14738946796ab9b2fad261a9ee5c", "message": "Use BIGINT as the result of summing all int types", "committedDate": "2020-10-07T06:59:04Z", "type": "commit"}]}