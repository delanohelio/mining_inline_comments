{"pr_number": 851, "pr_title": "Modify Helix generic controller to include new stage for customized view aggregation", "pr_createdAt": "2020-03-04T00:40:20Z", "pr_url": "https://github.com/apache/helix/pull/851", "timeline": [{"oid": "7ffc324b5ab08536e739a209c167e01bc01834f9", "url": "https://github.com/apache/helix/commit/7ffc324b5ab08536e739a209c167e01bc01834f9", "message": "Add customized view computation logic and modify Helix controller", "committedDate": "2020-03-04T00:42:31Z", "type": "forcePushed"}, {"oid": "f40de0e559472b04b18e87290ecc897bb930badc", "url": "https://github.com/apache/helix/commit/f40de0e559472b04b18e87290ecc897bb930badc", "message": "Add customized view computation logic and modify Helix controller", "committedDate": "2020-03-04T00:52:36Z", "type": "forcePushed"}, {"oid": "01b9f749010a2431b9b2203c7bd5513c6c155e64", "url": "https://github.com/apache/helix/commit/01b9f749010a2431b9b2203c7bd5513c6c155e64", "message": "Add customized view computation logic and modify Helix controller", "committedDate": "2020-03-04T01:10:54Z", "type": "forcePushed"}, {"oid": "928b68d918c6476a8b5265d9013bb543a211b8b0", "url": "https://github.com/apache/helix/commit/928b68d918c6476a8b5265d9013bb543a211b8b0", "message": "Implement customized view computation and modify Helix controller", "committedDate": "2020-03-05T18:48:05Z", "type": "forcePushed"}, {"oid": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "url": "https://github.com/apache/helix/commit/853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "message": "Implement customized view computation and modify Helix controller", "committedDate": "2020-03-05T20:46:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMzE1NA==", "url": "https://github.com/apache/helix/pull/851#discussion_r388613154", "bodyText": "Why it's \"EXTERNALVIEW\"?", "author": "jiajunwang", "createdAt": "2020-03-05T22:51:34Z", "path": "helix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java", "diffHunk": "@@ -268,6 +271,18 @@ public static String externalView(String clusterName, String resourceName) {\n     return String.format(\"/%s/EXTERNALVIEW/%s\", clusterName, resourceName);\n   }\n \n+  public static String customizedView(String clusterName) {\n+    return String.format(\"/%s/CUSTOMIZEDVIEW\", clusterName);\n+  }\n+\n+  public static String customizedView(String clusterName, String customizedStateName) {\n+    return String.format(\"/%s/EXTERNALVIEW/%s\", clusterName, customizedStateName);", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMzIzMQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r388613231", "bodyText": "Same here.", "author": "jiajunwang", "createdAt": "2020-03-05T22:51:45Z", "path": "helix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java", "diffHunk": "@@ -268,6 +271,18 @@ public static String externalView(String clusterName, String resourceName) {\n     return String.format(\"/%s/EXTERNALVIEW/%s\", clusterName, resourceName);\n   }\n \n+  public static String customizedView(String clusterName) {\n+    return String.format(\"/%s/CUSTOMIZEDVIEW\", clusterName);\n+  }\n+\n+  public static String customizedView(String clusterName, String customizedStateName) {\n+    return String.format(\"/%s/EXTERNALVIEW/%s\", clusterName, customizedStateName);\n+  }\n+\n+  public static String customizedView(String clusterName, String customizedStateName, String resourceName) {\n+    return String.format(\"/%s/EXTERNALVIEW/%s/%s\", clusterName, customizedStateName, resourceName);", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMzk0MA==", "url": "https://github.com/apache/helix/pull/851#discussion_r388613940", "bodyText": "I think it is possible that we have other configs for the customized state except for AGGREGATION. It would be easier for us to extend if we just call it CUSTOMIZED_STATE, which means all CUSTOMIZED_STATE configuration.", "author": "jiajunwang", "createdAt": "2020-03-05T22:53:36Z", "path": "helix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java", "diffHunk": "@@ -373,6 +388,10 @@ public static String resourceConfig(String clusterName) {\n     return String.format(\"/%s/CONFIGS/RESOURCE\", clusterName);\n   }\n \n+  public static String customizedStateAggregationConfig(String clusterName) {\n+    return String.format(\"/%s/CONFIGS/CUSTOMIZED_STATE_AGGREGATION\", clusterName);", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNDMwOA==", "url": "https://github.com/apache/helix/pull/851#discussion_r388614308", "bodyText": "Since the getProperty() may cause real ZK traffic. Can we get once and assign it to a local var?", "author": "jiajunwang", "createdAt": "2020-03-05T22:54:47Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedStateCache.java", "diffHunk": "@@ -49,11 +49,15 @@ public CustomizedStateCache(ControlContextProvider contextProvider) {\n       Map<String, LiveInstance> liveInstanceMap) {\n     Set<PropertyKey> participantStateKeys = new HashSet<>();\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    Set<String> restrictedKeys = new HashSet<>(\n-        accessor.getProperty(accessor.keyBuilder().customizedStateAggregationConfig()).getRecord()\n-            .getListFields().get(\n-            CustomizedStateAggregationConfig.CustomizedStateAggregationProperty.AGGREGATION_ENABLED_TYPES\n-                .name()));\n+\n+    Set<String> restrictedKeys = new HashSet<>();\n+    if (accessor.getProperty(accessor.keyBuilder().customizedStateAggregationConfig()) != null) {", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNDc0Mw==", "url": "https://github.com/apache/helix/pull/851#discussion_r388614743", "bodyText": "So if the config is empty, the default behavior is aggregating nothing, right?", "author": "jiajunwang", "createdAt": "2020-03-05T22:55:53Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedStateCache.java", "diffHunk": "@@ -49,11 +49,15 @@ public CustomizedStateCache(ControlContextProvider contextProvider) {\n       Map<String, LiveInstance> liveInstanceMap) {\n     Set<PropertyKey> participantStateKeys = new HashSet<>();\n     PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n-    Set<String> restrictedKeys = new HashSet<>(\n-        accessor.getProperty(accessor.keyBuilder().customizedStateAggregationConfig()).getRecord()\n-            .getListFields().get(\n-            CustomizedStateAggregationConfig.CustomizedStateAggregationProperty.AGGREGATION_ENABLED_TYPES\n-                .name()));\n+\n+    Set<String> restrictedKeys = new HashSet<>();\n+    if (accessor.getProperty(accessor.keyBuilder().customizedStateAggregationConfig()) != null) {\n+      restrictedKeys = new HashSet<>(\n+          accessor.getProperty(accessor.keyBuilder().customizedStateAggregationConfig()).getRecord()\n+              .getListFields().get(\n+              CustomizedStateAggregationConfig.CustomizedStateAggregationProperty.AGGREGATION_ENABLED_TYPES", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2NzAyNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r389067026", "bodyText": "yes.", "author": "zhangmeng916", "createdAt": "2020-03-06T18:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNDc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNTAzNA==", "url": "https://github.com/apache/helix/pull/851#discussion_r388615034", "bodyText": "Do you think we need sync control on all the map operations here?", "author": "jiajunwang", "createdAt": "2020-03-05T22:56:37Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -139,6 +139,17 @@ private PropertyKey customizedViewKey(PropertyKey.Builder keyBuilder, String res\n     return Collections.unmodifiableMap(_customizedViewMap);\n   }\n \n+  /**\n+   * Remove dead customized views from map\n+   * @param resourceNames\n+   */\n+\n+  public void removeCustomizedView(List<String> resourceNames) {", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNzAwNA==", "url": "https://github.com/apache/helix/pull/851#discussion_r388617004", "bodyText": "CustomizedViewAggregateStage ?\nI just try to differentiate it from CustomizedStateComputationStage.", "author": "jiajunwang", "createdAt": "2020-03-05T23:01:46Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -423,6 +431,10 @@ private static PipelineRegistry createDefaultRegistry(String pipelineName) {\n       Pipeline externalViewPipeline = new Pipeline(pipelineName);\n       externalViewPipeline.addStage(new ExternalViewComputeStage());\n \n+      // customized state view generation\n+      Pipeline customizedViewPipeline = new Pipeline(pipelineName);\n+      customizedViewPipeline.addStage(new CustomizedViewComputeStage());", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxODA0OQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r388618049", "bodyText": "This is problematic. If you refresh all the data, including current state, idealstate etc., then you don't do rebalancePipeline, the controller might fail to react on some critical event.\nI think we need to separate the custiomizedState read stage from the dataPreprocess (maybe also data refresh).", "author": "jiajunwang", "createdAt": "2020-03-05T23:04:58Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -431,16 +443,31 @@ private static PipelineRegistry createDefaultRegistry(String pipelineName) {\n       Pipeline autoExitMaintenancePipeline = new Pipeline(pipelineName);\n       autoExitMaintenancePipeline.addStage(new MaintenanceRecoveryStage());\n \n-      registry.register(ClusterEventType.IdealStateChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.CurrentStateChange, dataRefresh, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.InstanceConfigChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.ResourceConfigChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.ClusterConfigChange, dataRefresh, autoExitMaintenancePipeline, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.LiveInstanceChange, dataRefresh, autoExitMaintenancePipeline, liveInstancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.MessageChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.Resume, dataRefresh, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.PeriodicalRebalance, dataRefresh, autoExitMaintenancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.OnDemandRebalance, dataRefresh, autoExitMaintenancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.IdealStateChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.CurrentStateChange, dataRefresh, dataPreprocess,\n+          externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.InstanceConfigChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.ResourceConfigChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.ClusterConfigChange, dataRefresh,\n+          autoExitMaintenancePipeline, dataPreprocess, rebalancePipeline);\n+      registry.register(ClusterEventType.LiveInstanceChange, dataRefresh,\n+          autoExitMaintenancePipeline, liveInstancePipeline, dataPreprocess, externalViewPipeline, customizedViewPipeline,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.MessageChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.Resume, dataRefresh, dataPreprocess, externalViewPipeline,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.PeriodicalRebalance, dataRefresh,\n+          autoExitMaintenancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.OnDemandRebalance, dataRefresh,\n+          autoExitMaintenancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.CustomizedStateChange, dataRefresh, dataPreprocess,", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MDE3OQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394680179", "bodyText": "The issue has been resolved with rebalancePipeline at the end. Please add a TODO here to note it is not efficient, and we should improve this by splitting the pipeline or controller roles to multiple hosts.", "author": "jiajunwang", "createdAt": "2020-03-18T22:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxODA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMDE1MQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r388620151", "bodyText": "Can these logic be pushed to the event handling section?\n\nAny error here will break the ZK thread. There will be a very ugly exception output.\nThe extended latency will impact the whole controller performance.", "author": "jiajunwang", "createdAt": "2020-03-05T23:11:30Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -899,6 +937,48 @@ public void onResourceConfigChange(\n         .info(\"END: GenericClusterController.onResourceConfigChange() for cluster \" + _clusterName);\n   }\n \n+  @Override\n+  @PreFetch(enabled = false)\n+  public void onCustomizedStateAggregationConfigChange(\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig,\n+      NotificationContext context) {\n+    HelixManager helixManager = context.getManager();\n+    // add customized state listeners for existing instances\n+    List<String> customizedStates = new ArrayList<>();\n+\n+    if (helixManager.getConfigAccessor()\n+        .getCustomizedStateAggregationConfig(_clusterName) != null) {\n+      customizedStates = helixManager.getConfigAccessor()\n+          .getCustomizedStateAggregationConfig(_clusterName).getAggregationEnabledTypes();\n+    }\n+\n+    Map<String, LiveInstance> liveInstanceMap = helixManager.getHelixDataAccessor()\n+        .getChildValuesMap(helixManager.getHelixDataAccessor().keyBuilder().liveInstances());\n+    List<String> liveInstances = liveInstanceMap.values().stream()\n+        .map(liveInstance -> liveInstance.getInstanceName()).collect(Collectors.toList());\n+\n+    for (String customizedState : customizedStates) {\n+      for (String instance : liveInstances) {\n+        try {\n+          helixManager.addCustomizedStateChangeListener(this, instance, customizedState);", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMDc2Ng==", "url": "https://github.com/apache/helix/pull/851#discussion_r388620766", "bodyText": "Why we need another loop looks exactly the same as the addMessageListener logic? Can we just do the work in the same loop?", "author": "jiajunwang", "createdAt": "2020-03-05T23:13:37Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1072,6 +1152,25 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n         }\n       }\n \n+      for (String instance : curInstances.keySet()) {", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMTY4OA==", "url": "https://github.com/apache/helix/pull/851#discussion_r390011688", "bodyText": "The reason we need to add listeners in both functions is that only after customized state config is updated, the paths of individual states can be decided and listeners can be added to them. For example, after we add listener in live instance change, if we do not add listener in customized state config, we will miss the paths of the new customized state, and all the changes on this path will be missed until next live instance change. This is not preferred.", "author": "zhangmeng916", "createdAt": "2020-03-09T23:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMDc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMTA2NQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r388621065", "bodyText": "A method to warp the logic would be cleaner.", "author": "jiajunwang", "createdAt": "2020-03-05T23:14:39Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1072,6 +1152,25 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n         }\n       }\n \n+      for (String instance : curInstances.keySet()) {\n+        if (lastInstances == null || !lastInstances.containsKey(instance)) {\n+          try {", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMTcxMg==", "url": "https://github.com/apache/helix/pull/851#discussion_r388621712", "bodyText": "And I guess this method could be referred in the method onCustomizedStateAggregationConfigChange() above.", "author": "jiajunwang", "createdAt": "2020-03-05T23:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMTA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMjQzNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r390022436", "bodyText": "Please see the updated code.", "author": "zhangmeng916", "createdAt": "2020-03-09T23:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyMTA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjg4Ng==", "url": "https://github.com/apache/helix/pull/851#discussion_r388626886", "bodyText": "This logic should be resource controller data provider only, I think.\nIt is not required by TF.", "author": "jiajunwang", "createdAt": "2020-03-05T23:34:11Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -286,6 +292,27 @@ private void refreshResourceConfig(final HelixDataAccessor accessor,\n     }\n   }\n \n+  private void refreshCustomizedStateAggregationConfig(final HelixDataAccessor accessor,", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NjQyNA==", "url": "https://github.com/apache/helix/pull/851#discussion_r389976424", "bodyText": "As the customized state config is a cluster level config, and following the current pattern, I feel it is more natural to put it together with cluster config, resource config, etc.", "author": "zhangmeng916", "createdAt": "2020-03-09T21:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTIxNQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r388631215", "bodyText": "I see it is updated, but I don't see anyone uses it. So a little bit confused. Could you please specify the plan of using it in this comment?", "author": "jiajunwang", "createdAt": "2020-03-05T23:49:32Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -96,13 +99,15 @@\n \n   // Special caches\n   private CurrentStateCache _currentStateCache;\n+  private CustomizedStateCache _customizedStateCache;\n   private InstanceMessagesCache _instanceMessagesCache;\n \n   // Other miscellaneous caches\n   private Map<String, Long> _instanceOfflineTimeMap;\n   private Map<String, Map<String, String>> _idealStateRuleMap;\n   private Map<String, Map<String, Set<String>>> _disabledInstanceForPartitionMap = new HashMap<>();\n   private Set<String> _disabledInstanceSet = new HashSet<>();\n+  private Set<String> _aggregationEnabledTypes = new HashSet<>();", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NDkwNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r389074906", "bodyText": "I've removed it, it used to be used by customized state cache, but now we've changed that cache and access the customized state config directly in the cache. So we do not need this variable.", "author": "zhangmeng916", "createdAt": "2020-03-06T18:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3MzEyOQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r389473129", "bodyText": "I added the aggregationEnableType back, as it will break some test. The main reason is that if we put the accessing to ZK inside customized state cache, it will break some assumption in the mock zk Helix accessor about refresh logic, and the calculation for \"config\" type would be wrong.", "author": "zhangmeng916", "createdAt": "2020-03-09T05:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzMTIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0Mjc2Nw==", "url": "https://github.com/apache/helix/pull/851#discussion_r388642767", "bodyText": "We aggregate _currentStateCache in addition to externalView because it is used in the rebalance pipeline. For customize state though, the customized view is the only thing we need. Can we just combine these 2 refresh workflow and keep one customized View map in the cache?", "author": "jiajunwang", "createdAt": "2020-03-06T00:27:23Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -96,13 +99,15 @@\n \n   // Special caches\n   private CurrentStateCache _currentStateCache;\n+  private CustomizedStateCache _customizedStateCache;", "originalCommit": "853846610b3c4d5714cda9f2c30e0c92ef28f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNjg2MQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r390026861", "bodyText": "So _customizedStateCache is used by CustomizedStateComputation stage, which happened before customized view aggregation stage. Therefore, we do need this cache to avoid access to ZK during computation.", "author": "zhangmeng916", "createdAt": "2020-03-10T00:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0Mjc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2NDA5Mg==", "url": "https://github.com/apache/helix/pull/851#discussion_r394564092", "bodyText": "Have moved it to resource provider.", "author": "zhangmeng916", "createdAt": "2020-03-18T18:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0Mjc2Nw=="}], "type": "inlineReview"}, {"oid": "0468f0ea75644ac4daadc40e36ea68072f9b14d4", "url": "https://github.com/apache/helix/commit/0468f0ea75644ac4daadc40e36ea68072f9b14d4", "message": "change pipeline", "committedDate": "2020-03-11T05:59:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3NzA0Mg==", "url": "https://github.com/apache/helix/pull/851#discussion_r391177042", "bodyText": "I think we discussed to put the restrictedKeys to the CustomizedStateCache constructor as a final field. So you don't need to add this to these methods? The downside of the current design is that the current state cache will have to keep the unnecessary input.", "author": "jiajunwang", "createdAt": "2020-03-11T18:26:09Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedStateCache.java", "diffHunk": "@@ -46,14 +46,9 @@ public CustomizedStateCache(ControlContextProvider contextProvider) {\n \n   @Override\n   protected Set<PropertyKey> PopulateParticipantKeys(HelixDataAccessor accessor,\n-      Map<String, LiveInstance> liveInstanceMap) {\n+      Map<String, LiveInstance> liveInstanceMap, Set<String> restrictedKeys) {", "originalCommit": "0468f0ea75644ac4daadc40e36ea68072f9b14d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3ODg2MA==", "url": "https://github.com/apache/helix/pull/851#discussion_r391178860", "bodyText": "Following the previous comment, I think this restrictedKeys can be a field only for the customizedStateCache class. As long as we input it in the constructor, we will be able to read it in the customizedStateCache class method. For this parent class, it does no need to know it.", "author": "jiajunwang", "createdAt": "2020-03-11T18:29:22Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/ParticipantStateCache.java", "diffHunk": "@@ -57,10 +57,11 @@ public ParticipantStateCache(ControlContextProvider controlContextProvider) {\n    * @param liveInstanceMap map of all liveInstances in cluster\n    * @return\n    */\n-  public boolean refresh(HelixDataAccessor accessor, Map<String, LiveInstance> liveInstanceMap) {\n+  public boolean refresh(HelixDataAccessor accessor, Map<String, LiveInstance> liveInstanceMap,\n+      Set<String> restrictedKeys) {", "originalCommit": "0468f0ea75644ac4daadc40e36ea68072f9b14d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "url": "https://github.com/apache/helix/commit/8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "message": "change pipeline", "committedDate": "2020-03-12T17:21:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNDQyNA==", "url": "https://github.com/apache/helix/pull/851#discussion_r394034424", "bodyText": "It seems this import is unused?", "author": "huizhilu", "createdAt": "2020-03-17T23:48:40Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedStateCache.java", "diffHunk": "@@ -27,6 +27,7 @@\n import org.apache.helix.PropertyKey;\n import org.apache.helix.common.controllers.ControlContextProvider;\n import org.apache.helix.model.CustomizedState;\n+import org.apache.helix.model.CustomizedStateConfig;", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNDkwNQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394034905", "bodyText": "Remove empty line?", "author": "huizhilu", "createdAt": "2020-03-17T23:50:35Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestComputeAndCleanupCustomizedView.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.apache.helix.integration;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.ZkUnitTestBase;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.CustomizedState;\n+import org.apache.helix.model.CustomizedStateConfig;\n+import org.apache.helix.model.CustomizedView;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static java.lang.Thread.*;\n+\n+\n+/**\n+ * Test compute and clean customized view - if customized state is remove externally, controller should remove the\n+ * orphan customized view\n+ */\n+public class TestComputeAndCleanupCustomizedView extends ZkUnitTestBase {\n+\n+  private final String RESOURCE_NAME = \"TestDB0\";\n+  private final String PARTITION_NAME = \"TestDB0_0\";\n+  private final String CUSTOMIZED_STATE_NAME = \"customizedState1\";\n+  private final String INSTANCE_NAME1 = \"localhost_12918\";\n+  private final String INSTANCE_NAME2 = \"localhost_12919\";\n+\n+  @Test\n+  public void test() throws Exception {\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+    int n = 2;\n+\n+    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n+\n+    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, // participant port\n+        \"localhost\", // participant name prefix\n+        \"TestDB\", // resource name prefix\n+        1, // resources\n+        2, // partitions per resource\n+        n, // number of nodes\n+        2, // replicas\n+        \"MasterSlave\", true); // do rebalance\n+\n+    ClusterControllerManager controller =\n+        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n+    controller.syncStart();\n+\n+    // start participants\n+    MockParticipantManager[] participants = new MockParticipantManager[n];\n+    for (int i = 0; i < n; i++) {\n+      String instanceName = \"localhost_\" + (12918 + i);\n+\n+      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n+      participants[i].syncStart();\n+    }\n+\n+    ZKHelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+\n+    CustomizedStateConfig config = new CustomizedStateConfig();\n+    List<String> aggregationEnabledTypes = new ArrayList<>();\n+    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n+    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n+\n+    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n+\n+    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n+    customizedState.setState(PARTITION_NAME, \"STARTED\");\n+    accessor.setProperty(\n+        keyBuilder.customizedState(INSTANCE_NAME1, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n+        customizedState);\n+\n+    CustomizedView customizedView = null;\n+    int i = 0;\n+    while (true)  {\n+      sleep(1000);\n+      try {\n+        customizedView = accessor.getProperty(keyBuilder.customizedView(CUSTOMIZED_STATE_NAME, RESOURCE_NAME));\n+        Map<String, String> stateMap = customizedView.getRecord().getMapField(PARTITION_NAME);\n+        if (stateMap.get(INSTANCE_NAME1).equals(\"STARTED\")) {\n+          System.out.println(\"succeed\");\n+          break;\n+        }\n+      } catch (Exception e) {\n+        i ++;\n+        if (i >= 10) {\n+          Assert.fail(\"The customized view is not correct\");\n+        }\n+      }\n+    }\n+\n+    // disable controller\n+    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n+    admin.enableCluster(clusterName, false);\n+    ZkTestHelper.tryWaitZkEventsCleaned(controller.getZkClient());\n+\n+    // drop resource\n+    admin.dropResource(clusterName, RESOURCE_NAME);\n+\n+    // delete customized state manually, controller shall remove customized view when cluster is enabled again\n+\n+    accessor.removeProperty(\n+        keyBuilder.customizedState(INSTANCE_NAME1, CUSTOMIZED_STATE_NAME, RESOURCE_NAME));\n+    accessor.removeProperty(\n+        keyBuilder.currentState(INSTANCE_NAME2, CUSTOMIZED_STATE_NAME, RESOURCE_NAME));\n+\n+    // re-enable controller shall remove orphan external view\n+    // System.out.println(\"re-enabling controller\");\n+    admin.enableCluster(clusterName, true);\n+\n+    customizedView = null;\n+    for (i = 0; i < 10; i++) {\n+      sleep(100);\n+      customizedView = accessor.getProperty(keyBuilder.customizedView(CUSTOMIZED_STATE_NAME));\n+      if (customizedView == null) {\n+        break;\n+      }\n+    }\n+\n+    Assert.assertNull(customizedView,\n+        \"customized view for TestDB0 should be removed, but was: \" + customizedView);\n+\n+    // clean up\n+    controller.syncStop();\n+    for (i = 0; i < n; i++) {\n+      participants[i].syncStop();\n+    }\n+    TestHelper.dropCluster(clusterName, _gZkClient);\n+\n+    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n+  }\n+", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMyNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r394035326", "bodyText": "It seems this is a case that you can use TestHelper.verify().", "author": "huizhilu", "createdAt": "2020-03-17T23:52:04Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestComputeAndCleanupCustomizedView.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.apache.helix.integration;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.ZkUnitTestBase;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.CustomizedState;\n+import org.apache.helix.model.CustomizedStateConfig;\n+import org.apache.helix.model.CustomizedView;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static java.lang.Thread.*;\n+\n+\n+/**\n+ * Test compute and clean customized view - if customized state is remove externally, controller should remove the\n+ * orphan customized view\n+ */\n+public class TestComputeAndCleanupCustomizedView extends ZkUnitTestBase {\n+\n+  private final String RESOURCE_NAME = \"TestDB0\";\n+  private final String PARTITION_NAME = \"TestDB0_0\";\n+  private final String CUSTOMIZED_STATE_NAME = \"customizedState1\";\n+  private final String INSTANCE_NAME1 = \"localhost_12918\";\n+  private final String INSTANCE_NAME2 = \"localhost_12919\";\n+\n+  @Test\n+  public void test() throws Exception {\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+    int n = 2;\n+\n+    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n+\n+    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, // participant port\n+        \"localhost\", // participant name prefix\n+        \"TestDB\", // resource name prefix\n+        1, // resources\n+        2, // partitions per resource\n+        n, // number of nodes\n+        2, // replicas\n+        \"MasterSlave\", true); // do rebalance\n+\n+    ClusterControllerManager controller =\n+        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n+    controller.syncStart();\n+\n+    // start participants\n+    MockParticipantManager[] participants = new MockParticipantManager[n];\n+    for (int i = 0; i < n; i++) {\n+      String instanceName = \"localhost_\" + (12918 + i);\n+\n+      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n+      participants[i].syncStart();\n+    }\n+\n+    ZKHelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+\n+    CustomizedStateConfig config = new CustomizedStateConfig();\n+    List<String> aggregationEnabledTypes = new ArrayList<>();\n+    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n+    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n+\n+    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n+\n+    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n+    customizedState.setState(PARTITION_NAME, \"STARTED\");\n+    accessor.setProperty(\n+        keyBuilder.customizedState(INSTANCE_NAME1, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n+        customizedState);\n+\n+    CustomizedView customizedView = null;\n+    int i = 0;\n+    while (true)  {\n+      sleep(1000);", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjA2MQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394036061", "bodyText": "TestHelper.verify() would help.", "author": "huizhilu", "createdAt": "2020-03-17T23:54:26Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestComputeAndCleanupCustomizedView.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.apache.helix.integration;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.ZkUnitTestBase;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.CustomizedState;\n+import org.apache.helix.model.CustomizedStateConfig;\n+import org.apache.helix.model.CustomizedView;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static java.lang.Thread.*;\n+\n+\n+/**\n+ * Test compute and clean customized view - if customized state is remove externally, controller should remove the\n+ * orphan customized view\n+ */\n+public class TestComputeAndCleanupCustomizedView extends ZkUnitTestBase {\n+\n+  private final String RESOURCE_NAME = \"TestDB0\";\n+  private final String PARTITION_NAME = \"TestDB0_0\";\n+  private final String CUSTOMIZED_STATE_NAME = \"customizedState1\";\n+  private final String INSTANCE_NAME1 = \"localhost_12918\";\n+  private final String INSTANCE_NAME2 = \"localhost_12919\";\n+\n+  @Test\n+  public void test() throws Exception {\n+    String className = TestHelper.getTestClassName();\n+    String methodName = TestHelper.getTestMethodName();\n+    String clusterName = className + \"_\" + methodName;\n+    int n = 2;\n+\n+    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n+\n+    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, // participant port\n+        \"localhost\", // participant name prefix\n+        \"TestDB\", // resource name prefix\n+        1, // resources\n+        2, // partitions per resource\n+        n, // number of nodes\n+        2, // replicas\n+        \"MasterSlave\", true); // do rebalance\n+\n+    ClusterControllerManager controller =\n+        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n+    controller.syncStart();\n+\n+    // start participants\n+    MockParticipantManager[] participants = new MockParticipantManager[n];\n+    for (int i = 0; i < n; i++) {\n+      String instanceName = \"localhost_\" + (12918 + i);\n+\n+      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n+      participants[i].syncStart();\n+    }\n+\n+    ZKHelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+\n+    CustomizedStateConfig config = new CustomizedStateConfig();\n+    List<String> aggregationEnabledTypes = new ArrayList<>();\n+    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n+    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n+\n+    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n+\n+    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n+    customizedState.setState(PARTITION_NAME, \"STARTED\");\n+    accessor.setProperty(\n+        keyBuilder.customizedState(INSTANCE_NAME1, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n+        customizedState);\n+\n+    CustomizedView customizedView = null;\n+    int i = 0;\n+    while (true)  {\n+      sleep(1000);\n+      try {\n+        customizedView = accessor.getProperty(keyBuilder.customizedView(CUSTOMIZED_STATE_NAME, RESOURCE_NAME));\n+        Map<String, String> stateMap = customizedView.getRecord().getMapField(PARTITION_NAME);\n+        if (stateMap.get(INSTANCE_NAME1).equals(\"STARTED\")) {\n+          System.out.println(\"succeed\");\n+          break;\n+        }\n+      } catch (Exception e) {\n+        i ++;\n+        if (i >= 10) {\n+          Assert.fail(\"The customized view is not correct\");\n+        }\n+      }\n+    }\n+\n+    // disable controller\n+    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n+    admin.enableCluster(clusterName, false);\n+    ZkTestHelper.tryWaitZkEventsCleaned(controller.getZkClient());\n+\n+    // drop resource\n+    admin.dropResource(clusterName, RESOURCE_NAME);\n+\n+    // delete customized state manually, controller shall remove customized view when cluster is enabled again\n+\n+    accessor.removeProperty(\n+        keyBuilder.customizedState(INSTANCE_NAME1, CUSTOMIZED_STATE_NAME, RESOURCE_NAME));\n+    accessor.removeProperty(\n+        keyBuilder.currentState(INSTANCE_NAME2, CUSTOMIZED_STATE_NAME, RESOURCE_NAME));\n+\n+    // re-enable controller shall remove orphan external view\n+    // System.out.println(\"re-enabling controller\");\n+    admin.enableCluster(clusterName, true);\n+\n+    customizedView = null;\n+    for (i = 0; i < 10; i++) {\n+      sleep(100);\n+      customizedView = accessor.getProperty(keyBuilder.customizedView(CUSTOMIZED_STATE_NAME));\n+      if (customizedView == null) {\n+        break;\n+      }\n+    }", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjI2NA==", "url": "https://github.com/apache/helix/pull/851#discussion_r394036264", "bodyText": "No need to import *?", "author": "huizhilu", "createdAt": "2020-03-17T23:55:07Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestComputeAndCleanupCustomizedView.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.apache.helix.integration;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.ZkTestHelper;\n+import org.apache.helix.ZkUnitTestBase;\n+import org.apache.helix.integration.manager.ClusterControllerManager;\n+import org.apache.helix.integration.manager.MockParticipantManager;\n+import org.apache.helix.manager.zk.ZKHelixAdmin;\n+import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.CustomizedState;\n+import org.apache.helix.model.CustomizedStateConfig;\n+import org.apache.helix.model.CustomizedView;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static java.lang.Thread.*;", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjg2OQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394036869", "bodyText": "Are you sure the ordering in both lists is the same? If the elements are the same but ordering is different, this test would fail. I suggest put them into Sets.", "author": "huizhilu", "createdAt": "2020-03-17T23:57:16Z", "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.apache.helix.controller.stages;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.TestHelper;\n+import org.apache.helix.ZkUnitTestBase;\n+import org.apache.helix.controller.dataproviders.ResourceControllerDataProvider;\n+import org.apache.helix.controller.pipeline.Pipeline;\n+import org.apache.helix.manager.zk.ZKHelixDataAccessor;\n+import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n+import org.apache.helix.model.CustomizedState;\n+import org.apache.helix.model.CustomizedStateConfig;\n+import org.apache.helix.model.CustomizedView;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestCustomizedViewStage extends ZkUnitTestBase {\n+  private final String RESOURCE_NAME = \"testResourceName\";\n+  private final String PARTITION_NAME = \"testResourceName_0\";\n+  private final String CUSTOMIZED_STATE_NAME = \"customizedState1\";\n+  private final String INSTANCE_NAME = \"localhost_1\";\n+\n+  @Test\n+  public void testCachedCustomizedViews() throws Exception {\n+    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n+\n+    HelixDataAccessor accessor =\n+        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n+    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n+\n+    setupLiveInstances(clusterName, new int[]{0, 1});\n+    setupStateModel(clusterName);\n+\n+    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n+    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n+    event.addAttribute(AttributeName.helixmanager.name(), manager);\n+    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n+\n+    CustomizedStateConfig config = new CustomizedStateConfig();\n+    List<String> aggregationEnabledTypes = new ArrayList<>();\n+    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n+    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n+\n+    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n+    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n+\n+    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n+    customizedState.setState(PARTITION_NAME, \"STARTED\");\n+    accessor\n+        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n+            customizedState);\n+\n+    CustomizedViewAggregateStage customizedViewComputeStage = new CustomizedViewAggregateStage();\n+    Pipeline dataRefresh = new Pipeline();\n+    dataRefresh.addStage(new ReadClusterDataStage());\n+    runPipeline(event, dataRefresh);\n+    runStage(event, new ResourceComputationStage());\n+    runStage(event, new CustomizedStateComputationStage());\n+    runStage(event, customizedViewComputeStage);\n+    Assert.assertEquals(cache.getCustomizedViewCacheMap().values(),\n+        accessor.getChildValues(accessor.keyBuilder().customizedViews()));\n+\n+    // Assure there is no customized view got updated\n+    List<CustomizedView> oldCustomizedViews =\n+        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n+    runStage(event, customizedViewComputeStage);\n+    List<CustomizedView> newCustomizedViews =\n+        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n+    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTcyMQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394661721", "bodyText": "Discussed in another PR, and will keep it as a list for now as we're verifying based on index.", "author": "zhangmeng916", "createdAt": "2020-03-18T21:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MTMxNA==", "url": "https://github.com/apache/helix/pull/851#discussion_r394041314", "bodyText": "Maybe no need to format the whole file? Or you can move this comment before the code:\n// comment\ncode;", "author": "huizhilu", "createdAt": "2020-03-18T00:15:17Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -122,7 +124,7 @@\n   // TODO: make this be per _manager or per _listener instaed of per callbackHandler -- Lei\n   private CallbackProcessor _batchCallbackProcessor;\n   private boolean _watchChild = true; // Whether we should subscribe to the child znode's data\n-                                      // change.\n+  // change.", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1NzM1OQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r398157359", "bodyText": "This is because the previous code was not correctly formatted in the switch section.", "author": "zhangmeng916", "createdAt": "2020-03-25T20:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MTc5Mg==", "url": "https://github.com/apache/helix/pull/851#discussion_r394041792", "bodyText": "The implementation in this method is too long. Can we try to split it into several private methods like:\nremoveStaleTypes()\nupdateCustomizedView()", "author": "huizhilu", "createdAt": "2020-03-18T00:17:01Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CustomizedViewAggregateStage.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package org.apache.helix.controller.stages;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.HelixDataAccessor;\n+import org.apache.helix.HelixException;\n+import org.apache.helix.HelixManager;\n+import org.apache.helix.PropertyKey;\n+import org.apache.helix.common.caches.CustomizedViewCache;\n+import org.apache.helix.controller.LogUtil;\n+import org.apache.helix.controller.dataproviders.ResourceControllerDataProvider;\n+import org.apache.helix.controller.pipeline.AbstractAsyncBaseStage;\n+import org.apache.helix.controller.pipeline.AsyncWorkerType;\n+import org.apache.helix.controller.pipeline.StageException;\n+import org.apache.helix.model.CustomizedView;\n+import org.apache.helix.model.Partition;\n+import org.apache.helix.model.Resource;\n+import org.apache.helix.monitoring.mbeans.ClusterStatusMonitor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class CustomizedViewAggregateStage extends AbstractAsyncBaseStage {\n+  private static Logger LOG = LoggerFactory.getLogger(CustomizedViewAggregateStage.class);\n+\n+  @Override\n+  public AsyncWorkerType getAsyncWorkerType() {\n+    return AsyncWorkerType.CustomizedStateViewComputeWorker;\n+  }\n+\n+  @Override\n+  public void execute(final ClusterEvent event) throws Exception {", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1OTY0Mw==", "url": "https://github.com/apache/helix/pull/851#discussion_r398159643", "bodyText": "If you take a look at it now, it's simpler than before. Right now it only has remove stale state types, and update customized view logic.", "author": "zhangmeng916", "createdAt": "2020-03-25T20:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzA4Mw==", "url": "https://github.com/apache/helix/pull/851#discussion_r394043083", "bodyText": "Fix conflicts :)", "author": "huizhilu", "createdAt": "2020-03-18T00:22:00Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java", "diffHunk": "@@ -118,7 +118,12 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     if (propertyRefreshed.contains(HelixConstants.ChangeType.IDEAL_STATE)\n         || propertyRefreshed.contains(HelixConstants.ChangeType.LIVE_INSTANCE)\n         || propertyRefreshed.contains(HelixConstants.ChangeType.INSTANCE_CONFIG)\n+<<<<<<< HEAD", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzY1NA==", "url": "https://github.com/apache/helix/pull/851#discussion_r394043654", "bodyText": "Collections.emptyList() may be more lightweight as a returning empty list?", "author": "huizhilu", "createdAt": "2020-03-18T00:24:17Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1233,4 +1316,24 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n+\n+  private List<String> getEnabledCustomizedStates(HelixManager manager) {\n+    CustomizedStateConfig customizedStateConfig =\n+        manager.getConfigAccessor().getCustomizedStateConfig(_clusterName);\n+    if (customizedStateConfig != null) {\n+      return customizedStateConfig.getAggregationEnabledTypes();\n+    }\n+    return new ArrayList<>();", "originalCommit": "8a4f8b3a8476d8d7544074c24e4eed3b3192bb3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16940f52fe7c66cb3cdf6b3de0827e07c7866c6c", "url": "https://github.com/apache/helix/commit/16940f52fe7c66cb3cdf6b3de0827e07c7866c6c", "message": "modify Helix controller", "committedDate": "2020-03-18T06:41:07Z", "type": "forcePushed"}, {"oid": "dedbed18fabd0d3c171dd9caab1071682266a1df", "url": "https://github.com/apache/helix/commit/dedbed18fabd0d3c171dd9caab1071682266a1df", "message": "modify Helix controller", "committedDate": "2020-03-18T06:50:01Z", "type": "forcePushed"}, {"oid": "3e5232f5e78b78ffe4ad56fe3a2860f29ee70fb8", "url": "https://github.com/apache/helix/commit/3e5232f5e78b78ffe4ad56fe3a2860f29ee70fb8", "message": "modify Helix controller", "committedDate": "2020-03-18T06:51:49Z", "type": "forcePushed"}, {"oid": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "url": "https://github.com/apache/helix/commit/919fbaff76d1de8c5bdc9307e1f49115a07e7168", "message": "modify Helix controller", "committedDate": "2020-03-18T21:53:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3ODU4Ng==", "url": "https://github.com/apache/helix/pull/851#discussion_r394678586", "bodyText": "nit, What's the delta here? Can we avoid unnecessary change in PR?", "author": "jiajunwang", "createdAt": "2020-03-18T22:35:36Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/CustomizedViewCache.java", "diffHunk": "@@ -154,4 +154,4 @@ public void clear() {\n     _customizedViewCache.clear();\n     _customizedViewMap.clear();\n   }\n-}\n+}", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MTc1OQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394681759", "bodyText": "I think externalViewPipeline is not necessary here. EV change will be eventually trigged by CS change.", "author": "jiajunwang", "createdAt": "2020-03-18T22:44:59Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -431,16 +443,35 @@ private static PipelineRegistry createDefaultRegistry(String pipelineName) {\n       Pipeline autoExitMaintenancePipeline = new Pipeline(pipelineName);\n       autoExitMaintenancePipeline.addStage(new MaintenanceRecoveryStage());\n \n-      registry.register(ClusterEventType.IdealStateChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.CurrentStateChange, dataRefresh, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.InstanceConfigChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.ResourceConfigChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.ClusterConfigChange, dataRefresh, autoExitMaintenancePipeline, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.LiveInstanceChange, dataRefresh, autoExitMaintenancePipeline, liveInstancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.MessageChange, dataRefresh, dataPreprocess, rebalancePipeline);\n-      registry.register(ClusterEventType.Resume, dataRefresh, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.PeriodicalRebalance, dataRefresh, autoExitMaintenancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n-      registry.register(ClusterEventType.OnDemandRebalance, dataRefresh, autoExitMaintenancePipeline, dataPreprocess, externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.IdealStateChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.CurrentStateChange, dataRefresh, dataPreprocess,\n+          externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.InstanceConfigChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry.register(ClusterEventType.ResourceConfigChange, dataRefresh, dataPreprocess,\n+          rebalancePipeline);\n+      registry\n+          .register(ClusterEventType.ClusterConfigChange, dataRefresh, autoExitMaintenancePipeline,\n+              dataPreprocess, rebalancePipeline);\n+      registry\n+          .register(ClusterEventType.LiveInstanceChange, dataRefresh, autoExitMaintenancePipeline,\n+              liveInstancePipeline, dataPreprocess, externalViewPipeline, customizedViewPipeline,\n+              rebalancePipeline);\n+      registry\n+          .register(ClusterEventType.MessageChange, dataRefresh, dataPreprocess, rebalancePipeline);\n+      registry.register(ClusterEventType.Resume, dataRefresh, dataPreprocess, externalViewPipeline,\n+          rebalancePipeline);\n+      registry\n+          .register(ClusterEventType.PeriodicalRebalance, dataRefresh, autoExitMaintenancePipeline,\n+              dataPreprocess, externalViewPipeline, rebalancePipeline);\n+      registry\n+          .register(ClusterEventType.OnDemandRebalance, dataRefresh, autoExitMaintenancePipeline,\n+              dataPreprocess, externalViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.CustomizedStateChange, dataRefresh, dataPreprocess,\n+          externalViewPipeline, customizedViewPipeline, rebalancePipeline);\n+      registry.register(ClusterEventType.CustomizeStateAggregationConfigChange, dataRefresh,", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MzUzMA==", "url": "https://github.com/apache/helix/pull/851#discussion_r394683530", "bodyText": "I remember we agreed on moving this to the event processing logic. So there won't be a major delay in the ZK event callback thread.", "author": "jiajunwang", "createdAt": "2020-03-18T22:49:59Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -899,6 +941,38 @@ public void onResourceConfigChange(\n         .info(\"END: GenericClusterController.onResourceConfigChange() for cluster \" + _clusterName);\n   }\n \n+  @Override\n+  @PreFetch(enabled = false)\n+  public void onCustomizedStateConfigChange(\n+      CustomizedStateConfig customizedStateConfig,\n+      NotificationContext context) {\n+    HelixManager helixManager = context.getManager();", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4NTU4MQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r394685581", "bodyText": "Another question, when do we remove the listener if the corresponding type has been removed from the config?", "author": "jiajunwang", "createdAt": "2020-03-18T22:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MzUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4ODQwNA==", "url": "https://github.com/apache/helix/pull/851#discussion_r394688404", "bodyText": "Please follow the reverse order in which the listeners are added.", "author": "jiajunwang", "createdAt": "2020-03-18T23:04:16Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java", "diffHunk": "@@ -102,6 +104,7 @@ public void removeListenersFromController(GenericHelixController controller) {\n     _manager.removeListener(keyBuilder.clusterConfig(), controller);\n     _manager.removeListener(keyBuilder.resourceConfigs(), controller);\n     _manager.removeListener(keyBuilder.instanceConfigs(), controller);\n+    _manager.removeListener(keyBuilder.customizedStateConfig(), controller);", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTA4Mw==", "url": "https://github.com/apache/helix/pull/851#discussion_r394689083", "bodyText": "This is OK for this PR, but ideally, we should separate this type of API change into other PRs.", "author": "jiajunwang", "createdAt": "2020-03-18T23:06:23Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -743,6 +743,8 @@ private void createZKPaths(String clusterName) {\n     _zkClient.createPersistent(path);\n     path = PropertyPathBuilder.resourceConfig(clusterName);\n     _zkClient.createPersistent(path);\n+    path = PropertyPathBuilder.customizedStateConfig(clusterName);", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDA5Nw==", "url": "https://github.com/apache/helix/pull/851#discussion_r394690097", "bodyText": "Is this change covered by any unit tests?", "author": "jiajunwang", "createdAt": "2020-03-18T23:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MDMyMA==", "url": "https://github.com/apache/helix/pull/851#discussion_r395290320", "bodyText": "added in TestZkHelixAdmin", "author": "zhangmeng916", "createdAt": "2020-03-19T20:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTc2Ng==", "url": "https://github.com/apache/helix/pull/851#discussion_r394689766", "bodyText": "update the comment? Or the math won't be right.", "author": "jiajunwang", "createdAt": "2020-03-18T23:08:24Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "diffHunk": "@@ -123,7 +123,7 @@ public boolean verify() throws Exception {\n     // printHandlers(participantManagerToExpire);\n     int controllerHandlerNb = controller.getHandlers().size();\n     int particHandlerNb = participantManagerToExpire.getHandlers().size();\n-    Assert.assertEquals(controllerHandlerNb, 11,\n+    Assert.assertEquals(controllerHandlerNb, 12,\n         \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTk0Mg==", "url": "https://github.com/apache/helix/pull/851#discussion_r394689942", "bodyText": "Same here.", "author": "jiajunwang", "createdAt": "2020-03-18T23:08:52Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "diffHunk": "@@ -247,7 +247,7 @@ public boolean verify() throws Exception {\n \n     int controllerHandlerNb = controller.getHandlers().size();\n     int particHandlerNb = participantManager.getHandlers().size();\n-    Assert.assertEquals(controllerHandlerNb, 7 + 2 * n,\n+    Assert.assertEquals(controllerHandlerNb, 8 + 2 * n,\n         \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDgwNw==", "url": "https://github.com/apache/helix/pull/851#discussion_r394690807", "bodyText": "When you have add, we should have a corresponding remove to prevent listener leakage.", "author": "jiajunwang", "createdAt": "2020-03-18T23:11:43Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1072,6 +1146,15 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n         }\n       }\n \n+      List<String> customizedStates = getEnabledCustomizedStates(manager);\n+      for (String customizedState: customizedStates) {\n+        for (String instance : curInstances.keySet()) {\n+          if (lastInstances == null || !lastInstances.containsKey(instance)) {\n+            addCustomizedStateListeners(manager, customizedState, instance);", "originalCommit": "919fbaff76d1de8c5bdc9307e1f49115a07e7168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66d43d6c808f4ad38284088e4595d6836429aea9", "url": "https://github.com/apache/helix/commit/66d43d6c808f4ad38284088e4595d6836429aea9", "message": "modify Helix controller", "committedDate": "2020-03-19T04:45:10Z", "type": "forcePushed"}, {"oid": "facd105ac15fda97865cd3dd2a465912c2fbaaac", "url": "https://github.com/apache/helix/commit/facd105ac15fda97865cd3dd2a465912c2fbaaac", "message": "modify Helix controller", "committedDate": "2020-03-19T04:58:12Z", "type": "commit"}, {"oid": "facd105ac15fda97865cd3dd2a465912c2fbaaac", "url": "https://github.com/apache/helix/commit/facd105ac15fda97865cd3dd2a465912c2fbaaac", "message": "modify Helix controller", "committedDate": "2020-03-19T04:58:12Z", "type": "forcePushed"}, {"oid": "07c10e8d8b64e4b50ed052a27f4ab2e438a20e3d", "url": "https://github.com/apache/helix/commit/07c10e8d8b64e4b50ed052a27f4ab2e438a20e3d", "message": "fix", "committedDate": "2020-03-19T05:36:36Z", "type": "commit"}, {"oid": "8960dddefc66e2167ef806697955678fe0c6afee", "url": "https://github.com/apache/helix/commit/8960dddefc66e2167ef806697955678fe0c6afee", "message": "change listener's logic", "committedDate": "2020-03-19T21:50:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MTAxOA==", "url": "https://github.com/apache/helix/pull/851#discussion_r395371018", "bodyText": "Prefetch ?", "author": "junkaixue", "createdAt": "2020-03-19T23:16:00Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -775,6 +811,38 @@ public void onStateChange(String instanceName, List<CurrentState> statesInfo,\n     logger.info(\"END: GenericClusterController.onStateChange()\");\n   }\n \n+  @Override", "originalCommit": "8960dddefc66e2167ef806697955678fe0c6afee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjEyOA==", "url": "https://github.com/apache/helix/pull/851#discussion_r395372128", "bodyText": "We subscribe on root of customized state for children change. Do we still need for each indivdual?", "author": "junkaixue", "createdAt": "2020-03-19T23:19:35Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -569,12 +570,19 @@ public void addCurrentStateChangeListener(org.apache.helix.CurrentStateChangeLis\n         });\n   }\n \n+  @Override\n+  public void addCustomizedStateRootChangeListener(CustomizedStateRootChangeListener listener,\n+      String instanceName) throws Exception {\n+    addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n+        ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n+  }\n+\n   @Override\n   public void addCustomizedStateChangeListener(CustomizedStateChangeListener listener,\n-      String instanceName, String customizedStateName) throws Exception {\n-    addListener(listener, new Builder(_clusterName).customizedStates(instanceName, customizedStateName),\n-        ChangeType.CUSTOMIZED_STATE, new EventType[] { EventType.NodeChildrenChanged\n-        });\n+      String instanceName, String customizedStateType) throws Exception {", "originalCommit": "8960dddefc66e2167ef806697955678fe0c6afee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NDc4NQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r395884785", "bodyText": "Yes, because under customized state, there're different types of customized states, and their children are different resources, and then customized state data. Only listen to one level of children is not enough.", "author": "zhangmeng916", "createdAt": "2020-03-20T20:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyNDcyNQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r396824725", "bodyText": "That would be one additional layer than the current callbackhandler infrastructure can support.\nI would like to have a try to improve it after this PR is in.", "author": "jiajunwang", "createdAt": "2020-03-23T23:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NjcyMQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r396866721", "bodyText": "Yeah, agree. @jiajunwang and I will look at how to merge the two layers later.", "author": "zhangmeng916", "createdAt": "2020-03-24T02:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjEyOA=="}], "type": "inlineReview"}, {"oid": "f47dea6a6fae857f7e64cd011834c007299959ca", "url": "https://github.com/apache/helix/commit/f47dea6a6fae857f7e64cd011834c007299959ca", "message": "add and modfiy tests", "committedDate": "2020-03-20T23:23:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1MjIwOQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r396652209", "bodyText": "I would prefer to call this method customizedStates, and the one for the specific state customizedState(without the s)", "author": "jiajunwang", "createdAt": "2020-03-23T18:05:43Z", "path": "helix-core/src/main/java/org/apache/helix/PropertyKey.java", "diffHunk": "@@ -474,6 +474,15 @@ public PropertyKey currentState(String instanceName, String sessionId, String re\n       }\n     }\n \n+    /**\n+     * Get a property key associated with the root of {@link CustomizedState} of an instance\n+     * @param instanceName\n+     * @return {@link PropertyKey}\n+     */\n+    public PropertyKey customizedStatesRoot(String instanceName) {", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NzQ4Mw==", "url": "https://github.com/apache/helix/pull/851#discussion_r396867483", "bodyText": "This might cause more confusion as there're many places that have customizedStates as variable name. I fear it actually makes the later modification (combine two layers) more difficult. Have a \"root\" name here can help us know exactly where need to be changed.", "author": "zhangmeng916", "createdAt": "2020-03-24T02:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1MjIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjcwNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r396796706", "bodyText": "Shall we do the deletion here as well?", "author": "jiajunwang", "createdAt": "2020-03-23T22:33:06Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -775,6 +811,39 @@ public void onStateChange(String instanceName, List<CurrentState> statesInfo,\n     logger.info(\"END: GenericClusterController.onStateChange()\");\n   }\n \n+  @Override\n+  @PreFetch(enabled = false)\n+  public void onCustomizedStateRootChange(String instanceName, NotificationContext changeContext) {\n+    logger.info(\"START: GenericClusterController.onCustomizedStateRootChange()\");\n+    notifyCaches(changeContext, ChangeType.CUSTOMIZED_STATE_ROOT);\n+    HelixManager manager = changeContext.getManager();\n+    List<String> customizedStateTypes =\n+        manager.getHelixDataAccessor().getChildNames(\n+        manager.getHelixDataAccessor().keyBuilder().customizedStatesRoot(instanceName));\n+\n+    for (String customizedState : customizedStateTypes) {", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NzI3NA==", "url": "https://github.com/apache/helix/pull/851#discussion_r396797274", "bodyText": "What is this?", "author": "jiajunwang", "createdAt": "2020-03-23T22:34:35Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1233,4 +1334,18 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n-}\n\\ No newline at end of file\n+\n+  private List<String> getEnabledCustomizedStates(HelixManager manager) {\n+    CustomizedStateConfig customizedStateConfig =\n+        manager.getConfigAccessor().getCustomizedStateConfig(_clusterName);\n+    if (customizedStateConfig != null) {\n+      return customizedStateConfig.getAggregationEnabledTypes();\n+    }\n+    return Collections.emptyList();\n+  }\n+\n+  private void addCustomizedStateListeners(HelixManager manager, String customizedState,", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NzQ1NA==", "url": "https://github.com/apache/helix/pull/851#discussion_r396797454", "bodyText": "It seems there is no usage of this private method.", "author": "jiajunwang", "createdAt": "2020-03-23T22:35:05Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1233,4 +1334,18 @@ private void initPipeline(Thread eventThread, BaseControllerDataProvider cache)\n     eventThread.setDaemon(true);\n     eventThread.start();\n   }\n-}\n\\ No newline at end of file\n+\n+  private List<String> getEnabledCustomizedStates(HelixManager manager) {", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5OTQ2Nw==", "url": "https://github.com/apache/helix/pull/851#discussion_r396799467", "bodyText": "We don't need to notify the cache, right?", "author": "jiajunwang", "createdAt": "2020-03-23T22:40:31Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -775,6 +811,39 @@ public void onStateChange(String instanceName, List<CurrentState> statesInfo,\n     logger.info(\"END: GenericClusterController.onStateChange()\");\n   }\n \n+  @Override\n+  @PreFetch(enabled = false)\n+  public void onCustomizedStateRootChange(String instanceName, NotificationContext changeContext) {\n+    logger.info(\"START: GenericClusterController.onCustomizedStateRootChange()\");\n+    notifyCaches(changeContext, ChangeType.CUSTOMIZED_STATE_ROOT);", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMDQ4MQ==", "url": "https://github.com/apache/helix/pull/851#discussion_r396800481", "bodyText": "This can also use the same listener class if you move the handling method to CustomizedStateChangeListener.", "author": "jiajunwang", "createdAt": "2020-03-23T22:43:03Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -259,45 +266,52 @@ private void parseListenerProperties() {\n \n     Class listenerClass = null;\n     switch (_changeType) {\n-    case IDEAL_STATE:\n-      listenerClass = IdealStateChangeListener.class;\n-      break;\n-    case INSTANCE_CONFIG:\n-      if (_listener instanceof ConfigChangeListener) {\n+      case IDEAL_STATE:\n+        listenerClass = IdealStateChangeListener.class;\n+        break;\n+      case INSTANCE_CONFIG:\n+        if (_listener instanceof ConfigChangeListener) {\n+          listenerClass = ConfigChangeListener.class;\n+        } else if (_listener instanceof InstanceConfigChangeListener) {\n+          listenerClass = InstanceConfigChangeListener.class;\n+        }\n+        break;\n+      case CLUSTER_CONFIG:\n+        listenerClass = ClusterConfigChangeListener.class;\n+        break;\n+      case RESOURCE_CONFIG:\n+        listenerClass = ResourceConfigChangeListener.class;\n+        break;\n+      case CUSTOMIZED_STATE_CONFIG:\n+        listenerClass = CustomizedStateConfigChangeListener.class;\n+        break;\n+      case CONFIG:\n         listenerClass = ConfigChangeListener.class;\n-      } else if (_listener instanceof InstanceConfigChangeListener) {\n-        listenerClass = InstanceConfigChangeListener.class;\n-      }\n-      break;\n-    case CLUSTER_CONFIG:\n-      listenerClass = ClusterConfigChangeListener.class;\n-      break;\n-    case RESOURCE_CONFIG:\n-      listenerClass = ResourceConfigChangeListener.class;\n-      break;\n-    case CONFIG:\n-      listenerClass = ConfigChangeListener.class;\n-      break;\n-    case LIVE_INSTANCE:\n-      listenerClass = LiveInstanceChangeListener.class;\n-      break;\n-    case CURRENT_STATE:\n-      listenerClass = CurrentStateChangeListener.class;\n-      ;\n-      break;\n-    case MESSAGE:\n-    case MESSAGES_CONTROLLER:\n-      listenerClass = MessageListener.class;\n-      break;\n-    case EXTERNAL_VIEW:\n-    case TARGET_EXTERNAL_VIEW:\n-      listenerClass = ExternalViewChangeListener.class;\n-      break;\n-    case CUSTOMIZED_VIEW:\n-      listenerClass = CustomizedViewChangeListener.class;\n-      break;\n-    case CONTROLLER:\n-      listenerClass = ControllerChangeListener.class;\n+        break;\n+      case LIVE_INSTANCE:\n+        listenerClass = LiveInstanceChangeListener.class;\n+        break;\n+      case CURRENT_STATE:\n+        listenerClass = CurrentStateChangeListener.class;\n+        break;\n+      case CUSTOMIZED_STATE_ROOT:\n+        listenerClass = CustomizedStateRootChangeListener.class;", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NjAyMA==", "url": "https://github.com/apache/helix/pull/851#discussion_r396866020", "bodyText": "I would prefer to keep them separate for clarity, and later when we get rid of the middle layer, we can delete the redundant one.", "author": "zhangmeng916", "createdAt": "2020-03-24T02:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNzY2NA==", "url": "https://github.com/apache/helix/pull/851#discussion_r397407664", "bodyText": "Yeah, I double checked later. It is not doable given the current infrastructure only take the first method it found.", "author": "jiajunwang", "createdAt": "2020-03-24T19:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMDQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyNDA3Nw==", "url": "https://github.com/apache/helix/pull/851#discussion_r396824077", "bodyText": "If prefetch, I guess we should get all the children for types and pass to the onCustomizedStateRootChange() method?", "author": "jiajunwang", "createdAt": "2020-03-23T23:41:34Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -424,6 +446,20 @@ public void invoke(NotificationContext changeContext) throws Exception {\n         List<CurrentState> currentStates = preFetch(_propertyKey);\n         currentStateChangeListener.onStateChange(instanceName, currentStates, changeContext);\n \n+      } else if (_changeType == CUSTOMIZED_STATE_ROOT) {\n+        CustomizedStateRootChangeListener customizedStateRootChangeListener =\n+            (CustomizedStateRootChangeListener) _listener;\n+        String instanceName = PropertyPathConfig.getInstanceNameFromPath(_path);\n+        customizedStateRootChangeListener.onCustomizedStateRootChange(instanceName,", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyNDkyNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r396824926", "bodyText": "Shall this method be passed a list of types in case anyone defined it with PreFetch == true?", "author": "jiajunwang", "createdAt": "2020-03-23T23:44:26Z", "path": "helix-core/src/main/java/org/apache/helix/api/listeners/CustomizedStateRootChangeListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.apache.helix.api.listeners;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.helix.NotificationContext;\n+\n+\n+/**\n+ * Interface to implement to respond to changes in the root path of customized state\n+ */\n+public interface CustomizedStateRootChangeListener {\n+\n+  /**\n+   * Invoked when root path customized state changes\n+   * @param instanceName name of the instance whose state changed\n+   * @param changeContext the change event and state\n+   */\n+  void onCustomizedStateRootChange(String instanceName, NotificationContext changeContext);", "originalCommit": "f47dea6a6fae857f7e64cd011834c007299959ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "09d234814601cd1a640ab8e8d8dc5af6ca4f355e", "url": "https://github.com/apache/helix/commit/09d234814601cd1a640ab8e8d8dc5af6ca4f355e", "message": "improve the controller", "committedDate": "2020-03-24T03:54:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwODEwNg==", "url": "https://github.com/apache/helix/pull/851#discussion_r397408106", "bodyText": "If prefetch enabled, then we read. Otherwise, we should pass an empty list.", "author": "jiajunwang", "createdAt": "2020-03-24T19:29:29Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -450,8 +451,10 @@ public void invoke(NotificationContext changeContext) throws Exception {\n         CustomizedStateRootChangeListener customizedStateRootChangeListener =\n             (CustomizedStateRootChangeListener) _listener;\n         String instanceName = PropertyPathConfig.getInstanceNameFromPath(_path);\n-        customizedStateRootChangeListener.onCustomizedStateRootChange(instanceName,\n-            changeContext);\n+        List<String> customizedStateTypes =", "originalCommit": "09d234814601cd1a640ab8e8d8dc5af6ca4f355e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTE0Nw==", "url": "https://github.com/apache/helix/pull/851#discussion_r397409147", "bodyText": "If we already lock on _lastSeenCustomizedStateTypes, do we still need to use AtomicReference?", "author": "jiajunwang", "createdAt": "2020-03-24T19:31:05Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -813,23 +817,36 @@ public void onStateChange(String instanceName, List<CurrentState> statesInfo,\n \n   @Override\n   @PreFetch(enabled = false)\n-  public void onCustomizedStateRootChange(String instanceName, NotificationContext changeContext) {\n+  public void onCustomizedStateRootChange(String instanceName, List<String> customizedStateTypes,\n+      NotificationContext changeContext) {\n     logger.info(\"START: GenericClusterController.onCustomizedStateRootChange()\");\n-    notifyCaches(changeContext, ChangeType.CUSTOMIZED_STATE_ROOT);\n     HelixManager manager = changeContext.getManager();\n-    List<String> customizedStateTypes =\n-        manager.getHelixDataAccessor().getChildNames(\n-        manager.getHelixDataAccessor().keyBuilder().customizedStatesRoot(instanceName));\n+    Builder keyBuilder = new Builder(manager.getClusterName());\n \n-    for (String customizedState : customizedStateTypes) {\n-      try {\n-        manager.addCustomizedStateChangeListener(this, instanceName, customizedState);\n-        logger.info(\n-            manager.getInstanceName() + \" added customized state listener for \" + instanceName\n-                + \", listener: \" + this);\n-      } catch (Exception e) {\n-        logger.error(\"Fail to add customized state listener for instance: \" + instanceName, e);\n+    synchronized (_lastSeenCustomizedStateTypes) {\n+      Set<String> lastSeenCustomizedStateTypes = _lastSeenCustomizedStateTypes.get();", "originalCommit": "09d234814601cd1a640ab8e8d8dc5af6ca4f355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNTUwNw==", "url": "https://github.com/apache/helix/pull/851#discussion_r398115507", "bodyText": "I saw a todo here:\n// TODO: remove the synchronization here once we move this update into dataCache.\nsynchronized (_lastSeenInstances) {\nI'm not sure whether there's any pending task for this that could also apply here, so I kept it.", "author": "zhangmeng916", "createdAt": "2020-03-25T19:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0NDAzMw==", "url": "https://github.com/apache/helix/pull/851#discussion_r398144033", "bodyText": "Then please also carry over the TODO part.", "author": "jiajunwang", "createdAt": "2020-03-25T20:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMTk5Mg==", "url": "https://github.com/apache/helix/pull/851#discussion_r397411992", "bodyText": "Note that if prefetch is false, you should not expect customizedStateTypes to be filled with data.\nThe code works here because you are not following the prefetch configuration in the callback handler logic.", "author": "jiajunwang", "createdAt": "2020-03-24T19:36:38Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -813,23 +817,36 @@ public void onStateChange(String instanceName, List<CurrentState> statesInfo,\n \n   @Override\n   @PreFetch(enabled = false)\n-  public void onCustomizedStateRootChange(String instanceName, NotificationContext changeContext) {\n+  public void onCustomizedStateRootChange(String instanceName, List<String> customizedStateTypes,\n+      NotificationContext changeContext) {\n     logger.info(\"START: GenericClusterController.onCustomizedStateRootChange()\");\n-    notifyCaches(changeContext, ChangeType.CUSTOMIZED_STATE_ROOT);\n     HelixManager manager = changeContext.getManager();\n-    List<String> customizedStateTypes =\n-        manager.getHelixDataAccessor().getChildNames(\n-        manager.getHelixDataAccessor().keyBuilder().customizedStatesRoot(instanceName));\n+    Builder keyBuilder = new Builder(manager.getClusterName());\n \n-    for (String customizedState : customizedStateTypes) {\n-      try {\n-        manager.addCustomizedStateChangeListener(this, instanceName, customizedState);\n-        logger.info(\n-            manager.getInstanceName() + \" added customized state listener for \" + instanceName\n-                + \", listener: \" + this);\n-      } catch (Exception e) {\n-        logger.error(\"Fail to add customized state listener for instance: \" + instanceName, e);\n+    synchronized (_lastSeenCustomizedStateTypes) {\n+      Set<String> lastSeenCustomizedStateTypes = _lastSeenCustomizedStateTypes.get();\n+      for (String customizedState : customizedStateTypes) {", "originalCommit": "09d234814601cd1a640ab8e8d8dc5af6ca4f355e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNDcyOA==", "url": "https://github.com/apache/helix/pull/851#discussion_r398114728", "bodyText": "I made the change. However, I feel we actually do not need the prefetch logic for this event. It's redundant now. Please let me know.", "author": "zhangmeng916", "createdAt": "2020-03-25T19:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMTk5Mg=="}], "type": "inlineReview"}, {"oid": "2cd6ed24abee6bf3d405593ba89917a10b69b268", "url": "https://github.com/apache/helix/commit/2cd6ed24abee6bf3d405593ba89917a10b69b268", "message": "fix comments", "committedDate": "2020-03-25T19:30:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MzgyMA==", "url": "https://github.com/apache/helix/pull/851#discussion_r398143820", "bodyText": "nit, you have the keyBuilder above.", "author": "jiajunwang", "createdAt": "2020-03-25T20:21:26Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -822,6 +822,11 @@ public void onCustomizedStateRootChange(String instanceName, List<String> custom\n     logger.info(\"START: GenericClusterController.onCustomizedStateRootChange()\");\n     HelixManager manager = changeContext.getManager();\n     Builder keyBuilder = new Builder(manager.getClusterName());\n+   if (customizedStateTypes.isEmpty()) {\n+     customizedStateTypes =\n+         manager.getHelixDataAccessor().getChildNames(\n+             manager.getHelixDataAccessor().keyBuilder().customizedStatesRoot(instanceName));", "originalCommit": "2cd6ed24abee6bf3d405593ba89917a10b69b268", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e75c5b29e20c861832fbdf8aa3007ade10740a2f", "url": "https://github.com/apache/helix/commit/e75c5b29e20c861832fbdf8aa3007ade10740a2f", "message": "final fix", "committedDate": "2020-03-25T20:51:11Z", "type": "commit"}]}