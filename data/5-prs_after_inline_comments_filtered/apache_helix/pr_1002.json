{"pr_number": 1002, "pr_title": "Use updaters to update read messages to ZK", "pr_createdAt": "2020-05-11T20:38:12Z", "pr_url": "https://github.com/apache/helix/pull/1002", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjI3Ng==", "url": "https://github.com/apache/helix/pull/1002#discussion_r423322276", "bodyText": "We should throw exception here? Or it throws exception we need to handle?", "author": "junkaixue", "createdAt": "2020-05-11T21:11:27Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +537,26 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            return null;", "originalCommit": "897a3e6cef8b73881ef750c5e18e6a12f2d3719c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MzYxOQ==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424083619", "bodyText": "I checked the code, \"return null\" won't cause an exception to be thrown. The zkclient won't set null to zk, and accessor will return a boolean[] for updateChildren, where it returns false for the node whose updater returns null. If you think throw exception is a better way to handle it, I can change it too.", "author": "mgao0", "createdAt": "2020-05-12T23:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzgxMg==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167812", "bodyText": "This is the assumption, if the current data does not exist, return null. I think it is fine.", "author": "jiajunwang", "createdAt": "2020-05-13T04:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjI3Ng=="}], "type": "inlineReview"}, {"oid": "9b5839f98371cb23f052e0093c7cbe381872571f", "url": "https://github.com/apache/helix/commit/9b5839f98371cb23f052e0093c7cbe381872571f", "message": "Use updater to update read message state", "committedDate": "2020-05-12T22:41:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Njk0NQ==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424166945", "bodyText": "Did you miss some files here? MessageQueueMonitor does not have such a constructor and it is not changed in this PR.", "author": "jiajunwang", "createdAt": "2020-05-13T04:33:33Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java", "diffHunk": "@@ -70,7 +70,7 @@ public DefaultMessagingService(HelixManager manager) {\n \n     _taskExecutor = new HelixTaskExecutor(\n         new ParticipantStatusMonitor(isParticipant, manager.getInstanceName()),\n-        new MessageQueueMonitor(manager.getClusterName(), manager.getInstanceName()));\n+        new MessageQueueMonitor(manager.getClusterName(), manager.getInstanceName()), manager);", "originalCommit": "9b5839f98371cb23f052e0093c7cbe381872571f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzE0NA==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167144", "bodyText": "In general, passing the manager to the monitor object would be an overkill. If it is really necessary, then we shall change the constructor to accept the manager only, since it includes all the information.", "author": "jiajunwang", "createdAt": "2020-05-13T04:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Njk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzQ1Mg==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167452", "bodyText": "Deprecate it?", "author": "jiajunwang", "createdAt": "2020-05-13T04:35:48Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -152,6 +158,11 @@ public HelixTaskExecutor(ParticipantStatusMonitor participantStatusMonitor) {\n \n   public HelixTaskExecutor(ParticipantStatusMonitor participantStatusMonitor,", "originalCommit": "9b5839f98371cb23f052e0093c7cbe381872571f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Nzk2NA==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424167964", "bodyText": "If you always return msg.getRecord() why not just set? You are not updating the currentData anyway.", "author": "jiajunwang", "createdAt": "2020-05-13T04:38:17Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +537,26 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            return null;\n+          }\n+          return msg.getRecord();", "originalCommit": "9b5839f98371cb23f052e0093c7cbe381872571f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NTA2Ng==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424655066", "bodyText": "I use the updater here to check if the current data exists, if not then don't set the new data. And if there is current data, then just set the new data, that's why I'm not updating currentData here.", "author": "mgao0", "createdAt": "2020-05-13T18:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Nzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NTYwMA==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424665600", "bodyText": "I see, could you please comment the reason here?", "author": "jiajunwang", "createdAt": "2020-05-13T19:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Nzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NjE3NA==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424666174", "bodyText": "Nevermind, I see you already noted it down above.", "author": "jiajunwang", "createdAt": "2020-05-13T19:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2Nzk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODMwMA==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424168300", "bodyText": "Why? The periodic refresh does not need to be done synchronized, I think.\nIf your timer action just adds the refresh event to the queue, there is no need to modify this.", "author": "jiajunwang", "createdAt": "2020-05-13T04:39:54Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -714,7 +741,7 @@ private void syncSessionToController(HelixManager manager) {\n \n   @Override\n   @PreFetch(enabled = false)\n-  public void onMessage(String instanceName, List<Message> messages,\n+  public synchronized void onMessage(String instanceName, List<Message> messages,", "originalCommit": "9b5839f98371cb23f052e0093c7cbe381872571f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTE4NA==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424169184", "bodyText": "Why do you need to call it here synchronously? I think it's simpler if we just put this event into the event queue.\nGiven this saying, this logic will be fitting better if it is in the HelixManager level. What I'm trying to propose if the HelixManger is initialized as a Participant, then we start this timer thread there. It just injects message event with a certain interval. Of course, if a real message event comes earlier, then we reset the timer.\nPut this logic in the executor does not make sense to me.", "author": "jiajunwang", "createdAt": "2020-05-13T04:43:59Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -1135,6 +1162,34 @@ private void removeMessageFromZK(HelixDataAccessor accessor, Message message,\n     }\n   }\n \n+  private void startMessageRefreshThread() {\n+    int periodicMessageRefreshInterval =\n+        HelixUtil.getSystemPropertyAsInt(SystemPropertyKeys.PERIODIC_MESSAGE_REFRESH_INTERVAL, -1);\n+    if (periodicMessageRefreshInterval > 0) {\n+      _messageRefreshTimer = new Timer();\n+      try {\n+        {\n+          if (_manager == null) {\n+            throw new HelixException(\"Periodic message refresh skipped. No helix manager is set.\");\n+          }\n+        }\n+        TimerTask messageRefreshTask = new TimerTask() {\n+          @Override\n+          public void run() {\n+            // Trigger read messages from zk\n+            NotificationContext changeContext = new NotificationContext(_manager);\n+            changeContext.setChangeType(HelixConstants.ChangeType.MESSAGE);\n+            onMessage(_manager.getInstanceName(), null, changeContext);", "originalCommit": "9b5839f98371cb23f052e0093c7cbe381872571f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7424f1b62e4465ead399aec50d479f6df28b1be", "url": "https://github.com/apache/helix/commit/a7424f1b62e4465ead399aec50d479f6df28b1be", "message": "Use updater to updated read message state", "committedDate": "2020-05-13T18:29:37Z", "type": "commit"}, {"oid": "a7424f1b62e4465ead399aec50d479f6df28b1be", "url": "https://github.com/apache/helix/commit/a7424f1b62e4465ead399aec50d479f6df28b1be", "message": "Use updater to updated read message state", "committedDate": "2020-05-13T18:29:37Z", "type": "forcePushed"}, {"oid": "6c42b351a811efaba043bc5ce97d94a296ff9b4f", "url": "https://github.com/apache/helix/commit/6c42b351a811efaba043bc5ce97d94a296ff9b4f", "message": "Add log when race condition happens", "committedDate": "2020-05-13T20:45:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMTUyNQ==", "url": "https://github.com/apache/helix/pull/1002#discussion_r424721525", "bodyText": "@jiajunwang I have added the logging. Can you please check if the message is good?", "author": "mgao0", "createdAt": "2020-05-13T20:47:37Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +527,27 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {\n+        @Override\n+        public ZNRecord update(ZNRecord currentData) {\n+          if (currentData == null) {\n+            LOG.warn(\"Message {} targets at {} has already been removed before it is set as READ on instance {}\", msg.getId(), msg.getTgtName(), instanceName);", "originalCommit": "6c42b351a811efaba043bc5ce97d94a296ff9b4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MzgwMw==", "url": "https://github.com/apache/helix/pull/1002#discussion_r426793803", "bodyText": "One optimization here maybe to create just one updater instead of one per each message. You can define the update logic in the updater, i.e, read the message and mark the read field as \"read\".", "author": "lei-xia", "createdAt": "2020-05-18T17:44:57Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -524,12 +527,27 @@ public void finishTask(MessageTask task) {\n   private void updateMessageState(List<Message> readMsgs, HelixDataAccessor accessor,\n       String instanceName) {\n     Builder keyBuilder = accessor.keyBuilder();\n-    List<PropertyKey> readMsgKeys = new ArrayList<>();\n+    List<String> readMsgPaths = new ArrayList<>();\n+    List<DataUpdater<ZNRecord>> updaters = new ArrayList<>();\n     for (Message msg : readMsgs) {\n-      readMsgKeys.add(msg.getKey(keyBuilder, instanceName));\n+      readMsgPaths.add(msg.getKey(keyBuilder, instanceName).getPath());\n       _knownMessageIds.add(msg.getId());\n+      /**\n+       * We use the updater to avoid race condition between writing message to zk as READ state and removing message after ST is done\n+       * If there is no message at this path, meaning the message is removed so we do not write the message\n+       */\n+      updaters.add(new DataUpdater<ZNRecord>() {", "originalCommit": "6c42b351a811efaba043bc5ce97d94a296ff9b4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}