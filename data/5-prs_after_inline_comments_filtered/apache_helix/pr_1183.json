{"pr_number": 1183, "pr_title": "Add HelixManager constructor with RealmAwareZkConnectionConfig", "pr_createdAt": "2020-07-28T23:28:54Z", "pr_url": "https://github.com/apache/helix/pull/1183", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461970673", "bodyText": "I think the plan is only allowing the property construct through HelixPropertyFactory. Shall we just make this constructor package-private? Also the other set methods.\n@zhangmeng916 Please correct me if this is not the plan.", "author": "jiajunwang", "createdAt": "2020-07-29T00:34:42Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated\n   public HelixManagerProperty(Properties helixManagerProperties, CloudConfig cloudConfig) {\n     _helixCloudProperty = new HelixCloudProperty(cloudConfig);\n     setVersion(helixManagerProperties.getProperty(SystemPropertyKeys.HELIX_MANAGER_VERSION));\n     setHealthReportLatency(\n         helixManagerProperties.getProperty(SystemPropertyKeys.PARTICIPANT_HEALTH_REPORT_LATENCY));\n   }\n \n+  public HelixManagerProperty() {", "originalCommit": "1a76cff42bb7020cdb7286b0f3871df0234c682f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MTY3NA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461981674", "bodyText": "I don't like that idea - it loses flexibility. What is the benefit of making this package-private?", "author": "narendly", "createdAt": "2020-07-29T01:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MjE4NQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461982185", "bodyText": "So all the config read/processing work is in HelixPropertyFactory. In this case, we won't have unexpected overwrite or misusage of the property object. The flexibility should be in HelixPropertyFactory only.", "author": "jiajunwang", "createdAt": "2020-07-29T01:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NjAxMw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462056013", "bodyText": "Then that in and of itself is a verbose way of doing things and sounds like a code smell. At that point, we should eliminate and just add a HelixProperty Builder that allows creation of HelixManagerProperty instance with final fields.\nIn my opinion, there's little value-add making that change here. What's the harm if the HelixManagerProperty instance is mutable?", "author": "narendly", "createdAt": "2020-07-29T05:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MTUxOQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462451519", "bodyText": "The original plan was to let users only get the manager property through getHelixManagerProperty with default value, and then allow them to make modification to override the fields in it. I remember there was some concern about users accidentally changing it. We can revisit the assumption though.", "author": "zhangmeng916", "createdAt": "2020-07-29T17:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0Mjk0NA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463242944", "bodyText": "Update: the factory and builder are all serving different purposes and might be useful to have in the future. We decided to keep both.", "author": "narendly", "createdAt": "2020-07-30T20:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDc2OQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461970769", "bodyText": "I agree with this change.", "author": "jiajunwang", "createdAt": "2020-07-29T00:35:00Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated", "originalCommit": "1a76cff42bb7020cdb7286b0f3871df0234c682f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzM3OA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461973378", "bodyText": "helixManagerProperty.RealmAwareZkConnectionConfig now contains zk connection information that possibly conflicts with zkAddress. This is dangerous.\nActually, I already see one potential bug in the method getMetadataStoreConnectionString. Which always returns the zkAddress only without checking the connectionConfig.\nPlease ensure we are only recording realmAwareZkConnectionConfig. Let's try to remove _zkAddress for good. Or at least update this field according to the realmAwareZkConnectionConfig input.\nOther configurations such as sessionTimeout are in the same situation.", "author": "jiajunwang", "createdAt": "2020-07-29T00:44:57Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -225,9 +226,24 @@ public ZKHelixManager(String clusterName, String instanceName, InstanceType inst\n       String zkAddress, HelixManagerStateListener stateListener,\n       HelixManagerProperty helixManagerProperty) {", "originalCommit": "1a76cff42bb7020cdb7286b0f3871df0234c682f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MjE0MA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461982140", "bodyText": "The documentation makes it clear that zkAddress given will be overriden if a valid ZkConnectionConfig is supplied.\nWe cannot remove zkAddress as that would break backward-compatibility. getMetadataStoreConnectionString should return the value of _zkAddress as it did before, otherwise, that would break backward-compatibility. Also I am not a fan of the idea of modifying this field in mid-flight because that might cause inconsistency. It is either set of not set, not something that should be updated or modified after-the-fact.", "author": "narendly", "createdAt": "2020-07-29T01:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MzU4OQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r461983589", "bodyText": "Ideally, we should deprecate this one but create a constructor with clean parameters list.\nBesides, a real concern is that if one passes a wrong or invalid zkAddress with this constructor (since he or she assumes it will be overridden by ZkConnectionConfig), then getMetadataStoreConnectionString will return this invalid value too. And the WAGED rebalancer won't work. So basically we don't have a good way of supporting WAGED when using multiple ZK Realm?\nA slightly less serious issue would be, most of our logs are using zkAddress, so it would be harder for us to debug.", "author": "jiajunwang", "createdAt": "2020-07-29T01:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NTA4OA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462055088", "bodyText": "@jiajunwang Then we could play it safe by adding a check so that we do not allow instantiation of a ZkHelixManager instance when both zkAddress and ZkConnectionConfig are set. How does that sound?", "author": "narendly", "createdAt": "2020-07-29T05:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MzM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNTA5MA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462435090", "bodyText": "The doc is not written in a coherent way.", "author": "zhangmeng916", "createdAt": "2020-07-29T16:36:56Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +68,38 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given. If a proper\n+   * ZkConnectionConfig. HelixManagerProperty given must contain a valid ZkConnectionConfig.", "originalCommit": "1a76cff42bb7020cdb7286b0f3871df0234c682f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1OTUxMQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462459511", "bodyText": "Thanks. Will fix!", "author": "narendly", "createdAt": "2020-07-29T17:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDA2NQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462440065", "bodyText": "This flexibility is a bit weird. I don't know whether users would follow it. Can we force them to have only one set up instead of using the override, like to validate the input.", "author": "zhangmeng916", "createdAt": "2020-07-29T16:45:22Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +68,38 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given. If a proper\n+   * ZkConnectionConfig. HelixManagerProperty given must contain a valid ZkConnectionConfig.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param stateListener\n+   * @param helixManagerProperty must contain a valid ZkConnectionConfig\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {\n+    return new ZKHelixManager(clusterName, instanceName, type, null, stateListener,\n+        helixManagerProperty);\n+  }\n+\n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given. If a proper\n+   * ZkConnectionConfig is given in HelixManagerProperty, zkAddr field will be overriden.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param zkAddr will be overriden if a valid ZkConnectionConfig is given in helixManagerProperty", "originalCommit": "1a76cff42bb7020cdb7286b0f3871df0234c682f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1OTgzMQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462459831", "bodyText": "Let us add a check for validation.", "author": "narendly", "createdAt": "2020-07-29T17:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MDA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NDg0NQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r462454845", "bodyText": "fyi, the reason that we have a couple of fields like \"version\", \"latency\" here is just to give an example of how to migrate system properties to Helix manager property. A \"TODO\" should have been added here for completeness in future work.", "author": "zhangmeng916", "createdAt": "2020-07-29T17:09:40Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerProperty.java", "diffHunk": "@@ -20,54 +20,82 @@\n  */\n \n import java.util.Properties;\n+\n import org.apache.helix.model.CloudConfig;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n- * Hold Helix manager properties. The manager properties further hold Helix cloud properties\n- * and some other properties specific for the manager.\n+ * HelixManagerProperty is a general property/config object used for HelixManager creation.\n  */\n public class HelixManagerProperty {\n   private static final Logger LOG = LoggerFactory.getLogger(HelixManagerProperty.class.getName());\n   private String _version;\n   private long _healthReportLatency;\n   private HelixCloudProperty _helixCloudProperty;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _zkConnectionConfig;\n+  private RealmAwareZkClient.RealmAwareZkClientConfig _zkClientConfig;\n \n   /**\n+   * ** Deprecated - HelixManagerProperty should be a general property/config object used for\n+   * HelixManager creation, not tied only to Properties or CloudConfig **\n+   *\n    * Initialize Helix manager property with default value\n    * @param helixManagerProperties helix manager related properties input as a map\n    * @param cloudConfig cloudConfig read from Zookeeper\n    */\n+  @Deprecated\n   public HelixManagerProperty(Properties helixManagerProperties, CloudConfig cloudConfig) {\n     _helixCloudProperty = new HelixCloudProperty(cloudConfig);\n     setVersion(helixManagerProperties.getProperty(SystemPropertyKeys.HELIX_MANAGER_VERSION));\n     setHealthReportLatency(", "originalCommit": "1a76cff42bb7020cdb7286b0f3871df0234c682f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b797f2b9e2d28b8ef55c349c22d2d3f22c8fdb0", "url": "https://github.com/apache/helix/commit/1b797f2b9e2d28b8ef55c349c22d2d3f22c8fdb0", "message": "Add HelixManager constructor that accepts RealmAwareZkConnectionConfig via HelixManagerProperty\n\nPreviously, there wasn't a way to use HelixManager with a custom routing data ZK connection config. This new way of constructing HelixManager allows users to use HelixManager with a custom RealmAwareZkConnectionConfig.", "committedDate": "2020-07-29T23:58:19Z", "type": "commit"}, {"oid": "10f34323428e220ad55d97aa74f5fa99d7bf2b07", "url": "https://github.com/apache/helix/commit/10f34323428e220ad55d97aa74f5fa99d7bf2b07", "message": "Add validation for zkAddress and ZkConnectionConfig in HelixMananger", "committedDate": "2020-07-29T23:58:19Z", "type": "commit"}, {"oid": "5f623770bd0bb8b5c39a6a3905f32451be8fac14", "url": "https://github.com/apache/helix/commit/5f623770bd0bb8b5c39a6a3905f32451be8fac14", "message": "Deprecate HelixPropertyFactory and add HelixManagerProperty.Builder", "committedDate": "2020-07-29T23:58:19Z", "type": "commit"}, {"oid": "b2284264c1efd9b8d0055fa3c1ffa0ad9cd4b38f", "url": "https://github.com/apache/helix/commit/b2284264c1efd9b8d0055fa3c1ffa0ad9cd4b38f", "message": "Update logging and handle zkAddress = null case in BucketDataAccessor", "committedDate": "2020-07-29T23:58:19Z", "type": "commit"}, {"oid": "778c8e41fc76860d8ee3db0c2118c705d4889209", "url": "https://github.com/apache/helix/commit/778c8e41fc76860d8ee3db0c2118c705d4889209", "message": "Add more logging", "committedDate": "2020-07-29T23:58:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463193523", "bodyText": "Can we get rid of this constructor by allowing setup zkAddr in the HelixManagerProperty or in the RealmAwareZkConnectionConfig?", "author": "jiajunwang", "createdAt": "2020-07-30T18:34:12Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -65,4 +64,39 @@ public static HelixManager getZKHelixManager(String clusterName, String instance\n     return new ZKHelixManager(clusterName, instanceName, type, zkAddr, stateListener);\n   }\n \n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * HelixManagerProperty given must contain a valid ZkConnectionConfig.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param stateListener\n+   * @param helixManagerProperty must contain a valid ZkConnectionConfig\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {\n+    return new ZKHelixManager(clusterName, instanceName, type, null, stateListener,\n+        helixManagerProperty);\n+  }\n+\n+  /**\n+   * Construct a ZkHelixManager using the HelixManagerProperty instance given.\n+   * NOTE: if both zkAddr and a valid ZkConnectionConfig are given in HelixManagerProperty, the\n+   * instantiation will fail - only one is required.\n+   * @param clusterName\n+   * @param instanceName\n+   * @param type\n+   * @param zkAddr\n+   * @param stateListener\n+   * @param helixManagerProperty\n+   * @return\n+   */\n+  public static HelixManager getZKHelixManager(String clusterName, String instanceName,\n+      InstanceType type, String zkAddr, HelixManagerStateListener stateListener,\n+      HelixManagerProperty helixManagerProperty) {", "originalCommit": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NjE2OA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463196168", "bodyText": "In addition, if we do so, then the HelixPropertyFactory can call the property builder to build a property even for the existing getHelixProperty API, right?\nSo it would be clean,\n\nCallers only call factory methods to get property.\nThe factory calls the property builder to get the new object.", "author": "jiajunwang", "createdAt": "2020-07-30T18:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTUzMA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463225530", "bodyText": "RealmAware zk config should not have a field called ZkAddress. That's against the design of RealmAware API.", "author": "narendly", "createdAt": "2020-07-30T19:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyODgwOA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463228808", "bodyText": "As to whether we should \"move\" zkAddress into helixManagerProperty - this idea is not ideal. It is what we have now and we should keep it in the constructor for backward-compatibility, and giving users multiple ways to input zkAddress will undoubtedly confuse users.\nSo I think the right thing to do here is to keep zkAddress in HelixManager/HelixManagerFactory as a parameter. It won't continue to increase getZkHelixManager() methods. All future configs that are needed to generate an instance of HelixManager could go into helixManagerProperty.", "author": "narendly", "createdAt": "2020-07-30T19:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTQyOA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463341428", "bodyText": "I think we shall not be blocked on this zkAddress argument. It can be discussed later.\nHow about this, to ensure we are not introducing more confusing, we don't this specific method. So for this class, either you give a zkAddress to get HM or you give a HelixManagerProperty to get the HM.", "author": "jiajunwang", "createdAt": "2020-07-31T00:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNDc2MQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r464514761", "bodyText": "Have you considered: what if a user needs to provide both zkAddr and helixManagerProperty?\nAt any rate, we could add this constructor later when we absolutely need to. For the sake of keeping this moving forward, I'll remove this getZkHelixManager method for now.", "author": "narendly", "createdAt": "2020-08-03T16:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyODI4Mg==", "url": "https://github.com/apache/helix/pull/1183#discussion_r465428282", "bodyText": "My thought is the same as what you described. We can always add it later if needed.", "author": "jiajunwang", "createdAt": "2020-08-05T02:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDU4MQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r465444581", "bodyText": "It seems this comment has been marked as resolved without finishing the code change. Are you still working on this change?", "author": "jiajunwang", "createdAt": "2020-08-05T03:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5NDE0Ng==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463194146", "bodyText": "extra *", "author": "jiajunwang", "createdAt": "2020-07-30T18:35:20Z", "path": "helix-core/src/main/java/org/apache/helix/HelixPropertyFactory.java", "diffHunk": "@@ -33,7 +33,7 @@\n import org.slf4j.LoggerFactory;\n \n \n-/**\n+/***", "originalCommit": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMjgxNg==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463202816", "bodyText": "As I pinged you in slack, if we can let RealmAwareZkConnectionConfig backward supports _zkAddress, then we can save tons of validations and branches code in this class.\nMoreover, we can simplify the code following this principle,\n\nnew APIs only accept RealmAwareZkConnectionConfig, we don't use zkAddress directly.\nfor older API, we create default RealmAwareZkConnectionConfig based on the zkAddress. So we don't have 2 possibilities in the internal code implementations.", "author": "jiajunwang", "createdAt": "2020-07-30T18:51:27Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -131,6 +131,7 @@\n   private int _reportLatency;\n \n   protected RealmAwareZkClient _zkclient;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;", "originalCommit": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNDcwMw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463224703", "bodyText": "That goes against the design of \"RealmAware\"ZkClient/configs. They are not tied to a single zk, and therefore we should not have a ZK field.", "author": "narendly", "createdAt": "2020-07-30T19:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwMjgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNTYwMA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463215600", "bodyText": "This description is not quite easy to follow.", "author": "zhangmeng916", "createdAt": "2020-07-30T19:16:17Z", "path": "helix-core/src/main/java/org/apache/helix/HelixManagerFactory.java", "diffHunk": "@@ -19,19 +19,18 @@\n  * under the License.\n  */\n \n-/**\n- * factory that creates cluster managers\n- *\n- * for zk-based cluster managers, the getZKXXX(..zkClient) that takes a zkClient parameter\n- *   are intended for session expiry test purpose\n- */\n import org.apache.helix.manager.zk.HelixManagerStateListener;\n import org.apache.helix.manager.zk.ZKHelixManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n  * Obtain one of a set of Helix cluster managers, organized by the backing system.\n+ * factory that creates cluster managers\n+ *  *\n+ *  * for zk-based cluster managers, the getZKXXX(..zkClient) that takes a zkClient parameter\n+ *  *   are intended for session expiry test purpose", "originalCommit": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMjkxMA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463222910", "bodyText": "@zhangmeng916\nObjectively, this comment is not very helpful to me - one tip when giving reviews & comments: either make your comment concrete by clarifying what's not easy to follow, or suggest an alternative?\nWith that said, I'm just going to remove the second block since it doesn't apply here. I think the second paragraph that starts with \"for zk-based...\" is a legacy comment that no longer applies to this class.", "author": "narendly", "createdAt": "2020-07-30T19:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNzMzNQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463217335", "bodyText": "Seems we will need to follow this patten:\nif (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED) || zkAddr == null)\nin a couple of different places. Is there a better way to represent? The first one is self explanatory, but the second one does not look straightforward. The doc for explanation is also in another file.", "author": "zhangmeng916", "createdAt": "2020-07-30T19:19:45Z", "path": "helix-core/src/main/java/org/apache/helix/HelixPropertyFactory.java", "diffHunk": "@@ -88,8 +88,9 @@ private CloudConfig getCloudConfig(String zkAddress, String clusterName) {\n     CloudConfig cloudConfig;\n     RealmAwareZkClient dedicatedZkClient = null;\n     try {\n-      if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED)) {\n-        // If the multi ZK config is enabled, use multi-realm mode with DedicatedZkClient\n+      if (Boolean.getBoolean(SystemPropertyKeys.MULTI_ZK_ENABLED) || zkAddress == null) {", "originalCommit": "fc7bf3da69a3dc8983b786a43ce2b272eaab0b06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNDI1OA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463224258", "bodyText": "I have the comment explaining the behavior. Please suggest if you have another way to achieve this otherwise.", "author": "narendly", "createdAt": "2020-07-30T19:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNzMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzOTA5Ng==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463239096", "bodyText": "Could you make it in a function? So for example, if later you have other conditions, you'll still need to add it in all related places?", "author": "zhangmeng916", "createdAt": "2020-07-30T20:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNzMzNQ=="}], "type": "inlineReview"}, {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "url": "https://github.com/apache/helix/commit/45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "message": "Address comments", "committedDate": "2020-07-30T20:04:21Z", "type": "commit"}, {"oid": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "url": "https://github.com/apache/helix/commit/45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "message": "Address comments", "committedDate": "2020-07-30T20:04:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTc3OQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463341779", "bodyText": "No need to remove final right?", "author": "jiajunwang", "createdAt": "2020-07-31T00:24:51Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -111,7 +111,7 @@\n   public static final int DEFAULT_MAX_DISCONNECT_THRESHOLD = 600; // Default to be a large number\n   private static final int DEFAULT_WAIT_CONNECTED_TIMEOUT = 10 * 1000;  // wait until connected for up to 10 seconds.\n \n-  protected final String _zkAddress;\n+  protected String _zkAddress;", "originalCommit": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNTUzNQ==", "url": "https://github.com/apache/helix/pull/1183#discussion_r464515535", "bodyText": "Now that we've changed the design for HelixManager constructors to always accept zkAddress, we could bring the final keyword back.", "author": "narendly", "createdAt": "2020-08-03T16:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQ3Mw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463342473", "bodyText": "Can we make this field final too? Since it is an input config.", "author": "jiajunwang", "createdAt": "2020-07-31T00:27:32Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -131,6 +131,7 @@\n   private int _reportLatency;\n \n   protected RealmAwareZkClient _zkclient;\n+  private RealmAwareZkClient.RealmAwareZkConnectionConfig _realmAwareZkConnectionConfig;", "originalCommit": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNjIwMw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r464516203", "bodyText": "It is not given via ZkHelixManager's constructor, meaning it could be null. It comes from HelixManagerProperty as an optional field. So we cannot make this final.", "author": "narendly", "createdAt": "2020-08-03T16:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MjQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzE0Mw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463343143", "bodyText": "Let's be strict here, I think even empty string is not allowed. The zkAddress shall be completely untouched.", "author": "jiajunwang", "createdAt": "2020-07-31T00:29:56Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1464,4 +1471,48 @@ private RealmAwareZkClient resolveZkClient(HelixZkClientFactory zkClientFactory,\n   private String buildShardingKey() {\n     return _clusterName.charAt(0) == '/' ? _clusterName : \"/\" + _clusterName;\n   }\n+\n+  /**\n+   * Check that not both zkAddress and ZkConnectionConfig are set.\n+   * If zkAddress is not given and ZkConnectionConfig is given, check that ZkConnectionConfig has\n+   * a ZK path sharding key set because HelixManager must work on single-realm mode.\n+   * @param zkAddress\n+   * @param helixManagerProperty\n+   */\n+  private void validateZkConnectionSettings(String zkAddress,\n+      HelixManagerProperty helixManagerProperty) {\n+    if (helixManagerProperty != null && helixManagerProperty.getZkConnectionConfig() != null) {\n+      if (zkAddress != null && !zkAddress.isEmpty()) {", "originalCommit": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzA3NA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r464517074", "bodyText": "Sure, removing && !zkAddress.isEmpty().", "author": "narendly", "createdAt": "2020-08-03T16:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzY2OA==", "url": "https://github.com/apache/helix/pull/1183#discussion_r463343668", "bodyText": "nit, I think just return \"None\" is enough. Since otherwise, the log string will look strange.", "author": "jiajunwang", "createdAt": "2020-07-31T00:31:57Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1464,4 +1471,48 @@ private RealmAwareZkClient resolveZkClient(HelixZkClientFactory zkClientFactory,\n   private String buildShardingKey() {\n     return _clusterName.charAt(0) == '/' ? _clusterName : \"/\" + _clusterName;\n   }\n+\n+  /**\n+   * Check that not both zkAddress and ZkConnectionConfig are set.\n+   * If zkAddress is not given and ZkConnectionConfig is given, check that ZkConnectionConfig has\n+   * a ZK path sharding key set because HelixManager must work on single-realm mode.\n+   * @param zkAddress\n+   * @param helixManagerProperty\n+   */\n+  private void validateZkConnectionSettings(String zkAddress,\n+      HelixManagerProperty helixManagerProperty) {\n+    if (helixManagerProperty != null && helixManagerProperty.getZkConnectionConfig() != null) {\n+      if (zkAddress != null && !zkAddress.isEmpty()) {\n+        throw new HelixException(\n+            \"ZKHelixManager: cannot have both ZkAddress and ZkConnectionConfig set!\");\n+      }\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig =\n+          helixManagerProperty.getZkConnectionConfig();\n+      if (connectionConfig.getZkRealmShardingKey() == null || connectionConfig\n+          .getZkRealmShardingKey().isEmpty()) {\n+        throw new HelixException(\n+            \"ZKHelixManager::ZK path sharding key must be set for ZKHelixManager! ZKHelixManager \"\n+                + \"is only available on single-realm mode.\");\n+      }\n+      _realmAwareZkConnectionConfig = connectionConfig;\n+    }\n+  }\n+\n+  /**\n+   * Resolve ZK connection info for logging purposes.\n+   * @return\n+   */\n+  private String getZkConnectionInfo() {\n+    String zkConnectionInfo;\n+    if (_zkAddress == null) {\n+      if (_helixManagerProperty != null && _helixManagerProperty.getZkConnectionConfig() != null) {\n+        zkConnectionInfo = _helixManagerProperty.getZkConnectionConfig().toString();\n+      } else {\n+        zkConnectionInfo = \"ZkAddr and ZkConnectionConfig are null!\";", "originalCommit": "45b26161bbf5fb733c5654ba8a33a19ffd3b5f59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzQ0Mw==", "url": "https://github.com/apache/helix/pull/1183#discussion_r464517443", "bodyText": "Changed to \"None\".", "author": "narendly", "createdAt": "2020-08-03T16:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzY2OA=="}], "type": "inlineReview"}, {"oid": "03215cd849683c5ec9a28325c0c64c042c8b2476", "url": "https://github.com/apache/helix/commit/03215cd849683c5ec9a28325c0c64c042c8b2476", "message": "Address comments", "committedDate": "2020-08-06T22:50:42Z", "type": "commit"}, {"oid": "a74b9022004337bc20d2e31e79cfef99f9260d20", "url": "https://github.com/apache/helix/commit/a74b9022004337bc20d2e31e79cfef99f9260d20", "message": "add null checks for zkAddress", "committedDate": "2020-08-06T23:05:08Z", "type": "commit"}]}