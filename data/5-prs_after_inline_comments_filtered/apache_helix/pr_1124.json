{"pr_number": 1124, "pr_title": "Add stale message map to improve P2P message rate", "pr_createdAt": "2020-06-26T20:46:31Z", "pr_url": "https://github.com/apache/helix/pull/1124", "timeline": [{"oid": "f797274abf4bf0057feedc4437bee5fcbd48fa51", "url": "https://github.com/apache/helix/commit/f797274abf4bf0057feedc4437bee5fcbd48fa51", "message": "improve p2p", "committedDate": "2020-07-11T19:03:40Z", "type": "forcePushed"}, {"oid": "ccd1ef2310e00699dd14d92869702634c9d370dc", "url": "https://github.com/apache/helix/commit/ccd1ef2310e00699dd14d92869702634c9d370dc", "message": "improve p2p", "committedDate": "2020-07-13T17:02:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExMjI5MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454112291", "bodyText": "nit, _ isTaskFrameworkPipeline", "author": "jiajunwang", "createdAt": "2020-07-14T05:35:04Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -56,11 +57,17 @@\n  */\n public class CurrentStateComputationStage extends AbstractBaseStage {\n   private static Logger LOG = LoggerFactory.getLogger(CurrentStateComputationStage.class);\n+  private boolean isTaskFrameworkPipeline = false;", "originalCommit": "ccd1ef2310e00699dd14d92869702634c9d370dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExODM2MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454118361", "bodyText": "This is never called? Or there are some other changes that you haven't pushed?", "author": "jiajunwang", "createdAt": "2020-07-14T05:53:43Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -544,6 +544,13 @@ public synchronized void setLiveInstances(List<LiveInstance> liveInstances) {\n     return _instanceMessagesCache.getMessages(instanceName);\n   }\n \n+  public void setStaleMessages(Map<String, Map<String, Message>> staleMessageMap) {", "originalCommit": "ccd1ef2310e00699dd14d92869702634c9d370dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyMDQ3Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454120472", "bodyText": "Yeah, it's never called. Originally I used it, but then I simplified the code, and it's not used any more. I've removed.", "author": "zhangmeng916", "createdAt": "2020-07-14T06:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDExODM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MTQxMA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454591410", "bodyText": "Not used?", "author": "jiajunwang", "createdAt": "2020-07-14T19:26:39Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/InstanceMessagesCache.java", "diffHunk": "@@ -151,6 +153,13 @@ public boolean refresh(HelixDataAccessor accessor, Map<String, LiveInstance> liv\n     return true;\n   }\n \n+  public Map<String, Map<String, Message>> getStaleMessageCache() {\n+    return _staleMessageCache;\n+  }\n+\n+  public void setStaleMessageCache(Map<String, Map<String, Message>> staleMessageMap) {", "originalCommit": "e15747386bf64389facaaa0dbc2e96dd6fa3456a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MjU5Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454592596", "bodyText": "If no set is called, how the items in the cache being updated?", "author": "jiajunwang", "createdAt": "2020-07-14T19:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0NzM4NA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454647384", "bodyText": "So it's used by this way:\nMap<String, Map<String, Message>> existingStaleMessages = cache.getStaleMessages();\ncurrentStateOutput.setStaleMessageMap(existingStaleMessages);\nSo when the currentStateOutput's stale message gets updated, the instance cache should also be updated, right? as it's just shallow copy. Let me know if you think differently.", "author": "zhangmeng916", "createdAt": "2020-07-14T21:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1OTkwNg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454659906", "bodyText": "This is not a good style. Better to make it explicitly updated.", "author": "jiajunwang", "createdAt": "2020-07-14T21:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MzIzOA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454593238", "bodyText": "Can we just call \"currentStateOutput.setStaleMessage(instanceName, message);\" in the caller so we don't need this method?", "author": "jiajunwang", "createdAt": "2020-07-14T19:30:04Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -236,6 +267,11 @@ private void updateCurrentStates(LiveInstance instance, Collection<CurrentState>\n     }\n   }\n \n+  private void setStaleMessage(CurrentStateOutput currentStateOutput, String instanceName,", "originalCommit": "e15747386bf64389facaaa0dbc2e96dd6fa3456a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMzk1OA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456003958", "bodyText": "Any comment?", "author": "jiajunwang", "createdAt": "2020-07-16T18:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NzIwNw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456157207", "bodyText": "currentStateOutput is already updated with latest stale messages, and accordingly, the cache is updated. So this method is actually redundant, and that's why I used to remove it. But I think from your previous comment, you'd like to an explicit set operation?", "author": "zhangmeng916", "createdAt": "2020-07-17T00:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1ODU4Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456158586", "bodyText": "You mean we can just remove it? The comment here is just saying that this private method is not necessary : )\nBut regarding the set, yes, I think we need explicit set. Implicit set always introduces bugs.", "author": "jiajunwang", "createdAt": "2020-07-17T00:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE2MjkwMg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456162902", "bodyText": "I mean this two lines:\nupdatePendingMessages(instance, messages.values(), relayMessages.values(), currentStateOutput,\nresourceMap);\ncache.setStaleMessages(currentStateOutput.getStaleMessageMap());\nThe second one is redundant. currentStateOutput is already updated in the function. But seems you think it's better to have the second one?", "author": "zhangmeng916", "createdAt": "2020-07-17T01:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTQ0Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456631442", "bodyText": "This is related to my other comment. In general, we shall not pass a modifiable map ref directly. Especially if the passed ref will be used to update. And given that you make a shallow copy instead of just pass the ref, then we will need both.", "author": "jiajunwang", "createdAt": "2020-07-17T19:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5MzIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NDEzNg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454594136", "bodyText": "Introducing _isTaskFrameworkPipeline to isStaleMessage is confusing. I would prefer do this,\n\"if (!_isTaskFrameworkPipeline && isStaleMessage(...)) {set stale message}\"", "author": "jiajunwang", "createdAt": "2020-07-14T19:31:44Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -191,6 +213,15 @@ private void updatePendingMessages(LiveInstance instance, Collection<Message> pe\n     }\n   }\n \n+  private boolean isStaleMessage(Message message, String currentState) {\n+    if (_isTaskFrameworkPipeline || currentState == null || message.getFromState() == null", "originalCommit": "e15747386bf64389facaaa0dbc2e96dd6fa3456a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjM4Mw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454596383", "bodyText": "nit, could be simpler by\nif (staleMessageMap != null && staleMessageMap.getOrDefault(msg.getTgtName(), EmptyMap()).remove(msg.getMsgId())) {\nif (staleMessageMap.get(msg.getTgtName()).size() == 0) {\nstaleMessageMap.remove(msg.getTgtName());\n}\n}", "author": "jiajunwang", "createdAt": "2020-07-14T19:36:13Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -344,6 +367,13 @@ private void schedulePendingMessageCleanUp(\n             if (accessor.removeProperty(msg.getKey(accessor.keyBuilder(), instanceName))) {\n               LogUtil.logInfo(logger, _eventId, String\n                   .format(\"Deleted message %s from instance %s\", msg.getMsgId(), instanceName));\n+              if (staleMessageMap != null && staleMessageMap.containsKey(msg.getTgtName())\n+                  && staleMessageMap.get(msg.getTgtName()).containsKey(msg.getMsgId())) {", "originalCommit": "32d10bd3fa6ffbfb33b0c2161de89d5d805e25e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0NzQ2MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454647461", "bodyText": "Please take a look at the updated one. I believe it's safe.", "author": "zhangmeng916", "createdAt": "2020-07-14T21:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MDQ1NA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454660454", "bodyText": "Both versions are safe. Just too verbose.", "author": "jiajunwang", "createdAt": "2020-07-14T21:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NjM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5Njc3Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454596772", "bodyText": "Can staleMsg be null?", "author": "jiajunwang", "createdAt": "2020-07-14T19:37:06Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -371,6 +401,14 @@ private boolean shouldCleanUpPendingMessage(Message pendingMsg, String currentSt\n     }\n   }\n \n+  private boolean shouldCleanUpStaleMessage(Message staleMsg, Long currentStateTransitionEndTime) {\n+    if (staleMsg == null) {", "originalCommit": "32d10bd3fa6ffbfb33b0c2161de89d5d805e25e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0MTc2Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454641766", "bodyText": "Normally it shouldn't. But I'm not 100% sure. I saw pendingMessage has similar check. Want to keep it for safe.", "author": "zhangmeng916", "createdAt": "2020-07-14T20:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MDg5MA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454660890", "bodyText": "I personally prefer to fail early. If it should not, then we should not check. The concern is that overprotected code will hide potential issues.\nFor example, if some bugs make it always null, then you will always get false as a result. But it would be better that we get an NPE, then the bug will be identified the first time.", "author": "jiajunwang", "createdAt": "2020-07-14T21:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5Njc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NzU2MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454597561", "bodyText": "I think staleMessageMap won't be null.", "author": "jiajunwang", "createdAt": "2020-07-14T19:38:41Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -344,6 +367,13 @@ private void schedulePendingMessageCleanUp(\n             if (accessor.removeProperty(msg.getKey(accessor.keyBuilder(), instanceName))) {\n               LogUtil.logInfo(logger, _eventId, String\n                   .format(\"Deleted message %s from instance %s\", msg.getMsgId(), instanceName));\n+              if (staleMessageMap != null && staleMessageMap.containsKey(msg.getTgtName())", "originalCommit": "32d10bd3fa6ffbfb33b0c2161de89d5d805e25e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMDMyNg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454630326", "bodyText": "I think it won't be. It's got instantiated in CurrentStateOutput", "author": "zhangmeng916", "createdAt": "2020-07-14T20:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5NzU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5ODQxOQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454598419", "bodyText": "Better to move this logic into the logAndAddToCleanUp() method too.\nThis will increase the parameters, but the code here would be much simpler.", "author": "jiajunwang", "createdAt": "2020-07-14T19:40:16Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -188,14 +192,24 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n \n         if (pendingMessage != null && shouldCleanUpPendingMessage(pendingMessage, currentState,\n             currentStateOutput.getEndTime(resourceName, partition, instanceName))) {\n-          LogUtil.logInfo(logger, _eventId, String.format(\n-              \"Adding pending message %s on instance %s to clean up. Msg: %s->%s, current state of resource %s:%s is %s\",\n-              pendingMessage.getMsgId(), instanceName, pendingMessage.getFromState(),\n-              pendingMessage.getToState(), resourceName, partition, currentState));\n-          if (!pendingMessagesToCleanUp.containsKey(instanceName)) {\n-            pendingMessagesToCleanUp.put(instanceName, new HashMap<String, Message>());\n+          String logMsg = String.format(", "originalCommit": "32d10bd3fa6ffbfb33b0c2161de89d5d805e25e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5OTI4NA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r454599284", "bodyText": "This also helps to reduce the duplicate code that logs the stale messages.", "author": "jiajunwang", "createdAt": "2020-07-14T19:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU5ODQxOQ=="}], "type": "inlineReview"}, {"oid": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "url": "https://github.com/apache/helix/commit/a9cf48034a99ec06323fbdfa186145b49ebab0c4", "message": "more fix", "committedDate": "2020-07-14T22:46:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NjAyOA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r455986028", "bodyText": "This may potentially increase our future work to split the pipeline. We need a better and more centralized way to tell the pipeline type. Otherwise, once we need more types it would be very messy. For example aggregation pipeline.\nPlease add a TODO here that we should avoid this hacky style.", "author": "jiajunwang", "createdAt": "2020-07-16T18:24:47Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -56,11 +57,17 @@\n  */\n public class CurrentStateComputationStage extends AbstractBaseStage {\n   private static Logger LOG = LoggerFactory.getLogger(CurrentStateComputationStage.class);\n+  private boolean _isTaskFrameworkPipeline = false;\n \n   @Override\n   public void process(ClusterEvent event) throws Exception {\n     _eventId = event.getEventId();\n     BaseControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n+\n+    if (cache instanceof WorkflowControllerDataProvider) {", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NzEzMQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r455997131", "bodyText": "nit, could you please move the existingStaleMessages so it adjacent to pendingMessages? That makes the params more organized.", "author": "jiajunwang", "createdAt": "2020-07-16T18:44:11Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -103,14 +114,20 @@ public void process(ClusterEvent event) throws Exception {\n   // update all pending messages to CurrentStateOutput.\n   private void updatePendingMessages(LiveInstance instance, Collection<Message> pendingMessages,\n       CurrentStateOutput currentStateOutput, Collection<Message> pendingRelayMessages,\n-      Map<String, Resource> resourceMap) {\n+      Map<String, Resource> resourceMap, Map<String, Map<String, Message>> existingStaleMessages) {", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NzI0MA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r455997240", "bodyText": "Maybe pendingRelayMessages as well : )", "author": "jiajunwang", "createdAt": "2020-07-16T18:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NzY0Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r455997646", "bodyText": "Please comment on what are the 2 strings in the map.", "author": "jiajunwang", "createdAt": "2020-07-16T18:45:06Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/InstanceMessagesCache.java", "diffHunk": "@@ -55,6 +55,8 @@\n   // <instance -> {<MessageId, Message>}>\n   private Map<String, Map<String, Message>> _messageCache = Maps.newHashMap();\n \n+  private Map<String, Map<String, Message>> _staleMessageCache = Maps.newHashMap();", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5OTU1OQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r455999559", "bodyText": "Since currentStateOutput already has existingStaleMessages, we don't need existingStaleMessages in the parameter list, right?", "author": "jiajunwang", "createdAt": "2020-07-16T18:48:42Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -77,15 +84,19 @@ public void process(ClusterEvent event) throws Exception {\n       String instanceName = instance.getInstanceName();\n       String instanceSessionId = instance.getEphemeralOwner();\n \n-      // update pending messages\n-      Map<String, Message> messages = cache.getMessages(instanceName);\n-      Map<String, Message> relayMessages = cache.getRelayMessages(instanceName);\n-      updatePendingMessages(instance, messages.values(), currentStateOutput, relayMessages.values(), resourceMap);\n-\n       // update current states.\n       Map<String, CurrentState> currentStateMap = cache.getCurrentState(instanceName,\n           instanceSessionId);\n       updateCurrentStates(instance, currentStateMap.values(), currentStateOutput, resourceMap);\n+\n+      Map<String, Map<String, Message>> existingStaleMessages = cache.getStaleMessages();\n+      currentStateOutput.setStaleMessageMap(existingStaleMessages);\n+      // update pending messages\n+      Map<String, Message> messages = cache.getMessages(instanceName);\n+      Map<String, Message> relayMessages = cache.getRelayMessages(instanceName);\n+      updatePendingMessages(instance, messages.values(), currentStateOutput,\n+          relayMessages.values(), resourceMap, existingStaleMessages);", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456000984", "bodyText": "What if we always calculate based on the current states and pending message lists? So don't update the cache, or don't have the cache even. Will that still work?", "author": "jiajunwang", "createdAt": "2020-07-16T18:51:21Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -77,15 +84,19 @@ public void process(ClusterEvent event) throws Exception {\n       String instanceName = instance.getInstanceName();\n       String instanceSessionId = instance.getEphemeralOwner();\n \n-      // update pending messages\n-      Map<String, Message> messages = cache.getMessages(instanceName);\n-      Map<String, Message> relayMessages = cache.getRelayMessages(instanceName);\n-      updatePendingMessages(instance, messages.values(), currentStateOutput, relayMessages.values(), resourceMap);\n-\n       // update current states.\n       Map<String, CurrentState> currentStateMap = cache.getCurrentState(instanceName,\n           instanceSessionId);\n       updateCurrentStates(instance, currentStateMap.values(), currentStateOutput, resourceMap);\n+\n+      Map<String, Map<String, Message>> existingStaleMessages = cache.getStaleMessages();\n+      currentStateOutput.setStaleMessageMap(existingStaleMessages);\n+      // update pending messages\n+      Map<String, Message> messages = cache.getMessages(instanceName);\n+      Map<String, Message> relayMessages = cache.getRelayMessages(instanceName);\n+      updatePendingMessages(instance, messages.values(), currentStateOutput,\n+          relayMessages.values(), resourceMap, existingStaleMessages);\n+      cache.setStaleMessages(currentStateOutput.getStaleMessageMap());", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMzI3Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456003272", "bodyText": "Is this cache designed for performance concern only?", "author": "jiajunwang", "createdAt": "2020-07-16T18:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NDQwNg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456054406", "bodyText": "The purpose of the cache is not for performance, but to keep all the historical stale messages. For example, assume a partition goes through M->S->M->S, and the first M->S message is not deleted even during the second M->S transition, if we only look at pending messages only, the first M->S message would be considered as non stale message, which causes confusion. With the cache, the stale messages would not be checked again.", "author": "zhangmeng916", "createdAt": "2020-07-16T20:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3Mjk3Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456072972", "bodyText": "Then we need to define how the historical stale messages records are removed from the cache, or we will need to reboot the controller periodically, right?\nAnother concern is that if leadership switch happen, then you will still lose track of the first M->S message. So this is not a complete fix.", "author": "jiajunwang", "createdAt": "2020-07-16T20:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDE2MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456154161", "bodyText": "The stale message is periodically cleaned up the same way as pending message, and the logic is in message generation phase.\nIf controller switch happens, the in memory data is just lost right? Then all stale messages are automatically cleaned up. Any concern?", "author": "zhangmeng916", "createdAt": "2020-07-17T00:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NjA3Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456156072", "bodyText": "I got the first point. Should be fine. Thanks for the explanation.\nRegarding the leadership switch, the new leader won't know your cached value. So it will treat the previous message ( \"first M->S message\") as not stale. In general, if you have any logic depends on the cache, then the leadership switch will be troublesome.", "author": "jiajunwang", "createdAt": "2020-07-17T00:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE2MjM0OA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456162348", "bodyText": "I see what you mean. I was talking about the case that message is gone from zk, but still in cache. So if the message hasn't been deleted from ZK yet, then yes, it'll stay there, and may cause confusion. I'm not sure whether this would cause a logic error. But I cannot think of other option unless we mark it in ZK.", "author": "zhangmeng916", "createdAt": "2020-07-17T01:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxMTIzMQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456211231", "bodyText": "I think about it, I don't think it'll cause any problem even when controller switches. The message won't be processed if the target state is not the ideal state. The only problem is that the code won't automatically remove it for us.", "author": "zhangmeng916", "createdAt": "2020-07-17T04:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMTYyNg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456001626", "bodyText": "To simplicity,\nexistingStaleMessages.getOrDefault(instanceName, Collection.EMPTY_MAP).containsKey(message.getMsgId())", "author": "jiajunwang", "createdAt": "2020-07-16T18:52:25Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -103,14 +114,20 @@ public void process(ClusterEvent event) throws Exception {\n   // update all pending messages to CurrentStateOutput.\n   private void updatePendingMessages(LiveInstance instance, Collection<Message> pendingMessages,\n       CurrentStateOutput currentStateOutput, Collection<Message> pendingRelayMessages,\n-      Map<String, Resource> resourceMap) {\n+      Map<String, Resource> resourceMap, Map<String, Map<String, Message>> existingStaleMessages) {\n     String instanceName = instance.getInstanceName();\n     String instanceSessionId = instance.getEphemeralOwner();\n \n     // update all pending messages\n     for (Message message : pendingMessages) {\n+      // ignore existing stale messages\n+      if (existingStaleMessages.containsKey(instanceName) && existingStaleMessages.get(instanceName)", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNTAzMw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456005033", "bodyText": "I would prefer \"_staleMessageMap = new HashMap<>(staleMessageMap)\" to avoid implicit reference.", "author": "jiajunwang", "createdAt": "2020-07-16T18:58:27Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateOutput.java", "diffHunk": "@@ -165,6 +168,19 @@ public void setPendingRelayMessage(String resourceName, Partition partition, Str\n     setStateMessage(resourceName, partition, instanceName, message, _pendingRelayMessageMap);\n   }\n \n+  public Map<String, Map<String, Message>> getStaleMessageMap() {\n+    return _staleMessageMap;\n+  }\n+\n+  public void setStaleMessageMap(Map<String, Map<String, Message>> staleMessageMap) {\n+    _staleMessageMap = staleMessageMap;", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NTYzMg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457755632", "bodyText": "The this one should also be changed?  cache.setStaleMessages(existingStaleMessages);\nIs this a rule we have?", "author": "zhangmeng916", "createdAt": "2020-07-20T23:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNTAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNTIzNw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456005237", "bodyText": "remove?", "author": "jiajunwang", "createdAt": "2020-07-16T18:58:49Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateOutput.java", "diffHunk": "@@ -194,6 +210,8 @@ public String getCurrentState(String resourceName, Partition partition, String i\n     return null;\n   }\n \n+", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNTg4Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456005882", "bodyText": "Is this check necessary? You checked that if staleMessageMap is null or not later, right?", "author": "jiajunwang", "createdAt": "2020-07-16T18:59:53Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateOutput.java", "diffHunk": "@@ -238,6 +256,16 @@ public Message getPendingMessage(String resourceName, Partition partition, Strin\n     return getStateMessage(resourceName, partition, instanceName, _pendingMessageMap);\n   }\n \n+  public Set<Message> getStaleMessages(String instanceName) {\n+    if (_staleMessageMap.containsKey(instanceName)) {", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNjk4MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456006981", "bodyText": "nit, maybe call it getStaleMessagesByInstance would help to differentiate it from getStaleMessageMap", "author": "jiajunwang", "createdAt": "2020-07-16T19:01:58Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateOutput.java", "diffHunk": "@@ -238,6 +256,16 @@ public Message getPendingMessage(String resourceName, Partition partition, Strin\n     return getStateMessage(resourceName, partition, instanceName, _pendingMessageMap);\n   }\n \n+  public Set<Message> getStaleMessages(String instanceName) {", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMDY3OQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456010679", "bodyText": "Takes me a while to figure it out. So we shall call it messagesToCleanup now, right?", "author": "jiajunwang", "createdAt": "2020-07-16T19:08:41Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -77,8 +81,9 @@ protected void processEvent(ClusterEvent event, ResourcesStateMap resourcesState\n     BaseControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n     Map<String, Resource> resourceMap =\n         event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n-    Map<String, Map<String, Message>> pendingMessagesToCleanUp = new HashMap<>();\n     CurrentStateOutput currentStateOutput = event.getAttribute(AttributeName.CURRENT_STATE.name());\n+\n+    Map<String, Map<String, Message>> pendingMessagesToCleanUp = new HashMap<>();", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMTExNQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456011115", "bodyText": "Same for the names of the other parameters that are pointing to this same map.", "author": "jiajunwang", "createdAt": "2020-07-16T19:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMDY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMjY1Nw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456012657", "bodyText": "So based on what I commented before, if we calculate from scratch in every pipeline, we won't need to maintain this map here, right? Or we will have some usage side this stage that we will need to update the content of the map at runtime?", "author": "jiajunwang", "createdAt": "2020-07-16T19:12:29Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -335,15 +362,21 @@ private void addGeneratedMessageToMap(final Message message,\n    */\n   private void schedulePendingMessageCleanUp(\n       final Map<String, Map<String, Message>> pendingMessagesToPurge, ExecutorService workerPool,\n-      final HelixDataAccessor accessor) {\n+      final HelixDataAccessor accessor, Map<String, Map<String, Message>> staleMessageMap) {\n     workerPool.submit(new Callable<Object>() {\n-      @Override public Object call() {\n+      @Override\n+      public Object call() {\n         for (Map.Entry<String, Map<String, Message>> entry : pendingMessagesToPurge.entrySet()) {\n           String instanceName = entry.getKey();\n           for (Message msg : entry.getValue().values()) {\n             if (accessor.removeProperty(msg.getKey(accessor.keyBuilder(), instanceName))) {\n               LogUtil.logInfo(logger, _eventId, String\n                   .format(\"Deleted message %s from instance %s\", msg.getMsgId(), instanceName));\n+              staleMessageMap.getOrDefault(msg.getTgtName(), Collections.emptyMap())", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE2MDQ4NA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456160484", "bodyText": "We do need for maintaining the history from previous pipelines. This could help better reduce stale messages.", "author": "zhangmeng916", "createdAt": "2020-07-17T01:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMjY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMzYwMA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r456013600", "bodyText": "nit, I think we can just put this logic to the caller. Since there is just one caller, and the logic is simple. The additional method layers will increase latency a little bit you know.", "author": "jiajunwang", "createdAt": "2020-07-16T19:14:14Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -371,6 +404,11 @@ private boolean shouldCleanUpPendingMessage(Message pendingMsg, String currentSt\n     }\n   }\n \n+  private boolean shouldCleanUpStaleMessage(Long currentStateTransitionEndTime) {", "originalCommit": "a9cf48034a99ec06323fbdfa186145b49ebab0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f317a5109008b69154d3a1448d7a9d01e6c09c9", "url": "https://github.com/apache/helix/commit/7f317a5109008b69154d3a1448d7a9d01e6c09c9", "message": "add more tests", "committedDate": "2020-07-20T00:18:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5MTEyMg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457691122", "bodyText": "I think you can do this when the _messageCache is refreshed in refresh() method.\n\nchanging values in a get method is not a good style. We want to be able to call get any time, but if it has a side effect then the callers need to review the detail of the method every time if they want to use it.\nThis is for cleaning up and prevent memory leakage only, so clean up when refresh is done at the beginning of the pipeline is enough, I think.", "author": "jiajunwang", "createdAt": "2020-07-20T21:04:57Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/InstanceMessagesCache.java", "diffHunk": "@@ -151,6 +155,25 @@ public boolean refresh(HelixDataAccessor accessor, Map<String, LiveInstance> liv\n     return true;\n   }\n \n+  // filter stale message cache by message cache to remove deleted messages\n+  public Map<String, Map<String, Message>> getStaleMessageCache() {\n+    for (String instanceName : _staleMessageCache.keySet()) {", "originalCommit": "7f317a5109008b69154d3a1448d7a9d01e6c09c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NDY2Mg==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457694662", "bodyText": "nit, can we follow the same style that how the other 2 maps are used here?\nBasically passing the existingStaleMessages to updatePendingMessages too instead of set to the currentStateOutput here?", "author": "jiajunwang", "createdAt": "2020-07-20T21:12:38Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -77,15 +87,20 @@ public void process(ClusterEvent event) throws Exception {\n       String instanceName = instance.getInstanceName();\n       String instanceSessionId = instance.getEphemeralOwner();\n \n-      // update pending messages\n-      Map<String, Message> messages = cache.getMessages(instanceName);\n-      Map<String, Message> relayMessages = cache.getRelayMessages(instanceName);\n-      updatePendingMessages(instance, messages.values(), currentStateOutput, relayMessages.values(), resourceMap);\n-\n       // update current states.\n       Map<String, CurrentState> currentStateMap = cache.getCurrentState(instanceName,\n           instanceSessionId);\n       updateCurrentStates(instance, currentStateMap.values(), currentStateOutput, resourceMap);\n+\n+      Map<String, Map<String, Message>> existingStaleMessages =", "originalCommit": "7f317a5109008b69154d3a1448d7a9d01e6c09c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NTA0Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457695046", "bodyText": "nit, cacheStaleMessages so all the updating message cache methods are named in the same way?", "author": "jiajunwang", "createdAt": "2020-07-20T21:13:25Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -544,6 +544,14 @@ public synchronized void setLiveInstances(List<LiveInstance> liveInstances) {\n     return _instanceMessagesCache.getMessages(instanceName);\n   }\n \n+  public Map<String, Map<String, Message>> getStaleMessages() {\n+    return _instanceMessagesCache.getStaleMessageCache();\n+  }\n+\n+  public void setStaleMessages(Map<String, Map<String, Message>> staleMessageMap) {", "originalCommit": "7f317a5109008b69154d3a1448d7a9d01e6c09c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MTY1OQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457751659", "bodyText": "Actually I found in InstanceMessageCache, more are named with cache, so I changed in that file.", "author": "zhangmeng916", "createdAt": "2020-07-20T23:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NzcwMw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457697703", "bodyText": "Now I have a better understanding of your change. And I think this cleanup is not necessary.\nThe stale message map in the current state output object is re-calculated from the cache every time. So as long as we clean the cache properly, we don't need to care about the output map. Please correct me if I missed anything.", "author": "jiajunwang", "createdAt": "2020-07-20T21:19:02Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -335,15 +363,21 @@ private void addGeneratedMessageToMap(final Message message,\n    */\n   private void schedulePendingMessageCleanUp(\n       final Map<String, Map<String, Message>> pendingMessagesToPurge, ExecutorService workerPool,\n-      final HelixDataAccessor accessor) {\n+      final HelixDataAccessor accessor, Map<String, Map<String, Message>> staleMessageMap) {\n     workerPool.submit(new Callable<Object>() {\n-      @Override public Object call() {\n+      @Override\n+      public Object call() {\n         for (Map.Entry<String, Map<String, Message>> entry : pendingMessagesToPurge.entrySet()) {\n           String instanceName = entry.getKey();\n           for (Message msg : entry.getValue().values()) {\n             if (accessor.removeProperty(msg.getKey(accessor.keyBuilder(), instanceName))) {\n               LogUtil.logInfo(logger, _eventId, String\n                   .format(\"Deleted message %s from instance %s\", msg.getMsgId(), instanceName));\n+              staleMessageMap.getOrDefault(msg.getTgtName(), Collections.emptyMap())", "originalCommit": "7f317a5109008b69154d3a1448d7a9d01e6c09c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MzE1Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r457753156", "bodyText": "yep, I agree. It'll go away later anyway. Shouldn't be a concern to leave it a little longer.", "author": "zhangmeng916", "createdAt": "2020-07-20T23:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5NzcwMw=="}], "type": "inlineReview"}, {"oid": "cc6470b7b5ed4f36702a0b035d49bbd7b2509f7e", "url": "https://github.com/apache/helix/commit/cc6470b7b5ed4f36702a0b035d49bbd7b2509f7e", "message": "fix comment", "committedDate": "2020-07-20T23:54:27Z", "type": "forcePushed"}, {"oid": "2bdbd30effb0d7e7fd8d64f0f49cbcc4ee2c1758", "url": "https://github.com/apache/helix/commit/2bdbd30effb0d7e7fd8d64f0f49cbcc4ee2c1758", "message": "fix comment", "committedDate": "2020-07-21T05:36:48Z", "type": "forcePushed"}, {"oid": "cf796450c2cb9dfbfce3b386c0c2baddd7765d29", "url": "https://github.com/apache/helix/commit/cf796450c2cb9dfbfce3b386c0c2baddd7765d29", "message": "simplify stale cache", "committedDate": "2020-07-21T17:58:39Z", "type": "forcePushed"}, {"oid": "fa3be9aa3c6faf93095ac37ac895ec43961e62ff", "url": "https://github.com/apache/helix/commit/fa3be9aa3c6faf93095ac37ac895ec43961e62ff", "message": "simplify stale cache", "committedDate": "2020-07-21T18:04:08Z", "type": "forcePushed"}, {"oid": "a045e7cc6192a94cbf8a9b113a45d24d6d8aa3a3", "url": "https://github.com/apache/helix/commit/a045e7cc6192a94cbf8a9b113a45d24d6d8aa3a3", "message": "simplify stale cache", "committedDate": "2020-07-21T18:08:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTkzNA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458299934", "bodyText": "Is it really possible that we have a null element in the return set?", "author": "jiajunwang", "createdAt": "2020-07-21T18:21:58Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -188,14 +196,21 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n \n         if (pendingMessage != null && shouldCleanUpPendingMessage(pendingMessage, currentState,\n             currentStateOutput.getEndTime(resourceName, partition, instanceName))) {\n-          LogUtil.logInfo(logger, _eventId, String.format(\n-              \"Adding pending message %s on instance %s to clean up. Msg: %s->%s, current state of resource %s:%s is %s\",\n-              pendingMessage.getMsgId(), instanceName, pendingMessage.getFromState(),\n-              pendingMessage.getToState(), resourceName, partition, currentState));\n-          if (!pendingMessagesToCleanUp.containsKey(instanceName)) {\n-            pendingMessagesToCleanUp.put(instanceName, new HashMap<String, Message>());\n+          logAndAddToCleanUp(messagesToCleanUp, pendingMessage, instanceName, resourceName,\n+              partition, currentState, PENDING_MESSAGE);\n+        }\n+\n+        for (Message staleMessage : staleMessages) {\n+          if (staleMessage == null) {\n+            logger.warn(\"Should not contain a stale message as null\");", "originalCommit": "a045e7cc6192a94cbf8a9b113a45d24d6d8aa3a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNDI2MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458934261", "bodyText": "Shouldn't be possible. Removed.", "author": "zhangmeng916", "createdAt": "2020-07-22T16:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMzkyNw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458303927", "bodyText": "We can call currentStateOutput.getStaleMessagesByInstance() to get the message set as the input, right?", "author": "jiajunwang", "createdAt": "2020-07-21T18:29:03Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -102,15 +114,22 @@ public void process(ClusterEvent event) throws Exception {\n \n   // update all pending messages to CurrentStateOutput.\n   private void updatePendingMessages(LiveInstance instance, Collection<Message> pendingMessages,\n-      CurrentStateOutput currentStateOutput, Collection<Message> pendingRelayMessages,\n-      Map<String, Resource> resourceMap) {\n+      Collection<Message> pendingRelayMessages,\n+      Map<String, Map<String, Message>> existingStaleMessages,\n+      CurrentStateOutput currentStateOutput, Map<String, Resource> resourceMap) {\n     String instanceName = instance.getInstanceName();\n     String instanceSessionId = instance.getEphemeralOwner();\n \n     // update all pending messages\n     for (Message message : pendingMessages) {\n+      // ignore existing stale messages\n+      if (existingStaleMessages.getOrDefault(instanceName, Collections.emptyMap())", "originalCommit": "a045e7cc6192a94cbf8a9b113a45d24d6d8aa3a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNDMxOQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458314319", "bodyText": "CurrentStateOutput currently does not have stale messages in it. It's not necessary because every class has access to cache.", "author": "zhangmeng916", "createdAt": "2020-07-21T18:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMzkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwNDM3MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458304371", "bodyText": "As mentioned above, I prefer this to be an explicit set method, addStaleMessage()", "author": "jiajunwang", "createdAt": "2020-07-21T18:29:48Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java", "diffHunk": "@@ -129,7 +148,14 @@ private void updatePendingMessages(LiveInstance instance, Collection<Message> pe\n         String partitionName = message.getPartitionName();\n         Partition partition = resource.getPartition(partitionName);\n         if (partition != null) {\n-          setMessageState(currentStateOutput, resourceName, partition, instanceName, message);\n+          String currentState = currentStateOutput.getCurrentState(resourceName, partition,\n+              instanceName);\n+          if (_isTaskFrameworkPipeline || !isStaleMessage(message, currentState)) {\n+            setMessageState(currentStateOutput, resourceName, partition, instanceName, message);\n+          } else {\n+            existingStaleMessages.putIfAbsent(instanceName, new HashMap<>());", "originalCommit": "a045e7cc6192a94cbf8a9b113a45d24d6d8aa3a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwNTA4Ng==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458305086", "bodyText": "So this one will return the map for modifying. I still don't like this implicit map/list ref for modifying purposes.\nAs I checked the current usage, I think you can replace it with 2 explicit modifying methods,\n\naddStaleMessage(instance, message)\nremoveStaleMessage(instance, message) -- or maybe always clean up when the cache is refreshed, so you don't even need this method?\n\nAs for supporting test, we can make it protected so only visible to test. Or keeping this method but always return shallow copy of the map only for the tests.", "author": "jiajunwang", "createdAt": "2020-07-21T18:31:00Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -544,6 +544,19 @@ public synchronized void setLiveInstances(List<LiveInstance> liveInstances) {\n     return _instanceMessagesCache.getMessages(instanceName);\n   }\n \n+  public Map<String, Map<String, Message>> getStaleMessages() {", "originalCommit": "a045e7cc6192a94cbf8a9b113a45d24d6d8aa3a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c2a265bd720369a15ae00904441d1b55abb48a0", "url": "https://github.com/apache/helix/commit/0c2a265bd720369a15ae00904441d1b55abb48a0", "message": "improve p2p", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "a520ff57606148a2e7f68ffe278db852e2ef85e5", "url": "https://github.com/apache/helix/commit/a520ff57606148a2e7f68ffe278db852e2ef85e5", "message": "fix comment", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "6e5346f753738b631ffb9ef14eb94653d03596a9", "url": "https://github.com/apache/helix/commit/6e5346f753738b631ffb9ef14eb94653d03596a9", "message": "remove unused method", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "994182b35253cfeaaa73bacc2a36c243a507d925", "url": "https://github.com/apache/helix/commit/994182b35253cfeaaa73bacc2a36c243a507d925", "message": "fix comment", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "e35ab95fc431c55bb99a087a114b81f46294c806", "url": "https://github.com/apache/helix/commit/e35ab95fc431c55bb99a087a114b81f46294c806", "message": "more fix", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "2169d88960e596832cad9603259dc9eed0303c12", "url": "https://github.com/apache/helix/commit/2169d88960e596832cad9603259dc9eed0303c12", "message": "more fix", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "fb02d81122ae4e86720dcdf53310471172900977", "url": "https://github.com/apache/helix/commit/fb02d81122ae4e86720dcdf53310471172900977", "message": "add shallow copy and deletion", "committedDate": "2020-07-22T16:51:57Z", "type": "commit"}, {"oid": "14eb8c93f192b3924fb0372767dd35f14ccd5457", "url": "https://github.com/apache/helix/commit/14eb8c93f192b3924fb0372767dd35f14ccd5457", "message": "add more tests", "committedDate": "2020-07-22T16:52:13Z", "type": "commit"}, {"oid": "fc9ed8561c41f4ee2a76431c72e1e290e7f03e6e", "url": "https://github.com/apache/helix/commit/fc9ed8561c41f4ee2a76431c72e1e290e7f03e6e", "message": "fix comment", "committedDate": "2020-07-22T16:52:17Z", "type": "commit"}, {"oid": "b069f7d6b92cd1851dd357f6e76eade514830027", "url": "https://github.com/apache/helix/commit/b069f7d6b92cd1851dd357f6e76eade514830027", "message": "simplify stale cache", "committedDate": "2020-07-22T16:52:17Z", "type": "commit"}, {"oid": "995e0561cb6e02e098155c5d66b0ae9a5c81d610", "url": "https://github.com/apache/helix/commit/995e0561cb6e02e098155c5d66b0ae9a5c81d610", "message": "add refresh logic for stale message", "committedDate": "2020-07-22T16:52:18Z", "type": "commit"}, {"oid": "c0c28ad73d80327d32ee4096f1da6099716f4580", "url": "https://github.com/apache/helix/commit/c0c28ad73d80327d32ee4096f1da6099716f4580", "message": "fix logic", "committedDate": "2020-07-22T16:52:18Z", "type": "commit"}, {"oid": "c0c28ad73d80327d32ee4096f1da6099716f4580", "url": "https://github.com/apache/helix/commit/c0c28ad73d80327d32ee4096f1da6099716f4580", "message": "fix logic", "committedDate": "2020-07-22T16:52:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NDA5MQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458984091", "bodyText": "Let's add a @VisibleForTesting tag here", "author": "jiajunwang", "createdAt": "2020-07-22T18:05:07Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -544,6 +544,27 @@ public synchronized void setLiveInstances(List<LiveInstance> liveInstances) {\n     return _instanceMessagesCache.getMessages(instanceName);\n   }\n \n+  /**\n+   * This function is supposed to be only used by testing purpose for safety. For \"get\" usage,\n+   * please use getStaleMessagesByInstance.\n+   */\n+  public Map<String, Map<String, Message>> getStaleMessages() {", "originalCommit": "c0c28ad73d80327d32ee4096f1da6099716f4580", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4ODczMA==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458988730", "bodyText": "I think we have this method mainly for supporting the test. Otherwise, we can have the getStaleMessageForInstance() here, right?\nMy suggestion is that we should not change our business logic in any way because of the test requirement. So I will say, let's move the getStaleMessageForInstance() implementation here. And leave this method as @VisibleForTesting only.", "author": "jiajunwang", "createdAt": "2020-07-22T18:13:13Z", "path": "helix-core/src/main/java/org/apache/helix/common/caches/InstanceMessagesCache.java", "diffHunk": "@@ -148,9 +152,20 @@ public boolean refresh(HelixDataAccessor accessor, Map<String, LiveInstance> liv\n     LOG.info(\n         \"END: InstanceMessagesCache.refresh(), {} of Messages read from ZooKeeper. took {} ms. \",\n         newMessageKeys.size(), (System.currentTimeMillis() - startTime));\n+\n+    refreshStaleMessageCache();\n     return true;\n   }\n \n+  public Map<String, Map<String, Message>> getStaleMessageCache() {", "originalCommit": "c0c28ad73d80327d32ee4096f1da6099716f4580", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4OTE5Nw==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458989197", "bodyText": "Or, if you can make the test to check InstanceMessagesCache only, that would be even better. But that is optional.", "author": "jiajunwang", "createdAt": "2020-07-22T18:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4ODczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5ODk5OQ==", "url": "https://github.com/apache/helix/pull/1124#discussion_r458998999", "bodyText": "Tried to only use getStaleMessageCache() in this class. But it's difficult to change the test to check this class directly.  So keep the function in two classes.", "author": "zhangmeng916", "createdAt": "2020-07-22T18:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4ODczMA=="}], "type": "inlineReview"}, {"oid": "b6074f9fd6d063efdce27a6f0a3e13f3ed7a7909", "url": "https://github.com/apache/helix/commit/b6074f9fd6d063efdce27a6f0a3e13f3ed7a7909", "message": "minor fix", "committedDate": "2020-07-22T18:31:35Z", "type": "commit"}]}