{"pr_number": 1078, "pr_title": "Do not ignore the baseline assignment when evaluating in PartitionMovementConstraint.", "pr_createdAt": "2020-06-09T18:31:10Z", "pr_url": "https://github.com/apache/helix/pull/1078", "timeline": [{"oid": "2e6f3a06d611226750efa9296ebe4fdacfebfca4", "url": "https://github.com/apache/helix/commit/2e6f3a06d611226750efa9296ebe4fdacfebfca4", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information.", "committedDate": "2020-06-10T07:15:44Z", "type": "forcePushed"}, {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c", "url": "https://github.com/apache/helix/commit/769aee1d492f689e7636456b1c5e675af9b0930c", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information.", "committedDate": "2020-06-15T23:49:39Z", "type": "commit"}, {"oid": "769aee1d492f689e7636456b1c5e675af9b0930c", "url": "https://github.com/apache/helix/commit/769aee1d492f689e7636456b1c5e675af9b0930c", "message": "Refer to the baseline assignment more when evaluating in PartitionMovementConstraint.\n\nThe current implementation of the PartitionMovementConstraint will ignore baseline assignment completely when the previous best possible assignment has the corresponding record.\nNote that since the previous best possible assignment might become invalid, the constraint should refer to the baseline assignment as a secondary option.\n\nThis change fix this issue by prioritizing the baseline and best possible assignments instead of just ignoring the important information.", "committedDate": "2020-06-15T23:49:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTc2Mw==", "url": "https://github.com/apache/helix/pull/1078#discussion_r440521763", "bodyText": "Maybe  block Comments here?", "author": "xyuanlu", "createdAt": "2020-06-16T00:40:16Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/constraints/PartitionMovementConstraint.java", "diffHunk": "@@ -40,31 +40,53 @@\n class PartitionMovementConstraint extends SoftConstraint {\n   private static final double MAX_SCORE = 1f;\n   private static final double MIN_SCORE = 0f;\n-  //TODO: these factors will be tuned based on user's preference\n-  // This factor indicates the default score that is evaluated if only partition allocation matches\n-  // (states are different).\n-  private static final double ALLOCATION_MATCH_FACTOR = 0.5;\n+  // The scale factor to adjust score when the proposed allocation partially matches the assignment\n+  // plan but will require a state transition (with partition movement).\n+  // TODO: these factors will be tuned based on user's preference\n+  private static final double STATE_TRANSITION_COST_FACTOR = 0.5;\n+  private static final double MOVEMENT_COST_FACTOR = 0.25;\n \n   PartitionMovementConstraint() {\n     super(MAX_SCORE, MIN_SCORE);\n   }\n \n+  /**\n+   * @return 1 if the proposed assignment completely matches the previous best possible assignment\n+   *         (or baseline assignment if the replica is newly added).\n+   *         STATE_TRANSITION_COST_FACTOR if the proposed assignment's allocation matches the\n+   *         previous Best Possible assignment (or baseline assignment if the replica is newly\n+   *         added) but state does not match.\n+   *         MOVEMENT_COST_FACTOR if the proposed assignment's allocation matches the baseline\n+   *         assignment only, but not matches the previous best possible assignment.\n+   *         0 if the proposed assignment is a pure random movement.\n+   */\n   @Override\n   protected double getAssignmentScore(AssignableNode node, AssignableReplica replica,\n       ClusterContext clusterContext) {\n-    // Prioritize the previous Best Possible assignment\n     Map<String, String> bestPossibleAssignment =\n         getStateMap(replica, clusterContext.getBestPossibleAssignment());\n-    if (!bestPossibleAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, bestPossibleAssignment);\n-    }\n-    // else, compare the baseline only if the best possible assignment does not contain the replica\n     Map<String, String> baselineAssignment =\n         getStateMap(replica, clusterContext.getBaselineAssignment());\n-    if (!baselineAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, baselineAssignment);\n+    String nodeName = node.getInstanceName();\n+    String state = replica.getReplicaState();\n+\n+    if (bestPossibleAssignment.isEmpty()) {\n+      // If bestPossibleAssignment of the replica is empty, indicating this is a new replica.", "originalCommit": "769aee1d492f689e7636456b1c5e675af9b0930c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NDM2Nw==", "url": "https://github.com/apache/helix/pull/1078#discussion_r441744367", "bodyText": "Thanks for the review, usually we use the block for the method/class java doc.\nThese are 2 lines of comments so it does not help much, IMHO.", "author": "jiajunwang", "createdAt": "2020-06-17T18:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMjI0Mg==", "url": "https://github.com/apache/helix/pull/1078#discussion_r440522242", "bodyText": "Maybe trailing Comments?", "author": "xyuanlu", "createdAt": "2020-06-16T00:41:55Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/constraints/PartitionMovementConstraint.java", "diffHunk": "@@ -77,15 +99,16 @@ protected double getAssignmentScore(AssignableNode node, AssignableReplica repli\n     return assignment.get(resourceName).getReplicaMap(new Partition(partitionName));\n   }\n \n-  private double calculateAssignmentScale(AssignableNode node, AssignableReplica replica,\n+  private double calculateAssignmentScore(String nodeName, String state,\n       Map<String, String> instanceToStateMap) {\n-    String instanceName = node.getInstanceName();\n-    if (!instanceToStateMap.containsKey(instanceName)) {\n-      return 0;\n-    } else {\n-      return (instanceToStateMap.get(instanceName).equals(replica.getReplicaState()) ? 1 :\n-          ALLOCATION_MATCH_FACTOR);\n+    if (instanceToStateMap.containsKey(nodeName)) {\n+      return state.equals(instanceToStateMap.get(nodeName)) ?\n+          // if state matches, no state transition required for the proposed assignment\n+          1 :", "originalCommit": "769aee1d492f689e7636456b1c5e675af9b0930c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e8380d626a9821c465a7a6e16e66c4d5fe9f7054", "url": "https://github.com/apache/helix/commit/e8380d626a9821c465a7a6e16e66c4d5fe9f7054", "message": "Format", "committedDate": "2020-06-17T18:25:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxODcxNA==", "url": "https://github.com/apache/helix/pull/1078#discussion_r442418714", "bodyText": "If I understand it correctly, when score == 0, should this be same as bestpossible is Empty()? Then score should be calculateAssignmentScore(nodeName, state, baselineAssignment);", "author": "junkaixue", "createdAt": "2020-06-18T18:23:05Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/constraints/PartitionMovementConstraint.java", "diffHunk": "@@ -40,31 +40,53 @@\n class PartitionMovementConstraint extends SoftConstraint {\n   private static final double MAX_SCORE = 1f;\n   private static final double MIN_SCORE = 0f;\n-  //TODO: these factors will be tuned based on user's preference\n-  // This factor indicates the default score that is evaluated if only partition allocation matches\n-  // (states are different).\n-  private static final double ALLOCATION_MATCH_FACTOR = 0.5;\n+  // The scale factor to adjust score when the proposed allocation partially matches the assignment\n+  // plan but will require a state transition (with partition movement).\n+  // TODO: these factors will be tuned based on user's preference\n+  private static final double STATE_TRANSITION_COST_FACTOR = 0.5;\n+  private static final double MOVEMENT_COST_FACTOR = 0.25;\n \n   PartitionMovementConstraint() {\n     super(MAX_SCORE, MIN_SCORE);\n   }\n \n+  /**\n+   * @return 1 if the proposed assignment completely matches the previous best possible assignment\n+   *         (or baseline assignment if the replica is newly added).\n+   *         STATE_TRANSITION_COST_FACTOR if the proposed assignment's allocation matches the\n+   *         previous Best Possible assignment (or baseline assignment if the replica is newly\n+   *         added) but state does not match.\n+   *         MOVEMENT_COST_FACTOR if the proposed assignment's allocation matches the baseline\n+   *         assignment only, but not matches the previous best possible assignment.\n+   *         0 if the proposed assignment is a pure random movement.\n+   */\n   @Override\n   protected double getAssignmentScore(AssignableNode node, AssignableReplica replica,\n       ClusterContext clusterContext) {\n-    // Prioritize the previous Best Possible assignment\n     Map<String, String> bestPossibleAssignment =\n         getStateMap(replica, clusterContext.getBestPossibleAssignment());\n-    if (!bestPossibleAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, bestPossibleAssignment);\n-    }\n-    // else, compare the baseline only if the best possible assignment does not contain the replica\n     Map<String, String> baselineAssignment =\n         getStateMap(replica, clusterContext.getBaselineAssignment());\n-    if (!baselineAssignment.isEmpty()) {\n-      return calculateAssignmentScale(node, replica, baselineAssignment);\n+    String nodeName = node.getInstanceName();\n+    String state = replica.getReplicaState();\n+\n+    if (bestPossibleAssignment.isEmpty()) {\n+      // If bestPossibleAssignment of the replica is empty, indicating this is a new replica.\n+      // Then the baseline is the only reference.\n+      return calculateAssignmentScore(nodeName, state, baselineAssignment);\n+    } else {\n+      // Else, for minimizing partition movements or state transitions, prioritize the proposed\n+      // assignment that matches the previous Best Possible assignment.\n+      double score = calculateAssignmentScore(nodeName, state, bestPossibleAssignment);\n+      // If no Best Possible assignment matches, check the baseline assignment.\n+      if (score == 0 && baselineAssignment.containsKey(nodeName)) {", "originalCommit": "e8380d626a9821c465a7a6e16e66c4d5fe9f7054", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2NjcxNQ==", "url": "https://github.com/apache/helix/pull/1078#discussion_r442466715", "bodyText": "Not exactly, if the bestpossible does not contain this node with the replica (but it is not empty), then it will still be a zero score.\nThe first if condition is for the new partitions. Where there is no bestpossible at all. So no other nodes will compete for the nodes in the baseline regarding LESS_MOVEMENT. In this case, we want to specially handle to enforce the LESS_MOVEMENT constraint.\nThe second else condition is for the existing partitions. In which a partition may exist in both assignments. So we need to prioritize the best possible (because it is less cost regarding movement).", "author": "jiajunwang", "createdAt": "2020-06-18T19:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxODcxNA=="}], "type": "inlineReview"}]}