{"pr_number": 712, "pr_title": "Upgrade ZkTestBase with multi-ZK support in helix-core", "pr_createdAt": "2020-02-01T01:27:14Z", "pr_url": "https://github.com/apache/helix/pull/712", "timeline": [{"oid": "3b4677f8f4f866c359ff7d8f97fe15b153f6cd36", "url": "https://github.com/apache/helix/commit/3b4677f8f4f866c359ff7d8f97fe15b153f6cd36", "message": "Upgrade ZkTestBase with multi-ZK support\n\nPrior to instrumenting Helix APIs and components so that they would be aware of multiple ZKs for horizontal scalability, we need to have a way to run all integration tests involving ZooKeeper in different environments: one with a single ZK and another with multiple ZKs.\nChangelist:\n1. Implement the logic in ZkTestBase so that in conjunction with maven-surefire-plugin configs, there will be two executions of the test suite", "committedDate": "2020-02-01T01:23:02Z", "type": "commit"}, {"oid": "b322b1bff7dff0f49b020df63169d5cab893b874", "url": "https://github.com/apache/helix/commit/b322b1bff7dff0f49b020df63169d5cab893b874", "message": "Change print statement", "committedDate": "2020-02-01T01:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODk1MQ==", "url": "https://github.com/apache/helix/pull/712#discussion_r373748951", "bodyText": "Nit: could use values() to close without get() and checking every time.", "author": "NealSun96", "createdAt": "2020-02-01T01:50:21Z", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -154,8 +215,29 @@ public void afterSuite() throws IOException {\n       }\n     }\n \n+    // Close ZK-related resources\n+    _gSetupTool.close();\n+    _baseAccessor.close();\n     _gZkClient.close();\n     TestHelper.stopZkServer(_zkServer);\n+\n+    // If there are multiple ZooKeepers, close them all\n+    if (System.getProperty(MULTI_ZK_PROPERTY_KEY) != null) {\n+      for (int i = 0; i < _numZk; i++) {\n+        if (_baseDataAccessorMap != null && _baseDataAccessorMap.containsKey(i)) {\n+          _baseDataAccessorMap.get(i).close();\n+        }\n+        if (_clusterSetupMap != null && _clusterSetupMap.containsKey(i)) {\n+          _clusterSetupMap.get(i).close();\n+        }\n+        if (_helixZkClientMap != null && _helixZkClientMap.containsKey(i)) {\n+          _helixZkClientMap.get(i).close();\n+        }\n+        if (_zkServerMap != null && _zkServerMap.containsKey(i)) {\n+          TestHelper.stopZkServer(_zkServerMap.get(i));\n+        }", "originalCommit": "b322b1bff7dff0f49b020df63169d5cab893b874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1Mzg0OQ==", "url": "https://github.com/apache/helix/pull/712#discussion_r373753849", "bodyText": "Null checks are necessary, and your point about .values() is a matter of style and I think either way is fine.", "author": "narendly", "createdAt": "2020-02-01T03:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0ODk1MQ=="}], "type": "inlineReview"}, {"oid": "8f62c0edf335c2b4e685d3ade046039e07dca901", "url": "https://github.com/apache/helix/commit/8f62c0edf335c2b4e685d3ade046039e07dca901", "message": "Check whether its true", "committedDate": "2020-02-01T03:58:29Z", "type": "commit"}, {"oid": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "url": "https://github.com/apache/helix/commit/e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "message": "better validation of configs", "committedDate": "2020-02-01T07:34:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDAwMA==", "url": "https://github.com/apache/helix/pull/712#discussion_r374844000", "bodyText": "Instead of multiple lists, can we have a class like a tuple in Python to hold the related objects? That would be much easier to use comparing if I need to remember the index in every test case.", "author": "jiajunwang", "createdAt": "2020-02-04T18:26:05Z", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";\n+  private static final String ZK_PREFIX = \"localhost:\";\n+  private static final int ZK_START_PORT = 2183;\n   protected static final String CLUSTER_PREFIX = \"CLUSTER\";\n   protected static final String CONTROLLER_CLUSTER_PREFIX = \"CONTROLLER_CLUSTER\";\n   protected final String CONTROLLER_PREFIX = \"controller\";\n   protected final String PARTICIPANT_PREFIX = \"localhost\";\n   private static final long MANUAL_GC_PAUSE = 4000L;\n \n+  /*\n+   * Multiple ZK references\n+   */\n+  protected int _numZk = 0;", "originalCommit": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2Njg4NA==", "url": "https://github.com/apache/helix/pull/712#discussion_r374866884", "bodyText": "Discussed offline.\nMaking this\n\nprotected Map<String, ZkServer> _zkServerMap = new HashMap<>();\nprotected Map<String, HelixZkClient> _helixZkClientMap = new HashMap<>();\nprotected Map<String, ClusterSetup> _clusterSetupMap = new HashMap<>();\nprotected Map<String, BaseDataAccessor> _baseDataAccessorMap = new HashMap<>();\nfor the time being.", "author": "narendly", "createdAt": "2020-02-04T19:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDE4NQ==", "url": "https://github.com/apache/helix/pull/712#discussion_r374844185", "bodyText": "nit: ZK_ADD = ZK_PREFIX + ZK_START_PORT ?", "author": "jiajunwang", "createdAt": "2020-02-04T18:26:28Z", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -107,12 +109,23 @@\n   private Map<String, Map<String, HelixZkClient>> _liveInstanceOwners = new HashMap<>();\n \n   public static final String ZK_ADDR = \"localhost:2183\";", "originalCommit": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2NjYzNA==", "url": "https://github.com/apache/helix/pull/712#discussion_r374866634", "bodyText": "Changed.", "author": "narendly", "createdAt": "2020-02-04T19:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NTI2OQ==", "url": "https://github.com/apache/helix/pull/712#discussion_r374845269", "bodyText": "These are duplicate code. Can we just repeatedly call startZooKeeper() and return the tuple that I mentioned above for recording?", "author": "jiajunwang", "createdAt": "2020-02-04T18:28:30Z", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -123,8 +136,45 @@ public void beforeSuite() throws Exception {\n     System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\n     System.setProperty(SystemPropertyKeys.CONTROLLER_MESSAGE_PURGE_DELAY, \"3000\");\n \n+    // Start an in-memory ZooKeeper\n     _zkServer = TestHelper.startZkServer(ZK_ADDR);\n     AssertJUnit.assertNotNull(_zkServer);\n+    HelixZkClient.ZkClientConfig clientConfig = new HelixZkClient.ZkClientConfig();\n+    clientConfig.setZkSerializer(new ZNRecordSerializer());\n+    _gZkClient = DedicatedZkClientFactory.getInstance()\n+        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR), clientConfig);\n+    _gSetupTool = new ClusterSetup(_gZkClient);\n+    _baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n+    _numZk++; // Now we have 1 ZK\n+\n+    // If multi-ZooKeeper is enabled, start more ZKs\n+    String multiZkConfig = System.getProperty(MULTI_ZK_PROPERTY_KEY);\n+    if (multiZkConfig != null && multiZkConfig.equalsIgnoreCase(Boolean.TRUE.toString())) {\n+      String numZkFromConfig = System.getProperty(NUM_ZK_PROPERTY_KEY);\n+      if (numZkFromConfig != null) {\n+        try {\n+          int numZkFromConfigInt = Integer.parseInt(numZkFromConfig);\n+          // Initialize maps to track multiple ZK servers\n+          // Initialize maps to track multiple ZK servers\n+          _zkServerMap = new HashMap<>();\n+          _helixZkClientMap = new HashMap<>();\n+          _clusterSetupMap = new HashMap<>();\n+          _baseDataAccessorMap = new HashMap<>();\n+          _zkServerMap.put(0, _zkServer);\n+          _helixZkClientMap.put(0, _gZkClient);\n+          _clusterSetupMap.put(0, _gSetupTool);\n+          _baseDataAccessorMap.put(0, _baseAccessor);", "originalCommit": "e23db2c6de12a89d4c2acddca5aede6fecfb0c9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2Njk5OA==", "url": "https://github.com/apache/helix/pull/712#discussion_r374866998", "bodyText": "Removed duplicate code", "author": "narendly", "createdAt": "2020-02-04T19:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NTI2OQ=="}], "type": "inlineReview"}, {"oid": "1552f440ff13a2726bf66ffabf5068a9d1c81c8b", "url": "https://github.com/apache/helix/commit/1552f440ff13a2726bf66ffabf5068a9d1c81c8b", "message": "Remove duplicate code", "committedDate": "2020-02-04T19:19:02Z", "type": "commit"}, {"oid": "5bf2029005d0450167ad89739c0dd58841e4b721", "url": "https://github.com/apache/helix/commit/5bf2029005d0450167ad89739c0dd58841e4b721", "message": "fix bugs", "committedDate": "2020-02-04T19:50:50Z", "type": "commit"}]}