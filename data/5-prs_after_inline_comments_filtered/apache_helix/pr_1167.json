{"pr_number": 1167, "pr_title": "Change getBaselineAasignment/getBestPossibleAssignment to account for partial-WAGED clusters", "pr_createdAt": "2020-07-22T17:14:23Z", "pr_url": "https://github.com/apache/helix/pull/1167", "timeline": [{"oid": "541351e5790b2279914aa078d72c25d0c16c62f5", "url": "https://github.com/apache/helix/commit/541351e5790b2279914aa078d72c25d0c16c62f5", "message": "initial change", "committedDate": "2020-07-21T20:56:44Z", "type": "commit"}, {"oid": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "url": "https://github.com/apache/helix/commit/6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "message": "Make modifiable", "committedDate": "2020-07-21T21:57:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1NTkyMg==", "url": "https://github.com/apache/helix/pull/1167#discussion_r458955922", "bodyText": "The current baseline assignment record does not contain all resources assignment....", "author": "jiajunwang", "createdAt": "2020-07-22T17:19:10Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {\n       LOG.warn(\"The current baseline assignment record is empty. Use the current states instead.\");", "originalCommit": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1Njc3Mw==", "url": "https://github.com/apache/helix/pull/1167#discussion_r458956773", "bodyText": "containsAll() will iterate through resources anyway. So just do the loop without check here.", "author": "jiajunwang", "createdAt": "2020-07-22T17:20:35Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {", "originalCommit": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1NzAyNQ==", "url": "https://github.com/apache/helix/pull/1167#discussion_r458957025", "bodyText": "currentBaseline.putIfAbsent() ?", "author": "jiajunwang", "createdAt": "2020-07-22T17:20:57Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {\n       LOG.warn(\"The current baseline assignment record is empty. Use the current states instead.\");\n-      currentBaseline = currentStateOutput.getAssignment(resources);\n+      for (Map.Entry<String, ResourceAssignment> entry : currentStateOutput.getAssignment(resources)\n+          .entrySet()) {\n+        if (resources.contains(entry.getKey()) && !currentBaseline.containsKey(entry.getKey())) {", "originalCommit": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1ODc2MA==", "url": "https://github.com/apache/helix/pull/1167#discussion_r458958760", "bodyText": "getAssignment() is very expensive, let's do it for the missing resources only. If you do it for all resources, the algorithm performance would be impacted.", "author": "jiajunwang", "createdAt": "2020-07-22T17:23:51Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/waged/WagedRebalancer.java", "diffHunk": "@@ -643,23 +643,28 @@ private void validateInput(ResourceControllerDataProvider clusterData,\n   private Map<String, ResourceAssignment> getBaselineAssignment(\n       AssignmentMetadataStore assignmentMetadataStore, CurrentStateOutput currentStateOutput,\n       Set<String> resources) throws HelixRebalanceException {\n-    Map<String, ResourceAssignment> currentBaseline = Collections.emptyMap();\n+    Map<String, ResourceAssignment> currentBaseline = new HashMap<>();\n     if (assignmentMetadataStore != null) {\n       try {\n         _stateReadLatency.startMeasuringLatency();\n-        currentBaseline = assignmentMetadataStore.getBaseline();\n+        currentBaseline = new HashMap<>(assignmentMetadataStore.getBaseline());\n         _stateReadLatency.endMeasuringLatency();\n       } catch (Exception ex) {\n         throw new HelixRebalanceException(\n             \"Failed to get the current baseline assignment because of unexpected error.\",\n             HelixRebalanceException.Type.INVALID_REBALANCER_STATUS, ex);\n       }\n     }\n-    if (currentBaseline.isEmpty()) {\n+    currentBaseline.keySet().retainAll(resources);\n+    if (!currentBaseline.keySet().containsAll(resources)) {\n       LOG.warn(\"The current baseline assignment record is empty. Use the current states instead.\");\n-      currentBaseline = currentStateOutput.getAssignment(resources);\n+      for (Map.Entry<String, ResourceAssignment> entry : currentStateOutput.getAssignment(resources)", "originalCommit": "6e81ad341f4892a3b07209d2b2b1ef2281c21fff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1OTQwMw==", "url": "https://github.com/apache/helix/pull/1167#discussion_r458959403", "bodyText": "Better to do:\n\nfind all the missing resources\ncall getAssignment() to get the corresponding assignment\nadd assignments to the return map.", "author": "jiajunwang", "createdAt": "2020-07-22T17:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1ODc2MA=="}], "type": "inlineReview"}, {"oid": "b3d92c0a82767b570f4db56213f172e3e036a682", "url": "https://github.com/apache/helix/commit/b3d92c0a82767b570f4db56213f172e3e036a682", "message": "Modify getBestPossible", "committedDate": "2020-07-22T18:46:10Z", "type": "commit"}, {"oid": "4af8f136455679c3352201d4781fcb3ebb35f73c", "url": "https://github.com/apache/helix/commit/4af8f136455679c3352201d4781fcb3ebb35f73c", "message": "Added test case", "committedDate": "2020-07-23T00:35:43Z", "type": "commit"}]}