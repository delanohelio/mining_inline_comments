{"pr_number": 714, "pr_title": "Create data accessor interface and ZkRoutingDataAccessor", "pr_createdAt": "2020-02-01T01:57:39Z", "pr_url": "https://github.com/apache/helix/pull/714", "timeline": [{"oid": "31ca0c35466919b1806c752b26fe2c9e9383b8e5", "url": "https://github.com/apache/helix/commit/31ca0c35466919b1806c752b26fe2c9e9383b8e5", "message": "create data accessor interface and impl", "committedDate": "2020-02-01T01:51:50Z", "type": "commit"}, {"oid": "7a2a8f472f4f74752f8eed6df14268ad61fab2cb", "url": "https://github.com/apache/helix/commit/7a2a8f472f4f74752f8eed6df14268ad61fab2cb", "message": "remove placeholder test", "committedDate": "2020-02-01T01:57:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwOTQxNA==", "url": "https://github.com/apache/helix/pull/714#discussion_r373809414", "bodyText": "This class can extend AbstractTestClass and you could use one of its ZKs instantiated in that class.", "author": "narendly", "createdAt": "2020-02-01T23:58:48Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+\n+public class TestZkRoutingDataAccessor {", "originalCommit": "7a2a8f472f4f74752f8eed6df14268ad61fab2cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NjExMQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374396111", "bodyText": "Thank you for the suggestion!", "author": "NealSun96", "createdAt": "2020-02-03T23:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwOTQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwOTQ2MQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r373809461", "bodyText": "Shouldn't it be something like \"ZK_PATH_SHARDING_KEYS\" instead of \"addresses\"? Also, let's make \"ZK_PATH_SHARDING_KEYS\" a constant.", "author": "narendly", "createdAt": "2020-02-02T00:00:34Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataAccessor(String zkAddress) {\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() {\n+    Map<String, List<String>> result = new HashMap<>();\n+    List<String> children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    for (String child : children) {\n+      ZNRecord record = _zkClient.readData(ROUTING_DATA_PATH + \"/\" + child);\n+      result.put(child, record.getListField(\"addresses\"));", "originalCommit": "7a2a8f472f4f74752f8eed6df14268ad61fab2cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NjMyNw==", "url": "https://github.com/apache/helix/pull/714#discussion_r374396327", "bodyText": "I was under the impression that we'll change the ZNRecord, so I didn't think too hard about it. You're right that the key name should represent \"sharding keys\" in a way.", "author": "NealSun96", "createdAt": "2020-02-03T23:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwOTQ2MQ=="}], "type": "inlineReview"}, {"oid": "12aae11bd120380fdc6c00ae8f4e2ac945dc2290", "url": "https://github.com/apache/helix/commit/12aae11bd120380fdc6c00ae8f4e2ac945dc2290", "message": "create test case", "committedDate": "2020-02-03T23:16:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNjIzNQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374406235", "bodyText": "There could be a few cases where you might have to validate the status of the routing data in the metadata store.\n\nDo we have the ROUTING_DATA_PATH path set?\nDo we have any metadata stores registered under that path?\nWhat if there are no keys registered?\n\nLet's alert the user appropriately for each scenario - by adding sanity checks.", "author": "narendly", "createdAt": "2020-02-03T23:48:52Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  private static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataAccessor(String zkAddress) {\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() {\n+    Map<String, List<String>> result = new HashMap<>();\n+    List<String> children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    for (String child : children) {\n+      ZNRecord record = _zkClient.readData(ROUTING_DATA_PATH + \"/\" + child);\n+      List<String> shardingKeys = record.getListField(ZNRECORD_LIST_FIELD_KEY);\n+      if (shardingKeys != null) {\n+        result.put(child, shardingKeys);\n+      }\n+    }\n+    return result;", "originalCommit": "12aae11bd120380fdc6c00ae8f4e2ac945dc2290", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0OTk1MA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374849950", "bodyText": "Per discussion, added exception throwing behavior in 4 different cases.", "author": "NealSun96", "createdAt": "2020-02-04T18:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNjIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2MzkyMg==", "url": "https://github.com/apache/helix/pull/714#discussion_r374463922", "bodyText": "Note that this will be implementing IZKDataListener, IZkChildListener, and IZkStateChangeListener interfaces in other PRs.", "author": "narendly", "createdAt": "2020-02-04T03:59:37Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {", "originalCommit": "12aae11bd120380fdc6c00ae8f4e2ac945dc2290", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "url": "https://github.com/apache/helix/commit/7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "message": "add exception throwing behaviour", "committedDate": "2020-02-04T18:36:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNDAwOQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374904009", "bodyText": "It is better to clear name it as InvalidZKRoutingDataException.", "author": "junkaixue", "createdAt": "2020-02-04T20:26:13Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/exceptions/InvalidRoutingDataException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.helix.rest.metadatastore.exceptions;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * This exception is thrown by MetadataStoreRoutingDataAccessor when the routing data it's trying to\n+ * access is malformed and is there invalid.\n+ */\n+public class InvalidRoutingDataException extends Exception {", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxODkwMA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374918900", "bodyText": "InvalidRoutingDataException is used with MetadataStoreRoutingDataAccessor interface. We want to keep it generic as this exception can be used by other implementations of the accessor.", "author": "NealSun96", "createdAt": "2020-02-04T20:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNDAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNDYyNg==", "url": "https://github.com/apache/helix/pull/714#discussion_r374904626", "bodyText": "Do you see any potentials to use these constants in other classes? If yes, shall we have a separate class as ZKRoutingConstant or something to hold these constants?", "author": "junkaixue", "createdAt": "2020-02-04T20:27:39Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  private static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNjEwMQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374916101", "bodyText": "+1. We could create a constant class.", "author": "narendly", "createdAt": "2020-02-04T20:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNDYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMTYxNw==", "url": "https://github.com/apache/helix/pull/714#discussion_r374921617", "bodyText": "I don't think other classes will use these constants. The first one ROUTING_DATA_PATH is used by zookeeper accessor only, and it wouldn't make sense for other classes to use it. The second one is most likely used by this class only, as well.", "author": "NealSun96", "createdAt": "2020-02-04T21:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNDYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNjAyOQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374906029", "bodyText": "What's the reason for these two different scenario? I think shardingKeys list handled by us, right? Do you see the case of shardingKeys is empty?", "author": "junkaixue", "createdAt": "2020-02-04T20:30:49Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  private static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataAccessor(String zkAddress) {\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> result = new HashMap<>();\n+    if (!_zkClient.exists(ROUTING_DATA_PATH)) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" node doesn't exist.\");\n+    }\n+    List<String> children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    if (children.isEmpty()) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" does not have any child node.\");\n+    }\n+    for (String child : children) {\n+      ZNRecord record = _zkClient.readData(ROUTING_DATA_PATH + \"/\" + child);\n+      List<String> shardingKeys = record.getListField(ZNRECORD_LIST_FIELD_KEY);\n+      if (shardingKeys == null) {\n+        throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \"/\" + child\n+            + \" does not have the key \" + ZNRECORD_LIST_FIELD_KEY + \".\");\n+      }\n+      if (shardingKeys.isEmpty()) {\n+        throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \"/\" + child\n+            + \" has an empty value for the key \" + ZNRECORD_LIST_FIELD_KEY + \".\");\n+      }", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MDcxOA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374940718", "bodyText": "The data in ZooKeeper is actually managed by the users, so guarding is necessary. Whether there should be two different scenarios for this, I'm fine either way.", "author": "NealSun96", "createdAt": "2020-02-04T21:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwNjAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMzQ0MQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374913441", "bodyText": "Let's use:\n\"Routing data directory \" + ROUTING_DATA_PATH + \" does not exist! Routing ZooKeeper: \" + zkAddress", "author": "narendly", "createdAt": "2020-02-04T20:47:04Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  private static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataAccessor(String zkAddress) {\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> result = new HashMap<>();\n+    if (!_zkClient.exists(ROUTING_DATA_PATH)) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" node doesn't exist.\");", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MTkyMQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374941921", "bodyText": "Makes sense.", "author": "NealSun96", "createdAt": "2020-02-04T21:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMzQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNDQyOQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374914429", "bodyText": "What about namespaces?\n\"There are no namespaces found in this routing ZooKeeper! Routing ZooKeeper: \" + zkAddress", "author": "narendly", "createdAt": "2020-02-04T20:49:11Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  private static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataAccessor(String zkAddress) {\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> result = new HashMap<>();\n+    if (!_zkClient.exists(ROUTING_DATA_PATH)) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" node doesn't exist.\");\n+    }\n+    List<String> children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    if (children.isEmpty()) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" does not have any child node.\");", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzE1NA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374943154", "bodyText": "When you say namespaces, are you suggesting that there should be one more ZNode level above ROUTING_DATA_PATH? If so that's not my impression to the design. Could you elaborate?", "author": "NealSun96", "createdAt": "2020-02-04T21:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNDQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNjk3OQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374916979", "bodyText": "These two cases could probably be merged.", "author": "narendly", "createdAt": "2020-02-04T20:54:41Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataAccessor implements MetadataStoreRoutingDataAccessor {\n+  private static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  private static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataAccessor(String zkAddress) {\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> result = new HashMap<>();\n+    if (!_zkClient.exists(ROUTING_DATA_PATH)) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" node doesn't exist.\");\n+    }\n+    List<String> children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    if (children.isEmpty()) {\n+      throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \" does not have any child node.\");\n+    }\n+    for (String child : children) {\n+      ZNRecord record = _zkClient.readData(ROUTING_DATA_PATH + \"/\" + child);\n+      List<String> shardingKeys = record.getListField(ZNRECORD_LIST_FIELD_KEY);\n+      if (shardingKeys == null) {\n+        throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \"/\" + child\n+            + \" does not have the key \" + ZNRECORD_LIST_FIELD_KEY + \".\");\n+      }\n+      if (shardingKeys.isEmpty()) {\n+        throw new InvalidRoutingDataException(ROUTING_DATA_PATH + \"/\" + child\n+            + \" has an empty value for the key \" + ZNRECORD_LIST_FIELD_KEY + \".\");\n+      }", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDA4MA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374944080", "bodyText": "Separating them does provide more information on why the routing data is invalid, but I don't have a strong preference on either choices.", "author": "NealSun96", "createdAt": "2020-02-04T21:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNjk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDE2MQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r374944161", "bodyText": "Merging.", "author": "NealSun96", "createdAt": "2020-02-04T21:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNjk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzQwMw==", "url": "https://github.com/apache/helix/pull/714#discussion_r374917403", "bodyText": "It'd be a good idea to add a schematic so that the reviewers/readers could understand this better.", "author": "narendly", "createdAt": "2020-02-04T20:55:35Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestZkRoutingDataAccessor extends AbstractTestClass {\n+  @Test\n+  public void testGetRoutingData() {\n+    ZNRecord testZnRecord1 = new ZNRecord(\"testZnRecord1\");\n+    List<String> testShardingKeys1 =\n+        Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n+    testZnRecord1.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys1);\n+    ZNRecord testZnRecord2 = new ZNRecord(\"testZnRecord2\");\n+    List<String> testShardingKeys2 = Arrays.asList(\"/sharding/key/2/a\", \"/sharding/key/2/b\",\n+        \"/sharding/key/2/c\", \"/sharding/key/2/d\");\n+    testZnRecord2.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys2);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress1\", testZnRecord1,\n+        AccessOption.PERSISTENT);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress2\", testZnRecord2,\n+        AccessOption.PERSISTENT);", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDMwNA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374944304", "bodyText": "As in comments? Sure.", "author": "NealSun96", "createdAt": "2020-02-04T21:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzU0MA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374917540", "bodyText": "Use the constant instead.", "author": "narendly", "createdAt": "2020-02-04T20:55:49Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestZkRoutingDataAccessor extends AbstractTestClass {\n+  @Test\n+  public void testGetRoutingData() {\n+    ZNRecord testZnRecord1 = new ZNRecord(\"testZnRecord1\");\n+    List<String> testShardingKeys1 =\n+        Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n+    testZnRecord1.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys1);\n+    ZNRecord testZnRecord2 = new ZNRecord(\"testZnRecord2\");\n+    List<String> testShardingKeys2 = Arrays.asList(\"/sharding/key/2/a\", \"/sharding/key/2/b\",\n+        \"/sharding/key/2/c\", \"/sharding/key/2/d\");\n+    testZnRecord2.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys2);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress1\", testZnRecord1,\n+        AccessOption.PERSISTENT);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress2\", testZnRecord2,\n+        AccessOption.PERSISTENT);\n+\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);\n+    try {\n+      Map<String, List<String>> routingData = zkRoutingDataAccessor.getRoutingData();\n+      Assert.assertEquals(routingData.size(), 2);\n+      Assert.assertEquals(routingData.get(\"testRealmAddress1\"), testShardingKeys1);\n+      Assert.assertEquals(routingData.get(\"testRealmAddress2\"), testShardingKeys2);\n+    } catch (InvalidRoutingDataException e) {\n+      Assert.fail(\"Not expecting InvalidRoutingDataException\");\n+    }\n+\n+    _baseAccessor.remove(\"/METADATA_STORE_ROUTING_DATA\", AccessOption.PERSISTENT);", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzg1MA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374917850", "bodyText": "Declare using the interface, initialize using the implementation.", "author": "narendly", "createdAt": "2020-02-04T20:56:28Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestZkRoutingDataAccessor extends AbstractTestClass {\n+  @Test\n+  public void testGetRoutingData() {\n+    ZNRecord testZnRecord1 = new ZNRecord(\"testZnRecord1\");\n+    List<String> testShardingKeys1 =\n+        Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n+    testZnRecord1.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys1);\n+    ZNRecord testZnRecord2 = new ZNRecord(\"testZnRecord2\");\n+    List<String> testShardingKeys2 = Arrays.asList(\"/sharding/key/2/a\", \"/sharding/key/2/b\",\n+        \"/sharding/key/2/c\", \"/sharding/key/2/d\");\n+    testZnRecord2.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys2);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress1\", testZnRecord1,\n+        AccessOption.PERSISTENT);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress2\", testZnRecord2,\n+        AccessOption.PERSISTENT);\n+\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNzk2NA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374917964", "bodyText": "Declare using the interface, initialize using the implementation.", "author": "narendly", "createdAt": "2020-02-04T20:56:39Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestZkRoutingDataAccessor extends AbstractTestClass {\n+  @Test\n+  public void testGetRoutingData() {\n+    ZNRecord testZnRecord1 = new ZNRecord(\"testZnRecord1\");\n+    List<String> testShardingKeys1 =\n+        Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n+    testZnRecord1.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys1);\n+    ZNRecord testZnRecord2 = new ZNRecord(\"testZnRecord2\");\n+    List<String> testShardingKeys2 = Arrays.asList(\"/sharding/key/2/a\", \"/sharding/key/2/b\",\n+        \"/sharding/key/2/c\", \"/sharding/key/2/d\");\n+    testZnRecord2.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys2);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress1\", testZnRecord1,\n+        AccessOption.PERSISTENT);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress2\", testZnRecord2,\n+        AccessOption.PERSISTENT);\n+\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);\n+    try {\n+      Map<String, List<String>> routingData = zkRoutingDataAccessor.getRoutingData();\n+      Assert.assertEquals(routingData.size(), 2);\n+      Assert.assertEquals(routingData.get(\"testRealmAddress1\"), testShardingKeys1);\n+      Assert.assertEquals(routingData.get(\"testRealmAddress2\"), testShardingKeys2);\n+    } catch (InvalidRoutingDataException e) {\n+      Assert.fail(\"Not expecting InvalidRoutingDataException\");\n+    }\n+\n+    _baseAccessor.remove(\"/METADATA_STORE_ROUTING_DATA\", AccessOption.PERSISTENT);\n+  }\n+\n+  @Test\n+  public void testGetRoutingDataMissingMSRD() {\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxODAwNA==", "url": "https://github.com/apache/helix/pull/714#discussion_r374918004", "bodyText": "Declare using the interface, initialize using the implementation.", "author": "narendly", "createdAt": "2020-02-04T20:56:44Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataAccessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestZkRoutingDataAccessor extends AbstractTestClass {\n+  @Test\n+  public void testGetRoutingData() {\n+    ZNRecord testZnRecord1 = new ZNRecord(\"testZnRecord1\");\n+    List<String> testShardingKeys1 =\n+        Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n+    testZnRecord1.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys1);\n+    ZNRecord testZnRecord2 = new ZNRecord(\"testZnRecord2\");\n+    List<String> testShardingKeys2 = Arrays.asList(\"/sharding/key/2/a\", \"/sharding/key/2/b\",\n+        \"/sharding/key/2/c\", \"/sharding/key/2/d\");\n+    testZnRecord2.setListField(\"ZK_PATH_SHARDING_KEYS\", testShardingKeys2);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress1\", testZnRecord1,\n+        AccessOption.PERSISTENT);\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA/testRealmAddress2\", testZnRecord2,\n+        AccessOption.PERSISTENT);\n+\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);\n+    try {\n+      Map<String, List<String>> routingData = zkRoutingDataAccessor.getRoutingData();\n+      Assert.assertEquals(routingData.size(), 2);\n+      Assert.assertEquals(routingData.get(\"testRealmAddress1\"), testShardingKeys1);\n+      Assert.assertEquals(routingData.get(\"testRealmAddress2\"), testShardingKeys2);\n+    } catch (InvalidRoutingDataException e) {\n+      Assert.fail(\"Not expecting InvalidRoutingDataException\");\n+    }\n+\n+    _baseAccessor.remove(\"/METADATA_STORE_ROUTING_DATA\", AccessOption.PERSISTENT);\n+  }\n+\n+  @Test\n+  public void testGetRoutingDataMissingMSRD() {\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);\n+    try {\n+      zkRoutingDataAccessor.getRoutingData();\n+      Assert.fail(\"Expecting InvalidRoutingDataException\");\n+    } catch (InvalidRoutingDataException e) {\n+      Assert\n+          .assertTrue(e.getMessage().contains(\"/METADATA_STORE_ROUTING_DATA node doesn't exist.\"));\n+    }\n+  }\n+\n+  @Test\n+  public void testGetRoutingDataMissingMSRDChildren() {\n+    _baseAccessor.create(\"/METADATA_STORE_ROUTING_DATA\", new ZNRecord(\"test\"),\n+        AccessOption.PERSISTENT);\n+    ZkRoutingDataAccessor zkRoutingDataAccessor = new ZkRoutingDataAccessor(ZK_ADDR);", "originalCommit": "7afdaa3b3b339b5a3e1ffaa9a4d080da30490542", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b65623820084c069bc28f0cc25a46499f7a30449", "url": "https://github.com/apache/helix/commit/b65623820084c069bc28f0cc25a46499f7a30449", "message": "rename and address comments", "committedDate": "2020-02-05T00:01:18Z", "type": "commit"}, {"oid": "35095696cb25fe5ca44e8640f3d5862284947385", "url": "https://github.com/apache/helix/commit/35095696cb25fe5ca44e8640f3d5862284947385", "message": "make up missed constant usages", "committedDate": "2020-02-05T00:03:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNDEyOA==", "url": "https://github.com/apache/helix/pull/714#discussion_r375004128", "bodyText": "Can we avoid importing *? The file helix-style-intellij.xml should help you format the imports.", "author": "huizhilu", "createdAt": "2020-02-05T00:43:43Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static org.apache.helix.rest.metadatastore.ZkRoutingDataReader.*;", "originalCommit": "35095696cb25fe5ca44e8640f3d5862284947385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTM2OQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r375011369", "bodyText": "This was an automatic line generated. Let me change it.", "author": "NealSun96", "createdAt": "2020-02-05T01:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNDEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODg0Mg==", "url": "https://github.com/apache/helix/pull/714#discussion_r375008842", "bodyText": "You don't have to use exits to check this path as it would add one more unnecessary read request to ZK. getChildren will give you ZkNoNodeException if the path does not exit. So just catch the ZkNoNodeException and save one READ request to ZK.", "author": "huizhilu", "createdAt": "2020-02-05T01:01:06Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataReader implements MetadataStoreRoutingDataReader {\n+  static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataReader(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> result = new HashMap<>();\n+    if (!_zkClient.exists(ROUTING_DATA_PATH)) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not exist. Routing ZooKeeper address: \" + _zkAddress);\n+    }", "originalCommit": "35095696cb25fe5ca44e8640f3d5862284947385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTk1OA==", "url": "https://github.com/apache/helix/pull/714#discussion_r375011958", "bodyText": "Makes sense. Changing.", "author": "NealSun96", "createdAt": "2020-02-05T01:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwODg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwOTE0Ng==", "url": "https://github.com/apache/helix/pull/714#discussion_r375009146", "bodyText": "Nit, maybe you can give it a clearer name like routingData, instead of this vague one?", "author": "huizhilu", "createdAt": "2020-02-05T01:02:03Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+public class ZkRoutingDataReader implements MetadataStoreRoutingDataReader {\n+  static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataReader(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> result = new HashMap<>();", "originalCommit": "35095696cb25fe5ca44e8640f3d5862284947385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMTYyMQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r375011621", "bodyText": "Good point", "author": "NealSun96", "createdAt": "2020-02-05T01:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwOTE0Ng=="}], "type": "inlineReview"}, {"oid": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "url": "https://github.com/apache/helix/commit/27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "message": "address comments", "committedDate": "2020-02-05T01:13:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMzExMw==", "url": "https://github.com/apache/helix/pull/714#discussion_r375013113", "bodyText": "Fix style", "author": "narendly", "createdAt": "2020-02-05T01:17:23Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.I0Itec.zkclient.exception.ZkNoNodeException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+\n+public class ZkRoutingDataReader implements MetadataStoreRoutingDataReader {\n+  static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataReader(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    List<String> children;\n+    try {\n+      children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    }\n+    catch (ZkNoNodeException e) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not exist. Routing ZooKeeper address: \" + _zkAddress);\n+    }", "originalCommit": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMzQ0NA==", "url": "https://github.com/apache/helix/pull/714#discussion_r375013444", "bodyText": "Instead of calling it children, let's give a more meaningful message:\n\nThere are no metadata store realms defined in the routing zookeeper: \" + zkAddress?", "author": "narendly", "createdAt": "2020-02-05T01:18:39Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.I0Itec.zkclient.exception.ZkNoNodeException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+\n+public class ZkRoutingDataReader implements MetadataStoreRoutingDataReader {\n+  static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataReader(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    List<String> children;\n+    try {\n+      children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    }\n+    catch (ZkNoNodeException e) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not exist. Routing ZooKeeper address: \" + _zkAddress);\n+    }\n+    if (children.isEmpty()) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not have any child node. Routing ZooKeeper address: \" + _zkAddress);", "originalCommit": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMzczNw==", "url": "https://github.com/apache/helix/pull/714#discussion_r375013737", "bodyText": "nit: is null check necessary on children (might not be. ignore if not)?", "author": "narendly", "createdAt": "2020-02-05T01:19:35Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.I0Itec.zkclient.exception.ZkNoNodeException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+\n+public class ZkRoutingDataReader implements MetadataStoreRoutingDataReader {\n+  static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataReader(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    List<String> children;\n+    try {\n+      children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    }\n+    catch (ZkNoNodeException e) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not exist. Routing ZooKeeper address: \" + _zkAddress);\n+    }\n+    if (children.isEmpty()) {", "originalCommit": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDAyMw==", "url": "https://github.com/apache/helix/pull/714#discussion_r375014023", "bodyText": "Nit: let's call it ZNode, instead of node", "author": "narendly", "createdAt": "2020-02-05T01:20:36Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.I0Itec.zkclient.exception.ZkNoNodeException;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.manager.zk.ZNRecordSerializer;\n+import org.apache.helix.manager.zk.client.DedicatedZkClientFactory;\n+import org.apache.helix.manager.zk.client.HelixZkClient;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+\n+public class ZkRoutingDataReader implements MetadataStoreRoutingDataReader {\n+  static final String ROUTING_DATA_PATH = \"/METADATA_STORE_ROUTING_DATA\";\n+  static final String ZNRECORD_LIST_FIELD_KEY = \"ZK_PATH_SHARDING_KEYS\";\n+\n+  private final String _zkAddress;\n+  private final HelixZkClient _zkClient;\n+\n+  public ZkRoutingDataReader(String zkAddress) {\n+    _zkAddress = zkAddress;\n+    _zkClient = DedicatedZkClientFactory.getInstance().buildZkClient(\n+        new HelixZkClient.ZkConnectionConfig(zkAddress),\n+        new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n+  }\n+\n+  public Map<String, List<String>> getRoutingData() throws InvalidRoutingDataException {\n+    Map<String, List<String>> routingData = new HashMap<>();\n+    List<String> children;\n+    try {\n+      children = _zkClient.getChildren(ROUTING_DATA_PATH);\n+    }\n+    catch (ZkNoNodeException e) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not exist. Routing ZooKeeper address: \" + _zkAddress);\n+    }\n+    if (children.isEmpty()) {\n+      throw new InvalidRoutingDataException(\"Routing data directory node \" + ROUTING_DATA_PATH\n+          + \" does not have any child node. Routing ZooKeeper address: \" + _zkAddress);\n+    }\n+    for (String child : children) {\n+      ZNRecord record = _zkClient.readData(ROUTING_DATA_PATH + \"/\" + child);\n+      List<String> shardingKeys = record.getListField(ZNRECORD_LIST_FIELD_KEY);\n+      if (shardingKeys == null || shardingKeys.isEmpty()) {\n+        throw new InvalidRoutingDataException(\"Realm address node \" + ROUTING_DATA_PATH + \"/\"", "originalCommit": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ3OQ==", "url": "https://github.com/apache/helix/pull/714#discussion_r375014479", "bodyText": "Can you make this a private variable and reuse it? Create a @beforeClass. Also create a @afterclass method and close all ZK connections/other connected resources (such as base data accessor)", "author": "narendly", "createdAt": "2020-02-05T01:22:18Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/metadatastore/TestZkRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.AccessOption;\n+import org.apache.helix.ZNRecord;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+import org.apache.helix.rest.server.AbstractTestClass;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import static org.apache.helix.rest.metadatastore.ZkRoutingDataReader.ROUTING_DATA_PATH;\n+import static org.apache.helix.rest.metadatastore.ZkRoutingDataReader.ZNRECORD_LIST_FIELD_KEY;\n+\n+public class TestZkRoutingDataReader extends AbstractTestClass {\n+  @Test\n+  public void testGetRoutingData() {\n+    // Create a node that represents a realm address and add 3 sharding keys to it\n+    ZNRecord testZnRecord1 = new ZNRecord(\"testZnRecord1\");\n+    List<String> testShardingKeys1 =\n+        Arrays.asList(\"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\");\n+    testZnRecord1.setListField(ZNRECORD_LIST_FIELD_KEY, testShardingKeys1);\n+\n+    // Create another node that represents a realm address and add 3 sharding keys to it\n+    ZNRecord testZnRecord2 = new ZNRecord(\"testZnRecord2\");\n+    List<String> testShardingKeys2 = Arrays.asList(\"/sharding/key/2/a\", \"/sharding/key/2/b\",\n+        \"/sharding/key/2/c\", \"/sharding/key/2/d\");\n+    testZnRecord2.setListField(ZNRECORD_LIST_FIELD_KEY, testShardingKeys2);\n+\n+    // Add both nodes as children nodes to ROUTING_DATA_PATH\n+    _baseAccessor.create(ROUTING_DATA_PATH + \"/testRealmAddress1\", testZnRecord1,\n+        AccessOption.PERSISTENT);\n+    _baseAccessor.create(ROUTING_DATA_PATH + \"/testRealmAddress2\", testZnRecord2,\n+        AccessOption.PERSISTENT);\n+\n+    MetadataStoreRoutingDataReader zkRoutingDataReader = new ZkRoutingDataReader(ZK_ADDR);", "originalCommit": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDU1Mg==", "url": "https://github.com/apache/helix/pull/714#discussion_r375014552", "bodyText": "Let's add a close() method.", "author": "narendly", "createdAt": "2020-02-05T01:22:35Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreRoutingDataReader.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.apache.helix.rest.metadatastore;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.helix.rest.metadatastore.exceptions.InvalidRoutingDataException;\n+\n+/**\n+ * An interface for a DAO that fetches routing data from a source and return a key-value mapping\n+ * that represent the said routing data.\n+ */\n+public interface MetadataStoreRoutingDataReader {", "originalCommit": "27e2cb5c4fa10086f96dfe7abcfcadee75367c70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ce8b9a335b01c39990aed7adc18453948317869", "url": "https://github.com/apache/helix/commit/4ce8b9a335b01c39990aed7adc18453948317869", "message": "address final comments", "committedDate": "2020-02-05T01:38:33Z", "type": "commit"}]}