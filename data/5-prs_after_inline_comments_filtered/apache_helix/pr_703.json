{"pr_number": 703, "pr_title": "Created Helix distributed lock interface", "pr_createdAt": "2020-01-23T19:36:46Z", "pr_url": "https://github.com/apache/helix/pull/703", "timeline": [{"oid": "9ad06752567c6fab6f81cd5cd4f6db9114e66354", "url": "https://github.com/apache/helix/commit/9ad06752567c6fab6f81cd5cd4f6db9114e66354", "message": "Created Helix distributed lock design (apache#702)", "committedDate": "2020-01-23T19:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw==", "url": "https://github.com/apache/helix/pull/703#discussion_r370320137", "bodyText": "should this getLockInfo return a defined type (for example, LockInfo)?    Also, how does a piece of code check whether it owns the lock or not?", "author": "lei-xia", "createdAt": "2020-01-23T19:47:18Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was released, false if it could not be released\n+   */\n+  public boolean releaseLock();\n+\n+  /**\n+   * Retrieve the lock information, e.g. lock timeout, lock message, etc.\n+   * @return lock information\n+   */\n+  public Object getLockInfo();", "originalCommit": "9ad06752567c6fab6f81cd5cd4f6db9114e66354", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5ODg1NQ==", "url": "https://github.com/apache/helix/pull/703#discussion_r370398855", "bodyText": "Good point. I'll change the return type to LockInfo, which contains these fields for now: owner ID, expiring time, lock message.\nSince the lock info already have the owner ID, user can check if they are the lock owner or not by comparing their ID to the ID returned in LockInfo. If we want to make it easier for users, we can take in the user ID in the lock constructor and when they call isOwner() API, we compare the user ID with  the owner ID, and return true or false.", "author": "mgao0", "createdAt": "2020-01-23T22:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzMwMg==", "url": "https://github.com/apache/helix/pull/703#discussion_r370767302", "bodyText": "Please try to make LockInfo very generic, as we will have various implementations, and we cannot force all of them to have certain fields.", "author": "zhangmeng916", "createdAt": "2020-01-24T18:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTY0Mg==", "url": "https://github.com/apache/helix/pull/703#discussion_r370791642", "bodyText": "This should be part of the API design. Please either create that class with full Java doc, or upload the design doc to github wiki.", "author": "jiajunwang", "createdAt": "2020-01-24T18:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTk2OA==", "url": "https://github.com/apache/helix/pull/703#discussion_r373131968", "bodyText": "Added LockInfo interface as the type contains lock metadata. And I also added a isOwner method for customers to check if they are the owner of the lock.", "author": "mgao0", "createdAt": "2020-01-30T18:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxMzMyMw==", "url": "https://github.com/apache/helix/pull/703#discussion_r370413323", "bodyText": "Do we want public modifier here because the interface is already public? I don't think it is necessary. All abstract, default, and static methods in an interface are implicitly public, so you can omit the public modifier.\nDo we really need to return a boolean? I think it makes sense to return a boolean for a tryAcquire, but for acquire, I think void is enough and clean.\nHow about just naming acquire\nDo we want a tryAcquire with timeout?", "author": "huizhilu", "createdAt": "2020-01-23T23:44:53Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();", "originalCommit": "9ad06752567c6fab6f81cd5cd4f6db9114e66354", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDgxMg==", "url": "https://github.com/apache/helix/pull/703#discussion_r370780812", "bodyText": "Good catch, will remove public.\n\n\nThis interface is a generic interface for both blocking and nonblocking blocks. In the design, if a false is return for acquireLock, it means the user failed to acquire the lock; a returned true means the lock is successfully acquired. A user cannot work on the resource without holding the lock.\n\n\nI personally think acquireLock is more clear that the user is using a lock, even if the variable name does not show it's a lock\n\n\nFor blocking lock, we will not expose the tryAcquire to our users, tryAcquire and retry will be wrapped inside the acquireLock implementation.", "author": "mgao0", "createdAt": "2020-01-24T18:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxMzMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MDgyMQ==", "url": "https://github.com/apache/helix/pull/703#discussion_r370790821", "bodyText": "Let's mention if this call is blocking or not in the comment.", "author": "jiajunwang", "createdAt": "2020-01-24T18:57:58Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock", "originalCommit": "9ad06752567c6fab6f81cd5cd4f6db9114e66354", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NTc0OA==", "url": "https://github.com/apache/helix/pull/703#discussion_r371265748", "bodyText": "If we design the method for both types, it may end up with only one implementation at a time. What if user may have both use cases for same lock object?", "author": "junkaixue", "createdAt": "2020-01-27T14:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MDgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMDQ3MA==", "url": "https://github.com/apache/helix/pull/703#discussion_r371500470", "bodyText": "@dasahcc Not sure I fully understand the scenario you described. Can you provide a specific example? What we want to achieve is to hide the implementation from our customers. So they choose to use nonblocking or blocking lock by using different HelixLock constructors, then they use the lock by calling acquire or release, we handle the difference of nonblocking and blocking in implementations.", "author": "mgao0", "createdAt": "2020-01-27T21:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MDgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyOTA3MQ==", "url": "https://github.com/apache/helix/pull/703#discussion_r373129071", "bodyText": "Currently this interface only includes blocking calls. Nonblocking calls can be added later if there is a need from our customers.", "author": "mgao0", "createdAt": "2020-01-30T18:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MDgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTE3OA==", "url": "https://github.com/apache/helix/pull/703#discussion_r370791178", "bodyText": "What's the return if we release a new lock object?\nOr we try to lock a lock twice?", "author": "jiajunwang", "createdAt": "2020-01-24T18:58:48Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was acquired, false if could not be acquired\n+   */\n+  public boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was released, false if it could not be released", "originalCommit": "9ad06752567c6fab6f81cd5cd4f6db9114e66354", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4ODA0OQ==", "url": "https://github.com/apache/helix/pull/703#discussion_r370888049", "bodyText": "False will be returned. I added it into the method comment.", "author": "mgao0", "createdAt": "2020-01-24T23:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTE3OA=="}], "type": "inlineReview"}, {"oid": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e", "url": "https://github.com/apache/helix/commit/c8ba896ada0fda73ba0cebcb09fa9d45094c400e", "message": "Added LockInfo interface", "committedDate": "2020-01-24T23:33:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2Njc3NA==", "url": "https://github.com/apache/helix/pull/703#discussion_r371266774", "bodyText": "Do we consider privilege override or something else? What is the scope of locking", "author": "junkaixue", "createdAt": "2020-01-27T14:22:48Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/HelixLock.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.lock;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Generic interface for Helix distributed lock for both nonblocking and blocking calls\n+ */\n+public interface HelixLock {\n+  /**\n+   * Acquire a lock\n+   * @return true if the lock was successfully acquired,\n+   * false if the lock could not be acquired\n+   */\n+  boolean acquireLock();\n+\n+  /**\n+   * Release a lock\n+   * @return true if the lock was successfully released,\n+   * false if the locked is not locked or is not locked by the user,\n+   * or the lock could not be released\n+   */\n+  boolean releaseLock();", "originalCommit": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMTg3NQ==", "url": "https://github.com/apache/helix/pull/703#discussion_r371501875", "bodyText": "We do not consider privilege override at this moment. But it may be considered later.", "author": "mgao0", "createdAt": "2020-01-27T21:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2Njc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NzAzNA==", "url": "https://github.com/apache/helix/pull/703#discussion_r371267034", "bodyText": "the method name is too generic.", "author": "junkaixue", "createdAt": "2020-01-27T14:23:16Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/LockInfo.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.helix.lock;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * Generic interface for a map contains the Helix lock information\n+ * @param <T> The type of the LockInfo value\n+ */\n+public interface LockInfo<T> {\n+\n+  /**\n+   * Create a single filed of LockInfo, or update the value of the field if it already exists\n+   * @param key the key of the LockInfo field\n+   * @param value the value of the LockInfo field\n+   */\n+  void setValue(String key, T value);", "originalCommit": "c8ba896ada0fda73ba0cebcb09fa9d45094c400e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTA1MQ==", "url": "https://github.com/apache/helix/pull/703#discussion_r373131051", "bodyText": "I added a TODO to add specific setter and getter for fields that we identify that are mandatory as LockInfo, so the method names can make more sense to our customers.", "author": "mgao0", "createdAt": "2020-01-30T18:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI2NzAzNA=="}], "type": "inlineReview"}, {"oid": "8ce07964e69f45b82ca8f576860de278d78e06cf", "url": "https://github.com/apache/helix/commit/8ce07964e69f45b82ca8f576860de278d78e06cf", "message": "Modified method name in LockInfo", "committedDate": "2020-01-27T21:51:59Z", "type": "commit"}, {"oid": "225cf46af4a37d5738a2dec41f57ec412450c962", "url": "https://github.com/apache/helix/commit/225cf46af4a37d5738a2dec41f57ec412450c962", "message": "Added details in comments", "committedDate": "2020-01-30T17:51:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNDM0MA==", "url": "https://github.com/apache/helix/pull/703#discussion_r373114340", "bodyText": "Optional for this PR. But do we consider some mandatory fields to be here? For example, timeout, owner ID, etc.", "author": "jiajunwang", "createdAt": "2020-01-30T18:21:48Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/LockInfo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.helix.lock;\n+\n+import java.util.Map;\n+\n+\n+/**\n+ * Generic interface for a map contains the Helix lock information\n+ * @param <T> The type of the LockInfo value\n+ */\n+public interface LockInfo<T> {", "originalCommit": "225cf46af4a37d5738a2dec41f57ec412450c962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0MDc0Mw==", "url": "https://github.com/apache/helix/pull/703#discussion_r373140743", "bodyText": "We will add some mandatory fields to the LockInfo once we identify what are needed for both blocking lock and nonblocking lock.", "author": "mgao0", "createdAt": "2020-01-30T19:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNDM0MA=="}], "type": "inlineReview"}]}