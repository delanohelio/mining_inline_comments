{"pr_number": 1416, "pr_title": "add REST API for cluster topology", "pr_createdAt": "2020-09-26T00:26:36Z", "pr_url": "https://github.com/apache/helix/pull/1416", "timeline": [{"oid": "079873ef533e30662294221892bbd774f3bd3a12", "url": "https://github.com/apache/helix/commit/079873ef533e30662294221892bbd774f3bd3a12", "message": "Add REST API for cluster topology", "committedDate": "2020-09-26T02:18:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNzM4MA==", "url": "https://github.com/apache/helix/pull/1416#discussion_r495427380", "bodyText": "From the internal logic, if the cluster doesn't exist, an exception will be thrown - then it causes a server error 500, which is not appropriate, because it is a client error. Can we check if the cluster exists or not - if not, returns 404 NOT_FOUND and appropriate message\n{\n status_code: 404,\n message: cluster <clusterId> is not found\n}", "author": "huizhilu", "createdAt": "2020-09-26T07:30:27Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -442,6 +442,26 @@ public Response getClusterTopology(@PathParam(\"clusterId\") String clusterId) thr\n     return OK(objectMapper.writeValueAsString(clusterTopology));\n   }\n \n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/topologymap\")\n+  public Response getClusterTopologyMap(@PathParam(\"clusterId\") String clusterId) {\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> topologyMap = admin.getClusterTopology(clusterId).getTopologyMap();", "originalCommit": "079873ef533e30662294221892bbd774f3bd3a12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyNzc0NA==", "url": "https://github.com/apache/helix/pull/1416#discussion_r495427744", "bodyText": "Do you think it'd be better to also verify the content of instances?", "author": "huizhilu", "createdAt": "2020-09-26T07:35:05Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java", "diffHunk": "@@ -125,6 +125,69 @@ public void testGetClusterTopology() {\n   }\n \n   @Test(dependsOnMethods = \"testGetClusterTopology\")\n+  public void testGetClusterTopologyAndFaultZoneMap() throws IOException {\n+    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n+    String cluster = \"TestCluster_1\";\n+    for (int i = 0; i < 5; i++) {\n+      String instance = cluster + \"localhost_129\" + String.valueOf(18 + i);\n+      HelixDataAccessor helixDataAccessor = new ZKHelixDataAccessor(cluster, _baseAccessor);\n+      InstanceConfig instanceConfig =\n+          helixDataAccessor.getProperty(helixDataAccessor.keyBuilder().instanceConfig(instance));\n+      instanceConfig.setDomain(\"helixZoneId=zone0,instance=\" + instance);\n+      helixDataAccessor\n+          .setProperty(helixDataAccessor.keyBuilder().instanceConfig(instance), instanceConfig);\n+    }\n+\n+    for (int i = 0; i < 5; i++) {\n+      String instance = cluster + \"localhost_129\" + String.valueOf(23 + i);\n+      HelixDataAccessor helixDataAccessor = new ZKHelixDataAccessor(cluster, _baseAccessor);\n+      InstanceConfig instanceConfig =\n+          helixDataAccessor.getProperty(helixDataAccessor.keyBuilder().instanceConfig(instance));\n+      instanceConfig.setDomain(\"helixZoneId=zone1,instance=\" + instance);\n+      helixDataAccessor\n+          .setProperty(helixDataAccessor.keyBuilder().instanceConfig(instance), instanceConfig);\n+    }\n+\n+    ClusterConfig configDelta = new ClusterConfig(cluster);\n+    configDelta.getRecord().setSimpleField(\"TOPOLOGY\", \"/helixZoneId/instance\");\n+    updateClusterConfigFromRest(cluster, configDelta, Command.update);\n+\n+    //get cluster topology map\n+    String topologyMapUrlBase = \"clusters/TestCluster_1/topologymap/\";\n+    String topologyMapDef = get(topologyMapUrlBase, null, Response.Status.OK.getStatusCode(), true);\n+    Map<String, Object> topologyMap =\n+        OBJECT_MAPPER.readValue(topologyMapDef, new TypeReference<HashMap<String, Object>>() {\n+        });\n+    Assert.assertEquals(topologyMap.size(), 2);\n+    Assert.assertTrue(topologyMap.get(\"/helixZoneId:zone0\") instanceof List);\n+    List<String> instances = (List<String>) topologyMap.get(\"/helixZoneId:zone0\");\n+    Assert.assertEquals(instances.size(), 5);\n+\n+    Assert.assertTrue(topologyMap.get(\"/helixZoneId:zone1\") instanceof List);\n+    instances = (List<String>) topologyMap.get(\"/helixZoneId:zone1\");\n+    Assert.assertEquals(instances.size(), 5);", "originalCommit": "079873ef533e30662294221892bbd774f3bd3a12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MDU0OA==", "url": "https://github.com/apache/helix/pull/1416#discussion_r495550548", "bodyText": "Typo?  getTopologyMap  -> getFaultZoneMap.\nAnd getFaultZoneMap throws an IllegalArgumentException when \"The fault zone in cluster config is not defined\" - it seems to be client error. Would you consider catching the exception and then returning a client error, instead of a server error. I think it'd be better to differentiate a client error and a server error.", "author": "huizhilu", "createdAt": "2020-09-27T09:16:39Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -442,6 +442,29 @@ public Response getClusterTopology(@PathParam(\"clusterId\") String clusterId) thr\n     return OK(objectMapper.writeValueAsString(clusterTopology));\n   }\n \n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/topologymap\")\n+  public Response getClusterTopologyMap(@PathParam(\"clusterId\") String clusterId) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> topologyMap = admin.getClusterTopology(clusterId).getTopologyMap();\n+    return JSONRepresentation(topologyMap);\n+  }\n+\n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/faultzonemap\")\n+  public Response getClusterFaultZoneMap(@PathParam(\"clusterId\") String clusterId) {\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> topologyMap = admin.getClusterTopology(clusterId).getTopologyMap();", "originalCommit": "70b5e64ba7af9d361618d8dea3e762b4fac57359", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MTU3OQ==", "url": "https://github.com/apache/helix/pull/1416#discussion_r495551579", "bodyText": "From the java code logic, it seems these 2 REST APIs actually return a topology which is represented by a map.\nIf so, I think the REST endpoint {clusterId}/topology is good and clear enough? We don't need the map to specify the data format.\nAnd for fault zone, how about adding a query parameter domain_type based on the /topology endpoint: /topology?domain_type=fault_zone?  (correct me if I am not clear about it, as I just understand it by reading the code) Then it looks cleaner and is easier to read.", "author": "huizhilu", "createdAt": "2020-09-27T09:27:56Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -442,6 +442,29 @@ public Response getClusterTopology(@PathParam(\"clusterId\") String clusterId) thr\n     return OK(objectMapper.writeValueAsString(clusterTopology));\n   }\n \n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/topologymap\")\n+  public Response getClusterTopologyMap(@PathParam(\"clusterId\") String clusterId) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> topologyMap = admin.getClusterTopology(clusterId).getTopologyMap();\n+    return JSONRepresentation(topologyMap);\n+  }\n+\n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/faultzonemap\")", "originalCommit": "70b5e64ba7af9d361618d8dea3e762b4fac57359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyODQzMA==", "url": "https://github.com/apache/helix/pull/1416#discussion_r496128430", "bodyText": "There is already a legacy topology REST API in this class, so we have to use a different one. Any other idea than topologymap?\nRegarding the suggestion of fault zone query, what you said is actually my previous implementation. However, we then decided to only expose the most common use case, i.e., return the topology under fault zone as an API to our users. So this fault zone API is not a generic one that accepts any level of domain. Instead, it's a fixed one only for \"fault zone type\" defined in topology.", "author": "zhangmeng916", "createdAt": "2020-09-28T17:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzUwNw==", "url": "https://github.com/apache/helix/pull/1416#discussion_r495553507", "bodyText": "Since this will add one more zk read, and admin.getClusterTopology(clusterId) actually reads the cluster, I am not sure how heavy this call is. I assume it is mostly used during deployment?\nI wonder if we can use the result in admin.getClusterTopology: if the cluster doesn't exist, an exception(HelixException/NoClusterExistException) is thrown. Rest code here catches it and returns 404. Then it saves one zk read.", "author": "huizhilu", "createdAt": "2020-09-27T09:47:27Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -442,6 +442,29 @@ public Response getClusterTopology(@PathParam(\"clusterId\") String clusterId) thr\n     return OK(objectMapper.writeValueAsString(clusterTopology));\n   }\n \n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/topologymap\")\n+  public Response getClusterTopologyMap(@PathParam(\"clusterId\") String clusterId) {\n+    if (!doesClusterExist(clusterId)) {", "originalCommit": "70b5e64ba7af9d361618d8dea3e762b4fac57359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyOTgxMA==", "url": "https://github.com/apache/helix/pull/1416#discussion_r496129810", "bodyText": "I tried a bit. So here're the cases.\nThere are a few exceptions.\ncluster not set up.\nfault zone is not set.\ninstance configs are not set.\ntopology is not set or wrongly set.\nHow are we going to categorize them? I think they're all client side exceptions. What response we would like to return?", "author": "zhangmeng916", "createdAt": "2020-09-28T17:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExMzIyNQ==", "url": "https://github.com/apache/helix/pull/1416#discussion_r500113225", "bodyText": "I realized that this call is not a lightweight call. It has many calls to zk to check all required below paths exist. I think this is pretty heavy. And even the cluster exists at the usual case, this check makes the rest api call pretty slow to respond, which I don't think is expected, right? And actually isClusterSetup is called in getClusterTopology -> getClusterConfig() -> getConfigZnRecord -- multiple duplicate calls to zk just to check isClusterSetup.  So the following HelixException catch is good enough. No need to do the pre-check if (!doesClusterExist(clusterId)) {\n    requiredPaths.add(PropertyPathBuilder.idealState(clusterName));\n    requiredPaths.add(PropertyPathBuilder.clusterConfig(clusterName));\n    requiredPaths.add(PropertyPathBuilder.instanceConfig(clusterName));\n    requiredPaths.add(PropertyPathBuilder.resourceConfig(clusterName));\n    requiredPaths.add(PropertyPathBuilder.propertyStore(clusterName));\n    requiredPaths.add(PropertyPathBuilder.liveInstance(clusterName));\n    requiredPaths.add(PropertyPathBuilder.instance(clusterName));\n    requiredPaths.add(PropertyPathBuilder.externalView(clusterName));\n    requiredPaths.add(PropertyPathBuilder.controller(clusterName));\n    requiredPaths.add(PropertyPathBuilder.stateModelDef(clusterName));\n    requiredPaths.add(PropertyPathBuilder.controllerMessage(clusterName));\n    requiredPaths.add(PropertyPathBuilder.controllerError(clusterName));\n    requiredPaths.add(PropertyPathBuilder.controllerStatusUpdate(clusterName));\n    requiredPaths.add(PropertyPathBuilder.controllerHistory(clusterName));", "author": "huizhilu", "createdAt": "2020-10-06T08:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzUwNw=="}], "type": "inlineReview"}, {"oid": "138854cdab9d6f80d6a0c23c48247df10d400982", "url": "https://github.com/apache/helix/commit/138854cdab9d6f80d6a0c23c48247df10d400982", "message": "fix more comments", "committedDate": "2020-09-30T16:28:28Z", "type": "forcePushed"}, {"oid": "b028d322ada541f47d64dcbf584b63f761f91ca3", "url": "https://github.com/apache/helix/commit/b028d322ada541f47d64dcbf584b63f761f91ca3", "message": "minor fix", "committedDate": "2020-10-05T16:49:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMjIyMQ==", "url": "https://github.com/apache/helix/pull/1416#discussion_r500102221", "bodyText": "Typo: fro -> from\nLOG.error(\"Failed to get cluster fault zone map fro cluster {}.\", clusterId, ex); to print out the stack trace?\nSame in getClusterTopologyMap .", "author": "huizhilu", "createdAt": "2020-10-06T08:37:37Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -442,6 +442,50 @@ public Response getClusterTopology(@PathParam(\"clusterId\") String clusterId) thr\n     return OK(objectMapper.writeValueAsString(clusterTopology));\n   }\n \n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/topologymap\")\n+  public Response getClusterTopologyMap(@PathParam(\"clusterId\") String clusterId) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> topologyMap;\n+    try {\n+      topologyMap = admin.getClusterTopology(clusterId).getTopologyMap();\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to get cluster topology map fro cluster {}. Exception: \" + \"{}.\", clusterId,\n+          ex);\n+      return serverError(ex);\n+    }\n+    return JSONRepresentation(topologyMap);\n+  }\n+\n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/faultzonemap\")\n+  public Response getClusterFaultZoneMap(@PathParam(\"clusterId\") String clusterId) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> faultZoneMap;\n+    try {\n+      faultZoneMap = admin.getClusterTopology(clusterId).getFaultZoneMap();\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to get cluster fault zone map fro cluster {}. Exception: \" + \"{}.\",", "originalCommit": "b028d322ada541f47d64dcbf584b63f761f91ca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzA3Mw==", "url": "https://github.com/apache/helix/pull/1416#discussion_r500433073", "bodyText": "Do you mean ex.getStackTrace()? I took a look, seems not a convention in our rest. Please let me know if you have other concern.", "author": "zhangmeng916", "createdAt": "2020-10-06T16:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMjIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NjQ2MQ==", "url": "https://github.com/apache/helix/pull/1416#discussion_r500646461", "bodyText": "updated.", "author": "zhangmeng916", "createdAt": "2020-10-06T23:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEwMjIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODE3NA==", "url": "https://github.com/apache/helix/pull/1416#discussion_r500718174", "bodyText": "This serverError actually is not needed, because jersey framework will handle it. If there is any exception that is not handled, it'll return server error 500.", "author": "huizhilu", "createdAt": "2020-10-07T03:35:25Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -442,6 +442,42 @@ public Response getClusterTopology(@PathParam(\"clusterId\") String clusterId) thr\n     return OK(objectMapper.writeValueAsString(clusterTopology));\n   }\n \n+  @ResponseMetered(name = HttpConstants.READ_REQUEST)\n+  @Timed(name = HttpConstants.READ_REQUEST)\n+  @GET\n+  @Path(\"{clusterId}/topologymap\")\n+  public Response getClusterTopologyMap(@PathParam(\"clusterId\") String clusterId) {\n+    HelixAdmin admin = getHelixAdmin();\n+    Map<String, List<String>> topologyMap;\n+    try {\n+      topologyMap = admin.getClusterTopology(clusterId).getTopologyMap();\n+    } catch (HelixException ex) {\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      LOG.error(\"Failed to get cluster topology map from cluster {}.\", clusterId, ex);\n+      return serverError(ex);", "originalCommit": "5daaa1bc274cadc239bcfd300896cd3ee67e98e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxODUwOQ==", "url": "https://github.com/apache/helix/pull/1416#discussion_r500718509", "bodyText": "It'd be more complete if the bad response is also tested. We don't always have good response. Eg. the cluster is not setup -> Error 400 bad request.", "author": "huizhilu", "createdAt": "2020-10-07T03:37:00Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java", "diffHunk": "@@ -125,6 +126,93 @@ public void testGetClusterTopology() {\n   }\n \n   @Test(dependsOnMethods = \"testGetClusterTopology\")\n+  public void testGetClusterTopologyAndFaultZoneMap() throws IOException {", "originalCommit": "5daaa1bc274cadc239bcfd300896cd3ee67e98e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff4cd0d62eaf16af771a0377f34d3d5ee89252e4", "url": "https://github.com/apache/helix/commit/ff4cd0d62eaf16af771a0377f34d3d5ee89252e4", "message": "Add REST API for cluster topology", "committedDate": "2020-10-07T03:55:59Z", "type": "commit"}, {"oid": "06241811febb4d92f697e8cd8e8a3a4afa583066", "url": "https://github.com/apache/helix/commit/06241811febb4d92f697e8cd8e8a3a4afa583066", "message": "fix comment", "committedDate": "2020-10-07T03:55:59Z", "type": "commit"}, {"oid": "779632c4ecffa982365028423fabfcdb0baccf16", "url": "https://github.com/apache/helix/commit/779632c4ecffa982365028423fabfcdb0baccf16", "message": "fix more comments", "committedDate": "2020-10-07T03:55:59Z", "type": "commit"}, {"oid": "c684d1b3913db30906eba99a09460f568f34c8d7", "url": "https://github.com/apache/helix/commit/c684d1b3913db30906eba99a09460f568f34c8d7", "message": "minor fix", "committedDate": "2020-10-07T03:55:59Z", "type": "commit"}, {"oid": "9c0f71b61b0113e13eb0474532a72460ab28f1bf", "url": "https://github.com/apache/helix/commit/9c0f71b61b0113e13eb0474532a72460ab28f1bf", "message": "fix comments", "committedDate": "2020-10-07T03:55:59Z", "type": "commit"}, {"oid": "543b7ff99e32e4c7174f7d9d3487f3d7391c4f35", "url": "https://github.com/apache/helix/commit/543b7ff99e32e4c7174f7d9d3487f3d7391c4f35", "message": "minor fix", "committedDate": "2020-10-07T03:55:59Z", "type": "commit"}, {"oid": "28e821e4d5f1976a14db0bf9c3e21f5962b69a35", "url": "https://github.com/apache/helix/commit/28e821e4d5f1976a14db0bf9c3e21f5962b69a35", "message": "add more tests", "committedDate": "2020-10-07T04:31:53Z", "type": "commit"}, {"oid": "28e821e4d5f1976a14db0bf9c3e21f5962b69a35", "url": "https://github.com/apache/helix/commit/28e821e4d5f1976a14db0bf9c3e21f5962b69a35", "message": "add more tests", "committedDate": "2020-10-07T04:31:53Z", "type": "forcePushed"}]}