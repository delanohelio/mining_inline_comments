{"pr_number": 1552, "pr_title": "HBASE-24205 Create metric to know the number of reads that happens fr\u2026", "pr_createdAt": "2020-04-20T13:31:24Z", "pr_url": "https://github.com/apache/hbase/pull/1552", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDQzMQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412880431", "bodyText": "wrapper argument can be removed?", "author": "virajjasani", "createdAt": "2020-04-22T10:55:48Z", "path": "hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSourceFactoryImpl.java", "diffHunk": "@@ -45,6 +46,16 @@ private synchronized MetricsRegionAggregateSourceImpl getRegionAggregate() {\n     }\n   }\n \n+  private synchronized MetricsStoreAggregateSourceImpl\n+      getStoreAggregate(MetricsStoreWrapper wrapper) {", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1OTU4OA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414459588", "bodyText": "Ya not needed.", "author": "ramkrish86", "createdAt": "2020-04-24T10:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDc5Nw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412880797", "bodyText": "nit: Collections.newSetFromMap(new ConcurrentHashMap<>())", "author": "virajjasani", "createdAt": "2020-04-22T10:56:19Z", "path": "hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSourceImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;\n+import org.apache.hadoop.metrics2.lib.MetricsExecutorImpl;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreAggregateSourceImpl extends BaseSourceImpl\n+    implements MetricsStoreAggregateSource {\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreAggregateSourceImpl.class);\n+\n+  private final MetricsExecutorImpl executor = new MetricsExecutorImpl();\n+\n+  private final Set<MetricsStoreSource> storeSources =\n+      Collections.newSetFromMap(new ConcurrentHashMap<MetricsStoreSource, Boolean>());", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MTE4OQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414461189", "bodyText": "the compiler was saying some warnings. Hence left it as is.", "author": "ramkrish86", "createdAt": "2020-04-24T10:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTExMQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412881111", "bodyText": "Good to have LOG.error here?", "author": "virajjasani", "createdAt": "2020-04-22T10:56:50Z", "path": "hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSourceImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;\n+import org.apache.hadoop.metrics2.lib.MetricsExecutorImpl;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreAggregateSourceImpl extends BaseSourceImpl\n+    implements MetricsStoreAggregateSource {\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreAggregateSourceImpl.class);\n+\n+  private final MetricsExecutorImpl executor = new MetricsExecutorImpl();\n+\n+  private final Set<MetricsStoreSource> storeSources =\n+      Collections.newSetFromMap(new ConcurrentHashMap<MetricsStoreSource, Boolean>());\n+\n+  public MetricsStoreAggregateSourceImpl() {\n+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);\n+  }\n+\n+\n+  public MetricsStoreAggregateSourceImpl(String metricsName,\n+                                          String metricsDescription,\n+                                          String metricsContext,\n+                                          String metricsJmxContext) {\n+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);\n+\n+    // Every few mins clean the JMX cache.\n+    executor.getExecutor().scheduleWithFixedDelay(new Runnable() {\n+      public void run() {\n+        JmxCacheBuster.clearJmxCache();\n+      }\n+    }, 5, 5, TimeUnit.MINUTES);\n+  }\n+\n+  public MetricRegistry getMetricRegistry() {\n+    return registry;\n+  }\n+\n+  @Override\n+  public void register(MetricsStoreSource source) {\n+    storeSources.add(source);\n+    clearCache();\n+  }\n+\n+  @Override\n+  public void deregister(MetricsStoreSource toRemove) {\n+    try {\n+      storeSources.remove(toRemove);\n+    } catch (Exception e) {\n+      // Ignored. If this errors out it means that someone is double\n+      // closing the region source and the region is already nulled out.\n+      LOG.info(", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MzI3MQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414463271", "bodyText": "Actually the removal is not needed to handle throw catch. I just used what was being done in MetricsREgionAggregateSource. Seems that is not needed.", "author": "ramkrish86", "createdAt": "2020-04-24T10:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTY1OQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412881659", "bodyText": "We can remove conf", "author": "virajjasani", "createdAt": "2020-04-22T10:57:49Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStore.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+@InterfaceAudience.Private\n+public class MetricsStore {\n+  private final MetricsStoreSource source;\n+  private MetricsStoreWrapper storeWrapper;\n+\n+  public MetricsStore(final MetricsStoreWrapper wrapper, Configuration conf) {", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2Mzk0Mw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414463943", "bodyText": "Done.", "author": "ramkrish86", "createdAt": "2020-04-24T10:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjUzMg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412882532", "bodyText": "Would you like to use LOG somewhere? Or maybe dropped the idea and hence it's not being used?", "author": "virajjasani", "createdAt": "2020-04-22T10:59:08Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreWrapperImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.hadoop.metrics2.MetricsExecutor;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreWrapperImpl implements MetricsStoreWrapper, Closeable {\n+\n+  private final HStore store;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreWrapperImpl.class);", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NDM4OQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414464389", "bodyText": "Removed it.", "author": "ramkrish86", "createdAt": "2020-04-24T10:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4Mzc0NQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412883745", "bodyText": "Noted. For this change, is it good to give name memstoreDataSize ?", "author": "virajjasani", "createdAt": "2020-04-22T11:01:10Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreWrapperImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.hadoop.metrics2.MetricsExecutor;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreWrapperImpl implements MetricsStoreWrapper, Closeable {\n+\n+  private final HStore store;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreWrapperImpl.class);\n+\n+  public static final int PERIOD = 45;\n+  public static final String UNKNOWN = \"unknown\";\n+  private ScheduledExecutorService executor;\n+  private Runnable runnable;\n+  // add others also. check if anything is redundant\n+  private long numStoreFiles;\n+  private long memstoreSize;\n+  private long storeFileSize;\n+  private long getsFromMemstore;\n+  private long getsOnStore;\n+  private long getsOnFile;\n+  private long numReferenceFiles;\n+  private long minStoreFileAge;\n+  private long maxStoreFileAge;\n+  private long avgStoreFileAge;\n+  private long numHFiles;\n+  private int storeRefCount;\n+\n+  private ScheduledFuture<?> storeMetricUpdateTask;\n+\n+  public MetricsStoreWrapperImpl(HStore store) {\n+    this.store = store;\n+    this.executor = CompatibilitySingletonFactory.getInstance(MetricsExecutor.class).getExecutor();\n+    this.runnable = new HStoreMetricsWrapperRunnable();\n+    this.storeMetricUpdateTask =\n+        this.executor.scheduleWithFixedDelay(this.runnable, PERIOD, PERIOD, TimeUnit.SECONDS);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    storeMetricUpdateTask.cancel(true);\n+  }\n+\n+  @Override\n+  public String getStoreName() {\n+    return store.getColumnFamilyName();\n+  }\n+\n+  @Override\n+  public String getRegionName() {\n+    return store.getRegionInfo().getRegionNameAsString();\n+  }\n+\n+  @Override\n+  public String getTableName() {\n+    return store.getRegionInfo().getTable().getNameAsString();\n+  }\n+\n+  @Override\n+  public String getNamespace() {\n+    return store.getTableName().getNamespaceAsString();\n+  }\n+\n+  @Override\n+  public long getNumStoreFiles() {\n+    return numStoreFiles;\n+  }\n+\n+  @Override\n+  public long getMemStoreSize() {\n+    // todo : change this - we need to expose data, heapsize and offheapdatasize", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0NjA1OA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r413246058", "bodyText": "So that next time when we add heapsize and offheapdatasize, we can give name: memstoreHeapSize, memstoreOffHeapSize etc.\nYour call.", "author": "virajjasani", "createdAt": "2020-04-22T19:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4Mzc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NDUzNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414464537", "bodyText": "For now lets be it this way. All other metrics has to be changed. We can do it that time.", "author": "ramkrish86", "createdAt": "2020-04-24T10:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4Mzc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NDQ3MQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412884471", "bodyText": "executor and runnable both could be local variable", "author": "virajjasani", "createdAt": "2020-04-22T11:02:25Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreWrapperImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.hadoop.metrics2.MetricsExecutor;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreWrapperImpl implements MetricsStoreWrapper, Closeable {\n+\n+  private final HStore store;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreWrapperImpl.class);\n+\n+  public static final int PERIOD = 45;\n+  public static final String UNKNOWN = \"unknown\";\n+  private ScheduledExecutorService executor;\n+  private Runnable runnable;", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NjQ4Nw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414466487", "bodyText": "Sure.", "author": "ramkrish86", "createdAt": "2020-04-24T10:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NDQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzcyNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412887727", "bodyText": "Can be simplified to updateMetricsStore(!heap.current.isFileScanner())", "author": "virajjasani", "createdAt": "2020-04-22T11:08:03Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java", "diffHunk": "@@ -608,7 +613,17 @@ public boolean next(List<Cell> outResult, ScannerContext scannerContext) throws\n           if (f != null) {\n             cell = f.transformCell(cell);\n           }\n-\n+          // tracking gets only and currently per row\n+          // and not per cell. Even scans metrics at the region level are\n+          // being tracked row wise.\n+          if (get && !trackGets) {\n+            if (!heap.current.isFileScanner()) {\n+              updateMetricsStore(true);\n+            } else {\n+              updateMetricsStore(false);", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyMzIxNg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412923216", "bodyText": "This change is a must or it is an improvement? Just trying to understand it better :)", "author": "virajjasani", "createdAt": "2020-04-22T12:06:56Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2547,7 +2565,7 @@ public CacheConfig getCacheConfig() {\n   }\n \n   public static final long FIXED_OVERHEAD =\n-      ClassSize.align(ClassSize.OBJECT + (27 * ClassSize.REFERENCE) + (2 * Bytes.SIZEOF_LONG)\n+      ClassSize.align(ClassSize.OBJECT + (31 * ClassSize.REFERENCE) + (2 * Bytes.SIZEOF_LONG)", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMjQ1NQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428602455", "bodyText": "Actually here added 5 more refs but considering 4 only. And infact 4 is enough when u keep getRequestsFromMemstore  and getRequestsFromStore .\ngetRequestsFromStore => getRequests..  This is store anyways so 'FromStore' is implicit.", "author": "anoopsjohn", "createdAt": "2020-05-21T11:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyMzIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTk0Nw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r413235947", "bodyText": "This should be an else statement?", "author": "virajjasani", "createdAt": "2020-04-22T18:53:15Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2898,4 +2915,40 @@ public int getMaxCompactedStoreFileRefCount() {\n       ? maxCompactedStoreFileRefCount.getAsInt() : 0;\n   }\n \n+  @Override\n+  public long getReadRequestsFromStoreCount() {\n+    return getRequestsFromStore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromMemstore() {\n+    return getRequestsFromMemstore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromFile() {\n+    return getRequestsFromFile.sum();\n+  }\n+\n+  void incrGetRequestsFromStore() {\n+    getRequestsFromStore.increment();\n+    if (metricsStore != null) {\n+      metricsStore.updateGet();\n+    }\n+  }\n+\n+  void updateMetricsStore(boolean memstoreRead) {\n+    if (memstoreRead) {\n+      getRequestsFromMemstore.increment();\n+    } else {\n+      getRequestsFromFile.increment();\n+    }\n+    if (metricsStore != null) {\n+      if (memstoreRead) {\n+        metricsStore.updateMemstoreGet();\n+      }\n+      metricsStore.updateFileGet();", "originalCommit": "1dd15b7615f61fab4d27239c72ca970712f4b7f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2OTcwNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r414469707", "bodyText": "good catch. Thanks for the reviews.", "author": "ramkrish86", "createdAt": "2020-04-24T10:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTk0Nw=="}], "type": "inlineReview"}, {"oid": "3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "url": "https://github.com/apache/hbase/commit/3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "message": "Rebase with latest commit", "committedDate": "2020-05-05T10:40:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNzkwMQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r423007901", "bodyText": "So this will treat only one store under a region for this aggregation.\nWhen we want to see an aggregated metric across all the store instances (under diff regions) for a table, this wont help right? (I mean metric for table CF) Do you think that will be more useful?  The stuff of memstore hit rate and all at a CF level would be useful IMO.", "author": "anoopsjohn", "createdAt": "2020-05-11T12:37:02Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";\n+\n+  /**\n+   * The name of the metrics context that metrics will be under.\n+   */\n+  String METRICS_CONTEXT = \"regionserver\";\n+\n+  /**\n+   * Description\n+   */\n+  String METRICS_DESCRIPTION = \"Metrics about Stores under a region\";", "originalCommit": "3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0MTk1OA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r424941958", "bodyText": "I have now tried to consolidate the metric at the table level also. Pls have a look. @anoopsjohn .", "author": "ramkrish86", "createdAt": "2020-05-14T07:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNzkwMQ=="}], "type": "inlineReview"}, {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "url": "https://github.com/apache/hbase/commit/29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "message": "Adding the table vs store metric by consolidating", "committedDate": "2020-05-14T07:55:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTc0Mw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428581743", "bodyText": "#getsOnMemstore + #getsOnFile will be #get write?  Why we should keep both metric then?  We can keep only getsOnMemstore", "author": "anoopsjohn", "createdAt": "2020-05-21T10:52:58Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java", "diffHunk": "@@ -402,6 +402,8 @@\n   String DELETE_BATCH_KEY = \"deleteBatch\";\n   String GET_SIZE_KEY = \"getSize\";\n   String GET_KEY = \"get\";\n+  String MEMSTORE_GET_KEY = \"getsOnMemstore\";\n+  String FILE_GET_KEY = \"getsOnFile\";", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NzQ5Mg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428787492", "bodyText": "Some of the gets that lands on the StoreScanners does not actually get accounted into actual get. Probably that row does not exist. So I thought it is better to track both. Also the overhead is very minimal.", "author": "ramkrish86", "createdAt": "2020-05-21T17:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNjExNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434206117", "bodyText": "When discrepancy, how will operators figure out why the discrepancy?\nOr, why don't we count gets for which there is no row?", "author": "saintstack", "createdAt": "2020-06-02T22:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNzk1Nw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434207957", "bodyText": "In other words, it'd be better if the accounting aligned.", "author": "saintstack", "createdAt": "2020-06-02T22:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4OTc1NQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428589755", "bodyText": "We are collecting the metric at every store level and then aggregating over region also?  Do we need that? A region might have say 3 CFs out of which only one is getting recent data gets. Aggregate at region level for these 3 CFs, how that can be used?  IMO we can avoid this.  And keep aggregate only at the RS level for table:cf", "author": "anoopsjohn", "createdAt": "2020-05-21T11:12:19Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -302,6 +302,14 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n               regionNamePrefix + MetricsRegionSource.MAX_FLUSH_QUEUE_SIZE,\n               MetricsRegionSource.MAX_FLUSH_QUEUE_DESC),\n           this.regionWrapper.getMaxFlushQueueSize());\n+      mrb.addCounter(", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4ODMyNg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428788326", "bodyText": "At the store level only it comes as per region per store. This is something we already have. Jut adding those two new metric here. So should be ok.", "author": "ramkrish86", "createdAt": "2020-05-21T17:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4OTc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODk5Nw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434208997", "bodyText": "I don't follow the above. We already have account at the store level per region? Why then would we add these counters?", "author": "saintstack", "createdAt": "2020-06-02T22:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4OTc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NDM1MA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428594350", "bodyText": "Yes here.. No need to fileReads.", "author": "anoopsjohn", "createdAt": "2020-05-21T11:24:04Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreSourceImpl.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.hadoop.hbase.metrics.Counter;\n+import org.apache.hadoop.hbase.metrics.Interns;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreSourceImpl implements MetricsStoreSource {\n+\n+  private MetricsStoreWrapper storeWrapper;\n+  private MetricsStoreAggregateSourceImpl aggreagate;\n+  private AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private String storeNamePrefix;\n+  private final MetricRegistry registry;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreSourceImpl.class);\n+  String storeReadsKey;\n+\n+  String memstoreReadsKey;\n+  String fileReadsKey;\n+  private final Counter storeReads;\n+  private final Counter memstoreReads;\n+  private final Counter fileReads;", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NjMyNQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428596325", "bodyText": "Pls correct log\nfor store storeWrapper.getRegionName() + \" : \" + storeWrapper.getStoreName()", "author": "anoopsjohn", "createdAt": "2020-05-21T11:28:46Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreSourceImpl.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.hadoop.hbase.metrics.Counter;\n+import org.apache.hadoop.hbase.metrics.Interns;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreSourceImpl implements MetricsStoreSource {\n+\n+  private MetricsStoreWrapper storeWrapper;\n+  private MetricsStoreAggregateSourceImpl aggreagate;\n+  private AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private String storeNamePrefix;\n+  private final MetricRegistry registry;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreSourceImpl.class);\n+  String storeReadsKey;\n+\n+  String memstoreReadsKey;\n+  String fileReadsKey;\n+  private final Counter storeReads;\n+  private final Counter memstoreReads;\n+  private final Counter fileReads;\n+\n+  public MetricsStoreSourceImpl(MetricsStoreWrapper storeWrapper,\n+      MetricsStoreAggregateSourceImpl aggreagate) {\n+    this.storeWrapper = storeWrapper;\n+    this.aggreagate = aggreagate;\n+    aggreagate.register(this);\n+\n+    LOG.debug(\"Creating new MetricsRegionSourceImpl for table \" + storeWrapper.getStoreName() + \" \"", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NzgwMw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428597803", "bodyText": "Why all these storeFile related metric comes here as part of this?", "author": "anoopsjohn", "createdAt": "2020-05-21T11:32:08Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreSourceImpl.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.hadoop.hbase.metrics.Counter;\n+import org.apache.hadoop.hbase.metrics.Interns;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreSourceImpl implements MetricsStoreSource {\n+\n+  private MetricsStoreWrapper storeWrapper;\n+  private MetricsStoreAggregateSourceImpl aggreagate;\n+  private AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private String storeNamePrefix;\n+  private final MetricRegistry registry;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreSourceImpl.class);\n+  String storeReadsKey;\n+\n+  String memstoreReadsKey;\n+  String fileReadsKey;\n+  private final Counter storeReads;\n+  private final Counter memstoreReads;\n+  private final Counter fileReads;\n+\n+  public MetricsStoreSourceImpl(MetricsStoreWrapper storeWrapper,\n+      MetricsStoreAggregateSourceImpl aggreagate) {\n+    this.storeWrapper = storeWrapper;\n+    this.aggreagate = aggreagate;\n+    aggreagate.register(this);\n+\n+    LOG.debug(\"Creating new MetricsRegionSourceImpl for table \" + storeWrapper.getStoreName() + \" \"\n+        + storeWrapper.getRegionName());\n+\n+    // we are using the hbase-metrics API\n+    registry = aggreagate.getMetricRegistry();\n+\n+    storeNamePrefix = \"Namespace_\" + storeWrapper.getNamespace() + \"_table_\"\n+        + storeWrapper.getTableName() + \"_region_\" + storeWrapper.getRegionName() + \"_store_\"\n+        + storeWrapper.getStoreName() + \"_metric_\";\n+\n+    String suffix = \"Count\";\n+\n+    storeReadsKey = storeNamePrefix + MetricsRegionServerSource.GET_KEY + suffix;\n+    // all the counters are hbase-metrics API\n+    storeReads = registry.counter(storeReadsKey);\n+\n+    memstoreReadsKey = storeNamePrefix + MetricsRegionServerSource.MEMSTORE_GET_KEY + suffix;\n+    memstoreReads = registry.counter(memstoreReadsKey);\n+\n+    fileReadsKey = storeNamePrefix + MetricsRegionServerSource.FILE_GET_KEY + suffix;\n+    fileReads = registry.counter(fileReadsKey);\n+\n+  }\n+\n+  @Override\n+  public void close() {\n+    boolean wasClosed = closed.getAndSet(true);\n+\n+    // Has someone else already closed this for us?\n+    if (wasClosed) {\n+      return;\n+    }\n+\n+    // Before removing the metrics remove this region from the aggregate region bean.\n+    // This should mean that it's unlikely that snapshot and close happen at the same time.\n+    aggreagate.deregister(this);\n+\n+    // While it's un-likely that snapshot and close happen at the same time it's still possible.\n+    // So grab the lock to ensure that all calls to snapshot are done before we remove the metrics\n+    synchronized (this) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Removing store Metrics: \" + storeWrapper.getStoreName());\n+      }\n+\n+      registry.remove(storeReadsKey);\n+      registry.remove(memstoreReadsKey);\n+      registry.remove(fileReadsKey);\n+\n+      storeWrapper = null;\n+    }\n+  }\n+\n+  @Override\n+  public int compareTo(MetricsStoreSource source) {\n+    if (!(source instanceof MetricsStoreSourceImpl)) {\n+      return -1;\n+    }\n+\n+    MetricsStoreSourceImpl impl = (MetricsStoreSourceImpl) source;\n+    if (impl == null) {\n+      return -1;\n+    }\n+\n+    // TODO : make this better\n+    return Long.compare(this.storeWrapper.getStoreName().hashCode(),\n+      impl.storeWrapper.getStoreName().hashCode());\n+  }\n+\n+  @Override\n+  public void updateGet() {\n+    storeReads.increment();\n+  }\n+\n+  @Override\n+  public void updateMemtoreGet() {\n+    memstoreReads.increment();\n+  }\n+\n+  @Override\n+  public void updateFileGet() {\n+    fileReads.increment();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    return obj == this\n+        || (obj instanceof MetricsStoreSourceImpl && compareTo((MetricsStoreSourceImpl) obj) == 0);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return this.storeWrapper.getStoreName().hashCode();\n+  }\n+\n+  void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n+\n+    // If there is a close that started be double extra sure\n+    // that we're not getting any locks and not putting data\n+    // into the metrics that should be removed. So early out\n+    // before even getting the lock.\n+    if (closed.get()) {\n+      return;\n+    }\n+\n+    // Grab the read\n+    // This ensures that removes of the metrics\n+    // can't happen while we are putting them back in.\n+    synchronized (this) {\n+\n+      // It's possible that a close happened between checking\n+      // the closed variable and getting the lock.\n+      if (closed.get()) {\n+        return;\n+      }\n+      mrb.addGauge(Interns.info(storeNamePrefix + MetricsRegionServerSource.STOREFILE_COUNT,", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4ODgwNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428788807", "bodyText": "At region level we had the aggregation across stores. Here it is per store. Just aggregation . We don do anything here to evaluate all this.", "author": "ramkrish86", "createdAt": "2020-05-21T17:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NzgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMDc2Mw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428600763", "bodyText": "Here we are not adding aggregate of total gets on table:cf?", "author": "anoopsjohn", "createdAt": "2020-05-21T11:39:39Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableSourceImpl.java", "diffHunk": "@@ -311,6 +320,25 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n         mrb.addGauge(Interns.info(tableNamePrefix + MetricsRegionServerSource.NUM_REFERENCE_FILES,\n             MetricsRegionServerSource.NUM_REFERENCE_FILES_DESC),\n             tableWrapperAgg.getNumReferenceFiles(tableName.getNameAsString()));\n+        addGauge(mrb, tableWrapperAgg.getMemstoreReadRequestCount(tableName.getNameAsString()),", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMTI0NQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428601245", "bodyText": "Same here..  All places we can keep totalReads metric and memstoreReads. That should be enough to understand the pattern.", "author": "anoopsjohn", "createdAt": "2020-05-21T11:40:52Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregate.java", "diffHunk": "@@ -107,6 +109,13 @@\n    */\n   long getNumReferenceFiles(String table);\n \n+  /**\n+   * @return number of get requests on memstore for this table\n+   */\n+  Map<String, Long> getMemstoreReadRequestCount(String table);\n \n-\n+  /**\n+   * @return number of get requests from file for this table\n+   */\n+  Map<String, Long> getFileRequestCount(String table);", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMzM2MA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428603360", "bodyText": "Actually we need to keep this counter here as well as update the counter on Metrics also?  The local Counter is used by?", "author": "anoopsjohn", "createdAt": "2020-05-21T11:45:54Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2884,4 +2901,41 @@ public int getMaxCompactedStoreFileRefCount() {\n       ? maxCompactedStoreFileRefCount.getAsInt() : 0;\n   }\n \n+  @Override\n+  public long getReadRequestsFromStoreCount() {\n+    return getRequestsFromStore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromMemstore() {\n+    return getRequestsFromMemstore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromFile() {\n+    return getRequestsFromFile.sum();\n+  }\n+\n+  void incrGetRequestsFromStore() {\n+    getRequestsFromStore.increment();", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5NjA4OQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r430396089", "bodyText": "The one direclty inder HStore is used by the Region level and Table level aggregators which deals with HStore. This gets printed periodically. The other one is at the MetricsStore level which is the real time one. For every request it will be displayed at JMX MBean level.", "author": "ramkrish86", "createdAt": "2020-05-26T13:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMzM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNTkwMQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428605901", "bodyText": "Why this change? If any bug fix, pls keep it as another Jira", "author": "anoopsjohn", "createdAt": "2020-05-21T11:52:07Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregateImpl.java", "diffHunk": "@@ -70,25 +69,36 @@ public void run() {\n           localMetricsTableMap.put(tbl, mt);\n         }\n         if (r.getStores() != null) {\n+          long memstoreReadCount = 0l;\n+          long fileReadCount = 0l;\n+          String familyName = null;\n           for (Store store : r.getStores()) {\n+            familyName = store.getColumnFamilyName();\n+\n             mt.storeFileCount += store.getStorefilesCount();\n-            mt.memstoreSize += (store.getMemStoreSize().getDataSize() +\n-              store.getMemStoreSize().getHeapSize() + store.getMemStoreSize().getOffHeapSize());\n+            mt.memstoreSize += (store.getMemStoreSize().getDataSize()\n+                + store.getMemStoreSize().getHeapSize() + store.getMemStoreSize().getOffHeapSize());\n             mt.storeFileSize += store.getStorefilesSize();\n             mt.referenceFileCount += store.getNumReferenceFiles();\n \n-            mt.maxStoreFileAge = Math.max(mt.maxStoreFileAge, store.getMaxStoreFileAge().getAsLong());\n-            mt.minStoreFileAge = Math.min(mt.minStoreFileAge, store.getMinStoreFileAge().getAsLong());\n-            mt.totalStoreFileAge = (long)store.getAvgStoreFileAge().getAsDouble() *\n-                store.getStorefilesCount();\n+            mt.maxStoreFileAge =\n+                Math.max(mt.maxStoreFileAge, store.getMaxStoreFileAge().getAsLong());\n+            mt.minStoreFileAge =\n+                Math.min(mt.minStoreFileAge, store.getMinStoreFileAge().getAsLong());\n+            mt.totalStoreFileAge =\n+                (long) store.getAvgStoreFileAge().getAsDouble() * store.getStorefilesCount();\n             mt.storeCount += 1;\n+            memstoreReadCount += store.getGetRequestsCountFromMemstore();\n+            fileReadCount += store.getGetRequestsCountFromFile();\n+            mt.storeMemstoreGetCount.putIfAbsent(familyName, memstoreReadCount);\n+            mt.storeFileGetCount.putIfAbsent(familyName, fileReadCount);\n           }\n+\n           mt.regionCount += 1;\n \n           mt.readRequestCount += r.getReadRequestsCount();\n-          mt.filteredReadRequestCount += getFilteredReadRequestCount(tbl.getNameAsString());\n+          mt.filteredReadRequestCount += r.getFilteredReadRequestsCount();", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwNTgyNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r430405827", "bodyText": "This was wrong. It is a simple change. So I thought it is better to make this change hhere. If you are particular i can make the change in separete JIRA.", "author": "ramkrish86", "createdAt": "2020-05-26T13:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNTkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNTY3OQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428615679", "bodyText": "This will do all the deregister stuff?", "author": "anoopsjohn", "createdAt": "2020-05-21T12:15:52Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1002,6 +1012,14 @@ public Void call() throws IOException {\n     } finally {\n       this.lock.writeLock().unlock();\n       this.archiveLock.unlock();\n+      // moving it after the unlocking so\n+      // that metrics closure does not affect them\n+      if (this.metricsStore != null) {\n+        metricsStore.close();", "originalCommit": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4OTE5NA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428789194", "bodyText": "Yes. It will do the deregister.", "author": "ramkrish86", "createdAt": "2020-05-21T17:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNTY3OQ=="}], "type": "inlineReview"}, {"oid": "7860d769b3911ff1e1ce6923688d166ee699e7f5", "url": "https://github.com/apache/hbase/commit/7860d769b3911ff1e1ce6923688d166ee699e7f5", "message": "Track for full row and then increment either memstore or file read\nmetric", "committedDate": "2020-05-29T14:00:41Z", "type": "forcePushed"}, {"oid": "66e0d8ffb5122019916a420a35c0372e17774212", "url": "https://github.com/apache/hbase/commit/66e0d8ffb5122019916a420a35c0372e17774212", "message": "Only increment the memstore metric if all cells are from memstore, if\nnot treat as mixed reads", "committedDate": "2020-06-02T14:32:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODQ2MA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434208460", "bodyText": "Yeah, don't we have this accounted already? Seems redundant.", "author": "saintstack", "createdAt": "2020-06-02T22:24:52Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSource.java", "diffHunk": "@@ -53,6 +53,10 @@\n   String COPROCESSOR_EXECUTION_STATISTICS_DESC = \"Statistics for coprocessor execution times\";\n   String REPLICA_ID = \"replicaid\";\n   String REPLICA_ID_DESC = \"The replica ID of a region. 0 is primary, otherwise is secondary\";\n+  String READ_REQUEST_ON_MEMSTORE = \"readRequestCountOnMemstore\";\n+  String READ_REQUEST_ON_MEMSTORE_DESC = \"Reads happening out of memstore\";\n+  String MIXED_READ_REQUEST_ON_STORE = \"mixedReadRequestCountOnStore\";\n+  String MIXED_READ_REQUEST_ON_STORE_DESC = \"Reads happening out of files and memstore on store\";", "originalCommit": "66e0d8ffb5122019916a420a35c0372e17774212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNDM0MQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434304341", "bodyText": "The one above is not needed - MEMSTORE_GET_KEY  and FILE_GET_KEY  in MetricsREgionServerSource because I had removed all those additional metric.", "author": "ramkrish86", "createdAt": "2020-06-03T04:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODQ2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNDM4NA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434304384", "bodyText": "That constants I did not clean up.", "author": "ramkrish86", "createdAt": "2020-06-03T04:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTI4Mw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434209283", "bodyText": "... this if for the Region?  Can I ask for the number of reads on memstore on a Store?", "author": "saintstack", "createdAt": "2020-06-02T22:27:04Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java", "diffHunk": "@@ -170,4 +170,15 @@\n    *   all compacted store files that belong to this region\n    */\n   long getMaxCompactedStoreFileRefCount();\n+\n+  /**\n+   * @return the number of reads on memstore\n+   */\n+  long getMemstoreReadRequestsCount();", "originalCommit": "66e0d8ffb5122019916a420a35c0372e17774212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNDgxOA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434304818", "bodyText": "I just followed a model where currently we have accouting at table level and region level. So following the same path - We added per region per store metric and this one is nothing but a region level aggregation. This will tell on the region how many reads are from memstore. (across all stores).", "author": "ramkrish86", "createdAt": "2020-06-03T04:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTYxNQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434209615", "bodyText": "Metrics for a Store for more than one Store? If for more than one Store, why not in Region?", "author": "saintstack", "createdAt": "2020-06-02T22:27:57Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";", "originalCommit": "66e0d8ffb5122019916a420a35c0372e17774212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTc2Mg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434209762", "bodyText": "If a single Store, should be called 'Store' not 'Stores'?", "author": "saintstack", "createdAt": "2020-06-02T22:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNDg5MQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434304891", "bodyText": "Ok .will make it Store.", "author": "ramkrish86", "createdAt": "2020-06-03T04:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc3NA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434210774", "bodyText": "This model doesn't seem right. There is no such thing as a Store on a RegionServer. The RegionServer hosts Regions. A Region hosts Stores.  This is an aggregate of all Stores on the RegionServer?\nI could imagine RegionServer,sub=Region,sub=Store... with a Bean per Store but then we'd probably have too many MBeans.\nDo we have a Region at this level in MBean hierarchy?", "author": "saintstack", "createdAt": "2020-06-02T22:31:16Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";\n+\n+  /**\n+   * The name of the metrics context that metrics will be under.\n+   */\n+  String METRICS_CONTEXT = \"regionserver\";\n+\n+  /**\n+   * Description\n+   */\n+  String METRICS_DESCRIPTION = \"Metrics about Stores under a region\";\n+\n+  /**\n+   * The name of the metrics context that metrics will be under in jmx\n+   */\n+  String METRICS_JMX_CONTEXT = \"RegionServer,sub=\" + METRICS_NAME;", "originalCommit": "66e0d8ffb5122019916a420a35c0372e17774212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2OTEzNA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434369134", "bodyText": "I was just trying to push all the store level metric per region under this. that is why collected it under RegionServer.", "author": "ramkrish86", "createdAt": "2020-06-03T07:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3NjQ3OA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434376478", "bodyText": "And seeing ur other comment -  this is where yo uwill get per region under each store I have how many requests. If I want to remove this then I may have to do something like how it has been done for Table vs Store - we will have region vs store (and it will be at the region level only).", "author": "ramkrish86", "createdAt": "2020-06-03T07:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5ODIzMg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434598232", "bodyText": "I think to avoid this problem of having another metric exposed at Store level which will list all the region names and its corresponding read metrics and also we have a region level metric where we expose across all stores in that region how many reads happened.\nBoth come under different Mbean - one is sub=Regions and another is sub=Stores. (this is added newly in this patch)\nThe patch already has an aggregated metric at the Table level where we report a metric\n\nNameSpace_table_store_metric\nWe will just use this and add a similar metric at the region level which aggregates it per store\nas we have for table level. Will that be ok ?\n@saintstack - what you think?", "author": "ramkrish86", "createdAt": "2020-06-03T14:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc3NA=="}], "type": "inlineReview"}, {"oid": "04836c048d54b44c533465377776c9a70e3fa101", "url": "https://github.com/apache/hbase/commit/04836c048d54b44c533465377776c9a70e3fa101", "message": "Remove metricsstore and aggregate at region level", "committedDate": "2020-06-03T14:23:49Z", "type": "forcePushed"}, {"oid": "dbfc3d0a3c2ca8a7329cfb9771921cd077b8d454", "url": "https://github.com/apache/hbase/commit/dbfc3d0a3c2ca8a7329cfb9771921cd077b8d454", "message": "HBASE-24205 Create metric to know the number of reads that happens from memstore", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "e43ed9c6203be957676ff9bb057f607375c82279", "url": "https://github.com/apache/hbase/commit/e43ed9c6203be957676ff9bb057f607375c82279", "message": "Fix checkstyles and whitespaces", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "002e7ecd800fad1d95a4aa932f62c5904a6d65d6", "url": "https://github.com/apache/hbase/commit/002e7ecd800fad1d95a4aa932f62c5904a6d65d6", "message": "Checkstyl, whitespace and javadoc", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "9e44c4a71b83df9258e4fff0548bb02ecdfbabab", "url": "https://github.com/apache/hbase/commit/9e44c4a71b83df9258e4fff0548bb02ecdfbabab", "message": "Fixed review comments", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "5844bdb55b83fd685132b982b87e3828b9931e7f", "url": "https://github.com/apache/hbase/commit/5844bdb55b83fd685132b982b87e3828b9931e7f", "message": "Fix unused imports", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "b9a04b05ce8fb4e93075d9299d9fdeca8ce4b8b5", "url": "https://github.com/apache/hbase/commit/b9a04b05ce8fb4e93075d9299d9fdeca8ce4b8b5", "message": "Rebase with latest commit", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "41670b30f29cb89eb1473333bf6e3c4479cc67ab", "url": "https://github.com/apache/hbase/commit/41670b30f29cb89eb1473333bf6e3c4479cc67ab", "message": "Adding the table vs store metric by consolidating", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "5c254a354e6673407be9f6f1f332101a19ff2812", "url": "https://github.com/apache/hbase/commit/5c254a354e6673407be9f6f1f332101a19ff2812", "message": "Combine get and scan metrics and make all relevant changes", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "32c1a82787944758d4a92bfb4e09e1651f0ffc2d", "url": "https://github.com/apache/hbase/commit/32c1a82787944758d4a92bfb4e09e1651f0ffc2d", "message": "Track for full row and then increment either memstore or file read\nmetric", "committedDate": "2020-06-11T11:48:48Z", "type": "commit"}, {"oid": "923f356f49eed9877729f68d5591a4035b7f4c8d", "url": "https://github.com/apache/hbase/commit/923f356f49eed9877729f68d5591a4035b7f4c8d", "message": "TestMetricsStore test fix", "committedDate": "2020-06-11T11:48:49Z", "type": "commit"}, {"oid": "e481f99fff85ae6f695b519a008c7f14df95ffd4", "url": "https://github.com/apache/hbase/commit/e481f99fff85ae6f695b519a008c7f14df95ffd4", "message": "Only increment the memstore metric if all cells are from memstore, if\nnot treat as mixed reads", "committedDate": "2020-06-11T11:48:49Z", "type": "commit"}, {"oid": "d0f89d5088e228a109bb859d18290b0769369c83", "url": "https://github.com/apache/hbase/commit/d0f89d5088e228a109bb859d18290b0769369c83", "message": "Remove metricsstore and aggregate at region level", "committedDate": "2020-06-11T11:48:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQyOQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r438696429", "bodyText": "Here the key will be <regionName>_<storeName>?\nAt this level we should call CF not store?", "author": "anoopsjohn", "createdAt": "2020-06-11T10:41:06Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableSourceImpl.java", "diffHunk": "@@ -311,6 +322,27 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n         mrb.addGauge(Interns.info(tableNamePrefix + MetricsRegionServerSource.NUM_REFERENCE_FILES,\n             MetricsRegionServerSource.NUM_REFERENCE_FILES_DESC),\n             tableWrapperAgg.getNumReferenceFiles(tableName.getNameAsString()));\n+        addGauge(mrb, tableWrapperAgg.getMemstoreReadRequestsCount(tableName.getNameAsString()),\n+          MetricsRegionSource.READ_REQUEST_ON_MEMSTORE,\n+          MetricsRegionSource.READ_REQUEST_ON_MEMSTORE_DESC);\n+        addGauge(mrb, tableWrapperAgg.getMixedRequestsCount(tableName.getNameAsString()),\n+          MetricsRegionSource.MIXED_READ_REQUEST_ON_STORE,\n+          MetricsRegionSource.MIXED_READ_REQUEST_ON_STORE_DESC);\n+      }\n+    }\n+  }\n+\n+  private void addGauge(MetricsRecordBuilder mrb, Map<String, Long> metricMap, String metricName,\n+      String metricDesc) {\n+    if (metricMap != null) {\n+      Iterator<Entry<String, Long>> iterator = metricMap.entrySet().iterator();\n+      while (iterator.hasNext()) {\n+        Entry<String, Long> entry = iterator.next();\n+        // append 'store' and its name to the metric\n+        mrb.addGauge(Interns.info(this.tableNamePrefixPart1 + _STORE\n+            + entry.getKey().split(MetricsTableWrapperAggregate.UNDERSCORE)[1]", "originalCommit": "04836c048d54b44c533465377776c9a70e3fa101", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MTE2Mw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r439581163", "bodyText": "You mean the key should be Columnfamily? So _STORE - that should be _ColumnFamily?", "author": "ramkrish86", "createdAt": "2020-06-12T18:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYxMTkyMg==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r439611922", "bodyText": "Store is an instance of CF. So here what we have is an aggregated value across all instances (Stores) of a given CF in a table. So the name CF make sense than STORE? WDYT", "author": "anoopsjohn", "createdAt": "2020-06-12T19:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzOTY4OA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440939688", "bodyText": "This looks like it was addressed.", "author": "saintstack", "createdAt": "2020-06-16T15:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NzEzNw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r438697137", "bodyText": "We dont say whether it is read reqs in this method name.  This is the total  #rows reads from this Store right?  Can we name in that way and avoid the term mixed?", "author": "anoopsjohn", "createdAt": "2020-06-11T10:42:37Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregate.java", "diffHunk": "@@ -107,6 +109,13 @@\n    */\n   long getNumReferenceFiles(String table);\n \n+  /**\n+   * @return number of get requests from memstore per store for this table\n+   */\n+  Map<String, Long> getMemstoreReadRequestsCount(String table);\n \n-\n+  /**\n+   * @return number of get requests from file per store for this table\n+   */\n+  Map<String, Long> getMixedRequestsCount(String table);", "originalCommit": "04836c048d54b44c533465377776c9a70e3fa101", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "url": "https://github.com/apache/hbase/commit/66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "message": "Addresses review comments-metric name updated everywhere", "committedDate": "2020-06-12T05:09:50Z", "type": "commit"}, {"oid": "66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "url": "https://github.com/apache/hbase/commit/66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "message": "Addresses review comments-metric name updated everywhere", "committedDate": "2020-06-12T05:09:50Z", "type": "forcePushed"}, {"oid": "a46d74fbdf256b342b7b06ab78e739cca17e3b8f", "url": "https://github.com/apache/hbase/commit/a46d74fbdf256b342b7b06ab78e739cca17e3b8f", "message": "Metric name change", "committedDate": "2020-06-12T10:42:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Mzc3NA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r439553774", "bodyText": "Is this a bug fix? (Like the one below) .. Can u explain .. Previously it was a config based thing and now hard coded.", "author": "anoopsjohn", "createdAt": "2020-06-12T17:32:37Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregateImpl.java", "diffHunk": "@@ -41,39 +40,42 @@\n   private final HRegionServer regionServer;\n   private ScheduledExecutorService executor;\n   private Runnable runnable;\n-  private long period;\n+  private static final int PERIOD = 45;\n   private ScheduledFuture<?> tableMetricsUpdateTask;\n   private ConcurrentHashMap<TableName, MetricsTableValues> metricsTableMap\n     = new ConcurrentHashMap<>();\n \n   public MetricsTableWrapperAggregateImpl(final HRegionServer regionServer) {\n     this.regionServer = regionServer;\n-    this.period = regionServer.getConfiguration().getLong(HConstants.REGIONSERVER_METRICS_PERIOD,\n-      HConstants.DEFAULT_REGIONSERVER_METRICS_PERIOD) + 1000;\n     this.executor = CompatibilitySingletonFactory.getInstance(MetricsExecutor.class).getExecutor();\n     this.runnable = new TableMetricsWrapperRunnable();\n-    this.tableMetricsUpdateTask = this.executor.scheduleWithFixedDelay(this.runnable, period,\n-      this.period, TimeUnit.MILLISECONDS);\n+    this.tableMetricsUpdateTask = this.executor.scheduleWithFixedDelay(this.runnable, PERIOD,", "originalCommit": "a46d74fbdf256b342b7b06ab78e739cca17e3b8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MDYwOA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r439580608", "bodyText": "This is not a bug fix and also the config based update I believe it was just added because the MetricsREgionServer based aggregate therad was having that config. But if you see the MetricRegionSource it is same 45 sec. The period of updation was rather too frequent. I just changed it to be in sync with MetricREgionSource.", "author": "ramkrish86", "createdAt": "2020-06-12T18:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Mzc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYxMTE2Ng==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r439611166", "bodyText": "I would request to keep this out of this PR.  Raise another specific Jira to address this issue and may be below one also and get it committed as part of that. Later it will be easy for some one who is searching the change history/ bug fix history.", "author": "anoopsjohn", "createdAt": "2020-06-12T19:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Mzc3NA=="}], "type": "inlineReview"}, {"oid": "4252420b08217bd33ee15f890bc791769640a4ab", "url": "https://github.com/apache/hbase/commit/4252420b08217bd33ee15f890bc791769640a4ab", "message": "Review comment changes", "committedDate": "2020-06-13T14:52:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNTU3Nw==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440935577", "bodyText": "We still need this count? We don't have it already with the general read count?", "author": "saintstack", "createdAt": "2020-06-16T15:20:01Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -302,6 +308,24 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n               regionNamePrefix + MetricsRegionSource.MAX_FLUSH_QUEUE_SIZE,\n               MetricsRegionSource.MAX_FLUSH_QUEUE_DESC),\n           this.regionWrapper.getMaxFlushQueueSize());\n+      addCounter(mrb, this.regionWrapper.getMemstoreOnlyRowReadsCount(),\n+        MetricsRegionSource.ROW_READS_ONLY_ON_MEMSTORE,\n+        MetricsRegionSource.ROW_READS_ONLY_ON_MEMSTORE_DESC);\n+      addCounter(mrb, this.regionWrapper.getMixedRowReadsCount(),\n+        MetricsRegionSource.MIXED_ROW_READS,\n+        MetricsRegionSource.MIXED_ROW_READS_ON_STORE_DESC);", "originalCommit": "4252420b08217bd33ee15f890bc791769640a4ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDUxNQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440940515", "bodyText": "My aversion to the extra counting is that we already do so much; it costs us loads in cpu. Was trying to do less if we can.", "author": "saintstack", "createdAt": "2020-06-16T15:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzMzcyMQ==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r441333721", "bodyText": "Are asking in terms of CPU that we add on while collecting the metric? Ifyou see we do collect the metric at the HStore level per row when the StoreScanner completes a row process. That is now a longadder. Seems it is more performant than AtomicLong. Also the above change that we have done at the region level is nothing but just get that metric when that runnable thread keeps running. We don do any metric collection at this level. Are you still thinking it may be a problem. @saintstack ? BTW thanks for your review here.", "author": "ramkrish86", "createdAt": "2020-06-17T07:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNTU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzNTk3Ng==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r441335976", "bodyText": "We don't have it already with the general read count?\n\nThis is a read count across all stores. But now what we get additionally is per store how much is the read count that hit both memstore and files - also one more where we say how many rows per store came out of memstore only. Ideally the sum of these values per store should be equal to the total read count per region.", "author": "ramkrish86", "createdAt": "2020-06-17T07:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNTU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNzQxNA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440937414", "bodyText": "This 'metric' addition to name was of no value?", "author": "saintstack", "createdAt": "2020-06-16T15:21:51Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -77,10 +83,10 @@ public MetricsRegionSourceImpl(MetricsRegionWrapper regionWrapper,\n \n     registry = agg.getMetricsRegistry();\n \n-    regionNamePrefix = \"Namespace_\" + regionWrapper.getNamespace() +\n-        \"_table_\" + regionWrapper.getTableName() +\n-        \"_region_\" + regionWrapper.getRegionName()  +\n-        \"_metric_\";\n+    regionNamePrefix1 = \"Namespace_\" + regionWrapper.getNamespace() + \"_table_\"\n+        + regionWrapper.getTableName() + \"_region_\" + regionWrapper.getRegionName();\n+    regionNamePrefix2 = \"_metric_\";", "originalCommit": "4252420b08217bd33ee15f890bc791769640a4ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzODIxOA==", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440938218", "bodyText": "Yeah, do we need to keep this count? It doesn't overlap w/ another?", "author": "saintstack", "createdAt": "2020-06-16T15:22:49Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java", "diffHunk": "@@ -170,4 +172,15 @@\n    *   all compacted store files that belong to this region\n    */\n   long getMaxCompactedStoreFileRefCount();\n+\n+  /**\n+   * @return the number of row reads completely on memstore per store\n+   */\n+  Map<String, Long> getMemstoreOnlyRowReadsCount();\n+\n+  /**\n+   * @return the number of row reads on memstore and file per store\n+   */\n+  Map<String, Long> getMixedRowReadsCount();", "originalCommit": "4252420b08217bd33ee15f890bc791769640a4ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}