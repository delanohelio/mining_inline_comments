{"pr_number": 1279, "pr_title": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by t\u2026", "pr_createdAt": "2020-03-12T07:34:05Z", "pr_url": "https://github.com/apache/hbase/pull/1279", "timeline": [{"oid": "d57bdab63832c4c3c305fcdaea91f5e8ec622d73", "url": "https://github.com/apache/hbase/commit/d57bdab63832c4c3c305fcdaea91f5e8ec622d73", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table", "committedDate": "2020-03-12T07:44:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMTI3Mg==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391521272", "bodyText": "Add javadoc for the parameter of balanceCluster and balanceTable?", "author": "infraio", "createdAt": "2020-03-12T10:17:22Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java", "diffHunk": "@@ -89,18 +89,18 @@\n   void setMasterServices(MasterServices masterServices);\n \n   /**\n-   * Perform the major balance operation\n+   * Perform the major balance operation for cluster\n    * @return List of plans\n    */", "originalCommit": "d57bdab63832c4c3c305fcdaea91f5e8ec622d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "url": "https://github.com/apache/hbase/commit/5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table", "committedDate": "2020-03-12T11:34:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NjA5MQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391646091", "bodyText": "Why synchronized?", "author": "infraio", "createdAt": "2020-03-12T14:09:17Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java", "diffHunk": "@@ -1639,6 +1641,44 @@ private void roundRobinAssignment(Cluster cluster, List<RegionInfo> regions,\n     }\n   }\n \n+  private Map<ServerName, List<RegionInfo>> toEnsumbleTableClusterLoad(\n+      Map<TableName, Map<ServerName, List<RegionInfo>>> clusterLoadPerTable) {\n+    Map<ServerName, List<RegionInfo>> returnMap = new TreeMap<>();\n+    for (Map<ServerName, List<RegionInfo>> serverNameListMap : clusterLoadPerTable.values()) {\n+      serverNameListMap.forEach((serverName, regionInfoList) -> {\n+        List<RegionInfo> regionInfos =\n+            returnMap.computeIfAbsent(serverName, k -> new ArrayList<>());\n+        regionInfos.addAll(regionInfoList);\n+      });\n+    }\n+    return returnMap;\n+  }\n+\n+  @Override\n+  public List<RegionPlan> balanceTable(TableName tableName, Map<ServerName, List<RegionInfo>> clusterLoad){\n+    throw new UnsupportedOperationException(\"balanceTable is not support in BaseLoadBalancer\");\n+  }\n+\n+  @Override\n+  public synchronized List<RegionPlan>", "originalCommit": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5NjIzNw==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391996237", "bodyText": "method of the extends class need be synchronized", "author": "nyl3532016", "createdAt": "2020-03-13T02:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NjA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NjY0Ng==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391646646", "bodyText": "Unsupport? Should be abstrat method?", "author": "infraio", "createdAt": "2020-03-12T14:10:06Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java", "diffHunk": "@@ -1639,6 +1641,44 @@ private void roundRobinAssignment(Cluster cluster, List<RegionInfo> regions,\n     }\n   }\n \n+  private Map<ServerName, List<RegionInfo>> toEnsumbleTableClusterLoad(\n+      Map<TableName, Map<ServerName, List<RegionInfo>>> clusterLoadPerTable) {\n+    Map<ServerName, List<RegionInfo>> returnMap = new TreeMap<>();\n+    for (Map<ServerName, List<RegionInfo>> serverNameListMap : clusterLoadPerTable.values()) {\n+      serverNameListMap.forEach((serverName, regionInfoList) -> {\n+        List<RegionInfo> regionInfos =\n+            returnMap.computeIfAbsent(serverName, k -> new ArrayList<>());\n+        regionInfos.addAll(regionInfoList);\n+      });\n+    }\n+    return returnMap;\n+  }\n+\n+  @Override\n+  public List<RegionPlan> balanceTable(TableName tableName, Map<ServerName, List<RegionInfo>> clusterLoad){", "originalCommit": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5NzIxNg==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391997216", "bodyText": "yes ,it should be abstrat method", "author": "nyl3532016", "createdAt": "2020-03-13T02:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NjY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NzU1Nw==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391647557", "bodyText": "No need this?", "author": "infraio", "createdAt": "2020-03-12T14:11:25Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/SimpleLoadBalancer.java", "diffHunk": "@@ -106,6 +106,12 @@ void setNextRegionForUnload(int nextRegionForUnload) {\n \n   }\n \n+  @Override\n+  public synchronized void setConf(Configuration conf) {", "originalCommit": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5Nzc2Mg==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391997762", "bodyText": "yes, I remove it", "author": "nyl3532016", "createdAt": "2020-03-13T02:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NzU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0ODE4NQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391648185", "bodyText": "If call super method directly, no need to add this method here?", "author": "infraio", "createdAt": "2020-03-12T14:12:19Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/StochasticLoadBalancer.java", "diffHunk": "@@ -360,10 +356,9 @@ protected boolean needsBalance(Cluster cluster) {\n   }\n \n   @Override\n-  public synchronized List<RegionPlan> balanceCluster(TableName tableName, Map<ServerName,\n-    List<RegionInfo>> clusterState) {\n-    this.tableName = tableName;\n-    return balanceCluster(clusterState);\n+  public synchronized List<RegionPlan> balanceCluster(Map<TableName, Map<ServerName,\n+    List<RegionInfo>>> clusterLoadPerTable) {\n+    return super.balanceCluster(clusterLoadPerTable);", "originalCommit": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwMjc4NA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r392002784", "bodyText": "yes, I remove it", "author": "nyl3532016", "createdAt": "2020-03-13T02:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0ODE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0OTMwNw==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391649307", "bodyText": "Why not support here?", "author": "infraio", "createdAt": "2020-03-12T14:13:55Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java", "diffHunk": "@@ -427,4 +419,9 @@ public void postMasterStartupInitialize() {\n   public void updateBalancerStatus(boolean status) {\n     internalBalancer.updateBalancerStatus(status);\n   }\n+\n+  @Override\n+  public List<RegionPlan> balanceTable(TableName tableName, Map<ServerName, List<RegionInfo>> clusterLoad){", "originalCommit": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5OTA0MQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391999041", "bodyText": "yes , it should support", "author": "nyl3532016", "createdAt": "2020-03-13T02:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0OTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MDI4OA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r391650288", "bodyText": "The balancer should only need to override balanceTable method?", "author": "infraio", "createdAt": "2020-03-12T14:15:24Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/favored/FavoredNodeLoadBalancer.java", "diffHunk": "@@ -87,7 +87,8 @@ public synchronized void initialize() throws HBaseIOException {\n   }\n \n   @Override\n-  public List<RegionPlan> balanceCluster(Map<ServerName, List<RegionInfo>> clusterState)  {\n+  public List<RegionPlan>\n+      balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> clusterLoadPerTable) {", "originalCommit": "5ab54d1e014b762b1cf5117c74439ca01f8bd3af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxNDU3NQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r392014575", "bodyText": "yes , but method 'balanceCluster' of this class not invoke 'balanceTable' , so just override balanceTable with null return", "author": "nyl3532016", "createdAt": "2020-03-13T03:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MDI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA2NTI0OA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r392065248", "bodyText": "Didn't get your point. Please add javadoc comment about why retrun null here.", "author": "infraio", "createdAt": "2020-03-13T07:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MDI4OA=="}], "type": "inlineReview"}, {"oid": "4aeb3ab18953ad2fdc40ce62a7cf6650db3bf5ee", "url": "https://github.com/apache/hbase/commit/4aeb3ab18953ad2fdc40ce62a7cf6650db3bf5ee", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table", "committedDate": "2020-03-13T04:39:41Z", "type": "forcePushed"}, {"oid": "2d1d3f0d186a5d01add7be2bdd6f88edd44a399c", "url": "https://github.com/apache/hbase/commit/2d1d3f0d186a5d01add7be2bdd6f88edd44a399c", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-15T14:14:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTI5OQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r392779299", "bodyText": "Add reason for why need to setClusterLoad?", "author": "infraio", "createdAt": "2020-03-16T04:38:57Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/SimpleLoadBalancer.java", "diffHunk": "@@ -594,10 +597,13 @@ private void addRegionPlan(final MinMaxPriorityQueue<RegionPlan> regionsToMove,\n     regionsToReturn.add(rp);\n   }\n \n+  /**\n+   * Override to invoke {@link #setClusterLoad} before balance\n+   */\n   @Override\n-  public List<RegionPlan> balanceCluster(TableName tableName,\n-      Map<ServerName, List<RegionInfo>> clusterState) throws HBaseIOException {\n-    LOG.debug(\"Start Generate Balance plan for table: \" + tableName);\n-    return balanceCluster(clusterState);\n+  public synchronized List<RegionPlan>\n+      balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> clusterLoadPerTable) {\n+    setClusterLoad(clusterLoadPerTable);", "originalCommit": "2d1d3f0d186a5d01add7be2bdd6f88edd44a399c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTc1OA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r392779758", "bodyText": "ok", "author": "nyl3532016", "createdAt": "2020-03-16T04:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3OTI5OQ=="}], "type": "inlineReview"}, {"oid": "7e1adf9b807d3af8e1b7675128f8664cc595e535", "url": "https://github.com/apache/hbase/commit/7e1adf9b807d3af8e1b7675128f8664cc595e535", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-16T04:45:33Z", "type": "forcePushed"}, {"oid": "ca450f9d31ed251046aa2bb78f61c53e933aed74", "url": "https://github.com/apache/hbase/commit/ca450f9d31ed251046aa2bb78f61c53e933aed74", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-16T07:38:45Z", "type": "forcePushed"}, {"oid": "c5fe214eec9737fedc440f467b924f79ef7db8af", "url": "https://github.com/apache/hbase/commit/c5fe214eec9737fedc440f467b924f79ef7db8af", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-16T07:57:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTIxNQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r392781215", "bodyText": "It is wired to call balanceClsuter here. Maybe abstract a new method balanceTableInRSGroup. And balanceTable and balanceClsuter both call the new method.", "author": "infraio", "createdAt": "2020-03-16T04:49:03Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java", "diffHunk": "@@ -427,4 +421,19 @@ public void postMasterStartupInitialize() {\n   public void updateBalancerStatus(boolean status) {\n     internalBalancer.updateBalancerStatus(status);\n   }\n+\n+  /**\n+   * can achieve table balanced rather than overall balanced\n+   */\n+  @Override\n+  public List<RegionPlan> balanceTable(TableName tableName,\n+      Map<ServerName, List<RegionInfo>> clusterLoad) {\n+    Map<TableName, Map<ServerName, List<RegionInfo>>> clusterLoadThisTable = new HashMap<>();\n+    clusterLoadThisTable.put(tableName, clusterLoad);\n+    try {\n+      return balanceCluster(clusterLoadThisTable);", "originalCommit": "7e1adf9b807d3af8e1b7675128f8664cc595e535", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyMzQ4Ng==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r393023486", "bodyText": "LoadOfTableInGroup => loadOfTablesInGroup", "author": "infraio", "createdAt": "2020-03-16T13:31:09Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java", "diffHunk": "@@ -111,51 +109,44 @@ public void setMasterServices(MasterServices masterServices) {\n     this.masterServices = masterServices;\n   }\n \n+  /**\n+   * Override to balance by RSGroup\n+   * not invoke {@link #balanceTable(TableName, Map)}\n+   */\n   @Override\n-  public List<RegionPlan> balanceCluster(TableName tableName, Map<ServerName, List<RegionInfo>>\n-      clusterState) throws IOException {\n-    return balanceCluster(clusterState);\n-  }\n-\n-  @Override\n-  public List<RegionPlan> balanceCluster(Map<ServerName, List<RegionInfo>> clusterState)\n-      throws IOException {\n+  public List<RegionPlan> balanceCluster(\n+      Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) throws IOException {\n     if (!isOnline()) {\n       throw new ConstraintException(\n           RSGroupInfoManager.class.getSimpleName() + \" is not online, unable to perform balance\");\n     }\n \n     // Calculate correct assignments and a list of RegionPlan for mis-placed regions\n-    Pair<Map<ServerName,List<RegionInfo>>, List<RegionPlan>> correctedStateAndRegionPlans =\n-        correctAssignments(clusterState);\n-    Map<ServerName,List<RegionInfo>> correctedState = correctedStateAndRegionPlans.getFirst();\n+    Pair<Map<TableName, Map<ServerName, List<RegionInfo>>>, List<RegionPlan>> correctedStateAndRegionPlans =\n+        correctAssignments(loadOfAllTable);\n+    Map<TableName, Map<ServerName, List<RegionInfo>>> correctedLoadOfAllTable =\n+        correctedStateAndRegionPlans.getFirst();\n     List<RegionPlan> regionPlans = correctedStateAndRegionPlans.getSecond();\n-\n+    RSGroupInfo defaultInfo = rsGroupInfoManager.getRSGroup(RSGroupInfo.DEFAULT_GROUP);\n     // Add RegionPlan\n     // for the regions which have been placed according to the region server group assignment\n     // into the movement list\n     try {\n-      // Record which region servers have been processed\uff0cso as to skip them after processed\n-      HashSet<ServerName> processedServers = new HashSet<>();\n-\n       // For each rsgroup\n       for (RSGroupInfo rsgroup : rsGroupInfoManager.listRSGroups()) {\n-        Map<ServerName, List<RegionInfo>> groupClusterState = new HashMap<>();\n-        Map<TableName, Map<ServerName, List<RegionInfo>>> groupClusterLoad = new HashMap<>();\n-        for (ServerName server : clusterState.keySet()) { // for each region server\n-          if (!processedServers.contains(server) // server is not processed yet\n-              && rsgroup.containsServer(server.getAddress())) { // server belongs to this rsgroup\n-            List<RegionInfo> regionsOnServer = correctedState.get(server);\n-            groupClusterState.put(server, regionsOnServer);\n-\n-            processedServers.add(server);\n+        Map<TableName, Map<ServerName, List<RegionInfo>>> LoadOfTableInGroup =", "originalCommit": "c5fe214eec9737fedc440f467b924f79ef7db8af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNTY0MA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r393025640", "bodyText": "This test is for SimpleLoadBalancer? Rename TestDefaultLoadBalancer to TestSimpleLoadBalancer?", "author": "infraio", "createdAt": "2020-03-16T13:34:40Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/balancer/TestDefaultLoadBalancer.java", "diffHunk": "@@ -58,7 +57,7 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(TestDefaultLoadBalancer.class);\n \n-  private static LoadBalancer loadBalancer;\n+  private static SimpleLoadBalancer loadBalancer;", "originalCommit": "c5fe214eec9737fedc440f467b924f79ef7db8af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db108eb0895d687ff68caac10a1b338d0cc2cb02", "url": "https://github.com/apache/hbase/commit/db108eb0895d687ff68caac10a1b338d0cc2cb02", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-16T14:03:48Z", "type": "forcePushed"}, {"oid": "d071969cb5ed29e4c6bf34c2191421f7c6646088", "url": "https://github.com/apache/hbase/commit/d071969cb5ed29e4c6bf34c2191421f7c6646088", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-17T02:30:21Z", "type": "forcePushed"}, {"oid": "ce7aff7470a0c1edb671283591cbb7c363e20e0f", "url": "https://github.com/apache/hbase/commit/ce7aff7470a0c1edb671283591cbb7c363e20e0f", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-17T12:24:14Z", "type": "forcePushed"}, {"oid": "05965882ea72b78a16e3ed52bc5d0ac52277c543", "url": "https://github.com/apache/hbase/commit/05965882ea72b78a16e3ed52bc5d0ac52277c543", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-18T02:54:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5OTA1NA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395399054", "bodyText": "There is no Table ENSEMBLE_TABLE_NAME actually, need to change this log?", "author": "binlijin", "createdAt": "2020-03-20T01:08:33Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java", "diffHunk": "@@ -1639,6 +1637,44 @@ private void roundRobinAssignment(Cluster cluster, List<RegionInfo> regions,\n     }\n   }\n \n+  private Map<ServerName, List<RegionInfo>> toEnsumbleTableLoad(\n+      Map<TableName, Map<ServerName, List<RegionInfo>>> LoadOfAllTable) {\n+    Map<ServerName, List<RegionInfo>> returnMap = new TreeMap<>();\n+    for (Map<ServerName, List<RegionInfo>> serverNameListMap : LoadOfAllTable.values()) {\n+      serverNameListMap.forEach((serverName, regionInfoList) -> {\n+        List<RegionInfo> regionInfos =\n+            returnMap.computeIfAbsent(serverName, k -> new ArrayList<>());\n+        regionInfos.addAll(regionInfoList);\n+      });\n+    }\n+    return returnMap;\n+  }\n+\n+  @Override\n+  public abstract List<RegionPlan> balanceTable(TableName tableName,\n+      Map<ServerName, List<RegionInfo>> loadOfOneTable);\n+\n+\n+  @Override\n+  public List<RegionPlan>\n+      balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) {\n+    if (isByTable) {\n+      List<RegionPlan> result = new ArrayList<>();\n+      loadOfAllTable.forEach((tableName, loadOfOneTable) -> {\n+        LOG.debug(\"Start Generate Balance plan for table: \" + tableName);\n+        List<RegionPlan> partialPlans = balanceTable(tableName, loadOfOneTable);\n+        if (partialPlans != null) {\n+          result.addAll(partialPlans);\n+        }\n+      });\n+      return result;\n+    } else {\n+      LOG.debug(\"Start Generate Balance plan for table: \" + HConstants.ENSEMBLE_TABLE_NAME);", "originalCommit": "05965882ea72b78a16e3ed52bc5d0ac52277c543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMDgwNQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395420805", "bodyText": "it convenient to debug ,balance for Table ENSEMBLE_TABLE_NAME , mean balanceByTable is false, we just consider all region as one table's", "author": "nyl3532016", "createdAt": "2020-03-20T03:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5OTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTA2Nw==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395969067", "bodyText": "May be good to log \"\"Start generate balance plan for cluster\". No need log the ENSEMBLE_TABLE_NAME.  And this log can be info?", "author": "infraio", "createdAt": "2020-03-21T07:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5OTA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MTkzOA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395981938", "bodyText": "yes, you are right", "author": "nyl3532016", "createdAt": "2020-03-21T10:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5OTA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTA2NA==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395969064", "bodyText": "LOG.info(\"Start generate balance plan for table: {}\", tableName);", "author": "infraio", "createdAt": "2020-03-21T07:05:44Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BaseLoadBalancer.java", "diffHunk": "@@ -1639,6 +1637,44 @@ private void roundRobinAssignment(Cluster cluster, List<RegionInfo> regions,\n     }\n   }\n \n+  private Map<ServerName, List<RegionInfo>> toEnsumbleTableLoad(\n+      Map<TableName, Map<ServerName, List<RegionInfo>>> LoadOfAllTable) {\n+    Map<ServerName, List<RegionInfo>> returnMap = new TreeMap<>();\n+    for (Map<ServerName, List<RegionInfo>> serverNameListMap : LoadOfAllTable.values()) {\n+      serverNameListMap.forEach((serverName, regionInfoList) -> {\n+        List<RegionInfo> regionInfos =\n+            returnMap.computeIfAbsent(serverName, k -> new ArrayList<>());\n+        regionInfos.addAll(regionInfoList);\n+      });\n+    }\n+    return returnMap;\n+  }\n+\n+  @Override\n+  public abstract List<RegionPlan> balanceTable(TableName tableName,\n+      Map<ServerName, List<RegionInfo>> loadOfOneTable);\n+\n+\n+  @Override\n+  public List<RegionPlan>\n+      balanceCluster(Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) {\n+    if (isByTable) {\n+      List<RegionPlan> result = new ArrayList<>();\n+      loadOfAllTable.forEach((tableName, loadOfOneTable) -> {\n+        LOG.debug(\"Start Generate Balance plan for table: \" + tableName);", "originalCommit": "05965882ea72b78a16e3ed52bc5d0ac52277c543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MTk2OQ==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395981969", "bodyText": "ok , I will change  this", "author": "nyl3532016", "createdAt": "2020-03-21T10:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTI1Nw==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395969257", "bodyText": "add log here, too?", "author": "infraio", "createdAt": "2020-03-21T07:09:08Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupBasedLoadBalancer.java", "diffHunk": "@@ -111,51 +109,45 @@ public void setMasterServices(MasterServices masterServices) {\n     this.masterServices = masterServices;\n   }\n \n+  /**\n+   * Override to balance by RSGroup\n+   * not invoke {@link #balanceTable(TableName, Map)}\n+   */\n   @Override\n-  public List<RegionPlan> balanceCluster(TableName tableName, Map<ServerName, List<RegionInfo>>\n-      clusterState) throws IOException {\n-    return balanceCluster(clusterState);\n-  }\n-\n-  @Override\n-  public List<RegionPlan> balanceCluster(Map<ServerName, List<RegionInfo>> clusterState)\n-      throws IOException {\n+  public List<RegionPlan> balanceCluster(\n+      Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfAllTable) throws IOException {\n     if (!isOnline()) {\n       throw new ConstraintException(\n           RSGroupInfoManager.class.getSimpleName() + \" is not online, unable to perform balance\");\n     }\n \n     // Calculate correct assignments and a list of RegionPlan for mis-placed regions\n-    Pair<Map<ServerName,List<RegionInfo>>, List<RegionPlan>> correctedStateAndRegionPlans =\n-        correctAssignments(clusterState);\n-    Map<ServerName,List<RegionInfo>> correctedState = correctedStateAndRegionPlans.getFirst();\n+    Pair<Map<TableName, Map<ServerName, List<RegionInfo>>>, List<RegionPlan>> correctedStateAndRegionPlans =\n+        correctAssignments(loadOfAllTable);\n+    Map<TableName, Map<ServerName, List<RegionInfo>>> correctedLoadOfAllTable =\n+        correctedStateAndRegionPlans.getFirst();\n     List<RegionPlan> regionPlans = correctedStateAndRegionPlans.getSecond();\n-\n+    RSGroupInfo defaultInfo = rsGroupInfoManager.getRSGroup(RSGroupInfo.DEFAULT_GROUP);\n     // Add RegionPlan\n     // for the regions which have been placed according to the region server group assignment\n     // into the movement list\n     try {\n-      // Record which region servers have been processed\uff0cso as to skip them after processed\n-      HashSet<ServerName> processedServers = new HashSet<>();\n-\n       // For each rsgroup\n       for (RSGroupInfo rsgroup : rsGroupInfoManager.listRSGroups()) {\n-        Map<ServerName, List<RegionInfo>> groupClusterState = new HashMap<>();\n-        Map<TableName, Map<ServerName, List<RegionInfo>>> groupClusterLoad = new HashMap<>();\n-        for (ServerName server : clusterState.keySet()) { // for each region server\n-          if (!processedServers.contains(server) // server is not processed yet\n-              && rsgroup.containsServer(server.getAddress())) { // server belongs to this rsgroup\n-            List<RegionInfo> regionsOnServer = correctedState.get(server);\n-            groupClusterState.put(server, regionsOnServer);\n-\n-            processedServers.add(server);\n+        Map<TableName, Map<ServerName, List<RegionInfo>>> loadOfTablesInGroup =\n+            new HashMap<>();\n+        for (Map.Entry<TableName, Map<ServerName, List<RegionInfo>>> entry: correctedLoadOfAllTable.entrySet()) {\n+          TableName tableName = entry.getKey();\n+          RSGroupInfo targetRSGInfo = RSGroupUtil\n+              .getRSGroupInfo(masterServices, rsGroupInfoManager, tableName).orElse(defaultInfo);\n+          if (targetRSGInfo.getName().equals(rsgroup.getName())) {\n+            loadOfTablesInGroup.put(tableName, entry.getValue());\n           }\n         }\n-\n-        groupClusterLoad.put(HConstants.ENSEMBLE_TABLE_NAME, groupClusterState);\n-        this.internalBalancer.setClusterLoad(groupClusterLoad);\n-        List<RegionPlan> groupPlans = this.internalBalancer\n-            .balanceCluster(groupClusterState);\n+        List<RegionPlan> groupPlans = null;\n+        if (!loadOfTablesInGroup.isEmpty()) {", "originalCommit": "05965882ea72b78a16e3ed52bc5d0ac52277c543", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4MjAzMw==", "url": "https://github.com/apache/hbase/pull/1279#discussion_r395982033", "bodyText": "well , I add some log", "author": "nyl3532016", "createdAt": "2020-03-21T10:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTI1Nw=="}], "type": "inlineReview"}, {"oid": "eb77aa774407e7685e22c6b75f115b60a82689da", "url": "https://github.com/apache/hbase/commit/eb77aa774407e7685e22c6b75f115b60a82689da", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-21T10:25:46Z", "type": "forcePushed"}, {"oid": "43490bc6f5b6d5a74b5977f08a868d4d6f2d9662", "url": "https://github.com/apache/hbase/commit/43490bc6f5b6d5a74b5977f08a868d4d6f2d9662", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-22T09:29:32Z", "type": "forcePushed"}, {"oid": "7f7d7099c6f397d1f59897ccbd6df75d608b406d", "url": "https://github.com/apache/hbase/commit/7f7d7099c6f397d1f59897ccbd6df75d608b406d", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-22T10:19:46Z", "type": "commit"}, {"oid": "7f7d7099c6f397d1f59897ccbd6df75d608b406d", "url": "https://github.com/apache/hbase/commit/7f7d7099c6f397d1f59897ccbd6df75d608b406d", "message": "HBASE-23949 refactor loadBalancer implements for rsgroup balance by table to achieve overallbalanced", "committedDate": "2020-03-22T10:19:46Z", "type": "forcePushed"}]}