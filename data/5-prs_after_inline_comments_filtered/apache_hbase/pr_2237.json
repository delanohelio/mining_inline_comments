{"pr_number": 2237, "pr_title": "HBASE-24833: Bootstrap should not delete the META table directory if \u2026", "pr_createdAt": "2020-08-10T22:19:49Z", "pr_url": "https://github.com/apache/hbase/pull/2237", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NTc3Ng==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r468555776", "bodyText": "Hm... This check alone is not enough I fear..  Say there is a cluster recreate over existing data and so no zk node for clusterId.  We will get true here.  In next lines, we will create and write the zk node.   Assume immediately after that, the HM restarted.  Now after restart, when we come here, we have zk data for clusterId, and we will end up deleting the Meta dir !!\nAfter cluster recreate we will come to know this boolean value before creation of zk node.  So we need to record that info some how somewhere so that even if there is a restart before we reach to the Meta bootstrap.  Even that info should be there in InitMetaProcedure also.. If there is an HM restart after the submit of this proc, the next time we know the boolean status.\nComments?", "author": "anoopsjohn", "createdAt": "2020-08-11T12:52:56Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -915,6 +917,11 @@ private void finishActiveMasterInitialization(MonitoredTask status)\n       this.tableDescriptors.getAll();\n     }\n \n+    // check cluster Id stored in ZNode before, and use it to indicate if a cluster has been\n+    // restarted with an existing Zookeeper quorum.\n+    isClusterRestartWithExistingZNodes =", "originalCommit": "ead2eee7946196ed8349c8e16abf03da656d98d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5ODUxOQ==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r468798519", "bodyText": "Thanks Anoop, if I get your suggestion correctly, should we add a master procedure (or a state in InitMetaProcedure) which record this boolean? this will have the assumption with the WAL exists when cluster recreates.", "author": "taklwu", "createdAt": "2020-08-11T18:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NTc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMjYwMA==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r469412600", "bodyText": "Ya at proc level..  But before that itself one more thing.\nSay there is a cluster recreate over existing data and so no zk node for clusterId. We will get true for 'isClusterRestartWithExistingZNodes '. In next lines, we will create and write the zk node for clusterId.  Now assume after executing that lines, the HM restarted.  So the zk node was created but the InitMetaProc was NOT submitted.  Now after restart, when we come here, we have zk data for clusterId.  So 'isClusterRestartWithExistingZNodes ' will become false.  Now this time the InitMetaProc started and as part of that we will end up deleting the Meta dir.\nSo this says the need to keep this boolean info somewhere once we find that and even before creating the zk node for ClusterId.  Am I making the concern clear this time?", "author": "anoopsjohn", "createdAt": "2020-08-12T17:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NTc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDAxNw==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r469554017", "bodyText": "So this says the need to keep this boolean info somewhere once we find that and even before creating the zk node for ClusterId. Am I making the concern clear this time?\n\nack and I got the concern.\nbut before I move to implement the proc level information, let's wait a bit on @Apache9 for the question on META's tableInfo and partial meta.  The ideal case is that we may be able to use FSTableDescriptors.getTableDescriptorFromFs() if found and can be readed to indicate meta is not partial.", "author": "taklwu", "createdAt": "2020-08-12T21:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1NTc3Ng=="}], "type": "inlineReview"}, {"oid": "98119eb5ba20240a485b374d71ed5337796c1393", "url": "https://github.com/apache/hbase/commit/98119eb5ba20240a485b374d71ed5337796c1393", "message": "HBASE-24833: Bootstrap should not delete the META table directory if it's not partial\n\nAdd a check on meta bootstrap to skip removing meta table directory\nWhen enterting state INIT_META_WRITE_FS_LAYOUT. here, if any valid\nHFiles are found in the meta table directory, it is not partial\nand throws an Exception to crash the Master startup.", "committedDate": "2020-08-18T06:21:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MjU4Nw==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r472482587", "bodyText": "@Apache9, we're failing the InitMetaProcedure with an IOException, and HMaster will fail the master startup if InitMetaProcedure is FAILED with an exception.\nStill, alternatively, we could continue the bootstrap without throwing (but this is not good as you recommended)\nso, do you think this change align with your comments?", "author": "taklwu", "createdAt": "2020-08-18T20:45:42Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/InitMetaProcedure.java", "diffHunk": "@@ -167,4 +171,35 @@ protected void completionCleanup(MasterProcedureEnv env) {\n   public void await() throws InterruptedException {\n     latch.await();\n   }\n+\n+  private static boolean deleteMetaTableDirectoryIfPartial(FileSystem rootDirectoryFs,\n+    Path metaTableDir) throws IOException {\n+    boolean isPartial = true;\n+    try {\n+      TableDescriptor metaDescriptor =\n+        FSTableDescriptors.getTableDescriptorFromFs(rootDirectoryFs, metaTableDir);\n+      // when entering the state of INIT_META_WRITE_FS_LAYOUT, if a meta table directory is found,\n+      // the meta table should not have any useful data and considers as partial.\n+      // if we find any valid HFiles, operator should fix the meta e.g. via HBCK.\n+      if (metaDescriptor != null && metaDescriptor.getColumnFamilyCount() > 0) {\n+        RemoteIterator<LocatedFileStatus> iterator = rootDirectoryFs.listFiles(metaTableDir, true);\n+        while (iterator.hasNext()) {\n+          LocatedFileStatus status = iterator.next();\n+          if (StoreFileInfo.isHFile(status.getPath()) && HFile\n+            .isHFileFormat(rootDirectoryFs, status.getPath())) {\n+            isPartial = false;\n+            break;\n+          }\n+        }\n+      }\n+    } finally {\n+      if (!isPartial) {\n+        throw new IOException(\"Meta table is not partial, please sideline this meta directory \"\n+          + \"or run HBCK to fix this meta table, e.g. rebuild the server hostname in ZNode for the \"\n+          + \"meta region\");\n+      }", "originalCommit": "98119eb5ba20240a485b374d71ed5337796c1393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MDIyOA==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r472640228", "bodyText": "In general the approach is fine. The only concern is the implementation. I do not think InitMetaProcedure support rollback, so what will happen if we throw exception here? You will see a ERROR log in the output to say that the procedure does not support rollback?", "author": "Apache9", "createdAt": "2020-08-19T03:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MjU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY4MDA3MQ==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r472680071", "bodyText": "[updated] yeah, I saw the UnsupportedOperationException and the timeout in the unit test logs, then the master didn't stop, such that I added a section in HMaster to catch this exception and fail the master startup with another IOException.\nDid I do it wrong ? or any idea how I can fail the procedure right?\n    // wait meta to be initialized after we start procedure executor\n    if (initMetaProc != null) {\n      initMetaProc.await();\n      if (initMetaProc.isFailed() && initMetaProc.hasException()) {\n        throw new IOException(\"Failed to initialize meta table\", initMetaProc.getException());\n      }", "author": "taklwu", "createdAt": "2020-08-19T04:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MjU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTE4NDg2Mg==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r559184862", "bodyText": "I would worry that the ProcedureExecutor is going to resubmit the IMP again. You might have to, instead, let IMP finish without an error and determine via some side-effect (e.g. set a variable in HMaster?) if we bailed out of IMP and then fail at that level. Truthfully, I don't remember what happens by default (if all procedures which throw an exception are implicitly retried.", "author": "joshelser", "createdAt": "2021-01-17T13:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MjU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzIzNQ==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r558573235", "bodyText": "Should we mention the HBCK sub command to help fix this? (Is this offline meta repair?) Since we're adding a new failure mode, it should be clear how to fix this case.", "author": "z-york", "createdAt": "2021-01-15T20:22:07Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/InitMetaProcedure.java", "diffHunk": "@@ -166,4 +170,35 @@ protected void completionCleanup(MasterProcedureEnv env) {\n   public void await() throws InterruptedException {\n     latch.await();\n   }\n+\n+  private static boolean deleteMetaTableDirectoryIfPartial(FileSystem rootDirectoryFs,\n+    Path metaTableDir) throws IOException {\n+    boolean isPartial = true;\n+    try {\n+      TableDescriptor metaDescriptor =\n+        FSTableDescriptors.getTableDescriptorFromFs(rootDirectoryFs, metaTableDir);\n+      // when entering the state of INIT_META_WRITE_FS_LAYOUT, if a meta table directory is found,\n+      // the meta table should not have any useful data and considers as partial.\n+      // if we find any valid HFiles, operator should fix the meta e.g. via HBCK.\n+      if (metaDescriptor != null && metaDescriptor.getColumnFamilyCount() > 0) {\n+        RemoteIterator<LocatedFileStatus> iterator = rootDirectoryFs.listFiles(metaTableDir, true);\n+        while (iterator.hasNext()) {\n+          LocatedFileStatus status = iterator.next();\n+          if (StoreFileInfo.isHFile(status.getPath()) && HFile\n+            .isHFileFormat(rootDirectoryFs, status.getPath())) {\n+            isPartial = false;\n+            break;\n+          }\n+        }\n+      }\n+    } finally {\n+      if (!isPartial) {\n+        throw new IOException(\"Meta table is not partial, please sideline this meta directory \"\n+          + \"or run HBCK to fix this meta table, e.g. rebuild the server hostname in ZNode for the \"", "originalCommit": "082d601941be026d13df42cc469c4895d1774acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTE4Mzg0MA==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r559183840", "bodyText": "Instead of specific commands to run, what about referencing something in the book (which could be updated if \"what to do\" changes across release versions)?", "author": "joshelser", "createdAt": "2021-01-17T13:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkzNjc4Nw==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r564936787", "bodyText": "good point on documentation, I need more time to figure out if there is existing command(s)/option(s) other than manually sidelining the meta directory to a different location. let's mark it as a blocker/requirement before I merging this PR.", "author": "taklwu", "createdAt": "2021-01-27T00:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTQ5OTMwOA==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r701499308", "bodyText": "https://issues.apache.org/jira/browse/HBASE-24833?focusedCommentId=17409167&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17409167 rough sketch what I was able to do to fix it.", "author": "joshelser", "createdAt": "2021-09-03T00:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzQxOA==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r558573418", "bodyText": "Change to shouldDelete? isPartial is a bit confusing to me.", "author": "z-york", "createdAt": "2021-01-15T20:22:35Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/InitMetaProcedure.java", "diffHunk": "@@ -166,4 +170,35 @@ protected void completionCleanup(MasterProcedureEnv env) {\n   public void await() throws InterruptedException {\n     latch.await();\n   }\n+\n+  private static boolean deleteMetaTableDirectoryIfPartial(FileSystem rootDirectoryFs,\n+    Path metaTableDir) throws IOException {\n+    boolean isPartial = true;", "originalCommit": "082d601941be026d13df42cc469c4895d1774acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzcwMzc0MA==", "url": "https://github.com/apache/hbase/pull/2237#discussion_r703703740", "bodyText": "changed to shouldDelete", "author": "taklwu", "createdAt": "2021-09-07T17:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzQxOA=="}], "type": "inlineReview"}, {"oid": "37c1f51c9cb46c85e74a42e5def7841e45c55473", "url": "https://github.com/apache/hbase/commit/37c1f51c9cb46c85e74a42e5def7841e45c55473", "message": "HBASE-24833: Bootstrap should not delete the META table directory if it's not partial\n\nAdd a check on meta bootstrap to skip removing meta table directory\nWhen entering state INIT_META_WRITE_FS_LAYOUT. here, if any valid\nHFiles are found in the meta table directory, it is not partial\nand throws an Exception to crash the Master startup.", "committedDate": "2021-09-07T17:11:20Z", "type": "commit"}, {"oid": "b5010b26a2a26ddc811d02e07052596a74857fbc", "url": "https://github.com/apache/hbase/commit/b5010b26a2a26ddc811d02e07052596a74857fbc", "message": "Remove Zknode will not hang anymore after HBASE-26193", "committedDate": "2021-09-07T17:26:15Z", "type": "commit"}, {"oid": "b5010b26a2a26ddc811d02e07052596a74857fbc", "url": "https://github.com/apache/hbase/commit/b5010b26a2a26ddc811d02e07052596a74857fbc", "message": "Remove Zknode will not hang anymore after HBASE-26193", "committedDate": "2021-09-07T17:26:15Z", "type": "forcePushed"}]}