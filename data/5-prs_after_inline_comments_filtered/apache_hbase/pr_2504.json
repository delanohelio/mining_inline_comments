{"pr_number": 2504, "pr_title": "HBASE-22976 [HBCK2] Add RecoveredEditsPlayer", "pr_createdAt": "2020-10-07T00:35:41Z", "pr_url": "https://github.com/apache/hbase/pull/2504", "timeline": [{"oid": "4ebc3f6daf8ba48b7fa9f543f2debcf3d42b2c21", "url": "https://github.com/apache/hbase/commit/4ebc3f6daf8ba48b7fa9f543f2debcf3d42b2c21", "message": "HBASE-22976 [HBCK2] Add RecoveredEditsPlayer\n\nMake it so WALPlayer can replay recovered.edits files.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java\n Allow for WAL files that do NOT have a startime in their name.\n Use the 'generic' WAL-filename parser instead of the one that\n used be local here. Implement support for 'startTime' filter.\n Previous was just not implemented.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALPlayer.java\n Checkstyle.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractFSWALProvider.java\n Use the new general WAL name timestamp parser.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WAL.java\n Utility for parsing timestamp from WAL filename.\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRecoveredEdits.java\n Export attributes about the local recovered.edits test file\n so other tests can play with it.", "committedDate": "2020-10-07T00:55:40Z", "type": "forcePushed"}, {"oid": "39116059782de8422ebacd2ccc195ce026489c61", "url": "https://github.com/apache/hbase/commit/39116059782de8422ebacd2ccc195ce026489c61", "message": "HBASE-22976 [HBCK2] Add RecoveredEditsPlayer\n\nMake it so WALPlayer can replay recovered.edits files.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java\n Allow for WAL files that do NOT have a startime in their name.\n Use the 'generic' WAL-filename parser instead of the one that\n used be local here. Implement support for 'startTime' filter.\n Previous was just not implemented.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALPlayer.java\n Checkstyle.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractFSWALProvider.java\n Use the new general WAL name timestamp parser.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WAL.java\n Utility for parsing timestamp from WAL filename.\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRecoveredEdits.java\n Export attributes about the local recovered.edits test file\n so other tests can play with it.", "committedDate": "2020-10-07T17:21:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDQ0NQ==", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501594445", "bodyText": "Nit: worth put a different message from the one on line #343, in order to explicitly say this had no timestamp? Maybe saying this is likely a recovered.edit file.", "author": "wchevreuil", "createdAt": "2020-10-08T09:55:59Z", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "diffHunk": "@@ -301,40 +303,56 @@ public WALKey getCurrentKey() throws IOException, InterruptedException {\n       inpDirs.split(conf.get(WALPlayer.INPUT_FILES_SEPARATOR_KEY, \",\")));\n   }\n \n+  /**\n+   * @param startTime If file looks like it has a timestamp in its name, we'll check if newer\n+   *                  or equal to this value else we will filter out the file. If name does not\n+   *                  seem to have a timestamp, we will just return it w/o filtering.\n+   * @param endTime If file looks like it has a timestamp in its name, we'll check if older or equal\n+   *                to this value else we will filter out the file. If name does not seem to\n+   *                have a timestamp, we will just return it w/o filtering.\n+   */\n   private List<FileStatus> getFiles(FileSystem fs, Path dir, long startTime, long endTime)\n       throws IOException {\n     List<FileStatus> result = new ArrayList<>();\n     LOG.debug(\"Scanning \" + dir.toString() + \" for WAL files\");\n-\n     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(dir);\n-    if (!iter.hasNext()) return Collections.emptyList();\n+    if (!iter.hasNext()) {\n+      return Collections.emptyList();\n+    }\n     while (iter.hasNext()) {\n       LocatedFileStatus file = iter.next();\n       if (file.isDirectory()) {\n-        // recurse into sub directories\n+        // Recurse into sub directories\n         result.addAll(getFiles(fs, file.getPath(), startTime, endTime));\n       } else {\n-        String name = file.getPath().toString();\n-        int idx = name.lastIndexOf('.');\n-        if (idx > 0) {\n-          try {\n-            long fileStartTime = Long.parseLong(name.substring(idx+1));\n-            if (fileStartTime <= endTime) {\n-              LOG.info(\"Found: \" + file);\n-              result.add(file);\n-            }\n-          } catch (NumberFormatException x) {\n-            idx = 0;\n-          }\n-        }\n-        if (idx == 0) {\n-          LOG.warn(\"File \" + name + \" does not appear to be an WAL file. Skipping...\");\n-        }\n+        addFile(result, file, startTime, endTime);\n       }\n     }\n+    // TODO: These results should be sorted? Results could be content of recovered.edits directory\n+    // -- null padded increasing numeric -- or a WAL file w/ timestamp suffix or timestamp and\n+    // then meta suffix. See AbstractFSWALProvider#WALStartTimeComparator\n     return result;\n   }\n \n+  static void addFile(List<FileStatus> result, LocatedFileStatus lfs, long startTime,\n+      long endTime) {\n+    long timestamp = WAL.getTimestamp(lfs.getPath().getName());\n+    if (timestamp > 0) {\n+      // Looks like a valid timestamp.\n+      if (timestamp <= endTime && timestamp >= startTime) {\n+        LOG.info(\"Found {}\", lfs.getPath());\n+        result.add(lfs);\n+      } else {\n+        LOG.debug(\"Skipped {}, outside range [{}/{} - {}/{}]\", lfs.getPath(),\n+          startTime, Instant.ofEpochMilli(startTime), endTime, Instant.ofEpochMilli(endTime));\n+      }\n+    } else {\n+      // If no timestamp, add it regardless.\n+      LOG.info(\"Found {}\", lfs);", "originalCommit": "39116059782de8422ebacd2ccc195ce026489c61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0OTIzNg==", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501849236", "bodyText": "Makes sense.", "author": "saintstack", "createdAt": "2020-10-08T16:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NTczMA==", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501595730", "bodyText": "Is this expected to be the majority of cases, or could log be info just like on #343 and #351?", "author": "wchevreuil", "createdAt": "2020-10-08T09:57:59Z", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "diffHunk": "@@ -301,40 +303,56 @@ public WALKey getCurrentKey() throws IOException, InterruptedException {\n       inpDirs.split(conf.get(WALPlayer.INPUT_FILES_SEPARATOR_KEY, \",\")));\n   }\n \n+  /**\n+   * @param startTime If file looks like it has a timestamp in its name, we'll check if newer\n+   *                  or equal to this value else we will filter out the file. If name does not\n+   *                  seem to have a timestamp, we will just return it w/o filtering.\n+   * @param endTime If file looks like it has a timestamp in its name, we'll check if older or equal\n+   *                to this value else we will filter out the file. If name does not seem to\n+   *                have a timestamp, we will just return it w/o filtering.\n+   */\n   private List<FileStatus> getFiles(FileSystem fs, Path dir, long startTime, long endTime)\n       throws IOException {\n     List<FileStatus> result = new ArrayList<>();\n     LOG.debug(\"Scanning \" + dir.toString() + \" for WAL files\");\n-\n     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(dir);\n-    if (!iter.hasNext()) return Collections.emptyList();\n+    if (!iter.hasNext()) {\n+      return Collections.emptyList();\n+    }\n     while (iter.hasNext()) {\n       LocatedFileStatus file = iter.next();\n       if (file.isDirectory()) {\n-        // recurse into sub directories\n+        // Recurse into sub directories\n         result.addAll(getFiles(fs, file.getPath(), startTime, endTime));\n       } else {\n-        String name = file.getPath().toString();\n-        int idx = name.lastIndexOf('.');\n-        if (idx > 0) {\n-          try {\n-            long fileStartTime = Long.parseLong(name.substring(idx+1));\n-            if (fileStartTime <= endTime) {\n-              LOG.info(\"Found: \" + file);\n-              result.add(file);\n-            }\n-          } catch (NumberFormatException x) {\n-            idx = 0;\n-          }\n-        }\n-        if (idx == 0) {\n-          LOG.warn(\"File \" + name + \" does not appear to be an WAL file. Skipping...\");\n-        }\n+        addFile(result, file, startTime, endTime);\n       }\n     }\n+    // TODO: These results should be sorted? Results could be content of recovered.edits directory\n+    // -- null padded increasing numeric -- or a WAL file w/ timestamp suffix or timestamp and\n+    // then meta suffix. See AbstractFSWALProvider#WALStartTimeComparator\n     return result;\n   }\n \n+  static void addFile(List<FileStatus> result, LocatedFileStatus lfs, long startTime,\n+      long endTime) {\n+    long timestamp = WAL.getTimestamp(lfs.getPath().getName());\n+    if (timestamp > 0) {\n+      // Looks like a valid timestamp.\n+      if (timestamp <= endTime && timestamp >= startTime) {\n+        LOG.info(\"Found {}\", lfs.getPath());\n+        result.add(lfs);\n+      } else {\n+        LOG.debug(\"Skipped {}, outside range [{}/{} - {}/{}]\", lfs.getPath(),", "originalCommit": "39116059782de8422ebacd2ccc195ce026489c61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0OTQ2MA==", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501849460", "bodyText": "Made it info.", "author": "saintstack", "createdAt": "2020-10-08T16:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NTczMA=="}], "type": "inlineReview"}, {"oid": "01a1ec44098aaf17de5975eaef54bd9206b77f89", "url": "https://github.com/apache/hbase/commit/01a1ec44098aaf17de5975eaef54bd9206b77f89", "message": "HBASE-22976 [HBCK2] Add RecoveredEditsPlayer\n\nMake it so WALPlayer can replay recovered.edits files.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java\n Allow for WAL files that do NOT have a startime in their name.\n Use the 'generic' WAL-filename parser instead of the one that\n used be local here. Implement support for 'startTime' filter.\n Previous was just not implemented.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALPlayer.java\n Checkstyle.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractFSWALProvider.java\n Use the new general WAL name timestamp parser.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WAL.java\n Utility for parsing timestamp from WAL filename.\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRecoveredEdits.java\n Export attributes about the local recovered.edits test file\n so other tests can play with it.", "committedDate": "2020-10-08T16:20:41Z", "type": "commit"}, {"oid": "01a1ec44098aaf17de5975eaef54bd9206b77f89", "url": "https://github.com/apache/hbase/commit/01a1ec44098aaf17de5975eaef54bd9206b77f89", "message": "HBASE-22976 [HBCK2] Add RecoveredEditsPlayer\n\nMake it so WALPlayer can replay recovered.edits files.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java\n Allow for WAL files that do NOT have a startime in their name.\n Use the 'generic' WAL-filename parser instead of the one that\n used be local here. Implement support for 'startTime' filter.\n Previous was just not implemented.\n\nhbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALPlayer.java\n Checkstyle.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractFSWALProvider.java\n Use the new general WAL name timestamp parser.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WAL.java\n Utility for parsing timestamp from WAL filename.\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRecoveredEdits.java\n Export attributes about the local recovered.edits test file\n so other tests can play with it.", "committedDate": "2020-10-08T16:20:41Z", "type": "forcePushed"}]}