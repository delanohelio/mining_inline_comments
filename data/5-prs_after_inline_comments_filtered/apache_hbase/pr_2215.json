{"pr_number": 2215, "pr_title": "HBASE-24627 Normalize one table at a time", "pr_createdAt": "2020-08-07T23:54:00Z", "pr_url": "https://github.com/apache/hbase/pull/2215", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTQwMQ==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r467339401", "bodyText": "This constructor should either not be public or should have a IA marker that it isn't public", "author": "busbey", "createdAt": "2020-08-08T00:45:39Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/NormalizeTableFilterParams.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.util.List;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.yetus.audience.InterfaceStability;\n+\n+/**\n+ * A collection of criteria used for table selection.\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Evolving\n+public class NormalizeTableFilterParams {\n+  private final List<TableName> tableNames;\n+  private final String regex;\n+  private final String namespace;\n+\n+  public NormalizeTableFilterParams(", "originalCommit": "e415f721ab98e4ee72dc8aaf00ddcbd7b07da429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3OTAzMw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r467479033", "bodyText": "Better to make it private only I believe.", "author": "virajjasani", "createdAt": "2020-08-08T16:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTI1Nw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468085257", "bodyText": "No thanks. Why would we force a caller to go through the object allocation of a builder if they have all the parameters they want to set up-front?", "author": "ndimiduk", "createdAt": "2020-08-10T18:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNTA5Mg==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468525092", "bodyText": "Usually don't we want to provide only one way of creating objects? Exposing both doesn't harm anyway but I have hardly seen any class exposing both: constructor and builder class. Or do we follow this in HBase somewhere?", "author": "virajjasani", "createdAt": "2020-08-11T11:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyMDQ2Ng==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468920466", "bodyText": "Alright, will make it private.", "author": "ndimiduk", "createdAt": "2020-08-11T23:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0MDM5NA==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r467340394", "bodyText": "What does it mean if these are all empty?\nHow are they handled if multiple are set?", "author": "busbey", "createdAt": "2020-08-08T00:53:12Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/NormalizeTableFilterParams.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.util.List;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.yetus.audience.InterfaceStability;\n+\n+/**\n+ * A collection of criteria used for table selection.", "originalCommit": "e415f721ab98e4ee72dc8aaf00ddcbd7b07da429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTkwMw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468085903", "bodyText": "This defers to the existing functionality around listing table descriptors. I initially took a stab at documenting the behavior, but decided it didn't make sense to leave that attached to the PIOJO, dangling to rot. If you think otherwise, I can find that in my reflog and bring it back.", "author": "ndimiduk", "createdAt": "2020-08-10T18:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0MDM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNzYwMw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468927603", "bodyText": "I'll bring back that description.", "author": "ndimiduk", "createdAt": "2020-08-11T23:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0MDM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDMzNg==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r467484336", "bodyText": "nit: we can remove type arg <>", "author": "virajjasani", "createdAt": "2020-08-08T17:04:44Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java", "diffHunk": "@@ -3279,13 +3279,22 @@ private void getProcedureResult(long procId, CompletableFuture<Void> future, int\n \n   @Override\n   public CompletableFuture<Boolean> normalize() {\n+    return normalize(RequestConverter.buildNormalizeRequest());\n+  }\n+\n+  @Override\n+  public CompletableFuture<Boolean> normalize(NormalizeTableFilterParams ntfp) {\n+    return normalize(RequestConverter.buildNormalizeRequest(ntfp));\n+  }\n+\n+  private CompletableFuture<Boolean> normalize(NormalizeRequest request) {\n     return this\n-        .<Boolean> newMasterCaller()\n-        .action(\n-          (controller, stub) -> this.<NormalizeRequest, NormalizeResponse, Boolean> call(\n-            controller, stub, RequestConverter.buildNormalizeRequest(),\n-            (s, c, req, done) -> s.normalize(c, req, done), (resp) -> resp.getNormalizerRan()))\n-        .call();\n+      .<Boolean> newMasterCaller()\n+      .action(\n+        (controller, stub) -> this.<NormalizeRequest, NormalizeResponse, Boolean> call(", "originalCommit": "e415f721ab98e4ee72dc8aaf00ddcbd7b07da429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyOTI0Nw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468929247", "bodyText": "The params on call can be elided but the param on newMasterCaller() is mandatory.", "author": "ndimiduk", "createdAt": "2020-08-11T23:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDQ4Ng==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r467484486", "bodyText": "nit: Collections.emptyList() ?", "author": "virajjasani", "createdAt": "2020-08-08T17:06:31Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java", "diffHunk": "@@ -2293,6 +2293,13 @@ public static TableName toTableName(HBaseProtos.TableName tableNamePB) {\n         .setQualifier(UnsafeByteOperations.unsafeWrap(tableName.getQualifier())).build();\n   }\n \n+  public static List<HBaseProtos.TableName> toProtoTableNameList(List<TableName> tableNameList) {\n+    if (tableNameList == null) {\n+      return new ArrayList<>();", "originalCommit": "e415f721ab98e4ee72dc8aaf00ddcbd7b07da429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4ODUzMw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468088533", "bodyText": "emptyList returns a non-modifiable collection. The other methods here follow this pattern of returning a modifiable list. I haven't evaluated all the call-sites to see if emptyList would be acceptable. Even if not, probably these ArrayLists should be replaced with LinkedList.", "author": "ndimiduk", "createdAt": "2020-08-10T18:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMjQxMg==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468532412", "bodyText": "For the purpose of this PR, if we return non-modifiable collection, getTableDescriptors in HMaster will interpret it as expected: if (tableNameList == null || tableNameList.isEmpty()) {, however since this is generic method and we are following the same approach for majority of util methods on this class, we can keep it same way.\nAll good here.\n\nEven if not, probably these ArrayLists should be replaced with LinkedList.\n\nYou meant as separate task right? +1", "author": "virajjasani", "createdAt": "2020-08-11T12:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTAwNg==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468919006", "bodyText": "Yes, I mean as a general cleanup/improvement to the methods in this class, separate from this issue.", "author": "ndimiduk", "createdAt": "2020-08-11T23:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDk3NA==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r467484974", "bodyText": "Since this is being called by chore continuously, maybe we can create a constant and use it?", "author": "virajjasani", "createdAt": "2020-08-08T17:11:48Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1908,14 +1907,18 @@ public RegionNormalizer getRegionNormalizer() {\n     return this.normalizer;\n   }\n \n+  public boolean normalizeRegions() throws IOException {\n+    return normalizeRegions(new NormalizeTableFilterParams.Builder().build());", "originalCommit": "e415f721ab98e4ee72dc8aaf00ddcbd7b07da429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MTE1Mg==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468091152", "bodyText": "Keeping an object forever in OldGen vs creating and GC'ing the object... for a chore that runs every 30 minutes? (shrug) If you feel strongly, sure.", "author": "ndimiduk", "createdAt": "2020-08-10T18:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyNjc0Ng==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r468526746", "bodyText": "Yeah you are right, GC'ing sounds better. Thanks.", "author": "virajjasani", "createdAt": "2020-08-11T12:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NDk3NA=="}], "type": "inlineReview"}, {"oid": "0335733e4ce0420288f60c05e3269805783afda4", "url": "https://github.com/apache/hbase/commit/0335733e4ce0420288f60c05e3269805783afda4", "message": "HBASE-24627 Normalize one table at a time\n\nIntroduce an additional method to our Admin interface that allow an\noperator to selectivly run the normalizer. The IPC protocol supports\ngeneral table name select via compound filter.", "committedDate": "2020-08-11T23:22:23Z", "type": "forcePushed"}, {"oid": "111552c554b4418621e677faff87f2e248736e46", "url": "https://github.com/apache/hbase/commit/111552c554b4418621e677faff87f2e248736e46", "message": "HBASE-24627 Normalize one table at a time\n\nIntroduce an additional method to our Admin interface that allow an\noperator to selectivly run the normalizer. The IPC protocol supports\ngeneral table name select via compound filter.", "committedDate": "2020-08-11T23:59:18Z", "type": "forcePushed"}, {"oid": "d6d1a0999b2e0bed0e183b5d544469f375e333ae", "url": "https://github.com/apache/hbase/commit/d6d1a0999b2e0bed0e183b5d544469f375e333ae", "message": "address checkstyle and some rubocop warnings", "committedDate": "2020-08-13T21:53:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwNTM3OA==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r470405378", "bodyText": "excellent summary!", "author": "busbey", "createdAt": "2020-08-14T04:36:27Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/NormalizeTableFilterParams.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.util.List;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.yetus.audience.InterfaceStability;\n+\n+/**\n+ * A collection of criteria used for table selection. The logic of table selection is as follows:\n+ * <ul>\n+ *   <li>\n+ *     When no parameter values are provided, an unfiltered list of all user tables is returned.\n+ *   </li>\n+ *   <li>\n+ *     When a list of {@link TableName TableNames} are provided, the filter starts with any of\n+ *     these tables that exist.\n+ *   </li>\n+ *   <li>\n+ *     When a {@code namespace} name is provided, the filter starts with all the tables present in\n+ *     that namespace.\n+ *   </li>\n+ *   <li>\n+ *     If both a list of {@link TableName TableNames} and a {@code namespace} name are provided,\n+ *     the {@link TableName} list is honored and the {@code namespace} name is ignored.\n+ *   </li>\n+ *   <li>\n+ *     If a {@code regex} is provided, this subset of {@link TableName TableNames} is further\n+ *     reduced to those that match the provided regular expression.\n+ *   </li>\n+ * </ul>", "originalCommit": "d6d1a0999b2e0bed0e183b5d544469f375e333ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwNTc5MQ==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r470405791", "bodyText": "nit: our API surface docs say that anything labeled IA.Public is inherently IS.Stable and shouldn't carry a label.", "author": "busbey", "createdAt": "2020-08-14T04:38:20Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/NormalizeTableFilterParams.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import java.util.List;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.yetus.audience.InterfaceStability;\n+\n+/**\n+ * A collection of criteria used for table selection. The logic of table selection is as follows:\n+ * <ul>\n+ *   <li>\n+ *     When no parameter values are provided, an unfiltered list of all user tables is returned.\n+ *   </li>\n+ *   <li>\n+ *     When a list of {@link TableName TableNames} are provided, the filter starts with any of\n+ *     these tables that exist.\n+ *   </li>\n+ *   <li>\n+ *     When a {@code namespace} name is provided, the filter starts with all the tables present in\n+ *     that namespace.\n+ *   </li>\n+ *   <li>\n+ *     If both a list of {@link TableName TableNames} and a {@code namespace} name are provided,\n+ *     the {@link TableName} list is honored and the {@code namespace} name is ignored.\n+ *   </li>\n+ *   <li>\n+ *     If a {@code regex} is provided, this subset of {@link TableName TableNames} is further\n+ *     reduced to those that match the provided regular expression.\n+ *   </li>\n+ * </ul>\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Evolving", "originalCommit": "d6d1a0999b2e0bed0e183b5d544469f375e333ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwODM0NA==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r470408344", "bodyText": "nit: could we add a default method here that calls normalize(NormalizeTableFilterParams) with an empty set of NTFparams? seems like we could clean up some stuff in the various *Admin implementations and RequestConverter", "author": "busbey", "createdAt": "2020-08-14T04:49:16Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Admin.java", "diffHunk": "@@ -856,11 +856,23 @@ void unassign(byte[] regionName, boolean force)\n    * the request was submitted successfully. We need to check logs for the details of which regions\n    * were split/merged.\n    *\n-   * @return <code>true</code> if region normalizer ran, <code>false</code> otherwise.\n+   * @return {@code true} if region normalizer ran, {@code false} otherwise.\n    * @throws IOException if a remote or network exception occurs\n    */\n   boolean normalize() throws IOException;", "originalCommit": "d6d1a0999b2e0bed0e183b5d544469f375e333ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NTI1Mw==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r471795253", "bodyText": "Oh, good point. I basically never think of interfaces as supporting default implementations. That's a decent plan, I believe.", "author": "ndimiduk", "createdAt": "2020-08-17T21:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQwODM5Ng==", "url": "https://github.com/apache/hbase/pull/2215#discussion_r470408396", "bodyText": "nit: could we add a default method here that calls normalize(NormalizeTableFilterParams) with an empty set of NTFparams? seems like we could clean up some stuff in the various *Admin implementations and RequestConverter", "author": "busbey", "createdAt": "2020-08-14T04:49:35Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java", "diffHunk": "@@ -1281,6 +1281,14 @@\n    */\n   CompletableFuture<Boolean> normalize();", "originalCommit": "d6d1a0999b2e0bed0e183b5d544469f375e333ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac0a4b6e2453cb8b1aeeb26e2d79a0c9cf392c04", "url": "https://github.com/apache/hbase/commit/ac0a4b6e2453cb8b1aeeb26e2d79a0c9cf392c04", "message": "address Busbey nits and more rubocop issues", "committedDate": "2020-08-17T22:11:33Z", "type": "forcePushed"}, {"oid": "2eb3c7ac434b7ce968ed6479c471dc93dc695d8f", "url": "https://github.com/apache/hbase/commit/2eb3c7ac434b7ce968ed6479c471dc93dc695d8f", "message": "HBASE-24627 Normalize one table at a time\n\nIntroduce an additional method to our Admin interface that allow an\noperator to selectivly run the normalizer. The IPC protocol supports\ngeneral table name select via compound filter.\n\nSigned-off-by: Sean Busbey <busbey@apache.org>\nSigned-off-by: Viraj Jasani <vjasani@apache.org>", "committedDate": "2020-08-18T16:42:33Z", "type": "commit"}, {"oid": "2eb3c7ac434b7ce968ed6479c471dc93dc695d8f", "url": "https://github.com/apache/hbase/commit/2eb3c7ac434b7ce968ed6479c471dc93dc695d8f", "message": "HBASE-24627 Normalize one table at a time\n\nIntroduce an additional method to our Admin interface that allow an\noperator to selectivly run the normalizer. The IPC protocol supports\ngeneral table name select via compound filter.\n\nSigned-off-by: Sean Busbey <busbey@apache.org>\nSigned-off-by: Viraj Jasani <vjasani@apache.org>", "committedDate": "2020-08-18T16:42:33Z", "type": "forcePushed"}]}