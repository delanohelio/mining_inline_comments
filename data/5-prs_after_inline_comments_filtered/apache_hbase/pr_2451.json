{"pr_number": 2451, "pr_title": "HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable w\u2026", "pr_createdAt": "2020-09-24T04:22:18Z", "pr_url": "https://github.com/apache/hbase/pull/2451", "timeline": [{"oid": "29365417110a57fcaebc10e40ffa1497f93196ae", "url": "https://github.com/apache/hbase/commit/29365417110a57fcaebc10e40ffa1497f93196ae", "message": "HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable when hbase:meta assigned to RS\n\nFill in gap left by HBASE-11183 'Timeline Consistent region replicas - Phase 2 design'.\nHBASE-11183 left off implementing 'async WAL Replication' on the hbase:meta\nTable; hbase:meta Table could only do Phase 1 Region Replicas reading\nthe primary Regions' hfiles. Here we add 'async WAL Replication' to\nhbase:meta so Replicas can be more current with the primary's changes.\n\nAdds a 'special' ReplicationSource that reads hbase:meta WAL files and replicates\nall edits to the configured in-cluster endpoint (Defaults to the\nRegionReadReplicaEndpoint.class -- set hbase.region.meta.replica.replication to\ntarget a different endpoint implementation).\n\nSet hbase.region.meta.replica.replication.enabled to enable async WAL\nReplication for hbase:meta region replicas. Its off by default.\n\nThe HBaseMetaReplicationSource for async WAL Replication of hbase:meta does\nNOT need to keep up WAL offset or a queue of WALs-to-replicate in the\nreplication queue store as is done in other ReplicationSource implementations;\nthe HBaseMetaReplicationSource is for Region Replicas only. General\nReplication does not replicate hbase:meta. hbase:meta Region Replicas reset\non crash of the primary replica so there is no need to 'recover'\nreplication that was running on the crashed server.\n\nBecause it so different in operation, the HBaseMetaReplicationSource is bolted\non to the side of the ReplicationSourceManager. It is lazily\ninstantiated to match the lazy instantiation of the hbase:meta\nWALProvider, created and started on the open of the first Region of an\nhbase:meta table. Thereafter it stays up till the process dies, even if\nall hbase:meta Regions have moved off the server, in case a hbase:meta\nRegion is moved back (Doing this latter simplifies the implementation)\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n  Read configuration to see if we need to wait on setting a Region read-enabled\n  (if so, replicas will only flip to enable read after confirming a\n  flush of the primary so they for sure are a replica of a known point)\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/AssignRegionHandler.java\n If configured, on open of hbase:meta, ask the ReplicationSourceManager\n to add a ReplicationSource (if it hasn't already).\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/RegionReplicaFlushHandler.java\n Edit log message.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/UnassignRegionHandler.java\n If configured, on close of hbase:meta, update ReplicationSourceManager\n that a source Region has closed.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceFactory.java\n javadoc and make constructor private.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\n Add logPositionAndCleanOldLogs w/ default of the old behavior so\n HBaseMetaReplicationSource can bypass updating store with WAL position,\n etc.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java\n Add creation and start of an HBaseMetaReplicationSource.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java\n Go via ReplicationSource when calling logPostionAndCleanOldLogs.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALFileLengthProvider.java\n Javadoc.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n Add utility for reading configurations for hbase:meta region replicas.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALEdit.java\n Add an isFlushMarker utility.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n Javadoc.\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpoint.java\n Use define.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseMetaReplicationSource.java\n Specical version of ReplicationSource for Region Replicas on\n hbase:meta.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseMetaReplicationSourcePeer.java\n Needs a special peer too (peers are baked into replication though we\n don't use 'peers' here)\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java\nhbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALProvider.java\n Tests.", "committedDate": "2020-09-24T04:20:14Z", "type": "commit"}, {"oid": "1b4a85e2eb6dade6c5797b2e7e18f10c2f9ae273", "url": "https://github.com/apache/hbase/commit/1b4a85e2eb6dade6c5797b2e7e18f10c2f9ae273", "message": "HBASE-25055 Add ReplicationSource for meta WALs; add enable/disable when hbase:meta assigned to RS\n\nFill in gap left by HBASE-11183 'Timeline Consistent region replicas - Phase 2 design'.\nHBASE-11183 left off implementing 'async WAL Replication' on the hbase:meta\nTable; hbase:meta Table could only do Phase 1 Region Replicas reading\nthe primary Regions' hfiles. Here we add 'async WAL Replication' to\nhbase:meta so Replicas can be more current with the primary's changes.\n\nAdds a 'special' ReplicationSource that reads hbase:meta WAL files and replicates\nall edits to the configured in-cluster endpoint (Defaults to the\nRegionReadReplicaEndpoint.class -- set hbase.region.meta.replica.replication to\ntarget a different endpoint implementation).\n\nSet hbase.region.meta.replica.replication.enabled to enable async WAL\nReplication for hbase:meta region replicas. Its off by default.\n\nThe HBaseMetaReplicationSource for async WAL Replication of hbase:meta does\nNOT need to keep up WAL offset or a queue of WALs-to-replicate in the\nreplication queue store as is done in other ReplicationSource implementations;\nthe HBaseMetaReplicationSource is for Region Replicas only. General\nReplication does not replicate hbase:meta. hbase:meta Region Replicas reset\non crash of the primary replica so there is no need to 'recover'\nreplication that was running on the crashed server.\n\nBecause it so different in operation, the HBaseMetaReplicationSource is bolted\non to the side of the ReplicationSourceManager. It is lazily\ninstantiated to match the lazy instantiation of the hbase:meta\nWALProvider, created and started on the open of the first Region of an\nhbase:meta table. Thereafter it stays up till the process dies, even if\nall hbase:meta Regions have moved off the server, in case a hbase:meta\nRegion is moved back (Doing this latter simplifies the implementation)\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n  Read configuration to see if we need to wait on setting a Region read-enabled\n  (if so, replicas will only flip to enable read after confirming a\n  flush of the primary so they for sure are a replica of a known point)\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/AssignRegionHandler.java\n If configured, on open of hbase:meta, ask the ReplicationSourceManager\n to add a ReplicationSource (if it hasn't already).\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/RegionReplicaFlushHandler.java\n Edit log message.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/UnassignRegionHandler.java\n If configured, on close of hbase:meta, update ReplicationSourceManager\n that a source Region has closed.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceFactory.java\n javadoc and make constructor private.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\n Add logPositionAndCleanOldLogs w/ default of the old behavior so\n HBaseMetaReplicationSource can bypass updating store with WAL position,\n etc.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java\n Add creation and start of an HBaseMetaReplicationSource.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java\n Go via ReplicationSource when calling logPostionAndCleanOldLogs.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALFileLengthProvider.java\n Javadoc.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n Add utility for reading configurations for hbase:meta region replicas.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALEdit.java\n Add an isFlushMarker utility.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n Javadoc.\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRegionReplicaReplicationEndpoint.java\n Use define.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseMetaReplicationSource.java\n Specical version of ReplicationSource for Region Replicas on\n hbase:meta.\n\nhbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseMetaReplicationSourcePeer.java\n Needs a special peer too (peers are baked into replication though we\n don't use 'peers' here)\n\nhbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java\nhbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALProvider.java\n Tests.", "committedDate": "2020-09-24T05:06:08Z", "type": "commit"}, {"oid": "d5a45a721473e81a8b8a67727d007cbbf2f17d3e", "url": "https://github.com/apache/hbase/commit/d5a45a721473e81a8b8a67727d007cbbf2f17d3e", "message": "Get the walProvider to use in Replication#initialize from passed walFactory", "committedDate": "2020-09-24T05:13:38Z", "type": "commit"}, {"oid": "74df9a20fd9c3c6cba808ff0749cdb3df09818f3", "url": "https://github.com/apache/hbase/commit/74df9a20fd9c3c6cba808ff0749cdb3df09818f3", "message": "Merge branch 'HBASE-25055' of github.com:saintstack/hbase into HEAD", "committedDate": "2020-09-24T05:16:02Z", "type": "commit"}, {"oid": "875d09217285d43336d169caf92d7a9a361567b2", "url": "https://github.com/apache/hbase/commit/875d09217285d43336d169caf92d7a9a361567b2", "message": "Bug fix for failing tests", "committedDate": "2020-09-29T23:16:30Z", "type": "commit"}, {"oid": "3bdf97ae6035f42a4ebdde0cbdd913bae38e9414", "url": "https://github.com/apache/hbase/commit/3bdf97ae6035f42a4ebdde0cbdd913bae38e9414", "message": "Rename HBaseMetaReplicationSource and Peer to be\nCatalogReplicationSource", "committedDate": "2020-09-29T23:49:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0NTU1Mg==", "url": "https://github.com/apache/hbase/pull/2451#discussion_r497745552", "bodyText": "Nit: can we have another utility method of\nconf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION)\nas is isUserRegionReplicaReplicationEnabled(***)?\nIt will be easy to read.", "author": "huaxiangsun", "createdAt": "2020-09-30T19:22:00Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "diffHunk": "@@ -154,47 +162,60 @@ public static StoreFileInfo getStoreFileInfo(Configuration conf, FileSystem fs,\n   }\n \n   /**\n-   * Create replication peer for replicating to region replicas if needed.\n+   * Create replication peer for replicating user-space Region Read Replicas.\n    * @param conf configuration to use\n-   * @throws IOException\n    */\n   public static void setupRegionReplicaReplication(Configuration conf) throws IOException {\n-    if (!isRegionReplicaReplicationEnabled(conf)) {\n+    if (!conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION)) {\n       return;\n     }\n-\n+    String peerId = REGION_REPLICA_REPLICATION_PEER;\n     try (Connection connection = ConnectionFactory.createConnection(conf);\n       Admin admin = connection.getAdmin()) {\n       ReplicationPeerConfig peerConfig = null;\n       try {\n-        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n+        peerConfig = admin.getReplicationPeerConfig(peerId);\n       } catch (ReplicationPeerNotFoundException e) {\n-        LOG.warn(\n-          \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n-          e);\n+        LOG.warn(\"Region replica peer id={} does not exist\", peerId, e);\n       }\n-\n       if (peerConfig == null) {\n-        LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-          + \" not exist. Creating...\");\n-        peerConfig = new ReplicationPeerConfig();\n-        peerConfig.setClusterKey(ZKConfig.getZooKeeperClusterKey(conf));\n-        peerConfig.setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName());\n-        admin.addReplicationPeer(REGION_REPLICA_REPLICATION_PEER, peerConfig);\n+        LOG.info(\"Region Read Replica peerId={} does not exist; creating...\", peerId);\n+        peerConfig = ReplicationPeerConfig.newBuilder().\n+          setClusterKey(ZKConfig.getZooKeeperClusterKey(conf)).\n+          setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName()).build();\n+        admin.addReplicationPeer(peerId, peerConfig);\n       }\n     }\n   }\n \n-  public static boolean isRegionReplicaReplicationEnabled(Configuration conf) {\n-    return conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY,\n-      DEFAULT_REGION_REPLICA_REPLICATION);\n+  /**\n+   * @return True if Region Read Replica is enabled for <code>tn</code>.\n+   */\n+  public static boolean isRegionReplicaReplicationEnabled(Configuration conf, TableName tn) {\n+    return isMetaRegionReplicaReplicationEnabled(conf, tn) ||\n+      conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION);", "originalCommit": "29365417110a57fcaebc10e40ffa1497f93196ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDkwNg==", "url": "https://github.com/apache/hbase/pull/2451#discussion_r498424906", "bodyText": "np. sounds good.", "author": "saintstack", "createdAt": "2020-10-01T18:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0NTU1Mg=="}], "type": "inlineReview"}, {"oid": "1d9d7dce61233a88beb7f7c734e5db109df0dae7", "url": "https://github.com/apache/hbase/commit/1d9d7dce61233a88beb7f7c734e5db109df0dae7", "message": "Address Huaxiang's comments", "committedDate": "2020-10-02T03:39:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NTMyOQ==", "url": "https://github.com/apache/hbase/pull/2451#discussion_r498885329", "bodyText": "Why FlakeyTests?", "author": "Apache9", "createdAt": "2020-10-02T15:15:07Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java", "diffHunk": "@@ -0,0 +1,334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.replication.regionserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellScanner;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.ClientMetaTableAccessor;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.MiniHBaseCluster;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.RegionLocator;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.regionserver.HRegion;\n+import org.apache.hadoop.hbase.regionserver.HRegionServer;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.testclassification.FlakeyTests;\n+import org.apache.hadoop.hbase.testclassification.LargeTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.ServerRegionReplicaUtil;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests RegionReplicaReplicationEndpoint class for hbase:meta by setting up region replicas and\n+ * verifying async wal replication replays the edits to the secondary region in various scenarios.\n+ * @see TestRegionReplicaReplicationEndpoint\n+ */\n+@Category({FlakeyTests.class, LargeTests.class})", "originalCommit": "1d9d7dce61233a88beb7f7c734e5db109df0dae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMDk1Nw==", "url": "https://github.com/apache/hbase/pull/2451#discussion_r498900957", "bodyText": "Copy/Paste. Let me fix. Thanks.", "author": "saintstack", "createdAt": "2020-10-02T15:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NTMyOQ=="}], "type": "inlineReview"}, {"oid": "4b0d0135a9fa0f6a287ed641023cc61d31389a47", "url": "https://github.com/apache/hbase/commit/4b0d0135a9fa0f6a287ed641023cc61d31389a47", "message": "Fix mislabel on TestMetaRegionReplicaReplicationEndpoint test", "committedDate": "2020-10-02T18:09:13Z", "type": "commit"}, {"oid": "1bf8a787f6c0ea2e4589eb10b8426f18f1a6f035", "url": "https://github.com/apache/hbase/commit/1bf8a787f6c0ea2e4589eb10b8426f18f1a6f035", "message": "Put back passing of replicationQueueStorage to ReplicationSource... RS needs it in one location", "committedDate": "2020-10-02T19:22:45Z", "type": "commit"}]}