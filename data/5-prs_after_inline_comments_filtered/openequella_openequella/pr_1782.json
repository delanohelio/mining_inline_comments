{"pr_number": 1782, "pr_title": "Feature/rest endpoint for search2", "pr_createdAt": "2020-06-03T00:58:47Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1782", "timeline": [{"oid": "7ddc2e9e1246377388206181ea788ebb5684184c", "url": "https://github.com/openequella/openEQUELLA/commit/7ddc2e9e1246377388206181ea788ebb5684184c", "message": "Add a new Search REST endpoint, including:\n\n1. Create a new class called 'SearchParam' where search parameters are\ndefined and marked as 'QueryParam'.\n\n2. Create new model classes for search results so the response structure\nwill be static.\n\n3. Create a helper class which provides common functions required in a\nsearch.\n\n4. Create a new REST Resource for the path of 'search2'.", "committedDate": "2020-06-03T00:48:01Z", "type": "commit"}, {"oid": "9ba784a27598a94bf144db2c0e34da8d1fa801fb", "url": "https://github.com/openequella/openEQUELLA/commit/9ba784a27598a94bf144db2c0e34da8d1fa801fb", "message": "Create a new abstract REST test and refactor AuthApiTest.\n\nCreate a new REST test for the endpoint 'search2'.", "committedDate": "2020-06-03T00:52:40Z", "type": "commit"}, {"oid": "b13f35117a6f4a063d4d6ffc1b8ef8b08306f7d2", "url": "https://github.com/openequella/openEQUELLA/commit/b13f35117a6f4a063d4d6ffc1b8ef8b08306f7d2", "message": "Add headers for all the search2 related classes.", "committedDate": "2020-06-03T01:24:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NTk4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434265985", "bodyText": "Is this @TestInstitution annotation needed? I thought this was set automatically by way of it extending AbstractRestApiTest.", "author": "SammyIsConfused", "createdAt": "2020-06-03T01:53:23Z", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/Search2ApiTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"rest\")", "originalCommit": "9ba784a27598a94bf144db2c0e34da8d1fa801fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MzEwMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434273101", "bodyText": "No, I will remove this annotation.", "author": "PenghaiZhang", "createdAt": "2020-06-03T02:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NTk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjQ0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434266444", "bodyText": "These asserts mean that the institution can not have any other items added it to it without breaking the test. Thats fine, just highlighting that further tests in the same institution that involve adding/removing items could break these.", "author": "SammyIsConfused", "createdAt": "2020-06-03T01:55:33Z", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/Search2ApiTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"rest\")\n+public class Search2ApiTest extends AbstractRestApiTest {\n+  private static final String SEARCH_API_ENDPOINT = TEST_CONFIG.getInstitutionUrl() + \"api/search2\";\n+\n+  @Test\n+  public void noParamSearchTest() throws IOException {\n+    JsonNode result = doSearch(200);\n+    assertEquals(result.get(\"available\").asInt(), 73);", "originalCommit": "9ba784a27598a94bf144db2c0e34da8d1fa801fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MzU0OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434273548", "bodyText": "Hmmm,  I should not bring inflexibility in just because of this assertion.  I will change this assertion.", "author": "PenghaiZhang", "createdAt": "2020-06-03T02:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NzEwMA==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434267100", "bodyText": "Might be a good idea to have a short comment on each of these test methods explaining its purpose, I.E what is the test case we are checking here?", "author": "SammyIsConfused", "createdAt": "2020-06-03T01:58:14Z", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/Search2ApiTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.github.openequella.rest;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import com.tle.webtests.framework.TestInstitution;\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.codehaus.jackson.JsonNode;\n+import org.testng.annotations.Test;\n+\n+@TestInstitution(\"rest\")\n+public class Search2ApiTest extends AbstractRestApiTest {\n+  private static final String SEARCH_API_ENDPOINT = TEST_CONFIG.getInstitutionUrl() + \"api/search2\";\n+\n+  @Test\n+  public void noParamSearchTest() throws IOException {\n+    JsonNode result = doSearch(200);\n+    assertEquals(result.get(\"available\").asInt(), 73);\n+  }\n+\n+  @Test\n+  public void queryTest() throws IOException {", "originalCommit": "9ba784a27598a94bf144db2c0e34da8d1fa801fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NjE4OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434296188", "bodyText": "You can use the description attribute on the annotation for that. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-06-03T04:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NzEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTQ4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434309485", "bodyText": "Good stuff creating this. I envisaged we'd need this eventually, but in my case it wasn't needed yet. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-06-03T05:04:20Z", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/AbstractRestApiTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.openequella.rest;\n+\n+import com.tle.webtests.framework.TestConfig;\n+import com.tle.webtests.framework.TestInstitution;\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.commons.httpclient.methods.PostMethod;\n+import org.apache.commons.httpclient.methods.PutMethod;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+\n+@TestInstitution(\"rest\")\n+public class AbstractRestApiTest {", "originalCommit": "b13f35117a6f4a063d4d6ffc1b8ef8b08306f7d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTYwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1782#discussion_r434309609", "bodyText": "stray blank line", "author": "edalex-ian", "createdAt": "2020-06-03T05:04:52Z", "path": "autotest/OldTests/src/test/java/io/github/openequella/rest/AbstractRestApiTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.openequella.rest;\n+\n+import com.tle.webtests.framework.TestConfig;\n+import com.tle.webtests.framework.TestInstitution;\n+import java.io.IOException;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.apache.commons.httpclient.NameValuePair;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.commons.httpclient.methods.PostMethod;\n+import org.apache.commons.httpclient.methods.PutMethod;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+\n+@TestInstitution(\"rest\")\n+public class AbstractRestApiTest {\n+\n+  protected static final TestConfig TEST_CONFIG = new TestConfig(AbstractRestApiTest.class);\n+  protected static final String USERNAME = \"AutoTest\";\n+  protected static final String PASSWORD = \"automated\";\n+  private static final String AUTH_API_ENDPOINT = TEST_CONFIG.getInstitutionUrl() + \"api/auth\";\n+\n+  protected final HttpClient httpClient = new HttpClient();\n+  protected final ObjectMapper mapper = new ObjectMapper();\n+\n+  @BeforeClass\n+  public void login() throws IOException {\n+    makeClientRequest(buildLoginMethod(USERNAME, PASSWORD));\n+  }\n+\n+  @AfterClass\n+  public void logout() throws IOException {\n+    makeClientRequest(buildLogoutMethod());\n+  }\n+\n+  protected int makeClientRequest(HttpMethod method) throws IOException {\n+    return httpClient.executeMethod(method);\n+  }\n+\n+  protected HttpMethod buildLoginMethod(String username, String password) {\n+", "originalCommit": "b13f35117a6f4a063d4d6ffc1b8ef8b08306f7d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "238339c751261dc6df53fb6aa6b0e378504a67b3", "url": "https://github.com/openequella/openEQUELLA/commit/238339c751261dc6df53fb6aa6b0e378504a67b3", "message": "Refactor Search2ApiTest: adding descriptions for each test and making\nsome assertions more reasonable.", "committedDate": "2020-06-04T00:00:36Z", "type": "commit"}, {"oid": "3e844216d981ed490e76345b2bbf5f7d32c5a042", "url": "https://github.com/openequella/openEQUELLA/commit/3e844216d981ed490e76345b2bbf5f7d32c5a042", "message": "Use enum instead of String for the queryparam of status.\n\nSearchResult takes a type parameter.\n\nSimplify how to handle free text query for a search.\n\nAdd Javadoc for SearchHelper and SearchParam.", "committedDate": "2020-06-04T00:13:04Z", "type": "commit"}, {"oid": "51915af11e984b777af8674a49c5ff08c3bc960c", "url": "https://github.com/openequella/openEQUELLA/commit/51915af11e984b777af8674a49c5ff08c3bc960c", "message": "Resteasy can check if a String is a valid value of ItemStatus so remove\nthe function 'handleItemStatus'.\n\nThe tests for searching by order or reversed order really do not need\nto check what is the first item in the search result list.", "committedDate": "2020-06-04T01:59:05Z", "type": "commit"}]}