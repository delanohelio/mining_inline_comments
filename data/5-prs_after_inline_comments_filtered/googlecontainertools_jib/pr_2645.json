{"pr_number": 2645, "pr_title": "Add FilePropertiesStack helper class", "pr_createdAt": "2020-07-30T15:51:46Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2645", "timeline": [{"oid": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "url": "https://github.com/GoogleContainerTools/jib/commit/c89e76fb90357a0d2ed9d39d795684d88095bfe3", "message": "Add FilePropertiesStack helper class\n\nThis keeps track of the various cascading properties of file\nlayers at different levels. Allows pushing and popping, but its\ntrue value is calculating and providing the various file permissions\nand properties to whatever bit of code is populating a layer.", "committedDate": "2020-07-28T17:16:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2OTA0Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463169047", "bodyText": "final", "author": "chanseokoh", "createdAt": "2020-07-30T17:50:23Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A class that keeps track of permissions for various stacking file permissions settings in {@link\n+ * LayerSpec}.\n+ */\n+@VisibleForTesting\n+class FilePropertiesStack {\n+\n+  // TODO perhaps use a fixed size list here\n+  private List<FilePropertiesSpec> stack = new ArrayList<>(3);", "originalCommit": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMTYyOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463211629", "bodyText": "How about permissions = properties.getFilePermissions.orElse(permissions)? Or, how about just declaring the field as Optional and assign them directly? (The getter return types can remain @Nullable though.)", "author": "chanseokoh", "createdAt": "2020-07-30T19:08:42Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A class that keeps track of permissions for various stacking file permissions settings in {@link\n+ * LayerSpec}.\n+ */\n+@VisibleForTesting\n+class FilePropertiesStack {\n+\n+  // TODO perhaps use a fixed size list here\n+  private List<FilePropertiesSpec> stack = new ArrayList<>(3);\n+\n+  @Nullable private FilePermissions filePermissions;\n+  @Nullable private FilePermissions directoryPermissions;\n+  @Nullable private Instant modificationTime;\n+  @Nullable private String ownership;\n+\n+  // intermediate values\n+  @Nullable private String user;\n+  @Nullable private String group;\n+\n+  /**\n+   * Add a new layer to the file properties stack. When adding a new layer, it is given highest\n+   * priority when resolving properties. All values are recalculated.\n+   */\n+  public void push(FilePropertiesSpec filePropertiesSpec) {\n+    Preconditions.checkState(\n+        stack.size() < 3, \"Error in file properties stack push, stacking over 3\");\n+    stack.add(filePropertiesSpec);\n+    updateProperties();\n+  }\n+\n+  /** Remove the last layer from the stack. All values are recalculated. */\n+  public void pop() {\n+    Preconditions.checkState(stack.size() > 0, \"Error in file properties stack pop, popping at 0\");\n+    stack.remove(stack.size() - 1);\n+    updateProperties();\n+  }\n+\n+  private void updateProperties() {\n+    // clear existing permissions before recalculating\n+    filePermissions = null;\n+    directoryPermissions = null;\n+    modificationTime = null;\n+    ownership = null;\n+    user = null;\n+    group = null;\n+\n+    // the item with the lowest index has the lowest priority\n+    for (FilePropertiesSpec properties : stack) {\n+      properties.getFilePermissions().ifPresent(permissions -> filePermissions = permissions);", "originalCommit": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NTE1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463295159", "bodyText": "OrElse has a nice flow to it.", "author": "loosebazooka", "createdAt": "2020-07-30T21:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMTYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMjgzMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463212833", "bodyText": "I usually pay special attention to String or collections when combined with Optional, as they can be empty. Is it guaranteed that user is a non-empty string (if present)? Otherwise, it's possible that a lower stack has, say, \"1234\" and a higher \"\" (empty string), resulting in clearing \"1234\".", "author": "chanseokoh", "createdAt": "2020-07-30T19:11:01Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A class that keeps track of permissions for various stacking file permissions settings in {@link\n+ * LayerSpec}.\n+ */\n+@VisibleForTesting\n+class FilePropertiesStack {\n+\n+  // TODO perhaps use a fixed size list here\n+  private List<FilePropertiesSpec> stack = new ArrayList<>(3);\n+\n+  @Nullable private FilePermissions filePermissions;\n+  @Nullable private FilePermissions directoryPermissions;\n+  @Nullable private Instant modificationTime;\n+  @Nullable private String ownership;\n+\n+  // intermediate values\n+  @Nullable private String user;\n+  @Nullable private String group;\n+\n+  /**\n+   * Add a new layer to the file properties stack. When adding a new layer, it is given highest\n+   * priority when resolving properties. All values are recalculated.\n+   */\n+  public void push(FilePropertiesSpec filePropertiesSpec) {\n+    Preconditions.checkState(\n+        stack.size() < 3, \"Error in file properties stack push, stacking over 3\");\n+    stack.add(filePropertiesSpec);\n+    updateProperties();\n+  }\n+\n+  /** Remove the last layer from the stack. All values are recalculated. */\n+  public void pop() {\n+    Preconditions.checkState(stack.size() > 0, \"Error in file properties stack pop, popping at 0\");\n+    stack.remove(stack.size() - 1);\n+    updateProperties();\n+  }\n+\n+  private void updateProperties() {\n+    // clear existing permissions before recalculating\n+    filePermissions = null;\n+    directoryPermissions = null;\n+    modificationTime = null;\n+    ownership = null;\n+    user = null;\n+    group = null;\n+\n+    // the item with the lowest index has the lowest priority\n+    for (FilePropertiesSpec properties : stack) {\n+      properties.getFilePermissions().ifPresent(permissions -> filePermissions = permissions);\n+      properties\n+          .getDirectoryPermissions()\n+          .ifPresent(permissions -> directoryPermissions = permissions);\n+      properties.getTimestamp().ifPresent(timestamp -> modificationTime = timestamp);\n+      properties.getUser().ifPresent(user -> this.user = user);\n+      properties.getGroup().ifPresent(group -> this.group = group);", "originalCommit": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NTU3MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463295571", "bodyText": "Right, so something I didn't include in this PR was enforcing empty in the json parser. I have that in a separate branch. But basically empty items will not be allowed.", "author": "loosebazooka", "createdAt": "2020-07-30T22:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxMjgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNjA3Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463216072", "bodyText": "So if a lower stack had user=1234 but a higher stack group=5678, it will lose 1234. Probably this is what we intend, but I just wanted to confirm. Maybe good to have a test to formalize the intention.", "author": "chanseokoh", "createdAt": "2020-07-30T19:17:15Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A class that keeps track of permissions for various stacking file permissions settings in {@link\n+ * LayerSpec}.\n+ */\n+@VisibleForTesting\n+class FilePropertiesStack {\n+\n+  // TODO perhaps use a fixed size list here\n+  private List<FilePropertiesSpec> stack = new ArrayList<>(3);\n+\n+  @Nullable private FilePermissions filePermissions;\n+  @Nullable private FilePermissions directoryPermissions;\n+  @Nullable private Instant modificationTime;\n+  @Nullable private String ownership;\n+\n+  // intermediate values\n+  @Nullable private String user;\n+  @Nullable private String group;\n+\n+  /**\n+   * Add a new layer to the file properties stack. When adding a new layer, it is given highest\n+   * priority when resolving properties. All values are recalculated.\n+   */\n+  public void push(FilePropertiesSpec filePropertiesSpec) {\n+    Preconditions.checkState(\n+        stack.size() < 3, \"Error in file properties stack push, stacking over 3\");\n+    stack.add(filePropertiesSpec);\n+    updateProperties();\n+  }\n+\n+  /** Remove the last layer from the stack. All values are recalculated. */\n+  public void pop() {\n+    Preconditions.checkState(stack.size() > 0, \"Error in file properties stack pop, popping at 0\");\n+    stack.remove(stack.size() - 1);\n+    updateProperties();\n+  }\n+\n+  private void updateProperties() {\n+    // clear existing permissions before recalculating\n+    filePermissions = null;\n+    directoryPermissions = null;\n+    modificationTime = null;\n+    ownership = null;\n+    user = null;\n+    group = null;\n+\n+    // the item with the lowest index has the lowest priority\n+    for (FilePropertiesSpec properties : stack) {\n+      properties.getFilePermissions().ifPresent(permissions -> filePermissions = permissions);\n+      properties\n+          .getDirectoryPermissions()\n+          .ifPresent(permissions -> directoryPermissions = permissions);\n+      properties.getTimestamp().ifPresent(timestamp -> modificationTime = timestamp);\n+      properties.getUser().ifPresent(user -> this.user = user);\n+      properties.getGroup().ifPresent(group -> this.group = group);\n+    }\n+    // ownership calculations\n+    if (group == null) {", "originalCommit": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NjQxMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463296410", "bodyText": "I'm not sure I understand, the ownership calculation is outside the loop. So once group and user are finalized, then the values are converted into an ownership string.", "author": "loosebazooka", "createdAt": "2020-07-30T22:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNjA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwOTU3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463309579", "bodyText": "Ah, I misunderstood. Yeah, the calculation is outside the loop.\nJust so you know, jib-core will probably accept : (a single colon) as an ownership string, but I think it makes sense to return null as done here when both user and group are null.", "author": "chanseokoh", "createdAt": "2020-07-30T22:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNjA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNjY4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463216687", "bodyText": "To me, the following is more readable in this case.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else {\n          \n          \n            \n                  if (user == null) {\n          \n          \n            \n                    ownership = \":\" + group;\n          \n          \n            \n                  } else {\n          \n          \n            \n                    ownership = user + \":\" + group;\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                } else if (user == null) {\n          \n          \n            \n                  ownership = \":\" + group;\n          \n          \n            \n                } else {\n          \n          \n            \n                  ownership = user + \":\" + group;\n          \n          \n            \n                }", "author": "chanseokoh", "createdAt": "2020-07-30T19:18:34Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A class that keeps track of permissions for various stacking file permissions settings in {@link\n+ * LayerSpec}.\n+ */\n+@VisibleForTesting\n+class FilePropertiesStack {\n+\n+  // TODO perhaps use a fixed size list here\n+  private List<FilePropertiesSpec> stack = new ArrayList<>(3);\n+\n+  @Nullable private FilePermissions filePermissions;\n+  @Nullable private FilePermissions directoryPermissions;\n+  @Nullable private Instant modificationTime;\n+  @Nullable private String ownership;\n+\n+  // intermediate values\n+  @Nullable private String user;\n+  @Nullable private String group;\n+\n+  /**\n+   * Add a new layer to the file properties stack. When adding a new layer, it is given highest\n+   * priority when resolving properties. All values are recalculated.\n+   */\n+  public void push(FilePropertiesSpec filePropertiesSpec) {\n+    Preconditions.checkState(\n+        stack.size() < 3, \"Error in file properties stack push, stacking over 3\");\n+    stack.add(filePropertiesSpec);\n+    updateProperties();\n+  }\n+\n+  /** Remove the last layer from the stack. All values are recalculated. */\n+  public void pop() {\n+    Preconditions.checkState(stack.size() > 0, \"Error in file properties stack pop, popping at 0\");\n+    stack.remove(stack.size() - 1);\n+    updateProperties();\n+  }\n+\n+  private void updateProperties() {\n+    // clear existing permissions before recalculating\n+    filePermissions = null;\n+    directoryPermissions = null;\n+    modificationTime = null;\n+    ownership = null;\n+    user = null;\n+    group = null;\n+\n+    // the item with the lowest index has the lowest priority\n+    for (FilePropertiesSpec properties : stack) {\n+      properties.getFilePermissions().ifPresent(permissions -> filePermissions = permissions);\n+      properties\n+          .getDirectoryPermissions()\n+          .ifPresent(permissions -> directoryPermissions = permissions);\n+      properties.getTimestamp().ifPresent(timestamp -> modificationTime = timestamp);\n+      properties.getUser().ifPresent(user -> this.user = user);\n+      properties.getGroup().ifPresent(group -> this.group = group);\n+    }\n+    // ownership calculations\n+    if (group == null) {\n+      ownership = user;\n+    } else {\n+      if (user == null) {\n+        ownership = \":\" + group;\n+      } else {\n+        ownership = user + \":\" + group;\n+      }\n+    }", "originalCommit": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxODM5MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463218391", "bodyText": "These don't seem necessary. In updateProperties(), you always start with null. These can be local to the method.", "author": "chanseokoh", "createdAt": "2020-07-30T19:21:50Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A class that keeps track of permissions for various stacking file permissions settings in {@link\n+ * LayerSpec}.\n+ */\n+@VisibleForTesting\n+class FilePropertiesStack {\n+\n+  // TODO perhaps use a fixed size list here\n+  private List<FilePropertiesSpec> stack = new ArrayList<>(3);\n+\n+  @Nullable private FilePermissions filePermissions;\n+  @Nullable private FilePermissions directoryPermissions;\n+  @Nullable private Instant modificationTime;\n+  @Nullable private String ownership;\n+\n+  // intermediate values\n+  @Nullable private String user;\n+  @Nullable private String group;", "originalCommit": "c89e76fb90357a0d2ed9d39d795684d88095bfe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NjY0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r463296640", "bodyText": "Yeah, I can't remember why I did this, good catch.", "author": "loosebazooka", "createdAt": "2020-07-30T22:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxODM5MQ=="}], "type": "inlineReview"}, {"oid": "4cc3e318b65c28bad75ce6b4d8e3ab22025cc537", "url": "https://github.com/GoogleContainerTools/jib/commit/4cc3e318b65c28bad75ce6b4d8e3ab22025cc537", "message": "review fixes", "committedDate": "2020-07-30T22:04:56Z", "type": "commit"}, {"oid": "ba8c3f154800f1c4af0e6e663d8f3cf4ac38a1cd", "url": "https://github.com/GoogleContainerTools/jib/commit/ba8c3f154800f1c4af0e6e663d8f3cf4ac38a1cd", "message": "oops, file from another branch", "committedDate": "2020-07-30T22:06:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MjUwMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r465362502", "bodyText": "super nit: could be useful to add inline comments for these parameters? like /*filePermissions=*/ etc.", "author": "mpeddada1", "createdAt": "2020-08-04T22:19:54Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStackTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.buildplan.FilePermissions;\n+import java.time.Instant;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FilePropertiesStackTest {\n+\n+  @Test\n+  public void testPush_simple() {\n+    FilePropertiesStack testStack = new FilePropertiesStack();\n+\n+    testStack.push(new FilePropertiesSpec(\"111\", \"111\", \"1\", \"1\", \"1\"));\n+\n+    Assert.assertEquals(FilePermissions.fromOctalString(\"111\"), testStack.getFilePermissions());\n+    Assert.assertEquals(\n+        FilePermissions.fromOctalString(\"111\"), testStack.getDirectoryPermissions());\n+    Assert.assertEquals(\"1:1\", testStack.getOwnership());\n+    Assert.assertEquals(Instant.ofEpochMilli(1), testStack.getModificationTime());\n+  }\n+\n+  @Test\n+  public void testPush_stacking() {\n+    FilePropertiesStack testStack = new FilePropertiesStack();\n+\n+    testStack.push(new FilePropertiesSpec(\"111\", \"111\", \"1\", \"1\", \"1\"));", "originalCommit": "ba8c3f154800f1c4af0e6e663d8f3cf4ac38a1cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMjM4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2645#discussion_r466432380", "bodyText": "In general we avoid these kind of comments. Usually that kind of information is provided by IDE, you can quickly determine what each parameter is. And adding those, can sometimes make it harder to read the code.", "author": "loosebazooka", "createdAt": "2020-08-06T13:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MjUwMg=="}], "type": "inlineReview"}]}