{"pr_number": 2739, "pr_title": "Use Gradle Property and Provider to enable lazy evaluation for jib.to.image and jib.to.tags", "pr_createdAt": "2020-09-03T00:05:10Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2739", "timeline": [{"oid": "6f4a7190db11f8be04afe65ddea351272b390dee", "url": "https://github.com/GoogleContainerTools/jib/commit/6f4a7190db11f8be04afe65ddea351272b390dee", "message": "Using gradle Property and Provider to enable lazy evaluation", "committedDate": "2020-09-03T00:02:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNTQyMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r482615420", "bodyText": "I think we can keep the current return type of String. Is there a specific reason for returning Provider<String>?", "author": "chanseokoh", "createdAt": "2020-09-03T00:27:11Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -33,28 +36,27 @@\n public class TargetImageParameters {\n \n   private final AuthParameters auth;\n+  private final Project project;\n \n-  @Nullable private String image;\n+  private Property<String> image;\n   private Set<String> tags = Collections.emptySet();\n   @Nullable private String credHelper;\n \n   @Inject\n-  public TargetImageParameters(ObjectFactory objectFactory) {\n+  public TargetImageParameters(ObjectFactory objectFactory, Project project) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    this.project = project;\n+    image = project.getObjects().property(String.class);\n+    image.set(project.provider(() -> System.getProperty(PropertyNames.TO_IMAGE)));\n   }\n \n   @Input\n-  @Nullable\n-  @Optional\n-  public String getImage() {\n-    if (System.getProperty(PropertyNames.TO_IMAGE) != null) {\n-      return System.getProperty(PropertyNames.TO_IMAGE);\n-    }\n+  public Provider<String> getImage() {", "originalCommit": "6f4a7190db11f8be04afe65ddea351272b390dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNTUyOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r482615529", "bodyText": "No need to accept objectFactory, as you can get it by project.getObjects(), which is what you are already doing in the new code.", "author": "chanseokoh", "createdAt": "2020-09-03T00:27:39Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -33,28 +36,27 @@\n public class TargetImageParameters {\n \n   private final AuthParameters auth;\n+  private final Project project;\n \n-  @Nullable private String image;\n+  private Property<String> image;\n   private Set<String> tags = Collections.emptySet();\n   @Nullable private String credHelper;\n \n   @Inject\n-  public TargetImageParameters(ObjectFactory objectFactory) {\n+  public TargetImageParameters(ObjectFactory objectFactory, Project project) {", "originalCommit": "6f4a7190db11f8be04afe65ddea351272b390dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNjEwNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r482616105", "bodyText": "I think we need an additional method setImage(Provider<String>)?", "author": "chanseokoh", "createdAt": "2020-09-03T00:29:47Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -33,28 +36,27 @@\n public class TargetImageParameters {\n \n   private final AuthParameters auth;\n+  private final Project project;\n \n-  @Nullable private String image;\n+  private Property<String> image;\n   private Set<String> tags = Collections.emptySet();\n   @Nullable private String credHelper;\n \n   @Inject\n-  public TargetImageParameters(ObjectFactory objectFactory) {\n+  public TargetImageParameters(ObjectFactory objectFactory, Project project) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    this.project = project;\n+    image = project.getObjects().property(String.class);\n+    image.set(project.provider(() -> System.getProperty(PropertyNames.TO_IMAGE)));\n   }\n \n   @Input\n-  @Nullable\n-  @Optional\n-  public String getImage() {\n-    if (System.getProperty(PropertyNames.TO_IMAGE) != null) {\n-      return System.getProperty(PropertyNames.TO_IMAGE);\n-    }\n+  public Provider<String> getImage() {\n     return image;\n   }\n \n   public void setImage(String image) {", "originalCommit": "6f4a7190db11f8be04afe65ddea351272b390dee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNjMyOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r482616328", "bodyText": "I'd like to keep the consistency that we read system properties in getters.", "author": "chanseokoh", "createdAt": "2020-09-03T00:30:34Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -33,28 +36,27 @@\n public class TargetImageParameters {\n \n   private final AuthParameters auth;\n+  private final Project project;\n \n-  @Nullable private String image;\n+  private Property<String> image;\n   private Set<String> tags = Collections.emptySet();\n   @Nullable private String credHelper;\n \n   @Inject\n-  public TargetImageParameters(ObjectFactory objectFactory) {\n+  public TargetImageParameters(ObjectFactory objectFactory, Project project) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    this.project = project;\n+    image = project.getObjects().property(String.class);\n+    image.set(project.provider(() -> System.getProperty(PropertyNames.TO_IMAGE)));", "originalCommit": "6f4a7190db11f8be04afe65ddea351272b390dee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzMTAzNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r483131037", "bodyText": "good call", "author": "mpeddada1", "createdAt": "2020-09-03T17:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNjMyOA=="}], "type": "inlineReview"}, {"oid": "934d9b09a199998a48a6f49e20b311707876faa6", "url": "https://github.com/GoogleContainerTools/jib/commit/934d9b09a199998a48a6f49e20b311707876faa6", "message": "fixes", "committedDate": "2020-09-03T16:24:18Z", "type": "commit"}, {"oid": "58575be180032e2d4d183362627b1ef0d61477c6", "url": "https://github.com/GoogleContainerTools/jib/commit/58575be180032e2d4d183362627b1ef0d61477c6", "message": "Add lazy eval for jib.to.tags", "committedDate": "2020-09-03T19:40:58Z", "type": "commit"}, {"oid": "2db50d020eaa9fab24f8d72b105388985307a6bd", "url": "https://github.com/GoogleContainerTools/jib/commit/2db50d020eaa9fab24f8d72b105388985307a6bd", "message": "remove unnecessary changes", "committedDate": "2020-09-03T19:42:13Z", "type": "commit"}, {"oid": "02ca7b9729a1b7d81f50f965e8e5d22981a8bdba", "url": "https://github.com/GoogleContainerTools/jib/commit/02ca7b9729a1b7d81f50f965e8e5d22981a8bdba", "message": "remove more unnecessary changes", "committedDate": "2020-09-03T19:44:34Z", "type": "commit"}, {"oid": "6d7b6ea1f8cc674870e6e69b229918e60b6cc4b3", "url": "https://github.com/GoogleContainerTools/jib/commit/6d7b6ea1f8cc674870e6e69b229918e60b6cc4b3", "message": "formatting", "committedDate": "2020-09-03T19:54:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjI4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r483226280", "bodyText": "Probably we need to keep @Nullable.", "author": "chanseokoh", "createdAt": "2020-09-03T20:10:00Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -34,42 +36,51 @@\n \n   private final AuthParameters auth;\n \n-  @Nullable private String image;\n-  private Set<String> tags = Collections.emptySet();\n+  private Property<String> image;\n+  private SetProperty<String> tags;\n   @Nullable private String credHelper;\n \n   @Inject\n   public TargetImageParameters(ObjectFactory objectFactory) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    image = objectFactory.property(String.class);\n+    tags = objectFactory.setProperty(String.class);\n   }\n \n   @Input\n-  @Nullable", "originalCommit": "6d7b6ea1f8cc674870e6e69b229918e60b6cc4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r483226494", "bodyText": "I speculate that we won't need this null check.", "author": "chanseokoh", "createdAt": "2020-09-03T20:10:28Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -34,42 +36,51 @@\n \n   private final AuthParameters auth;\n \n-  @Nullable private String image;\n-  private Set<String> tags = Collections.emptySet();\n+  private Property<String> image;\n+  private SetProperty<String> tags;\n   @Nullable private String credHelper;\n \n   @Inject\n   public TargetImageParameters(ObjectFactory objectFactory) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    image = objectFactory.property(String.class);\n+    tags = objectFactory.setProperty(String.class);\n   }\n \n   @Input\n-  @Nullable\n-  @Optional\n   public String getImage() {\n     if (System.getProperty(PropertyNames.TO_IMAGE) != null) {\n       return System.getProperty(PropertyNames.TO_IMAGE);\n     }\n-    return image;\n+    return image.getOrNull();\n   }\n \n   public void setImage(String image) {\n-    this.image = image;\n+    this.image.set(image);\n+  }\n+\n+  public void setImage(Provider<String> image) {\n+    if (image != null) {", "originalCommit": "6d7b6ea1f8cc674870e6e69b229918e60b6cc4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwODIxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485008215", "bodyText": "hm removing this check is resulting in an UnexpectedBuildFailure with the message, Cannot set the value of a property using a null provider in places where the target image value is not set. (For example, \n  \n    \n      jib/jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/skaffold/FilesTaskV2Test.java\n    \n    \n         Line 110\n      in\n      f892bdb\n    \n    \n    \n    \n\n        \n          \n           new SkaffoldFilesOutput(verifyTaskSuccess(multiTestProject, \"simple-service\"));", "author": "mpeddada1", "createdAt": "2020-09-08T15:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0NzY1MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485747650", "bodyText": "Aha, looks like Gradle prefers this method signature over String. If that's the case, I think it should be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (image != null) {\n          \n          \n            \n                if (image == null) {\n          \n          \n            \n                  this.image = null;\n          \n          \n            \n                } else {\n          \n          \n            \n                  this.image.set(image);\n          \n          \n            \n                }", "author": "chanseokoh", "createdAt": "2020-09-09T16:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NjI2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485896269", "bodyText": "Ah, exactly! You're right, when jib.to.image is set to null then Gradle prefers this method. With the if (image != null) checker, we are currently returning the message Missing target image parameter, perhaps you should add a 'jib.to.image' configuration parameter to your build.gradle... if jib.to.image is not specified, which seems like expected behavior. I could be missing something here but why do we want to make the Property be null instead of not just not setting a value for it?", "author": "mpeddada1", "createdAt": "2020-09-09T20:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxOTA0Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485919047", "bodyText": "Good question.\nFrom the general API perspective, irrelevant of Jib: let's say a Java developer is using some Java library which has Person.setEmail(String). It's an optional property, and by default getEmail() returns null. Let's say the developer does\n// prints out \"no email given\" by default\nSystem.out.println(person.getEmail() == null ? \"no email given\" : person.getEmail());\nperson.setEmail(\"foo@example.com\");\nperson.setEmail(null);\nSystem.out.println(person.getEmail() == null ? \"no email given\" : person.getEmail());\nThen, which would be reasonable for the last println() to print: no email given or foo@example.com? Of course, it may depend on the situation, but in this case, I expect setEmail(null) to clear the previous value and make the property \"missing\"; it is counter-intuitive it becomes a no-op.\nAlso note that jib.to.image is basically an optional property (as indicated by the @Optional annotation). Of course, it is required when pushing to a remote registry (jib:build), and it will say \"Missing target image parameter.\" However, it isn't required when pushing to a local Docker daemon (jib:dockerBuild); in this case, Jib will auto-pick some name for it.\nBut, before we add the null check, I'd like to verify Gradle always calls setImage(null) even when jib.to.image is simply missing (not configured) rather than when jib.to.image is explicitly set to null. Reading https://github.com/GoogleContainerTools/jib/pull/2739/files#r485907745, it looks like this is only when explicitly setting jib.to.image to null. In that case, I don't think we need the null check actually; I think we can just fix the failing test.", "author": "chanseokoh", "createdAt": "2020-09-09T21:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3MDA5Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r486470097", "bodyText": "Thank you so much for the detailed explanation!\nAnd with regards to the last point about https://github.com/GoogleContainerTools/jib/pull/2739/files#r485907745, the issue only occurs when jib.to.image is explicitly set to null. I believe the tests that were failing set jib.to.image to System.getProperty(\"_TARGET_IMAGE\") and didn't initialize _TARGET_IMAGE? Because System.getProperty(String key) returns null if there is no property with that key.", "author": "mpeddada1", "createdAt": "2020-09-10T16:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyMzMwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r486623304", "bodyText": "Yeah, that makes sense. I think we don't actually need a null check; we can just fix the test, e.g., setting _TARGET_IMAGE to \"ignored.\"", "author": "chanseokoh", "createdAt": "2020-09-10T20:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyNjQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyODI4OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r483228288", "bodyText": "Maybe it's safer to initialize it to an empty set like we do it here:\n\n  \n    \n      jib/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibExtension.java\n    \n    \n         Line 116\n      in\n      94f8bda\n    \n    \n    \n    \n\n        \n          \n           pluginExtensions = objectFactory.listProperty(ExtensionParameters.class).empty();", "author": "chanseokoh", "createdAt": "2020-09-03T20:14:12Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -34,42 +36,51 @@\n \n   private final AuthParameters auth;\n \n-  @Nullable private String image;\n-  private Set<String> tags = Collections.emptySet();\n+  private Property<String> image;\n+  private SetProperty<String> tags;\n   @Nullable private String credHelper;\n \n   @Inject\n   public TargetImageParameters(ObjectFactory objectFactory) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    image = objectFactory.property(String.class);\n+    tags = objectFactory.setProperty(String.class);", "originalCommit": "6d7b6ea1f8cc674870e6e69b229918e60b6cc4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae79d4653d0baadf1cf2edcf40198bec65c3dbae", "url": "https://github.com/GoogleContainerTools/jib/commit/ae79d4653d0baadf1cf2edcf40198bec65c3dbae", "message": "addressing comment suggestions", "committedDate": "2020-09-08T15:06:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0ODgyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485748825", "bodyText": "In light of https://github.com/GoogleContainerTools/jib/pull/2739/files#r485008215, I wonder if we need a null check. Can you run a manual test and see which of the two setTags() gets called?", "author": "chanseokoh", "createdAt": "2020-09-09T16:25:43Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -34,42 +36,52 @@\n \n   private final AuthParameters auth;\n \n-  @Nullable private String image;\n-  private Set<String> tags = Collections.emptySet();\n+  private Property<String> image;\n+  private SetProperty<String> tags;\n   @Nullable private String credHelper;\n \n   @Inject\n   public TargetImageParameters(ObjectFactory objectFactory) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    image = objectFactory.property(String.class);\n+    tags = objectFactory.setProperty(String.class).empty();\n   }\n \n   @Input\n   @Nullable\n-  @Optional\n   public String getImage() {\n     if (System.getProperty(PropertyNames.TO_IMAGE) != null) {\n       return System.getProperty(PropertyNames.TO_IMAGE);\n     }\n-    return image;\n+    return image.getOrNull();\n   }\n \n   public void setImage(String image) {\n-    this.image = image;\n+    this.image.set(image);\n+  }\n+\n+  public void setImage(Provider<String> image) {\n+    if (image != null) {\n+      this.image.set(image);\n+    }\n   }\n \n   @Input\n-  @Optional\n   public Set<String> getTags() {\n     if (System.getProperty(PropertyNames.TO_TAGS) != null) {\n       return ImmutableSet.copyOf(\n           ConfigurationPropertyValidator.parseListProperty(\n               System.getProperty(PropertyNames.TO_TAGS)));\n     }\n-    return tags;\n+    return tags.get();\n   }\n \n   public void setTags(Set<String> tags) {\n-    this.tags = tags;\n+    this.tags.set(tags);\n+  }\n+\n+  public void setTags(Provider<Set<String>> tags) {\n+    this.tags.set(tags);", "originalCommit": "ae79d4653d0baadf1cf2edcf40198bec65c3dbae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNzc0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485907745", "bodyText": "That is a good idea. So unlike the case with the image, setting jib.to.tags=null is resulting in GroovyRuntimeException with Ambiguous method overloading...Cannot resolve which method to invoke for [null] due to overlapping prototypes between where one setTags is not preferred over the other. The issue occurs when only setTags(Provider<Set<String>>) is present, which is when setting jib.to.tags=null results in the Cannot set the value of property using null provider message.", "author": "mpeddada1", "createdAt": "2020-09-09T20:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0ODgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwOTk5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485909995", "bodyText": "Passing in a set or provider<set> that contains null seems to resulting in NPE so I think we need to handle that?", "author": "mpeddada1", "createdAt": "2020-09-09T20:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0ODgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMTcyNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485921724", "bodyText": "Hmm... I think we should be fine as long as nothing breaks when jib.to.tags is missing (not configured). People shouldn't explicitly set it to null anyway. That said, I now wonder the test failure you mentioned in https://github.com/GoogleContainerTools/jib/pull/2739/files#r485008215 is when you explicitly set the property to null rather than when it's missing. If former, I don't think we need the null check there either.\n\nPassing in a set or provider that contains null seems to resulting in NPE so I think we need to handle that?\n\nLet's file an issue for that. It basically sounds like an orthogonal issue we don't want to mix in here.", "author": "chanseokoh", "createdAt": "2020-09-09T21:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0ODgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ2OTg0MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r486469841", "bodyText": "Right that's a good point. I filed an issue for it in #2760", "author": "mpeddada1", "createdAt": "2020-09-10T16:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0ODgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0OTYwMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485749601", "bodyText": "I think this should be preserved. The user doesn't have to configure this parameter.", "author": "chanseokoh", "createdAt": "2020-09-09T16:26:34Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -34,42 +36,52 @@\n \n   private final AuthParameters auth;\n \n-  @Nullable private String image;\n-  private Set<String> tags = Collections.emptySet();\n+  private Property<String> image;\n+  private SetProperty<String> tags;\n   @Nullable private String credHelper;\n \n   @Inject\n   public TargetImageParameters(ObjectFactory objectFactory) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    image = objectFactory.property(String.class);\n+    tags = objectFactory.setProperty(String.class).empty();\n   }\n \n   @Input\n   @Nullable\n-  @Optional\n   public String getImage() {\n     if (System.getProperty(PropertyNames.TO_IMAGE) != null) {\n       return System.getProperty(PropertyNames.TO_IMAGE);\n     }\n-    return image;\n+    return image.getOrNull();\n   }\n \n   public void setImage(String image) {\n-    this.image = image;\n+    this.image.set(image);\n+  }\n+\n+  public void setImage(Provider<String> image) {\n+    if (image != null) {\n+      this.image.set(image);\n+    }\n   }\n \n   @Input\n-  @Optional", "originalCommit": "ae79d4653d0baadf1cf2edcf40198bec65c3dbae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1MDkyMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r485750923", "bodyText": "I think this should be preserved. The user doesn't have to configure this parameter.", "author": "chanseokoh", "createdAt": "2020-09-09T16:28:06Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java", "diffHunk": "@@ -34,42 +36,52 @@\n \n   private final AuthParameters auth;\n \n-  @Nullable private String image;\n-  private Set<String> tags = Collections.emptySet();\n+  private Property<String> image;\n+  private SetProperty<String> tags;\n   @Nullable private String credHelper;\n \n   @Inject\n   public TargetImageParameters(ObjectFactory objectFactory) {\n     auth = objectFactory.newInstance(AuthParameters.class, \"to.auth\");\n+    image = objectFactory.property(String.class);\n+    tags = objectFactory.setProperty(String.class).empty();\n   }\n \n   @Input\n   @Nullable\n-  @Optional", "originalCommit": "ae79d4653d0baadf1cf2edcf40198bec65c3dbae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fdfad6dcdeb9d7308baea96bd78179a0e2bb4096", "url": "https://github.com/GoogleContainerTools/jib/commit/fdfad6dcdeb9d7308baea96bd78179a0e2bb4096", "message": "removing null checker", "committedDate": "2020-09-10T16:20:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNDM2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r486624369", "bodyText": "How about -D_TARGET_IMAGE=ignored?", "author": "chanseokoh", "createdAt": "2020-09-10T20:48:14Z", "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/skaffold/FilesTaskV2Test.java", "diffHunk": "@@ -58,7 +58,7 @@\n   private static String verifyTaskSuccess(TestProject project, @Nullable String moduleName) {\n     String taskName =\n         \":\" + (moduleName == null ? \"\" : moduleName + \":\") + JibPlugin.SKAFFOLD_FILES_TASK_V2_NAME;\n-    BuildResult buildResult = project.build(taskName, \"-q\");\n+    BuildResult buildResult = project.build(taskName, \"-q\", \"-D_TARGET_IMAGE\");", "originalCommit": "fdfad6dcdeb9d7308baea96bd78179a0e2bb4096", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzMDYxNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488230617", "bodyText": "Yup, this is much better.", "author": "mpeddada1", "createdAt": "2020-09-14T21:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNDM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNDQ0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r486624448", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-09-10T20:48:19Z", "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/skaffold/SyncMapTaskTest.java", "diffHunk": "@@ -61,6 +61,7 @@ private static SkaffoldSyncMapTemplate generateTemplate(\n     List<String> buildParams = new ArrayList<>();\n     buildParams.add(taskName);\n     buildParams.add(\"-q\");\n+    buildParams.add(\"-D_TARGET_IMAGE\");", "originalCommit": "fdfad6dcdeb9d7308baea96bd78179a0e2bb4096", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6837d622819438f0c61dac3ac34e7475b3610e2c", "url": "https://github.com/GoogleContainerTools/jib/commit/6837d622819438f0c61dac3ac34e7475b3610e2c", "message": "adding tests and sample project", "committedDate": "2020-09-11T22:12:03Z", "type": "commit"}, {"oid": "27c3431d3d2194d8648dcab592f3ed6046922351", "url": "https://github.com/GoogleContainerTools/jib/commit/27c3431d3d2194d8648dcab592f3ed6046922351", "message": "adding tests and fixing file naming", "committedDate": "2020-09-14T02:12:17Z", "type": "commit"}, {"oid": "c8ccb15bef437cafba20f75f05805d2ef91e64b1", "url": "https://github.com/GoogleContainerTools/jib/commit/c8ccb15bef437cafba20f75f05805d2ef91e64b1", "message": "more fixes", "committedDate": "2020-09-14T02:15:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwODgwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488108800", "bodyText": "If you're not using the contents of this file to do anything special, just a simple System.out.println(\"Hello world\") is probably sufficient.", "author": "loosebazooka", "createdAt": "2020-09-14T17:38:00Z", "path": "jib-gradle-plugin/src/test/resources/gradle/projects/lazy-evaluation/src/main/java/com/test/HelloWorld.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.test;\n+\n+import com.google.common.io.CharStreams;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+\n+public class HelloWorld {\n+\n+  public static void main(String[] args) throws URISyntaxException, IOException {\n+    try (Reader reader =", "originalCommit": "c8ccb15bef437cafba20f75f05805d2ef91e64b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDIxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488110219", "bodyText": "I think this technically works, but is confusing. Maybe JibPlugin.BUILD_IMAGE_TASK_NAME is more appropriate?", "author": "loosebazooka", "createdAt": "2020-09-14T17:40:41Z", "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java", "diffHunk": "@@ -370,6 +373,39 @@ public void testJibTaskGroupIsSet() {\n         taskName -> Assert.assertEquals(taskName, \"Jib\", tasks.getByPath(taskName).getGroup()));\n   }\n \n+  @Test\n+  public void testLazyEvalForImageAndTags() {\n+    try {\n+      testProject.build(JibPlugin.JIB_EXTENSION_NAME);", "originalCommit": "c8ccb15bef437cafba20f75f05805d2ef91e64b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNzc4OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488227789", "bodyText": "Ah that makes more sense", "author": "mpeddada1", "createdAt": "2020-09-14T21:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDkxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488110919", "bodyText": "I don't know if this is true, but if you use -Djib.console=plain, it might be easier to read the output, and you can ignore the cyan coloring and stuff?\nAlso since we already know the image name and tags, could we just use those in the comparison directly instead of extracting them out and then using the Assert at line 404, 405?", "author": "loosebazooka", "createdAt": "2020-09-14T17:41:56Z", "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java", "diffHunk": "@@ -370,6 +373,39 @@ public void testJibTaskGroupIsSet() {\n         taskName -> Assert.assertEquals(taskName, \"Jib\", tasks.getByPath(taskName).getGroup()));\n   }\n \n+  @Test\n+  public void testLazyEvalForImageAndTags() {\n+    try {\n+      testProject.build(JibPlugin.JIB_EXTENSION_NAME);\n+      Assert.fail(\"Expect this to fail\");\n+    } catch (UnexpectedBuildFailure ex) {\n+      String output = ex.getBuildResult().getOutput().trim();\n+\n+      // Regex to parse through image and tag values from build output.\n+      String cyanWordRegex = \"\\\\u001B\\\\[36m(.+?)\\\\u001B\\\\[0m\";", "originalCommit": "c8ccb15bef437cafba20f75f05805d2ef91e64b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzMDAyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488230021", "bodyText": "Thanks for the suggestion! Unfortunately, jib.console=plain doesn't display the progress bar but still keeps the cyan coloring:(\n\nAlso since we already know the image name and tags, could we just use those in the comparison directly instead of extracting them out and then using the Assert at line 404, 405?\nGood point, I just applied the change.", "author": "mpeddada1", "createdAt": "2020-09-14T21:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0OTg0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488349840", "bodyText": "How about passing --console=plain to Gradle? (Note it is not -D... this time.)", "author": "chanseokoh", "createdAt": "2020-09-15T02:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyNTEyOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488725128", "bodyText": "Hm the cyan coloring still appears when --console=plain is passed to Gradle and when Djib.console=plain is used.", "author": "mpeddada1", "createdAt": "2020-09-15T14:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0OTg0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r489449843", "bodyText": "Ugh, you're right. I see there are a couple things that are always colored.\nContainerizing application to Docker daemon as francium25/test...\n\nBuilt image to Docker daemon as francium25/test\n\nI think we should fix this. Could you file a bug (and also link this issue to get rid of the interim code to handle color)?", "author": "chanseokoh", "createdAt": "2020-09-16T13:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2NTgyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r489565821", "bodyText": "Yup, that's a good idea. I added a TODO with reference to issue #2764.", "author": "mpeddada1", "createdAt": "2020-09-16T16:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDkxOQ=="}], "type": "inlineReview"}, {"oid": "301fc9dd3d35687bfb3fb5ac7e4157a0ef59a97a", "url": "https://github.com/GoogleContainerTools/jib/commit/301fc9dd3d35687bfb3fb5ac7e4157a0ef59a97a", "message": "addressing comments", "committedDate": "2020-09-14T21:21:12Z", "type": "commit"}, {"oid": "c04f1cb590eb6ed77ac57eb628be5f77ca4bd2c8", "url": "https://github.com/GoogleContainerTools/jib/commit/c04f1cb590eb6ed77ac57eb628be5f77ca4bd2c8", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into git-prop", "committedDate": "2020-09-14T22:03:00Z", "type": "commit"}, {"oid": "1731a70a933ae907320b18f1bab571fe488125f0", "url": "https://github.com/GoogleContainerTools/jib/commit/1731a70a933ae907320b18f1bab571fe488125f0", "message": "Modifying CHANGELOG", "committedDate": "2020-09-14T22:04:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDMzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488794331", "bodyText": "Does it makes sense to remove this whole regex and just do\ncleanOutput = output.replace(\"color-stuff\",\"\")\nAssert.assertThat(cleanOutput, Matchers.contains(\"Containerizing application....\")", "author": "loosebazooka", "createdAt": "2020-09-15T16:16:49Z", "path": "jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java", "diffHunk": "@@ -370,6 +373,37 @@ public void testJibTaskGroupIsSet() {\n         taskName -> Assert.assertEquals(taskName, \"Jib\", tasks.getByPath(taskName).getGroup()));\n   }\n \n+  @Test\n+  public void testLazyEvalForImageAndTags() {\n+    try {\n+      testProject.build(JibPlugin.BUILD_IMAGE_TASK_NAME);\n+      Assert.fail(\"Expect this to fail\");\n+    } catch (UnexpectedBuildFailure ex) {\n+      String output = ex.getBuildResult().getOutput().trim();", "originalCommit": "1731a70a933ae907320b18f1bab571fe488125f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0ODAyNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r488948024", "bodyText": "Nice. Although, assertThat seems to have been deprecated so I used assertTrue(matcher.find()) instead?", "author": "mpeddada1", "createdAt": "2020-09-15T20:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAwMDk0Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2739#discussion_r489000947", "bodyText": "Oh yeah, you can use MatcherAssert like in: \n  \n    \n      jib/jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/InitMojoTest.java\n    \n    \n         Line 66\n      in\n      cc930f2\n    \n    \n    \n    \n\n        \n          \n           MatcherAssert.assertThat(output, CoreMatchers.startsWith(\"BEGIN JIB JSON\"));", "author": "loosebazooka", "createdAt": "2020-09-15T21:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDMzMQ=="}], "type": "inlineReview"}, {"oid": "226ee629ef6e3f01a85e39ad246b6eabede1d9ae", "url": "https://github.com/GoogleContainerTools/jib/commit/226ee629ef6e3f01a85e39ad246b6eabede1d9ae", "message": "test clean output", "committedDate": "2020-09-15T20:13:12Z", "type": "commit"}, {"oid": "a238e6615f9ac73ac9190854beb8c9bff57ee797", "url": "https://github.com/GoogleContainerTools/jib/commit/a238e6615f9ac73ac9190854beb8c9bff57ee797", "message": "remove extra space", "committedDate": "2020-09-15T20:17:40Z", "type": "commit"}, {"oid": "87ba48eb03ff0c29da140e9fa0b5010fb3508e10", "url": "https://github.com/GoogleContainerTools/jib/commit/87ba48eb03ff0c29da140e9fa0b5010fb3508e10", "message": "Use MatcherAssert instead of regexes", "committedDate": "2020-09-16T14:20:23Z", "type": "commit"}, {"oid": "4378bd3739fba92296cc22160059ba813f235455", "url": "https://github.com/GoogleContainerTools/jib/commit/4378bd3739fba92296cc22160059ba813f235455", "message": "Added TODO to remove cyan color filtering once #2764 is submitted.", "committedDate": "2020-09-16T16:22:00Z", "type": "commit"}]}