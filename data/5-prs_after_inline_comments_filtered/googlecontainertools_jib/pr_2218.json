{"pr_number": 2218, "pr_title": "Change base image cache location on mac/windows, add methods for getting XDG config location", "pr_createdAt": "2020-01-07T19:59:42Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2218", "timeline": [{"oid": "76fb821a1ce25043cc0276edbdea5bc94a352cb0", "url": "https://github.com/GoogleContainerTools/jib/commit/76fb821a1ce25043cc0276edbdea5bc94a352cb0", "message": "Add method for retrieving XDG config directory", "committedDate": "2020-01-03T20:59:53Z", "type": "commit"}, {"oid": "6f93837068fcf97f28ea2cdea348624d313ef7f4", "url": "https://github.com/GoogleContainerTools/jib/commit/6f93837068fcf97f28ea2cdea348624d313ef7f4", "message": "Update comment", "committedDate": "2020-01-06T22:46:01Z", "type": "commit"}, {"oid": "575b74a7bd8f88a1233eb6591fd0cc0ca31bbae4", "url": "https://github.com/GoogleContainerTools/jib/commit/575b74a7bd8f88a1233eb6591fd0cc0ca31bbae4", "message": "Return full path", "committedDate": "2020-01-07T18:17:23Z", "type": "commit"}, {"oid": "fefc308ad9d9c4a7608cc5044c731e6eb49cac6e", "url": "https://github.com/GoogleContainerTools/jib/commit/fefc308ad9d9c4a7608cc5044c731e6eb49cac6e", "message": "Fix comment", "committedDate": "2020-01-07T18:19:51Z", "type": "commit"}, {"oid": "8c75b78fe4f0ad25eb7507ecf31d2f9bfc1ad6dd", "url": "https://github.com/GoogleContainerTools/jib/commit/8c75b78fe4f0ad25eb7507ecf31d2f9bfc1ad6dd", "message": "Reduce diff", "committedDate": "2020-01-07T18:22:48Z", "type": "commit"}, {"oid": "0aed062c9771bd527f8f55476fbee03f68d4218b", "url": "https://github.com/GoogleContainerTools/jib/commit/0aed062c9771bd527f8f55476fbee03f68d4218b", "message": "Nevermind", "committedDate": "2020-01-07T18:23:54Z", "type": "commit"}, {"oid": "ef8ad1e852f9a92e4a69dca25d189895f7ab3a83", "url": "https://github.com/GoogleContainerTools/jib/commit/ef8ad1e852f9a92e4a69dca25d189895f7ab3a83", "message": "Change base image cache directory", "committedDate": "2020-01-07T19:57:08Z", "type": "commit"}, {"oid": "7257f98911d5d41ff1b059c2e50f9d431e7b30fc", "url": "https://github.com/GoogleContainerTools/jib/commit/7257f98911d5d41ff1b059c2e50f9d431e7b30fc", "message": "Share code", "committedDate": "2020-01-07T21:35:50Z", "type": "commit"}, {"oid": "594bf738f518969d49c5e288efe9a60f974bde12", "url": "https://github.com/GoogleContainerTools/jib/commit/594bf738f518969d49c5e288efe9a60f974bde12", "message": "Fix test", "committedDate": "2020-01-07T21:43:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQzNjk2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364436967", "bodyText": "This is misleading, since it is, e.g., $XDG_CACHE_HOME/.cache/google-cloud-tools-java/lib/ on Linux.", "author": "chanseokoh", "createdAt": "2020-01-08T20:50:38Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQzNzI0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364437248", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-01-08T20:51:21Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0MDU0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364440545", "bodyText": "I'd rather have\nPath linuxSubdirectory = Paths.get(\".config\").resolve(JIB_SUBDIRECTORY_LINUX);\nPath windowsSubdirectory = JIB_SUBDIRECTORY_OTHER.resolve(\"Config\");\nPath macSubdirectory = Paths.get(\"Library\", \"Preferences\").resolve(JIB_SUBDIRECTORY_OTHER);\ngetOsSpecificDirectory(..., linuxSubdirectory, windowsSubdirectory, macSubdirectory);", "author": "chanseokoh", "createdAt": "2020-01-08T20:59:40Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NDA2Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364844063", "bodyText": "I agree this looks cleaner, but it might end up being a pain since the function operates on portions of the os-specific subdirectories, not the whole thing (e.g. mac needs to check if ~/Library/Preferences exists ignoring the JIB_SUBDIRECTORY_OTHER portion, if $XDG_X_HOME isn't configured then each OS defaults to `$HOME/.config/[OS-specific subdirectory], etc.)", "author": "TadCordle", "createdAt": "2020-01-09T16:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0MDU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0MDkwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364440908", "bodyText": "xdgConfigHome --> xdgHome", "author": "chanseokoh", "createdAt": "2020-01-08T21:00:42Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");\n+  }\n+\n+  /**\n+   * Helper method for resolving directories on different operating systems.\n+   *\n+   * @param xdgEnvVariable the name of the environment variable used to resolve the XDG base\n+   *     directory\n+   * @param linuxFolder \".config\" or \".cache\"\n+   * @param windowsFolder \"Config\" or \"Cache\"\n+   * @param macFolder \"Preferences\" or \"Caches\"\n+   * @return the full path constructed from the given parameters\n+   */\n+  private static Path getOsSpecificDirectory(\n+      Properties properties,\n+      Map<String, String> environment,\n+      String xdgEnvVariable,\n+      String linuxFolder,\n+      String windowsFolder,\n+      String macFolder) {\n+\n+    Path windowsSubDirectory = JIB_SUBDIRECTORY_OTHER.resolve(windowsFolder);\n+    String rawOsName = properties.getProperty(\"os.name\");\n+    String osName = rawOsName.toLowerCase(Locale.ENGLISH);\n+    String xdgConfigHome = environment.get(xdgEnvVariable);", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0MjQ1NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364442454", "bodyText": "\"Use XDG environment variable if set and not empty.\"", "author": "chanseokoh", "createdAt": "2020-01-08T21:04:55Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");\n+  }\n+\n+  /**\n+   * Helper method for resolving directories on different operating systems.\n+   *\n+   * @param xdgEnvVariable the name of the environment variable used to resolve the XDG base\n+   *     directory\n+   * @param linuxFolder \".config\" or \".cache\"\n+   * @param windowsFolder \"Config\" or \"Cache\"\n+   * @param macFolder \"Preferences\" or \"Caches\"\n+   * @return the full path constructed from the given parameters\n+   */\n+  private static Path getOsSpecificDirectory(\n+      Properties properties,\n+      Map<String, String> environment,\n+      String xdgEnvVariable,\n+      String linuxFolder,\n+      String windowsFolder,\n+      String macFolder) {\n+\n+    Path windowsSubDirectory = JIB_SUBDIRECTORY_OTHER.resolve(windowsFolder);\n+    String rawOsName = properties.getProperty(\"os.name\");\n+    String osName = rawOsName.toLowerCase(Locale.ENGLISH);\n+    String xdgConfigHome = environment.get(xdgEnvVariable);\n+    String userHome = properties.getProperty(\"user.home\");\n+    Path xdgPath = Paths.get(userHome, linuxFolder);\n+\n+    if (osName.contains(\"linux\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0MjczOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364442738", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-01-08T21:05:41Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");\n+  }\n+\n+  /**\n+   * Helper method for resolving directories on different operating systems.\n+   *\n+   * @param xdgEnvVariable the name of the environment variable used to resolve the XDG base\n+   *     directory\n+   * @param linuxFolder \".config\" or \".cache\"\n+   * @param windowsFolder \"Config\" or \"Cache\"\n+   * @param macFolder \"Preferences\" or \"Caches\"\n+   * @return the full path constructed from the given parameters\n+   */\n+  private static Path getOsSpecificDirectory(\n+      Properties properties,\n+      Map<String, String> environment,\n+      String xdgEnvVariable,\n+      String linuxFolder,\n+      String windowsFolder,\n+      String macFolder) {\n+\n+    Path windowsSubDirectory = JIB_SUBDIRECTORY_OTHER.resolve(windowsFolder);\n+    String rawOsName = properties.getProperty(\"os.name\");\n+    String osName = rawOsName.toLowerCase(Locale.ENGLISH);\n+    String xdgConfigHome = environment.get(xdgEnvVariable);\n+    String userHome = properties.getProperty(\"user.home\");\n+    Path xdgPath = Paths.get(userHome, linuxFolder);\n+\n+    if (osName.contains(\"linux\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(JIB_SUBDIRECTORY_LINUX);\n+      }\n+      return xdgPath.resolve(JIB_SUBDIRECTORY_LINUX);\n+\n+    } else if (osName.contains(\"windows\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(windowsSubDirectory);\n+      }\n+\n+      // Use %LOCALAPPDATA% for Windows.\n+      String localAppDataEnv = environment.get(\"LOCALAPPDATA\");\n+      if (localAppDataEnv == null || localAppDataEnv.trim().isEmpty()) {\n+        LOGGER.warning(\"LOCALAPPDATA environment is invalid or missing\");\n+        return xdgPath.resolve(windowsSubDirectory);\n+      }\n+      Path localAppData = Paths.get(localAppDataEnv);\n+      if (!Files.exists(localAppData)) {\n+        LOGGER.warning(localAppData + \" does not exist\");\n+        return xdgPath.resolve(windowsSubDirectory);\n+      }\n+      return localAppData.resolve(windowsSubDirectory);\n+\n+    } else if (osName.contains(\"mac\") || osName.contains(\"darwin\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0Mjg3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364442875", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-01-08T21:05:59Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");\n+  }\n+\n+  /**\n+   * Helper method for resolving directories on different operating systems.\n+   *\n+   * @param xdgEnvVariable the name of the environment variable used to resolve the XDG base\n+   *     directory\n+   * @param linuxFolder \".config\" or \".cache\"\n+   * @param windowsFolder \"Config\" or \"Cache\"\n+   * @param macFolder \"Preferences\" or \"Caches\"\n+   * @return the full path constructed from the given parameters\n+   */\n+  private static Path getOsSpecificDirectory(\n+      Properties properties,\n+      Map<String, String> environment,\n+      String xdgEnvVariable,\n+      String linuxFolder,\n+      String windowsFolder,\n+      String macFolder) {\n+\n+    Path windowsSubDirectory = JIB_SUBDIRECTORY_OTHER.resolve(windowsFolder);\n+    String rawOsName = properties.getProperty(\"os.name\");\n+    String osName = rawOsName.toLowerCase(Locale.ENGLISH);\n+    String xdgConfigHome = environment.get(xdgEnvVariable);\n+    String userHome = properties.getProperty(\"user.home\");\n+    Path xdgPath = Paths.get(userHome, linuxFolder);\n+\n+    if (osName.contains(\"linux\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(JIB_SUBDIRECTORY_LINUX);\n+      }\n+      return xdgPath.resolve(JIB_SUBDIRECTORY_LINUX);\n+\n+    } else if (osName.contains(\"windows\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0Mzk0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364443940", "bodyText": "The name applicationSupport is no longer used, right?", "author": "chanseokoh", "createdAt": "2020-01-08T21:08:51Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");\n+  }\n+\n+  /**\n+   * Helper method for resolving directories on different operating systems.\n+   *\n+   * @param xdgEnvVariable the name of the environment variable used to resolve the XDG base\n+   *     directory\n+   * @param linuxFolder \".config\" or \".cache\"\n+   * @param windowsFolder \"Config\" or \"Cache\"\n+   * @param macFolder \"Preferences\" or \"Caches\"\n+   * @return the full path constructed from the given parameters\n+   */\n+  private static Path getOsSpecificDirectory(\n+      Properties properties,\n+      Map<String, String> environment,\n+      String xdgEnvVariable,\n+      String linuxFolder,\n+      String windowsFolder,\n+      String macFolder) {\n+\n+    Path windowsSubDirectory = JIB_SUBDIRECTORY_OTHER.resolve(windowsFolder);\n+    String rawOsName = properties.getProperty(\"os.name\");\n+    String osName = rawOsName.toLowerCase(Locale.ENGLISH);\n+    String xdgConfigHome = environment.get(xdgEnvVariable);\n+    String userHome = properties.getProperty(\"user.home\");\n+    Path xdgPath = Paths.get(userHome, linuxFolder);\n+\n+    if (osName.contains(\"linux\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(JIB_SUBDIRECTORY_LINUX);\n+      }\n+      return xdgPath.resolve(JIB_SUBDIRECTORY_LINUX);\n+\n+    } else if (osName.contains(\"windows\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(windowsSubDirectory);\n+      }\n+\n+      // Use %LOCALAPPDATA% for Windows.\n+      String localAppDataEnv = environment.get(\"LOCALAPPDATA\");\n+      if (localAppDataEnv == null || localAppDataEnv.trim().isEmpty()) {\n+        LOGGER.warning(\"LOCALAPPDATA environment is invalid or missing\");\n+        return xdgPath.resolve(windowsSubDirectory);\n+      }\n+      Path localAppData = Paths.get(localAppDataEnv);\n+      if (!Files.exists(localAppData)) {\n+        LOGGER.warning(localAppData + \" does not exist\");\n+        return xdgPath.resolve(windowsSubDirectory);\n+      }\n+      return localAppData.resolve(windowsSubDirectory);\n+\n+    } else if (osName.contains(\"mac\") || osName.contains(\"darwin\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(JIB_SUBDIRECTORY_OTHER);\n+      }\n+\n+      // Use '~/Library/Preferences/' for macOS.\n+      Path applicationSupport = Paths.get(userHome, \"Library\", macFolder);", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NDAzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2218#discussion_r364444038", "bodyText": "\"Preferences\" is only for the config directory.", "author": "chanseokoh", "createdAt": "2020-01-08T21:09:09Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.filesystem;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Obtains OS-specific directories based on the XDG Base Directory Specification.\n+ *\n+ * <p>Specifically, from the specification:\n+ *\n+ * <ul>\n+ *   <li>These directories are defined by the environment variables {@code $XDG_CACHE_HOME} and\n+ *       {@code $XDG_CONFIG_HOME}.\n+ *   <li>If {@code $XDG_CACHE_HOME} / {@code $XDG_CONFIG_HOME} is either not set or empty, a\n+ *       platform-specific equivalent of {@code $HOME/.cache} / {@code $HOME/.config} should be\n+ *       used.\n+ * </ul>\n+ *\n+ * @see <a\n+ *     href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>\n+ */\n+public class XdgDirectories {\n+\n+  private static final Logger LOGGER = Logger.getLogger(XdgDirectories.class.getName());\n+  private static final Path JIB_SUBDIRECTORY_LINUX =\n+      Paths.get(\"google-cloud-tools-java\").resolve(\"jib\");\n+  private static final Path JIB_SUBDIRECTORY_OTHER = Paths.get(\"Google\").resolve(\"Jib\");\n+\n+  public static Path getCacheHome() {\n+    return getCacheHome(System.getProperties(), System.getenv());\n+  }\n+\n+  public static Path getConfigHome() {\n+    return getConfigHome(System.getProperties(), System.getenv());\n+  }\n+\n+  /**\n+   * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home\n+   * based.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.cache/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Cache\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Caches/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getCacheHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CACHE_HOME\", \".cache\", \"Cache\", \"Caches\");\n+  }\n+\n+  /**\n+   * Returns config directory based on {@code $XDG_CONFIG_HOME}, if available, or resolves the\n+   * OS-specific user config directory.\n+   *\n+   * <p>For Linux, this is {@code $HOME/.config/google-cloud-tools-java/jib/}.\n+   *\n+   * <p>For Windows, this is {@code %LOCALAPPDATA%\\Google\\Jib\\Config\\}.\n+   *\n+   * <p>For macOS, this is {@code $HOME/Library/Preferences/Google/Jib/}.\n+   */\n+  @VisibleForTesting\n+  static Path getConfigHome(Properties properties, Map<String, String> environment) {\n+    return getOsSpecificDirectory(\n+        properties, environment, \"XDG_CONFIG_HOME\", \".config\", \"Config\", \"Preferences\");\n+  }\n+\n+  /**\n+   * Helper method for resolving directories on different operating systems.\n+   *\n+   * @param xdgEnvVariable the name of the environment variable used to resolve the XDG base\n+   *     directory\n+   * @param linuxFolder \".config\" or \".cache\"\n+   * @param windowsFolder \"Config\" or \"Cache\"\n+   * @param macFolder \"Preferences\" or \"Caches\"\n+   * @return the full path constructed from the given parameters\n+   */\n+  private static Path getOsSpecificDirectory(\n+      Properties properties,\n+      Map<String, String> environment,\n+      String xdgEnvVariable,\n+      String linuxFolder,\n+      String windowsFolder,\n+      String macFolder) {\n+\n+    Path windowsSubDirectory = JIB_SUBDIRECTORY_OTHER.resolve(windowsFolder);\n+    String rawOsName = properties.getProperty(\"os.name\");\n+    String osName = rawOsName.toLowerCase(Locale.ENGLISH);\n+    String xdgConfigHome = environment.get(xdgEnvVariable);\n+    String userHome = properties.getProperty(\"user.home\");\n+    Path xdgPath = Paths.get(userHome, linuxFolder);\n+\n+    if (osName.contains(\"linux\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(JIB_SUBDIRECTORY_LINUX);\n+      }\n+      return xdgPath.resolve(JIB_SUBDIRECTORY_LINUX);\n+\n+    } else if (osName.contains(\"windows\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(windowsSubDirectory);\n+      }\n+\n+      // Use %LOCALAPPDATA% for Windows.\n+      String localAppDataEnv = environment.get(\"LOCALAPPDATA\");\n+      if (localAppDataEnv == null || localAppDataEnv.trim().isEmpty()) {\n+        LOGGER.warning(\"LOCALAPPDATA environment is invalid or missing\");\n+        return xdgPath.resolve(windowsSubDirectory);\n+      }\n+      Path localAppData = Paths.get(localAppDataEnv);\n+      if (!Files.exists(localAppData)) {\n+        LOGGER.warning(localAppData + \" does not exist\");\n+        return xdgPath.resolve(windowsSubDirectory);\n+      }\n+      return localAppData.resolve(windowsSubDirectory);\n+\n+    } else if (osName.contains(\"mac\") || osName.contains(\"darwin\")) {\n+      // Use environment variable $XDG_CONFIG_HOME if set and not empty.\n+      if (xdgConfigHome != null && !xdgConfigHome.trim().isEmpty()) {\n+        return Paths.get(xdgConfigHome).resolve(JIB_SUBDIRECTORY_OTHER);\n+      }\n+\n+      // Use '~/Library/Preferences/' for macOS.", "originalCommit": "594bf738f518969d49c5e288efe9a60f974bde12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4fd8727a326712cf5923fde7190c6dba7d97fe56", "url": "https://github.com/GoogleContainerTools/jib/commit/4fd8727a326712cf5923fde7190c6dba7d97fe56", "message": "Feedback", "committedDate": "2020-01-09T16:48:02Z", "type": "commit"}]}