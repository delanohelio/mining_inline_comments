{"pr_number": 2734, "pr_title": "Enable multi-platform image building and add integration test", "pr_createdAt": "2020-08-28T20:07:02Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2734", "timeline": [{"oid": "53c58cd843beebd130f9b38011ffb8014fdb4d25", "url": "https://github.com/GoogleContainerTools/jib/commit/53c58cd843beebd130f9b38011ffb8014fdb4d25", "message": "Intergration Test", "committedDate": "2020-08-27T22:41:57Z", "type": "commit"}, {"oid": "c46230b3660c77ada44e1ff879fa96356ee25879", "url": "https://github.com/GoogleContainerTools/jib/commit/c46230b3660c77ada44e1ff879fa96356ee25879", "message": "Rename file", "committedDate": "2020-08-27T23:58:14Z", "type": "commit"}, {"oid": "1ff543019d19efd79e8014d8a69df5d8b467ce06", "url": "https://github.com/GoogleContainerTools/jib/commit/1ff543019d19efd79e8014d8a69df5d8b467ce06", "message": "Intergration test", "committedDate": "2020-08-28T20:04:06Z", "type": "commit"}, {"oid": "0a1b9b85a6d83e55532922086ec8d68b73e45936", "url": "https://github.com/GoogleContainerTools/jib/commit/0a1b9b85a6d83e55532922086ec8d68b73e45936", "message": "Fix multi-platform image building test", "committedDate": "2020-08-31T21:09:42Z", "type": "commit"}, {"oid": "dfa98322683123d3e838624fb97e7d30a08e0c6b", "url": "https://github.com/GoogleContainerTools/jib/commit/dfa98322683123d3e838624fb97e7d30a08e0c6b", "message": "Merge remote-tracking branch 'origin/master' into multiplatformsIntergration", "committedDate": "2020-08-31T21:10:03Z", "type": "commit"}, {"oid": "8f70da961e1976403dfedabc9130c92434bd1b6e", "url": "https://github.com/GoogleContainerTools/jib/commit/8f70da961e1976403dfedabc9130c92434bd1b6e", "message": "Test additional tags", "committedDate": "2020-08-31T21:56:50Z", "type": "commit"}, {"oid": "5ea4a2083524df446168bac85c8e93ee8a78064c", "url": "https://github.com/GoogleContainerTools/jib/commit/5ea4a2083524df446168bac85c8e93ee8a78064c", "message": "Remove whitespace", "committedDate": "2020-08-31T22:03:19Z", "type": "commit"}, {"oid": "3ed5ef926cbce544c609b93617406e8d3877a7f3", "url": "https://github.com/GoogleContainerTools/jib/commit/3ed5ef926cbce544c609b93617406e8d3877a7f3", "message": "Lift feature lock", "committedDate": "2020-08-31T22:47:32Z", "type": "commit"}, {"oid": "64a4e5e548c700a144dcb52161fc7abf2aa42f0f", "url": "https://github.com/GoogleContainerTools/jib/commit/64a4e5e548c700a144dcb52161fc7abf2aa42f0f", "message": "Merge branch 'master' into multiplatformsIntergration", "committedDate": "2020-10-01T21:26:09Z", "type": "commit"}, {"oid": "56dd2ed6e27b58cfd9e94fffc8832543fad87687", "url": "https://github.com/GoogleContainerTools/jib/commit/56dd2ed6e27b58cfd9e94fffc8832543fad87687", "message": "Fix test", "committedDate": "2020-10-02T18:33:36Z", "type": "commit"}, {"oid": "89b6e1eb6d2c1cda552e490a68ee3993a724db18", "url": "https://github.com/GoogleContainerTools/jib/commit/89b6e1eb6d2c1cda552e490a68ee3993a724db18", "message": "Nullable", "committedDate": "2020-10-02T18:41:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxNjEwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499016100", "bodyText": "maybe we can store this in a variable?", "author": "mpeddada1", "createdAt": "2020-10-02T19:40:33Z", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");", "originalCommit": "89b6e1eb6d2c1cda552e490a68ee3993a724db18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5Mzc0Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499693746", "bodyText": "Not always, but we usually don't create a variable for constants in tests.", "author": "chanseokoh", "createdAt": "2020-10-05T15:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxNjEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODAxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499018015", "bodyText": "Can we move line 755 to be below line 749? To make the assert blocks be separate from the initialization code.", "author": "mpeddada1", "createdAt": "2020-10-02T19:45:14Z", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();", "originalCommit": "89b6e1eb6d2c1cda552e490a68ee3993a724db18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODU0OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499018549", "bodyText": "maybe have a variable for this as well.", "author": "mpeddada1", "createdAt": "2020-10-02T19:46:27Z", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;\n+    Assert.assertEquals(\n+        \"sha256:cecb4d0f179207a1c7f2ee33819d4fb70bbb9d98eebe78dfe1b439896925dc27\",\n+        manifest1.getContainerConfiguration().getDigest().toString());\n+\n+    // amd64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest2 =\n+        registryClient.pullManifest(\n+            \"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\");", "originalCommit": "89b6e1eb6d2c1cda552e490a68ee3993a724db18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxODk4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499018986", "bodyText": "same here, we could move this to be below line 765?", "author": "mpeddada1", "createdAt": "2020-10-02T19:47:29Z", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;\n+    Assert.assertEquals(\n+        \"sha256:cecb4d0f179207a1c7f2ee33819d4fb70bbb9d98eebe78dfe1b439896925dc27\",\n+        manifest1.getContainerConfiguration().getDigest().toString());\n+\n+    // amd64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest2 =\n+        registryClient.pullManifest(\n+            \"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\");\n+    Assert.assertEquals(\n+        \"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\",\n+        manifestAndDigest2.getDigest().toString());\n+    ManifestTemplate manifestTemplate2 = manifestAndDigest2.getManifest();", "originalCommit": "89b6e1eb6d2c1cda552e490a68ee3993a724db18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8178e63ebe6f20a6c1d53898592186614482a638", "url": "https://github.com/GoogleContainerTools/jib/commit/8178e63ebe6f20a6c1d53898592186614482a638", "message": "Reorder liness", "committedDate": "2020-10-05T15:41:11Z", "type": "commit"}, {"oid": "91aa9038cb195dca6138f305bca14d611e403f81", "url": "https://github.com/GoogleContainerTools/jib/commit/91aa9038cb195dca6138f305bca14d611e403f81", "message": "Update CHANGELOG entries", "committedDate": "2020-10-05T15:54:12Z", "type": "commit"}, {"oid": "ef63089e17592026a74d37eaeb5f956b3161829c", "url": "https://github.com/GoogleContainerTools/jib/commit/ef63089e17592026a74d37eaeb5f956b3161829c", "message": "Merge remote-tracking branch 'origin/master' into multiplatformsIntergration", "committedDate": "2020-10-05T15:54:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMTM1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499721351", "bodyText": "Sorry, can we move this up to line 753. Similar to what we do in line 737-> line 740. Same below.", "author": "mpeddada1", "createdAt": "2020-10-05T16:22:42Z", "path": "jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java", "diffHunk": "@@ -686,6 +695,85 @@ public void testExecute_springBootPackaged()\n     HttpGetVerifier.verifyBody(\"Hello world\", new URL(\"http://localhost:8080\"));\n   }\n \n+  @Test\n+  public void testExecute_multiPlatformBuild()\n+      throws IOException, VerificationException, RegistryException {\n+    String targetImage = \"localhost:5000/multiplatform:maven\" + System.nanoTime();\n+\n+    Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());\n+    verifier.setSystemProperty(\"_TARGET_IMAGE\", targetImage);\n+\n+    verifier.setSystemProperty(\"jib.to.auth.username\", \"testuser\");\n+    verifier.setSystemProperty(\"jib.to.auth.password\", \"testpassword\");\n+    verifier.setSystemProperty(\"sendCredentialsOverHttp\", \"true\");\n+    verifier.setSystemProperty(\"jib.allowInsecureRegistries\", \"true\");\n+\n+    verifier.setAutoclean(false);\n+    verifier.addCliOption(\"-X\");\n+    verifier.addCliOption(\"--file=pom-multiplatform-build.xml\");\n+    verifier.executeGoals(Arrays.asList(\"clean\", \"compile\", \"jib:build\"));\n+    verifier.verifyErrorFreeLog();\n+\n+    FailoverHttpClient httpClient = new FailoverHttpClient(true, true, ignored -> {});\n+    RegistryClient registryClient =\n+        RegistryClient.factory(EventHandlers.NONE, \"localhost:5000\", \"multiplatform\", httpClient)\n+            .setCredential(Credential.from(\"testuser\", \"testpassword\"))\n+            .newRegistryClient();\n+    registryClient.configureBasicAuth();\n+\n+    // manifest list by tag \":latest\"\n+    ManifestTemplate manifestListTemplate = registryClient.pullManifest(\"latest\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList = (V22ManifestListTemplate) manifestListTemplate;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // manifest list by tag \":another\"\n+    ManifestTemplate manifestListTemplate2 = registryClient.pullManifest(\"another\").getManifest();\n+    MatcherAssert.assertThat(\n+        manifestListTemplate2, CoreMatchers.instanceOf(V22ManifestListTemplate.class));\n+    V22ManifestListTemplate manifestList2 = (V22ManifestListTemplate) manifestListTemplate2;\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\"),\n+        manifestList2.getDigestsForPlatform(\"arm64\", \"linux\"));\n+    Assert.assertEquals(\n+        Arrays.asList(\"sha256:f3f4a91c68bcafea351280085d17e25fa598f5644c8b5e31e6133eddfc35e7ff\"),\n+        manifestList2.getDigestsForPlatform(\"amd64\", \"linux\"));\n+\n+    // arm64/linux manifest\n+    ManifestAndDigest<ManifestTemplate> manifestAndDigest1 =\n+        registryClient.pullManifest(\n+            \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\");\n+    ManifestTemplate manifestTemplate1 = manifestAndDigest1.getManifest();\n+    Assert.assertEquals(\n+        \"sha256:fee2655e19e5138150606c99cfc16fcbf502d72b0f3b9ccf3a8f4509c47e46d9\",\n+        manifestAndDigest1.getDigest().toString());\n+    MatcherAssert.assertThat(manifestTemplate1, CoreMatchers.instanceOf(V22ManifestTemplate.class));\n+    V22ManifestTemplate manifest1 = (V22ManifestTemplate) manifestTemplate1;", "originalCommit": "ef63089e17592026a74d37eaeb5f956b3161829c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjYxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2734#discussion_r499722619", "bodyText": "The cast should come below the assertion in line 756. The assertion is to ensure that the template is of type V22ManifestTemplate before attempting casting.", "author": "chanseokoh", "createdAt": "2020-10-05T16:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMTM1MQ=="}], "type": "inlineReview"}, {"oid": "03b1f010414e62d7c2636672a24c29d6079aa2e0", "url": "https://github.com/GoogleContainerTools/jib/commit/03b1f010414e62d7c2636672a24c29d6079aa2e0", "message": "Preserve image order", "committedDate": "2020-10-05T21:18:24Z", "type": "commit"}]}