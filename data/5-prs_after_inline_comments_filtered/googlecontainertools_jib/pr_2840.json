{"pr_number": 2840, "pr_title": "Add credentials for `from` image in BuildFile", "pr_createdAt": "2020-10-19T17:07:04Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2840", "timeline": [{"oid": "32d1ba178731fd8eb3b8089e68721c4bd7a2e056", "url": "https://github.com/GoogleContainerTools/jib/commit/32d1ba178731fd8eb3b8089e68721c4bd7a2e056", "message": "Add credentials for from image in BuildFile", "committedDate": "2020-10-19T17:02:44Z", "type": "commit"}, {"oid": "6a9c75f62126b3f081a2bef0be0b54a127d670eb", "url": "https://github.com/GoogleContainerTools/jib/commit/6a9c75f62126b3f081a2bef0be0b54a127d670eb", "message": "oops, format", "committedDate": "2020-10-19T17:40:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDE4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508070187", "bodyText": "Is it required for platform spec to be fully specified?", "author": "mpeddada1", "createdAt": "2020-10-19T21:22:04Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))", "originalCommit": "6a9c75f62126b3f081a2bef0be0b54a127d670eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MzExNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508073114", "bodyText": "Oh looks like it is.", "author": "mpeddada1", "createdAt": "2020-10-19T21:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NjYxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508076615", "bodyText": "maybe we can add a small e.g  at the end to make this more clear?", "author": "mpeddada1", "createdAt": "2020-10-19T21:35:29Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -53,33 +69,22 @@ private static BuildFileSpec toBuildFileSpec(\n    *\n    * @param projectRoot the root context directory of this build\n    * @param buildFilePath a file containing the build definition\n-   * @param templateParameters a map of templating variables to apply on the file before parsing\n+   * @param buildOptions the build configuration from the command line", "originalCommit": "6a9c75f62126b3f081a2bef0be0b54a127d670eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNjIyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508116221", "bodyText": "I could add en example, but not sure what you're for an example of?", "author": "loosebazooka", "createdAt": "2020-10-19T23:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MTc2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508141760", "bodyText": "Oops I totally missed that buildOptions was of type JibCli.  Adding an example is probably not useful here. Should the name be a more general, like cliOptions, if JibCli also includes things like verbosity and console?", "author": "mpeddada1", "createdAt": "2020-10-20T00:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NjYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTc0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r507921743", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Rule public MockitoRule rule = MockitoJUnit.rule();\n          \n          \n            \n            \n          \n          \n            \n              @Mock ConsoleLogger consoleLogger;\n          \n          \n            \n              @Mock JibCli jibCli;\n          \n          \n            \n              @Rule public final MockitoRule rule = MockitoJUnit.rule();\n          \n          \n            \n            \n          \n          \n            \n              @Mock private ConsoleLogger consoleLogger;\n          \n          \n            \n              @Mock private JibCli jibCli;", "author": "chanseokoh", "createdAt": "2020-10-19T17:19:58Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -38,13 +40,27 @@\n import org.hamcrest.CoreMatchers;\n import org.hamcrest.MatcherAssert;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n \n public class BuildFilesTest {\n \n   @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n+  @Rule public MockitoRule rule = MockitoJUnit.rule();\n+\n+  @Mock ConsoleLogger consoleLogger;\n+  @Mock JibCli jibCli;", "originalCommit": "32d1ba178731fd8eb3b8089e68721c4bd7a2e056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNTk2NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508115965", "bodyText": "oof, sorry, it strikes again", "author": "loosebazooka", "createdAt": "2020-10-19T23:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508080872", "bodyText": "The iteration order is actually important. Internally we used LinkedHashSet everywhere to preserve the order while conveniently removing duplicates (also signifying that duplicates can't exist). However, I see that it can easily make the Jib API user to mess up with the order. Maybe accepting a Set wasn't a good idea.\nAnyways, the question is, would Collectors.toSet() preserve the insertion order?", "author": "chanseokoh", "createdAt": "2020-10-19T21:45:04Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(\n+      BaseImageSpec from, JibCli buildOptions, ConsoleLogger logger)\n+      throws InvalidImageReferenceException, FileNotFoundException {\n+    String baseImageReference = from.getImage();\n+    if (baseImageReference.startsWith(DOCKER_DAEMON_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          DockerDaemonImage.named(baseImageReference.replaceFirst(DOCKER_DAEMON_IMAGE_PREFIX, \"\")));\n+    }\n+    if (baseImageReference.startsWith(TAR_IMAGE_PREFIX)) {\n+      return Jib.from(\n+          TarImage.at(Paths.get(baseImageReference.replaceFirst(TAR_IMAGE_PREFIX, \"\"))));\n+    }\n+    ImageReference imageReference =\n+        ImageReference.parse(baseImageReference.replaceFirst(REGISTRY_IMAGE_PREFIX, \"\"));\n+    RegistryImage registryImage = RegistryImage.named(imageReference);\n+    DefaultCredentialRetrievers defaultCredentialRetrievers =\n+        DefaultCredentialRetrievers.init(\n+            CredentialRetrieverFactory.forImage(\n+                imageReference,\n+                logEvent -> logger.log(logEvent.getLevel(), logEvent.getMessage())));\n+    Credentials.getFromCredentialRetrievers(buildOptions, defaultCredentialRetrievers)\n+        .forEach(registryImage::addCredentialRetriever);\n+    JibContainerBuilder containerBuilder = Jib.from(registryImage);\n+    if (!from.getPlatforms().isEmpty()) {\n+      containerBuilder.setPlatforms(\n+          from.getPlatforms()\n+              .stream()\n+              .map(\n+                  platformSpec ->\n+                      new Platform(platformSpec.getArchitecture(), platformSpec.getOs()))\n+              .collect(Collectors.toSet()));", "originalCommit": "6a9c75f62126b3f081a2bef0be0b54a127d670eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDk2OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508114968", "bodyText": "no but I think I can do: Collectors.toCollection(LinkedHashSet::new)", "author": "loosebazooka", "createdAt": "2020-10-19T23:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNTc2MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508115761", "bodyText": "Why does the order matter? for selecting defaults?", "author": "loosebazooka", "createdAt": "2020-10-19T23:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODczNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508138736", "bodyText": "jib-core will create a manifest list with the given platform order.", "author": "chanseokoh", "createdAt": "2020-10-20T00:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1NjE3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508156179", "bodyText": "oh right.", "author": "loosebazooka", "createdAt": "2020-10-20T01:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjQ5Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508082497", "bodyText": "I think this can be private without @VisibleForTesting?", "author": "chanseokoh", "createdAt": "2020-10-19T21:48:35Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.\n+  static JibContainerBuilder createJibContainerBuilder(", "originalCommit": "6a9c75f62126b3f081a2bef0be0b54a127d670eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDgyOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508114828", "bodyText": "oh right.", "author": "loosebazooka", "createdAt": "2020-10-19T23:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIzNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508100235", "bodyText": "sorry, does this PR need to submitted before we start writing the integration tests?", "author": "mpeddada1", "createdAt": "2020-10-19T22:31:05Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -98,4 +103,42 @@ public static JibContainerBuilder toJibContainerBuilder(\n     }\n     return containerBuilder;\n   }\n+\n+  @VisibleForTesting\n+  // TODO: add testing, need to do via intergration tests as there's no good way to extract out that\n+  //   the base image was populated as the user intended currently.", "originalCommit": "6a9c75f62126b3f081a2bef0be0b54a127d670eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDcyMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508114723", "bodyText": "yeah, well, really they all do, so we can run full builds using the CLI.", "author": "loosebazooka", "createdAt": "2020-10-19T23:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MDA1NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2840#discussion_r508140054", "bodyText": "ah right.", "author": "mpeddada1", "createdAt": "2020-10-20T00:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMDIzNQ=="}], "type": "inlineReview"}, {"oid": "0d7325635c8e36f61d5c6fcd7581a5055e6dad56", "url": "https://github.com/GoogleContainerTools/jib/commit/0d7325635c8e36f61d5c6fcd7581a5055e6dad56", "message": "Update jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n\nCo-authored-by: Chanseok Oh <chanseok@google.com>", "committedDate": "2020-10-19T23:16:37Z", "type": "commit"}, {"oid": "59ab76ab164df1a72890c53ed2d5665a35c4a225", "url": "https://github.com/GoogleContainerTools/jib/commit/59ab76ab164df1a72890c53ed2d5665a35c4a225", "message": "cleanup", "committedDate": "2020-10-20T01:38:32Z", "type": "commit"}]}