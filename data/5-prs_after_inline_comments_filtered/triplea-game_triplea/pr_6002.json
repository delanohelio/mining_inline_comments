{"pr_number": 6002, "pr_title": "Incompatible or \"File Not Found\" Save Game Error Messaging Improvements", "pr_createdAt": "2020-03-04T08:39:25Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6002", "timeline": [{"oid": "2bea667053e9d4e7940aa494668a23bfa541152c", "url": "https://github.com/triplea-game/triplea/commit/2bea667053e9d4e7940aa494668a23bfa541152c", "message": "Handle save-game file not found case", "committedDate": "2020-03-04T06:54:57Z", "type": "commit"}, {"oid": "1af53b5d235b926a715281fc1eb070bab2859dca", "url": "https://github.com/triplea-game/triplea/commit/1af53b5d235b926a715281fc1eb070bab2859dca", "message": "Show an error message when failing to load a save game", "committedDate": "2020-03-04T06:54:57Z", "type": "commit"}, {"oid": "40af5489657b7f85878b836e199894f32f7bf55b", "url": "https://github.com/triplea-game/triplea/commit/40af5489657b7f85878b836e199894f32f7bf55b", "message": "Resurrect Version.java from latest release (1.9.0.0.13066)", "committedDate": "2020-03-04T06:54:57Z", "type": "commit"}, {"oid": "4746b3017f4b95a902c13836bb8e2ce7bd7716d1", "url": "https://github.com/triplea-game/triplea/commit/4746b3017f4b95a902c13836bb8e2ce7bd7716d1", "message": "Update old Version.java, deprecate it, suppress checkstyles, apply formatting", "committedDate": "2020-03-04T08:18:02Z", "type": "commit"}, {"oid": "4d124c258b6abf5dd26aafa0deb0892fe9bab281", "url": "https://github.com/triplea-game/triplea/commit/4d124c258b6abf5dd26aafa0deb0892fe9bab281", "message": "Give specific error message and download link for incompatible 1.9 save games", "committedDate": "2020-03-04T08:18:04Z", "type": "commit"}, {"oid": "e42972525dda2fa0571ee9a32799adf913ab91f4", "url": "https://github.com/triplea-game/triplea/commit/e42972525dda2fa0571ee9a32799adf913ab91f4", "message": "Improve javadoc on new utility class: TaskRunner", "committedDate": "2020-03-04T08:18:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNzUwMw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387517503", "bodyText": "Method run has 33 lines of code (exceeds 25 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-03-04T08:40:44Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {", "originalCommit": "e42972525dda2fa0571ee9a32799adf913ab91f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNzUwNQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387517505", "bodyText": "TODO found", "author": "codeclimate", "createdAt": "2020-03-04T08:40:44Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged", "originalCommit": "e42972525dda2fa0571ee9a32799adf913ab91f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54883927248e671fcbdb217e3f286c3eba8ee429", "url": "https://github.com/triplea-game/triplea/commit/54883927248e671fcbdb217e3f286c3eba8ee429", "message": "Remove unused \"@Log\"", "committedDate": "2020-03-04T08:46:33Z", "type": "commit"}, {"oid": "a2e0d215132ab9c7d8db41ff087fe0972b0f490c", "url": "https://github.com/triplea-game/triplea/commit/a2e0d215132ab9c7d8db41ff087fe0972b0f490c", "message": "Allow unmatched-tests custom check to be suppressed for specific class files via \"SuppressWarnings\" annotation", "committedDate": "2020-03-04T08:52:39Z", "type": "commit"}, {"oid": "3db89602f9e9922924fa5c6010027ecc8445f812", "url": "https://github.com/triplea-game/triplea/commit/3db89602f9e9922924fa5c6010027ecc8445f812", "message": "Refactor TaskRunner, shorten \"run\" method", "committedDate": "2020-03-04T09:01:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MDIwNg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387780206", "bodyText": "Do we really need more than this level of detail?\nI'd really like to avoid keeping a legacy variant of the version class just for comparison.\nIf you ask me we should really serialize String rather than Version because that should be a more robust approach.\nIf the object isn't a string we can safely assume that it's incompatible and in case it is a string we could throw some super fancy analysis algorithm on it if we ever try to change the version format again in the future", "author": "RoiEXLab", "createdAt": "2020-03-04T16:24:02Z", "path": "game-core/src/main/java/games/strategy/engine/framework/GameDataManager.java", "diffHunk": "@@ -59,16 +61,35 @@ public static GameData loadGame(final InputStream is) throws IOException {\n \n     final ObjectInputStream input = new ObjectInputStream(new GZIPInputStream(is));\n     try {\n-      final Version readVersion = (Version) input.readObject();\n-      if (!ClientContext.engineVersion().isCompatibleWithEngineVersion(readVersion)) {\n-        final String error =\n-            \"Incompatible engine versions. We are: \"\n-                + ClientContext.engineVersion()\n-                + \" . Trying to load game created with: \"\n-                + readVersion\n-                + \"\\nTo download the latest version of TripleA, Please visit \"\n-                + UrlConstants.DOWNLOAD_WEBSITE;\n-        throw new IOException(error);\n+      final Object version = input.readObject();\n+\n+      if (version instanceof games.strategy.util.Version) {\n+        throw new IOException(\n+            String.format(\n+                \"Incompatible engine versions. We are: %s<br/>\"\n+                    + \"Trying to load incompatible save game version: %s<br/>\"\n+                    + \"To download an older version of TripleA,<br/>\"\n+                    + \"please visit: <a href=%s>%s</a>\",\n+                ClientContext.engineVersion(),\n+                ((games.strategy.util.Version) version).getExactVersion(),\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE,\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE));\n+\n+      } else if (!(version instanceof Version)) {\n+        throw new IOException(\n+            \"Incompatible engine version with save game, \"\n+                + \"unable to determine version of the save game\");", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMDYzMw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387930633", "bodyText": "In short, the more detail we can get, the better.\nConsidering the reported issue: #5957, @ron-murhammer said: \"Yeah we need a good error notification here as this will happen fairly often.\"\nWithout a good error message, I'm pretty positive a generic error message that does not really tell a user why the save game cannot be loaded would get reported as a bug. We do not have really any other way to tell a user to accurately that they need a 1.9 version. IMO, having the legacy class is a cost of the serialization technology used for save games. We introduced a feature regression when we removed the 'old jar' capability, keeping a legacy class around for a release is not a material cost to us.\nGenerally agree that we probably should encode the version as a string to keep the compatibility. Though, that is not what we have or had, it might be better to move directly to the project where we fix save game serialization and skip the intermediary step.", "author": "DanVanAtta", "createdAt": "2020-03-04T20:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MDIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NjMyMw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387786323", "bodyText": "A couple of things regarding the HTML here:\n\nPer HTML5 specification the <br> tag doesn't need to be closed, the <br /> is xhtml notation AFAIK.\nEven though per spec quotes after attributes like href=\"http://some/link\" are optional it's a good practice to always use them in case the link ever contains some sort of space or something", "author": "RoiEXLab", "createdAt": "2020-03-04T16:32:50Z", "path": "game-core/src/main/java/games/strategy/engine/framework/GameDataManager.java", "diffHunk": "@@ -59,16 +61,35 @@ public static GameData loadGame(final InputStream is) throws IOException {\n \n     final ObjectInputStream input = new ObjectInputStream(new GZIPInputStream(is));\n     try {\n-      final Version readVersion = (Version) input.readObject();\n-      if (!ClientContext.engineVersion().isCompatibleWithEngineVersion(readVersion)) {\n-        final String error =\n-            \"Incompatible engine versions. We are: \"\n-                + ClientContext.engineVersion()\n-                + \" . Trying to load game created with: \"\n-                + readVersion\n-                + \"\\nTo download the latest version of TripleA, Please visit \"\n-                + UrlConstants.DOWNLOAD_WEBSITE;\n-        throw new IOException(error);\n+      final Object version = input.readObject();\n+\n+      if (version instanceof games.strategy.util.Version) {\n+        throw new IOException(\n+            String.format(\n+                \"Incompatible engine versions. We are: %s<br/>\"\n+                    + \"Trying to load incompatible save game version: %s<br/>\"\n+                    + \"To download an older version of TripleA,<br/>\"\n+                    + \"please visit: <a href=%s>%s</a>\",\n+                ClientContext.engineVersion(),\n+                ((games.strategy.util.Version) version).getExactVersion(),\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE,\n+                UrlConstants.OLD_DOWNLOADS_WEBSITE));\n+\n+      } else if (!(version instanceof Version)) {\n+        throw new IOException(\n+            \"Incompatible engine version with save game, \"\n+                + \"unable to determine version of the save game\");\n+      } else if (!ClientContext.engineVersion().isCompatibleWithEngineVersion((Version) version)) {\n+        throw new IOException(\n+            String.format(\n+                \"Incompatible engine versions. We are: %s<br/>\"\n+                    + \"Trying to load game created with: %s<br/>\"\n+                    + \"To download the latest version of TripleA,<br/>\"\n+                    + \"please visit: <a href=%s>%s</a>\",", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDQzMw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387934433", "bodyText": "The swing HTML renderer is not exactly HTML5 compliant, regardless, those are not bad cleanups per-say, updated:\n\nd9b6893\naf46b9f", "author": "DanVanAtta", "createdAt": "2020-03-04T21:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NjMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4OTAxNA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387789014", "bodyText": "Why make the exception type so broad?\nAs far as I can see the only checked exception here is IOException", "author": "RoiEXLab", "createdAt": "2020-03-04T16:36:55Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/mc/GameSelectorModel.java", "diffHunk": "@@ -66,31 +67,25 @@ public void load(final GameChooserEntry entry) {\n   /**\n    * Loads game data by parsing a given file.\n    *\n-   * @return True if file parsing was successful and an internal {@code GameData} was set. Otherwise\n-   *     returns false and internal {@code GameData} is null.\n+   * @throws Exception If file parsing is successful and an internal {@code GameData} was set.\n    */\n-  public boolean load(final File file) {\n-    if (!file.isFile()) {\n-      return false;\n-    }\n+  public void load(final File file) throws Exception {", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNTcxNA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387935714", "bodyText": "There is also:\n  public static GameData parse(final String mapName, final InputStream stream)\n      throws GameParseException, EngineVersionException {\n\nTurns out if we break it out further, there would eventually be more of them.", "author": "DanVanAtta", "createdAt": "2020-03-04T21:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4OTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387794768", "bodyText": "I thought this kind of handling was odd so aI had a look at the documentation:\nTurns out it's way nicer to use FileDialog#getFiles() which returns an array with the selected files (with a single element because multipleMode is false by default, or empty if the operation was canceled)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final String fileName = fileDialog.getFile();\n          \n          \n            \n                  final String dirName = fileDialog.getDirectory();\n          \n          \n            \n                  return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n          \n          \n            \n                  return Optional.ofNullable(fileName)\n          \n          \n            \n                      .map(name -> new File(dirName, fileName))\n          \n          \n            \n                      .map(this::mapFileResult);\n          \n          \n            \n            return Arrays.stream(fileDialog.getFiles())\n          \n          \n            \n                .findAny()\n          \n          \n            \n                .map(this::mapFileResult);", "author": "RoiEXLab", "createdAt": "2020-03-04T16:46:02Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameFileSelector.java", "diffHunk": "@@ -32,15 +36,26 @@ private GameFileSelector() {}\n       fileDialog.setVisible(true);\n       final String fileName = fileDialog.getFile();\n       final String dirName = fileDialog.getDirectory();\n-      return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n+      return Optional.ofNullable(fileName)\n+          .map(name -> new File(dirName, fileName))\n+          .map(this::mapFileResult);", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzODExNg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387938116", "bodyText": "I think this direction, but not for this PR. The updates here already tested, would need to be re-tested again once this update is made. We can just as easily make this it's own follow-up and do its own testing for it. From another perspective, the update here is to also improve the existing handling, not necessarily change how the file is gathered.", "author": "DanVanAtta", "createdAt": "2020-03-04T21:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzODQyMA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387938420", "bodyText": "I'm not sure if the 'findAny' would be very clear as well to future maintainers, having this logic be close to where we limit to one selection would probably be the thing to do.", "author": "DanVanAtta", "createdAt": "2020-03-04T21:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMzA0Nw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388903047", "bodyText": "This one in a future PR", "author": "RoiEXLab", "createdAt": "2020-03-06T13:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MDA1Mw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389080053", "bodyText": "If you'd like to do so @RoiEXLab , I don't think I'll rush to do it. This part of the changeset is a bugfix. The scope of change you have proposed is outside of the intended changeset presented in this PR. For example, I could pick many any other diffs in this same changeset and suggest many other valuable alternatives to the surrounding lines that would make the same diff simpler. It can become arbitrary at some point, this seems like a \"while you are here, please also do this\" type of change, which is something I did not want/or choose to do in the first place for reasons:\n\nscope creep\nkeeping set of changes to what I was wanting and felt comfortable testing.\nreview cost (already we have many commits, some questions I think would have been answered by looking at commit comments and individual diffs, adding more commits would have made it even less likely for the commit context to have been observed)\ntest burden\ngetting this done", "author": "DanVanAtta", "createdAt": "2020-03-06T18:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzY5MA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387797690", "bodyText": "Good thing HTML parsers aren't really known for their strictness \ud83d\ude05\n(I mean we could turn this into valid HTMl by adding a body tag, closing the whole thing and everything but as long as it is displayed correctly, I honestly don't even care at this point, this is not even a browser after all ^^ )", "author": "RoiEXLab", "createdAt": "2020-03-04T16:50:44Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameSelectorPanel.java", "diffHunk": "@@ -312,30 +318,41 @@ public void update(final Observable o, final Object arg) {\n   }\n \n   private void selectSavedGameFile() {\n-    GameFileSelector.selectGameFile(JOptionPane.getFrameForComponent(this))\n+    GameFileSelector.builder()\n+        .fileDoesNotExistAction(\n+            file ->\n+                DialogBuilder.builder()\n+                    .parent(this)\n+                    .title(\"Save Game File Not Found\")\n+                    .errorMessage(\"File does not exist: \" + file.getAbsolutePath())\n+                    .showDialog())\n+        .build()\n+        .selectGameFile(JOptionPane.getFrameForComponent(this))\n         .ifPresent(\n-            file -> {\n-              try {\n-                if (!GameRunner.newBackgroundTaskRunner()\n-                    .runInBackgroundAndReturn(\n-                        \"Loading savegame...\",\n+            file ->\n+                TaskRunner.builder()\n+                    .waitDialogTitle(\"Loading Save Game\")\n+                    .exceptionHandler(\n+                        e ->\n+                            SwingComponents.showDialogWithLinks(\n+                                DialogWithLinksParams.builder()\n+                                    .title(\"Failed To Load Save Game\")\n+                                    .dialogType(DialogWithLinksTypes.ERROR)\n+                                    .dialogText(\n+                                        String.format(\n+                                            \"<html>Error: %s<br/><br/>\"\n+                                                + \"If this is not expected, please \"\n+                                                + \"file a <a href=%s>bug report</a><br/>\"\n+                                                + \"and attach the error message above and the \"\n+                                                + \"save game you are trying to load.\",", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MzY5MQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387943691", "bodyText": "Indeed, though, swing is not really a compliant HTML parser and we're not really rendering HTML pages. It would be inappropriate to have a body or head tag. The prefix of <html> is effectively a hack to tell swing to do html rendering. IIRC, swing supports only a subset of tags.", "author": "DanVanAtta", "createdAt": "2020-03-04T21:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NzY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNTAyMg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387805022", "bodyText": "It's a shame generic exceptions can't be caught here.\nHowever I wouldn't catch throwable here, just the regular Exception, it can't even be specified as generic type anyways", "author": "RoiEXLab", "createdAt": "2020-03-04T17:02:32Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);\n+    }\n+  }\n+\n+  private SwingWorker<Void, Void> buildBackgroundJobRunnerWithWaitDialog(\n+      final ThrowingRunnable<E> backgroundAction,\n+      final AtomicReference<Throwable> exceptionRef,\n+      final WaitDialog waitDialog) {\n+    return new SwingWorker<>() {\n+      @Override\n+      protected Void doInBackground() {\n+        try {\n+          backgroundAction.run();\n+        } catch (final Throwable e) {", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MzA0OQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387943049", "bodyText": "This class should look very similar to BackGroundTaskRunner, it was modeled after it and really started off as a spawn of it. I remember debating this one and see why BackGroundTaskRunner had a Throwable, it is not needed here. I agree better to catch Exception, updated: ef1ecb9", "author": "DanVanAtta", "createdAt": "2020-03-04T21:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNzg2MA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387807860", "bodyText": "I believe a small bug sneaked in here:\nLoad should only get invoked when the file does actually exist, not the other way round.\nPreviously in the if statement this was the case because the second or case was only ever executed if !f1.exists() was false i.e. f1.exists() was true.", "author": "RoiEXLab", "createdAt": "2020-03-04T17:07:26Z", "path": "game-core/src/main/java/org/triplea/game/server/HeadlessLaunchAction.java", "diffHunk": "@@ -31,8 +31,8 @@ public void handleGameInterruption(\n       // then crashing out, then launching, etc.\n       serverModel.setAllPlayersToNullNodes();\n       final File f1 = getAutoSaveFileUtils().getHeadlessAutoSaveFile();\n-      if (!f1.exists() || !gameSelectorModel.load(f1)) {\n-        gameSelectorModel.resetGameDataToNull();\n+      if (!f1.exists()) {\n+        gameSelectorModel.load(f1);", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyODgzNw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387928837", "bodyText": "You're right, that is a good catch.\nFixed in: 7846a1b", "author": "DanVanAtta", "createdAt": "2020-03-04T20:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwNzg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r387809719", "bodyText": "new File(fileName) is called three times here, I'd appreciate if it was put into a single variable and used 3 times, even if that adds another if block", "author": "RoiEXLab", "createdAt": "2020-03-04T17:10:49Z", "path": "game-core/src/main/java/games/strategy/engine/framework/GameRunner.java", "diffHunk": "@@ -153,7 +156,12 @@ private static void loadGame() {\n     gameSelectorModel.loadDefaultGameSameThread();\n     final String fileName = System.getProperty(TRIPLEA_GAME, \"\");\n     if (!fileName.isEmpty() && new File(fileName).exists()) {\n-      gameSelectorModel.load(new File(fileName));\n+      try {\n+        gameSelectorModel.load(new File(fileName));\n+      } catch (final Exception e) {\n+        log.log(\n+            Level.SEVERE, \"Error loading game file: \" + new File(fileName).getAbsolutePath(), e);", "originalCommit": "3db89602f9e9922924fa5c6010027ecc8445f812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwMjcyNg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388902726", "bodyText": "This one", "author": "RoiEXLab", "createdAt": "2020-03-06T13:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NzM1Mg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389077352", "bodyText": "Sorry, though I'd rather not refactor this code beyond handling the newly checked exception. This was OS specific code that requires an installer of the app, the test burden here is really high. A unit test would be good to have, OTOH this existing logic block is far outside of the intended scope of change.", "author": "DanVanAtta", "createdAt": "2020-03-06T18:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTYzNg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389121636", "bodyText": "The only reason I'm pointing this out is because this PR introduces another call to new File(fileName).\nSo I was thinking that now that there's 3 of them adding a variable and use that3 times would finally be worth it, but nothing too crazy here. I can also do that in a follow-up PR. It's nothing special", "author": "RoiEXLab", "createdAt": "2020-03-06T20:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NzMzNQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389177335", "bodyText": "It is your prerogative. IMO it could be more effective prioritization to focus on 2.0 or deeper refactoring that would remove game loading from GameRunner", "author": "DanVanAtta", "createdAt": "2020-03-06T22:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NDQzMQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389184431", "bodyText": "Removing this bit of the code would be a good step into the right direction, but a hard one to achieve  unfortunately.\nThe \"join headless host\" code depends on it, so it can pass parameters to the newly spawned process \ud83d\ude05", "author": "RoiEXLab", "createdAt": "2020-03-06T22:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgwOTcxOQ=="}], "type": "inlineReview"}, {"oid": "7846a1bfa8cd1e8e6ae84fda94cd254a4dee416b", "url": "https://github.com/triplea-game/triplea/commit/7846a1bfa8cd1e8e6ae84fda94cd254a4dee416b", "message": "Fix headless launch file exists boolean check", "committedDate": "2020-03-04T20:54:54Z", "type": "commit"}, {"oid": "d9b6893fd2030ea644e518d47a36a615e007516a", "url": "https://github.com/triplea-game/triplea/commit/d9b6893fd2030ea644e518d47a36a615e007516a", "message": "Replace \"<br/>\" with \"<br>\"", "committedDate": "2020-03-04T21:02:03Z", "type": "commit"}, {"oid": "af46b9f159eb96a6e77fedf198ecaa89790afcf3", "url": "https://github.com/triplea-game/triplea/commit/af46b9f159eb96a6e77fedf198ecaa89790afcf3", "message": "Use quotes in links", "committedDate": "2020-03-04T21:05:05Z", "type": "commit"}, {"oid": "ef1ecb99449a01aa9c61cf4bcde495fc5697d20c", "url": "https://github.com/triplea-game/triplea/commit/ef1ecb99449a01aa9c61cf4bcde495fc5697d20c", "message": "Catch Exception instead of Throwable", "committedDate": "2020-03-04T21:18:42Z", "type": "commit"}, {"oid": "1f2f2593cff481c3287cad726dda316396db8356", "url": "https://github.com/triplea-game/triplea/commit/1f2f2593cff481c3287cad726dda316396db8356", "message": "Merge remote-tracking branch 'origin/master' into incompatible-older-version-message", "committedDate": "2020-03-04T21:29:12Z", "type": "commit"}, {"oid": "2b986558d428cb8b387baf829478e6e21bb658f1", "url": "https://github.com/triplea-game/triplea/commit/2b986558d428cb8b387baf829478e6e21bb658f1", "message": "Fix merge conflict resolutions", "committedDate": "2020-03-04T21:30:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNDM0OA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388904348", "bodyText": "It's a bit hard to wrap my head around this, this is a super weird side-effect, but ok.\nPerhaps worth annotating this method with @Nullable", "author": "RoiEXLab", "createdAt": "2020-03-06T13:34:06Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/panels/main/game/selector/GameFileSelector.java", "diffHunk": "@@ -32,15 +36,26 @@ private GameFileSelector() {}\n       fileDialog.setVisible(true);\n       final String fileName = fileDialog.getFile();\n       final String dirName = fileDialog.getDirectory();\n-      return Optional.ofNullable(fileName).map(name -> new File(dirName, fileName));\n+      return Optional.ofNullable(fileName)\n+          .map(name -> new File(dirName, fileName))\n+          .map(this::mapFileResult);\n     }\n \n     // Non-Mac platforms should use the normal Swing JFileChooser\n     final JFileChooser fileChooser = SaveGameFileChooser.getInstance();\n     final int selectedOption = fileChooser.showOpenDialog(owner);\n     if (selectedOption == JFileChooser.APPROVE_OPTION) {\n-      return Optional.of(fileChooser.getSelectedFile());\n+      return Optional.of(fileChooser.getSelectedFile()).map(this::mapFileResult);\n     }\n     return Optional.empty();\n   }\n+\n+  private File mapFileResult(final File file) {\n+    if (file.exists()) {\n+      return file;\n+    } else {\n+      fileDoesNotExistAction.accept(file);", "originalCommit": "2b986558d428cb8b387baf829478e6e21bb658f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NDM0NA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389084344", "bodyText": "Why super-weird? It's an error handling callback. Could that have been made more clear?\nThe nullable update is maybe getting us into diminishing returns, it is much better we take care of higher level concerns. Regardless, updated: 3fbfa90", "author": "DanVanAtta", "createdAt": "2020-03-06T18:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNDM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExOTk5OA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389119998", "bodyText": "Well from just looking at the other method I assumed that mapFileResult was a \"pure\" function with no side-effects, so I was quite suprised to see the error handler there.\nMaybe not \"weird\" but definitely unexpected.", "author": "RoiEXLab", "createdAt": "2020-03-06T20:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNDM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNTIxOA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388905218", "bodyText": "The AtomicReference is still Throwable instead of just exception", "author": "RoiEXLab", "createdAt": "2020-03-06T13:35:54Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);\n+    }\n+  }\n+\n+  private SwingWorker<Void, Void> buildBackgroundJobRunnerWithWaitDialog(\n+      final ThrowingRunnable<E> backgroundAction,\n+      final AtomicReference<Throwable> exceptionRef,", "originalCommit": "2b986558d428cb8b387baf829478e6e21bb658f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NzAwMw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389087003", "bodyText": "Updated: 8e794f4", "author": "DanVanAtta", "createdAt": "2020-03-06T19:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwODA1Nw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388908057", "bodyText": "I'm 99% sure a ClassCastException can only ever be thrown inside the exception handler here, so in case we catch an unchecked Exception by accident causing the exceptionHandler to trip up, this exception isn't as impossible as it seems.\nThinking about it we might want to consider explicitly passing a class object here to correctly filter out the \"unwanted\" exception types \ud83e\udd14", "author": "RoiEXLab", "createdAt": "2020-03-06T13:41:40Z", "path": "game-core/src/main/java/games/strategy/engine/framework/ui/background/TaskRunner.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package games.strategy.engine.framework.ui.background;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.swing.SwingWorker;\n+import javax.swing.WindowConstants;\n+import lombok.Builder;\n+import org.triplea.java.function.ThrowingRunnable;\n+import org.triplea.swing.SwingComponents;\n+\n+/**\n+ * Runs a background task with a wait dialog in the foreground. Similar to {@see\n+ * BackgroundTaskRunner} except:\n+ *\n+ * <ul>\n+ *   <li>Wait dialog can be closed.\n+ *   <li>Does not throw exceptions, instead invokes an exception handler\n+ * </ul>\n+ *\n+ * @param <E> Exception type that can be thrown by the background task.\n+ */\n+@Builder\n+public class TaskRunner<E extends Exception> {\n+  /**\n+   * Error callback handler. The background task encounters an exception, the background task is\n+   * cancelled and this is invoked with the exception that occurred.\n+   */\n+  @Nonnull private final Consumer<E> exceptionHandler;\n+  /**\n+   * Title of the wait spinner window that is displayed to user while a background action is being\n+   * executed.\n+   */\n+  @Nonnull private final String waitDialogTitle;\n+\n+  /**\n+   * Runs a task with a closeable wait spinner dialog in the foreground. THe wait spinner closes\n+   * when the task completes. If the spinner dialog is closed, then the background task is\n+   * cancelled. If there are any exceptions encountered, the spinner dialog is closed and the {@see\n+   * exceptionHandler} {@code Consumer} property is called.\n+   *\n+   * @param backgroundAction The action to be executed.\n+   */\n+  public void run(final ThrowingRunnable<E> backgroundAction) {\n+    Preconditions.checkNotNull(backgroundAction);\n+    final AtomicReference<Throwable> exceptionRef = new AtomicReference<>();\n+\n+    // TODO: after https://github.com/triplea-game/triplea/pull/6001 is merged\n+    //   change the 'null' parent window reference to main frame.\n+    final WaitDialog waitDialog = new WaitDialog(null, waitDialogTitle);\n+    waitDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\n+    final SwingWorker<Void, Void> worker =\n+        buildBackgroundJobRunnerWithWaitDialog(backgroundAction, exceptionRef, waitDialog);\n+    // If wait dialog is closed, then cancel the worker background job.\n+    SwingComponents.addWindowClosedListener(waitDialog, () -> worker.cancel(true));\n+\n+    worker.execute();\n+    waitDialog.setVisible(true);\n+\n+    try {\n+      @SuppressWarnings(\"unchecked\")\n+      final @Nullable E exception = (E) exceptionRef.get();\n+      if (exception != null) {\n+        exceptionHandler.accept(exception);\n+      }\n+    } catch (final ClassCastException e) {\n+      throw new AssertionError(\"Unexpected exception thrown\", e);", "originalCommit": "2b986558d428cb8b387baf829478e6e21bb658f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4Njk0OA==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389086948", "bodyText": "Thinking about it we might want to consider explicitly passing a class object here to correctly filter out the \"unwanted\" exception types thinking\n\nThis was an explicit decision. Background runner I found hard to use in the exception handling case and also turns out to be brittle (if the background task opens a swing window, because you can't close the modal wait dialog, you get a deadlock. The background task then only needs to log/throw an exception that triggers an error report dialog to crash the system). The exception API requiring an exception type was an unwelcome parameter to see, it's redundant to the generic type already. The trade-off for really specific error handling to API usage is not favorable here (otherwise background task runner could have been made fine to use).", "author": "DanVanAtta", "createdAt": "2020-03-06T19:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwODA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4NTQyOQ==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389185429", "bodyText": "My only problem with this is that we only use AssertionError for impossible conditions (like when UTF-8 is hardcoded as charset, but an exception is thrown, or when we do a switch and we checked all possible cases so the default case can never get reached). But this particular condition is very possible in practice, so I'd prefer using IllegalStateException", "author": "RoiEXLab", "createdAt": "2020-03-06T23:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwODA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDcxNg==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r388910716", "bodyText": "This whole part as well as the constructors can be removed IMO, just to be sure no one actually tries to do something about this. \ud83e\udd37\u200d\u2642\nJust because it's deprecated doesn't mean people won't actually try to use it", "author": "RoiEXLab", "createdAt": "2020-03-06T13:47:11Z", "path": "game-core/src/main/java/games/strategy/util/Version.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package games.strategy.util;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Represents a version string. versions are of the form major.minor.point.micro\n+ *\n+ * @deprecated Do not use this class, this is here purely to allow serialization from older save\n+ *     games.\n+ */\n+@SuppressWarnings({\"MemberName\", \"UnmatchedTest\"})\n+@Deprecated\n+public final class Version implements Serializable, Comparable<Version> {\n+  private static final long serialVersionUID = -4770210855326775333L;\n+\n+  private final int m_major;\n+  private final int m_minor;\n+  private final int m_point;\n+  private final int m_micro;\n+  private final String exactVersion;\n+\n+  /** Constructs a Version object without the point and micro version, defaults those to 0. */\n+  public Version(final int major, final int minor) {\n+    this(major, minor, 0);\n+  }\n+\n+  /** Constructs a Version object without the micro version, defaults to 0. */\n+  public Version(final int major, final int minor, final int point) {\n+    this(major, minor, point, 0);\n+  }\n+\n+  /** Constructs a Version object with all version values set. */\n+  public Version(final int major, final int minor, final int point, final int micro) {\n+    this.m_major = major;\n+    this.m_minor = minor;\n+    this.m_point = point;\n+    this.m_micro = micro;\n+    exactVersion = toString();\n+  }\n+\n+  /**\n+   * version must be of the from xx.xx.xx.xx or xx.xx.xx or xx.xx or xx where xx is a positive\n+   * integer\n+   */\n+  public Version(final String version) {\n+    exactVersion = version;\n+\n+    final Matcher matcher =\n+        Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.((?:\\\\d+|dev)[^.]*))?)?)?\")\n+            .matcher(version);\n+\n+    if (matcher.find()) {\n+      m_major = Integer.parseInt(matcher.group(1));\n+      m_minor = Optional.ofNullable(matcher.group(2)).map(Integer::valueOf).orElse(0);\n+      m_point = Optional.ofNullable(matcher.group(3)).map(Integer::valueOf).orElse(0);\n+      final String microString = matcher.group(4);\n+      m_micro =\n+          \"dev\".equals(microString)\n+              ? Integer.MAX_VALUE\n+              : Optional.ofNullable(microString).map(Integer::valueOf).orElse(0);\n+      return;\n+    }\n+    throw new IllegalArgumentException(\"Invalid version String: \" + version);\n+  }\n+\n+  /**\n+   * Returns the exact and full version number. For example, if we specify: <code>\n+   * new Version(1.2.3.4.5).getMicro == 4; // true\n+   * new Version(1.2.3.4.5).toString().equals(\"1.2.3.4\"); // true\n+   * new Version(1.2.3.4.5).getExactVersion.equals(\"1.2.3.4.5\"); // true\n+   * </code>\n+   */\n+  public String getExactVersion() {\n+    // in case of deserialization, exactVersion may be null, in which case toString() it.\n+    return exactVersion != null ? exactVersion : toString();\n+  }\n+\n+  /** Returns the major version number. */\n+  public int getMajor() {\n+    return m_major;\n+  }\n+\n+  /** Returns the minor version number. */\n+  public int getMinor() {\n+    return m_minor;\n+  }\n+\n+  /** Returns the point version number. */\n+  public int getPoint() {\n+    return m_point;\n+  }\n+\n+  /** Returns the micro version number. */\n+  public int getMicro() {\n+    return m_micro;\n+  }\n+\n+  @Override\n+  public boolean equals(final @Nullable Object o) {\n+    return o instanceof Version && compareTo((Version) o) == 0;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(m_major, m_minor, m_point, m_micro);\n+  }\n+\n+  @Override\n+  public int compareTo(final Version other) {\n+    checkNotNull(other);\n+\n+    return Comparator.comparingInt(Version::getMajor)\n+        .thenComparingInt(Version::getMinor)\n+        .thenComparingInt(Version::getPoint)\n+        .thenComparingInt(Version::getMicro)\n+        .compare(this, other);\n+  }\n+\n+  /**\n+   * Indicates this version is greater than the specified version.\n+   *\n+   * @param other The version to compare.\n+   * @return {@code true} if this version is greater than the specified version; otherwise {@code\n+   *     false}.\n+   */\n+  public boolean isGreaterThan(final Version other) {\n+    checkNotNull(other);\n+\n+    return compareTo(other) > 0;\n+  }\n+\n+  /**\n+   * Indicates this version is greater than or equal to the specified version.\n+   *\n+   * @param other The version to compare.\n+   * @return {@code true} if this version is greater than or equal to the specified version;\n+   *     otherwise {@code false}.\n+   */\n+  public boolean isGreaterThanOrEqualTo(final Version other) {\n+    checkNotNull(other);\n+\n+    return compareTo(other) >= 0;\n+  }\n+\n+  /**\n+   * Indicates this version is less than the specified version.\n+   *\n+   * @param other The version to compare.\n+   * @return {@code true} if this version is less than the specified version; otherwise {@code\n+   *     false}.\n+   */\n+  public boolean isLessThan(final Version other) {\n+    checkNotNull(other);\n+\n+    return compareTo(other) < 0;\n+  }\n+\n+  /**\n+   * Returns a new version with the major, minor, and point versions from this instance and the\n+   * specified micro version.\n+   */\n+  public Version withMicro(final int micro) {\n+    return new Version(m_major, m_minor, m_point, micro);\n+  }", "originalCommit": "2b986558d428cb8b387baf829478e6e21bb658f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4OTM1Mw==", "url": "https://github.com/triplea-game/triplea/pull/6002#discussion_r389089353", "bodyText": "Not willing to modify this.\n\nWould like diffs to be minimal\nWaste of time reviewing changes here and equally responding to any potential feedback, and I would be lost for words if we introduced any further problems and then had to spend yet more time on that. We need to value our time highly, and keep that in mind when considering our review bar and how much stuff we need to get done. Failures is an option, the community is shrinking, there are new alternatives for players being made, we need to get stuff done.\n\n\nJust because it's deprecated doesn't mean people won't actually try to use it\n\nBy that reasoning, folks might try to append to it as well. Hopefully the big strike-through makes it clear this is deprecated.", "author": "DanVanAtta", "createdAt": "2020-03-06T19:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDcxNg=="}], "type": "inlineReview"}, {"oid": "3fbfa9023595b227c04e213800a3734d4203399d", "url": "https://github.com/triplea-game/triplea/commit/3fbfa9023595b227c04e213800a3734d4203399d", "message": "Mark method as returning nullable", "committedDate": "2020-03-06T18:58:44Z", "type": "commit"}, {"oid": "8e794f440956c72500484b404444571e8aa067db", "url": "https://github.com/triplea-game/triplea/commit/8e794f440956c72500484b404444571e8aa067db", "message": "Narrow \"exceptionRef\" generic type", "committedDate": "2020-03-06T19:02:55Z", "type": "commit"}, {"oid": "085753339031f33e88c274cd80977f8d0874166e", "url": "https://github.com/triplea-game/triplea/commit/085753339031f33e88c274cd80977f8d0874166e", "message": "Change thrown exception type to \"IllegalStateException\"", "committedDate": "2020-03-07T01:54:33Z", "type": "commit"}]}