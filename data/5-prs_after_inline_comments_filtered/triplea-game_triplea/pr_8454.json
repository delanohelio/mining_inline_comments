{"pr_number": 8454, "pr_title": "Create a \"ai\" project for ai code", "pr_createdAt": "2020-12-19T01:19:48Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8454", "timeline": [{"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "url": "https://github.com/triplea-game/triplea/commit/b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "message": "Create a \"game-ai\" project for ai code\n\nUpdated the PlayerType so that it is no longer an enum but stores a list\nof types.  Added a Service Provider so that the game-ai can register ai\nplayers and game-core will see them and add them to the list of\nPlayerType.\n\nAdded a stub for a new AI called flowfield that is in the game-ai\nproject.", "committedDate": "2020-12-19T01:47:29Z", "type": "commit"}, {"oid": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "url": "https://github.com/triplea-game/triplea/commit/b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "message": "Create a \"game-ai\" project for ai code\n\nUpdated the PlayerType so that it is no longer an enum but stores a list\nof types.  Added a Service Provider so that the game-ai can register ai\nplayers and game-core will see them and add them to the list of\nPlayerType.\n\nAdded a stub for a new AI called flowfield that is in the game-ai\nproject.", "committedDate": "2020-12-19T01:47:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzQ0Mw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546277443", "bodyText": "Injections is mean to be very much a roll-your-own dependency injection framework. A framework like Dagger or Spring or Guice were voted down in favor of not having one some long time ago, yet DI is useful specifically for being able to have top level projects inject configuration into lower level layers. That is the background for how it is intended to be used.\nWith that context, I think Injections should own the full playerTypes list. As-is, we have an existing list of player types and then we append to that list from injections, which spreads the ownership around. I would envision that injections would have exactly the above PlayerTypes.add(..) code and would then be able to include the flow-field AI. Then any usages of injections simply needs to call 'injections.getPlayerTypes()'.\nIdeally we would avoid the static dependency and try to keep the imperative shell, any outer-layer code in control of injections and then follow DI to pass the player types object to the method or class that needs it when we instantiate it.\nDoes that make sense? Any thoughts to changing this towards that goal, any hidden problems with that?", "author": "DanVanAtta", "createdAt": "2020-12-19T20:06:04Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/PlayerTypes.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package games.strategy.engine.framework.startup.ui;\n+\n+import games.strategy.engine.player.Player;\n+import games.strategy.triplea.TripleAPlayer;\n+import games.strategy.triplea.ai.AiProvider;\n+import games.strategy.triplea.ai.fast.FastAi;\n+import games.strategy.triplea.ai.pro.ProAi;\n+import games.strategy.triplea.ai.weak.DoesNothingAi;\n+import games.strategy.triplea.ai.weak.WeakAi;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+import org.triplea.injection.Injections;\n+\n+@Value\n+public class PlayerTypes {\n+\n+  public static final Type HUMAN_PLAYER =\n+      new Type(\"Human\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return HUMAN_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  public static final Type WEAK_AI =\n+      new Type(\"Easy (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new WeakAi(name);\n+        }\n+      };\n+  public static final Type FAST_AI =\n+      new Type(\"Fast (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new FastAi(name);\n+        }\n+      };\n+  public static final Type PRO_AI =\n+      new Type(\"Hard (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new ProAi(name);\n+        }\n+      };\n+  public static final Type DOES_NOTHING_AI =\n+      new Type(\"Does Nothing (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new DoesNothingAi(name);\n+        }\n+      };\n+  /** A hidden player type to represent network connected players. */\n+  public static final Type CLIENT_PLAYER =\n+      new Type(\"Client\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return CLIENT_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  /** A 'dummy' player type used for battle calc. */\n+  public static final Type BATTLE_CALC_DUMMY =\n+      new Type(\"None (AI)\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          throw new UnsupportedOperationException(\n+              \"Fail fast - bad configuration, should instantiate dummy player \"\n+                  + \"type only for battle calc\");\n+        }\n+      };\n+\n+  Collection<Type> playerTypes = new ArrayList<>();\n+\n+  public PlayerTypes() {\n+    playerTypes.add(HUMAN_PLAYER);\n+    playerTypes.add(WEAK_AI);\n+    playerTypes.add(FAST_AI);\n+    playerTypes.add(PRO_AI);\n+    playerTypes.add(DOES_NOTHING_AI);\n+    playerTypes.add(CLIENT_PLAYER);\n+    playerTypes.add(BATTLE_CALC_DUMMY);\n+\n+    final Injections injection = Injections.getInstance();", "originalCommit": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI5NjQ3NQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546296475", "bodyText": "Injections now stores all of the player types.  It is still passing them into PlayerTypes when used.  Do you want me to change those to static methods?  I could do that as well.", "author": "trevan", "createdAt": "2020-12-19T23:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODg0NQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546308845", "bodyText": "It is still passing them into PlayerTypes when used.\nHow do you mean? I think anything that uses PlayerTypes should have it constructor injected. This avoids any tests from having to be aware of Injections and avoids any client of injected values from knowing how the values are injected as well.", "author": "DanVanAtta", "createdAt": "2020-12-20T02:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTA0NA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546315044", "bodyText": "PlayerTypes is now really a bunch of utility methods.  So it could be changed back to static methods.", "author": "trevan", "createdAt": "2020-12-20T03:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzU3OA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546277578", "bodyText": "injections should always be non-null. While it can be null, we should be instantiating as early as possible in any main method.", "author": "DanVanAtta", "createdAt": "2020-12-19T20:07:08Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/ui/PlayerTypes.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package games.strategy.engine.framework.startup.ui;\n+\n+import games.strategy.engine.player.Player;\n+import games.strategy.triplea.TripleAPlayer;\n+import games.strategy.triplea.ai.AiProvider;\n+import games.strategy.triplea.ai.fast.FastAi;\n+import games.strategy.triplea.ai.pro.ProAi;\n+import games.strategy.triplea.ai.weak.DoesNothingAi;\n+import games.strategy.triplea.ai.weak.WeakAi;\n+import games.strategy.triplea.settings.ClientSetting;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Value;\n+import org.triplea.injection.Injections;\n+\n+@Value\n+public class PlayerTypes {\n+\n+  public static final Type HUMAN_PLAYER =\n+      new Type(\"Human\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return HUMAN_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  public static final Type WEAK_AI =\n+      new Type(\"Easy (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new WeakAi(name);\n+        }\n+      };\n+  public static final Type FAST_AI =\n+      new Type(\"Fast (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new FastAi(name);\n+        }\n+      };\n+  public static final Type PRO_AI =\n+      new Type(\"Hard (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new ProAi(name);\n+        }\n+      };\n+  public static final Type DOES_NOTHING_AI =\n+      new Type(\"Does Nothing (AI)\") {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new DoesNothingAi(name);\n+        }\n+      };\n+  /** A hidden player type to represent network connected players. */\n+  public static final Type CLIENT_PLAYER =\n+      new Type(\"Client\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          return new TripleAPlayer(name) {\n+            @Override\n+            public Type getPlayerType() {\n+              return CLIENT_PLAYER;\n+            }\n+          };\n+        }\n+      };\n+  /** A 'dummy' player type used for battle calc. */\n+  public static final Type BATTLE_CALC_DUMMY =\n+      new Type(\"None (AI)\", false) {\n+        @Override\n+        public Player newPlayerWithName(final String name) {\n+          throw new UnsupportedOperationException(\n+              \"Fail fast - bad configuration, should instantiate dummy player \"\n+                  + \"type only for battle calc\");\n+        }\n+      };\n+\n+  Collection<Type> playerTypes = new ArrayList<>();\n+\n+  public PlayerTypes() {\n+    playerTypes.add(HUMAN_PLAYER);\n+    playerTypes.add(WEAK_AI);\n+    playerTypes.add(FAST_AI);\n+    playerTypes.add(PRO_AI);\n+    playerTypes.add(DOES_NOTHING_AI);\n+    playerTypes.add(CLIENT_PLAYER);\n+    playerTypes.add(BATTLE_CALC_DUMMY);\n+\n+    final Injections injection = Injections.getInstance();\n+    if (injection != null) {", "originalCommit": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI5NjUwNg==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546296506", "bodyText": "Injections is null during tests.", "author": "trevan", "createdAt": "2020-12-19T23:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODc1OA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546308758", "bodyText": "This is moot now right?", "author": "DanVanAtta", "createdAt": "2020-12-20T02:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNTA1Mw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546315053", "bodyText": "The code has been removed.", "author": "trevan", "createdAt": "2020-12-20T03:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546277721", "bodyText": "Most AI is not going to be beta, and beta should be a relatively short thing in the long run. After we finish this AI we'll have years and years of no beta players. There is a 'isVisible' field on player type, can we use that to hide beta players?", "author": "DanVanAtta", "createdAt": "2020-12-19T20:08:32Z", "path": "game-ai/src/main/java/org/triplea/ai/flowfield/FlowFieldAiProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.triplea.ai.flowfield;\n+\n+import games.strategy.engine.framework.startup.ui.PlayerTypes;\n+import games.strategy.triplea.ai.AbstractAi;\n+import games.strategy.triplea.ai.AiProvider;\n+\n+public class FlowFieldAiProvider implements AiProvider {\n+  @Override\n+  public AbstractAi create(final String name, final PlayerTypes.AiType playerType) {\n+    return new FlowFieldAi(name, playerType);\n+  }\n+\n+  @Override\n+  public String getLabel() {\n+    return \"FlowField (AI)\";\n+  }\n+\n+  @Override\n+  public boolean isBetaPlayer() {", "originalCommit": "b2530e2eef7661cbea0db8efc17e6fd2e660f36d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI5NjYwMw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546296603", "bodyText": "The isBetaPlayer is converted into the isVisible field after checking the beta features flag.  Renaming it to isVisible has the same problems as what you mentioned.  It will be \"invisible\" for a relatively short time and then years and years of being visible.  So I didn't change the name but I can do that if you want.", "author": "trevan", "createdAt": "2020-12-19T23:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwOTA2OA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546309068", "bodyText": "Hmm. Interesting. I've had conversations with people who believe feature flags are an anti-pattern. This situation reminds me of those conversations.\nI do think we should avoid having specific APIs that change when a feature flag is removed. Ideally all that happens is an if block is removed and the else part of it is also deleted as it's no longer used.\nIf all player types come from when we instantiate 'injections', we should be able to feature flag filter flow-field at that time, right?", "author": "DanVanAtta", "createdAt": "2020-12-20T02:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwOTE5OQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546309199", "bodyText": "Though ClientSetting is part of game-core. It really should not be though. Without lifting ClientSettings into game-core we might have to do something kinda nasty to get the flagging right and have it live in game-headed...", "author": "DanVanAtta", "createdAt": "2020-12-20T02:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNjA2Mw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546316063", "bodyText": "Injections is instantiated before ClientSetting is setup.  So accessing ClientSetting during the Injections instantiation fails because it isn't setup.", "author": "trevan", "createdAt": "2020-12-20T03:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMzMTQ1NA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546331454", "bodyText": "AFAIK, client settings can be instantiated first. The init of it does not really depend on anything. Can we swap the order?\nSide-note: I've had thoughts we might want to migrate ClientSettings to be backed by a property file. It could lend to easier code and make the static initialization no longer a concern. It is something to think about how to do that more cleanly (it has scaled pretty well to some extent, though the static access and initialization, particularly in test are painful).", "author": "DanVanAtta", "createdAt": "2020-12-20T06:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwOTEzNA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546409134", "bodyText": "I just swapped the order and the game loaded.  I've pushed a change to remove beta ai when Injections is created.  This means that you have to quit the game after you change the beta flag to see changes to the list of players.", "author": "trevan", "createdAt": "2020-12-20T17:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3NzcyMQ=="}], "type": "inlineReview"}, {"oid": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b", "url": "https://github.com/triplea-game/triplea/commit/050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b", "message": "Rename game-ai to ai and add all player types to the injector", "committedDate": "2020-12-19T23:26:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546308159", "bodyText": "I think we need to try and avoid static coupling. That would mean to inject the 'playerTypes' as a constructor arg. This way only code that is instantiating the LocalLauncher is aware of Injections, but the code using the injected values is not aware of how it is injected.\nI have not researched what this would involve, this is a bit of a quick comment. Let me know what you think and if there are any serious issues with constructor injection.", "author": "DanVanAtta", "createdAt": "2020-12-20T01:59:20Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -63,7 +64,9 @@ public void launch() {\n       final Set<Player> gamePlayers =\n           gameData\n               .getGameLoader()\n-              .newPlayers(playerListing.getLocalPlayerTypeMap(new PlayerTypes()));\n+              .newPlayers(\n+                  playerListing.getLocalPlayerTypeMap(\n+                      new PlayerTypes(Injections.getInstance().getPlayerTypes())));", "originalCommit": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDk0OA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546314948", "bodyText": "I looked at passing around Injections and that is a massive change to the code base.  It would touch a lot of places.  I really don't want to do that as part of this PR.", "author": "trevan", "createdAt": "2020-12-20T03:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxODIzNQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546318235", "bodyText": "Injections should not be passed around. I do object to Injections being used in a static context (the javadoc on the class says to avoid using it like that).\nWhen an object uses Injections, it gets any data from Injections constructor injected. It should be no more of a massive change than what is already done. Instead of accessing 'Injections.getInsance().getPlayerTypes()' directly, pass the data to the constructor and it just becomes a constructor arg. Let me know if I'm missing something..", "author": "DanVanAtta", "createdAt": "2020-12-20T04:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxODY0Mw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546318643", "bodyText": "Injections should not be passed around and object to Injections being used in a static context are conflicting ideas to me.  If Injections aren't passed around, then you have to access them through a static context.  Can you explain how you access the Injections without passing them around and without accessing them through a static context?", "author": "trevan", "createdAt": "2020-12-20T04:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMzMTE0MA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546331140", "bodyText": "Example: new MyObject(Injections.getInstance().getData());\nWith:\n@AllArgsConstructor\nclass MyObject {\n  private final Data data;\n\n    void foo() {\n             data.doSomething();\n     }\n}\n\nvs:\nclass MyObject {\n\n    void foo() {\n             Injections.getInstance().getData().doSomething();\n     }\n}\n\nHopefully that clarifies through an example. A thing to note is in the first example the implementation of MyObject is not aware of Injections at all. Once we have that pattern, it is only a matter of keeping object creation clean (and paves the way to have the option of a clean bona fide IOC framework being dropped in to cleanly replace Injections)", "author": "DanVanAtta", "createdAt": "2020-12-20T06:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwOTMxNg==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546409316", "bodyText": "That's what I thought you meant.  And my concern is still valid: I looked at passing around Injections and that is a massive change to the code base..  I would still have to pass Injections class to all of the callers before new PlayerTypes is called.  That is a large change to the codebase.  There are a lot of callers and I'd be touching a good portion of the code path.  I don't think that fits in this PR.", "author": "trevan", "createdAt": "2020-12-20T18:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMDU0NQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546410545", "bodyText": "To give a brief example, this specific code is in LocalLauncher#loadGame.  I would have to modify LocalLauncher#loadGame to accept an Injections or a collection of PlayerTypes.  I would then need to modify LocalLauncher#launch to accept one or the other.  Since this is an Override method, I'd have to modify the parent method as well and any other Override versions.  I would then need to modify MainPanelBuilder#buildMainPanel to accept one or the other so that I could pass it into LocalLaunch#launch.  MainPanelBuilder#buildMainPanel is called from MainFrame#buildMainFrame so that would need to be modified.  And then its caller, GameRunner#start would also need to be modified.  The caller of GameRunner#start is HeadedGameRunner#main which is where Injections is initialized.\nSo, just for this one place where Injections.getPlayerTypes() is used, I'd need to modify at least 4 different classes as well as one parent class and any other child classes of it.  Injections.getPlayerTypes() is used 5 times so that is even more classes I'd have to modify.", "author": "trevan", "createdAt": "2020-12-20T18:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxMzgxOQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546413819", "bodyText": "That list is actually not unreasonable  \ud83d\ude01\nI'll work on this next step to help out.", "author": "DanVanAtta", "createdAt": "2020-12-20T18:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODU4NA==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546308584", "bodyText": "I was hoping we could have that explicit list of player types here.\nI'm surprised to see 'flow field' is not part of the built-in, which makes me wonder what built-in really means.", "author": "DanVanAtta", "createdAt": "2020-12-20T02:05:39Z", "path": "game-headed/src/main/java/org/triplea/game/client/HeadedGameRunner.java", "diffHunk": "@@ -103,10 +106,17 @@ public static void main(final String[] args) {\n   }\n \n   private static Injections constructInjections() {\n-    final ServiceLoader<AiProvider> loader = ServiceLoader.load(AiProvider.class);\n     return Injections.builder()\n         .engineVersion(new ProductVersionReader().getVersion())\n-        .aiProviders(StreamSupport.stream(loader.spliterator(), false).collect(Collectors.toList()))\n+        .playerTypes(gatherPlayerTypes())\n         .build();\n   }\n+\n+  private static Collection<PlayerTypes.Type> gatherPlayerTypes() {\n+    return Stream.concat(\n+            StreamSupport.stream(ServiceLoader.load(AiProvider.class).spliterator(), false)\n+                .map(PlayerTypes.AiType::new),\n+            PlayerTypes.getBuiltInPlayerTypes().stream())", "originalCommit": "050ce1cfb1bebb0742b632f17d3d1f5ba1bf6f2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxNDg2Mg==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546314862", "bodyText": "\"Built-in\" are players that are in \"game-core\".  They are handled slightly different from ai players in the \"ai\" project.", "author": "trevan", "createdAt": "2020-12-20T03:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxODM3Mw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546318373", "bodyText": "Could you explain why and how they are handled slightly different? ProAI AFAIK and DoNothing should be things we can migrate into the ai subproject. The other ones are magic and would be deleted once we've fixed up game-core to not depend on AIs for core logic.", "author": "DanVanAtta", "createdAt": "2020-12-20T04:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMxODkwNQ==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546318905", "bodyText": "They can at some point be migrated to the ai subproject.  But until that is done, they have to be treated differently from the flowfield ai because of how the PlayerTypes.Type is built for them.", "author": "trevan", "createdAt": "2020-12-20T04:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMzMTE3Nw==", "url": "https://github.com/triplea-game/triplea/pull/8454#discussion_r546331177", "bodyText": "Okay, I'll see if I can work on this at some point to improve it further, until now I think we can both see the objective but it's not necessarily feasible to get there right away.", "author": "DanVanAtta", "createdAt": "2020-12-20T06:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwODU4NA=="}], "type": "inlineReview"}, {"oid": "0241218c45bdde5795f8767e4729f317fc1ca608", "url": "https://github.com/triplea-game/triplea/commit/0241218c45bdde5795f8767e4729f317fc1ca608", "message": "Merge remote-tracking branch 'upstream/master' into flow-field-ai", "committedDate": "2020-12-20T17:50:16Z", "type": "commit"}, {"oid": "579a1fc0ada021d11810dbc54e875c7f036a3ec0", "url": "https://github.com/triplea-game/triplea/commit/579a1fc0ada021d11810dbc54e875c7f036a3ec0", "message": "Remove beta players when client starts if beta flag is false", "committedDate": "2020-12-20T17:56:48Z", "type": "commit"}]}