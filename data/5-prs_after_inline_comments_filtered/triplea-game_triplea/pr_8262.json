{"pr_number": 8262, "pr_title": "Create BombingUnitDamageChange that uses primitives", "pr_createdAt": "2020-11-25T01:49:25Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8262", "timeline": [{"oid": "1a0484e2de95f8b60b1483f87f8664d8342b2774", "url": "https://github.com/triplea-game/triplea/commit/1a0484e2de95f8b60b1483f87f8664d8342b2774", "message": "Create BombingUnitDamageChange that uses primitives\n\nThe old BombingUnitDamageChange is marked as deprecated and will stay\naround solely for loading old saves.\n\nThe new BombingUnitDamageChange also has been modified to accept the\nterritory that needs to be notified, instead of looping through all the\ngame territories during the change process.", "committedDate": "2020-11-24T21:25:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzMzMw==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530743333", "bodyText": "What is undo hits representing?", "author": "DanVanAtta", "createdAt": "2020-11-26T02:47:17Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/BombingUnitDamageChange.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/**\n+ * A game data change that captures the damage caused to a collection of units by a bombing attack.\n+ */\n+public class BombingUnitDamageChange extends Change {\n+  private static final long serialVersionUID = 7093658184880237574L;\n+  private final IntegerMap<String> hits;\n+  private final IntegerMap<String> undoHits;", "originalCommit": "1a0484e2de95f8b60b1483f87f8664d8342b2774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NTA0MQ==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530745041", "bodyText": "undoHits represents the inverse of what is happening in this change.  Each change object has an \"undo\" version of it.", "author": "trevan", "createdAt": "2020-11-26T02:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NjMyOQ==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530746329", "bodyText": "The change objects call it \"invert\".  You can see it being used in the invert method.", "author": "trevan", "createdAt": "2020-11-26T02:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MDcyNQ==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530780725", "bodyText": "What would you think to rename:\n'hits' -> 'newHits' | 'hitsAfterChange'\n'undoHits' -> 'oldHits' | 'hitsBeforeChange' | 'originalHits'\nIt looks like other change objects use 'new' & 'old' for naming. The 'undoHits' is not the best name, not really clear whether it is the original hits or a delta to compute the original hits.", "author": "DanVanAtta", "createdAt": "2020-11-26T05:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzQ3OA==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530743478", "bodyText": "Any thoughts to use an @AllArgsConstructor(visibility = AccessLevel.PRIVATE) here to avoid the manually written out constructor?", "author": "DanVanAtta", "createdAt": "2020-11-26T02:47:56Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/BombingUnitDamageChange.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/**\n+ * A game data change that captures the damage caused to a collection of units by a bombing attack.\n+ */\n+public class BombingUnitDamageChange extends Change {\n+  private static final long serialVersionUID = 7093658184880237574L;\n+  private final IntegerMap<String> hits;\n+  private final IntegerMap<String> undoHits;\n+  private final Collection<String> territoriesToNotify;\n+\n+  private BombingUnitDamageChange(", "originalCommit": "1a0484e2de95f8b60b1483f87f8664d8342b2774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NTQxOA==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530745418", "bodyText": "I could.  This is just copied code so I didn't make any major changes except the non-primitive -> primitive change.", "author": "trevan", "createdAt": "2020-11-26T02:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3OTc0MQ==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530779741", "bodyText": "Moving code is one thing, in this case we are re-writing and in my 2 cents treat this is as new code.", "author": "DanVanAtta", "createdAt": "2020-11-26T05:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MzQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0Mzk4Ng==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530743986", "bodyText": "Is the 'toString' required? Is it used anywhere to print text for users? If not, is it helpful?", "author": "DanVanAtta", "createdAt": "2020-11-26T02:50:09Z", "path": "game-core/src/main/java/games/strategy/engine/data/changefactory/units/BombingUnitDamageChange.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package games.strategy.engine.data.changefactory.units;\n+\n+import games.strategy.engine.data.Change;\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.Territory;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/**\n+ * A game data change that captures the damage caused to a collection of units by a bombing attack.\n+ */\n+public class BombingUnitDamageChange extends Change {\n+  private static final long serialVersionUID = 7093658184880237574L;\n+  private final IntegerMap<String> hits;\n+  private final IntegerMap<String> undoHits;\n+  private final Collection<String> territoriesToNotify;\n+\n+  private BombingUnitDamageChange(\n+      final IntegerMap<String> hits,\n+      final IntegerMap<String> undoHits,\n+      final Collection<String> territoriesToNotify) {\n+    this.hits = hits;\n+    this.undoHits = undoHits;\n+    this.territoriesToNotify = territoriesToNotify;\n+  }\n+\n+  public BombingUnitDamageChange(\n+      final IntegerMap<Unit> hits, final Collection<Territory> territoriesToNotify) {\n+    this.hits = new IntegerMap<>();\n+    this.undoHits = new IntegerMap<>();\n+    hits.entrySet()\n+        .forEach(\n+            entry -> {\n+              this.hits.put(entry.getKey().getId().toString(), entry.getValue());\n+              this.undoHits.put(entry.getKey().getId().toString(), entry.getKey().getUnitDamage());\n+            });\n+    this.territoriesToNotify =\n+        territoriesToNotify.stream().map(Territory::getName).collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  protected void perform(final GameData data) {\n+    hits.keySet()\n+        .forEach(\n+            unitId -> {\n+              data.getUnits().get(UUID.fromString(unitId)).setUnitDamage(hits.getInt(unitId));\n+            });\n+    this.territoriesToNotify.forEach(\n+        territory -> {\n+          data.getMap().getTerritory(territory).notifyChanged();\n+        });\n+  }\n+\n+  @Override\n+  public Change invert() {\n+    return new BombingUnitDamageChange(undoHits, hits, territoriesToNotify);\n+  }\n+\n+  @Override\n+  public String toString() {", "originalCommit": "1a0484e2de95f8b60b1483f87f8664d8342b2774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0NTQ3Ng==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530745476", "bodyText": "No idea.  Several change objects have a toString.  Several don't.", "author": "trevan", "createdAt": "2020-11-26T02:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0Mzk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4MTIzMg==", "url": "https://github.com/triplea-game/triplea/pull/8262#discussion_r530781232", "bodyText": "A lot of 'toStrings' are included to help debugging in Eclipse that used to show the 'toString' of an object when in debug. That was before when you could inspect the values of an object and you'd see just the 'toString' value.\nIf you play a game with a break-point in this method you'll probably be able to determine if this is dead code relatively quickly. IMO we should not be porting dead-code into new code if we can help it. When we do a new release I don't think we'll want to go back and do any clean up beyond carefully deleting that which is marked for deletion.", "author": "DanVanAtta", "createdAt": "2020-11-26T05:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0Mzk4Ng=="}], "type": "inlineReview"}, {"oid": "8b804681bb4325aaaa8ba889f1a025181aef7428", "url": "https://github.com/triplea-game/triplea/commit/8b804681bb4325aaaa8ba889f1a025181aef7428", "message": "Use AllArgsConstructor", "committedDate": "2020-11-26T02:59:51Z", "type": "commit"}, {"oid": "cebc132129b38b8aa65d4547e1822526fe7ade02", "url": "https://github.com/triplea-game/triplea/commit/cebc132129b38b8aa65d4547e1822526fe7ade02", "message": "Rename variables and add comments", "committedDate": "2020-11-26T18:13:53Z", "type": "commit"}]}