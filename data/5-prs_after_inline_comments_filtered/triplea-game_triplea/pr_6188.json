{"pr_number": 6188, "pr_title": "Add op code test", "pr_createdAt": "2020-04-11T14:37:56Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6188", "timeline": [{"oid": "53a5d2334431c68285a8eaa8163e9ab690a6a6bb", "url": "https://github.com/triplea-game/triplea/commit/53a5d2334431c68285a8eaa8163e9ab690a6a6bb", "message": "Add test case for op-codes", "committedDate": "2020-04-11T13:55:50Z", "type": "commit"}, {"oid": "ade5cd522ae9d18b07a466737de10d7d8d6ab6e9", "url": "https://github.com/triplea-game/triplea/commit/ade5cd522ae9d18b07a466737de10d7d8d6ab6e9", "message": "Remove non-existing method from dataset", "committedDate": "2020-04-11T13:57:36Z", "type": "commit"}, {"oid": "a0eacdde0c7cc3dd8d18649076094592c7995ec8", "url": "https://github.com/triplea-game/triplea/commit/a0eacdde0c7cc3dd8d18649076094592c7995ec8", "message": "Move logic to aggregator", "committedDate": "2020-04-11T14:10:58Z", "type": "commit"}, {"oid": "c5ed015cc6140776571f8f8bc2dc7f915991cf25", "url": "https://github.com/triplea-game/triplea/commit/c5ed015cc6140776571f8f8bc2dc7f915991cf25", "message": "Remove unwanted methods by hand", "committedDate": "2020-04-11T14:28:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTU3OA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407071578", "bodyText": "This is kind of overkill, but I just learned about this awesome JUnit feature today so I had to try it, and it keeps the actual test code really clean IMO", "author": "RoiEXLab", "createdAt": "2020-04-11T14:40:42Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(\n+        final ArgumentsAccessor arguments, final ParameterContext context)\n+        throws ArgumentsAggregationException {\n+      final int offset = context.getIndex();\n+      final Class<?> clazz = arguments.get(offset, Class.class);\n+      final String methodName = arguments.getString(offset + 1);\n+      final Class<?>[] args =\n+          IntStream.range(offset + 2, arguments.size())\n+              .mapToObj(i -> arguments.get(i, Class.class))\n+              .toArray(Class<?>[]::new);\n+      try {\n+        return clazz.getMethod(methodName, args);\n+      } catch (final NoSuchMethodException e) {\n+        throw new ArgumentsAggregationException(\"Invalid method specified\", e);\n+      }\n+    }", "originalCommit": "c5ed015cc6140776571f8f8bc2dc7f915991cf25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTc0MA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407071740", "bodyText": "The reason strings are not really required here, but for some reason my IntelliJ doesn't display the \"correct\" method name that includes the parameters toString info.", "author": "RoiEXLab", "createdAt": "2020-04-11T14:42:46Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));", "originalCommit": "c5ed015cc6140776571f8f8bc2dc7f915991cf25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "url": "https://github.com/triplea-game/triplea/commit/2834ed24cf9e5a67779c189beb56dc1a00d38e75", "message": "Make variable final", "committedDate": "2020-04-11T20:37:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTIxMg==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109212", "bodyText": "var is perhaps confusing here, I'm not offhand 100% sure what the return type is of getAnnotation. I think it is probably Class, but not fully evident. Perhaps if the variable name were remoteActionCodeClass, it would be clear and would not benefit from type information.", "author": "DanVanAtta", "createdAt": "2020-04-11T20:46:38Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);", "originalCommit": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM1Nw==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109357", "bodyText": "Why is this expected to be true? Can that be clarified in the assertion comment somehow perhaps?\nPerhaps we can rephrase to say something like \"Expected an annotation to present on method:  \"  + method, it's generally clearer to explain what and why you were expected rather than to rephrase the error condition. EG: result was not 4 vs Expected 2+2 to be 4", "author": "DanVanAtta", "createdAt": "2020-04-11T20:48:10Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));", "originalCommit": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDU0MA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407110540", "bodyText": "Well Method#getAnnotation(Class) returns null if no annotation of the specified type is available on the method.\nThe tests set obviously only contains the methods that are being used over the network, so they are required to have this annotation.\nPerhaps it would help if we said Method %s not annotated with @RemoteActionCode?", "author": "RoiEXLab", "createdAt": "2020-04-11T21:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMjc2NA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407112764", "bodyText": "The tests set obviously only contains the methods that are being used over the network, so they are required to have this annotation.\n\nI think that might depend on the maintainers context, revisiting this at first, that may not obvious until you spend some time investigating that. Telling a maintainer directly that to begin with saves time, makes code more scalable as this could be one of a dozen tests or tasks that a person has to go through.\nThe updated message example is an improvement, I like it \ud83d\udc4d", "author": "DanVanAtta", "createdAt": "2020-04-11T21:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTYyMA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109620", "bodyText": "What kind of class is this expected to be? Is it an annotated one with the remote method number? Perhaps would be more clear as something like RemoteMethodAnnotatedClass", "author": "DanVanAtta", "createdAt": "2020-04-11T20:50:57Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(\n+        final ArgumentsAccessor arguments, final ParameterContext context)\n+        throws ArgumentsAggregationException {\n+      final int offset = context.getIndex();\n+      final Class<?> clazz = arguments.get(offset, Class.class);", "originalCommit": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDg4OQ==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407110889", "bodyText": "Classes are never annotated with this annotation, only methods of interfaces are.\nThe class in question is an arbitrary subinterface of IRemote or IChannelSubscriber, containing methods that are annotated with the annotation.\nI originally wanted to call it interface, but that's a reserved keyword too.", "author": "RoiEXLab", "createdAt": "2020-04-11T21:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMjgwNQ==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407112805", "bodyText": "Perhaps rename to  InterfaceWithRemoteMethods?", "author": "DanVanAtta", "createdAt": "2020-04-11T21:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTY5Nw==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109697", "bodyText": "Can this offset variable be clarified a bit more, what are we offsetting from? It might be possible to rename the variable, or some inline commentary could help explain it.", "author": "DanVanAtta", "createdAt": "2020-04-11T20:51:56Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(\n+        final ArgumentsAccessor arguments, final ParameterContext context)\n+        throws ArgumentsAggregationException {\n+      final int offset = context.getIndex();", "originalCommit": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMjAyMA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407112020", "bodyText": "It's a bit hard to explain. Basically ArgumentsAccessor has access to the Arguments that could be passed to a specific method but the opcode (the first column in our csv file) has nothing to do with the actual method.\nWe could hardcode this offset to be 1 (so we ignore the first column of the csv) but because we already \"consume\" this parameter by explicitly declaring it in the test method I thought it would make sense to just ignore as many columns as there are parameters before Method.\nMight be confusing, but I hope this helps a little bit:\nvoid verifyCorrectOpCode(/* parameter context index 0*/final int opCode, @AggregateWith(MethodAggregator.class) /* parameter context index 1*/final Method method) { /* Test code */}\n\n// What argumentsAccessor holds, based off csv content:\narguments.getInt(0); // Op code\narguments.get(1, Class.class); // Subinterface of IRemote of IChannelSubscriber\narguments.getString(2); // method name\n\narguments.get(3, Class.class); // start method parameter types\n.\n.\n.\narguments.get(arguments.size() - 1, Class.class); // end method parameter types", "author": "RoiEXLab", "createdAt": "2020-04-11T21:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMjkxMA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407112910", "bodyText": "Can we move this clarification into the code somehow? It's always very sad when you have to look at the date of a merge to find a PR to then read comments to understand the code you're looking at.", "author": "DanVanAtta", "createdAt": "2020-04-11T21:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTc3OA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407109778", "bodyText": "It seems like a javadoc could really help here. Ideally it would set up expectations for reading the method to help guide understanding and/or make reading the method just not needed to know what we expect to get back when calling this method.", "author": "DanVanAtta", "createdAt": "2020-04-11T20:52:56Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package games.strategy.engine.message;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.lang.reflect.Method;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.aggregator.AggregateWith;\n+import org.junit.jupiter.params.aggregator.ArgumentsAccessor;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;\n+import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n+import org.junit.jupiter.params.provider.CsvFileSource;\n+\n+public class RemoteActionCodeTest {\n+\n+  @ParameterizedTest\n+  @CsvFileSource(resources = \"/required-op-codes.txt\")\n+  void verifyCorrectOpCode(\n+      final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n+    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+\n+    assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n+\n+    assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n+  }\n+\n+  static class MethodAggregator implements ArgumentsAggregator {\n+    @Override\n+    public Method aggregateArguments(", "originalCommit": "2834ed24cf9e5a67779c189beb56dc1a00d38e75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "60c37fe5ed161256191c4dd6da9eba9836b44ac2", "url": "https://github.com/triplea-game/triplea/commit/60c37fe5ed161256191c4dd6da9eba9836b44ac2", "message": "Add documentation", "committedDate": "2020-04-11T21:40:16Z", "type": "commit"}, {"oid": "6317fb01e3bc7f4b65b39efaadbd1da3a809b979", "url": "https://github.com/triplea-game/triplea/commit/6317fb01e3bc7f4b65b39efaadbd1da3a809b979", "message": "Rename file to clarify csv format", "committedDate": "2020-04-11T21:41:14Z", "type": "commit"}, {"oid": "e746fc1a245416c69377f2f205c2ed75126c55fd", "url": "https://github.com/triplea-game/triplea/commit/e746fc1a245416c69377f2f205c2ed75126c55fd", "message": "Update test failure message", "committedDate": "2020-04-11T21:45:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDQ3OQ==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407114479", "bodyText": "nit, can probably omit \"due to some random change\", it's not 100% informative. You could perhaps give examples of what such changes would be, otherwise shorter and more information dense is perhaps better.", "author": "DanVanAtta", "createdAt": "2020-04-11T21:48:23Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -14,33 +14,53 @@\n import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n import org.junit.jupiter.params.provider.CsvFileSource;\n \n+/**\n+ * Test class that verifies that remote operation codes didn't change unexpectedly due to some\n+ * random change.", "originalCommit": "60c37fe5ed161256191c4dd6da9eba9836b44ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNTIzNw==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407115237", "bodyText": "I agree that \"some random change\" is kinda slang at this point.\nWhat I wanted to express is that if you do some refactoring and mess with the interface structure, you might end up overriding another method unintentionally which could change the codes.\nOr in case you change the codes on purpose, you need to consider updating the test cases as well.\nAny suggestions on how to rephrase th sentence?", "author": "RoiEXLab", "createdAt": "2020-04-11T21:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNjkxOQ==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407116919", "bodyText": "* Test class that verifies that remote operation codes didn't change unexpectedly. This can happen for a number of reasons, eg:\n* - interface structure changed by overriding a method and changing the opcode that way\n* - ...\n\n\nOr in case you change the codes on purpose, you need to consider updating the test cases as well.\n\nThat likely could be a  warning/comment on the annotation.", "author": "DanVanAtta", "createdAt": "2020-04-11T22:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDUzNQ==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407114535", "bodyText": "A similar kind of comment is probably good to have on the annotation itself, to tell a person who is exploring adding that annotation to look here to add it to a test.", "author": "DanVanAtta", "createdAt": "2020-04-11T21:49:00Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -14,33 +14,53 @@\n import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n import org.junit.jupiter.params.provider.CsvFileSource;\n \n+/**\n+ * Test class that verifies that remote operation codes didn't change unexpectedly due to some\n+ * random change.\n+ *\n+ * <p>Please update {@code /required-op-codes.txt} accordingly in case the remote interfaces are", "originalCommit": "60c37fe5ed161256191c4dd6da9eba9836b44ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNTMyMQ==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407115321", "bodyText": "I'm always a bit hesitant to make references to tests in non-test code, but a small note won't hurt", "author": "RoiEXLab", "createdAt": "2020-04-11T21:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNDU3NA==", "url": "https://github.com/triplea-game/triplea/pull/6188#discussion_r407114574", "bodyText": "\ud83d\udc4d", "author": "DanVanAtta", "createdAt": "2020-04-11T21:49:20Z", "path": "game-core/src/test/java/games/strategy/engine/message/RemoteActionCodeTest.java", "diffHunk": "@@ -14,33 +14,53 @@\n import org.junit.jupiter.params.aggregator.ArgumentsAggregator;\n import org.junit.jupiter.params.provider.CsvFileSource;\n \n+/**\n+ * Test class that verifies that remote operation codes didn't change unexpectedly due to some\n+ * random change.\n+ *\n+ * <p>Please update {@code /required-op-codes.txt} accordingly in case the remote interfaces are\n+ * ever altered. All lines in {@code /required-op-codes.txt} must follow the scheme:\n+ *\n+ * <p>{@code op-code,interface-name,method-name,method-param-type-0,...,method-param-type-n}\n+ */\n public class RemoteActionCodeTest {\n \n   @ParameterizedTest\n   @CsvFileSource(resources = \"/required-op-codes.txt\")\n   void verifyCorrectOpCode(\n       final int opCode, @AggregateWith(MethodAggregator.class) final Method method) {\n-    final var remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n+    final RemoteActionCode remoteActionCode = method.getAnnotation(RemoteActionCode.class);\n \n     assertThat(\"No annotation present for \" + method, remoteActionCode, is(notNullValue()));\n \n     assertThat(\"Invalid value for \" + method, remoteActionCode.value(), is(opCode));\n   }\n \n+  /**\n+   * Helper class that aggregates the fields found in the csv of test data to a {@link Method}. In\n+   * order for this to work as expected, the CSVs last n + 2 columns must follow the format:\n+   *\n+   * <p>{@code interface-name,method-name,method-param-type-0,...,method-param-type-n}\n+   *\n+   * <p>Note that due to the variable length of the type arguments\n+   * {@code @AggregateWith(MethodAggregator.class)} can only ever be used on the last parameter of a\n+   * test method to work properly, otherwise it might pickup the wrong arguments.\n+   */\n   static class MethodAggregator implements ArgumentsAggregator {", "originalCommit": "60c37fe5ed161256191c4dd6da9eba9836b44ac2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7e819391e21e3102999e667f8fa5b82a0adc130", "url": "https://github.com/triplea-game/triplea/commit/e7e819391e21e3102999e667f8fa5b82a0adc130", "message": "Reference unit test in non-test javadoc", "committedDate": "2020-04-11T22:02:32Z", "type": "commit"}, {"oid": "f6d2dba8077ad1a78b3dda50a7fc902d7cc07da5", "url": "https://github.com/triplea-game/triplea/commit/f6d2dba8077ad1a78b3dda50a7fc902d7cc07da5", "message": "Describe change better", "committedDate": "2020-04-11T22:03:51Z", "type": "commit"}]}