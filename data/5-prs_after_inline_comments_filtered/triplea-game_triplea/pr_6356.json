{"pr_number": 6356, "pr_title": "Simplify logging logic", "pr_createdAt": "2020-04-30T08:23:42Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6356", "timeline": [{"oid": "4a0cf0c0c5164b274b308c82337d04bc92353836", "url": "https://github.com/triplea-game/triplea/commit/4a0cf0c0c5164b274b308c82337d04bc92353836", "message": "Simplify logging logic", "committedDate": "2020-04-30T08:17:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTMwMw==", "url": "https://github.com/triplea-game/triplea/pull/6356#discussion_r418999303", "bodyText": "nit, we probably should avoid the word \"exception\" from being displayed to users. It makes enough sense, but it's not the typical parlance of a player, they're not developers. It is a odd that the audience for most exceptions/error message is not developers but players.", "author": "DanVanAtta", "createdAt": "2020-05-02T19:42:12Z", "path": "game-core/src/main/java/games/strategy/triplea/odds/calculator/ConcurrentBattleCalculator.java", "diffHunk": "@@ -262,52 +255,20 @@ public AggregateResults calculate(\n                           bombarding,\n                           territoryEffects,\n                           retreatWhenOnlyAirLeft,\n-                          currentWorkedRunCount));\n-          list.add(workerResult);\n+                          currentWorkedRunCount)));\n         }\n         runCount -= workerRunCount;\n       }\n       // Wait for all worker futures to complete and combine results\n       final AggregateResults results = new AggregateResults(totalRunCount);\n-      final Set<InterruptedException> interruptExceptions = new HashSet<>();\n-      final Map<String, Set<ExecutionException>> executionExceptions = new HashMap<>();\n       for (final Future<AggregateResults> future : list) {\n         try {\n           final AggregateResults result = future.get();\n           results.addResults(result.getResults());\n         } catch (final InterruptedException e) {\n           Thread.currentThread().interrupt();\n-          interruptExceptions.add(e);\n         } catch (final ExecutionException e) {\n-          final String cause = e.getCause().getLocalizedMessage();\n-          Set<ExecutionException> exceptions = executionExceptions.get(cause);\n-          if (exceptions == null) {\n-            exceptions = new HashSet<>();\n-          }\n-          exceptions.add(e);\n-          executionExceptions.put(cause, exceptions);\n-        }\n-      }\n-      // we don't want to scare the user with 8+ errors all for the same thing\n-      if (!interruptExceptions.isEmpty()) {\n-        log.log(\n-            Level.SEVERE,\n-            interruptExceptions.size() + \" Battle results workers interrupted\",\n-            interruptExceptions.iterator().next());\n-      }\n-      if (!executionExceptions.isEmpty()) {\n-        Exception e = null;\n-        for (final Set<ExecutionException> entry : executionExceptions.values()) {\n-          if (!entry.isEmpty()) {\n-            e = entry.iterator().next();\n-            log.log(\n-                Level.SEVERE,\n-                entry.size() + \" Battle results workers aborted by exception\",\n-                e.getCause());\n-          }\n-        }\n-        if (e != null) {\n-          throw new IllegalStateException(e.getCause());\n+          throw new IllegalStateException(\"Battle results workers aborted by exception\", e);", "originalCommit": "4a0cf0c0c5164b274b308c82337d04bc92353836", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}