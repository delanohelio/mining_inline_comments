{"pr_number": 5917, "pr_title": "JavaFX local game launcher", "pr_createdAt": "2020-02-08T22:40:44Z", "pr_url": "https://github.com/triplea-game/triplea/pull/5917", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczOTIyMg==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r376739222", "bodyText": "Method onShow has 45 lines of code (exceeds 25 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-02-08T22:43:55Z", "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screens/RoleSelection.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.properties.NumberProperty;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.triplea.Constants;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import lombok.extern.java.Log;\n+import org.triplea.game.client.ui.javafx.screen.ControlledScreen;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+@Log\n+public class RoleSelection implements ControlledScreen<ScreenController<FxmlManager>> {\n+\n+  static final String SELECTED_MAP_KEY = \"selectedMap\";\n+  private static final String DISABLE_TEXT = \"Disable\";\n+\n+  private final Map<GamePlayer, ComboBox<String>> roleForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> incomeForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> pusForPlayers = new HashMap<>();\n+\n+  @FXML private ComboBox<String> allSelectorCheckbox;\n+\n+  @FXML private GridPane factionGrid;\n+\n+  @FXML private VBox root;\n+\n+  @FXML private CheckBox resourceModifierCheckbox;\n+\n+  private ScreenController<FxmlManager> screenController;\n+  private GameData gameData;\n+\n+  @Override\n+  public void connect(final ScreenController<FxmlManager> screenController) {\n+    this.screenController = screenController;\n+  }\n+\n+  @Override\n+  public Node getNode() {\n+    return root;\n+  }\n+\n+  @FXML\n+  void initialize() {\n+    allSelectorCheckbox.getItems().setAll(PlayerType.playerTypes());\n+  }\n+\n+  @Override", "originalCommit": "4af8afd52c5590b2092e98d39cc1fc3e7a17c206", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczOTIyMw==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r376739223", "bodyText": "Method startGame has 26 lines of code (exceeds 25 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-02-08T22:43:56Z", "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screens/RoleSelection.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.properties.NumberProperty;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.triplea.Constants;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import lombok.extern.java.Log;\n+import org.triplea.game.client.ui.javafx.screen.ControlledScreen;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+@Log\n+public class RoleSelection implements ControlledScreen<ScreenController<FxmlManager>> {\n+\n+  static final String SELECTED_MAP_KEY = \"selectedMap\";\n+  private static final String DISABLE_TEXT = \"Disable\";\n+\n+  private final Map<GamePlayer, ComboBox<String>> roleForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> incomeForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> pusForPlayers = new HashMap<>();\n+\n+  @FXML private ComboBox<String> allSelectorCheckbox;\n+\n+  @FXML private GridPane factionGrid;\n+\n+  @FXML private VBox root;\n+\n+  @FXML private CheckBox resourceModifierCheckbox;\n+\n+  private ScreenController<FxmlManager> screenController;\n+  private GameData gameData;\n+\n+  @Override\n+  public void connect(final ScreenController<FxmlManager> screenController) {\n+    this.screenController = screenController;\n+  }\n+\n+  @Override\n+  public Node getNode() {\n+    return root;\n+  }\n+\n+  @FXML\n+  void initialize() {\n+    allSelectorCheckbox.getItems().setAll(PlayerType.playerTypes());\n+  }\n+\n+  @Override\n+  public void onShow(final Map<String, Object> data) {\n+    roleForPlayers.clear();\n+    factionGrid\n+        .getChildren()\n+        .removeIf(\n+            node -> {\n+              final Integer row = GridPane.getRowIndex(node);\n+              return row != null && row > 0;\n+            });\n+    gameData =\n+        (GameData)\n+            Optional.ofNullable(data.get(SELECTED_MAP_KEY))\n+                .orElseThrow(\n+                    () -> new IllegalStateException(\"Missing GameData when calling screen\"));\n+    final List<String> availablePlayers = List.of(PlayerType.playerTypes());\n+    for (final GamePlayer playerId : gameData.getPlayerList()) {\n+      final var name = new Label(playerId.getName());\n+      final ComboBox<String> controllingPlayer =\n+          new ComboBox<>(FXCollections.observableArrayList(availablePlayers));\n+      controllingPlayer.getSelectionModel().select(0);\n+      if (playerId.getCanBeDisabled()) {\n+        controllingPlayer.getItems().add(DISABLE_TEXT);\n+      }\n+      roleForPlayers.put(playerId, controllingPlayer);\n+      final Collection<String> playerAlliances =\n+          gameData.getAllianceTracker().getAlliancesPlayerIsIn(playerId);\n+      final var faction = new Button(playerAlliances.toString());\n+      faction.setOnAction(\n+          e -> {\n+            final int targetIndex = controllingPlayer.getSelectionModel().getSelectedIndex();\n+            playerAlliances.stream()\n+                .map(gameData.getAllianceTracker()::getPlayersInAlliance)\n+                .flatMap(Collection::stream)\n+                .map(roleForPlayers::get)\n+                .filter(stringComboBox -> stringComboBox.getItems().size() > targetIndex)\n+                .map(ComboBox::getSelectionModel)\n+                .forEach(selectionModel -> selectionModel.select(targetIndex));\n+          });\n+      final var income = new Spinner<Integer>(0, 100, 100);\n+      income.setDisable(true);\n+      incomeForPlayers.put(playerId, income);\n+      final var pus = new Spinner<Integer>(0, 100, 0);\n+      pus.setDisable(true);\n+      pusForPlayers.put(playerId, pus);\n+      factionGrid.addRow(factionGrid.getRowCount(), name, controllingPlayer, faction, income, pus);\n+    }\n+  }\n+\n+  @Override\n+  public Map<String, Class<?>> getValidTypes() {\n+    return Map.of(SELECTED_MAP_KEY, GameData.class);\n+  }\n+\n+  @FXML\n+  void setAllTo() {\n+    factionGrid.getChildren().stream()\n+        .filter(ComboBox.class::isInstance)\n+        .map(node -> (ComboBox<?>) node)\n+        .forEach(\n+            comboBox ->\n+                comboBox\n+                    .getSelectionModel()\n+                    .select(allSelectorCheckbox.getSelectionModel().getSelectedIndex()));\n+  }\n+\n+  @FXML\n+  void cancelMapSelection() {\n+    screenController.switchScreen(FxmlManager.MAP_SELECTION);\n+  }\n+\n+  @FXML", "originalCommit": "4af8afd52c5590b2092e98d39cc1fc3e7a17c206", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTQwMg==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379255402", "bodyText": "How do we know that GameParseException implies a missing file here? Would it be more clear if the exception perhaps be GameFileMissing or something else?\nSecond, do we need the checked exception (GameParseException is checked right?), what's the purpose behind it?\nSide-note, I'm thinking we may want to remove the exception name from the user display message and only show the exception message. I'm getting to be very skeptical about the \"best-practice\" of throwing custom exceptions and avoiding built-in's , particularly Runtime (eg: https://stackify.com/java-custom-exceptions/).", "author": "DanVanAtta", "createdAt": "2020-02-14T05:23:50Z", "path": "game-headed/src/main/java/org/triplea/game/client/parser/DefaultGameLoader.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.triplea.game.client.parser;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GameParseException;\n+import games.strategy.engine.framework.ui.GameChooserEntry;\n+import java.util.function.Consumer;\n+import javafx.concurrent.Service;\n+import javafx.concurrent.Task;\n+\n+public class DefaultGameLoader extends Service<GameData> implements GameLoader {\n+  private GameChooserEntry gameChooserEntry;\n+\n+  @Override\n+  public void loadGame(\n+      final GameChooserEntry gameChooserEntry,\n+      final Consumer<GameData> onLoad,\n+      final Consumer<Throwable> errorHandler) {\n+    this.gameChooserEntry = gameChooserEntry;\n+    reset();\n+    start();\n+    setOnSucceeded(value -> onLoad.accept(getValue()));\n+    setOnFailed(value -> errorHandler.accept(getException()));\n+  }\n+\n+  @Override\n+  protected Task<GameData> createTask() {\n+    return new Task<>() {\n+      @Override\n+      protected GameData call() throws GameParseException {\n+        return gameChooserEntry\n+            .getCompleteGameData()\n+            .orElseThrow(() -> new GameParseException(\"Missing file!\"));", "originalCommit": "27d180461997e4405320155024a17ce38b99f36b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NDg5MQ==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379854891", "bodyText": "I can't remember the exact details but I think the reason I chose GameParseException here is so that the exception type is consistent.\nI thought that I had a try catch block somewhere where this would make sense, but we just have a generic error handler, so yeah any exception would do.", "author": "RoiEXLab", "createdAt": "2020-02-15T20:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTkxMA==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379855910", "bodyText": "How about changing to FileNotFound or a IllegalState? GameParseException AFAIK is more about invalid syntax rather than missing game file.", "author": "DanVanAtta", "createdAt": "2020-02-15T21:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI1NTQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDY4Nw==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379850687", "bodyText": "Is it worthwhile to create constructor over-loads to avoid the null args? We might be able to put more of the construction work in PlayerListing constructor as well to further simplify here.", "author": "DanVanAtta", "createdAt": "2020-02-15T19:22:35Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -118,4 +123,33 @@ public static LocalLauncher create(\n             null);\n     return new LocalLauncher(gameSelectorModel, new PlainRandomSource(), pl, parent, launchAction);\n   }\n+\n+  public static LocalLauncher create(\n+      final List<Entry<String, String>> roleMapping,\n+      final Predicate<String> isDisabled,\n+      final GameData gameData) {\n+    final Predicate<Entry<String, String>> enabledPredicate =\n+        entry -> !isDisabled.test(entry.getValue());\n+    final PlayerListing playerListing =\n+        new PlayerListing(", "originalCommit": "27d180461997e4405320155024a17ce38b99f36b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NTQzNw==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379855437", "bodyText": "I don't know if you noticed, but I changed the way how users disable nations in the new UI:\nInstead of unchecking a checkbox to disable a player, there is a \"Disable\" option when choosing who controls the specific nation, which feels more natural IMO.\nHowever PlayerListing is used to this checkbox based scheme so I have to convert the data representation so it matches the \"old\"/current scheme.\nSo I could add an overload constructor, but I think this would ultimately lead down a rabbit hole of potential improvements for the data scheme in general.", "author": "RoiEXLab", "createdAt": "2020-02-15T20:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjAzMw==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379856033", "bodyText": "I did not quite notice that, there is quite a bit going on in this update and I'm afraid to say time is too limited to spend enough time to really properly review everything without further pointers/guidance to call important elements out.\nAn overload of PlayerListing is pretty limited, why would that lead to a rabbit hole? Just add only the overload, then the class here in question does not have to pass unused/null values.", "author": "DanVanAtta", "createdAt": "2020-02-15T21:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc0NQ==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379850745", "bodyText": "The parameter coming in seems to be a logical negation - can we sanely change that to isEnabled?\nSecond, Is this lamba a place where we can use the Predicates.not(..)?", "author": "DanVanAtta", "createdAt": "2020-02-15T19:23:36Z", "path": "game-core/src/main/java/games/strategy/engine/framework/startup/launcher/LocalLauncher.java", "diffHunk": "@@ -118,4 +123,33 @@ public static LocalLauncher create(\n             null);\n     return new LocalLauncher(gameSelectorModel, new PlainRandomSource(), pl, parent, launchAction);\n   }\n+\n+  public static LocalLauncher create(\n+      final List<Entry<String, String>> roleMapping,\n+      final Predicate<String> isDisabled,\n+      final GameData gameData) {\n+    final Predicate<Entry<String, String>> enabledPredicate =\n+        entry -> !isDisabled.test(entry.getValue());", "originalCommit": "27d180461997e4405320155024a17ce38b99f36b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzUxOA==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379857518", "bodyText": "We could, but I'm pretty sure this would make the code longer and doesn't add to readability IMO", "author": "RoiEXLab", "createdAt": "2020-02-15T21:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2MDAzNA==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379860034", "bodyText": "Okay, it is a bit odd though as is, because:\n\nenabled = !disabled\nthe predicate is not super clear, it's indirect, not clear why we would have a predicate or what the predicate really represents.\n\nPerhaps confusing item (2) can be helped with naming. Instead of enabledPredicate, some (poor) suggestions, perhaps something like: componentIsEnabled, componentIsNotDisabled", "author": "DanVanAtta", "createdAt": "2020-02-15T22:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDk2OA==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379850968", "bodyText": "It looks like we have a decent amount of logic in the FXML class here. I was looking at the function reference \"DISABLE_TEXT::equals\", thinking that was logic in the XML class, but going up further, the startGame method itself has logic. This looks like a place where we are mixing display with back-end logic.\nI think we could have a really good fit for view-model, model-controller pattern here. If we had one class to represent the FXML components, I think we could decouple quite nicely and also make the logic test-able.\nEG:\nroleSelectionViewModel.setResourceModifierSelected(resourceModifierCheckbox.isSelected());\nroleSelectionViewModel.setPlayerRoles(roleForPlayers);\nroleSelectionViewModel.startGame();\n\nHave you considered using a view-model, any thoughts?", "author": "DanVanAtta", "createdAt": "2020-02-15T19:27:55Z", "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screens/RoleSelection.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.GamePlayer;\n+import games.strategy.engine.data.properties.NumberProperty;\n+import games.strategy.engine.framework.startup.launcher.LocalLauncher;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import games.strategy.triplea.Constants;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javafx.collections.FXCollections;\n+import javafx.fxml.FXML;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.triplea.game.client.ui.javafx.screen.ControlledScreen;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+public class RoleSelection implements ControlledScreen<ScreenController<FxmlManager>> {\n+\n+  static final String SELECTED_MAP_KEY = \"selectedMap\";\n+  private static final String DISABLE_TEXT = \"Disable\";\n+\n+  private final Map<GamePlayer, ComboBox<String>> roleForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> incomeForPlayers = new HashMap<>();\n+  private final Map<GamePlayer, Spinner<Integer>> pusForPlayers = new HashMap<>();\n+\n+  @FXML private ComboBox<String> allSelectorCheckbox;\n+\n+  @FXML private GridPane factionGrid;\n+\n+  @FXML private VBox root;\n+\n+  @FXML private CheckBox resourceModifierCheckbox;\n+\n+  private ScreenController<FxmlManager> screenController;\n+  private GameData gameData;\n+\n+  @Override\n+  public void connect(final ScreenController<FxmlManager> screenController) {\n+    this.screenController = screenController;\n+  }\n+\n+  @Override\n+  public Node getNode() {\n+    return root;\n+  }\n+\n+  @FXML\n+  void initialize() {\n+    allSelectorCheckbox.getItems().setAll(PlayerType.playerTypes());\n+  }\n+\n+  @Override\n+  public void onShow(final Map<String, Object> data) {\n+    roleForPlayers.clear();\n+    factionGrid\n+        .getChildren()\n+        .removeIf(\n+            node -> {\n+              final Integer row = GridPane.getRowIndex(node);\n+              return row != null && row > 0;\n+            });\n+    gameData =\n+        (GameData)\n+            Optional.ofNullable(data.get(SELECTED_MAP_KEY))\n+                .orElseThrow(\n+                    () -> new IllegalStateException(\"Missing GameData when calling screen\"));\n+    final List<String> availablePlayers = List.of(PlayerType.playerTypes());\n+    for (final GamePlayer gamePlayer : gameData.getPlayerList()) {\n+      setupPlayerControl(availablePlayers, gamePlayer);\n+    }\n+  }\n+\n+  private void setupPlayerControl(\n+      final List<String> availablePlayers, final GamePlayer gamePlayer) {\n+    final var name = new Label(gamePlayer.getName());\n+    final ComboBox<String> controllingPlayer =\n+        new ComboBox<>(FXCollections.observableArrayList(availablePlayers));\n+    controllingPlayer.getSelectionModel().select(0);\n+    if (gamePlayer.getCanBeDisabled()) {\n+      controllingPlayer.getItems().add(DISABLE_TEXT);\n+    }\n+    final Button faction = newFactionButton(gamePlayer, controllingPlayer);\n+    roleForPlayers.put(gamePlayer, controllingPlayer);\n+    final var income = new Spinner<Integer>(0, 100, 100);\n+    income.setDisable(true);\n+    incomeForPlayers.put(gamePlayer, income);\n+    final var pus = new Spinner<Integer>(0, 100, 0);\n+    pus.setDisable(true);\n+    pusForPlayers.put(gamePlayer, pus);\n+    factionGrid.addRow(factionGrid.getRowCount(), name, controllingPlayer, faction, income, pus);\n+  }\n+\n+  private Button newFactionButton(\n+      final GamePlayer gamePlayer, final ComboBox<String> controllingPlayer) {\n+    final Collection<String> playerAlliances =\n+        gameData.getAllianceTracker().getAlliancesPlayerIsIn(gamePlayer);\n+    final var faction = new Button(playerAlliances.toString());\n+    faction.setOnAction(\n+        e -> {\n+          final int targetIndex = controllingPlayer.getSelectionModel().getSelectedIndex();\n+          playerAlliances.stream()\n+              .map(gameData.getAllianceTracker()::getPlayersInAlliance)\n+              .flatMap(Collection::stream)\n+              .map(roleForPlayers::get)\n+              .filter(stringComboBox -> stringComboBox.getItems().size() > targetIndex)\n+              .map(ComboBox::getSelectionModel)\n+              .forEach(selectionModel -> selectionModel.select(targetIndex));\n+        });\n+    return faction;\n+  }\n+\n+  @Override\n+  public Map<String, Class<?>> getValidTypes() {\n+    return Map.of(SELECTED_MAP_KEY, GameData.class);\n+  }\n+\n+  @FXML\n+  void setAllTo() {\n+    factionGrid.getChildren().stream()\n+        .filter(ComboBox.class::isInstance)\n+        .map(node -> (ComboBox<?>) node)\n+        .forEach(\n+            comboBox ->\n+                comboBox\n+                    .getSelectionModel()\n+                    .select(allSelectorCheckbox.getSelectionModel().getSelectedIndex()));\n+  }\n+\n+  @FXML\n+  void cancelMapSelection() {\n+    screenController.switchScreen(FxmlManager.MAP_SELECTION);\n+  }\n+\n+  @FXML\n+  void startGame() {\n+    if (resourceModifierCheckbox.isSelected()) {\n+      setupPuIncome();\n+    }\n+    final List<Entry<String, String>> flatMapping =", "originalCommit": "27d180461997e4405320155024a17ce38b99f36b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzMxNQ==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379857315", "bodyText": "I feel like the line between what should be UI-only and what is logic is really blurry here.\nYour suggestion sounds intruiging, but I'm not quite sure how that would look like for the cases where the view has to query the model for information, for example when pressing on any alliance button next to the control-type selection (AI/Human/Disabled).\nAlso I'm not quite happy with the disable text thingy either, I simply haven't found a good way to store the intermediate selection state and synchronize it with the UI, so I just try to convert the UI back to an \"internal\" repreentation we can work with.\nMaybe that's just me and this isn't a problem at all, but if you can show me a good pattern that works both ways (from view to model and vice-versa) then I'd happily apply it everywhere.", "author": "RoiEXLab", "createdAt": "2020-02-15T21:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1OTg2Mw==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r379859863", "bodyText": "Typically model interactions are mediated by the view model (afaik). Let's keep thinking about this, both read up on view-model pattern a bit. view-model is also agnostic about UI layer, which makes it really great for decoupling swing and potentially allowing more migration of UI. In essence it also allows for UI code to be far more pure, and hence better decoupling. I think there are some examples in the forum poster code where I'll try a view-model, it should give an example of the pattern as well, so let's keep this on our radar.", "author": "DanVanAtta", "createdAt": "2020-02-15T22:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDk2OA=="}], "type": "inlineReview"}, {"oid": "76245c738165a5a8742f287d653a5d4bff1ad8c7", "url": "https://github.com/triplea-game/triplea/commit/76245c738165a5a8742f287d653a5d4bff1ad8c7", "message": "Fix remaining issues", "committedDate": "2020-02-20T00:33:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY2NDc3OA==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r381664778", "bodyText": "TODO: Create a unit test for this check", "author": "RoiEXLab", "createdAt": "2020-02-20T02:00:22Z", "path": "game-headed/src/main/java/org/triplea/game/client/ui/javafx/screen/NavigationPane.java", "diffHunk": "@@ -54,13 +55,31 @@ public void switchScreen(final FxmlManager identifier) {\n       throw new IllegalArgumentException(\"Screen of Type \" + identifier + \" not present\");\n     }\n \n-    final Node screen = screens.get(identifier);\n+    final Node screen = screens.get(identifier).getNode();\n \n     if (root.getChildren().isEmpty()) {\n       root.getChildren().add(screen);\n     } else {\n       root.getChildren().set(0, screen);\n     }\n+    final ControlledScreen<NavigationPane> controlledScreen = screens.get(identifier);\n+    checkTypes(data, controlledScreen.getValidTypes());\n+    controlledScreen.onShow(data);", "originalCommit": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY2NTMxNA==", "url": "https://github.com/triplea-game/triplea/pull/5917#discussion_r381665314", "bodyText": "TODO: Add a Test case for the onShow method", "author": "RoiEXLab", "createdAt": "2020-02-20T02:01:17Z", "path": "game-headed/src/test/java/org/triplea/game/client/ui/javafx/screens/RoleSelectionTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.triplea.game.client.ui.javafx.screens;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.triplea.game.client.ui.javafx.screens.RoleSelection.SELECTED_MAP_KEY;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.framework.startup.ui.PlayerType;\n+import java.util.List;\n+import java.util.Map;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.SingleSelectionModel;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.triplea.game.client.ui.javafx.UserAgentStylesheetTestCase;\n+import org.triplea.game.client.ui.javafx.screen.ScreenController;\n+import org.triplea.game.client.ui.javafx.util.FxmlManager;\n+\n+public class RoleSelectionTest extends UserAgentStylesheetTestCase {\n+\n+  private final RoleSelection roleSelection = new RoleSelection();\n+\n+  @Test\n+  void correctRootNodeIsReturned() {\n+    final VBox root = mock(VBox.class);\n+    roleSelection.setRoot(root);\n+\n+    assertThat(roleSelection.getNode(), is(root));\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  void allSelectorCheckboxIsInitializedWithCorrectValues() {\n+    final ObservableList<String> observableList = FXCollections.observableArrayList();\n+    final ComboBox<String> comboBox = mock(ComboBox.class);\n+    when(comboBox.getItems()).thenReturn(observableList);\n+    roleSelection.setAllSelectorCheckbox(comboBox);\n+\n+    roleSelection.initialize();\n+\n+    assertThat(observableList, is(List.of(PlayerType.playerTypes())));\n+  }\n+\n+  // TODO Add Test for onShow method", "originalCommit": "ebbc9c1c4b7e6146690485552aef9507cc25a4b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "894bacf848e5f9c2f926ce61af2bb61e8b5f84d1", "url": "https://github.com/triplea-game/triplea/commit/894bacf848e5f9c2f926ce61af2bb61e8b5f84d1", "message": "Add basic GameSelection screen", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "e2d2b05f43ccdf3351282cde7b2de23df62fa985", "url": "https://github.com/triplea-game/triplea/commit/e2d2b05f43ccdf3351282cde7b2de23df62fa985", "message": "Make PU modifiers work", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "cfc467b4c7d6b9726389c8d41ea3ca382200888e", "url": "https://github.com/triplea-game/triplea/commit/cfc467b4c7d6b9726389c8d41ea3ca382200888e", "message": "Restore fullscreen state", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "5a40d51d01a345fbe4b0cfeaea99d606173e6fcd", "url": "https://github.com/triplea-game/triplea/commit/5a40d51d01a345fbe4b0cfeaea99d606173e6fcd", "message": "Remove wrong getNode assertion", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "3c9f597d6f3af575a210df8bb103d1b639820137", "url": "https://github.com/triplea-game/triplea/commit/3c9f597d6f3af575a210df8bb103d1b639820137", "message": "Add final keywords", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "c9d51bd1995adeb20f94fe633fd477d36e8fa1e0", "url": "https://github.com/triplea-game/triplea/commit/c9d51bd1995adeb20f94fe633fd477d36e8fa1e0", "message": "Fix remaining issues", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "59ea1d9cbcbf1966c0696a28ed8d0dd079e3aabc", "url": "https://github.com/triplea-game/triplea/commit/59ea1d9cbcbf1966c0696a28ed8d0dd079e3aabc", "message": "Use different exception type", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "2e636ac5593b46cabfd61df35966bcf63c3f6e26", "url": "https://github.com/triplea-game/triplea/commit/2e636ac5593b46cabfd61df35966bcf63c3f6e26", "message": "Overload constructor and use that", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "24fae55475e9f567e464ffb38a28b45d95f93c84", "url": "https://github.com/triplea-game/triplea/commit/24fae55475e9f567e464ffb38a28b45d95f93c84", "message": "Rename predicate", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "27c17028c0c5478f391a870ad1a8bd4783883646", "url": "https://github.com/triplea-game/triplea/commit/27c17028c0c5478f391a870ad1a8bd4783883646", "message": "Add test cases", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "6f7ad0b43cc43afecf324cf9620fb9fdf19b5c15", "url": "https://github.com/triplea-game/triplea/commit/6f7ad0b43cc43afecf324cf9620fb9fdf19b5c15", "message": "Fix helper class name", "committedDate": "2020-02-27T19:07:10Z", "type": "commit"}, {"oid": "cd459ff4e45b8273ca942e52d72774fb6db49551", "url": "https://github.com/triplea-game/triplea/commit/cd459ff4e45b8273ca942e52d72774fb6db49551", "message": "Polish css a little bit more", "committedDate": "2020-02-27T20:45:52Z", "type": "commit"}, {"oid": "769cb5702ef5dfa9e17b08ecb74662abadb6cefe", "url": "https://github.com/triplea-game/triplea/commit/769cb5702ef5dfa9e17b08ecb74662abadb6cefe", "message": "Add test cases for NavigationPane", "committedDate": "2020-02-27T21:09:02Z", "type": "commit"}, {"oid": "6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "url": "https://github.com/triplea-game/triplea/commit/6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "message": "Add some basic test functionality", "committedDate": "2020-02-27T21:25:01Z", "type": "commit"}, {"oid": "6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "url": "https://github.com/triplea-game/triplea/commit/6fcd13da56534cb43c0a1ceca9ae40719ea31b16", "message": "Add some basic test functionality", "committedDate": "2020-02-27T21:25:01Z", "type": "forcePushed"}, {"oid": "591e85eb9d12ed689851e261034fc6a1a00d8616", "url": "https://github.com/triplea-game/triplea/commit/591e85eb9d12ed689851e261034fc6a1a00d8616", "message": "Move strings to lang file", "committedDate": "2020-02-27T21:42:33Z", "type": "commit"}, {"oid": "8ef3167018d2e0e09ee29b4b584e8d8a925f5020", "url": "https://github.com/triplea-game/triplea/commit/8ef3167018d2e0e09ee29b4b584e8d8a925f5020", "message": "Enhance width of Spinners", "committedDate": "2020-02-27T22:03:22Z", "type": "commit"}, {"oid": "5b3ac8f8246e04d66bbaf1116456c8dc9c441abd", "url": "https://github.com/triplea-game/triplea/commit/5b3ac8f8246e04d66bbaf1116456c8dc9c441abd", "message": "Add newline at the end of the file", "committedDate": "2020-02-27T22:18:24Z", "type": "commit"}]}