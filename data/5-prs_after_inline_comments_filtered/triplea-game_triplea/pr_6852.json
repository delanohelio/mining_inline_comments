{"pr_number": 6852, "pr_title": "Fix UnsupportedOperationException trying to modify a collection.", "pr_createdAt": "2020-06-25T18:10:13Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6852", "timeline": [{"oid": "5bb10a3135e5feb14973d573d55ecadf3f427484", "url": "https://github.com/triplea-game/triplea/commit/5bb10a3135e5feb14973d573d55ecadf3f427484", "message": "Fix UnsupportedOperationException trying to modify a collection.\n\nMake a copy of the collection when calling remove().", "committedDate": "2020-06-25T18:08:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NjA1Mg==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r445966052", "bodyText": "I'm not sure if this is the best fix. Creating a copy probably should be the responsibility of the method, not the caller. Usually we would want APIs to be impossible to use and not have arcane contracts where just by using the API you break it.\nIt's also a bit odd as it's difficult to see what the side effect would be from either the parameters or the method name (yikes, the code here really could have used some improvements..)\nWhat's the cost to moving the copy to the method? Failing that, perhaps it should be commented here why we create a copy, but that leaves unresolved that we have a very brittle API that can break just by using it in a very reasonable way.", "author": "DanVanAtta", "createdAt": "2020-06-26T04:51:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -639,7 +639,7 @@ private void removeFromNonCombatLandings(\n       if (landedTerritory == null) {\n         throw new IllegalStateException(\"not unloaded?:\" + units);\n       }\n-      remove(lost, bridge, landedTerritory, false);\n+      remove(new ArrayList<>(lost), bridge, landedTerritory, false);", "originalCommit": "5bb10a3135e5feb14973d573d55ecadf3f427484", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExNzM2Mg==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446117362", "bodyText": "Done. I made a helper function which is also reused from another remove() implementation that avoids the extra copy if there are no dependent units.", "author": "asvitkine", "createdAt": "2020-06-26T11:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NjA1Mg=="}], "type": "inlineReview"}, {"oid": "fcb9e22d163f1cb64675a7e6cc75e69bb0a29c69", "url": "https://github.com/triplea-game/triplea/commit/fcb9e22d163f1cb64675a7e6cc75e69bb0a29c69", "message": "Make remove() do the copying if needed.", "committedDate": "2020-06-26T11:02:00Z", "type": "commit"}, {"oid": "92959c04358bedea07c7fb116040c0ca4efe56ad", "url": "https://github.com/triplea-game/triplea/commit/92959c04358bedea07c7fb116040c0ca4efe56ad", "message": "unmodifiable return", "committedDate": "2020-06-26T11:02:59Z", "type": "commit"}, {"oid": "82662df34a398b74d1ccdb4a5218b5f22ccb9aff", "url": "https://github.com/triplea-game/triplea/commit/82662df34a398b74d1ccdb4a5218b5f22ccb9aff", "message": "fix", "committedDate": "2020-06-26T11:07:30Z", "type": "commit"}, {"oid": "442aeed408f0d1cfb5a396106e317b15eca11d5d", "url": "https://github.com/triplea-game/triplea/commit/442aeed408f0d1cfb5a396106e317b15eca11d5d", "message": "use a more concise construct", "committedDate": "2020-06-26T11:18:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg1Ng==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446694856", "bodyText": "Does concat of a non-empty collection with an empty collection return just the non-empty collection? Perhaps we should just let the API do that for us?\nIn, part, it's strange that if you pass an mutable list to getWithDependents that is empty, you get a mutable list back from this method, but passing a non-empty mutable list returns an immutable collection. Generally a returned collection should always be mutable or immutable and not depend on its parameter.", "author": "DanVanAtta", "createdAt": "2020-06-28T20:31:53Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/AbstractBattle.java", "diffHunk": "@@ -97,6 +98,14 @@\n     return Collections.unmodifiableList(dependentUnits);\n   }\n \n+  protected Collection<Unit> getWithDependents(final Collection<Unit> units) {\n+    final Collection<Unit> dependentUnits = getDependentUnits(units);\n+    if (dependentUnits.isEmpty()) {\n+      return units;\n+    }\n+    return ImmutableList.copyOf(Iterables.concat(units, dependentUnits));", "originalCommit": "442aeed408f0d1cfb5a396106e317b15eca11d5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDk4Mg==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446694982", "bodyText": "getWithDependents is notable to me as a method name. It makes me wonder 'get what?'\ngetUnitWithDependents makes perhaps more sense. Though, if we have a one-liner method, perhaps just in-lining this in the two places its used is just as well? WDYT?", "author": "DanVanAtta", "createdAt": "2020-06-28T20:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwNTQ1NQ==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446705455", "bodyText": "Does concat of a non-empty collection with an empty collection return just the non-empty collection? Perhaps we should just let the API do that for us?\n\nIt returns an iterable. Creating a list out of it would require a copy.\n\nIn, part, it's strange that if you pass an mutable list to getWithDependents that is empty, you get a mutable list back from this method, but passing a non-empty mutable list returns an immutable collection. Generally a returned collection should always be mutable or immutable and not depend on its parameter.\n\nWe can wrap units in an immutable wrapper for consistency.", "author": "asvitkine", "createdAt": "2020-06-28T22:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwNTg3MQ==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446705871", "bodyText": "Renamed to getUnitsWithDependents and made the return value unmodifiable.", "author": "asvitkine", "createdAt": "2020-06-28T22:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMzYzNw==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446713637", "bodyText": "Sorry to not have been clear in my question:\nWhen calling:\nImmutableList.copyOf(Iterables.concat(units, dependentUnits))\nDoes it matter if dependentUnits is empty? Wouldn't we still get the same result?", "author": "DanVanAtta", "createdAt": "2020-06-28T23:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxNDE5Mg==", "url": "https://github.com/triplea-game/triplea/pull/6852#discussion_r446714192", "bodyText": "Side-note, I'm not sure we should be completely zeolous to wrap collections in unmodifiable variants. IMO it's far more important for the contents to be immutable than a collection.\nWe were concerned about performance of unnecessary collection copies, seems we would be falling into that potential problem more and more. One thing to do is for us to simply stop mutating collections though and focus on instead of copying collections, to instead do stream operations on them which creates a new collection for us. This way we avoid both mutating collections and copying them explicitly as part of return or input arguments.", "author": "DanVanAtta", "createdAt": "2020-06-28T23:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg1Ng=="}], "type": "inlineReview"}, {"oid": "b80e84797e1ffb415e36bf4d655d901118f173ac", "url": "https://github.com/triplea-game/triplea/commit/b80e84797e1ffb415e36bf4d655d901118f173ac", "message": "Rename method and always return an unmodifiable collection.", "committedDate": "2020-06-28T22:24:19Z", "type": "commit"}]}