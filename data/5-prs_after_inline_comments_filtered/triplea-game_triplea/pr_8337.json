{"pr_number": 8337, "pr_title": "Make resource discovery more flexible and robust", "pr_createdAt": "2020-12-02T12:18:34Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8337", "timeline": [{"oid": "790c0a3e2c04c7ab6f82175169a482d7d63d10c3", "url": "https://github.com/triplea-game/triplea/commit/790c0a3e2c04c7ab6f82175169a482d7d63d10c3", "message": "Requesting Over The Top to be added to the maps list\n\nFor more details, see: https://github.com/triplea-game/triplea/issues/8325", "committedDate": "2020-12-02T12:18:04Z", "type": "commit"}, {"oid": "ac4c2c033bf0c09eecba556dc77ad8570146ebb2", "url": "https://github.com/triplea-game/triplea/commit/ac4c2c033bf0c09eecba556dc77ad8570146ebb2", "message": "Testing HttpGet instead of HttpHead (which works for GitHub releases) to see if it's too slow because it downloads the full zips", "committedDate": "2020-12-02T13:46:06Z", "type": "commit"}, {"oid": "cba4c43bbc078766c5256f8da09237268ff16a02", "url": "https://github.com/triplea-game/triplea/commit/cba4c43bbc078766c5256f8da09237268ff16a02", "message": "Fix import", "committedDate": "2020-12-02T13:51:27Z", "type": "commit"}, {"oid": "b9e36c457414a0ed4b3d7baf9feb90c31e901e9a", "url": "https://github.com/triplea-game/triplea/commit/b9e36c457414a0ed4b3d7baf9feb90c31e901e9a", "message": "Remove extra closing </p> tag", "committedDate": "2020-12-02T16:10:49Z", "type": "commit"}, {"oid": "a1e7a5adce401abe703f9b2f79f2007aace8bd9e", "url": "https://github.com/triplea-game/triplea/commit/a1e7a5adce401abe703f9b2f79f2007aace8bd9e", "message": "Minor formatting change to trigger checks", "committedDate": "2020-12-03T00:16:17Z", "type": "commit"}, {"oid": "5051c6f258797dfa4f5eafc329ef07bfdd4f226c", "url": "https://github.com/triplea-game/triplea/commit/5051c6f258797dfa4f5eafc329ef07bfdd4f226c", "message": "Use new release with isTwoHit deprecation fix", "committedDate": "2020-12-05T15:12:26Z", "type": "commit"}, {"oid": "65caa8ba11649651f51648f24e183b7d287f0dd6", "url": "https://github.com/triplea-game/triplea/commit/65caa8ba11649651f51648f24e183b7d287f0dd6", "message": "Update Over the Top to use standard URL of downloading master zip", "committedDate": "2020-12-10T05:39:29Z", "type": "commit"}, {"oid": "4ad167d506a99561c99b21ceb01c2193d457504b", "url": "https://github.com/triplea-game/triplea/commit/4ad167d506a99561c99b21ceb01c2193d457504b", "message": "Update resource location prefix detector to be much more robust.\n\nIt automatically finds the path (regardless of map name, branch, etc.) in a .zip file by finding the \"baseTiles\" entry and using the parent path as the resource prefix. This means the actual map files are introspected so a simple unit test wouldn't work any more.", "committedDate": "2020-12-10T05:41:11Z", "type": "commit"}, {"oid": "efac102932d8afcdae5366c2e2ddbae2226446b9", "url": "https://github.com/triplea-game/triplea/commit/efac102932d8afcdae5366c2e2ddbae2226446b9", "message": "Go back to HttpHead instead of HttpGet", "committedDate": "2020-12-10T05:42:02Z", "type": "commit"}, {"oid": "c2854c9ad3891357853ff6103ac5247266f5868c", "url": "https://github.com/triplea-game/triplea/commit/c2854c9ad3891357853ff6103ac5247266f5868c", "message": "Apparently StringUtils is not actually on the classpath", "committedDate": "2020-12-10T05:50:31Z", "type": "commit"}, {"oid": "d12c9588f3c0dc86618d16d08aebc65a550c4b33", "url": "https://github.com/triplea-game/triplea/commit/d12c9588f3c0dc86618d16d08aebc65a550c4b33", "message": "One more compile error Eclipse didn't catch", "committedDate": "2020-12-10T05:56:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMDc1NA==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542100754", "bodyText": "Have you checked the performance of this method?\nHave you tested for the case where the map is a directory and not a zip?", "author": "DanVanAtta", "createdAt": "2020-12-14T04:16:51Z", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n-    }\n+  \tstatic String getMapPrefix(final URL[] resourcePaths) {\n+  \t\tfor (val url : resourcePaths) {\n+  \t\t\ttry (val zip = new ZipFile(new File(url.toURI()))) {", "originalCommit": "d12c9588f3c0dc86618d16d08aebc65a550c4b33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMjMyNg==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542102326", "bodyText": "Only by running locally and not observing any slowdown, but that was just anecdotal\nI don't think so since I believe I only have .zips locally right now. If it's just a folder and it attempts to open as a .zip, it will throw an IOException and silently return an empty string (which was the previous behavior for non-zips)", "author": "jdimeo", "createdAt": "2020-12-14T04:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542101107", "bodyText": "The variable name is a bit odd as there are other required asset folders, yet the name of the folder is 'baseTiles'. Is this just an example required folder to indicate when we have found the map resources? Does the actual folder matter less so than it is just one of several that we would expect to find?", "author": "DanVanAtta", "createdAt": "2020-12-14T04:18:02Z", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,28 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  private static final String REQUIRED_ASSET_FOLDER = \"baseTiles/\";", "originalCommit": "d12c9588f3c0dc86618d16d08aebc65a550c4b33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTY2Ng==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542101666", "bodyText": "Yes, precisely. baseTiles is necessary, but not sufficient, to specify assets but sufficient to identify the asset path", "author": "jdimeo", "createdAt": "2020-12-14T04:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMjUzNA==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542102534", "bodyText": "@DanVanAtta would you prefer EXAMPLE_REQUIRED_ASSET_FOLDER?", "author": "jdimeo", "createdAt": "2020-12-14T04:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwNTg3NQ==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r542105875", "bodyText": "Renamed to REQUIRED_ASSET_EXAMPLE_FOLDER and added comment", "author": "jdimeo", "createdAt": "2020-12-14T04:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTEwNw=="}], "type": "inlineReview"}, {"oid": "0ae2ce8f348bcc671eec8987922d9c0430558174", "url": "https://github.com/triplea-game/triplea/commit/0ae2ce8f348bcc671eec8987922d9c0430558174", "message": "Replace usage of Lombok val to pass style checks", "committedDate": "2020-12-14T04:33:28Z", "type": "commit"}, {"oid": "87f6fdc79e10c31484dd763e99072806e26088c1", "url": "https://github.com/triplea-game/triplea/commit/87f6fdc79e10c31484dd763e99072806e26088c1", "message": "Rename constant to be more clear", "committedDate": "2020-12-14T04:34:23Z", "type": "commit"}, {"oid": "56fa112eb70b35fa5dc9267e7fc4c130e620d0e0", "url": "https://github.com/triplea-game/triplea/commit/56fa112eb70b35fa5dc9267e7fc4c130e620d0e0", "message": "Merge branch 'master' into patch-1", "committedDate": "2020-12-14T04:36:59Z", "type": "commit"}, {"oid": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "url": "https://github.com/triplea-game/triplea/commit/eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "message": "Make checkstyle happy with finals", "committedDate": "2020-12-14T04:44:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r547084598", "bodyText": "nit, the single letter variable names can be hard to decipher. Would you mind replacing it with something more descriptive, like zipFile, or fileInZip, or zipFileEntry?\nSimilarly for the $ in the lambda.", "author": "DanVanAtta", "createdAt": "2020-12-22T06:00:09Z", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =", "originalCommit": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTM4Mg==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548741382", "bodyText": "I like using single character variable names to communicate to the reader it's not an \"important\" variable- very often in lambdas or for loops. I'm telling you as the reader to \"keep going\" and focus on other parts of the code. But I'm happy to conform to the current conventions in the code.", "author": "jdimeo", "createdAt": "2020-12-24T20:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTc0OQ==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719749", "bodyText": "@DanVanAtta I just pushed another commit that removes the single char variable names", "author": "jdimeo", "createdAt": "2021-01-01T02:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NTAzNA==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r547085034", "bodyText": "I notice we are substringing off only the example folder name. Seemingly we want the path to be something like <map-name>/map. If the 'baseTilesis not in that directory, then we might substring too little. For example, let's saybaseTiles` is in a sub-folder of 'map', then the path would no longer be to '/map' but would be to that subfolder. Wouldn't this cause a problem with files being one-folder level higher than expected?", "author": "DanVanAtta", "createdAt": "2020-12-22T06:01:41Z", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());", "originalCommit": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MTI3Ng==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548741276", "bodyText": "If I understand correctly, this is exactly the problem that this PR is trying to solve. If the map maker for some reason puts the assets in /map/stuff/baseTiles this code will use /map/stuff as the root path of the resources, not /map as was previously hardcoded and assumed. This stops making assumptions about absolute paths for resources and instead makes the assumption that, wherever baseTiles is, all the other folders are siblings to that folder.", "author": "jdimeo", "createdAt": "2020-12-24T19:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NTAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548787363", "bodyText": "IOException is highly suspicious. We may want to tell a user about this if we hit it. Perhaps we expect this to be an impossible condition, though if the permissions are wrong then it might be worth notifying the user.\nIf we first check that a file exists: new File(url.toURI()).exists(), and then we get an IOException, it seems like that would be a good place to warn a user. WDYT? @jdimeo\nBeyond this last point, this update looks good.", "author": "DanVanAtta", "createdAt": "2020-12-25T03:08:03Z", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened", "originalCommit": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NjQ0OA==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548896448", "bodyText": "@DanVanAtta My mindset here is that this is just auto resource location, not actual loading and parsing. We expect an IOException if the file is a folder (not a zip file) or if there are any other reasons it can't be read, but in that case we should just return a default/assumed path to the resources (like /map) not actually throw errors. We can catch and throw errors when we go to actually load and parse the map.", "author": "jdimeo", "createdAt": "2020-12-25T17:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NzIwOQ==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r548897209", "bodyText": "Cool, I'm wondering & considering if we are doing control-flow-by-exception-handling. We could check in the new File(..) that it is a file, ends with '.zip' and if not then avoid processing the file. This would leave IOException for cases that we do not expect and potentially represent error cases. I'm concerned that by no-op'ing the IOException case that we could be silently suppressing an error that we have not expected.", "author": "DanVanAtta", "createdAt": "2020-12-25T17:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTI4Mw==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719283", "bodyText": "@DanVanAtta What you are describing is exactly what we should do for the actual map loading code. I see this code as very \"lazy\" - blindly and quickly try to automatically find the resources, purposefully ignoring errors and not being robust. All that you are describing would be appropriate for the actual map parsing code. I wouldn't want a stack trace with a map error to lead a troubleshooter here, since this isn't the \"authority\" on parsing the map", "author": "jdimeo", "createdAt": "2021-01-01T02:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5ODY0Mg==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550798642", "bodyText": "I see, I agree that error handling should be handled upstream. It looks like it is not quite though..\nFrom ResourceLoader.java:\n  private ResourceLoader(final String mapName, final String[] paths) {\n    final URL[] urls = new URL[paths.length];\n    for (int i = 0; i < paths.length; i++) {\n      final File f = new File(paths[i]);\n      if (!f.exists()) {\n        log.error(f + \" does not exist\");\n      }\n      if (!f.isDirectory() && !f.getName().endsWith(\".zip\")) {\n        log.error(f + \" is not a directory or a zip file\");\n      }\n      try {\n        urls[i] = f.toURI().toURL();\n      } catch (final MalformedURLException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n    mapPrefix = ResourceLocationTracker.getMapPrefix(mapName, urls);\n    // Note: URLClassLoader does not always respect the ordering of the search URLs\n    // To solve this we will get all matching paths and then filter by what matched\n    // the assets folder.\n    loader = new URLClassLoader(urls);\n    this.mapName = mapName;\n  }", "author": "DanVanAtta", "createdAt": "2021-01-01T19:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NzM2Mw=="}], "type": "inlineReview"}, {"oid": "a2daa0accbd2b8aad49c1851c6d683c529c0e1d4", "url": "https://github.com/triplea-game/triplea/commit/a2daa0accbd2b8aad49c1851c6d683c529c0e1d4", "message": "Fix single-character variable names", "committedDate": "2021-01-01T02:11:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTUzMw==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550719533", "bodyText": "@DanVanAtta should the default be different here? e.g. /map? I'm assuming not, since if it's not a zip, it won't be under a /map folder typically.", "author": "jdimeo", "createdAt": "2021-01-01T02:12:22Z", "path": "game-core/src/main/java/games/strategy/triplea/ResourceLocationTracker.java", "diffHunk": "@@ -10,42 +15,30 @@\n  */\n @UtilityClass\n class ResourceLocationTracker {\n+  // All maps must have at least a \"baseTiles\" folder\n+  private static final String REQUIRED_ASSET_EXAMPLE_FOLDER = \"baseTiles/\";\n \n   /**\n-   * master zip is the zipped folder format you get when downloading from a map repo via the 'clone\n-   * or download' button.\n-   */\n-  static final String MASTER_ZIP_MAGIC_PREFIX = \"-master/map/\";\n-\n-  static final String MASTER_ZIP_IDENTIFYING_SUFFIX = \"-master.zip\";\n-\n-  /**\n-   * * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n-   * constructed based on the map name. * *\n-   *\n-   * <p>The 'mapPrefix' is the path within a map zip file where we will then find any map contents.\n-   * * For example, if the map prefix is \"map\", then when we expand the map zip, we would expect *\n-   * \"/map\" to be the first folder we see, and we would expect things like \"/map/game\" and *\n-   * \"/map/polygons.txt\" to exist.\n+   * Will return an empty string unless a special prefix is needed, in which case that prefix is *\n+   * constructed based on where the {@code baseTiles} folder is located within the zip.\n    *\n-   * @param mapName Used to construct any special resource loading path prefixes, used as needed\n-   *     depending upon which resources are in the path\n    * @param resourcePaths The list of paths used for a map as resources. From this we can determine\n    *     if the map is being loaded from a zip or a directory, and if zip, if it matches any\n    *     particular naming.\n    */\n-  static String getMapPrefix(final String mapName, final URL[] resourcePaths) {\n-    final boolean isUsingMasterZip =\n-        Arrays.stream(resourcePaths)\n-            .map(Object::toString)\n-            .anyMatch(path -> path.endsWith(MASTER_ZIP_IDENTIFYING_SUFFIX));\n-\n-    // map skins will have the full path name as their map name.\n-    if (mapName.endsWith(\"-master.zip\")) {\n-      return mapName.substring(0, mapName.length() - \"-master.zip\".length())\n-          + MASTER_ZIP_MAGIC_PREFIX;\n-    } else {\n-      return isUsingMasterZip ? mapName + MASTER_ZIP_MAGIC_PREFIX : \"\";\n+  static String getMapPrefix(final URL[] resourcePaths) {\n+    for (final URL url : resourcePaths) {\n+      try (ZipFile zip = new ZipFile(new File(url.toURI()))) {\n+        final Optional<? extends ZipEntry> e =\n+            zip.stream().filter($ -> $.getName().endsWith(REQUIRED_ASSET_EXAMPLE_FOLDER)).findAny();\n+        if (e.isPresent()) {\n+          final String path = e.get().getName();\n+          return path.substring(0, path.length() - REQUIRED_ASSET_EXAMPLE_FOLDER.length());\n+        }\n+      } catch (final IOException | URISyntaxException e) {\n+        // File is not a zip or can't be opened\n+      }\n     }\n+    return \"\";", "originalCommit": "eef6e1cd810df8452f78fef42c4f44b084ce6a2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5ODU2Ng==", "url": "https://github.com/triplea-game/triplea/pull/8337#discussion_r550798566", "bodyText": "Keeping existing behavior is prudent unless we are sure it should be changed. I would agree it is suspect and possibly dead-code.", "author": "DanVanAtta", "createdAt": "2021-01-01T19:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTUzMw=="}], "type": "inlineReview"}, {"oid": "8e16536ab1e0432edab674e1d69c8a9ecba77686", "url": "https://github.com/triplea-game/triplea/commit/8e16536ab1e0432edab674e1d69c8a9ecba77686", "message": "Fix line length for checkstyle", "committedDate": "2021-01-01T02:22:39Z", "type": "commit"}]}