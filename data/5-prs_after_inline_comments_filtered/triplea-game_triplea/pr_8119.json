{"pr_number": 8119, "pr_title": "Create AirBattleCombatValue objects and use them", "pr_createdAt": "2020-11-07T22:49:35Z", "pr_url": "https://github.com/triplea-game/triplea/pull/8119", "timeline": [{"oid": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "url": "https://github.com/triplea-game/triplea/commit/0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "message": "Create AirBattleCombatValue objects and use them\n\nMove all of the air battle strength/roll/power logic to one place\nsimilar to the AA and main battle combat values work.", "committedDate": "2020-11-07T22:20:23Z", "type": "commit"}, {"oid": "09606127eca723a4797064ab93568d7e70de73d5", "url": "https://github.com/triplea-game/triplea/commit/09606127eca723a4797064ab93568d7e70de73d5", "message": "Merge remote-tracking branch 'upstream/master' into air-battle-combat-value", "committedDate": "2020-11-07T23:08:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTA0Nw==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231047", "bodyText": "Is this comment correct? \"offense\" vs BattleDefense\nWhat is involved when calculating air battle combat value? How is this different from land battles? Answering those questions could perhaps make this a stronger javadoc to give a maintainer a good sense of what and how this class accomplishes it's goal.", "author": "DanVanAtta", "createdAt": "2020-11-07T23:08:43Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTExNQ==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231115", "bodyText": "minor, if you have '@getter' on every field, you can add it to the class to have it apply to all fields.", "author": "DanVanAtta", "createdAt": "2020-11-07T23:09:16Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "74ba1890eb154c1764e85d87d3d8747a5f35afbf", "url": "https://github.com/triplea-game/triplea/commit/74ba1890eb154c1764e85d87d3d8747a5f35afbf", "message": "Fix merge issues", "committedDate": "2020-11-07T23:19:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTI0Mw==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231243", "bodyText": "minor, it can be a nicer syntax to use the 'underscore' variant, eg: @Getter(onMethod_ = @Override)", "author": "DanVanAtta", "createdAt": "2020-11-07T23:10:24Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTI4NA==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231284", "bodyText": "@Value already includes @AllArgsConstructor, the latter should not be needed.", "author": "DanVanAtta", "createdAt": "2020-11-07T23:10:53Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<TerritoryEffect> territoryEffects = List.of();\n+\n+  @Override\n+  public RollCalculator getRoll() {\n+    return new AirBattleDefenseRoll();\n+  }\n+\n+  @Override\n+  public StrengthCalculator getStrength() {\n+    return new AirBattleDefenseStrength(gameData.getDiceSides());\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return false;\n+  }\n+\n+  @Override\n+  public int getDiceSides(final Unit unit) {\n+    return gameData.getDiceSides();\n+  }\n+\n+  @Value\n+  @AllArgsConstructor", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTM5NA==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231394", "bodyText": "IIRC, 'getOwner' can return null for neutrals. Will that cause an issue here? I'd recommend adding a test case to verify this.", "author": "DanVanAtta", "createdAt": "2020-11-07T23:11:56Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<TerritoryEffect> territoryEffects = List.of();\n+\n+  @Override\n+  public RollCalculator getRoll() {\n+    return new AirBattleDefenseRoll();\n+  }\n+\n+  @Override\n+  public StrengthCalculator getStrength() {\n+    return new AirBattleDefenseStrength(gameData.getDiceSides());\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return false;\n+  }\n+\n+  @Override\n+  public int getDiceSides(final Unit unit) {\n+    return gameData.getDiceSides();\n+  }\n+\n+  @Value\n+  @AllArgsConstructor\n+  static class AirBattleDefenseRoll implements RollCalculator {\n+\n+    @Override\n+    public RollValue getRoll(final Unit unit) {\n+      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()));", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzIxMQ==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519233211", "bodyText": "getOwner never returns null.  If the player is null it sets owner to GamePlayer.NULL_PLAYERID.", "author": "trevan", "createdAt": "2020-11-07T23:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTQ2Nw==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231467", "bodyText": "side-note, a no-op return value is code-smell (indicates that the API is overly-broad and that we implement a sub-set of the API only. It hints that the interface is actually mutiple interfaces and/or the methods on the interface have low cohesion). Any thoughts?", "author": "DanVanAtta", "createdAt": "2020-11-07T23:12:57Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<TerritoryEffect> territoryEffects = List.of();\n+\n+  @Override\n+  public RollCalculator getRoll() {\n+    return new AirBattleDefenseRoll();\n+  }\n+\n+  @Override\n+  public StrengthCalculator getStrength() {\n+    return new AirBattleDefenseStrength(gameData.getDiceSides());\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return false;\n+  }\n+\n+  @Override\n+  public int getDiceSides(final Unit unit) {\n+    return gameData.getDiceSides();\n+  }\n+\n+  @Value\n+  @AllArgsConstructor\n+  static class AirBattleDefenseRoll implements RollCalculator {\n+\n+    @Override\n+    public RollValue getRoll(final Unit unit) {\n+      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()));\n+    }\n+\n+    @Override\n+    public Map<Unit, IntegerMap<Unit>> getSupportGiven() {\n+      return Map.of();", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMzQ2NA==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519233464", "bodyText": "These methods are only used by the OOL.  I plan to look into your attempt to rewrite the OOL (#6376).  Hopefully, that will remove the need to grab the support given and I can remove all of the code around the support given.  But if this CombatValue is passed into the CasualtyOrderOfLosses at this moment, it needs to have this method.", "author": "trevan", "createdAt": "2020-11-07T23:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTYzOQ==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231639", "bodyText": "side-note, I really wonder about our OO design. Generally an object should take care of its concerns and we could have a single method like \"unit.getAirDefenseStrength\". Keeping data and its access consistent is very important on the other hand so we probably should not mix it up until we can fix the majority of it in one go.", "author": "DanVanAtta", "createdAt": "2020-11-07T23:14:45Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<TerritoryEffect> territoryEffects = List.of();\n+\n+  @Override\n+  public RollCalculator getRoll() {\n+    return new AirBattleDefenseRoll();\n+  }\n+\n+  @Override\n+  public StrengthCalculator getStrength() {\n+    return new AirBattleDefenseStrength(gameData.getDiceSides());\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return false;\n+  }\n+\n+  @Override\n+  public int getDiceSides(final Unit unit) {\n+    return gameData.getDiceSides();\n+  }\n+\n+  @Value\n+  @AllArgsConstructor\n+  static class AirBattleDefenseRoll implements RollCalculator {\n+\n+    @Override\n+    public RollValue getRoll(final Unit unit) {\n+      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()));\n+    }\n+\n+    @Override\n+    public Map<Unit, IntegerMap<Unit>> getSupportGiven() {\n+      return Map.of();\n+    }\n+  }\n+\n+  @Value\n+  @AllArgsConstructor\n+  static class AirBattleDefenseStrength implements StrengthCalculator {", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTc1Nw==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231757", "bodyText": "This API is bothersome:\n unit.getUnitAttachment().getAirDefense(unit.getOwner()));\n\nA 'unit' should already know who it's owner is. The encapsulation around data is very weak, we have knowledge here of attachments, unit owners, the air defense type.. Any thoughts if this can be fixed?", "author": "DanVanAtta", "createdAt": "2020-11-07T23:16:08Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleDefenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleDefenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<TerritoryEffect> territoryEffects = List.of();\n+\n+  @Override\n+  public RollCalculator getRoll() {\n+    return new AirBattleDefenseRoll();\n+  }\n+\n+  @Override\n+  public StrengthCalculator getStrength() {\n+    return new AirBattleDefenseStrength(gameData.getDiceSides());\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return false;\n+  }\n+\n+  @Override\n+  public int getDiceSides(final Unit unit) {\n+    return gameData.getDiceSides();\n+  }\n+\n+  @Value\n+  @AllArgsConstructor\n+  static class AirBattleDefenseRoll implements RollCalculator {\n+\n+    @Override\n+    public RollValue getRoll(final Unit unit) {\n+      return RollValue.of(unit.getUnitAttachment().getDefenseRolls(unit.getOwner()));\n+    }\n+\n+    @Override\n+    public Map<Unit, IntegerMap<Unit>> getSupportGiven() {\n+      return Map.of();\n+    }\n+  }\n+\n+  @Value\n+  @AllArgsConstructor\n+  static class AirBattleDefenseStrength implements StrengthCalculator {\n+\n+    int diceSides;\n+\n+    @Override\n+    public StrengthValue getStrength(final Unit unit) {\n+      return StrengthValue.of(diceSides, unit.getUnitAttachment().getAirDefense(unit.getOwner()));", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzNDIzNw==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519234237", "bodyText": "We could start adding methods to the Unit class that encapsulates this.  So something like:\npublic int getAirDefense() {\n  this.getUnitAttachment().getAirDefense(this.getOwner());\n}\n\nIt'll make the Unit class a lot bigger with all of these methods since it will probably end up with all of the existing methods in UnitType and UnitAttachment.", "author": "trevan", "createdAt": "2020-11-07T23:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2MDA0MA==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519460040", "bodyText": "That could make a lot of sense now. The 'roots' of TripleA were to be completely generic, a unit could have been something like a chess piece. We've removed that level of generality to focus on the grand strategy style games.\nWe probably should plan such a change and design it out so we don't get ourselves caught into a corner. For example, how do we handle methods that do not apply? For example, a 'getAirDefense' method for a land unit? Do we return zero, do we throw an exception? If we return zero, can we distinguish between units that do not participate in air defense vs the ones that do but actually have zero power (IE: fodder).\nIt's also worth planning for how many methods and attributes we will be accumulating. Perhaps the right object model is to have strategy and/or value objects for the different aspects of a Unit. For example, a 'purchasing', a 'combatStrength', a 'movementStrategy', etc.. rather than having all implemenation be on Unit, instead delegate its major sub-components to additional objects.", "author": "DanVanAtta", "createdAt": "2020-11-08T18:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTg5Mg==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519231892", "bodyText": "Having a reference to a game data is a bit of a step backwards. It's a god-class and the fix for it is to avoid adding references to it.\nWhat if instead of passing the 'gameData' reference to the builder of this class, we push the responsibility getting the dice sides to the caller? That would also make this more of a value class as well where it really just holds values.", "author": "DanVanAtta", "createdAt": "2020-11-07T23:17:51Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleOffenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleOffenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzNDY5Mw==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519234693", "bodyText": "I'll work on that after this PR.", "author": "trevan", "createdAt": "2020-11-07T23:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMjA0NA==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519232044", "bodyText": "It's really odd that getDiceSides has Unit as a parameter. AFAIK we do not support per-unit dice sides, it's a global config for a game. Why is the unit parameter here? Do we ever user Unit to compute the dice sides value?", "author": "DanVanAtta", "createdAt": "2020-11-07T23:19:33Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/power/calculator/AirBattleOffenseCombatValue.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package games.strategy.triplea.delegate.power.calculator;\n+\n+import games.strategy.engine.data.GameData;\n+import games.strategy.engine.data.TerritoryEffect;\n+import games.strategy.engine.data.Unit;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.AccessLevel;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.triplea.java.collections.IntegerMap;\n+\n+/** Calculates offense strength and roll for Air Battle dice */\n+@Builder\n+@Value\n+@Getter(AccessLevel.NONE)\n+class AirBattleOffenseCombatValue implements CombatValue {\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  GameData gameData;\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> friendUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<Unit> enemyUnits = List.of();\n+\n+  @Getter(onMethod = @__({@Override}))\n+  @NonNull\n+  @Builder.Default\n+  Collection<TerritoryEffect> territoryEffects = List.of();\n+\n+  @Override\n+  public RollCalculator getRoll() {\n+    return new AirBattleOffenseRoll();\n+  }\n+\n+  @Override\n+  public StrengthCalculator getStrength() {\n+    return new AirBattleOffenseStrength(gameData.getDiceSides());\n+  }\n+\n+  @Override\n+  public boolean isDefending() {\n+    return false;\n+  }\n+\n+  @Override\n+  public int getDiceSides(final Unit unit) {", "originalCommit": "0e05a31cc1367ba7ca5b6b78901e25bc669d7a5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzNTA2NA==", "url": "https://github.com/triplea-game/triplea/pull/8119#discussion_r519235064", "bodyText": "AA units have per-unit type dice sides.  Look at AaDefenseCombatValue#getDiceSides and AaOffenseCombatValue#getDiceSides", "author": "trevan", "createdAt": "2020-11-07T23:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIzMjA0NA=="}], "type": "inlineReview"}, {"oid": "6d586e8c9d2c113856ed99b44f272729d0bc453f", "url": "https://github.com/triplea-game/triplea/commit/6d586e8c9d2c113856ed99b44f272729d0bc453f", "message": "Review feedback", "committedDate": "2020-11-07T23:45:51Z", "type": "commit"}]}