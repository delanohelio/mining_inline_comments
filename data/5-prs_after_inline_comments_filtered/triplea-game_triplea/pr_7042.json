{"pr_number": 7042, "pr_title": "Unify sub step logic", "pr_createdAt": "2020-07-04T20:01:51Z", "pr_url": "https://github.com/triplea-game/triplea/pull/7042", "timeline": [{"oid": "d04f035c1d4bb18160fd1da601017173b1255547", "url": "https://github.com/triplea-game/triplea/commit/d04f035c1d4bb18160fd1da601017173b1255547", "message": "Isolate sub order logic and unit test", "committedDate": "2020-07-04T15:41:53Z", "type": "commit"}, {"oid": "95f50dde4be832a4774bdade579a986a63dfc353", "url": "https://github.com/triplea-game/triplea/commit/95f50dde4be832a4774bdade579a986a63dfc353", "message": "Use FirstStrikeStepOrder instead of original logic", "committedDate": "2020-07-04T16:49:43Z", "type": "commit"}, {"oid": "2df40088fab0891218a13dc0b5ea393b4cbd629a", "url": "https://github.com/triplea-game/triplea/commit/2df40088fab0891218a13dc0b5ea393b4cbd629a", "message": "Simplify sub order logic and rename enums to be more descriptive", "committedDate": "2020-07-04T19:39:16Z", "type": "commit"}, {"oid": "a158ac12e9a4b263f801c588273c4062e60a0ddd", "url": "https://github.com/triplea-game/triplea/commit/a158ac12e9a4b263f801c588273c4062e60a0ddd", "message": "Simplify givenBattelState a little", "committedDate": "2020-07-04T20:11:28Z", "type": "commit"}, {"oid": "797d6c3913596ff1cf788bcdf461327a0a728667", "url": "https://github.com/triplea-game/triplea/commit/797d6c3913596ff1cf788bcdf461327a0a728667", "message": "Auto-Formatting", "committedDate": "2020-07-04T20:14:25Z", "type": "commit"}, {"oid": "9cd62f92cd31e77e6c337b2b0b90ed6f0c7c0094", "url": "https://github.com/triplea-game/triplea/commit/9cd62f92cd31e77e6c337b2b0b90ed6f0c7c0094", "message": "Break up FirstStrikeStepOrder to smaller methods", "committedDate": "2020-07-04T20:29:23Z", "type": "commit"}, {"oid": "d89477f41782bce8fb73ff142e29927ba791f310", "url": "https://github.com/triplea-game/triplea/commit/d89477f41782bce8fb73ff142e29927ba791f310", "message": "Instead of a list, return an object with attacker/defender defined", "committedDate": "2020-07-04T21:37:52Z", "type": "commit"}, {"oid": "66e2d7f52533181f50fad53502964de1f8c38eca", "url": "https://github.com/triplea-game/triplea/commit/66e2d7f52533181f50fad53502964de1f8c38eca", "message": "Merge remote-tracking branch 'upstream/master' into unify-sub-step-logic", "committedDate": "2020-07-10T04:58:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMzY4Ng==", "url": "https://github.com/triplea-game/triplea/pull/7042#discussion_r452623686", "bodyText": "Codacy found an issue: Avoid really long methods.", "author": "DanVanAtta", "createdAt": "2020-07-10T05:04:35Z", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/FirstStrikeStepOrderTest.java", "diffHunk": "@@ -0,0 +1,444 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitFirstStrike;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.DEFENDER_NO_SNEAK_ATTACK_BUT_BEFORE_STANDARD_ATTACK;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.DEFENDER_SNEAK_ATTACK_WITH_OPPOSING_FIRST_STRIKE;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.OFFENDER_NO_SNEAK_ATTACK;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.OFFENDER_SNEAK_ATTACK;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.OFFENDER_SNEAK_ATTACK_WITH_OPPOSING_FIRST_STRIKE;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FirstStrikeResult;\n+import games.strategy.triplea.delegate.battle.steps.retreat.OffensiveSubsRetreatTest.MockGameData;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class FirstStrikeStepOrderTest {\n+\n+  enum BattleStateVariation {\n+    HAS_ATTACKING_FIRST_STRIKE,\n+    HAS_DEFENDING_FIRST_STRIKE,\n+    HAS_ATTACKING_DESTROYER,\n+    HAS_DEFENDING_DESTROYER,\n+    HAS_WW2V2,\n+    HAS_DEFENDING_SUBS_SNEAK_ATTACK\n+  }\n+\n+  BattleState givenBattleState(final List<BattleStateVariation> parameters) {\n+    final List<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.add(givenAnyUnit());\n+    if (parameters.contains(BattleStateVariation.HAS_ATTACKING_DESTROYER)) {\n+      attackingUnits.add(givenUnitDestroyer());\n+    }\n+    if (parameters.contains(BattleStateVariation.HAS_ATTACKING_FIRST_STRIKE)) {\n+      attackingUnits.add(givenUnitFirstStrike());\n+    }\n+\n+    final List<Unit> defendingUnits = new ArrayList<>();\n+    defendingUnits.add(givenAnyUnit());\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_DESTROYER)) {\n+      defendingUnits.add(givenUnitDestroyer());\n+    }\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_FIRST_STRIKE)) {\n+      defendingUnits.add(givenUnitFirstStrike());\n+    }\n+\n+    final MockGameData gameData = MockGameData.givenGameData();\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_SUBS_SNEAK_ATTACK)) {\n+      gameData.withDefendingSubsSneakAttack(true);\n+    }\n+    if (parameters.contains(BattleStateVariation.HAS_WW2V2)) {\n+      gameData.withWW2V2(true);\n+    }\n+\n+    return givenBattleStateBuilder()\n+        .attackingUnits(attackingUnits)\n+        .defendingUnits(defendingUnits)\n+        .gameData(gameData.build())\n+        .build();\n+  }\n+\n+  @Test\n+  void noFirstStrikeUnitsShouldReturnNothing() {\n+    final BattleState battleState = givenBattleState(List.of());\n+\n+    final FirstStrikeResult steps = FirstStrikeStepOrder.calculate(battleState);\n+\n+    assertThat(steps, is(FirstStrikeResult.builder().build()));\n+  }\n+\n+  @ParameterizedTest\n+  @MethodSource\n+  void getStep(final List<BattleStateVariation> parameters, final FirstStrikeResult expected) {\n+\n+    final BattleState battleState = givenBattleState(parameters);\n+\n+    final FirstStrikeResult order = FirstStrikeStepOrder.calculate(battleState);\n+\n+    assertThat(order, is(expected));\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  static List<Arguments> getStep() {", "originalCommit": "66e2d7f52533181f50fad53502964de1f8c38eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2Mjc1OQ==", "url": "https://github.com/triplea-game/triplea/pull/7042#discussion_r453162759", "bodyText": "Do we ever expect to have any other options? If no, then throwing an exception could be valuable in case we fail to update this list.\nHave you considered the \"polymorphic switch\" refactor (I forget the real name for that kind of update), it could potentially remove the switch statement.\nEG:\nreturnFireAgainstAttackingSubs.getFirstStrikeStepOrder()\n\nThough, I do see we could get a circular dependency. This implies a static lookup method on the enum could do the trick, eg:\n  public static Optional<FirstStrikeStepOrder> lookupByReturnFireType(ReturnFire returnFire) {\n    return Arrays.stream(values())\n        .filter(firstStrikeStepOrder -> firstStrikeStepOrder.returnFire == returnFire)\n        .findAny();     \n  }\n\nYet, I see there are duplicated by offender and attacker. Have you considered splitting the enum into two, one for attacker and another for deferender? In such a case you would not have to encode attacker vs defender in the enum name. Perhaps we could even get the attacker or defender to be a flag value itself so that we do not need as many enum values.\nWDYT?", "author": "DanVanAtta", "createdAt": "2020-07-11T06:25:39Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/steps/FirstStrikeStepOrder.java", "diffHunk": "@@ -69,9 +43,23 @@ private static boolean hasAttackingFirstStrike(final BattleState battleState) {\n     return battleState.getAttackingUnits().stream().anyMatch(Matches.unitIsFirstStrike());\n   }\n \n-  private static boolean hasDefendingFirstStrike(final BattleState battleState) {\n-    return battleState.getDefendingUnits().stream()\n-        .anyMatch(Matches.unitIsFirstStrikeOnDefense(battleState.getGameData()));\n+  private static Optional<FirstStrikeStepOrder> calculateAttackerSteps(\n+      final @NonNull BattleState battleState) {\n+    final ReturnFire returnFireAgainstAttackingSubs =\n+        returnFireAgainstAttackingSubs(\n+            battleState.getAttackingUnits(),\n+            battleState.getDefendingUnits(),\n+            battleState.getGameData());\n+    switch (returnFireAgainstAttackingSubs) {\n+      case ALL:\n+        return Optional.of(OFFENDER_NO_SNEAK_ATTACK);\n+      case SUBS:\n+        return Optional.of(OFFENDER_SNEAK_ATTACK_WITH_OPPOSING_FIRST_STRIKE);\n+      case NONE:\n+        return Optional.of(OFFENDER_SNEAK_ATTACK);\n+      default:\n+        return Optional.empty();", "originalCommit": "9cd62f92cd31e77e6c337b2b0b90ed6f0c7c0094", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MzEyOA==", "url": "https://github.com/triplea-game/triplea/pull/7042#discussion_r453163128", "bodyText": "naming nit:\n\nFIRST_STRIKE prefix is perhaps redundant on an enum called FirstStrikeStepOrder. WDYT of this being \"FirstStrikeStepOrder.DEFENDER_FIRST_NONE`\nDEFENDER_FIRST_NONE does not initially make as much sense as it could. Can you suggest a better name perhaps? Maybe DEFENDERS_DO_NOT_RETURN_FIRE. Though, I can't help but feel that is a weird step order, it seems like a 'null' step and should just not be a step at all.. Hence, it's a bit difficult to grok what is intended by this step order from the name.", "author": "DanVanAtta", "createdAt": "2020-07-11T06:30:53Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1494,45 +1496,53 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n       }\n     };\n \n-    final ReturnFire returnFireAgainstAttackingSubs =\n-        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n-    final ReturnFire returnFireAgainstDefendingSubs =\n-        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n-    if (SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData)) {\n+    if (firstStrikeStepOrders.contains(FirstStrikeStepOrder.FIRST_STRIKE_DEFENDER_FIRST_NONE)) {", "originalCommit": "95f50dde4be832a4774bdade579a986a63dfc353", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MzYxMw==", "url": "https://github.com/triplea-game/triplea/pull/7042#discussion_r453163613", "bodyText": "This looks to be getting to be quite a bit of logic for MustFightBattle to know about. Have you considered making this check be a method on FirstStrikeStepOrder?\nEG:\nFirstStrikeStepOrder.containsFirstStrikeAttackersFire(firstStrikeStepOrders)\n\nSimilar can be applied elsewhere to further remove logic from MustFightBattle.\nPerhaps it can be made even cleaner by adding a 'Type' attribute to FirstStrikeStepOrder. EG:\n\npublic enum FirstStrikeType {\n  ATTACKER_FIRE,\n  DEFENDERS_FIRE,\n  DO_NOT_FIRE,\n}\n\n\nFirstStrikeStepOrder.java\n  :\n  :\n\n  NOT_APPLICABLE(ReturnFire.ALL, FirstStrikeType.DO_NOT_FIRE\n  );\n\n  \n  @Getter private final ReturnFire returnFire;\n  private final FirstStrikeType firstStrikeType;\n\n  static boolean containsAttackerFire(Collection<FirstStrikeStepOrder> order) {\n    return order.stream()\n        .anyMatch(o -> o.firstStrikeType == FirstStrikeType.ATTACKER_FIRE);\n  }\n\n\nWDYT, could any of that help?", "author": "DanVanAtta", "createdAt": "2020-07-11T06:37:29Z", "path": "game-core/src/main/java/games/strategy/triplea/delegate/battle/MustFightBattle.java", "diffHunk": "@@ -1494,45 +1496,53 @@ public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n       }\n     };\n \n-    final ReturnFire returnFireAgainstAttackingSubs =\n-        SubsChecks.returnFireAgainstAttackingSubs(attackingUnits, defendingUnits, gameData);\n-    final ReturnFire returnFireAgainstDefendingSubs =\n-        SubsChecks.returnFireAgainstDefendingSubs(attackingUnits, defendingUnits, gameData);\n-    if (SubsChecks.defenderSubsFireFirst(attackingUnits, defendingUnits, gameData)) {\n+    if (firstStrikeStepOrders.contains(FirstStrikeStepOrder.FIRST_STRIKE_DEFENDER_FIRST_NONE)) {\n       steps.add(\n           new FirstStrikeDefendersFire() {\n             private static final long serialVersionUID = 99992L;\n \n             @Override\n             public void execute(final ExecutionStack stack, final IDelegateBridge bridge) {\n-              firstStrikeDefendersFire(returnFireAgainstDefendingSubs);\n+              firstStrikeDefendersFire(ReturnFire.NONE);\n             }\n           });\n     }\n-    steps.add(\n-        new FirstStrikeAttackersFire() {\n-          private static final long serialVersionUID = 99991L;\n+    if (firstStrikeStepOrders.contains(FirstStrikeStepOrder.FIRST_STRIKE_OFFENDER_ALL)", "originalCommit": "95f50dde4be832a4774bdade579a986a63dfc353", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2Mzc3Nw==", "url": "https://github.com/triplea-game/triplea/pull/7042#discussion_r453163777", "bodyText": "nit, the numbering is a smell/maintenance problem.\nIt's a smell as it should be pretty easy to find which parameterized test case is failing. The maintenance burden comes in though if we insert an element mid-list, then suddenly you have to renumber them all.\nFor now this is okay IMO, but if there is a good way to avoid it, we should do that", "author": "DanVanAtta", "createdAt": "2020-07-11T06:40:02Z", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/FirstStrikeStepOrderTest.java", "diffHunk": "@@ -0,0 +1,531 @@\n+package games.strategy.triplea.delegate.battle.steps;\n+\n+import static games.strategy.triplea.delegate.battle.FakeBattleState.givenBattleStateBuilder;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenAnyUnit;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitDestroyer;\n+import static games.strategy.triplea.delegate.battle.steps.BattleStepsTest.givenUnitFirstStrike;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_DEFENDER_FIRST_NONE;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_DEFENDER_SECOND_ALL;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_DEFENDER_SECOND_SUBS;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_DEFENDER_STANDARD_ALL;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_OFFENDER_ALL;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_OFFENDER_NONE;\n+import static games.strategy.triplea.delegate.battle.steps.FirstStrikeStepOrder.FIRST_STRIKE_OFFENDER_SUBS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import games.strategy.engine.data.Unit;\n+import games.strategy.triplea.delegate.battle.BattleState;\n+import games.strategy.triplea.delegate.battle.steps.retreat.OffensiveSubsRetreatTest.MockGameData;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class FirstStrikeStepOrderTest {\n+\n+  @ParameterizedTest\n+  @MethodSource\n+  void getStep(final List<BattleStateVariation> parameters, final List<FirstStrikeStepOrder> expected, final List<FirstStrikeStepOrder> expected2) {\n+\n+    final BattleState battleState = givenBattleState(parameters);\n+\n+    final List<FirstStrikeStepOrder> steps = FirstStrikeStepOrder.calculate(battleState);\n+\n+    if (expected.isEmpty()) {\n+      assertThat(steps, hasSize(0));\n+    } else {\n+      System.out.println(steps);\n+      assertThat(steps, contains(expected.toArray()));\n+    }\n+\n+    final List<FirstStrikeStepOrder> steps2 = FirstStrikeStepOrder.calculate2(battleState);\n+    if (expected2.isEmpty()) {\n+      assertThat(steps2, hasSize(0));\n+    } else {\n+      System.out.println(steps2);\n+      assertThat(steps2, contains(expected2.toArray()));\n+    }\n+  }\n+\n+  enum BattleStateVariation {\n+    HAS_ATTACKING_FIRST_STRIKE,\n+    HAS_DEFENDING_FIRST_STRIKE,\n+    HAS_ATTACKING_DESTROYER,\n+    HAS_DEFENDING_DESTROYER,\n+    HAS_WW2V2,\n+    HAS_DEFENDING_SUBS_SNEAK_ATTACK\n+  }\n+\n+  BattleState givenBattleState(final List<BattleStateVariation> parameters) {\n+    final List<Unit> attackingUnits = new ArrayList<>();\n+    attackingUnits.add(givenAnyUnit());\n+    if (parameters.contains(BattleStateVariation.HAS_ATTACKING_DESTROYER)) {\n+      attackingUnits.add(givenUnitDestroyer());\n+    }\n+    if (parameters.contains(BattleStateVariation.HAS_ATTACKING_FIRST_STRIKE)) {\n+      attackingUnits.add(givenUnitFirstStrike());\n+    }\n+    final List<Unit> defendingUnits = new ArrayList<>();\n+    defendingUnits.add(givenAnyUnit());\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_DESTROYER)) {\n+      defendingUnits.add(givenUnitDestroyer());\n+    }\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_FIRST_STRIKE)) {\n+      defendingUnits.add(givenUnitFirstStrike());\n+    }\n+    final MockGameData gameData = MockGameData.givenGameData();\n+\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_FIRST_STRIKE)\n+        && !parameters.contains(BattleStateVariation.HAS_ATTACKING_FIRST_STRIKE)) {\n+      gameData.withDefendingSuicideAndMunitionUnitsDoNotFire(false);\n+    }\n+\n+    if (parameters.contains(BattleStateVariation.HAS_DEFENDING_SUBS_SNEAK_ATTACK)) {\n+      if (!parameters.contains(BattleStateVariation.HAS_WW2V2)) {\n+        gameData.withWW2V2(false);\n+      }\n+      gameData.withDefendingSubsSneakAttack(true);\n+    }\n+    if (parameters.contains(BattleStateVariation.HAS_WW2V2)) {\n+      gameData.withWW2V2(true);\n+    }\n+\n+    return givenBattleStateBuilder()\n+        .attackingUnits(attackingUnits)\n+        .defendingUnits(defendingUnits)\n+        .gameData(gameData.build())\n+        .build();\n+  }\n+\n+  static List<Arguments> getStep() {\n+    return List.of(\n+        //1", "originalCommit": "d04f035c1d4bb18160fd1da601017173b1255547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2Mzk2NA==", "url": "https://github.com/triplea-game/triplea/pull/7042#discussion_r453163964", "bodyText": "It's really good to see logic being isolated and then tested \ud83d\udc4d\nSuch actions helps improve test coverage which is an effective way to detect and lower bug counts. With test coverage in place future changes will be sure to maintain the same contract, which will make those updates easier and safer and not need manual testing. Avoiding manual testing when we simply just re-arrange code but not add new functionality will save us time, and even having a test infrastruture in place makes it eaiser to add new test cases going forward.\nAll in all, this is a good investment, thank you.", "author": "DanVanAtta", "createdAt": "2020-07-11T06:41:55Z", "path": "game-core/src/test/java/games/strategy/triplea/delegate/battle/steps/FirstStrikeStepOrderTest.java", "diffHunk": "@@ -0,0 +1,531 @@\n+package games.strategy.triplea.delegate.battle.steps;", "originalCommit": "d04f035c1d4bb18160fd1da601017173b1255547", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}