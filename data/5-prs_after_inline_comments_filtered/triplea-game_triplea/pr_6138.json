{"pr_number": 6138, "pr_title": "Simplify endpoint", "pr_createdAt": "2020-04-05T18:30:26Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6138", "timeline": [{"oid": "62171e4d8b77d7a6c80893fafcbd4b58c1637724", "url": "https://github.com/triplea-game/triplea/commit/62171e4d8b77d7a6c80893fafcbd4b58c1637724", "message": "Use concurrent data structure instead of mutex", "committedDate": "2020-04-05T16:45:06Z", "type": "commit"}, {"oid": "c821b598d7fc73c120ff7f3ae943a345f72f09bf", "url": "https://github.com/triplea-game/triplea/commit/c821b598d7fc73c120ff7f3ae943a345f72f09bf", "message": "Clarify method", "committedDate": "2020-04-05T16:45:32Z", "type": "commit"}, {"oid": "a3b23deab159ae10929bfacf2f13192a9fc6e404", "url": "https://github.com/triplea-game/triplea/commit/a3b23deab159ae10929bfacf2f13192a9fc6e404", "message": "Unify count implementations", "committedDate": "2020-04-05T16:54:43Z", "type": "commit"}, {"oid": "6316656bd81a7c6aa71e544ae6229d0086339d3a", "url": "https://github.com/triplea-game/triplea/commit/6316656bd81a7c6aa71e544ae6229d0086339d3a", "message": "Fix compile error", "committedDate": "2020-04-05T20:52:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NzM3NA==", "url": "https://github.com/triplea-game/triplea/pull/6138#discussion_r403757374", "bodyText": "nit, I'd assign this to Collection. I've found that in cases where we pass Set to places that want a List parameter but could be a collection, we incur a collection copy unnecessarily.\nEG:\nfoo(List.of(set));\nvoid foo(List thisDoesNotHaveToBeList);\n\nvs:\n\nfoo(setPassedAsCollection)\nvoid foo(Collection anyCollectionWillDo);", "author": "DanVanAtta", "createdAt": "2020-04-05T21:10:24Z", "path": "game-core/src/main/java/games/strategy/engine/message/unifiedmessenger/EndPoint.java", "diffHunk": "@@ -24,10 +26,9 @@\n   // the next number we can run\n   private long currentRunnableNumber = 0;\n   private final Object numberMutex = new Object();\n-  private final Object implementorsMutex = new Object();\n   private final String name;\n   private final Class<?> remoteClass;\n-  private final List<Object> implementors = new ArrayList<>();\n+  private final Set<Object> implementors = new CopyOnWriteArraySet<>();", "originalCommit": "6316656bd81a7c6aa71e544ae6229d0086339d3a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NzUxOQ==", "url": "https://github.com/triplea-game/triplea/pull/6138#discussion_r403757519", "bodyText": "Side-comment (as this is existing behavior):\nI've questioned a bit why the original code throws on this case.\nPerhaps because we're trying to detect a bug where we did not remove an implementor and we got the name wrong?\nIf that is the motivation, then adding a remove listener is probably a better way to go, or having a 'removeAll' hook maybe.", "author": "DanVanAtta", "createdAt": "2020-04-05T21:12:04Z", "path": "game-core/src/main/java/games/strategy/engine/message/unifiedmessenger/EndPoint.java", "diffHunk": "@@ -91,19 +91,16 @@ public int getLocalImplementorCount() {\n    * @return we have no more implementors.\n    */\n   boolean removeImplementor(final Object implementor) {\n-    synchronized (implementorsMutex) {\n-      if (!implementors.remove(implementor)) {\n-        throw new IllegalStateException(\n-            \"Not removed, impl:\" + implementor + \" have \" + implementors);\n-      }\n-      return implementors.isEmpty();\n+    if (!implementors.remove(implementor)) {\n+      throw new IllegalStateException(\"Not removed, impl:\" + implementor + \" have \" + implementors);", "originalCommit": "6316656bd81a7c6aa71e544ae6229d0086339d3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NjMxMQ==", "url": "https://github.com/triplea-game/triplea/pull/6138#discussion_r403776311", "bodyText": "removeAll maybe, but I don't think all use cases always remove everything.\nNo idea why the exception is there either.", "author": "RoiEXLab", "createdAt": "2020-04-05T23:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1Nzc0Nw==", "url": "https://github.com/triplea-game/triplea/pull/6138#discussion_r403757747", "bodyText": "Important, is there any chance we will invoke this method while implementors are being removed? If so we could hit a concurrent modification exception. Have you considered creating an implementor collection copy? Since we are copying references of a couple dozen objects, it should be a negligibly cheap operation.", "author": "DanVanAtta", "createdAt": "2020-04-05T21:14:13Z", "path": "game-core/src/main/java/games/strategy/engine/message/unifiedmessenger/EndPoint.java", "diffHunk": "@@ -119,16 +116,9 @@ boolean removeImplementor(final Object implementor) {\n \n   private List<RemoteMethodCallResults> invokeMultiple(\n       final RemoteMethodCall call, final INode messageOriginator) {\n-    // copy the implementors\n-    final List<Object> implementorsCopy;\n-    synchronized (implementorsMutex) {\n-      implementorsCopy = new ArrayList<>(implementors);\n-    }\n-    final List<RemoteMethodCallResults> results = new ArrayList<>(implementorsCopy.size());\n-    for (final Object implementor : implementorsCopy) {\n-      results.add(invokeSingle(call, implementor, messageOriginator));\n-    }\n-    return results;\n+    return implementors.stream()", "originalCommit": "6316656bd81a7c6aa71e544ae6229d0086339d3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NjYzNQ==", "url": "https://github.com/triplea-game/triplea/pull/6138#discussion_r403776635", "bodyText": "Unlikely we'll invoke both at the same time, but implementors is a thread safe implementation, which effectively creates a defensive copy whenever something is written to it so no worries there.", "author": "RoiEXLab", "createdAt": "2020-04-06T00:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1Nzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NTM0NA==", "url": "https://github.com/triplea-game/triplea/pull/6138#discussion_r403785344", "bodyText": "Cool, thanks \ud83d\udc4d", "author": "DanVanAtta", "createdAt": "2020-04-06T01:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1Nzc0Nw=="}], "type": "inlineReview"}]}