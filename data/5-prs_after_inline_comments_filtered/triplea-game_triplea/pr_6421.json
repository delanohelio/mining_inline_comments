{"pr_number": 6421, "pr_title": "Fix display of Can't Target info in tooltips.", "pr_createdAt": "2020-05-06T22:46:17Z", "pr_url": "https://github.com/triplea-game/triplea/pull/6421", "timeline": [{"oid": "2fdfed297809bca6eae96ad552895ff8b61dc0a0", "url": "https://github.com/triplea-game/triplea/commit/2fdfed297809bca6eae96ad552895ff8b61dc0a0", "message": "Fix display of Can't Target info in tooltips.\n\nThe list of unit types was previously incorrectly formatted.\nAlso makes the getter get called only once, since the getter\ndoes work in generating the list.", "committedDate": "2020-05-06T21:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNjI0Nw==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421136247", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-06T22:48:10Z", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -3366,16 +3366,20 @@ public String toStringShortAndOnlyImportantDifferences(final GamePlayer player)\n     if (getCanBeMovedThroughByEnemies()) {\n       tuples.add(Tuple.of(\"Can Be Moved Through By Enemies\", \"\"));\n     }\n-    if (!getCanNotTarget().isEmpty()) {\n-      if (getCanNotTarget().size() <= 4) {\n-        tuples.add(Tuple.of(\"Can't Target: \", getCanNotTarget().toString()));\n+    final Collection<UnitType> cannotTarget = getCanNotTarget();\n+    if (!cannotTarget.isEmpty()) {", "originalCommit": "2fdfed297809bca6eae96ad552895ff8b61dc0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTY4Nw==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421149687", "bodyText": "Made a helper function.", "author": "asvitkine", "createdAt": "2020-05-06T23:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNjI0OA==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421136248", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-05-06T22:48:10Z", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -3366,16 +3366,20 @@ public String toStringShortAndOnlyImportantDifferences(final GamePlayer player)\n     if (getCanBeMovedThroughByEnemies()) {\n       tuples.add(Tuple.of(\"Can Be Moved Through By Enemies\", \"\"));\n     }\n-    if (!getCanNotTarget().isEmpty()) {\n-      if (getCanNotTarget().size() <= 4) {\n-        tuples.add(Tuple.of(\"Can't Target: \", getCanNotTarget().toString()));\n+    final Collection<UnitType> cannotTarget = getCanNotTarget();\n+    if (!cannotTarget.isEmpty()) {\n+      if (cannotTarget.size() <= 4) {\n+        tuples.add(Tuple.of(\"Can't Target\", MyFormatter.defaultNamedToTextList(cannotTarget)));\n       } else {\n         tuples.add(Tuple.of(\"Can't Target Some Units\", \"\"));\n       }\n     }\n-    if (!getCanNotBeTargetedBy().isEmpty()) {\n-      if (getCanNotBeTargetedBy().size() <= 4) {\n-        tuples.add(Tuple.of(\"Can't Be Targeted By: \", getCanNotBeTargetedBy().toString()));\n+    final Collection<UnitType> cannotBeTargettedBy = getCanNotBeTargetedBy();\n+    if (!cannotBeTargettedBy.isEmpty()) {", "originalCommit": "2fdfed297809bca6eae96ad552895ff8b61dc0a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTY5Nw==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421149697", "bodyText": "Made a helper function.", "author": "asvitkine", "createdAt": "2020-05-06T23:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNjI0OA=="}], "type": "inlineReview"}, {"oid": "2eed22834cff98a91ee0168ba79896cd43c091eb", "url": "https://github.com/triplea-game/triplea/commit/2eed22834cff98a91ee0168ba79896cd43c091eb", "message": "Make a helper function.", "committedDate": "2020-05-06T23:26:14Z", "type": "commit"}, {"oid": "539190da08e314ac264c8f472441818f01fb03ae", "url": "https://github.com/triplea-game/triplea/commit/539190da08e314ac264c8f472441818f01fb03ae", "message": "final", "committedDate": "2020-05-06T23:27:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTI2Nw==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421151267", "bodyText": "What are your thoughts to have this method return a Tuple rather than 'out' parameters?\nhttps://github.com/triplea-game/triplea/wiki/Java-Code-Conventions#do-not-mutate-parameters-avoid-out-and-avoid-inout-parameters-5489", "author": "DanVanAtta", "createdAt": "2020-05-06T23:31:23Z", "path": "game-core/src/main/java/games/strategy/triplea/attachments/UnitAttachment.java", "diffHunk": "@@ -3607,6 +3591,19 @@ public String toStringShortAndOnlyImportantDifferences(final GamePlayer player)\n     return result.toString();\n   }\n \n+  private void addLabeledUnitTypes(", "originalCommit": "2eed22834cff98a91ee0168ba79896cd43c091eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1NjgxMA==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421156810", "bodyText": "It would duplicate more code because we'd need to move the if statement out of the function - either on the return value, by making the function return a null or optional tuple, or on the input param - which would then require an extra local if we don't want to recompute it twice.\nSo I prefer keeping it as is. Plus there's other functions already following this pattern.", "author": "asvitkine", "createdAt": "2020-05-06T23:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2MDg4MQ==", "url": "https://github.com/triplea-game/triplea/pull/6421#discussion_r421160881", "bodyText": "The indirection is problematic as well; side-effects and no-op methods that are 200 lines below where you are looking can make things also difficult to follow. Notably to understand what those two lines above you need to head down the page and then head back up.\nWe've the code convention established to declare essentially that existing examples are anti-patterns and not something we want to build on or continue.\nBe what it may, there are  a number of problems here, I'd agree there are trade-offs to be made.", "author": "DanVanAtta", "createdAt": "2020-05-07T00:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTI2Nw=="}], "type": "inlineReview"}]}