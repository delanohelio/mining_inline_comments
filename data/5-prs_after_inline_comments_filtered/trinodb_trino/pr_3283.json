{"pr_number": 3283, "pr_title": "Support syntax and AST building for Materialized View Commands ...", "pr_createdAt": "2020-03-30T13:43:16Z", "pr_url": "https://github.com/trinodb/trino/pull/3283", "timeline": [{"oid": "525b75f14844372817ffc85e8d69b918b22e17e7", "url": "https://github.com/trinodb/trino/commit/525b75f14844372817ffc85e8d69b918b22e17e7", "message": "skip refresh\n\nskip refresh connector api calls when materialized view is fresh", "committedDate": "2020-08-15T22:59:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDg1OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r473204859", "bodyText": "Let's make this more specific: isSkipMaterializedViewRefresh", "author": "martint", "createdAt": "2020-08-19T17:30:12Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -214,6 +215,16 @@ public void resetUpdateType()\n         this.target = Optional.empty();\n     }\n \n+    public boolean isSkipRefresh()", "originalCommit": "525b75f14844372817ffc85e8d69b918b22e17e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNjI1Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478416252", "bodyText": "Renamed the member variable and getter and setter.", "author": "anjalinorwood", "createdAt": "2020-08-27T13:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDg1OQ=="}], "type": "inlineReview"}, {"oid": "abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "url": "https://github.com/trinodb/trino/commit/abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "message": "Support Materialized Views\n\nThis commit adds support for Materialized Views in Presto engine.\nMuch like a logical view, a materialized view has a SQL query associated with it.\nUnlike logical view, it stores data corresponding to the SQL query.\n\nThe commit adds support for commands like CREATE MATERIALIZED VIEW, REFRESH MATERIALIZED VIEW,\nSHOW CREATE MATERIALIZED VIEW and DROP MATERIALIZED VIEW.\nThe commit adds support for reading data from a  materialized view when it is fresh with\nrespect to its underlying base tables. When a materialized view is stale with respect to its\nbase tables, the materialized view is resolved to base tables using the associated definition.\nQuerying the materialized view always returns the current/fresh data irrespective of the state\nof the materialized view.\n\nA materialized view is modeled as a combination of a SQL definition and a storage table\nthat holds the data.\n\nThe \u2018Refresh Materialized View\u2019 command is implemented as follows:\nREFRESH MATERIALIZED VIEW Implementation:\n+ Refresh materialized view operation is implemented as a table writer that drops partitions from,\n  deletes data from and inserts data into the storage table as needed. The source of the data is\n  the query associated with the materialized view.\n+ A new type of TableWriterOperator, \u2018RefreshMaterializedViewTarget\u2019 is implemented. This translates\n  into two connector API calls \u2018beginRefreshMaterializedView\u2019 and \u2018finishRefreshMaterializedView\u2019.\n+ StatementAnalyzer determines if the materialized view is fresh and sets the flag in Analysis.\n  If the materialized view is fresh, logical planner plans the refresh operation as a no-op.\n+ The \u2018beginRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Start a transaction\n  + Drop specified partitions of the storage table based on input parameters (applicable only\n    for incremental refresh of the materialized view)\n  + Delete data from specified partitions of the storage table or all of the data from the\n    storage table based on input parameters (applicable for incremental refresh and full refresh\n    respectively)\n  + Return a ConnectorInsertTableHandle\n+ The \u2018finishRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Insert data into the storage table based on parameters\n  + Store the table tokens for the base tables in the storage table\n  + Commit the transaction.\n+ Note that the refresh materialized view operation is performed in the scope of a single\n  transaction in the connector.\n\nAccess control:\nGiven that materialized views can be seen as a combination of a view and a table,\naccess control for a CREATE MATERIALIZED VIEW command is a combination of access\nchecks for CREATE TABLE and CREATE VIEW commands.\nSimilarly, a REFRESH MATERIALIZED VIEW command is a combination of DELETE and INSERT\noperations and access checks for this command is a combination of access checks\nfor DELETE and INSERT.\nLastly, a DROP MATERIALIZED VIEW access check is a combination of DROP TABLE and\nDROP VIEW command.", "committedDate": "2020-08-31T20:32:51Z", "type": "commit"}, {"oid": "abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "url": "https://github.com/trinodb/trino/commit/abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "message": "Support Materialized Views\n\nThis commit adds support for Materialized Views in Presto engine.\nMuch like a logical view, a materialized view has a SQL query associated with it.\nUnlike logical view, it stores data corresponding to the SQL query.\n\nThe commit adds support for commands like CREATE MATERIALIZED VIEW, REFRESH MATERIALIZED VIEW,\nSHOW CREATE MATERIALIZED VIEW and DROP MATERIALIZED VIEW.\nThe commit adds support for reading data from a  materialized view when it is fresh with\nrespect to its underlying base tables. When a materialized view is stale with respect to its\nbase tables, the materialized view is resolved to base tables using the associated definition.\nQuerying the materialized view always returns the current/fresh data irrespective of the state\nof the materialized view.\n\nA materialized view is modeled as a combination of a SQL definition and a storage table\nthat holds the data.\n\nThe \u2018Refresh Materialized View\u2019 command is implemented as follows:\nREFRESH MATERIALIZED VIEW Implementation:\n+ Refresh materialized view operation is implemented as a table writer that drops partitions from,\n  deletes data from and inserts data into the storage table as needed. The source of the data is\n  the query associated with the materialized view.\n+ A new type of TableWriterOperator, \u2018RefreshMaterializedViewTarget\u2019 is implemented. This translates\n  into two connector API calls \u2018beginRefreshMaterializedView\u2019 and \u2018finishRefreshMaterializedView\u2019.\n+ StatementAnalyzer determines if the materialized view is fresh and sets the flag in Analysis.\n  If the materialized view is fresh, logical planner plans the refresh operation as a no-op.\n+ The \u2018beginRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Start a transaction\n  + Drop specified partitions of the storage table based on input parameters (applicable only\n    for incremental refresh of the materialized view)\n  + Delete data from specified partitions of the storage table or all of the data from the\n    storage table based on input parameters (applicable for incremental refresh and full refresh\n    respectively)\n  + Return a ConnectorInsertTableHandle\n+ The \u2018finishRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Insert data into the storage table based on parameters\n  + Store the table tokens for the base tables in the storage table\n  + Commit the transaction.\n+ Note that the refresh materialized view operation is performed in the scope of a single\n  transaction in the connector.\n\nAccess control:\nGiven that materialized views can be seen as a combination of a view and a table,\naccess control for a CREATE MATERIALIZED VIEW command is a combination of access\nchecks for CREATE TABLE and CREATE VIEW commands.\nSimilarly, a REFRESH MATERIALIZED VIEW command is a combination of DELETE and INSERT\noperations and access checks for this command is a combination of access checks\nfor DELETE and INSERT.\nLastly, a DROP MATERIALIZED VIEW access check is a combination of DROP TABLE and\nDROP VIEW command.", "committedDate": "2020-08-31T20:32:51Z", "type": "forcePushed"}]}