{"pr_number": 6115, "pr_title": "Gather plan node auxiliary statistics separately", "pr_createdAt": "2020-11-26T22:52:31Z", "pr_url": "https://github.com/trinodb/trino/pull/6115", "timeline": [{"oid": "3ef4ecb54551c44e0fb7382b669e9af71ca810d0", "url": "https://github.com/trinodb/trino/commit/3ef4ecb54551c44e0fb7382b669e9af71ca810d0", "message": "Make OperatorHashCollisionsStats self-contained", "committedDate": "2020-11-27T11:08:42Z", "type": "commit"}, {"oid": "559db648c90e38e95d30e6e4ef1ae7b22b929268", "url": "https://github.com/trinodb/trino/commit/559db648c90e38e95d30e6e4ef1ae7b22b929268", "message": "Move assertExplainAnalyze to AbstractTestQueryFramework", "committedDate": "2020-11-27T11:53:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ==", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531566075", "bodyText": "I think this method should be @Deprecated because it's not much better than\ncomputeActual(\"EXPLAIN ANALYZE \" + query); // ensure does not fail\n\nyet, it pretends it is does something useful", "author": "findepi", "createdAt": "2020-11-27T12:11:05Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -321,6 +323,16 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n         assertEquals(actual, expected);\n     }\n \n+    protected void assertExplainAnalyze(@Language(\"SQL\") String query)", "originalCommit": "559db648c90e38e95d30e6e4ef1ae7b22b929268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4NjYxMw==", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531586613", "bodyText": "It does some very basic matching.\nI have extended this method to support extra expected matches.", "author": "sopel39", "createdAt": "2020-11-27T12:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwOTU5OQ==", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531609599", "bodyText": "i do not think this is the right direction. I'd expect the test to do assertThat() and do validation as found fit in this particular case", "author": "findepi", "createdAt": "2020-11-27T13:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyMDE5OA==", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r531620198", "bodyText": "I'm pretty sure you would end up with similar helper method that would cut boilerplate", "author": "sopel39", "createdAt": "2020-11-27T14:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzMDE1MQ==", "url": "https://github.com/trinodb/trino/pull/6115#discussion_r532230151", "bodyText": "#6139", "author": "findepi", "createdAt": "2020-11-29T16:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NjA3NQ=="}], "type": "inlineReview"}, {"oid": "a1760f1c28340221a9b5619c74891a2372d15ef4", "url": "https://github.com/trinodb/trino/commit/a1760f1c28340221a9b5619c74891a2372d15ef4", "message": "Gather plan node auxiliary statistics separately\n\nGather auxiliary statistics from all operators\ncreated for a given plan node. Previously, auxiliary\nstats were only collected for input and output operators\nfor a given plan node. However, because creation of DynamicFilterSourceOperator\n(input operator for join plan node) is conditional for some task\nHashCollisionPlanNodeStats might be lost.", "committedDate": "2020-11-27T13:39:41Z", "type": "commit"}, {"oid": "9536d74748e538f91e101fa04865ec0052548f6b", "url": "https://github.com/trinodb/trino/commit/9536d74748e538f91e101fa04865ec0052548f6b", "message": "Fix collisions reporting for joins\n\nCollision stats were not correctly reported previously\nfor join operators. Now they are reported like:\n\n Fragment 1 [HASH]\n    CPU: 154.12ms, Scheduled: 339.28ms, Input: 100 rows (9.33kB); per task: avg.: 33.33 std.dev.: 0.47, Output: 125 rows (13.67kB)\n    Output layout: [nationkey, regionkey, nationkey_0, name_1, comment_3]\n    Output partitioning: SINGLE []\n    Stage Execution Strategy: UNGROUPED_EXECUTION\n    InnerJoin[(\"regionkey\" = \"regionkey_2\")][$hashvalue_7, $hashvalue_8]\n    \u2502   Layout: [nationkey:bigint, regionkey:bigint, nationkey_0:bigint, name_1:varchar(25), comment_3:varchar(152)]\n    \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502   CPU: 90.00ms (40.36%), Scheduled: 194.00ms (35.79%), Output: 125 rows (13.67kB)\n    \u2502   Left (probe) Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502   Right (build) Input avg.: 6.25 rows, Input std.dev.: 87.18%\n    \u2502   Collisions avg.: 5.64 (100.00% est.), Collisions std.dev.: 0.00%\n    \u2502   Distribution: REPLICATED\n    \u2502   dynamicFilterAssignments = {regionkey_2 -> #df_385}\n\nAggregation collision stats are reported like:\n\n    \u2502  \u2514\u2500 Aggregate(FINAL)[nationkey, regionkey][$hashvalue]\n    \u2502     \u2502   Layout: [nationkey:bigint, regionkey:bigint, $hashvalue:bigint]\n    \u2502     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502     \u2502   CPU: 26.00ms (11.66%), Scheduled: 57.00ms (10.52%), Output: 25 rows (675B)\n    \u2502     \u2502   Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502     \u2502   Collisions avg.: 0.00 (100.00% est.), Collisions std.dev.: 0.00%", "committedDate": "2020-11-27T20:53:35Z", "type": "commit"}, {"oid": "9536d74748e538f91e101fa04865ec0052548f6b", "url": "https://github.com/trinodb/trino/commit/9536d74748e538f91e101fa04865ec0052548f6b", "message": "Fix collisions reporting for joins\n\nCollision stats were not correctly reported previously\nfor join operators. Now they are reported like:\n\n Fragment 1 [HASH]\n    CPU: 154.12ms, Scheduled: 339.28ms, Input: 100 rows (9.33kB); per task: avg.: 33.33 std.dev.: 0.47, Output: 125 rows (13.67kB)\n    Output layout: [nationkey, regionkey, nationkey_0, name_1, comment_3]\n    Output partitioning: SINGLE []\n    Stage Execution Strategy: UNGROUPED_EXECUTION\n    InnerJoin[(\"regionkey\" = \"regionkey_2\")][$hashvalue_7, $hashvalue_8]\n    \u2502   Layout: [nationkey:bigint, regionkey:bigint, nationkey_0:bigint, name_1:varchar(25), comment_3:varchar(152)]\n    \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502   CPU: 90.00ms (40.36%), Scheduled: 194.00ms (35.79%), Output: 125 rows (13.67kB)\n    \u2502   Left (probe) Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502   Right (build) Input avg.: 6.25 rows, Input std.dev.: 87.18%\n    \u2502   Collisions avg.: 5.64 (100.00% est.), Collisions std.dev.: 0.00%\n    \u2502   Distribution: REPLICATED\n    \u2502   dynamicFilterAssignments = {regionkey_2 -> #df_385}\n\nAggregation collision stats are reported like:\n\n    \u2502  \u2514\u2500 Aggregate(FINAL)[nationkey, regionkey][$hashvalue]\n    \u2502     \u2502   Layout: [nationkey:bigint, regionkey:bigint, $hashvalue:bigint]\n    \u2502     \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2502     \u2502   CPU: 26.00ms (11.66%), Scheduled: 57.00ms (10.52%), Output: 25 rows (675B)\n    \u2502     \u2502   Input avg.: 2.08 rows, Input std.dev.: 86.44%\n    \u2502     \u2502   Collisions avg.: 0.00 (100.00% est.), Collisions std.dev.: 0.00%", "committedDate": "2020-11-27T20:53:35Z", "type": "forcePushed"}]}