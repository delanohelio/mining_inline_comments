{"pr_number": 5300, "pr_title": "Copy container logs as single tar archive", "pr_createdAt": "2020-09-25T18:47:08Z", "pr_url": "https://github.com/trinodb/trino/pull/5300", "timeline": [{"oid": "f666b6ee6583c9807aca200bc532851a4c1c5d5e", "url": "https://github.com/trinodb/trino/commit/f666b6ee6583c9807aca200bc532851a4c1c5d5e", "message": "Copy container's logs as a single tar archive", "committedDate": "2020-09-28T19:07:35Z", "type": "commit"}, {"oid": "c0ff5d67b690eb6d0849d5c10e6dcbda01dcb66f", "url": "https://github.com/trinodb/trino/commit/c0ff5d67b690eb6d0849d5c10e6dcbda01dcb66f", "message": "Make more operations async", "committedDate": "2020-09-28T19:18:52Z", "type": "commit"}, {"oid": "086b2276d4d94b18e31fe47f5280839ebd377e18", "url": "https://github.com/trinodb/trino/commit/086b2276d4d94b18e31fe47f5280839ebd377e18", "message": "Remove unnecessary method override", "committedDate": "2020-09-28T19:18:53Z", "type": "commit"}, {"oid": "ca63c780778bed1c0551372425b382ba78e45ae7", "url": "https://github.com/trinodb/trino/commit/ca63c780778bed1c0551372425b382ba78e45ae7", "message": "Close AsyncResultCallback on container stats fetch", "committedDate": "2020-09-28T19:18:53Z", "type": "commit"}, {"oid": "a6e08e1f662795901306ea5f9390c6dd9f31c6df", "url": "https://github.com/trinodb/trino/commit/a6e08e1f662795901306ea5f9390c6dd9f31c6df", "message": "Minor code cleanup", "committedDate": "2020-09-28T19:18:53Z", "type": "commit"}, {"oid": "2e896e07efd309a9f70bf76275fce2d326ab37ce", "url": "https://github.com/trinodb/trino/commit/2e896e07efd309a9f70bf76275fce2d326ab37ce", "message": "Invoke environment listeners asynchronously", "committedDate": "2020-09-28T19:18:53Z", "type": "commit"}, {"oid": "d5f94c782f4ee2386a0a91fbc63dde13c36e6944", "url": "https://github.com/trinodb/trino/commit/d5f94c782f4ee2386a0a91fbc63dde13c36e6944", "message": "Refactor command execution inside the container", "committedDate": "2020-09-28T19:18:53Z", "type": "commit"}, {"oid": "d5f94c782f4ee2386a0a91fbc63dde13c36e6944", "url": "https://github.com/trinodb/trino/commit/d5f94c782f4ee2386a0a91fbc63dde13c36e6944", "message": "Refactor command execution inside the container", "committedDate": "2020-09-28T19:18:53Z", "type": "forcePushed"}, {"oid": "dcb0aba2162baab5c0049a3f6de463fdd088bfe9", "url": "https://github.com/trinodb/trino/commit/dcb0aba2162baab5c0049a3f6de463fdd088bfe9", "message": "Fix running tests on environment startup retry\n\nPreviously it failed to recognize that environment containers were prunned and need to be recreated.", "committedDate": "2020-09-29T08:23:10Z", "type": "commit"}, {"oid": "e9a70552f7ae5494bb02966e5984a23c946343ef", "url": "https://github.com/trinodb/trino/commit/e9a70552f7ae5494bb02966e5984a23c946343ef", "message": "Display container statistics every 30 seconds", "committedDate": "2020-09-29T10:15:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMzg3OQ==", "url": "https://github.com/trinodb/trino/pull/5300#discussion_r496613879", "bodyText": "nit: do not use abbreviation", "author": "losipiuk", "createdAt": "2020-09-29T10:35:07Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/StatisticsFetcher.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.model.MemoryStatsConfig;\n+import com.github.dockerjava.api.model.StatisticNetworksConfig;\n+import com.github.dockerjava.api.model.Statistics;\n+import com.github.dockerjava.core.InvocationBuilder;\n+import io.airlift.log.Logger;\n+import io.airlift.units.DataSize;\n+import net.jodah.failsafe.FailsafeExecutor;\n+import org.testcontainers.DockerClientFactory;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class StatisticsFetcher\n+{\n+    private final DockerContainer container;\n+    private final FailsafeExecutor executor;\n+    private static final Logger log = Logger.get(StatisticsFetcher.class);\n+    private AtomicReference<Stats> lastStats = new AtomicReference<>(new Stats());\n+\n+    public StatisticsFetcher(DockerContainer container, FailsafeExecutor executor)\n+    {\n+        this.container = requireNonNull(container, \"container is null\");\n+        this.executor = requireNonNull(executor, \"executor is null\");\n+    }\n+\n+    public Stats get()\n+    {\n+        if (!container.isRunning()) {\n+            log.warn(\"Could not get statistics for stopped container %s\", container.getLogicalName());\n+            return lastStats.get();\n+        }\n+\n+        try (DockerClient client = DockerClientFactory.lazyClient(); InvocationBuilder.AsyncResultCallback<Statistics> callback = new InvocationBuilder.AsyncResultCallback<>()) {\n+            client.statsCmd(container.getContainerId()).exec(callback);\n+\n+            return lastStats.getAndUpdate(previousStats -> toStats((Statistics) executor.get(callback::awaitResult), previousStats));\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        catch (Exception e) {\n+            log.error(\"Could not fetch container %s statistics: %s\", container.getLogicalName(), getStackTraceAsString(e));\n+            return lastStats.get();\n+        }\n+    }\n+\n+    private Stats toStats(Statistics statistics, Stats previousStats)\n+    {\n+        Stats stats = new Stats();\n+\n+        if (statistics == null || statistics.getCpuStats() == null) {\n+            return previousStats;\n+        }\n+\n+        stats.systemCpuUsage = statistics.getCpuStats().getSystemCpuUsage();\n+        stats.totalCpuUsage = statistics.getCpuStats().getCpuUsage().getTotalUsage();\n+        stats.cpuUsagePerc = 0.0;\n+\n+        if (previousStats.systemCpuUsage != -1 && previousStats.totalCpuUsage != -1) {\n+            double usageCpuDelta = stats.totalCpuUsage - previousStats.totalCpuUsage;\n+            double systemCpuDelta = stats.systemCpuUsage - previousStats.systemCpuUsage;\n+\n+            if (usageCpuDelta > 0.0 && systemCpuDelta > 0.0) {\n+                stats.cpuUsagePerc = usageCpuDelta / systemCpuDelta * statistics.getCpuStats().getCpuUsage().getPercpuUsage().size() * 100;\n+            }\n+        }\n+\n+        MemoryStatsConfig memoryStats = statistics.getMemoryStats();\n+        stats.memoryLimit = DataSize.ofBytes(memoryStats.getLimit()).succinct();\n+        stats.memoryUsage = DataSize.ofBytes(memoryStats.getUsage()).succinct();\n+        stats.memoryMaxUsage = DataSize.ofBytes(memoryStats.getMaxUsage()).succinct();\n+        stats.memoryUsagePerc = 100.0 * memoryStats.getUsage() / memoryStats.getLimit();\n+\n+        stats.pids = statistics.getPidsStats().getCurrent();\n+\n+        Supplier<Stream<StatisticNetworksConfig>> stream = () -> statistics.getNetworks().values().stream();\n+        stats.networkReceived = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+        stats.networkSent = DataSize.ofBytes(stream.get().map(StatisticNetworksConfig::getRxBytes).reduce(0L, Long::sum)).succinct();\n+\n+        return stats;\n+    }\n+\n+    public static class Stats\n+    {\n+        private long systemCpuUsage = -1;\n+        private long totalCpuUsage = -1;\n+        private double cpuUsagePerc;\n+        private double memoryUsagePerc;", "originalCommit": "e9a70552f7ae5494bb02966e5984a23c946343ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}