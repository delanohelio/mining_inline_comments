{"pr_number": 5668, "pr_title": "Make type checks for EXTRACT more precise ", "pr_createdAt": "2020-10-22T23:19:23Z", "pr_url": "https://github.com/trinodb/trino/pull/5668", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0OTI5NQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510749295", "bodyText": "add default branch with throw\nhowever, i think it would be better to impl this logic in the Extrac.Field enum.\nthe enum could take Set<Class<Type>> supportedTypes", "author": "findepi", "createdAt": "2020-10-23T09:16:38Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,56 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2MTYxOQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510961619", "bodyText": "however, i think it would be better to impl this logic in the Extrac.Field enum.\nthe enum could take Set<Class> supportedTypes\n\nThat would make the parser dependent on types. It's structurally not possible (there would be a circular dependency between modules), but also not appropriate, as it's something the AST/Parser is not concerned about.", "author": "martint", "createdAt": "2020-10-23T15:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0OTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTAzNg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510751036", "bodyText": "Please see #5652", "author": "findepi", "createdAt": "2020-10-23T09:19:38Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.Session;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MTI5Ng==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510981296", "bodyText": "I know. That's what prompted me to look into this after realizing like EXTRACT(HOUR FROM DATE '...') don't fail as they should.", "author": "martint", "createdAt": "2020-10-23T15:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTM1Mg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510751352", "bodyText": "uh... the default tz is not the default", "author": "findepi", "createdAt": "2020-10-23T09:20:10Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.Session;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        Session session = testSessionBuilder()\n+                .setTimeZoneKey(TestingSession.DEFAULT_TIME_ZONE_KEY)", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510753691", "bodyText": "in #5614 i decided to test negative cases for one precision only. i guess it could be a bit simplistic... no strong opinion\nyou could test the negative case with a loop for brevity:\nfor precision 0 to 12\n assert \"EXTRACT .. FROM CAST(NULL AS time(precision))\" fails \n\n(message guarantees the failure is NULL-unrelated)", "author": "findepi", "createdAt": "2020-10-23T09:23:53Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/time/TestExtract.java", "diffHunk": "@@ -156,4 +157,284 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testYear()\n+    {\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56')\"))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"line 1:26: Cannot extract YEAR from time(0)\");\n+\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56.1')\"))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"line 1:26: Cannot extract YEAR from time(1)\");\n+\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56.12')\"))", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NTk1Nw==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510965957", "bodyText": "in #5614 i decided to test negative cases for one precision only. i guess it could be a bit simplistic... no strong opinion\n\nIt's important to check all. Otherwise, it's easy for bugs due to type.equals(xxx) to slip by.", "author": "martint", "createdAt": "2020-10-23T15:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2OTUwOQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510969509", "bodyText": "you could test the negative case with a loop for brevity:\n\nLet me give that a try. I tend to prefer the explicit cases because it's 1) easier to step over the code, comment out parts, place breakpoints, etc. to debug specific issues. 2) the tests are more self-evident (although I understand this is subjective)", "author": "martint", "createdAt": "2020-10-23T15:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510754895", "bodyText": "ideally all TestExtract classes should have same order of methods, so we can easily find what is and what is not implemented yet.\nio.prestosql.operator.scalar.timestamptz.TestExtract is the most comprehensive today, and it lays out the method in from longest fields to shortest (year first, then to millis)", "author": "findepi", "createdAt": "2020-10-23T09:25:41Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/time/TestExtract.java", "diffHunk": "@@ -156,4 +157,284 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testYear()", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MzEzOQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510973139", "bodyText": "Except that for date that's overkill. Each test is a one-liner, so it's easier to read if they are all in the same method.", "author": "martint", "createdAt": "2020-10-23T15:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3NzU0OQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510977549", "bodyText": "As a sidenote, we may want to deprecate fields other than year, month, day, hour, minute, second, timezone_hour, timezone_minute and rely on the existing dedicated functions for others. The spec defines EXTRACT as:\n\n<extract expression> operates on a datetime or interval and returns an exact numeric value representing the value of one component of the datetime or interval.\n\nNone of the other \"fields\" we support are really components, but transformations.", "author": "martint", "createdAt": "2020-10-23T15:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ=="}], "type": "inlineReview"}, {"oid": "3b1080cb378cbf3b24cc8170f07a0fca65a3436a", "url": "https://github.com/trinodb/trino/commit/3b1080cb378cbf3b24cc8170f07a0fca65a3436a", "message": "Make classes final", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "302340c57a21bb77bdf588b33c6483722110a60b", "url": "https://github.com/trinodb/trino/commit/302340c57a21bb77bdf588b33c6483722110a60b", "message": "Remove redundant session initalization", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "be5cb413f6312d9e2c0f15a4b62f954c90a66039", "url": "https://github.com/trinodb/trino/commit/be5cb413f6312d9e2c0f15a4b62f954c90a66039", "message": "Make type checks for EXTRACT more precise\n\nPer the SQL specification:\n\n    If <extract field> is a <primary datetime field>, then it shall identify\n    a <primary datetime field> of the <interval value expression> or\n    <datetime value expression> immediately contained in <extract source>.", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509", "url": "https://github.com/trinodb/trino/commit/95773cd4f7194fea98a0f857eadcaa7dee06f509", "message": "Add support for EXTRACT TIMEZONE_HOUR/MINUTE for time w/ tz", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509", "url": "https://github.com/trinodb/trino/commit/95773cd4f7194fea98a0f857eadcaa7dee06f509", "message": "Add support for EXTRACT TIMEZONE_HOUR/MINUTE for time w/ tz", "committedDate": "2020-10-28T00:45:39Z", "type": "forcePushed"}]}