{"pr_number": 5727, "pr_title": "Improve InternalHiveSplitFactory#checkBlocks error message", "pr_createdAt": "2020-10-28T15:17:23Z", "pr_url": "https://github.com/trinodb/trino/pull/5727", "timeline": [{"oid": "56586cc425603a010577394109cdcddd5f003978", "url": "https://github.com/trinodb/trino/commit/56586cc425603a010577394109cdcddd5f003978", "message": "Improve InternalHiveSplitFactory#checkBlocks error message", "committedDate": "2020-10-28T16:00:53Z", "type": "commit"}, {"oid": "56586cc425603a010577394109cdcddd5f003978", "url": "https://github.com/trinodb/trino/commit/56586cc425603a010577394109cdcddd5f003978", "message": "Improve InternalHiveSplitFactory#checkBlocks error message", "committedDate": "2020-10-28T16:00:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5MDU2MQ==", "url": "https://github.com/trinodb/trino/pull/5727#discussion_r513590561", "bodyText": "minor suggestion: also include index i in the error message? feel free to drop this if the block-end values seems sufficient.", "author": "phd3", "createdAt": "2020-10-28T16:33:18Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/InternalHiveSplitFactory.java", "diffHunk": "@@ -224,14 +224,30 @@ public String getPartitionName()\n                 acidInfo));\n     }\n \n-    private static void checkBlocks(List<InternalHiveBlock> blocks, long start, long length)\n+    private static void checkBlocks(Path path, List<InternalHiveBlock> blocks, long start, long length)\n     {\n-        checkArgument(length >= 0);\n-        checkArgument(!blocks.isEmpty());\n-        checkArgument(start == blocks.get(0).getStart());\n-        checkArgument(start + length == blocks.get(blocks.size() - 1).getEnd());\n+        checkArgument(start >= 0, \"Split (%s) has negative start (%s)\", path, start);\n+        checkArgument(length >= 0, \"Split (%s) has negative length (%s)\", path, length);\n+        checkArgument(!blocks.isEmpty(), \"Split (%s) has no blocks\", path);\n+        checkArgument(\n+                start == blocks.get(0).getStart(),\n+                \"Split (%s) start (%s) does not match first block start (%s)\",\n+                path,\n+                start,\n+                blocks.get(0).getStart());\n+        checkArgument(\n+                start + length == blocks.get(blocks.size() - 1).getEnd(),\n+                \"Split (%s) end (%s) does not match last block end (%s)\",\n+                path,\n+                start + length,\n+                blocks.get(blocks.size() - 1).getEnd());\n         for (int i = 1; i < blocks.size(); i++) {\n-            checkArgument(blocks.get(i - 1).getEnd() == blocks.get(i).getStart());\n+            checkArgument(\n+                    blocks.get(i - 1).getEnd() == blocks.get(i).getStart(),\n+                    \"Split (%s) block end (%s) does not match next block start (%s)\",", "originalCommit": "56586cc425603a010577394109cdcddd5f003978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}