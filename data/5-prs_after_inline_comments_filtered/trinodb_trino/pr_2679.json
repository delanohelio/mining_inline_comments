{"pr_number": 2679, "pr_title": "Rubix integration", "pr_createdAt": "2020-01-30T11:50:43Z", "pr_url": "https://github.com/trinodb/trino/pull/2679", "timeline": [{"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "url": "https://github.com/trinodb/trino/commit/1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "message": "Rubix integration", "committedDate": "2020-03-06T04:50:22Z", "type": "commit"}, {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "url": "https://github.com/trinodb/trino/commit/1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "message": "Rubix integration", "committedDate": "2020-03-06T04:50:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMzcwOQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r388733709", "bodyText": "fs.wasbs.impl missing here ?", "author": "raunaqmorarka", "createdAt": "2020-03-06T06:34:26Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.prestosql.CachingPrestoGoogleHadoopFileSystem;\n+import com.qubole.rubix.prestosql.CachingPrestoNativeAzureFileSystem;\n+import com.qubole.rubix.prestosql.CachingPrestoS3FileSystem;\n+import com.qubole.rubix.prestosql.PrestoClusterManager;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.HostAddress;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.qubole.rubix.spi.CacheConfig.enableHeartbeat;\n+import static com.qubole.rubix.spi.CacheConfig.setBookKeeperServerPort;\n+import static com.qubole.rubix.spi.CacheConfig.setCacheDataDirPrefix;\n+import static com.qubole.rubix.spi.CacheConfig.setCacheDataEnabled;\n+import static com.qubole.rubix.spi.CacheConfig.setClusterNodeRefreshTime;\n+import static com.qubole.rubix.spi.CacheConfig.setClusterNodesFetchRetryCount;\n+import static com.qubole.rubix.spi.CacheConfig.setCoordinatorHostName;\n+import static com.qubole.rubix.spi.CacheConfig.setCurrentNodeHostName;\n+import static com.qubole.rubix.spi.CacheConfig.setDataTransferServerPort;\n+import static com.qubole.rubix.spi.CacheConfig.setEmbeddedMode;\n+import static com.qubole.rubix.spi.CacheConfig.setIsParallelWarmupEnabled;\n+import static com.qubole.rubix.spi.CacheConfig.setOnMaster;\n+import static com.qubole.rubix.spi.CacheConfig.setRubixClusterType;\n+import static com.qubole.rubix.spi.CacheConfig.setWorkerNodeInfoExpiryPeriod;\n+import static com.qubole.rubix.spi.ClusterType.PRESTOSQL_CLUSTER_MANAGER;\n+\n+public class RubixConfigurationInitializer\n+        implements ConfigurationInitializer\n+{\n+    private static final String RUBIX_S3_FS_CLASS_NAME = CachingPrestoS3FileSystem.class.getName();\n+    private static final String RUBIX_AZURE_FS_CLASS_NAME = CachingPrestoNativeAzureFileSystem.class.getName();\n+    private static final String RUBIX_GS_FS_CLASS_NAME = CachingPrestoGoogleHadoopFileSystem.class.getName();\n+\n+    private final boolean parallelWarmupEnabled;\n+    private final String cacheLocation;\n+    private final int bookKeeperServerPort;\n+    private final int dataTransferServerPort;\n+\n+    // Configs below are dependent on node joining the cluster\n+    private boolean cacheNotReady = true;\n+    private boolean isMaster;\n+    private HostAddress masterAddress;\n+    private String nodeAddress;\n+\n+    @Inject\n+    public RubixConfigurationInitializer(RubixConfig config)\n+    {\n+        this.parallelWarmupEnabled = config.isParallelWarmupEnabled();\n+        this.cacheLocation = config.getCacheLocation();\n+        this.bookKeeperServerPort = config.getBookKeeperServerPort();\n+        this.dataTransferServerPort = config.getDataTransferServerPort();\n+    }\n+\n+    @Override\n+    public void initializeConfiguration(Configuration config)\n+    {\n+        if (cacheNotReady) {\n+            setCacheDataEnabled(config, false);\n+            return;\n+        }\n+\n+        updateConfiguration(config);\n+    }\n+\n+    public Configuration updateConfiguration(Configuration config)\n+    {\n+        checkState(masterAddress != null, \"masterAddress is not set\");\n+        setCacheDataEnabled(config, true);\n+        setOnMaster(config, isMaster);\n+        setCoordinatorHostName(config, masterAddress.getHostText());\n+        PrestoClusterManager.setPrestoServerPort(config, masterAddress.getPort());\n+        setCurrentNodeHostName(config, nodeAddress);\n+\n+        setIsParallelWarmupEnabled(config, parallelWarmupEnabled);\n+        setCacheDataDirPrefix(config, cacheLocation);\n+        setBookKeeperServerPort(config, bookKeeperServerPort);\n+        setDataTransferServerPort(config, dataTransferServerPort);\n+\n+        setEmbeddedMode(config, true);\n+        setRubixClusterType(config, PRESTOSQL_CLUSTER_MANAGER);\n+        enableHeartbeat(config, false);\n+        setClusterNodeRefreshTime(config, 10);\n+        setClusterNodesFetchRetryCount(config, Integer.MAX_VALUE);\n+        setWorkerNodeInfoExpiryPeriod(config, 1);\n+\n+        config.set(\"fs.s3.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.s3a.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.s3n.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.wasb.impl\", RUBIX_AZURE_FS_CLASS_NAME);", "originalCommit": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}