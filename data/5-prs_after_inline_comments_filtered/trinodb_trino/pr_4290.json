{"pr_number": 4290, "pr_title": "Adding FLUSHING state to tasks and stages", "pr_createdAt": "2020-07-01T06:45:51Z", "pr_url": "https://github.com/trinodb/trino/pull/4290", "timeline": [{"oid": "7fdbb522e4a48a2b1de368b4dbbe3a118ab7848b", "url": "https://github.com/trinodb/trino/commit/7fdbb522e4a48a2b1de368b4dbbe3a118ab7848b", "message": "Add FLUSHING state to tasks and stages", "committedDate": "2020-07-29T16:31:29Z", "type": "commit"}, {"oid": "1304a49136d80e8a7e36783ec1535f085bd6c76a", "url": "https://github.com/trinodb/trino/commit/1304a49136d80e8a7e36783ec1535f085bd6c76a", "message": "Fix imports and cleanup in TestSqlTaskExecution", "committedDate": "2020-07-29T16:39:30Z", "type": "commit"}, {"oid": "d887993088caa0c06332aa05dd1376a931fb7b45", "url": "https://github.com/trinodb/trino/commit/d887993088caa0c06332aa05dd1376a931fb7b45", "message": "Cancel sub stages in FLUSHING state", "committedDate": "2020-07-29T20:07:24Z", "type": "commit"}, {"oid": "d887993088caa0c06332aa05dd1376a931fb7b45", "url": "https://github.com/trinodb/trino/commit/d887993088caa0c06332aa05dd1376a931fb7b45", "message": "Cancel sub stages in FLUSHING state", "committedDate": "2020-07-29T20:07:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NTczMQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462865731", "bodyText": "nit this should be separate commit", "author": "sopel39", "createdAt": "2020-07-30T09:20:09Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskManager.java", "diffHunk": "@@ -110,21 +112,20 @@ public void testSimpleQuery()\n     {\n         try (SqlTaskManager sqlTaskManager = createSqlTaskManager(new TaskManagerConfig())) {\n             TaskId taskId = TASK_ID;\n-            TaskInfo taskInfo = createTask(sqlTaskManager, taskId, ImmutableSet.of(SPLIT), createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds());\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+            createTask(sqlTaskManager, taskId, ImmutableSet.of(SPLIT), createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds());\n \n-            taskInfo = sqlTaskManager.getTaskInfo(taskId);\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+            TaskInfo taskInfo = sqlTaskManager.getTaskInfo(taskId, TaskState.RUNNING).get(1, TimeUnit.SECONDS);\n+            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.FLUSHING);\n \n             BufferResult results = sqlTaskManager.getTaskResults(taskId, OUT, 0, DataSize.of(1, Unit.MEGABYTE)).get();\n-            assertEquals(results.isBufferComplete(), false);\n+            assertFalse(results.isBufferComplete());\n             assertEquals(results.getSerializedPages().size(), 1);\n             assertEquals(results.getSerializedPages().get(0).getPositionCount(), 1);\n \n             for (boolean moreResults = true; moreResults; moreResults = !results.isBufferComplete()) {\n                 results = sqlTaskManager.getTaskResults(taskId, OUT, results.getToken() + results.getSerializedPages().size(), DataSize.of(1, Unit.MEGABYTE)).get();\n             }\n-            assertEquals(results.isBufferComplete(), true);\n+            assertTrue(results.isBufferComplete());", "originalCommit": "7fdbb522e4a48a2b1de368b4dbbe3a118ab7848b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}