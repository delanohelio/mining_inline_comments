{"pr_number": 4846, "pr_title": "Allow INSERT null for SQL Server varbinary type", "pr_createdAt": "2020-08-15T14:14:05Z", "pr_url": "https://github.com/trinodb/trino/pull/4846", "timeline": [{"oid": "034fd8500c77d7a6ba3a40935d2e775907b6f642", "url": "https://github.com/trinodb/trino/commit/034fd8500c77d7a6ba3a40935d2e775907b6f642", "message": "Allow INSERT null for SQL Server varbinary type", "committedDate": "2020-08-23T02:16:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzI5Mg==", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r476337292", "bodyText": "make this first", "author": "findepi", "createdAt": "2020-08-25T10:13:05Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerTypeMapping.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.testing.datatype.CreateAsSelectDataSetup;\n+import io.prestosql.testing.datatype.DataSetup;\n+import io.prestosql.testing.datatype.DataType;\n+import io.prestosql.testing.datatype.DataTypeTest;\n+import io.prestosql.testing.sql.PrestoSqlExecutor;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.plugin.sqlserver.SqlServerQueryRunner.createSqlServerQueryRunner;\n+import static io.prestosql.testing.datatype.DataType.varbinaryDataType;\n+import static java.nio.charset.StandardCharsets.UTF_16LE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class TestSqlServerTypeMapping\n+        extends AbstractTestQueryFramework\n+{\n+    private TestingSqlServer sqlServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        sqlServer = new TestingSqlServer();\n+        sqlServer.start();\n+        return createSqlServerQueryRunner(\n+                sqlServer,\n+                ImmutableMap.of(),\n+                ImmutableList.of());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        sqlServer.close();\n+    }\n+\n+    @Test\n+    public void testVarbinary()\n+    {\n+        varbinaryTestCases(varbinaryDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"test_varbinary\"));\n+    }\n+\n+    private static DataTypeTest varbinaryTestCases(DataType<byte[]> varbinaryDataType)\n+    {\n+        return DataTypeTest.create()\n+                .addRoundTrip(varbinaryDataType, \"hello\".getBytes(UTF_8))\n+                .addRoundTrip(varbinaryDataType, \"Pi\u0119kna \u0142\u0105ka w \u6771\u4eac\u90fd\".getBytes(UTF_8))\n+                .addRoundTrip(varbinaryDataType, \"Bag full of \ud83d\udcb0\".getBytes(UTF_16LE))\n+                .addRoundTrip(varbinaryDataType, null)", "originalCommit": "034fd8500c77d7a6ba3a40935d2e775907b6f642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzM4MQ==", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r476337381", "bodyText": "no need for a method, you can inline with test body", "author": "findepi", "createdAt": "2020-08-25T10:13:16Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerTypeMapping.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.testing.datatype.CreateAsSelectDataSetup;\n+import io.prestosql.testing.datatype.DataSetup;\n+import io.prestosql.testing.datatype.DataType;\n+import io.prestosql.testing.datatype.DataTypeTest;\n+import io.prestosql.testing.sql.PrestoSqlExecutor;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.plugin.sqlserver.SqlServerQueryRunner.createSqlServerQueryRunner;\n+import static io.prestosql.testing.datatype.DataType.varbinaryDataType;\n+import static java.nio.charset.StandardCharsets.UTF_16LE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class TestSqlServerTypeMapping\n+        extends AbstractTestQueryFramework\n+{\n+    private TestingSqlServer sqlServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        sqlServer = new TestingSqlServer();\n+        sqlServer.start();\n+        return createSqlServerQueryRunner(\n+                sqlServer,\n+                ImmutableMap.of(),\n+                ImmutableList.of());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        sqlServer.close();\n+    }\n+\n+    @Test\n+    public void testVarbinary()\n+    {\n+        varbinaryTestCases(varbinaryDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"test_varbinary\"));\n+    }\n+\n+    private static DataTypeTest varbinaryTestCases(DataType<byte[]> varbinaryDataType)", "originalCommit": "034fd8500c77d7a6ba3a40935d2e775907b6f642", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1edb1fd889436695a3227046b515dc4aadcadf35", "url": "https://github.com/trinodb/trino/commit/1edb1fd889436695a3227046b515dc4aadcadf35", "message": "Allow INSERT null for SQL Server varbinary type", "committedDate": "2020-09-13T01:05:07Z", "type": "commit"}, {"oid": "1edb1fd889436695a3227046b515dc4aadcadf35", "url": "https://github.com/trinodb/trino/commit/1edb1fd889436695a3227046b515dc4aadcadf35", "message": "Allow INSERT null for SQL Server varbinary type", "committedDate": "2020-09-13T01:05:07Z", "type": "forcePushed"}]}