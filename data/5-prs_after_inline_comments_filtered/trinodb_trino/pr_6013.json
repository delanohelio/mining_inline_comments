{"pr_number": 6013, "pr_title": "Improve handling of NaN in comparisons", "pr_createdAt": "2020-11-19T07:22:55Z", "pr_url": "https://github.com/trinodb/trino/pull/6013", "timeline": [{"oid": "986dc7637cae318364f7f8a72afcf4f2c70b4ca7", "url": "https://github.com/trinodb/trino/commit/986dc7637cae318364f7f8a72afcf4f2c70b4ca7", "message": "Remove unused BlockPositionComparison.reversed()", "committedDate": "2021-09-04T02:29:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzgyMTg5MA==", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703821890", "bodyText": "Add a comment explaining why this is ok.", "author": "martint", "createdAt": "2021-09-07T20:52:28Z", "path": "core/trino-spi/src/main/java/io/trino/spi/type/TypeOperators.java", "diffHunk": "@@ -245,11 +255,24 @@ private OperatorMethodHandle selectOperatorMethodHandleToAdapt(OperatorConventio\n                         return List.of(defaultIndeterminateOperator(operatorConvention.getType().getJavaType()));\n                     }\n                     return indeterminateOperators;\n-                case COMPARISON:\n+                case COMPARISON_UNORDERED_LAST:\n                     if (operatorConvention.getSortOrder().isPresent()) {\n                         return List.of(generateOrderingOperator(operatorConvention));\n                     }\n-                    return typeOperatorDeclaration.getComparisonOperators();\n+                    Collection<OperatorMethodHandle> comparisonUnorderedLastOperators = typeOperatorDeclaration.getComparisonUnorderedLastOperators();\n+                    if (comparisonUnorderedLastOperators.isEmpty()) {\n+                        return typeOperatorDeclaration.getComparisonUnorderedFirstOperators();", "originalCommit": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzgyNDEzMA==", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703824130", "bodyText": "In every place where the choice is arbitrary, we should have a comment so that future readers can understand why a choice was made. Or introduce a constant or method that makes the choice of a comparison that doesn't care whether unorderable values go explicit.", "author": "martint", "createdAt": "2021-09-07T20:56:21Z", "path": "core/trino-main/src/main/java/io/trino/operator/SimplePagesHashStrategy.java", "diffHunk": "@@ -60,7 +60,7 @@ public SimplePagesHashStrategy(\n     {\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n         this.comparisonOperators = types.stream()\n-                .map(type -> type.isOrderable() ? Optional.of(blockTypeOperators.getComparisonOperator(type)) : Optional.<BlockPositionComparison>empty())\n+                .map(type -> type.isOrderable() ? Optional.of(blockTypeOperators.getComparisonUnorderedLastOperator(type)) : Optional.<BlockPositionComparison>empty())", "originalCommit": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzg5NTEzMA==", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703895130", "bodyText": "Add some documentation about what \"unordered last/first\" means", "author": "martint", "createdAt": "2021-09-07T22:28:03Z", "path": "core/trino-spi/src/main/java/io/trino/spi/function/OperatorType.java", "diffHunk": "@@ -22,7 +22,8 @@\n     MODULUS(\"%\", 2),\n     NEGATION(\"-\", 1),\n     EQUAL(\"=\", 2),\n-    COMPARISON(\"COMPARISON\", 2),\n+    COMPARISON_UNORDERED_LAST(\"COMPARISON_UNORDERED_LAST\", 2),", "originalCommit": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMzg5NjEwNg==", "url": "https://github.com/trinodb/trino/pull/6013#discussion_r703896106", "bodyText": "This operator for the boolean type doesn't really deal with unordered values (since there's no such a thing for booleans), so the fact that it's being declared as \"unordered last\" is a bit misleading.", "author": "martint", "createdAt": "2021-09-07T22:30:27Z", "path": "core/trino-spi/src/main/java/io/trino/spi/type/BooleanType.java", "diffHunk": "@@ -154,7 +154,7 @@ private static long xxHash64Operator(boolean value)\n         return value ? TRUE_XX_HASH : FALSE_XX_HASH;\n     }\n \n-    @ScalarOperator(COMPARISON)\n+    @ScalarOperator(COMPARISON_UNORDERED_LAST)", "originalCommit": "e1c0fa6ce7cda8c5c4a12a8ef26a6c7a4035b00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07bc1ff5b67c13e6acc83def7200c9664c7cb394", "url": "https://github.com/trinodb/trino/commit/07bc1ff5b67c13e6acc83def7200c9664c7cb394", "message": "Split comparison into unordered first and last", "committedDate": "2021-10-09T03:32:15Z", "type": "commit"}, {"oid": "cf1a0c254eccb61099bcffa397c9b928c5f151a2", "url": "https://github.com/trinodb/trino/commit/cf1a0c254eccb61099bcffa397c9b928c5f151a2", "message": "Convert min/max by N aggregation to MinMaxCompare helper", "committedDate": "2021-10-09T03:32:17Z", "type": "commit"}, {"oid": "381c5e351ec5dfbfae8cc58ab0cf14fce99f8c81", "url": "https://github.com/trinodb/trino/commit/381c5e351ec5dfbfae8cc58ab0cf14fce99f8c81", "message": "Convert min/max N aggregation to MinMaxCompare helper", "committedDate": "2021-10-09T03:32:30Z", "type": "commit"}, {"oid": "41a2620ddd7dbd0e558dc3324d6be54b4d07b30e", "url": "https://github.com/trinodb/trino/commit/41a2620ddd7dbd0e558dc3324d6be54b4d07b30e", "message": "Remove unused BlockPositionComparison.reversed()", "committedDate": "2021-10-09T03:32:31Z", "type": "commit"}, {"oid": "41a2620ddd7dbd0e558dc3324d6be54b4d07b30e", "url": "https://github.com/trinodb/trino/commit/41a2620ddd7dbd0e558dc3324d6be54b4d07b30e", "message": "Remove unused BlockPositionComparison.reversed()", "committedDate": "2021-10-09T03:32:31Z", "type": "forcePushed"}]}