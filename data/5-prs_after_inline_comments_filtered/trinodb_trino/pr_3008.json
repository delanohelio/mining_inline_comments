{"pr_number": 3008, "pr_title": "Filter out Hive information_schema and sys", "pr_createdAt": "2020-03-05T12:51:37Z", "pr_url": "https://github.com/trinodb/trino/pull/3008", "timeline": [{"oid": "c0d69ec306471822b742070b86f2fe796d460610", "url": "https://github.com/trinodb/trino/commit/c0d69ec306471822b742070b86f2fe796d460610", "message": "Filter out Hive information_schema and sys\n\n`information_schema` will be inaccessible anyway.\n\n`sys` could be accessible, but\n- it doesn't work (contains JdbcStorageHandler tables and Hive views)\n- exposing it may require proper handling in access control.", "committedDate": "2020-03-05T15:37:34Z", "type": "commit"}, {"oid": "c0d69ec306471822b742070b86f2fe796d460610", "url": "https://github.com/trinodb/trino/commit/c0d69ec306471822b742070b86f2fe796d460610", "message": "Filter out Hive information_schema and sys\n\n`information_schema` will be inaccessible anyway.\n\n`sys` could be accessible, but\n- it doesn't work (contains JdbcStorageHandler tables and Hive views)\n- exposing it may require proper handling in access control.", "committedDate": "2020-03-05T15:37:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMTk4MQ==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388831981", "bodyText": "What do you mean by: exposing it may require proper handling in access control.? What is sys schema?", "author": "kokosing", "createdAt": "2020-03-06T10:40:42Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)\n+    {\n+        if (\"information_schema\".equals(schemaName)) {\n+            // For things like listing columns in information_schema.columns table, we need to explicitly filter out Hive's own information_schema.\n+            // TODO https://github.com/prestosql/presto/issues/1559 this should be filtered out in engine.\n+            return false;\n+        }\n+        if (\"sys\".equals(schemaName)) {\n+            // Hive 3's `sys` schema contains no objects we can handle, so there is no point in exposing it.\n+            // Also, exposing it may require proper handling in access control.", "originalCommit": "c0d69ec306471822b742070b86f2fe796d460610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyODYxMw==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388928613", "bodyText": "sys contains table paramters, partition paramters, some stats, etc.", "author": "findepi", "createdAt": "2020-03-06T14:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMTk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMjMyNA==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388832324", "bodyText": "I would put this method under the last usage.", "author": "kokosing", "createdAt": "2020-03-06T10:41:25Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -646,11 +651,29 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n     private List<String> listSchemas(ConnectorSession session, Optional<String> schemaName)\n     {\n         if (schemaName.isPresent()) {\n+            if (!filterSchema(schemaName.get())) {\n+                return ImmutableList.of();\n+            }\n             return ImmutableList.of(schemaName.get());\n         }\n         return listSchemaNames(session);\n     }\n \n+    private static boolean filterSchema(String schemaName)", "originalCommit": "c0d69ec306471822b742070b86f2fe796d460610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyOTIxMw==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388929213", "bodyText": "right", "author": "findepi", "createdAt": "2020-03-06T14:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMjMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMzIyOQ==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388833229", "bodyText": "this is going to be called before each test.  Maybe you could have a variable that would not create this table if it is already created, then tearDown could be removed. WDYT?", "author": "kokosing", "createdAt": "2020-03-06T10:43:29Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");", "originalCommit": "c0d69ec306471822b742070b86f2fe796d460610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyOTU2NA==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388929564", "bodyText": "in general -- i agree\nit's tiny overhead compared to the number of test queries. i choose to ignore this", "author": "findepi", "createdAt": "2020-03-06T14:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzMzIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDE1NQ==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388834155", "bodyText": "It is a pity that this is a product test. After #3009 we could write \"unit\" test, but still it is not going to be much faster, but it would be easier to run tests from IDE.", "author": "kokosing", "createdAt": "2020-03-06T10:45:42Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema", "originalCommit": "c0d69ec306471822b742070b86f2fe796d460610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMDEwOA==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388930108", "bodyText": "it's a necessity that there is a product test. i want to run with HMS whether information_schema/sys exists and where it doesn't\nit would be good to have a unit test too though. out of scope", "author": "findepi", "createdAt": "2020-03-06T14:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDU0MQ==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388834541", "bodyText": "static import", "author": "kokosing", "createdAt": "2020-03-06T10:46:28Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");\n+        onPresto().executeQuery(\"CREATE TABLE hive.default.test_sys_schema_disabled_table_in_default(a bigint)\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void tearDown()\n+    {\n+        onPresto().executeQuery(\"DROP TABLE hive.default.test_sys_schema_disabled_table_in_default\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testSysSchemaFilteredOut()\n+    {\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // SHOW TABLES\n+        assertThat(() -> onPresto().executeQuery(\"SHOW TABLES FROM hive.sys\"))\n+                .failsWithMessage(\"line 1:1: Schema 'sys' does not exist\");\n+\n+        // SHOW COLUMNS\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.columns WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT column_name FROM information_schema.columns WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.table_privileges -- it has a special handling path in metadata, which also depends on query predicates\n+        if (tablePrivilegesSupported()) {\n+            assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.table_privileges\"))\n+                    .doesNotHave(containsFirstColumnValue(\"information_schema\"))\n+                    .satisfies(containsFirstColumnValue(\"default\"))\n+                    .doesNotHave(containsFirstColumnValue(\"sys\"));\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys'\"))\n+                    .hasNoRows();\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                    .hasNoRows();\n+        }\n+\n+        // SELECT\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `information_schema` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testHiveInformationSchemaFilteredOut()\n+    {\n+        List<String> allInformationSchemaTables = ImmutableList.<String>builder()\n+                // In particular, no column_privileges which exists in Hive 3's information_schema\n+                .add(\"columns\")\n+                .add(\"tables\")\n+                .add(\"views\")\n+                .add(\"schemata\")\n+                .add(\"table_privileges\")\n+                .add(\"roles\")\n+                .add(\"applicable_roles\")\n+                .add(\"enabled_roles\")\n+                .build();\n+        List<QueryAssert.Row> allInformationSchemaTablesAsRows = allInformationSchemaTables.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // This test is run in various setups and we may or may not have access to hive.information_schema.roles table\n+        List<String> allInformationSchemaTablesExceptRoles = allInformationSchemaTables.stream()\n+                .filter(tableName -> !tableName.equals(\"roles\"))\n+                .collect(toImmutableList());\n+        List<QueryAssert.Row> allInformationSchemaTablesExceptRolesAsRows = allInformationSchemaTablesExceptRoles.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // SHOW TABLES\n+        assertThat(onPresto().executeQuery(\"SHOW TABLES FROM hive.information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"tables\"))\n+                .satisfies(containsFirstColumnValue(\"columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_privileges\"))\n+                .doesNotHave(containsFirstColumnValue(\"column_privileges\")); // Hive 3's information_schema has column_privileges view\n+\n+        // SHOW COLUMNS\n+        assertThat(onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(onPresto().executeQuery(\"DESCRIBE hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .satisfies(containsFirstColumnValue(\"column_name\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema'\"))\n+                .containsOnly(allInformationSchemaTablesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name FROM information_schema.tables\").rows().stream()", "originalCommit": "c0d69ec306471822b742070b86f2fe796d460610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMDU5Mg==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388930592", "bodyText": "static import\n\nassertThat?\nI use tempto QueryAssert.assertThat and assertj Assertions.assertThat -- it happens; not pretty; we already do this in other tests", "author": "findepi", "createdAt": "2020-03-06T14:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNDU5Ng==", "url": "https://github.com/trinodb/trino/pull/3008#discussion_r388834596", "bodyText": "static import", "author": "kokosing", "createdAt": "2020-03-06T10:46:35Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveSchema.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.STORAGE_FORMATS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestHiveSchema\n+        extends ProductTest\n+{\n+    @BeforeTestWithContext\n+    public void setUp()\n+    {\n+        // make sure hive.default schema is not empty\n+        onPresto().executeQuery(\"DROP TABLE IF EXISTS hive.default.test_sys_schema_disabled_table_in_default\");\n+        onPresto().executeQuery(\"CREATE TABLE hive.default.test_sys_schema_disabled_table_in_default(a bigint)\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void tearDown()\n+    {\n+        onPresto().executeQuery(\"DROP TABLE hive.default.test_sys_schema_disabled_table_in_default\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `sys` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testSysSchemaFilteredOut()\n+    {\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // SHOW TABLES\n+        assertThat(() -> onPresto().executeQuery(\"SHOW TABLES FROM hive.sys\"))\n+                .failsWithMessage(\"line 1:1: Schema 'sys' does not exist\");\n+\n+        // SHOW COLUMNS\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.version' does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:1: Table 'hive.sys.table_params' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"default\"))\n+                .doesNotHave(containsFirstColumnValue(\"sys\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.columns WHERE table_schema = 'sys'\"))\n+                .hasNoRows();\n+        assertThat(onPresto().executeQuery(\"SELECT column_name FROM information_schema.columns WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                .hasNoRows();\n+\n+        // information_schema.table_privileges -- it has a special handling path in metadata, which also depends on query predicates\n+        if (tablePrivilegesSupported()) {\n+            assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.table_privileges\"))\n+                    .doesNotHave(containsFirstColumnValue(\"information_schema\"))\n+                    .satisfies(containsFirstColumnValue(\"default\"))\n+                    .doesNotHave(containsFirstColumnValue(\"sys\"));\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys'\"))\n+                    .hasNoRows();\n+            assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.table_privileges WHERE table_schema = 'sys' AND table_name = 'version'\")) // sys.version exists in Hive 3\n+                    .hasNoRows();\n+        }\n+\n+        // SELECT\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.version\")) // sys.version exists in Hive 3 and is a view\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+        assertThat(() -> onPresto().executeQuery(\"SELECT * FROM hive.sys.table_params\")) // sys.table_params exists in Hive 3 and is a table\n+                .failsWithMessage(\"line 1:15: Schema sys does not exist\");\n+    }\n+\n+    // Note: this test is run on various Hive versions. Hive before 3 did not have `information_schema` schema, but it does not hurt to run the test there too.\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testHiveInformationSchemaFilteredOut()\n+    {\n+        List<String> allInformationSchemaTables = ImmutableList.<String>builder()\n+                // In particular, no column_privileges which exists in Hive 3's information_schema\n+                .add(\"columns\")\n+                .add(\"tables\")\n+                .add(\"views\")\n+                .add(\"schemata\")\n+                .add(\"table_privileges\")\n+                .add(\"roles\")\n+                .add(\"applicable_roles\")\n+                .add(\"enabled_roles\")\n+                .build();\n+        List<QueryAssert.Row> allInformationSchemaTablesAsRows = allInformationSchemaTables.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // This test is run in various setups and we may or may not have access to hive.information_schema.roles table\n+        List<String> allInformationSchemaTablesExceptRoles = allInformationSchemaTables.stream()\n+                .filter(tableName -> !tableName.equals(\"roles\"))\n+                .collect(toImmutableList());\n+        List<QueryAssert.Row> allInformationSchemaTablesExceptRolesAsRows = allInformationSchemaTablesExceptRoles.stream()\n+                .map(QueryAssert.Row::row)\n+                .collect(toImmutableList());\n+\n+        // SHOW SCHEMAS\n+        assertThat(onPresto().executeQuery(\"SHOW SCHEMAS FROM hive\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // SHOW TABLES\n+        assertThat(onPresto().executeQuery(\"SHOW TABLES FROM hive.information_schema\"))\n+                .satisfies(containsFirstColumnValue(\"tables\"))\n+                .satisfies(containsFirstColumnValue(\"columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_privileges\"))\n+                .doesNotHave(containsFirstColumnValue(\"column_privileges\")); // Hive 3's information_schema has column_privileges view\n+\n+        // SHOW COLUMNS\n+        assertThat(onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"SHOW COLUMNS FROM hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // DESCRIBE\n+        assertThat(onPresto().executeQuery(\"DESCRIBE hive.information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"table_catalog\"))\n+                .satisfies(containsFirstColumnValue(\"table_schema\"))\n+                .satisfies(containsFirstColumnValue(\"column_name\"))\n+                .doesNotHave(containsFirstColumnValue(\"is_updatable\")); // Hive 3's information_schema.columns has is_updatable column\n+\n+        assertThat(() -> onPresto().executeQuery(\"DESCRIBE hive.information_schema.column_privileges\")) // Hive 3's information_schema has column_privileges view\n+                .failsWithMessage(\"line 1:1: Table 'hive.information_schema.column_privileges' does not exist\");\n+\n+        // information_schema.schemata\n+        assertThat(onPresto().executeQuery(\"SELECT schema_name FROM information_schema.schemata\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+\n+        // information_schema.tables\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.tables\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema'\"))\n+                .containsOnly(allInformationSchemaTablesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name FROM information_schema.tables\").rows().stream()\n+                .filter(row -> row.get(0).equals(\"information_schema\"))\n+                .map(row -> (String) row.get(1)))\n+                .containsOnly(allInformationSchemaTables.toArray(new String[0]));\n+        // information_schema.column_privileges exists in Hive 3\n+        assertThat(onPresto().executeQuery(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'information_schema' AND table_name = 'column_privileges'\"))\n+                .hasNoRows();\n+\n+        // information_schema.columns -- it has a special handling path in metadata, which also depends on query predicates\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_schema FROM information_schema.columns\"))\n+                .satisfies(containsFirstColumnValue(\"information_schema\"));\n+        assertThat(onPresto().executeQuery(\"SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'information_schema' AND table_name != 'roles'\"))\n+                .containsOnly(allInformationSchemaTablesExceptRolesAsRows);\n+        Assertions.assertThat(onPresto().executeQuery(\"SELECT table_schema, table_name, column_name FROM information_schema.columns\").rows().stream()", "originalCommit": "c0d69ec306471822b742070b86f2fe796d460610", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac1b60289c684f9bab235526d4bfda578c86703d", "url": "https://github.com/trinodb/trino/commit/ac1b60289c684f9bab235526d4bfda578c86703d", "message": "Run storage_formats for kerberized HDFS without impersonation", "committedDate": "2020-03-09T11:57:52Z", "type": "commit"}, {"oid": "ac1b60289c684f9bab235526d4bfda578c86703d", "url": "https://github.com/trinodb/trino/commit/ac1b60289c684f9bab235526d4bfda578c86703d", "message": "Run storage_formats for kerberized HDFS without impersonation", "committedDate": "2020-03-09T11:57:52Z", "type": "forcePushed"}]}