{"pr_number": 6167, "pr_title": "Make CachingJdbcClient caches session-aware and fix caches invalidation", "pr_createdAt": "2020-12-01T12:52:39Z", "pr_url": "https://github.com/trinodb/trino/pull/6167", "timeline": [{"oid": "1f07289404d04132fb43da0af40087cf349e5f85", "url": "https://github.com/trinodb/trino/commit/1f07289404d04132fb43da0af40087cf349e5f85", "message": "Make session properties part of ColumnsCacheKey", "committedDate": "2020-12-09T12:36:42Z", "type": "commit"}, {"oid": "1076951f7fd5d632268ece0925e3a2449a30111d", "url": "https://github.com/trinodb/trino/commit/1076951f7fd5d632268ece0925e3a2449a30111d", "message": "Invalidate caches for given SchemaTableName only", "committedDate": "2020-12-09T13:59:06Z", "type": "commit"}, {"oid": "efcacb03347deeb828cfc20ec429284f561eed24", "url": "https://github.com/trinodb/trino/commit/efcacb03347deeb828cfc20ec429284f561eed24", "message": "Verify that columns are loaded and cached", "committedDate": "2020-12-09T13:59:06Z", "type": "commit"}, {"oid": "e0dba7073e9ee6de27c62064e6f9e5306c641a99", "url": "https://github.com/trinodb/trino/commit/e0dba7073e9ee6de27c62064e6f9e5306c641a99", "message": "Disable cache entirely when ttl is 0ms", "committedDate": "2020-12-09T13:59:07Z", "type": "commit"}, {"oid": "e0dba7073e9ee6de27c62064e6f9e5306c641a99", "url": "https://github.com/trinodb/trino/commit/e0dba7073e9ee6de27c62064e6f9e5306c641a99", "message": "Disable cache entirely when ttl is 0ms", "committedDate": "2020-12-09T13:59:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTM3NA==", "url": "https://github.com/trinodb/trino/pull/6167#discussion_r540351374", "bodyText": "PropertyMetadata<?>", "author": "ssheikin", "createdAt": "2020-12-10T17:18:25Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -346,31 +371,60 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    private Map<String, Object> getSessionProperties(ConnectorSession session)\n+    {\n+        return sessionProperties.stream()\n+                .map(property -> Map.entry(property.getName(), getSessionProperty(session, property)))\n+                .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private static Object getSessionProperty(ConnectorSession session, PropertyMetadata property)", "originalCommit": "e0dba7073e9ee6de27c62064e6f9e5306c641a99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MTkxOQ==", "url": "https://github.com/trinodb/trino/pull/6167#discussion_r540351919", "bodyText": "import java.util.function.Predicate;", "author": "ssheikin", "createdAt": "2020-12-10T17:19:13Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -13,8 +13,12 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Predicate;", "originalCommit": "e0dba7073e9ee6de27c62064e6f9e5306c641a99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NTQ1Ng==", "url": "https://github.com/trinodb/trino/pull/6167#discussion_r540355456", "bodyText": "Key is not @nullable. Please change com.google.common.base.Predicate -> java.util.function.Predicate", "author": "ssheikin", "createdAt": "2020-12-10T17:24:03Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -346,31 +371,60 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    private Map<String, Object> getSessionProperties(ConnectorSession session)\n+    {\n+        return sessionProperties.stream()\n+                .map(property -> Map.entry(property.getName(), getSessionProperty(session, property)))\n+                .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private static Object getSessionProperty(ConnectorSession session, PropertyMetadata property)\n+    {\n+        return firstNonNull(session.getProperty(property.getName(), property.getJavaType()), NULL_MARKER);\n+    }\n+\n     private void invalidateSchemasCache()\n     {\n         schemaNamesCache.invalidateAll();\n     }\n \n-    private void invalidateTablesCaches()\n+    private void invalidateTableCaches(SchemaTableName schemaTableName)\n+    {\n+        invalidateColumnsCache(schemaTableName);\n+        invalidateCache(tableHandleCache, key -> key.tableName.equals(schemaTableName));\n+        invalidateCache(tableNamesCache, key -> key.schemaName.equals(Optional.of(schemaTableName.getSchemaName())));\n+    }\n+\n+    private void invalidateColumnsCache(SchemaTableName table)\n     {\n-        columnsCache.invalidateAll();\n-        tableHandleCache.invalidateAll();\n-        tableNamesCache.invalidateAll();\n+        invalidateCache(columnsCache, key -> key.table.equals(table));\n     }\n \n-    private void invalidateColumnsCache(ConnectorSession session, SchemaTableName table)\n+    @VisibleForTesting\n+    CacheStats getColumnsCacheStats()\n     {\n-        columnsCache.invalidate(new ColumnsCacheKey(JdbcIdentity.from(session), table));\n+        return columnsCache.stats();\n+    }\n+\n+    private static <T, V> void invalidateCache(Cache<T, V> cache, Predicate<T> filterFunction)", "originalCommit": "e0dba7073e9ee6de27c62064e6f9e5306c641a99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}