{"pr_number": 5695, "pr_title": "Add support for variable precision timestamps in Hive array, map, and struct", "pr_createdAt": "2020-10-26T17:57:51Z", "pr_url": "https://github.com/trinodb/trino/pull/5695", "timeline": [{"oid": "6003c6eeefbc32cfb7e615c9f36c99aa2653efd1", "url": "https://github.com/trinodb/trino/commit/6003c6eeefbc32cfb7e615c9f36c99aa2653efd1", "message": "Improve timestamp test cases used in Hive storage format tests\n\n- Update timestamp values\n  - Use values with visually-clearer rounding behavior (like \"1113339\"\n    instead of \"1234567\").\n    - This also includes rounding up from 5 and down from 499.\n  - Add timestamp that round up to the next day/year\n  - Add comments indicating each test's purpose\n\n- Move test data out of timestamp tests\n\n  The TimestampAndPrecision data container uses a static,\n  auto-incrementing ID. Making the data static ensures that the IDs\n  will be the same for each storage format.", "committedDate": "2021-01-05T17:10:12Z", "type": "commit"}, {"oid": "732d42237b47e3e9f94082ba65afd8b997046449", "url": "https://github.com/trinodb/trino/commit/732d42237b47e3e9f94082ba65afd8b997046449", "message": "Allow custom timestamp precision in Hive structural types\n\nAlso, mark methods not taking timestamp precision as deprecated:\n- HiveTypeTranslator.fromPrimitiveType(PrimitiveTypeInfo)\n- HiveType.getTypeSignature()", "committedDate": "2021-01-05T17:21:46Z", "type": "commit"}, {"oid": "426273bdc8585d9b5cd743c9bfe1f6dc9c97330a", "url": "https://github.com/trinodb/trino/commit/426273bdc8585d9b5cd743c9bfe1f6dc9c97330a", "message": "Fix type of TimestampAndPrecision.getPrecision", "committedDate": "2021-01-05T17:21:53Z", "type": "commit"}, {"oid": "4aff1cc9a4aabaeb485be89d9c30dd1a5e0e16d8", "url": "https://github.com/trinodb/trino/commit/4aff1cc9a4aabaeb485be89d9c30dd1a5e0e16d8", "message": "Improve data providers in TestHiveStorageFormats\n\n- Generate list of storage formats with nanosecond precision by\n  filtering the list of all tested storage formats.\n- Use explicit data provider return types (to facilitate the above)\n- Use data provider method names instead of assigning custom names", "committedDate": "2021-01-05T17:21:53Z", "type": "commit"}, {"oid": "4aff1cc9a4aabaeb485be89d9c30dd1a5e0e16d8", "url": "https://github.com/trinodb/trino/commit/4aff1cc9a4aabaeb485be89d9c30dd1a5e0e16d8", "message": "Improve data providers in TestHiveStorageFormats\n\n- Generate list of storage formats with nanosecond precision by\n  filtering the list of all tested storage formats.\n- Use explicit data provider return types (to facilitate the above)\n- Use data provider method names instead of assigning custom names", "committedDate": "2021-01-05T17:21:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMwOTk1Mw==", "url": "https://github.com/trinodb/trino/pull/5695#discussion_r552309953", "bodyText": "Can you do this with VALUES?", "author": "electrum", "createdAt": "2021-01-06T01:18:09Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveStorageFormats.java", "diffHunk": "@@ -543,6 +546,114 @@ private void runTimestampQueries(String tableName, List<TimestampAndPrecision> d\n         onPresto().executeQuery(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test(dataProvider = \"storageFormatsWithNanosecondPrecision\", groups = STORAGE_FORMATS)\n+    public void testStructTimestamps(StorageFormat format)\n+            throws SQLException\n+    {\n+        setAdminRole(onPresto().getConnection());\n+        ensureDummyExists();\n+\n+        String tableName = format(\"test_struct_timestamp_precision_%s_%s\", format.getName().toLowerCase(Locale.ENGLISH), randomTableSuffix());\n+\n+        onPresto().executeQuery(format(\n+                \"CREATE TABLE %s (\"\n+                        + \"   id INTEGER,\"\n+                        + \"   arr ARRAY(TIMESTAMP),\"\n+                        + \"   map MAP(TIMESTAMP, TIMESTAMP),\"\n+                        + \"   row ROW(col TIMESTAMP),\"\n+                        + \"   nested ARRAY(MAP(TIMESTAMP, ROW(col ARRAY(TIMESTAMP))))\"\n+                        + \") WITH (%s)\",\n+                tableName,\n+                format.getStoragePropertiesAsSql()));\n+\n+        // Insert in a loop because inserting with UNION ALL sometimes makes values invisible to Presto", "originalCommit": "732d42237b47e3e9f94082ba65afd8b997046449", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg1NTQ1OQ==", "url": "https://github.com/trinodb/trino/pull/5695#discussion_r552855459", "bodyText": "No, because Hive doesn't allow functions like array and named_struct in VALUES.\n\n\nHive does not support literals for complex types (array, map, struct, union), so it is not possible to use them in INSERT INTO...VALUES clauses. This means that the user cannot insert data into a complex datatype column using the INSERT INTO...VALUES clause.", "author": "jirassimok", "createdAt": "2021-01-06T17:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMwOTk1Mw=="}], "type": "inlineReview"}]}