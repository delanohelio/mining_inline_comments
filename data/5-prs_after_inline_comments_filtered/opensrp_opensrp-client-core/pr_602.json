{"pr_number": 602, "pr_title": "User Service Tests", "pr_createdAt": "2020-07-21T08:27:20Z", "pr_url": "https://github.com/opensrp/opensrp-client-core/pull/602", "timeline": [{"oid": "debca20eec1c18e15bf232f0d33479d87245f895", "url": "https://github.com/opensrp/opensrp-client-core/commit/debca20eec1c18e15bf232f0d33479d87245f895", "message": "Verify forceremote login invocation", "committedDate": "2020-07-14T09:11:46Z", "type": "commit"}, {"oid": "b6b4dd3584861de1b86cd508d5e295986936dce1", "url": "https://github.com/opensrp/opensrp-client-core/commit/b6b4dd3584861de1b86cd508d5e295986936dce1", "message": "Stashed tests", "committedDate": "2020-07-14T10:44:08Z", "type": "commit"}, {"oid": "1dd2456b93ff5377d956296a23d5c4892a138e11", "url": "https://github.com/opensrp/opensrp-client-core/commit/1dd2456b93ff5377d956296a23d5c4892a138e11", "message": "Merge branch 'master' into sg-user-service-test", "committedDate": "2020-07-21T07:09:24Z", "type": "commit"}, {"oid": "969f48e59d4f9d18445ea97581de923fc8151568", "url": "https://github.com/opensrp/opensrp-client-core/commit/969f48e59d4f9d18445ea97581de923fc8151568", "message": "Unit test isUserInValidGroup", "committedDate": "2020-07-21T08:17:54Z", "type": "commit"}, {"oid": "8834994d57c809ff6efa95e4606ceacb98536768", "url": "https://github.com/opensrp/opensrp-client-core/commit/8834994d57c809ff6efa95e4606ceacb98536768", "message": "Unit test GetGroupId", "committedDate": "2020-07-21T08:36:16Z", "type": "commit"}, {"oid": "cccc5e4ff6e3ac4e401ac955f104ffdd3aca1541", "url": "https://github.com/opensrp/opensrp-client-core/commit/cccc5e4ff6e3ac4e401ac955f104ffdd3aca1541", "message": "Unit test isUserInPioneerGroup", "committedDate": "2020-07-21T08:56:08Z", "type": "commit"}, {"oid": "79f04ada4560a61621b6d6682b7f2af11a8b95c4", "url": "https://github.com/opensrp/opensrp-client-core/commit/79f04ada4560a61621b6d6682b7f2af11a8b95c4", "message": "Remove underscore in test method names", "committedDate": "2020-07-27T06:46:34Z", "type": "commit"}, {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18", "url": "https://github.com/opensrp/opensrp-client-core/commit/c35d23eedccc082f52aa7111c1d033e131da7f18", "message": "Merge branch 'master' into sg-user-service-test", "committedDate": "2020-07-27T06:46:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NjQyNQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460686425", "bodyText": "You could use  verifyZeroInteractions instead.", "author": "vincent-karuri", "createdAt": "2020-07-27T07:06:30Z", "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);", "originalCommit": "c35d23eedccc082f52aa7111c1d033e131da7f18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTg5NQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460689895", "bodyText": "Typo?", "author": "vincent-karuri", "createdAt": "2020-07-27T07:14:48Z", "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);\n+    }\n+\n+    @Test\n+    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {", "originalCommit": "c35d23eedccc082f52aa7111c1d033e131da7f18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "url": "https://github.com/opensrp/opensrp-client-core/commit/4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "message": "code cleanup", "committedDate": "2020-07-27T07:33:27Z", "type": "commit"}]}