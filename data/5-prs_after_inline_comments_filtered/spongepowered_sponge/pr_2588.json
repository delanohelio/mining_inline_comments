{"pr_number": 2588, "pr_title": "Implement a basic PlaceholderService", "pr_createdAt": "2020-05-01T17:43:20Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2588", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczODQwOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r418738408", "bodyText": "You violate the api contract here if the receiver is not a command source.", "author": "ST-DDT", "createdAt": "2020-05-01T21:07:31Z", "path": "src/main/java/org/spongepowered/common/registry/type/service/placeholder/PlaceholderParserRegistryModule.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.registry.type.service.placeholder;\n+\n+import org.spongepowered.api.command.CommandSource;\n+import org.spongepowered.api.registry.util.RegisterCatalog;\n+import org.spongepowered.api.service.placeholder.PlaceholderParser;\n+import org.spongepowered.api.service.placeholder.PlaceholderParsers;\n+import org.spongepowered.api.service.placeholder.PlaceholderText;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.world.Locatable;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.registry.SpongeAdditionalCatalogRegistryModule;\n+import org.spongepowered.common.registry.type.AbstractPrefixAlternateCatalogTypeRegistryModule;\n+\n+@RegisterCatalog(PlaceholderParsers.class)\n+public class PlaceholderParserRegistryModule\n+        extends AbstractPrefixAlternateCatalogTypeRegistryModule<PlaceholderParser>\n+        implements SpongeAdditionalCatalogRegistryModule<PlaceholderParser> {\n+\n+    public PlaceholderParserRegistryModule() {\n+        super(\"sponge\");\n+    }\n+\n+    @Override\n+    public boolean allowsApiRegistration() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void registerAdditionalCatalog(PlaceholderParser extraCatalog) {\n+        if (this.getById(extraCatalog.getId()).isPresent()) {\n+            throw new IllegalStateException(\"The ID \" + extraCatalog.getId() + \" has already been registered.\");\n+        }\n+        this.register(extraCatalog);\n+    }\n+\n+    @Override\n+    public void registerDefaults() {\n+        register(new PlaceholderParser() {\n+            @Override\n+            public Text parse(PlaceholderText placeholderText) {\n+                return placeholderText.getAssociatedReceiver().<Text>map(x -> Text.of(((CommandSource) x).getName())).orElse(Text.EMPTY);", "originalCommit": "1337417587c9dc8ddef8a2088e58b5573c938022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4MDQ5NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r418780495", "bodyText": "Yep, I'm meant to filter first.", "author": "dualspiral", "createdAt": "2020-05-01T23:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczODQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczODYxMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r418738610", "bodyText": "Same here", "author": "ST-DDT", "createdAt": "2020-05-01T21:08:08Z", "path": "src/main/java/org/spongepowered/common/registry/type/service/placeholder/PlaceholderParserRegistryModule.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.registry.type.service.placeholder;\n+\n+import org.spongepowered.api.command.CommandSource;\n+import org.spongepowered.api.registry.util.RegisterCatalog;\n+import org.spongepowered.api.service.placeholder.PlaceholderParser;\n+import org.spongepowered.api.service.placeholder.PlaceholderParsers;\n+import org.spongepowered.api.service.placeholder.PlaceholderText;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.world.Locatable;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.registry.SpongeAdditionalCatalogRegistryModule;\n+import org.spongepowered.common.registry.type.AbstractPrefixAlternateCatalogTypeRegistryModule;\n+\n+@RegisterCatalog(PlaceholderParsers.class)\n+public class PlaceholderParserRegistryModule\n+        extends AbstractPrefixAlternateCatalogTypeRegistryModule<PlaceholderParser>\n+        implements SpongeAdditionalCatalogRegistryModule<PlaceholderParser> {\n+\n+    public PlaceholderParserRegistryModule() {\n+        super(\"sponge\");\n+    }\n+\n+    @Override\n+    public boolean allowsApiRegistration() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void registerAdditionalCatalog(PlaceholderParser extraCatalog) {\n+        if (this.getById(extraCatalog.getId()).isPresent()) {\n+            throw new IllegalStateException(\"The ID \" + extraCatalog.getId() + \" has already been registered.\");\n+        }\n+        this.register(extraCatalog);\n+    }\n+\n+    @Override\n+    public void registerDefaults() {\n+        register(new PlaceholderParser() {\n+            @Override\n+            public Text parse(PlaceholderText placeholderText) {\n+                return placeholderText.getAssociatedReceiver().<Text>map(x -> Text.of(((CommandSource) x).getName())).orElse(Text.EMPTY);\n+            }\n+\n+            @Override\n+            public String getId() {\n+                return \"sponge:name\";\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return \"Name\";\n+            }\n+        });\n+        register(new PlaceholderParser() {\n+            @Override\n+            public Text parse(PlaceholderText placeholderText) {\n+                return Text.of(\n+                        placeholderText.getAssociatedReceiver()\n+                            .map(x -> ((Locatable) x).getWorld().getName())", "originalCommit": "1337417587c9dc8ddef8a2088e58b5573c938022", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78c1c0dc6a007d427299f46edb83fd65f316a642", "url": "https://github.com/SpongePowered/Sponge/commit/78c1c0dc6a007d427299f46edb83fd65f316a642", "message": "Implement a basic PlaceholderService\n\n* Add registry for PlaceholderParsers\n* Move economy registry modules into service package", "committedDate": "2020-05-31T14:57:42Z", "type": "forcePushed"}, {"oid": "46c594cb57659f5969211e916b2164fea2cc4e9e", "url": "https://github.com/SpongePowered/Sponge/commit/46c594cb57659f5969211e916b2164fea2cc4e9e", "message": "Implement a basic PlaceholderService\n\n* Add registry for PlaceholderParsers\n* Move economy registry modules into service package", "committedDate": "2020-06-09T16:38:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODQ3MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r437848470", "bodyText": "Nitpick: Could this be reduced down to a buildable method instead of two anonymous classes?", "author": "gabizou", "createdAt": "2020-06-10T04:08:37Z", "path": "src/main/java/org/spongepowered/common/registry/type/service/placeholder/PlaceholderParserRegistryModule.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.registry.type.service.placeholder;\n+\n+import org.spongepowered.api.command.CommandSource;\n+import org.spongepowered.api.registry.util.RegisterCatalog;\n+import org.spongepowered.api.service.placeholder.PlaceholderParser;\n+import org.spongepowered.api.service.placeholder.PlaceholderParsers;\n+import org.spongepowered.api.service.placeholder.PlaceholderText;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.world.Locatable;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.registry.SpongeAdditionalCatalogRegistryModule;\n+import org.spongepowered.common.registry.type.AbstractPrefixAlternateCatalogTypeRegistryModule;\n+\n+@RegisterCatalog(PlaceholderParsers.class)\n+public class PlaceholderParserRegistryModule\n+        extends AbstractPrefixAlternateCatalogTypeRegistryModule<PlaceholderParser>\n+        implements SpongeAdditionalCatalogRegistryModule<PlaceholderParser> {\n+\n+    public PlaceholderParserRegistryModule() {\n+        super(\"sponge\");\n+    }\n+\n+    @Override\n+    public boolean allowsApiRegistration() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void registerAdditionalCatalog(PlaceholderParser extraCatalog) {\n+        if (this.getById(extraCatalog.getId()).isPresent()) {\n+            throw new IllegalStateException(\"The ID \" + extraCatalog.getId() + \" has already been registered.\");\n+        }\n+        this.register(extraCatalog);\n+    }\n+\n+    @Override\n+    public void registerDefaults() {\n+        register(new PlaceholderParser() {\n+            @Override\n+            public Text parse(PlaceholderText placeholderText) {\n+                return placeholderText.getAssociatedObject()", "originalCommit": "46c594cb57659f5969211e916b2164fea2cc4e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNTMwOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r438225309", "bodyText": "It could and I don't really see the harm in it, but I don't necessarily think such a builder will get used by other plugins, hence why I did this. I think it's far more likely they'll implement the methods on their own.\nI could do something such as this:\nPlaceholderParser.builder().plugin(Object).id(String).name(String).executor(Function<PlaceholderText, Text>).build();\n\nwhere the ID is the unnamespaced version?", "author": "dualspiral", "createdAt": "2020-06-10T15:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MjMzNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r438292337", "bodyText": "I've done as I suggested above.", "author": "dualspiral", "createdAt": "2020-06-10T17:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODU4OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r437848588", "bodyText": "Should this be a WeakReference maybe? Just in case?", "author": "gabizou", "createdAt": "2020-06-10T04:09:13Z", "path": "src/main/java/org/spongepowered/common/service/placeholder/SpongePlaceholderService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.service.placeholder;\n+\n+import org.spongepowered.api.command.source.ConsoleSource;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.service.placeholder.PlaceholderParser;\n+import org.spongepowered.api.service.placeholder.PlaceholderService;\n+import org.spongepowered.api.service.placeholder.PlaceholderText;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.common.SpongeImpl;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+public class SpongePlaceholderService implements PlaceholderService {\n+\n+    @Override\n+    public Optional<PlaceholderText> parse(String token) {\n+        return this.parseInternal(token, null, null);\n+    }\n+\n+    @Override\n+    public Optional<PlaceholderText> parse(String token, Object associatedObject) {\n+        return this.parseInternal(token, null, this.createMessageReceiverSupplier(associatedObject));\n+    }\n+\n+    @Override\n+    public Optional<PlaceholderText> parse(String token, String argumentString) {\n+        return this.parseInternal(token, argumentString, null);\n+    }\n+\n+    @Override\n+    public Optional<PlaceholderText> parse(String token, String argumentString, Object associatedObject) {\n+        return this.parseInternal(token, argumentString, this.createMessageReceiverSupplier(associatedObject));\n+    }\n+\n+    @Override\n+    public Optional<PlaceholderParser> getParser(String token) {\n+        return SpongeImpl.getRegistry().getType(PlaceholderParser.class, token);\n+    }\n+\n+    @Override\n+    public PlaceholderText.Builder placeholderBuilder() {\n+        return new SpongePlaceholderTextBuilder();\n+    }\n+\n+    private Supplier<Object> createMessageReceiverSupplier(final Object receiver) {\n+        if (receiver instanceof ConsoleSource) {\n+            return () -> (ConsoleSource) SpongeImpl.getServer();\n+        } else if (receiver instanceof Player) {\n+            final UUID uuid = ((Player) receiver).getUniqueId();\n+            return () -> SpongeImpl.getGame().getServer().getPlayer(uuid).orElse(null);\n+        }\n+\n+        return () -> receiver;", "originalCommit": "46c594cb57659f5969211e916b2164fea2cc4e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNTcxOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r438225718", "bodyText": "Yes, that's a good idea.", "author": "dualspiral", "createdAt": "2020-06-10T15:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5MjE2MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2588#discussion_r438292161", "bodyText": "Just to clarify, I've moved this method into the builder itself. To also make it clear that you can use suppliers to make a PlaceholderText, I've added overloads onto the service itself, such that you can either provide an object, or a Supplier<Object> for the text.", "author": "dualspiral", "createdAt": "2020-06-10T17:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0ODU4OA=="}], "type": "inlineReview"}, {"oid": "789f43f9b6e6113d5f86cc67fdac47994434cac4", "url": "https://github.com/SpongePowered/Sponge/commit/789f43f9b6e6113d5f86cc67fdac47994434cac4", "message": "Remove Placeholder service, support API changes", "committedDate": "2020-06-13T10:40:40Z", "type": "forcePushed"}, {"oid": "f74e5e2151ddbd55c8ef21fc4b7a839531f9f7fc", "url": "https://github.com/SpongePowered/Sponge/commit/f74e5e2151ddbd55c8ef21fc4b7a839531f9f7fc", "message": "Implement placeholders\n\n* Add registry for PlaceholderParsers\n* Move economy registry modules into service package", "committedDate": "2020-06-14T09:29:35Z", "type": "commit"}, {"oid": "f74e5e2151ddbd55c8ef21fc4b7a839531f9f7fc", "url": "https://github.com/SpongePowered/Sponge/commit/f74e5e2151ddbd55c8ef21fc4b7a839531f9f7fc", "message": "Implement placeholders\n\n* Add registry for PlaceholderParsers\n* Move economy registry modules into service package", "committedDate": "2020-06-14T09:29:35Z", "type": "forcePushed"}]}